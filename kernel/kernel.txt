
kernel32.elf:     file format elf32-i386


Disassembly of section .text:

c0102000 <exp>:

/**
	Exponential-Function
**/
double exp(double x)
{
c0102000:	55                   	push   %ebp
c0102001:	89 e5                	mov    %esp,%ebp
c0102003:	83 ec 48             	sub    $0x48,%esp
c0102006:	8b 45 08             	mov    0x8(%ebp),%eax
c0102009:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010200c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010200f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    double sigma = 0;
c0102012:	d9 ee                	fldz   
c0102014:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 150; i++)
c0102017:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010201e:	eb 4e                	jmp    c010206e <exp+0x6e>
        sigma += powi(x, i ) / factorial(i);
c0102020:	dd 45 e0             	fldl   -0x20(%ebp)
c0102023:	d9 7d de             	fnstcw -0x22(%ebp)
c0102026:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c010202a:	b4 0c                	mov    $0xc,%ah
c010202c:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c0102030:	d9 6d dc             	fldcw  -0x24(%ebp)
c0102033:	db 5d d8             	fistpl -0x28(%ebp)
c0102036:	d9 6d de             	fldcw  -0x22(%ebp)
c0102039:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010203c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010203f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102043:	89 04 24             	mov    %eax,(%esp)
c0102046:	e8 3a 02 00 00       	call   c0102285 <powi>
c010204b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010204e:	db 45 d8             	fildl  -0x28(%ebp)
c0102051:	dd 5d d0             	fstpl  -0x30(%ebp)
c0102054:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102057:	89 04 24             	mov    %eax,(%esp)
c010205a:	e8 68 02 00 00       	call   c01022c7 <factorial>
c010205f:	dc 7d d0             	fdivrl -0x30(%ebp)
c0102062:	dd 45 f0             	fldl   -0x10(%ebp)
c0102065:	de c1                	faddp  %st,%st(1)
c0102067:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double exp(double x)
{
    double sigma = 0;
    int i;
    for (i = 0; i < 150; i++)
c010206a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010206e:	81 7d ec 95 00 00 00 	cmpl   $0x95,-0x14(%ebp)
c0102075:	7e a9                	jle    c0102020 <exp+0x20>
        sigma += powi(x, i ) / factorial(i);
    return sigma;
c0102077:	dd 45 f0             	fldl   -0x10(%ebp)
}
c010207a:	c9                   	leave  
c010207b:	c3                   	ret    

c010207c <ln>:

/**
	Natural logarithm
**/
double ln(double y)
{
c010207c:	55                   	push   %ebp
c010207d:	89 e5                	mov    %esp,%ebp
c010207f:	83 ec 58             	sub    $0x58,%esp
c0102082:	8b 45 08             	mov    0x8(%ebp),%eax
c0102085:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0102088:	8b 45 0c             	mov    0xc(%ebp),%eax
c010208b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    double x = (y - 1) / (y + 1);
c010208e:	dd 45 d0             	fldl   -0x30(%ebp)
c0102091:	d9 e8                	fld1   
c0102093:	de e9                	fsubrp %st,%st(1)
c0102095:	dd 45 d0             	fldl   -0x30(%ebp)
c0102098:	d9 e8                	fld1   
c010209a:	de c1                	faddp  %st,%st(1)
c010209c:	de f9                	fdivrp %st,%st(1)
c010209e:	dd 5d e0             	fstpl  -0x20(%ebp)
    double sigma = 0;
c01020a1:	d9 ee                	fldz   
c01020a3:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 150; i++)
c01020a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01020ad:	eb 55                	jmp    c0102104 <ln+0x88>
        sigma += powi(x, 2*i+1) /(2*i+1);
c01020af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01020b2:	01 c0                	add    %eax,%eax
c01020b4:	8d 50 01             	lea    0x1(%eax),%edx
c01020b7:	dd 45 e0             	fldl   -0x20(%ebp)
c01020ba:	d9 7d ce             	fnstcw -0x32(%ebp)
c01020bd:	0f b7 45 ce          	movzwl -0x32(%ebp),%eax
c01020c1:	b4 0c                	mov    $0xc,%ah
c01020c3:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
c01020c7:	d9 6d cc             	fldcw  -0x34(%ebp)
c01020ca:	db 5d c8             	fistpl -0x38(%ebp)
c01020cd:	d9 6d ce             	fldcw  -0x32(%ebp)
c01020d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01020d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01020d7:	89 04 24             	mov    %eax,(%esp)
c01020da:	e8 a6 01 00 00       	call   c0102285 <powi>
c01020df:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01020e2:	01 d2                	add    %edx,%edx
c01020e4:	83 c2 01             	add    $0x1,%edx
c01020e7:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01020ea:	89 c2                	mov    %eax,%edx
c01020ec:	c1 fa 1f             	sar    $0x1f,%edx
c01020ef:	f7 7d c4             	idivl  -0x3c(%ebp)
c01020f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01020f5:	db 45 c8             	fildl  -0x38(%ebp)
c01020f8:	dd 45 f0             	fldl   -0x10(%ebp)
c01020fb:	de c1                	faddp  %st,%st(1)
c01020fd:	dd 5d f0             	fstpl  -0x10(%ebp)
double ln(double y)
{
    double x = (y - 1) / (y + 1);
    double sigma = 0;
    int i;
    for (i = 0; i < 150; i++)
c0102100:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0102104:	81 7d ec 95 00 00 00 	cmpl   $0x95,-0x14(%ebp)
c010210b:	7e a2                	jle    c01020af <ln+0x33>
        sigma += powi(x, 2*i+1) /(2*i+1);
    return 2*sigma;
c010210d:	dd 45 f0             	fldl   -0x10(%ebp)
c0102110:	d8 c0                	fadd   %st(0),%st
}
c0102112:	c9                   	leave  
c0102113:	c3                   	ret    

c0102114 <pow>:

/**
	Power for real exponents
**/
double pow(double base, double exponent)
{
c0102114:	55                   	push   %ebp
c0102115:	89 e5                	mov    %esp,%ebp
c0102117:	83 ec 28             	sub    $0x28,%esp
c010211a:	8b 45 08             	mov    0x8(%ebp),%eax
c010211d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0102120:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102123:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102126:	8b 45 10             	mov    0x10(%ebp),%eax
c0102129:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010212c:	8b 45 14             	mov    0x14(%ebp),%eax
c010212f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return exp(exponent * ln(base));
c0102132:	dd 45 f0             	fldl   -0x10(%ebp)
c0102135:	dd 1c 24             	fstpl  (%esp)
c0102138:	e8 3f ff ff ff       	call   c010207c <ln>
c010213d:	dc 4d e8             	fmull  -0x18(%ebp)
c0102140:	dd 1c 24             	fstpl  (%esp)
c0102143:	e8 b8 fe ff ff       	call   c0102000 <exp>
}
c0102148:	c9                   	leave  
c0102149:	c3                   	ret    

c010214a <sin>:

/**
	Sine
**/
double sin(double x)
{
c010214a:	55                   	push   %ebp
c010214b:	89 e5                	mov    %esp,%ebp
c010214d:	53                   	push   %ebx
c010214e:	83 ec 44             	sub    $0x44,%esp
c0102151:	8b 45 08             	mov    0x8(%ebp),%eax
c0102154:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
c010215a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    double sigma = 0;
c010215d:	d9 ee                	fldz   
c010215f:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 20; i++)
c0102162:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0102169:	eb 70                	jmp    c01021db <sin+0x91>
        sigma += ((powi(-1, i) * powi(x, 2 * i + 1)) / factorial(2 * i + 1));
c010216b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010216e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102172:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
c0102179:	e8 07 01 00 00       	call   c0102285 <powi>
c010217e:	89 c3                	mov    %eax,%ebx
c0102180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102183:	01 c0                	add    %eax,%eax
c0102185:	8d 50 01             	lea    0x1(%eax),%edx
c0102188:	dd 45 e0             	fldl   -0x20(%ebp)
c010218b:	d9 7d de             	fnstcw -0x22(%ebp)
c010218e:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c0102192:	b4 0c                	mov    $0xc,%ah
c0102194:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c0102198:	d9 6d dc             	fldcw  -0x24(%ebp)
c010219b:	db 5d d8             	fistpl -0x28(%ebp)
c010219e:	d9 6d de             	fldcw  -0x22(%ebp)
c01021a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01021a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01021a8:	89 04 24             	mov    %eax,(%esp)
c01021ab:	e8 d5 00 00 00       	call   c0102285 <powi>
c01021b0:	0f af c3             	imul   %ebx,%eax
c01021b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01021b6:	db 45 d8             	fildl  -0x28(%ebp)
c01021b9:	dd 5d d0             	fstpl  -0x30(%ebp)
c01021bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01021bf:	01 c0                	add    %eax,%eax
c01021c1:	83 c0 01             	add    $0x1,%eax
c01021c4:	89 04 24             	mov    %eax,(%esp)
c01021c7:	e8 fb 00 00 00       	call   c01022c7 <factorial>
c01021cc:	dc 7d d0             	fdivrl -0x30(%ebp)
c01021cf:	dd 45 f0             	fldl   -0x10(%ebp)
c01021d2:	de c1                	faddp  %st,%st(1)
c01021d4:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double sin(double x)
{
    double sigma = 0;
    int i;
    for (i = 0; i < 20; i++)
c01021d7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01021db:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c01021df:	7e 8a                	jle    c010216b <sin+0x21>
        sigma += ((powi(-1, i) * powi(x, 2 * i + 1)) / factorial(2 * i + 1));
    return sigma;
c01021e1:	dd 45 f0             	fldl   -0x10(%ebp)
}
c01021e4:	83 c4 44             	add    $0x44,%esp
c01021e7:	5b                   	pop    %ebx
c01021e8:	5d                   	pop    %ebp
c01021e9:	c3                   	ret    

c01021ea <cos>:

/**
	Cosine
**/
double cos(double x)
{
c01021ea:	55                   	push   %ebp
c01021eb:	89 e5                	mov    %esp,%ebp
c01021ed:	53                   	push   %ebx
c01021ee:	83 ec 44             	sub    $0x44,%esp
c01021f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01021f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01021f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01021fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    double sigma = 0;
c01021fd:	d9 ee                	fldz   
c01021ff:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 20; i++)
c0102202:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0102209:	eb 6b                	jmp    c0102276 <cos+0x8c>
        sigma += ((powi(-1, i) * powi(x, 2 * i)) / factorial(2 * i));
c010220b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010220e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102212:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
c0102219:	e8 67 00 00 00       	call   c0102285 <powi>
c010221e:	89 c3                	mov    %eax,%ebx
c0102220:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102223:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0102226:	dd 45 e0             	fldl   -0x20(%ebp)
c0102229:	d9 7d de             	fnstcw -0x22(%ebp)
c010222c:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c0102230:	b4 0c                	mov    $0xc,%ah
c0102232:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c0102236:	d9 6d dc             	fldcw  -0x24(%ebp)
c0102239:	db 5d d8             	fistpl -0x28(%ebp)
c010223c:	d9 6d de             	fldcw  -0x22(%ebp)
c010223f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0102242:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102246:	89 04 24             	mov    %eax,(%esp)
c0102249:	e8 37 00 00 00       	call   c0102285 <powi>
c010224e:	0f af c3             	imul   %ebx,%eax
c0102251:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0102254:	db 45 d8             	fildl  -0x28(%ebp)
c0102257:	dd 5d d0             	fstpl  -0x30(%ebp)
c010225a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010225d:	01 c0                	add    %eax,%eax
c010225f:	89 04 24             	mov    %eax,(%esp)
c0102262:	e8 60 00 00 00       	call   c01022c7 <factorial>
c0102267:	dc 7d d0             	fdivrl -0x30(%ebp)
c010226a:	dd 45 f0             	fldl   -0x10(%ebp)
c010226d:	de c1                	faddp  %st,%st(1)
c010226f:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double cos(double x)
{
    double sigma = 0;
    int i;
    for (i = 0; i < 20; i++)
c0102272:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0102276:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c010227a:	7e 8f                	jle    c010220b <cos+0x21>
        sigma += ((powi(-1, i) * powi(x, 2 * i)) / factorial(2 * i));
    return sigma;
c010227c:	dd 45 f0             	fldl   -0x10(%ebp)
}
c010227f:	83 c4 44             	add    $0x44,%esp
c0102282:	5b                   	pop    %ebx
c0102283:	5d                   	pop    %ebp
c0102284:	c3                   	ret    

c0102285 <powi>:

/**
	Power for integer exponents
**/
int powi(int base, int exponent)
{
c0102285:	55                   	push   %ebp
c0102286:	89 e5                	mov    %esp,%ebp
c0102288:	83 ec 10             	sub    $0x10,%esp
    int result = base;
c010228b:	8b 45 08             	mov    0x8(%ebp),%eax
c010228e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int i;

    if (exponent == 0)
c0102291:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0102295:	75 09                	jne    c01022a0 <powi+0x1b>
    {
        result = 1;
c0102297:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
c010229e:	eb 22                	jmp    c01022c2 <powi+0x3d>
    }
    else
    {
        for (i = 0; i < exponent - 1; ++i)
c01022a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01022a7:	eb 0e                	jmp    c01022b7 <powi+0x32>
        {
            result *= base;
c01022a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022ac:	0f af 45 08          	imul   0x8(%ebp),%eax
c01022b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    {
        result = 1;
    }
    else
    {
        for (i = 0; i < exponent - 1; ++i)
c01022b3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01022b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01022ba:	83 e8 01             	sub    $0x1,%eax
c01022bd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01022c0:	7f e7                	jg     c01022a9 <powi+0x24>
        {
            result *= base;
        }
    }

    return result;
c01022c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01022c5:	c9                   	leave  
c01022c6:	c3                   	ret    

c01022c7 <factorial>:

/**
	Factorial function
**/
double factorial(long n)
{
c01022c7:	55                   	push   %ebp
c01022c8:	89 e5                	mov    %esp,%ebp
c01022ca:	83 ec 10             	sub    $0x10,%esp
    double res = 1;
c01022cd:	d9 e8                	fld1   
c01022cf:	dd 5d f8             	fstpl  -0x8(%ebp)
    int i;
    for (i = 1; i <= n; i++)
c01022d2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01022d9:	eb 0f                	jmp    c01022ea <factorial+0x23>
        res *= i;
c01022db:	db 45 f4             	fildl  -0xc(%ebp)
c01022de:	dd 45 f8             	fldl   -0x8(%ebp)
c01022e1:	de c9                	fmulp  %st,%st(1)
c01022e3:	dd 5d f8             	fstpl  -0x8(%ebp)
**/
double factorial(long n)
{
    double res = 1;
    int i;
    for (i = 1; i <= n; i++)
c01022e6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01022ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01022ed:	3b 45 08             	cmp    0x8(%ebp),%eax
c01022f0:	7e e9                	jle    c01022db <factorial+0x14>
        res *= i;
    return res;
c01022f2:	dd 45 f8             	fldl   -0x8(%ebp)
}
c01022f5:	c9                   	leave  
c01022f6:	c3                   	ret    

c01022f7 <abs>:

/**
	Absolute value
**/
int abs(int x)
{
c01022f7:	55                   	push   %ebp
c01022f8:	89 e5                	mov    %esp,%ebp
    if (x < 0)
c01022fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01022fe:	79 07                	jns    c0102307 <abs+0x10>
    {
        return -x;
c0102300:	8b 45 08             	mov    0x8(%ebp),%eax
c0102303:	f7 d8                	neg    %eax
c0102305:	eb 03                	jmp    c010230a <abs+0x13>
    }
    else
    {
        return x;
c0102307:	8b 45 08             	mov    0x8(%ebp),%eax
    }
}
c010230a:	5d                   	pop    %ebp
c010230b:	c3                   	ret    

c010230c <bit_scan_forward>:

unsigned int bit_scan_forward(unsigned int i)
{
c010230c:	55                   	push   %ebp
c010230d:	89 e5                	mov    %esp,%ebp
c010230f:	53                   	push   %ebx
c0102310:	83 ec 10             	sub    $0x10,%esp
    unsigned int j;

    for (j = 0; j < 32; j++)
c0102313:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010231a:	eb 20                	jmp    c010233c <bit_scan_forward+0x30>
    {
        if (i & (1 << j))
c010231c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010231f:	ba 01 00 00 00       	mov    $0x1,%edx
c0102324:	89 d3                	mov    %edx,%ebx
c0102326:	89 c1                	mov    %eax,%ecx
c0102328:	d3 e3                	shl    %cl,%ebx
c010232a:	89 d8                	mov    %ebx,%eax
c010232c:	23 45 08             	and    0x8(%ebp),%eax
c010232f:	85 c0                	test   %eax,%eax
c0102331:	74 05                	je     c0102338 <bit_scan_forward+0x2c>
        {
            return j;
c0102333:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102336:	eb 0f                	jmp    c0102347 <bit_scan_forward+0x3b>

unsigned int bit_scan_forward(unsigned int i)
{
    unsigned int j;

    for (j = 0; j < 32; j++)
c0102338:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c010233c:	83 7d f8 1f          	cmpl   $0x1f,-0x8(%ebp)
c0102340:	76 da                	jbe    c010231c <bit_scan_forward+0x10>
        if (i & (1 << j))
        {
            return j;
        }
    }
    return -1;
c0102342:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0102347:	83 c4 10             	add    $0x10,%esp
c010234a:	5b                   	pop    %ebx
c010234b:	5d                   	pop    %ebp
c010234c:	c3                   	ret    

c010234d <itoa_ex>:
 *  @param width 	Field width
 *  @return pointer to buffer
 */

char * itoa_ex(unsigned int value, char * str, int base, int flags, int width)
{
c010234d:	55                   	push   %ebp
c010234e:	89 e5                	mov    %esp,%ebp
c0102350:	83 ec 48             	sub    $0x48,%esp
    char *result = str;
c0102353:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102356:	89 45 e8             	mov    %eax,-0x18(%ebp)
    unsigned int size;
    unsigned int len = 0;
c0102359:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    unsigned int temp = 0;
c0102360:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int negative = 0;
c0102367:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    const char *digits = "0123456789ABCDEF";
c010236e:	c7 45 ec 00 10 11 c0 	movl   $0xc0111000,-0x14(%ebp)

    if (flags & SMALL)
c0102375:	8b 45 14             	mov    0x14(%ebp),%eax
c0102378:	83 e0 20             	and    $0x20,%eax
c010237b:	85 c0                	test   %eax,%eax
c010237d:	74 07                	je     c0102386 <itoa_ex+0x39>
    {
        digits = "0123456789abcdef";
c010237f:	c7 45 ec 11 10 11 c0 	movl   $0xc0111011,-0x14(%ebp)
    {
        value = - value;
        ++negative;
    }

    temp = value;
c0102386:	8b 45 08             	mov    0x8(%ebp),%eax
c0102389:	89 45 f0             	mov    %eax,-0x10(%ebp)
    do
    {
        temp /= base;
c010238c:	8b 55 10             	mov    0x10(%ebp),%edx
c010238f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0102392:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102395:	ba 00 00 00 00       	mov    $0x0,%edx
c010239a:	f7 75 d4             	divl   -0x2c(%ebp)
c010239d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ++len;
c01023a0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    }
    while (temp);
c01023a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01023a8:	75 e2                	jne    c010238c <itoa_ex+0x3f>
    size = len;
c01023aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023ad:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if (!(flags & LEFT) && !(flags & ZEROPAD))
c01023b0:	8b 45 14             	mov    0x14(%ebp),%eax
c01023b3:	83 e0 10             	and    $0x10,%eax
c01023b6:	85 c0                	test   %eax,%eax
c01023b8:	75 27                	jne    c01023e1 <itoa_ex+0x94>
c01023ba:	8b 45 14             	mov    0x14(%ebp),%eax
c01023bd:	83 e0 01             	and    $0x1,%eax
c01023c0:	85 c0                	test   %eax,%eax
c01023c2:	75 1d                	jne    c01023e1 <itoa_ex+0x94>
        while (size < width--)
c01023c4:	eb 0a                	jmp    c01023d0 <itoa_ex+0x83>
            *str++ = ' ';
c01023c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01023c9:	c6 00 20             	movb   $0x20,(%eax)
c01023cc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    }
    while (temp);
    size = len;

    if (!(flags & LEFT) && !(flags & ZEROPAD))
        while (size < width--)
c01023d0:	8b 45 18             	mov    0x18(%ebp),%eax
c01023d3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01023d6:	0f 97 c0             	seta   %al
c01023d9:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c01023dd:	84 c0                	test   %al,%al
c01023df:	75 e5                	jne    c01023c6 <itoa_ex+0x79>
            *str++ = ' ';

    if (negative)
c01023e1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01023e5:	74 0c                	je     c01023f3 <itoa_ex+0xa6>
    {
        *str++ = '-';
c01023e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01023ea:	c6 00 2d             	movb   $0x2d,(%eax)
c01023ed:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c01023f1:	eb 14                	jmp    c0102407 <itoa_ex+0xba>
    }
    else if (flags & PLUS)
c01023f3:	8b 45 14             	mov    0x14(%ebp),%eax
c01023f6:	83 e0 04             	and    $0x4,%eax
c01023f9:	85 c0                	test   %eax,%eax
c01023fb:	74 0a                	je     c0102407 <itoa_ex+0xba>
    {
        *str++ = '+';
c01023fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102400:	c6 00 2b             	movb   $0x2b,(%eax)
c0102403:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    }
    if (flags & SPECIAL)
c0102407:	8b 45 14             	mov    0x14(%ebp),%eax
c010240a:	83 e0 40             	and    $0x40,%eax
c010240d:	85 c0                	test   %eax,%eax
c010240f:	74 18                	je     c0102429 <itoa_ex+0xdc>
    {
        *str++ = '0';
c0102411:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102414:	c6 00 30             	movb   $0x30,(%eax)
c0102417:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        *str++ = 'x';
c010241b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010241e:	c6 00 78             	movb   $0x78,(%eax)
c0102421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        width -= 2;
c0102425:	83 6d 18 02          	subl   $0x2,0x18(%ebp)
    }

    if (!(flags & LEFT) && (flags & ZEROPAD))
c0102429:	8b 45 14             	mov    0x14(%ebp),%eax
c010242c:	83 e0 10             	and    $0x10,%eax
c010242f:	85 c0                	test   %eax,%eax
c0102431:	75 27                	jne    c010245a <itoa_ex+0x10d>
c0102433:	8b 45 14             	mov    0x14(%ebp),%eax
c0102436:	83 e0 01             	and    $0x1,%eax
c0102439:	85 c0                	test   %eax,%eax
c010243b:	74 1d                	je     c010245a <itoa_ex+0x10d>
        while (size < width--)
c010243d:	eb 0a                	jmp    c0102449 <itoa_ex+0xfc>
            *str++ = '0';
c010243f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102442:	c6 00 30             	movb   $0x30,(%eax)
c0102445:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        *str++ = 'x';
        width -= 2;
    }

    if (!(flags & LEFT) && (flags & ZEROPAD))
        while (size < width--)
c0102449:	8b 45 18             	mov    0x18(%ebp),%eax
c010244c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010244f:	0f 97 c0             	seta   %al
c0102452:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c0102456:	84 c0                	test   %al,%al
c0102458:	75 e5                	jne    c010243f <itoa_ex+0xf2>
            *str++ = '0';

    do
    {
        int power = powi(base, --len);
c010245a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010245e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102461:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102465:	8b 45 10             	mov    0x10(%ebp),%eax
c0102468:	89 04 24             	mov    %eax,(%esp)
c010246b:	e8 15 fe ff ff       	call   c0102285 <powi>
c0102470:	89 45 dc             	mov    %eax,-0x24(%ebp)
        int digit = value / power;
c0102473:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102476:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0102479:	8b 45 08             	mov    0x8(%ebp),%eax
c010247c:	ba 00 00 00 00       	mov    $0x0,%edx
c0102481:	f7 75 d4             	divl   -0x2c(%ebp)
c0102484:	89 45 d8             	mov    %eax,-0x28(%ebp)

        *str++ = digits[digit];
c0102487:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010248a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010248d:	01 d0                	add    %edx,%eax
c010248f:	0f b6 10             	movzbl (%eax),%edx
c0102492:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102495:	88 10                	mov    %dl,(%eax)
c0102497:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

        value -= digit * power;
c010249b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010249e:	0f af 45 dc          	imul   -0x24(%ebp),%eax
c01024a2:	29 45 08             	sub    %eax,0x8(%ebp)
    }
    while (len > 0);
c01024a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01024a9:	75 af                	jne    c010245a <itoa_ex+0x10d>

    while (size < width--)
c01024ab:	eb 0a                	jmp    c01024b7 <itoa_ex+0x16a>
        *str++ = ' ';
c01024ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01024b0:	c6 00 20             	movb   $0x20,(%eax)
c01024b3:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

        value -= digit * power;
    }
    while (len > 0);

    while (size < width--)
c01024b7:	8b 45 18             	mov    0x18(%ebp),%eax
c01024ba:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01024bd:	0f 97 c0             	seta   %al
c01024c0:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c01024c4:	84 c0                	test   %al,%al
c01024c6:	75 e5                	jne    c01024ad <itoa_ex+0x160>
        *str++ = ' ';

    *str++ = '\0';
c01024c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01024cb:	c6 00 00             	movb   $0x0,(%eax)
c01024ce:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

    return result;
c01024d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01024d5:	c9                   	leave  
c01024d6:	c3                   	ret    

c01024d7 <itoa>:
 *  @param base     numerical base (10 = decimal, 16 = hexadecimal)
 *  @return pointer to buffer
 */

inline char * itoa(unsigned int value, char * str, int base)
{
c01024d7:	55                   	push   %ebp
c01024d8:	89 e5                	mov    %esp,%ebp
c01024da:	83 ec 28             	sub    $0x28,%esp
    return itoa_ex(value, str, base, 0, 1);
c01024dd:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01024e4:	00 
c01024e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01024ec:	00 
c01024ed:	8b 45 10             	mov    0x10(%ebp),%eax
c01024f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01024f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01024f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fe:	89 04 24             	mov    %eax,(%esp)
c0102501:	e8 47 fe ff ff       	call   c010234d <itoa_ex>
}
c0102506:	c9                   	leave  
c0102507:	c3                   	ret    

c0102508 <atoi>:
 *  @param  str  input string
 *  @return integer value
 */

int atoi(const char *str)
{
c0102508:	55                   	push   %ebp
c0102509:	89 e5                	mov    %esp,%ebp
c010250b:	83 ec 28             	sub    $0x28,%esp
    int result = 0;
c010250e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int length = 0;
c0102515:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    while (isdigit(*str++))
c010251c:	eb 04                	jmp    c0102522 <atoi+0x1a>
        ++length;
c010251e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
int atoi(const char *str)
{
    int result = 0;
    int length = 0;

    while (isdigit(*str++))
c0102522:	8b 45 08             	mov    0x8(%ebp),%eax
c0102525:	0f b6 00             	movzbl (%eax),%eax
c0102528:	0f be c0             	movsbl %al,%eax
c010252b:	83 e8 30             	sub    $0x30,%eax
c010252e:	83 f8 09             	cmp    $0x9,%eax
c0102531:	0f 96 c0             	setbe  %al
c0102534:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0102538:	84 c0                	test   %al,%al
c010253a:	75 e2                	jne    c010251e <atoi+0x16>
        ++length;

    str -= length + 1;
c010253c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010253f:	f7 d0                	not    %eax
c0102541:	01 45 08             	add    %eax,0x8(%ebp)

    while (length > 0)
c0102544:	eb 2d                	jmp    c0102573 <atoi+0x6b>
        result += powi(10, --length) * (*str++ - '0');
c0102546:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
c010254a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010254d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102551:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0102558:	e8 28 fd ff ff       	call   c0102285 <powi>
c010255d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102560:	0f b6 12             	movzbl (%edx),%edx
c0102563:	0f be d2             	movsbl %dl,%edx
c0102566:	83 ea 30             	sub    $0x30,%edx
c0102569:	0f af c2             	imul   %edx,%eax
c010256c:	01 45 f4             	add    %eax,-0xc(%ebp)
c010256f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (isdigit(*str++))
        ++length;

    str -= length + 1;

    while (length > 0)
c0102573:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102577:	7f cd                	jg     c0102546 <atoi+0x3e>
        result += powi(10, --length) * (*str++ - '0');

    return result;
c0102579:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010257c:	c9                   	leave  
c010257d:	c3                   	ret    

c010257e <list_create>:
/**
 *  @brief Creates a linked list.
 *  @return new list
 */
list_t *list_create(void)
{
c010257e:	55                   	push   %ebp
c010257f:	89 e5                	mov    %esp,%ebp
c0102581:	83 ec 28             	sub    $0x28,%esp
    list_t *list = (list_t *) malloc(sizeof(list_t));
c0102584:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010258b:	e8 16 b1 00 00       	call   c010d6a6 <malloc>
c0102590:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct list_node *dummy = (struct list_node *) malloc(sizeof(struct list_node));
c0102593:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010259a:	e8 07 b1 00 00       	call   c010d6a6 <malloc>
c010259f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list->head = dummy;
c01025a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01025a8:	89 50 04             	mov    %edx,0x4(%eax)
    dummy->next = dummy;
c01025ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01025b1:	89 10                	mov    %edx,(%eax)
    dummy->prev = dummy;
c01025b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01025b9:	89 50 04             	mov    %edx,0x4(%eax)
    dummy->element = (void *) 0;
c01025bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025bf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    unlock(&list->lock);
c01025c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025c9:	89 04 24             	mov    %eax,(%esp)
c01025cc:	e8 5f d9 00 00       	call   c010ff30 <unlock>
    return list;
c01025d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01025d4:	c9                   	leave  
c01025d5:	c3                   	ret    

c01025d6 <list_destroy>:
/**
 *  @brief Destroys a list.
 *  @param list the list to be destroied
 */
void list_destroy(list_t *list)
{
c01025d6:	55                   	push   %ebp
c01025d7:	89 e5                	mov    %esp,%ebp
c01025d9:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = list->head->next;
c01025dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01025df:	8b 40 04             	mov    0x4(%eax),%eax
c01025e2:	8b 00                	mov    (%eax),%eax
c01025e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct list_node *head = list->head;
c01025e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ea:	8b 40 04             	mov    0x4(%eax),%eax
c01025ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (node != head)
c01025f0:	eb 13                	jmp    c0102605 <list_destroy+0x2f>
    {
        node = node->next;
c01025f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025f5:	8b 00                	mov    (%eax),%eax
c01025f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        free(node);
c01025fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025fd:	89 04 24             	mov    %eax,(%esp)
c0102600:	e8 88 b1 00 00       	call   c010d78d <free>
 */
void list_destroy(list_t *list)
{
    struct list_node *node = list->head->next;
    struct list_node *head = list->head;
    while (node != head)
c0102605:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102608:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010260b:	75 e5                	jne    c01025f2 <list_destroy+0x1c>
    {
        node = node->next;
        free(node);
    }

    free(list);
c010260d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102610:	89 04 24             	mov    %eax,(%esp)
c0102613:	e8 75 b1 00 00       	call   c010d78d <free>
    return;
c0102618:	90                   	nop
}
c0102619:	c9                   	leave  
c010261a:	c3                   	ret    

c010261b <list_splice>:
 *  @param start Start of the element chain
 *  @param end end of the element chain
 *  @param target Target place
 */
void list_splice(struct list_node *start, struct list_node *end, struct list_node *target)
{
c010261b:	55                   	push   %ebp
c010261c:	89 e5                	mov    %esp,%ebp
    start->prev->next = end->next;
c010261e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102621:	8b 40 04             	mov    0x4(%eax),%eax
c0102624:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102627:	8b 12                	mov    (%edx),%edx
c0102629:	89 10                	mov    %edx,(%eax)
    end->next->prev = start->prev;
c010262b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010262e:	8b 00                	mov    (%eax),%eax
c0102630:	8b 55 08             	mov    0x8(%ebp),%edx
c0102633:	8b 52 04             	mov    0x4(%edx),%edx
c0102636:	89 50 04             	mov    %edx,0x4(%eax)
    start->prev = target;
c0102639:	8b 45 08             	mov    0x8(%ebp),%eax
c010263c:	8b 55 10             	mov    0x10(%ebp),%edx
c010263f:	89 50 04             	mov    %edx,0x4(%eax)
    end->next = target->next;
c0102642:	8b 45 10             	mov    0x10(%ebp),%eax
c0102645:	8b 10                	mov    (%eax),%edx
c0102647:	8b 45 0c             	mov    0xc(%ebp),%eax
c010264a:	89 10                	mov    %edx,(%eax)
    target->next->prev = end;
c010264c:	8b 45 10             	mov    0x10(%ebp),%eax
c010264f:	8b 00                	mov    (%eax),%eax
c0102651:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102654:	89 50 04             	mov    %edx,0x4(%eax)
    target->next = start;
c0102657:	8b 45 10             	mov    0x10(%ebp),%eax
c010265a:	8b 55 08             	mov    0x8(%ebp),%edx
c010265d:	89 10                	mov    %edx,(%eax)
    return;
c010265f:	90                   	nop
}
c0102660:	5d                   	pop    %ebp
c0102661:	c3                   	ret    

c0102662 <list_push_back>:


list_t *list_push_back(list_t *list, void *element)
{
c0102662:	55                   	push   %ebp
c0102663:	89 e5                	mov    %esp,%ebp
c0102665:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c0102668:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010266f:	e8 32 b0 00 00       	call   c010d6a6 <malloc>
c0102674:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c0102677:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010267a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010267d:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c0102680:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102683:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102686:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c0102688:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010268b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010268e:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, list->head->prev);
c0102691:	8b 45 08             	mov    0x8(%ebp),%eax
c0102694:	8b 40 04             	mov    0x4(%eax),%eax
c0102697:	8b 40 04             	mov    0x4(%eax),%eax
c010269a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010269e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026a8:	89 04 24             	mov    %eax,(%esp)
c01026ab:	e8 6b ff ff ff       	call   c010261b <list_splice>
    return list;
c01026b0:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01026b3:	c9                   	leave  
c01026b4:	c3                   	ret    

c01026b5 <list_push_front>:

list_t *list_push_front(list_t *list, void *element)
{
c01026b5:	55                   	push   %ebp
c01026b6:	89 e5                	mov    %esp,%ebp
c01026b8:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c01026bb:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c01026c2:	e8 df af 00 00       	call   c010d6a6 <malloc>
c01026c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c01026ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026cd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01026d0:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c01026d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01026d9:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c01026db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026de:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01026e1:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, list->head);
c01026e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e7:	8b 40 04             	mov    0x4(%eax),%eax
c01026ea:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026f8:	89 04 24             	mov    %eax,(%esp)
c01026fb:	e8 1b ff ff ff       	call   c010261b <list_splice>
    return list;
c0102700:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102703:	c9                   	leave  
c0102704:	c3                   	ret    

c0102705 <list_remove_node>:

void *list_remove_node(struct list_node *node)
{
c0102705:	55                   	push   %ebp
c0102706:	89 e5                	mov    %esp,%ebp
c0102708:	83 ec 28             	sub    $0x28,%esp
    void *element = node->element;
c010270b:	8b 45 08             	mov    0x8(%ebp),%eax
c010270e:	8b 40 08             	mov    0x8(%eax),%eax
c0102711:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->prev->next = node->next;
c0102714:	8b 45 08             	mov    0x8(%ebp),%eax
c0102717:	8b 40 04             	mov    0x4(%eax),%eax
c010271a:	8b 55 08             	mov    0x8(%ebp),%edx
c010271d:	8b 12                	mov    (%edx),%edx
c010271f:	89 10                	mov    %edx,(%eax)
    node->next->prev = node->prev;
c0102721:	8b 45 08             	mov    0x8(%ebp),%eax
c0102724:	8b 00                	mov    (%eax),%eax
c0102726:	8b 55 08             	mov    0x8(%ebp),%edx
c0102729:	8b 52 04             	mov    0x4(%edx),%edx
c010272c:	89 50 04             	mov    %edx,0x4(%eax)
    free(node);
c010272f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102732:	89 04 24             	mov    %eax,(%esp)
c0102735:	e8 53 b0 00 00       	call   c010d78d <free>
    return element;
c010273a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010273d:	c9                   	leave  
c010273e:	c3                   	ret    

c010273f <list_pop_back>:

void *list_pop_back(list_t *list)
{
c010273f:	55                   	push   %ebp
c0102740:	89 e5                	mov    %esp,%ebp
c0102742:	83 ec 28             	sub    $0x28,%esp
    struct list_node *last = list->head->prev;
c0102745:	8b 45 08             	mov    0x8(%ebp),%eax
c0102748:	8b 40 04             	mov    0x4(%eax),%eax
c010274b:	8b 40 04             	mov    0x4(%eax),%eax
c010274e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *element = last->element;
c0102751:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102754:	8b 40 08             	mov    0x8(%eax),%eax
c0102757:	89 45 f0             	mov    %eax,-0x10(%ebp)
    last->prev->next = last->next;
c010275a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010275d:	8b 40 04             	mov    0x4(%eax),%eax
c0102760:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102763:	8b 12                	mov    (%edx),%edx
c0102765:	89 10                	mov    %edx,(%eax)
    last->next->prev = last->prev;
c0102767:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010276a:	8b 00                	mov    (%eax),%eax
c010276c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010276f:	8b 52 04             	mov    0x4(%edx),%edx
c0102772:	89 50 04             	mov    %edx,0x4(%eax)
    free(last);
c0102775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102778:	89 04 24             	mov    %eax,(%esp)
c010277b:	e8 0d b0 00 00       	call   c010d78d <free>
    return element;
c0102780:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0102783:	c9                   	leave  
c0102784:	c3                   	ret    

c0102785 <list_pop_front>:

void *list_pop_front(list_t *list)
{
c0102785:	55                   	push   %ebp
c0102786:	89 e5                	mov    %esp,%ebp
c0102788:	83 ec 28             	sub    $0x28,%esp
    struct list_node *first = list->head->next;
c010278b:	8b 45 08             	mov    0x8(%ebp),%eax
c010278e:	8b 40 04             	mov    0x4(%eax),%eax
c0102791:	8b 00                	mov    (%eax),%eax
c0102793:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *element = first->element;
c0102796:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102799:	8b 40 08             	mov    0x8(%eax),%eax
c010279c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    first->prev->next = first->next;
c010279f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027a2:	8b 40 04             	mov    0x4(%eax),%eax
c01027a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01027a8:	8b 12                	mov    (%edx),%edx
c01027aa:	89 10                	mov    %edx,(%eax)
    first->next->prev = first->prev;
c01027ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027af:	8b 00                	mov    (%eax),%eax
c01027b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01027b4:	8b 52 04             	mov    0x4(%edx),%edx
c01027b7:	89 50 04             	mov    %edx,0x4(%eax)
    free(first);
c01027ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027bd:	89 04 24             	mov    %eax,(%esp)
c01027c0:	e8 c8 af 00 00       	call   c010d78d <free>
    return element;
c01027c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01027c8:	c9                   	leave  
c01027c9:	c3                   	ret    

c01027ca <list_length>:


int list_length(list_t *list)
{
c01027ca:	55                   	push   %ebp
c01027cb:	89 e5                	mov    %esp,%ebp
c01027cd:	83 ec 10             	sub    $0x10,%esp
    struct list_node *node = list->head->next;
c01027d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01027d3:	8b 40 04             	mov    0x4(%eax),%eax
c01027d6:	8b 00                	mov    (%eax),%eax
c01027d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct list_node *head = list->head;
c01027db:	8b 45 08             	mov    0x8(%ebp),%eax
c01027de:	8b 40 04             	mov    0x4(%eax),%eax
c01027e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t size = 0;
c01027e4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (node != head)
c01027eb:	eb 0c                	jmp    c01027f9 <list_length+0x2f>
    {
        node = node->next;
c01027ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01027f0:	8b 00                	mov    (%eax),%eax
c01027f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
        size++;
c01027f5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
int list_length(list_t *list)
{
    struct list_node *node = list->head->next;
    struct list_node *head = list->head;
    size_t size = 0;
    while (node != head)
c01027f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01027fc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01027ff:	75 ec                	jne    c01027ed <list_length+0x23>
    {
        node = node->next;
        size++;
    }
    return size;
c0102801:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0102804:	c9                   	leave  
c0102805:	c3                   	ret    

c0102806 <list_is_empty>:

bool list_is_empty(list_t *list)
{
c0102806:	55                   	push   %ebp
c0102807:	89 e5                	mov    %esp,%ebp
    return (list->head == list->head->next);
c0102809:	8b 45 08             	mov    0x8(%ebp),%eax
c010280c:	8b 50 04             	mov    0x4(%eax),%edx
c010280f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102812:	8b 40 04             	mov    0x4(%eax),%eax
c0102815:	8b 00                	mov    (%eax),%eax
c0102817:	39 c2                	cmp    %eax,%edx
c0102819:	0f 94 c0             	sete   %al
c010281c:	0f b6 c0             	movzbl %al,%eax
}
c010281f:	5d                   	pop    %ebp
c0102820:	c3                   	ret    

c0102821 <list_lock>:

void list_lock(list_t *list)
{
c0102821:	55                   	push   %ebp
c0102822:	89 e5                	mov    %esp,%ebp
c0102824:	83 ec 18             	sub    $0x18,%esp
    lock(&list->lock);
c0102827:	8b 45 08             	mov    0x8(%ebp),%eax
c010282a:	89 04 24             	mov    %eax,(%esp)
c010282d:	e8 e6 d6 00 00       	call   c010ff18 <lock>
}
c0102832:	c9                   	leave  
c0102833:	c3                   	ret    

c0102834 <list_unlock>:

void list_unlock(list_t *list)
{
c0102834:	55                   	push   %ebp
c0102835:	89 e5                	mov    %esp,%ebp
c0102837:	83 ec 18             	sub    $0x18,%esp
    unlock(&list->lock);
c010283a:	8b 45 08             	mov    0x8(%ebp),%eax
c010283d:	89 04 24             	mov    %eax,(%esp)
c0102840:	e8 eb d6 00 00       	call   c010ff30 <unlock>
}
c0102845:	c9                   	leave  
c0102846:	c3                   	ret    

c0102847 <iterator_create>:

// using interators


iterator_t iterator_create(list_t *list)
{
c0102847:	55                   	push   %ebp
c0102848:	89 e5                	mov    %esp,%ebp
c010284a:	83 ec 10             	sub    $0x10,%esp
    iterator_t new_iterator;
    new_iterator.list = list;
c010284d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102850:	89 45 f8             	mov    %eax,-0x8(%ebp)
    new_iterator.current = list->head->next;
c0102853:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102856:	8b 40 04             	mov    0x4(%eax),%eax
c0102859:	8b 00                	mov    (%eax),%eax
c010285b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return new_iterator;
c010285e:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0102861:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102864:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102867:	89 01                	mov    %eax,(%ecx)
c0102869:	89 51 04             	mov    %edx,0x4(%ecx)
}
c010286c:	8b 45 08             	mov    0x8(%ebp),%eax
c010286f:	c9                   	leave  
c0102870:	c2 04 00             	ret    $0x4

c0102873 <list_insert_after>:



void list_insert_after(iterator_t *it, void *element)
{
c0102873:	55                   	push   %ebp
c0102874:	89 e5                	mov    %esp,%ebp
c0102876:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c0102879:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0102880:	e8 21 ae 00 00       	call   c010d6a6 <malloc>
c0102885:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c0102888:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010288b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010288e:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c0102891:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102894:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102897:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c0102899:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010289c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010289f:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, it->current);
c01028a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01028a5:	8b 40 04             	mov    0x4(%eax),%eax
c01028a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01028ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028af:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028b6:	89 04 24             	mov    %eax,(%esp)
c01028b9:	e8 5d fd ff ff       	call   c010261b <list_splice>
}
c01028be:	c9                   	leave  
c01028bf:	c3                   	ret    

c01028c0 <list_insert_before>:


void list_insert_before(iterator_t *it, void *element)
{
c01028c0:	55                   	push   %ebp
c01028c1:	89 e5                	mov    %esp,%ebp
c01028c3:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c01028c6:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c01028cd:	e8 d4 ad 00 00       	call   c010d6a6 <malloc>
c01028d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c01028d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028d8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01028db:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c01028de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01028e4:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c01028e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01028ec:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, it->current->prev);
c01028ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01028f2:	8b 40 04             	mov    0x4(%eax),%eax
c01028f5:	8b 40 04             	mov    0x4(%eax),%eax
c01028f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01028fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102903:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102906:	89 04 24             	mov    %eax,(%esp)
c0102909:	e8 0d fd ff ff       	call   c010261b <list_splice>
}
c010290e:	c9                   	leave  
c010290f:	c3                   	ret    

c0102910 <list_get_current>:


void *list_get_current(iterator_t *it)
{
c0102910:	55                   	push   %ebp
c0102911:	89 e5                	mov    %esp,%ebp
    if(it)
c0102913:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102917:	74 15                	je     c010292e <list_get_current+0x1e>
        if(it->current)
c0102919:	8b 45 08             	mov    0x8(%ebp),%eax
c010291c:	8b 40 04             	mov    0x4(%eax),%eax
c010291f:	85 c0                	test   %eax,%eax
c0102921:	74 0b                	je     c010292e <list_get_current+0x1e>
            return it->current->element;
c0102923:	8b 45 08             	mov    0x8(%ebp),%eax
c0102926:	8b 40 04             	mov    0x4(%eax),%eax
c0102929:	8b 40 08             	mov    0x8(%eax),%eax
c010292c:	eb 05                	jmp    c0102933 <list_get_current+0x23>

    return NULL;
c010292e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102933:	5d                   	pop    %ebp
c0102934:	c3                   	ret    

c0102935 <list_next>:

void list_next(iterator_t *it)
{
c0102935:	55                   	push   %ebp
c0102936:	89 e5                	mov    %esp,%ebp
    it->current = it->current->next;
c0102938:	8b 45 08             	mov    0x8(%ebp),%eax
c010293b:	8b 40 04             	mov    0x4(%eax),%eax
c010293e:	8b 10                	mov    (%eax),%edx
c0102940:	8b 45 08             	mov    0x8(%ebp),%eax
c0102943:	89 50 04             	mov    %edx,0x4(%eax)
}
c0102946:	5d                   	pop    %ebp
c0102947:	c3                   	ret    

c0102948 <list_previous>:

void list_previous(iterator_t *it)
{
c0102948:	55                   	push   %ebp
c0102949:	89 e5                	mov    %esp,%ebp
    it->current = it->current->prev;
c010294b:	8b 45 08             	mov    0x8(%ebp),%eax
c010294e:	8b 40 04             	mov    0x4(%eax),%eax
c0102951:	8b 50 04             	mov    0x4(%eax),%edx
c0102954:	8b 45 08             	mov    0x8(%ebp),%eax
c0102957:	89 50 04             	mov    %edx,0x4(%eax)
}
c010295a:	5d                   	pop    %ebp
c010295b:	c3                   	ret    

c010295c <list_is_last>:

bool list_is_last(iterator_t *it)
{
c010295c:	55                   	push   %ebp
c010295d:	89 e5                	mov    %esp,%ebp
    return (it->current == it->list->head);
c010295f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102962:	8b 50 04             	mov    0x4(%eax),%edx
c0102965:	8b 45 08             	mov    0x8(%ebp),%eax
c0102968:	8b 00                	mov    (%eax),%eax
c010296a:	8b 40 04             	mov    0x4(%eax),%eax
c010296d:	39 c2                	cmp    %eax,%edx
c010296f:	0f 94 c0             	sete   %al
c0102972:	0f b6 c0             	movzbl %al,%eax
}
c0102975:	5d                   	pop    %ebp
c0102976:	c3                   	ret    

c0102977 <list_set_first>:

void list_set_first(iterator_t *it)
{
c0102977:	55                   	push   %ebp
c0102978:	89 e5                	mov    %esp,%ebp
    it->current = it->list->head->next;
c010297a:	8b 45 08             	mov    0x8(%ebp),%eax
c010297d:	8b 00                	mov    (%eax),%eax
c010297f:	8b 40 04             	mov    0x4(%eax),%eax
c0102982:	8b 10                	mov    (%eax),%edx
c0102984:	8b 45 08             	mov    0x8(%ebp),%eax
c0102987:	89 50 04             	mov    %edx,0x4(%eax)
}
c010298a:	5d                   	pop    %ebp
c010298b:	c3                   	ret    

c010298c <list_set_last>:

void list_set_last(iterator_t *it)
{
c010298c:	55                   	push   %ebp
c010298d:	89 e5                	mov    %esp,%ebp
    it->current = it->list->head->prev;
c010298f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102992:	8b 00                	mov    (%eax),%eax
c0102994:	8b 40 04             	mov    0x4(%eax),%eax
c0102997:	8b 50 04             	mov    0x4(%eax),%edx
c010299a:	8b 45 08             	mov    0x8(%ebp),%eax
c010299d:	89 50 04             	mov    %edx,0x4(%eax)
}
c01029a0:	5d                   	pop    %ebp
c01029a1:	c3                   	ret    

c01029a2 <list_remove>:

void *list_remove(iterator_t *it)
{
c01029a2:	55                   	push   %ebp
c01029a3:	89 e5                	mov    %esp,%ebp
c01029a5:	83 ec 28             	sub    $0x28,%esp
    void *element = list_get_current(it);
c01029a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01029ab:	89 04 24             	mov    %eax,(%esp)
c01029ae:	e8 5d ff ff ff       	call   c0102910 <list_get_current>
c01029b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct list_node *node = it->current;
c01029b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01029b9:	8b 40 04             	mov    0x4(%eax),%eax
c01029bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    node->prev->next = node->next;
c01029bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01029c2:	8b 40 04             	mov    0x4(%eax),%eax
c01029c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01029c8:	8b 12                	mov    (%edx),%edx
c01029ca:	89 10                	mov    %edx,(%eax)
    node->next->prev = node->prev;
c01029cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01029cf:	8b 00                	mov    (%eax),%eax
c01029d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01029d4:	8b 52 04             	mov    0x4(%edx),%edx
c01029d7:	89 50 04             	mov    %edx,0x4(%eax)
    it->current = node->next;
c01029da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01029dd:	8b 10                	mov    (%eax),%edx
c01029df:	8b 45 08             	mov    0x8(%ebp),%eax
c01029e2:	89 50 04             	mov    %edx,0x4(%eax)
    free(node);
c01029e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01029e8:	89 04 24             	mov    %eax,(%esp)
c01029eb:	e8 9d ad 00 00       	call   c010d78d <free>
    return element;
c01029f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01029f3:	c9                   	leave  
c01029f4:	c3                   	ret    

c01029f5 <strnlen>:
 * @param s the string
 * @param maxlen the maximal lengh
 * @return string lengh<= maxlen
 */
size_t strnlen(const char *s, size_t maxlen)
{
c01029f5:	55                   	push   %ebp
c01029f6:	89 e5                	mov    %esp,%ebp
c01029f8:	83 ec 10             	sub    $0x10,%esp
    const char *str = s;
c01029fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01029fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*str && maxlen)
c0102a01:	eb 08                	jmp    c0102a0b <strnlen+0x16>
    {
        ++str;
c0102a03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        maxlen--;
c0102a07:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
 * @return string lengh<= maxlen
 */
size_t strnlen(const char *s, size_t maxlen)
{
    const char *str = s;
    while (*str && maxlen)
c0102a0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a0e:	0f b6 00             	movzbl (%eax),%eax
c0102a11:	84 c0                	test   %al,%al
c0102a13:	74 06                	je     c0102a1b <strnlen+0x26>
c0102a15:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0102a19:	75 e8                	jne    c0102a03 <strnlen+0xe>
    {
        ++str;
        maxlen--;
    }

    return str - s;
c0102a1b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102a1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a21:	89 d1                	mov    %edx,%ecx
c0102a23:	29 c1                	sub    %eax,%ecx
c0102a25:	89 c8                	mov    %ecx,%eax
}
c0102a27:	c9                   	leave  
c0102a28:	c3                   	ret    

c0102a29 <strlen>:
 * @breif Returns the string lengh.
 * @param string pointer
 * @return string lengh
 */
size_t strlen(const char *string)
{
c0102a29:	55                   	push   %ebp
c0102a2a:	89 e5                	mov    %esp,%ebp
c0102a2c:	83 ec 10             	sub    $0x10,%esp
    size_t i = 0;
c0102a2f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (string[i])
c0102a36:	eb 04                	jmp    c0102a3c <strlen+0x13>
    {
        i++;
c0102a38:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * @return string lengh
 */
size_t strlen(const char *string)
{
    size_t i = 0;
    while (string[i])
c0102a3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a3f:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a42:	01 d0                	add    %edx,%eax
c0102a44:	0f b6 00             	movzbl (%eax),%eax
c0102a47:	84 c0                	test   %al,%al
c0102a49:	75 ed                	jne    c0102a38 <strlen+0xf>
    {
        i++;
    }

    return i;
c0102a4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0102a4e:	c9                   	leave  
c0102a4f:	c3                   	ret    

c0102a50 <strcpy>:
 * @param dest destination pointer
 * @param src source string
 * @return destination string pointer
 */
char *strcpy(char *dest, const char *src)
{
c0102a50:	55                   	push   %ebp
c0102a51:	89 e5                	mov    %esp,%ebp
c0102a53:	83 ec 10             	sub    $0x10,%esp
    size_t i = 0;
c0102a56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (src[i])
c0102a5d:	eb 19                	jmp    c0102a78 <strcpy+0x28>
    {
        dest[i] = src[i];
c0102a5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a62:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a65:	01 c2                	add    %eax,%edx
c0102a67:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a6a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102a6d:	01 c8                	add    %ecx,%eax
c0102a6f:	0f b6 00             	movzbl (%eax),%eax
c0102a72:	88 02                	mov    %al,(%edx)
        i++;
c0102a74:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * @return destination string pointer
 */
char *strcpy(char *dest, const char *src)
{
    size_t i = 0;
    while (src[i])
c0102a78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a7b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102a7e:	01 d0                	add    %edx,%eax
c0102a80:	0f b6 00             	movzbl (%eax),%eax
c0102a83:	84 c0                	test   %al,%al
c0102a85:	75 d8                	jne    c0102a5f <strcpy+0xf>
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = src[i];
c0102a87:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a8a:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a8d:	01 c2                	add    %eax,%edx
c0102a8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a92:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102a95:	01 c8                	add    %ecx,%eax
c0102a97:	0f b6 00             	movzbl (%eax),%eax
c0102a9a:	88 02                	mov    %al,(%edx)
    return dest;
c0102a9c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102a9f:	c9                   	leave  
c0102aa0:	c3                   	ret    

c0102aa1 <strncpy>:
 * @param source string
 * @param maximal number of chars
 * @return destination string
 */
char *strncpy(char *dest, const char *src,size_t n)
{
c0102aa1:	55                   	push   %ebp
c0102aa2:	89 e5                	mov    %esp,%ebp
c0102aa4:	83 ec 10             	sub    $0x10,%esp
    size_t i;
    bool eos = false;
c0102aa7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    for (i = 0; i < n; i++)
c0102aae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102ab5:	eb 42                	jmp    c0102af9 <strncpy+0x58>
    {
        if (!eos)
c0102ab7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0102abb:	75 2d                	jne    c0102aea <strncpy+0x49>
        {
            if (src[i] == '\0')
c0102abd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ac0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102ac3:	01 d0                	add    %edx,%eax
c0102ac5:	0f b6 00             	movzbl (%eax),%eax
c0102ac8:	84 c0                	test   %al,%al
c0102aca:	75 07                	jne    c0102ad3 <strncpy+0x32>
            {
                eos = true;
c0102acc:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
            }
            dest[i] = src[i];
c0102ad3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ad6:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ad9:	01 c2                	add    %eax,%edx
c0102adb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ade:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102ae1:	01 c8                	add    %ecx,%eax
c0102ae3:	0f b6 00             	movzbl (%eax),%eax
c0102ae6:	88 02                	mov    %al,(%edx)
c0102ae8:	eb 0b                	jmp    c0102af5 <strncpy+0x54>
        }
        else
        {
            dest[i] = '\0';
c0102aea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102aed:	8b 55 08             	mov    0x8(%ebp),%edx
c0102af0:	01 d0                	add    %edx,%eax
c0102af2:	c6 00 00             	movb   $0x0,(%eax)
 */
char *strncpy(char *dest, const char *src,size_t n)
{
    size_t i;
    bool eos = false;
    for (i = 0; i < n; i++)
c0102af5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102af9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102afc:	3b 45 10             	cmp    0x10(%ebp),%eax
c0102aff:	72 b6                	jb     c0102ab7 <strncpy+0x16>
        {
            dest[i] = '\0';
        }

    }
    return dest;
c0102b01:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102b04:	c9                   	leave  
c0102b05:	c3                   	ret    

c0102b06 <strcat>:
 * @param dest destination string
 * @param src source string
 * @return destination string
 */
char *strcat(char *dest, const char *src)
{
c0102b06:	55                   	push   %ebp
c0102b07:	89 e5                	mov    %esp,%ebp
c0102b09:	83 ec 18             	sub    $0x18,%esp
    size_t n = strlen(dest);
c0102b0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b0f:	89 04 24             	mov    %eax,(%esp)
c0102b12:	e8 12 ff ff ff       	call   c0102a29 <strlen>
c0102b17:	89 45 fc             	mov    %eax,-0x4(%ebp)
    strcpy((char*)(dest+n),src);
c0102b1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b1d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b20:	01 c2                	add    %eax,%edx
c0102b22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102b25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b29:	89 14 24             	mov    %edx,(%esp)
c0102b2c:	e8 1f ff ff ff       	call   c0102a50 <strcpy>
    return dest;
c0102b31:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102b34:	c9                   	leave  
c0102b35:	c3                   	ret    

c0102b36 <strncat>:
 * @param src source string
 * @param n maximal number of chars
 * @return destination string
 */
char *strncat(char *dest, const char *src, size_t n)
{
c0102b36:	55                   	push   %ebp
c0102b37:	89 e5                	mov    %esp,%ebp
c0102b39:	83 ec 1c             	sub    $0x1c,%esp
    size_t i = strlen(dest);
c0102b3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b3f:	89 04 24             	mov    %eax,(%esp)
c0102b42:	e8 e2 fe ff ff       	call   c0102a29 <strlen>
c0102b47:	89 45 fc             	mov    %eax,-0x4(%ebp)
    strncpy((char*)(dest+i),src,n);
c0102b4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b4d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b50:	01 c2                	add    %eax,%edx
c0102b52:	8b 45 10             	mov    0x10(%ebp),%eax
c0102b55:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102b59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102b5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b60:	89 14 24             	mov    %edx,(%esp)
c0102b63:	e8 39 ff ff ff       	call   c0102aa1 <strncpy>
    return dest;
c0102b68:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102b6b:	c9                   	leave  
c0102b6c:	c3                   	ret    

c0102b6d <strcmp>:
 * @return = 0 strings are similar
 *  > 0 value of the first different char of string0 is bigger
 *  < 0 value of the first different char of string1 is bigger
 */
int strcmp(const char *str0, const char *str1)
{
c0102b6d:	55                   	push   %ebp
c0102b6e:	89 e5                	mov    %esp,%ebp
c0102b70:	83 ec 10             	sub    $0x10,%esp
    size_t i;
    for (i = 0; str0[i] == str1[i] && str0[i] != 0; i++);
c0102b73:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102b7a:	eb 04                	jmp    c0102b80 <strcmp+0x13>
c0102b7c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102b80:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b83:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b86:	01 d0                	add    %edx,%eax
c0102b88:	0f b6 10             	movzbl (%eax),%edx
c0102b8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b8e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102b91:	01 c8                	add    %ecx,%eax
c0102b93:	0f b6 00             	movzbl (%eax),%eax
c0102b96:	38 c2                	cmp    %al,%dl
c0102b98:	75 0f                	jne    c0102ba9 <strcmp+0x3c>
c0102b9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b9d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ba0:	01 d0                	add    %edx,%eax
c0102ba2:	0f b6 00             	movzbl (%eax),%eax
c0102ba5:	84 c0                	test   %al,%al
c0102ba7:	75 d3                	jne    c0102b7c <strcmp+0xf>
    int ret = str0[i] - str1[i];
c0102ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bac:	8b 55 08             	mov    0x8(%ebp),%edx
c0102baf:	01 d0                	add    %edx,%eax
c0102bb1:	0f b6 00             	movzbl (%eax),%eax
c0102bb4:	0f be d0             	movsbl %al,%edx
c0102bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102bbd:	01 c8                	add    %ecx,%eax
c0102bbf:	0f b6 00             	movzbl (%eax),%eax
c0102bc2:	0f be c0             	movsbl %al,%eax
c0102bc5:	89 d1                	mov    %edx,%ecx
c0102bc7:	29 c1                	sub    %eax,%ecx
c0102bc9:	89 c8                	mov    %ecx,%eax
c0102bcb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return ret;
c0102bce:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0102bd1:	c9                   	leave  
c0102bd2:	c3                   	ret    

c0102bd3 <strncmp>:
 * @return = 0 strings are similar
 *  > 0 value of the first different char of string0 is bigger
 *  < 0 value of the first different char of string1 is bigger
 */
int strncmp(const char *str0, const char *str1, size_t n)
{
c0102bd3:	55                   	push   %ebp
c0102bd4:	89 e5                	mov    %esp,%ebp
c0102bd6:	83 ec 10             	sub    $0x10,%esp
    uint32_t i;
    int ret = 0;
c0102bd9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    for (i = 0; str0[i] == str1[i] && str0[i] != 0 && i < n-1; i++);
c0102be0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102be7:	eb 04                	jmp    c0102bed <strncmp+0x1a>
c0102be9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102bed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bf0:	8b 55 08             	mov    0x8(%ebp),%edx
c0102bf3:	01 d0                	add    %edx,%eax
c0102bf5:	0f b6 10             	movzbl (%eax),%edx
c0102bf8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bfb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102bfe:	01 c8                	add    %ecx,%eax
c0102c00:	0f b6 00             	movzbl (%eax),%eax
c0102c03:	38 c2                	cmp    %al,%dl
c0102c05:	75 1a                	jne    c0102c21 <strncmp+0x4e>
c0102c07:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c0a:	8b 55 08             	mov    0x8(%ebp),%edx
c0102c0d:	01 d0                	add    %edx,%eax
c0102c0f:	0f b6 00             	movzbl (%eax),%eax
c0102c12:	84 c0                	test   %al,%al
c0102c14:	74 0b                	je     c0102c21 <strncmp+0x4e>
c0102c16:	8b 45 10             	mov    0x10(%ebp),%eax
c0102c19:	83 e8 01             	sub    $0x1,%eax
c0102c1c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0102c1f:	77 c8                	ja     c0102be9 <strncmp+0x16>
    ret = str0[i] - str1[i];
c0102c21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c24:	8b 55 08             	mov    0x8(%ebp),%edx
c0102c27:	01 d0                	add    %edx,%eax
c0102c29:	0f b6 00             	movzbl (%eax),%eax
c0102c2c:	0f be d0             	movsbl %al,%edx
c0102c2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c32:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102c35:	01 c8                	add    %ecx,%eax
c0102c37:	0f b6 00             	movzbl (%eax),%eax
c0102c3a:	0f be c0             	movsbl %al,%eax
c0102c3d:	89 d1                	mov    %edx,%ecx
c0102c3f:	29 c1                	sub    %eax,%ecx
c0102c41:	89 c8                	mov    %ecx,%eax
c0102c43:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return ret;
c0102c46:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0102c49:	c9                   	leave  
c0102c4a:	c3                   	ret    

c0102c4b <strchr>:
 * @param c searched character
 * @return pointer to the first similar char
 * NULL=no char in str is similar to c
 */
char *strchr(const char *str, int c)
{
c0102c4b:	55                   	push   %ebp
c0102c4c:	89 e5                	mov    %esp,%ebp
c0102c4e:	83 ec 10             	sub    $0x10,%esp
    int i = 0;
c0102c51:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (str[i] != (char)c && str[i] != 0)
c0102c58:	eb 04                	jmp    c0102c5e <strchr+0x13>
    {
        i++;
c0102c5a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * NULL=no char in str is similar to c
 */
char *strchr(const char *str, int c)
{
    int i = 0;
    while (str[i] != (char)c && str[i] != 0)
c0102c5e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c64:	01 d0                	add    %edx,%eax
c0102c66:	0f b6 10             	movzbl (%eax),%edx
c0102c69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102c6c:	38 c2                	cmp    %al,%dl
c0102c6e:	74 0f                	je     c0102c7f <strchr+0x34>
c0102c70:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102c73:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c76:	01 d0                	add    %edx,%eax
c0102c78:	0f b6 00             	movzbl (%eax),%eax
c0102c7b:	84 c0                	test   %al,%al
c0102c7d:	75 db                	jne    c0102c5a <strchr+0xf>
    {
        i++;
    }
    if (str[i])
c0102c7f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102c82:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c85:	01 d0                	add    %edx,%eax
c0102c87:	0f b6 00             	movzbl (%eax),%eax
c0102c8a:	84 c0                	test   %al,%al
c0102c8c:	74 0a                	je     c0102c98 <strchr+0x4d>
    {
        return (char*)(str+i);
c0102c8e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c94:	01 d0                	add    %edx,%eax
c0102c96:	eb 05                	jmp    c0102c9d <strchr+0x52>
    }
    return NULL;
c0102c98:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102c9d:	c9                   	leave  
c0102c9e:	c3                   	ret    

c0102c9f <strrchr>:
 * @param c searched character
 * @return pointer to the last similar char
 * NULL=no char in str is similar to c
 */
char *strrchr(const char *str, int c)
{
c0102c9f:	55                   	push   %ebp
c0102ca0:	89 e5                	mov    %esp,%ebp
c0102ca2:	83 ec 10             	sub    $0x10,%esp
    int i = 0;
c0102ca5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char* ret = NULL;
c0102cac:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (str[i] != 0)
c0102cb3:	eb 21                	jmp    c0102cd6 <strrchr+0x37>
    {
        if (str[i] == (char)c)
c0102cb5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102cb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cbb:	01 d0                	add    %edx,%eax
c0102cbd:	0f b6 10             	movzbl (%eax),%edx
c0102cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102cc3:	38 c2                	cmp    %al,%dl
c0102cc5:	75 0b                	jne    c0102cd2 <strrchr+0x33>
        {
            ret = (char*)(str+i);
c0102cc7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102cca:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ccd:	01 d0                	add    %edx,%eax
c0102ccf:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        i++;
c0102cd2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 */
char *strrchr(const char *str, int c)
{
    int i = 0;
    char* ret = NULL;
    while (str[i] != 0)
c0102cd6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cdc:	01 d0                	add    %edx,%eax
c0102cde:	0f b6 00             	movzbl (%eax),%eax
c0102ce1:	84 c0                	test   %al,%al
c0102ce3:	75 d0                	jne    c0102cb5 <strrchr+0x16>
        {
            ret = (char*)(str+i);
        }
        i++;
    }
    return ret;
c0102ce5:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0102ce8:	c9                   	leave  
c0102ce9:	c3                   	ret    

c0102cea <strtok>:
	char* strpbrk(const char* st0, const char* st1) {}
	char* strstr(const char* st0, const char* st1) {}
	char* strerror(size_t n) {}
*/
char *strtok(char *string, const char *delimiters)
{
c0102cea:	55                   	push   %ebp
c0102ceb:	89 e5                	mov    %esp,%ebp
c0102ced:	83 ec 28             	sub    $0x28,%esp
    static char *s = NULL;
    static int num_del = 0;
    if(string != NULL)
c0102cf0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102cf4:	74 1a                	je     c0102d10 <strtok+0x26>
    {
        s = string;
c0102cf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cf9:	a3 00 80 11 c0       	mov    %eax,0xc0118000
        num_del = strlen(delimiters);
c0102cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102d01:	89 04 24             	mov    %eax,(%esp)
c0102d04:	e8 20 fd ff ff       	call   c0102a29 <strlen>
c0102d09:	a3 04 80 11 c0       	mov    %eax,0xc0118004
c0102d0e:	eb 1b                	jmp    c0102d2b <strtok+0x41>
    }
    else
    {
        if(s == NULL)
c0102d10:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102d15:	85 c0                	test   %eax,%eax
c0102d17:	75 0a                	jne    c0102d23 <strtok+0x39>
        {
            return NULL;
c0102d19:	b8 00 00 00 00       	mov    $0x0,%eax
c0102d1e:	e9 da 00 00 00       	jmp    c0102dfd <strtok+0x113>
        }
        string = s;
c0102d23:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102d28:	89 45 08             	mov    %eax,0x8(%ebp)
    }
    int i, j = 0;
c0102d2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while(*s != '\0')
c0102d32:	e9 86 00 00 00       	jmp    c0102dbd <strtok+0xd3>
    {
        for(i = 0; i < num_del; i++)
c0102d37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102d3e:	eb 62                	jmp    c0102da2 <strtok+0xb8>
        {
            if(*s == delimiters[i])
c0102d40:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102d45:	0f b6 10             	movzbl (%eax),%edx
c0102d48:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102d4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102d4e:	01 c8                	add    %ecx,%eax
c0102d50:	0f b6 00             	movzbl (%eax),%eax
c0102d53:	38 c2                	cmp    %al,%dl
c0102d55:	75 47                	jne    c0102d9e <strtok+0xb4>
            {
                s++;
c0102d57:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102d5c:	83 c0 01             	add    $0x1,%eax
c0102d5f:	a3 00 80 11 c0       	mov    %eax,0xc0118000
                char *ret = (char*) malloc(j+1);
c0102d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102d67:	83 c0 01             	add    $0x1,%eax
c0102d6a:	89 04 24             	mov    %eax,(%esp)
c0102d6d:	e8 34 a9 00 00       	call   c010d6a6 <malloc>
c0102d72:	89 45 ec             	mov    %eax,-0x14(%ebp)
                memcpy(ret, string, j);
c0102d75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102d78:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102d7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102d83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102d86:	89 04 24             	mov    %eax,(%esp)
c0102d89:	e8 71 00 00 00       	call   c0102dff <memcpy>
                ret[j] = '\0';
c0102d8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0102d91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102d94:	01 d0                	add    %edx,%eax
c0102d96:	c6 00 00             	movb   $0x0,(%eax)
                return ret;
c0102d99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102d9c:	eb 5f                	jmp    c0102dfd <strtok+0x113>
        string = s;
    }
    int i, j = 0;
    while(*s != '\0')
    {
        for(i = 0; i < num_del; i++)
c0102d9e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102da2:	a1 04 80 11 c0       	mov    0xc0118004,%eax
c0102da7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0102daa:	7c 94                	jl     c0102d40 <strtok+0x56>
                memcpy(ret, string, j);
                ret[j] = '\0';
                return ret;
            }
        }
        s++;
c0102dac:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102db1:	83 c0 01             	add    $0x1,%eax
c0102db4:	a3 00 80 11 c0       	mov    %eax,0xc0118000
        j++;
c0102db9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            return NULL;
        }
        string = s;
    }
    int i, j = 0;
    while(*s != '\0')
c0102dbd:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102dc2:	0f b6 00             	movzbl (%eax),%eax
c0102dc5:	84 c0                	test   %al,%al
c0102dc7:	0f 85 6a ff ff ff    	jne    c0102d37 <strtok+0x4d>
        }
        s++;
        j++;
    }

    char *ret = (char*) malloc(j+1);
c0102dcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102dd0:	83 c0 01             	add    $0x1,%eax
c0102dd3:	89 04 24             	mov    %eax,(%esp)
c0102dd6:	e8 cb a8 00 00       	call   c010d6a6 <malloc>
c0102ddb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    strcpy(ret, string);
c0102dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0102de1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102de5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102de8:	89 04 24             	mov    %eax,(%esp)
c0102deb:	e8 60 fc ff ff       	call   c0102a50 <strcpy>

    s = NULL;
c0102df0:	c7 05 00 80 11 c0 00 	movl   $0x0,0xc0118000
c0102df7:	00 00 00 
    return ret;
c0102dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0102dfd:	c9                   	leave  
c0102dfe:	c3                   	ret    

c0102dff <memcpy>:
 * @param source source string
 * @param size size of source area
 * @return pointer to destination area
 */
void *memcpy(void *destination, const void *source, size_t size)
{
c0102dff:	55                   	push   %ebp
c0102e00:	89 e5                	mov    %esp,%ebp
c0102e02:	83 ec 10             	sub    $0x10,%esp
    uint8_t *dest = destination;
c0102e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e08:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t *sour = source;
c0102e0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102e0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t i;
    for (i = 0; i < size; i++)
c0102e11:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102e18:	eb 19                	jmp    c0102e33 <memcpy+0x34>
    {
        dest[i] = sour[i];
c0102e1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e1d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102e20:	01 c2                	add    %eax,%edx
c0102e22:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e25:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102e28:	01 c8                	add    %ecx,%eax
c0102e2a:	0f b6 00             	movzbl (%eax),%eax
c0102e2d:	88 02                	mov    %al,(%edx)
void *memcpy(void *destination, const void *source, size_t size)
{
    uint8_t *dest = destination;
    const uint8_t *sour = source;
    size_t i;
    for (i = 0; i < size; i++)
c0102e2f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102e33:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e36:	3b 45 10             	cmp    0x10(%ebp),%eax
c0102e39:	72 df                	jb     c0102e1a <memcpy+0x1b>
    {
        dest[i] = sour[i];
    }
    return destination;
c0102e3b:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102e3e:	c9                   	leave  
c0102e3f:	c3                   	ret    

c0102e40 <memmove>:
 * @param source source area
 * @param num number of bytes to copy
 * @return pointer to destination area
 */
void *memmove(void *destination, const void *source, size_t num)
{
c0102e40:	55                   	push   %ebp
c0102e41:	89 e5                	mov    %esp,%ebp
c0102e43:	83 ec 1c             	sub    $0x1c,%esp
    uint8_t *dest = destination;
c0102e46:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e49:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t *src = source;
c0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dest > src && src + num > dest && num != 0)
c0102e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102e55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0102e58:	76 3a                	jbe    c0102e94 <memmove+0x54>
c0102e5a:	8b 45 10             	mov    0x10(%ebp),%eax
c0102e5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102e60:	01 d0                	add    %edx,%eax
c0102e62:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0102e65:	76 2d                	jbe    c0102e94 <memmove+0x54>
c0102e67:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0102e6b:	74 27                	je     c0102e94 <memmove+0x54>
    {
        size_t i = num;
c0102e6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0102e70:	89 45 fc             	mov    %eax,-0x4(%ebp)
        do
        {
            i--;
c0102e73:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
            dest[i] = src[i];
c0102e77:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e7a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102e7d:	01 c2                	add    %eax,%edx
c0102e7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e82:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102e85:	01 c8                	add    %ecx,%eax
c0102e87:	0f b6 00             	movzbl (%eax),%eax
c0102e8a:	88 02                	mov    %al,(%edx)
        }
        while (i != 0);
c0102e8c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0102e90:	75 e1                	jne    c0102e73 <memmove+0x33>
void *memmove(void *destination, const void *source, size_t num)
{
    uint8_t *dest = destination;
    const uint8_t *src = source;
    if (dest > src && src + num > dest && num != 0)
    {
c0102e92:	eb 19                	jmp    c0102ead <memmove+0x6d>
        while (i != 0);
    }
    else
    {
        // because we know that memcpy copy bytes from left to right.
        memcpy(dest, src, num);
c0102e94:	8b 45 10             	mov    0x10(%ebp),%eax
c0102e97:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102e9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102ea2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102ea5:	89 04 24             	mov    %eax,(%esp)
c0102ea8:	e8 52 ff ff ff       	call   c0102dff <memcpy>
    }
    return destination;
c0102ead:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102eb0:	c9                   	leave  
c0102eb1:	c3                   	ret    

c0102eb2 <memcmp>:
 * @return = 0 areas are similar
 *  > 0 the value of the first different byte of area0 is bigger
 *  < 0 the value of the first different byte of area1 is bigger
 */
int memcmp(const void *mem0, const void *mem1, size_t n)
{
c0102eb2:	55                   	push   %ebp
c0102eb3:	89 e5                	mov    %esp,%ebp
c0102eb5:	83 ec 10             	sub    $0x10,%esp
    const char *st0 = mem0;
c0102eb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ebb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const char *st1 = mem1;
c0102ebe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102ec1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t i;
    for (i = 0; st0[i] == st1[i] && i < n-1; i++);
c0102ec4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102ecb:	eb 04                	jmp    c0102ed1 <memcmp+0x1f>
c0102ecd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102ed1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ed4:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102ed7:	01 d0                	add    %edx,%eax
c0102ed9:	0f b6 10             	movzbl (%eax),%edx
c0102edc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102edf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102ee2:	01 c8                	add    %ecx,%eax
c0102ee4:	0f b6 00             	movzbl (%eax),%eax
c0102ee7:	38 c2                	cmp    %al,%dl
c0102ee9:	75 0b                	jne    c0102ef6 <memcmp+0x44>
c0102eeb:	8b 45 10             	mov    0x10(%ebp),%eax
c0102eee:	83 e8 01             	sub    $0x1,%eax
c0102ef1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0102ef4:	77 d7                	ja     c0102ecd <memcmp+0x1b>
    return st0[i] - st1[i];
c0102ef6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ef9:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102efc:	01 d0                	add    %edx,%eax
c0102efe:	0f b6 00             	movzbl (%eax),%eax
c0102f01:	0f be d0             	movsbl %al,%edx
c0102f04:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f07:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102f0a:	01 c8                	add    %ecx,%eax
c0102f0c:	0f b6 00             	movzbl (%eax),%eax
c0102f0f:	0f be c0             	movsbl %al,%eax
c0102f12:	89 d1                	mov    %edx,%ecx
c0102f14:	29 c1                	sub    %eax,%ecx
c0102f16:	89 c8                	mov    %ecx,%eax
}
c0102f18:	c9                   	leave  
c0102f19:	c3                   	ret    

c0102f1a <memchr>:
 * @param n Size of mem.
 * @return Pointer to the fist similar value
 *  or NULL if no value in mem is similar to c.
 */
void *memchr(const void *mem, int c, size_t n)
{
c0102f1a:	55                   	push   %ebp
c0102f1b:	89 e5                	mov    %esp,%ebp
c0102f1d:	83 ec 10             	sub    $0x10,%esp
    size_t i;
    const unsigned char *str = mem;
c0102f20:	8b 45 08             	mov    0x8(%ebp),%eax
c0102f23:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const unsigned char value = (unsigned char) c;
c0102f26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102f29:	88 45 f7             	mov    %al,-0x9(%ebp)
    for (i = 0; str[i] != value && i < n-1; i++);
c0102f2c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102f33:	eb 04                	jmp    c0102f39 <memchr+0x1f>
c0102f35:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102f39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f3c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102f3f:	01 d0                	add    %edx,%eax
c0102f41:	0f b6 00             	movzbl (%eax),%eax
c0102f44:	3a 45 f7             	cmp    -0x9(%ebp),%al
c0102f47:	74 0b                	je     c0102f54 <memchr+0x3a>
c0102f49:	8b 45 10             	mov    0x10(%ebp),%eax
c0102f4c:	83 e8 01             	sub    $0x1,%eax
c0102f4f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0102f52:	77 e1                	ja     c0102f35 <memchr+0x1b>

    if (str[i] == value)
c0102f54:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f57:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102f5a:	01 d0                	add    %edx,%eax
c0102f5c:	0f b6 00             	movzbl (%eax),%eax
c0102f5f:	3a 45 f7             	cmp    -0x9(%ebp),%al
c0102f62:	75 0a                	jne    c0102f6e <memchr+0x54>
    {
        return (void*) (str+i);
c0102f64:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f67:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102f6a:	01 d0                	add    %edx,%eax
c0102f6c:	eb 05                	jmp    c0102f73 <memchr+0x59>
    }
    else
    {
        return NULL;
c0102f6e:	b8 00 00 00 00       	mov    $0x0,%eax
    }
}
c0102f73:	c9                   	leave  
c0102f74:	c3                   	ret    

c0102f75 <memset>:
 * @param c Value to be set. The function will use a unsigned char conversion of this value.
 * @param n size of mem.
 * @return returns <code>mem</code>.
 */
void *memset(void *mem, int c, size_t n)
{
c0102f75:	55                   	push   %ebp
c0102f76:	89 e5                	mov    %esp,%ebp
c0102f78:	83 ec 10             	sub    $0x10,%esp
    unsigned char *str = mem;
c0102f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102f7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t i;
    for (i = 0; i < n; i++)
c0102f81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102f88:	eb 11                	jmp    c0102f9b <memset+0x26>
    {
        str[i] = (unsigned char) c;
c0102f8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f8d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102f90:	01 c2                	add    %eax,%edx
c0102f92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102f95:	88 02                	mov    %al,(%edx)
 */
void *memset(void *mem, int c, size_t n)
{
    unsigned char *str = mem;
    size_t i;
    for (i = 0; i < n; i++)
c0102f97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102f9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f9e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0102fa1:	72 e7                	jb     c0102f8a <memset+0x15>
    {
        str[i] = (unsigned char) c;
    }
    return mem;
c0102fa3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102fa6:	c9                   	leave  
c0102fa7:	c3                   	ret    

c0102fa8 <isalnum>:
 * @param character c as int
 * @return true  -> c is an alphanumeric character
 * @return false -> c isn't an alphanumeric character
 **/
int isalnum(int c)
{
c0102fa8:	55                   	push   %ebp
c0102fa9:	89 e5                	mov    %esp,%ebp
    if ( (c > 0x40 && c < 0x5B) || (c > 0x60 && c < 0x7B) || (c > 0x2F && c < 0x3A) )
c0102fab:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0102faf:	7e 06                	jle    c0102fb7 <isalnum+0xf>
c0102fb1:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0102fb5:	7e 18                	jle    c0102fcf <isalnum+0x27>
c0102fb7:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c0102fbb:	7e 06                	jle    c0102fc3 <isalnum+0x1b>
c0102fbd:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c0102fc1:	7e 0c                	jle    c0102fcf <isalnum+0x27>
c0102fc3:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102fc7:	7e 0d                	jle    c0102fd6 <isalnum+0x2e>
c0102fc9:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0102fcd:	7f 07                	jg     c0102fd6 <isalnum+0x2e>
    {
        return true;
c0102fcf:	b8 01 00 00 00       	mov    $0x1,%eax
c0102fd4:	eb 05                	jmp    c0102fdb <isalnum+0x33>
    }
    return false;
c0102fd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102fdb:	5d                   	pop    %ebp
c0102fdc:	c3                   	ret    

c0102fdd <isalpha>:
 * @param character c as int
 * @return true  -> c is an alphabetical character
 * @return false -> c isn't an alphabetical character
 **/
int isalpha(int c)
{
c0102fdd:	55                   	push   %ebp
c0102fde:	89 e5                	mov    %esp,%ebp
    if ( (c > 0x40 && c < 0x5B) || (c > 0x60 && c < 0x7B) )
c0102fe0:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0102fe4:	7e 06                	jle    c0102fec <isalpha+0xf>
c0102fe6:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0102fea:	7e 0c                	jle    c0102ff8 <isalpha+0x1b>
c0102fec:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c0102ff0:	7e 0d                	jle    c0102fff <isalpha+0x22>
c0102ff2:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c0102ff6:	7f 07                	jg     c0102fff <isalpha+0x22>
    {
        return true;
c0102ff8:	b8 01 00 00 00       	mov    $0x1,%eax
c0102ffd:	eb 05                	jmp    c0103004 <isalpha+0x27>
    }
    return false;
c0102fff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103004:	5d                   	pop    %ebp
c0103005:	c3                   	ret    

c0103006 <iscntrl>:
 * @param character c as int
 * @return true  -> c is a control Key value
 * @return false -> c isn't a control key value
 **/
int iscntrl(int c)
{
c0103006:	55                   	push   %ebp
c0103007:	89 e5                	mov    %esp,%ebp
    if ( (c >= 0x0 && c > 0x20) || c == 0x7F)
c0103009:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010300d:	78 06                	js     c0103015 <iscntrl+0xf>
c010300f:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c0103013:	7f 06                	jg     c010301b <iscntrl+0x15>
c0103015:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
c0103019:	75 07                	jne    c0103022 <iscntrl+0x1c>
    {
        return true;
c010301b:	b8 01 00 00 00       	mov    $0x1,%eax
c0103020:	eb 05                	jmp    c0103027 <iscntrl+0x21>
    }
    return false;
c0103022:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103027:	5d                   	pop    %ebp
c0103028:	c3                   	ret    

c0103029 <isdigit>:
 * @param character c as int
 * @return true  -> c is a digit
 * @return false -> c isn't an digit
 **/
int isdigit(int c)
{
c0103029:	55                   	push   %ebp
c010302a:	89 e5                	mov    %esp,%ebp
    if (c > 0x2F && c < 0x3A)
c010302c:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0103030:	7e 0d                	jle    c010303f <isdigit+0x16>
c0103032:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0103036:	7f 07                	jg     c010303f <isdigit+0x16>
    {
        return true;
c0103038:	b8 01 00 00 00       	mov    $0x1,%eax
c010303d:	eb 05                	jmp    c0103044 <isdigit+0x1b>
    }
    return false;
c010303f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103044:	5d                   	pop    %ebp
c0103045:	c3                   	ret    

c0103046 <isgraph>:
 * @param character c as int
 * @return true  -> c is a graphical character
 * @return false -> c isn't a graphical character
 **/
int isgraph(int c)
{
c0103046:	55                   	push   %ebp
c0103047:	89 e5                	mov    %esp,%ebp
    if (c > 0x20 && c < 0x7F)
c0103049:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c010304d:	7e 0d                	jle    c010305c <isgraph+0x16>
c010304f:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c0103053:	7f 07                	jg     c010305c <isgraph+0x16>
    {
        return true;
c0103055:	b8 01 00 00 00       	mov    $0x1,%eax
c010305a:	eb 05                	jmp    c0103061 <isgraph+0x1b>
    }
    return false;
c010305c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103061:	5d                   	pop    %ebp
c0103062:	c3                   	ret    

c0103063 <islower>:
 * @param character c as int
 * @return true  -> c is a lower character
 * @return false -> c isn't a lower character
 **/
int islower(int c)
{
c0103063:	55                   	push   %ebp
c0103064:	89 e5                	mov    %esp,%ebp
    if (c > 0x60 && c < 0x7B)
c0103066:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c010306a:	7e 0d                	jle    c0103079 <islower+0x16>
c010306c:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c0103070:	7f 07                	jg     c0103079 <islower+0x16>
    {
        return true;
c0103072:	b8 01 00 00 00       	mov    $0x1,%eax
c0103077:	eb 05                	jmp    c010307e <islower+0x1b>
    }
    return false;
c0103079:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010307e:	5d                   	pop    %ebp
c010307f:	c3                   	ret    

c0103080 <isprint>:
 * @param character c as int
 * @return true  -> c is an printable character
 * @return false -> c isn't an printable character
 **/
int isprint(int c)
{
c0103080:	55                   	push   %ebp
c0103081:	89 e5                	mov    %esp,%ebp
    if (c > 0x1F && c < 0x7F)
c0103083:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0103087:	7e 0d                	jle    c0103096 <isprint+0x16>
c0103089:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c010308d:	7f 07                	jg     c0103096 <isprint+0x16>
    {
        return true;
c010308f:	b8 01 00 00 00       	mov    $0x1,%eax
c0103094:	eb 05                	jmp    c010309b <isprint+0x1b>
    }
    return false;
c0103096:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010309b:	5d                   	pop    %ebp
c010309c:	c3                   	ret    

c010309d <ispunct>:
 * @param character c as int
 * @return true  -> c is a visible character which is not an alphanumerical
 * @return false -> c isn't a visible character which is not an alphanumerical
 **/
int ispunct(int c)
{
c010309d:	55                   	push   %ebp
c010309e:	89 e5                	mov    %esp,%ebp
    if ( (c > 0x20 && c < 0x30) || (c > 0x39 && c < 0x41) || (c > 0x5A && c < 0x61) || (c > 0x7A && c < 0x7F) )
c01030a0:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c01030a4:	7e 06                	jle    c01030ac <ispunct+0xf>
c01030a6:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01030aa:	7e 24                	jle    c01030d0 <ispunct+0x33>
c01030ac:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c01030b0:	7e 06                	jle    c01030b8 <ispunct+0x1b>
c01030b2:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c01030b6:	7e 18                	jle    c01030d0 <ispunct+0x33>
c01030b8:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c01030bc:	7e 06                	jle    c01030c4 <ispunct+0x27>
c01030be:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c01030c2:	7e 0c                	jle    c01030d0 <ispunct+0x33>
c01030c4:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c01030c8:	7e 0d                	jle    c01030d7 <ispunct+0x3a>
c01030ca:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c01030ce:	7f 07                	jg     c01030d7 <ispunct+0x3a>
    {
        return true;
c01030d0:	b8 01 00 00 00       	mov    $0x1,%eax
c01030d5:	eb 05                	jmp    c01030dc <ispunct+0x3f>
    }
    return false;
c01030d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01030dc:	5d                   	pop    %ebp
c01030dd:	c3                   	ret    

c01030de <isspace>:
 * @param character c as int
 * @return true  -> c is a space character
 * @return false -> c isn't a space character
 **/
int isspace(int c)
{
c01030de:	55                   	push   %ebp
c01030df:	89 e5                	mov    %esp,%ebp
    if (c == ' ' || c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v')
c01030e1:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c01030e5:	74 1e                	je     c0103105 <isspace+0x27>
c01030e7:	83 7d 08 0c          	cmpl   $0xc,0x8(%ebp)
c01030eb:	74 18                	je     c0103105 <isspace+0x27>
c01030ed:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c01030f1:	74 12                	je     c0103105 <isspace+0x27>
c01030f3:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
c01030f7:	74 0c                	je     c0103105 <isspace+0x27>
c01030f9:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
c01030fd:	74 06                	je     c0103105 <isspace+0x27>
c01030ff:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
c0103103:	75 07                	jne    c010310c <isspace+0x2e>
    {
        return true;
c0103105:	b8 01 00 00 00       	mov    $0x1,%eax
c010310a:	eb 05                	jmp    c0103111 <isspace+0x33>
    }
    return false;
c010310c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103111:	5d                   	pop    %ebp
c0103112:	c3                   	ret    

c0103113 <isupper>:
 * @param character c as int
 * @return true  -> c is an upper alphabetical character
 * @return false -> c isn't an upper alphabetical character
 **/
int isupper(int c)
{
c0103113:	55                   	push   %ebp
c0103114:	89 e5                	mov    %esp,%ebp
    if (c > 0x40 && c < 0x5B)
c0103116:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c010311a:	7e 0d                	jle    c0103129 <isupper+0x16>
c010311c:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0103120:	7f 07                	jg     c0103129 <isupper+0x16>
    {
        return true;
c0103122:	b8 01 00 00 00       	mov    $0x1,%eax
c0103127:	eb 05                	jmp    c010312e <isupper+0x1b>
    }
    return false;
c0103129:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010312e:	5d                   	pop    %ebp
c010312f:	c3                   	ret    

c0103130 <isxdigit>:
 * @param character c as int
 * @return true  -> c is a hexadecimal digit
 * @return false -> c isn't a hexadecimal digit
 **/
int isxdigit(int c)
{
c0103130:	55                   	push   %ebp
c0103131:	89 e5                	mov    %esp,%ebp
    if ( (c > 0x2F && c < 0x3A) || (c > 0x40 && c < 0x47) || (c > 0x60 && c < 0x67) )
c0103133:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0103137:	7e 06                	jle    c010313f <isxdigit+0xf>
c0103139:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c010313d:	7e 18                	jle    c0103157 <isxdigit+0x27>
c010313f:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0103143:	7e 06                	jle    c010314b <isxdigit+0x1b>
c0103145:	83 7d 08 46          	cmpl   $0x46,0x8(%ebp)
c0103149:	7e 0c                	jle    c0103157 <isxdigit+0x27>
c010314b:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c010314f:	7e 0d                	jle    c010315e <isxdigit+0x2e>
c0103151:	83 7d 08 66          	cmpl   $0x66,0x8(%ebp)
c0103155:	7f 07                	jg     c010315e <isxdigit+0x2e>
    {
        return true;
c0103157:	b8 01 00 00 00       	mov    $0x1,%eax
c010315c:	eb 05                	jmp    c0103163 <isxdigit+0x33>
    }
    return false;
c010315e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103163:	5d                   	pop    %ebp
c0103164:	c3                   	ret    

c0103165 <tolower>:
 * convert upper to lower character
 * @param upper character c as int
 * @return c as lower character as int
 **/
int tolower(int c)
{
c0103165:	55                   	push   %ebp
c0103166:	89 e5                	mov    %esp,%ebp
    c += 0x20;
c0103168:	83 45 08 20          	addl   $0x20,0x8(%ebp)
    return c;
c010316c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010316f:	5d                   	pop    %ebp
c0103170:	c3                   	ret    

c0103171 <toupper>:
 * convert lower to upper character
 * @param lower charcter c as int
 * @return c as upper character as int
 **/
int toupper(int c)
{
c0103171:	55                   	push   %ebp
c0103172:	89 e5                	mov    %esp,%ebp
    c -= 0x20;
c0103174:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    return c;
c0103178:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010317b:	5d                   	pop    %ebp
c010317c:	c3                   	ret    

c010317d <printf>:
#include <ctype.h>
#include <atoi.h>
#include <drivers/video.h>

int printf(const char *fmt, ...)
{
c010317d:	55                   	push   %ebp
c010317e:	89 e5                	mov    %esp,%ebp
c0103180:	81 ec 28 04 00 00    	sub    $0x428,%esp
    int size;
    char buffer[1024];
    memset(buffer, 0, 1024);
c0103186:	c7 44 24 08 00 04 00 	movl   $0x400,0x8(%esp)
c010318d:	00 
c010318e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103195:	00 
c0103196:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c010319c:	89 04 24             	mov    %eax,(%esp)
c010319f:	e8 d1 fd ff ff       	call   c0102f75 <memset>

    va_list args;
    va_start(args, fmt);
c01031a4:	8d 45 0c             	lea    0xc(%ebp),%eax
c01031a7:	89 85 f0 fb ff ff    	mov    %eax,-0x410(%ebp)

    size = vsprintf(buffer, fmt, args);
c01031ad:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
c01031b3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01031b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01031ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01031be:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c01031c4:	89 04 24             	mov    %eax,(%esp)
c01031c7:	e8 4b 00 00 00       	call   c0103217 <vsprintf>
c01031cc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    fputs(buffer, STDOUT);
c01031cf:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01031d6:	00 
c01031d7:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c01031dd:	89 04 24             	mov    %eax,(%esp)
c01031e0:	e8 12 8b 00 00       	call   c010bcf7 <fputs>

    va_end(args);
    return size;
c01031e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01031e8:	c9                   	leave  
c01031e9:	c3                   	ret    

c01031ea <sprintf>:

int sprintf(char *buf, const char *fmt, ...)
{
c01031ea:	55                   	push   %ebp
c01031eb:	89 e5                	mov    %esp,%ebp
c01031ed:	83 ec 28             	sub    $0x28,%esp
    int size;

    va_list args;
    va_start(args, fmt);
c01031f0:	8d 45 10             	lea    0x10(%ebp),%eax
c01031f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    size = vsprintf(buf, fmt, args);
c01031f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01031f9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01031fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103200:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103204:	8b 45 08             	mov    0x8(%ebp),%eax
c0103207:	89 04 24             	mov    %eax,(%esp)
c010320a:	e8 08 00 00 00       	call   c0103217 <vsprintf>
c010320f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    va_end(args);
    return size;
c0103212:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103215:	c9                   	leave  
c0103216:	c3                   	ret    

c0103217 <vsprintf>:

int vsprintf(char *buf, const char *fmt, va_list args)
{
c0103217:	55                   	push   %ebp
c0103218:	89 e5                	mov    %esp,%ebp
c010321a:	83 ec 58             	sub    $0x58,%esp
    char *str = buf;
c010321d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103220:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int precision;
    int qualifier;

    int base;

    for (; *fmt; ++fmt)
c0103223:	e9 1f 04 00 00       	jmp    c0103647 <vsprintf+0x430>
    {
        if (*fmt != '%')
c0103228:	8b 45 0c             	mov    0xc(%ebp),%eax
c010322b:	0f b6 00             	movzbl (%eax),%eax
c010322e:	3c 25                	cmp    $0x25,%al
c0103230:	74 14                	je     c0103246 <vsprintf+0x2f>
        {
            *buf++ = *fmt;
c0103232:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103235:	0f b6 10             	movzbl (%eax),%edx
c0103238:	8b 45 08             	mov    0x8(%ebp),%eax
c010323b:	88 10                	mov    %dl,(%eax)
c010323d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
            continue;
c0103241:	e9 fd 03 00 00       	jmp    c0103643 <vsprintf+0x42c>
        }

        /* flags */
        flags = 0;
c0103246:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
loop:
        ++fmt;
c010324d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        switch (*fmt)
c0103251:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103254:	0f b6 00             	movzbl (%eax),%eax
c0103257:	0f be c0             	movsbl %al,%eax
c010325a:	83 e8 20             	sub    $0x20,%eax
c010325d:	83 f8 10             	cmp    $0x10,%eax
c0103260:	77 27                	ja     c0103289 <vsprintf+0x72>
c0103262:	8b 04 85 28 10 11 c0 	mov    -0x3feeefd8(,%eax,4),%eax
c0103269:	ff e0                	jmp    *%eax
        {
            case '0':
                flags |= ZEROPAD;
c010326b:	83 4d e4 01          	orl    $0x1,-0x1c(%ebp)
                goto loop;
c010326f:	eb dc                	jmp    c010324d <vsprintf+0x36>
            case '+':
                flags |= PLUS;
c0103271:	83 4d e4 04          	orl    $0x4,-0x1c(%ebp)
                goto loop;
c0103275:	eb d6                	jmp    c010324d <vsprintf+0x36>
            case ' ':
                flags |= SPACE;
c0103277:	83 4d e4 08          	orl    $0x8,-0x1c(%ebp)
                goto loop;
c010327b:	eb d0                	jmp    c010324d <vsprintf+0x36>
            case '-':
                flags |= LEFT;
c010327d:	83 4d e4 10          	orl    $0x10,-0x1c(%ebp)
                goto loop;
c0103281:	eb ca                	jmp    c010324d <vsprintf+0x36>
            case '#':
                flags |= SPECIAL;
c0103283:	83 4d e4 40          	orl    $0x40,-0x1c(%ebp)
                goto loop;
c0103287:	eb c4                	jmp    c010324d <vsprintf+0x36>
        }

        /* width */
        width = 1;
c0103289:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
        if (isdigit(*fmt))
c0103290:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103293:	0f b6 00             	movzbl (%eax),%eax
c0103296:	0f be c0             	movsbl %al,%eax
c0103299:	83 e8 30             	sub    $0x30,%eax
c010329c:	83 f8 09             	cmp    $0x9,%eax
c010329f:	77 25                	ja     c01032c6 <vsprintf+0xaf>
        {
            width = atoi(fmt);
c01032a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032a4:	89 04 24             	mov    %eax,(%esp)
c01032a7:	e8 5c f2 ff ff       	call   c0102508 <atoi>
c01032ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
            while (isdigit(*++fmt));
c01032af:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c01032b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032b6:	0f b6 00             	movzbl (%eax),%eax
c01032b9:	0f be c0             	movsbl %al,%eax
c01032bc:	83 e8 30             	sub    $0x30,%eax
c01032bf:	83 f8 09             	cmp    $0x9,%eax
c01032c2:	76 eb                	jbe    c01032af <vsprintf+0x98>
c01032c4:	eb 29                	jmp    c01032ef <vsprintf+0xd8>
        }
        else if (*fmt == '*')
c01032c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032c9:	0f b6 00             	movzbl (%eax),%eax
c01032cc:	3c 2a                	cmp    $0x2a,%al
c01032ce:	75 1f                	jne    c01032ef <vsprintf+0xd8>
        {
            ++fmt;
c01032d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
            width = va_arg(args, int);
c01032d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01032d7:	8d 50 04             	lea    0x4(%eax),%edx
c01032da:	89 55 10             	mov    %edx,0x10(%ebp)
c01032dd:	8b 00                	mov    (%eax),%eax
c01032df:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (width < 0)
c01032e2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01032e6:	79 07                	jns    c01032ef <vsprintf+0xd8>
            {
                width = - width;
c01032e8:	f7 5d e0             	negl   -0x20(%ebp)
                flags |= LEFT;
c01032eb:	83 4d e4 10          	orl    $0x10,-0x1c(%ebp)
            }
        }

        /* precision */
        precision = -1;
c01032ef:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
        if (*fmt == '.')
c01032f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032f9:	0f b6 00             	movzbl (%eax),%eax
c01032fc:	3c 2e                	cmp    $0x2e,%al
c01032fe:	75 63                	jne    c0103363 <vsprintf+0x14c>
        {
            ++fmt;
c0103300:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
            if (isdigit(*fmt))
c0103304:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103307:	0f b6 00             	movzbl (%eax),%eax
c010330a:	0f be c0             	movsbl %al,%eax
c010330d:	83 e8 30             	sub    $0x30,%eax
c0103310:	83 f8 09             	cmp    $0x9,%eax
c0103313:	77 25                	ja     c010333a <vsprintf+0x123>
            {
                precision = atoi(fmt);
c0103315:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103318:	89 04 24             	mov    %eax,(%esp)
c010331b:	e8 e8 f1 ff ff       	call   c0102508 <atoi>
c0103320:	89 45 dc             	mov    %eax,-0x24(%ebp)
                while (isdigit(*++fmt));
c0103323:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0103327:	8b 45 0c             	mov    0xc(%ebp),%eax
c010332a:	0f b6 00             	movzbl (%eax),%eax
c010332d:	0f be c0             	movsbl %al,%eax
c0103330:	83 e8 30             	sub    $0x30,%eax
c0103333:	83 f8 09             	cmp    $0x9,%eax
c0103336:	76 eb                	jbe    c0103323 <vsprintf+0x10c>
c0103338:	eb 1c                	jmp    c0103356 <vsprintf+0x13f>
            }
            else if (*fmt == '*')
c010333a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010333d:	0f b6 00             	movzbl (%eax),%eax
c0103340:	3c 2a                	cmp    $0x2a,%al
c0103342:	75 12                	jne    c0103356 <vsprintf+0x13f>
            {
                ++fmt;
c0103344:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
                precision = va_arg(args, int);
c0103348:	8b 45 10             	mov    0x10(%ebp),%eax
c010334b:	8d 50 04             	lea    0x4(%eax),%edx
c010334e:	89 55 10             	mov    %edx,0x10(%ebp)
c0103351:	8b 00                	mov    (%eax),%eax
c0103353:	89 45 dc             	mov    %eax,-0x24(%ebp)
            }
            if (precision < 0)
c0103356:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010335a:	79 07                	jns    c0103363 <vsprintf+0x14c>
            {
                precision = 0;
c010335c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            }
        }

        /* qualifier */
        qualifier = -1;
c0103363:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
        if (strchr("hlL", *fmt))
c010336a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010336d:	0f b6 00             	movzbl (%eax),%eax
c0103370:	0f be c0             	movsbl %al,%eax
c0103373:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103377:	c7 04 24 24 10 11 c0 	movl   $0xc0111024,(%esp)
c010337e:	e8 c8 f8 ff ff       	call   c0102c4b <strchr>
c0103383:	85 c0                	test   %eax,%eax
c0103385:	74 10                	je     c0103397 <vsprintf+0x180>
        {
            qualifier = *fmt;
c0103387:	8b 45 0c             	mov    0xc(%ebp),%eax
c010338a:	0f b6 00             	movzbl (%eax),%eax
c010338d:	0f be c0             	movsbl %al,%eax
c0103390:	89 45 d8             	mov    %eax,-0x28(%ebp)
            ++fmt;
c0103393:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }

        /* base */
        base = 10;
c0103397:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)

        /* specifier */
        switch (*fmt)
c010339e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033a1:	0f b6 00             	movzbl (%eax),%eax
c01033a4:	0f be c0             	movsbl %al,%eax
c01033a7:	83 e8 25             	sub    $0x25,%eax
c01033aa:	83 f8 53             	cmp    $0x53,%eax
c01033ad:	0f 87 c1 01 00 00    	ja     c0103574 <vsprintf+0x35d>
c01033b3:	8b 04 85 6c 10 11 c0 	mov    -0x3feeef94(,%eax,4),%eax
c01033ba:	ff e0                	jmp    *%eax
        {
            case 'c':
                len = 1;
c01033bc:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)

                if (!(flags & LEFT))
c01033c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01033c6:	83 e0 10             	and    $0x10,%eax
c01033c9:	85 c0                	test   %eax,%eax
c01033cb:	75 1d                	jne    c01033ea <vsprintf+0x1d3>
                    while (len < width--)
c01033cd:	eb 0a                	jmp    c01033d9 <vsprintf+0x1c2>
                        *buf++ = ' ';
c01033cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01033d2:	c6 00 20             	movb   $0x20,(%eax)
c01033d5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        {
            case 'c':
                len = 1;

                if (!(flags & LEFT))
                    while (len < width--)
c01033d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01033dc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01033df:	0f 9f c0             	setg   %al
c01033e2:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c01033e6:	84 c0                	test   %al,%al
c01033e8:	75 e5                	jne    c01033cf <vsprintf+0x1b8>
                        *buf++ = ' ';

                *buf++ = (unsigned char)va_arg(args, int);
c01033ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01033ed:	8d 50 04             	lea    0x4(%eax),%edx
c01033f0:	89 55 10             	mov    %edx,0x10(%ebp)
c01033f3:	8b 00                	mov    (%eax),%eax
c01033f5:	89 c2                	mov    %eax,%edx
c01033f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01033fa:	88 10                	mov    %dl,(%eax)
c01033fc:	83 45 08 01          	addl   $0x1,0x8(%ebp)

                while (len < width--)
c0103400:	eb 0a                	jmp    c010340c <vsprintf+0x1f5>
                    *buf++ = ' ';
c0103402:	8b 45 08             	mov    0x8(%ebp),%eax
c0103405:	c6 00 20             	movb   $0x20,(%eax)
c0103408:	83 45 08 01          	addl   $0x1,0x8(%ebp)
                    while (len < width--)
                        *buf++ = ' ';

                *buf++ = (unsigned char)va_arg(args, int);

                while (len < width--)
c010340c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010340f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0103412:	0f 9f c0             	setg   %al
c0103415:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c0103419:	84 c0                	test   %al,%al
c010341b:	75 e5                	jne    c0103402 <vsprintf+0x1eb>
                    *buf++ = ' ';
                continue;
c010341d:	e9 21 02 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case 's':
                s = va_arg(args, char *);
c0103422:	8b 45 10             	mov    0x10(%ebp),%eax
c0103425:	8d 50 04             	lea    0x4(%eax),%edx
c0103428:	89 55 10             	mov    %edx,0x10(%ebp)
c010342b:	8b 00                	mov    (%eax),%eax
c010342d:	89 45 f0             	mov    %eax,-0x10(%ebp)
                len = strnlen(s, precision);
c0103430:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103433:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103437:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010343a:	89 04 24             	mov    %eax,(%esp)
c010343d:	e8 b3 f5 ff ff       	call   c01029f5 <strnlen>
c0103442:	89 45 d0             	mov    %eax,-0x30(%ebp)

                if (!(flags & LEFT))
c0103445:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103448:	83 e0 10             	and    $0x10,%eax
c010344b:	85 c0                	test   %eax,%eax
c010344d:	75 1d                	jne    c010346c <vsprintf+0x255>
                    while (len < width--)
c010344f:	eb 0a                	jmp    c010345b <vsprintf+0x244>
                        *buf++ = ' ';
c0103451:	8b 45 08             	mov    0x8(%ebp),%eax
c0103454:	c6 00 20             	movb   $0x20,(%eax)
c0103457:	83 45 08 01          	addl   $0x1,0x8(%ebp)
            case 's':
                s = va_arg(args, char *);
                len = strnlen(s, precision);

                if (!(flags & LEFT))
                    while (len < width--)
c010345b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010345e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0103461:	0f 9f c0             	setg   %al
c0103464:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c0103468:	84 c0                	test   %al,%al
c010346a:	75 e5                	jne    c0103451 <vsprintf+0x23a>
                        *buf++ = ' ';

                for (i = 0; i < len; ++i)
c010346c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103473:	eb 17                	jmp    c010348c <vsprintf+0x275>
                    *buf++ = *s++;
c0103475:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103478:	0f b6 10             	movzbl (%eax),%edx
c010347b:	8b 45 08             	mov    0x8(%ebp),%eax
c010347e:	88 10                	mov    %dl,(%eax)
c0103480:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0103484:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

                if (!(flags & LEFT))
                    while (len < width--)
                        *buf++ = ' ';

                for (i = 0; i < len; ++i)
c0103488:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010348c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010348f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0103492:	7c e1                	jl     c0103475 <vsprintf+0x25e>
                    *buf++ = *s++;

                while (len < width--)
c0103494:	eb 0a                	jmp    c01034a0 <vsprintf+0x289>
                    *buf++ = ' ';
c0103496:	8b 45 08             	mov    0x8(%ebp),%eax
c0103499:	c6 00 20             	movb   $0x20,(%eax)
c010349c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
                        *buf++ = ' ';

                for (i = 0; i < len; ++i)
                    *buf++ = *s++;

                while (len < width--)
c01034a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01034a3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01034a6:	0f 9f c0             	setg   %al
c01034a9:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c01034ad:	84 c0                	test   %al,%al
c01034af:	75 e5                	jne    c0103496 <vsprintf+0x27f>
                    *buf++ = ' ';
                continue;
c01034b1:	e9 8d 01 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case 'p':
                width = 2 * sizeof(void *);
c01034b6:	c7 45 e0 08 00 00 00 	movl   $0x8,-0x20(%ebp)
                flags |= ZEROPAD;
c01034bd:	83 4d e4 01          	orl    $0x1,-0x1c(%ebp)
                flags |= SPECIAL;
c01034c1:	83 4d e4 40          	orl    $0x40,-0x1c(%ebp)
                itoa_ex((unsigned long)va_arg(args, void *), buf, 16, flags, width);
c01034c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01034c8:	8d 50 04             	lea    0x4(%eax),%edx
c01034cb:	89 55 10             	mov    %edx,0x10(%ebp)
c01034ce:	8b 00                	mov    (%eax),%eax
c01034d0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01034d3:	89 54 24 10          	mov    %edx,0x10(%esp)
c01034d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01034da:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01034de:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01034e5:	00 
c01034e6:	8b 55 08             	mov    0x8(%ebp),%edx
c01034e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01034ed:	89 04 24             	mov    %eax,(%esp)
c01034f0:	e8 58 ee ff ff       	call   c010234d <itoa_ex>
                while (*++buf);
c01034f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01034f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01034fc:	0f b6 00             	movzbl (%eax),%eax
c01034ff:	84 c0                	test   %al,%al
c0103501:	75 f2                	jne    c01034f5 <vsprintf+0x2de>
                continue;
c0103503:	e9 3b 01 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case 'n':
                if (qualifier == 'l')
c0103508:	83 7d d8 6c          	cmpl   $0x6c,-0x28(%ebp)
c010350c:	75 20                	jne    c010352e <vsprintf+0x317>
                {
                    long *dest = va_arg(args, long *);
c010350e:	8b 45 10             	mov    0x10(%ebp),%eax
c0103511:	8d 50 04             	lea    0x4(%eax),%edx
c0103514:	89 55 10             	mov    %edx,0x10(%ebp)
c0103517:	8b 00                	mov    (%eax),%eax
c0103519:	89 45 cc             	mov    %eax,-0x34(%ebp)
                    *dest = (buf - str);
c010351c:	8b 55 08             	mov    0x8(%ebp),%edx
c010351f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103522:	29 c2                	sub    %eax,%edx
c0103524:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103527:	89 10                	mov    %edx,(%eax)
                else
                {
                    int *dest = va_arg(args, int *);
                    *dest = (buf - str);
                }
                continue;
c0103529:	e9 15 01 00 00       	jmp    c0103643 <vsprintf+0x42c>
                    long *dest = va_arg(args, long *);
                    *dest = (buf - str);
                }
                else
                {
                    int *dest = va_arg(args, int *);
c010352e:	8b 45 10             	mov    0x10(%ebp),%eax
c0103531:	8d 50 04             	lea    0x4(%eax),%edx
c0103534:	89 55 10             	mov    %edx,0x10(%ebp)
c0103537:	8b 00                	mov    (%eax),%eax
c0103539:	89 45 c8             	mov    %eax,-0x38(%ebp)
                    *dest = (buf - str);
c010353c:	8b 55 08             	mov    0x8(%ebp),%edx
c010353f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103542:	29 c2                	sub    %eax,%edx
c0103544:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103547:	89 10                	mov    %edx,(%eax)
                }
                continue;
c0103549:	e9 f5 00 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case '%':
                *buf++ = '%';
c010354e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103551:	c6 00 25             	movb   $0x25,(%eax)
c0103554:	83 45 08 01          	addl   $0x1,0x8(%ebp)

            /* integers */

            case 'o':
                base = 8;
c0103558:	c7 45 d4 08 00 00 00 	movl   $0x8,-0x2c(%ebp)
                break;
c010355f:	eb 45                	jmp    c01035a6 <vsprintf+0x38f>

            case 'd':
            case 'i':
                flags |= SIGN;
c0103561:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
            case 'u':
                break;
c0103565:	eb 3e                	jmp    c01035a5 <vsprintf+0x38e>

            case 'x':
                flags |= SMALL;
c0103567:	83 4d e4 20          	orl    $0x20,-0x1c(%ebp)
            case 'X':
                base = 16;
c010356b:	c7 45 d4 10 00 00 00 	movl   $0x10,-0x2c(%ebp)
                break;
c0103572:	eb 32                	jmp    c01035a6 <vsprintf+0x38f>

            default:
                *str++ = '%';
c0103574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103577:	c6 00 25             	movb   $0x25,(%eax)
c010357a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
                if (*fmt)
c010357e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103581:	0f b6 00             	movzbl (%eax),%eax
c0103584:	84 c0                	test   %al,%al
c0103586:	74 14                	je     c010359c <vsprintf+0x385>
                {
                    *str++ = *fmt;
c0103588:	8b 45 0c             	mov    0xc(%ebp),%eax
c010358b:	0f b6 10             	movzbl (%eax),%edx
c010358e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103591:	88 10                	mov    %dl,(%eax)
c0103593:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
                }
                else
                {
                    --fmt;
                }
                continue;
c0103597:	e9 a7 00 00 00       	jmp    c0103643 <vsprintf+0x42c>
                {
                    *str++ = *fmt;
                }
                else
                {
                    --fmt;
c010359c:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
                }
                continue;
c01035a0:	e9 9e 00 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case 'd':
            case 'i':
                flags |= SIGN;
            case 'u':
                break;
c01035a5:	90                   	nop
                    --fmt;
                }
                continue;
        }

        if (qualifier == 'l')
c01035a6:	83 7d d8 6c          	cmpl   $0x6c,-0x28(%ebp)
c01035aa:	75 10                	jne    c01035bc <vsprintf+0x3a5>
        {
            num = va_arg(args, unsigned long);
c01035ac:	8b 45 10             	mov    0x10(%ebp),%eax
c01035af:	8d 50 04             	lea    0x4(%eax),%edx
c01035b2:	89 55 10             	mov    %edx,0x10(%ebp)
c01035b5:	8b 00                	mov    (%eax),%eax
c01035b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01035ba:	eb 52                	jmp    c010360e <vsprintf+0x3f7>
        }
        else if (qualifier == 'h')
c01035bc:	83 7d d8 68          	cmpl   $0x68,-0x28(%ebp)
c01035c0:	75 24                	jne    c01035e6 <vsprintf+0x3cf>
        {
            num = (unsigned short)va_arg(args, int);
c01035c2:	8b 45 10             	mov    0x10(%ebp),%eax
c01035c5:	8d 50 04             	lea    0x4(%eax),%edx
c01035c8:	89 55 10             	mov    %edx,0x10(%ebp)
c01035cb:	8b 00                	mov    (%eax),%eax
c01035cd:	0f b7 c0             	movzwl %ax,%eax
c01035d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (flags & SIGN)
c01035d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01035d6:	83 e0 02             	and    $0x2,%eax
c01035d9:	85 c0                	test   %eax,%eax
c01035db:	74 31                	je     c010360e <vsprintf+0x3f7>
            {
                num = (short)num;
c01035dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01035e0:	98                   	cwtl   
c01035e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01035e4:	eb 28                	jmp    c010360e <vsprintf+0x3f7>
            }
        }
        else if (flags & SIGN)
c01035e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01035e9:	83 e0 02             	and    $0x2,%eax
c01035ec:	85 c0                	test   %eax,%eax
c01035ee:	74 10                	je     c0103600 <vsprintf+0x3e9>
        {
            num = va_arg(args, int);
c01035f0:	8b 45 10             	mov    0x10(%ebp),%eax
c01035f3:	8d 50 04             	lea    0x4(%eax),%edx
c01035f6:	89 55 10             	mov    %edx,0x10(%ebp)
c01035f9:	8b 00                	mov    (%eax),%eax
c01035fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01035fe:	eb 0e                	jmp    c010360e <vsprintf+0x3f7>
        }
        else
        {
            num = va_arg(args, unsigned int);
c0103600:	8b 45 10             	mov    0x10(%ebp),%eax
c0103603:	8d 50 04             	lea    0x4(%eax),%edx
c0103606:	89 55 10             	mov    %edx,0x10(%ebp)
c0103609:	8b 00                	mov    (%eax),%eax
c010360b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }

        itoa_ex(num, buf, base, flags, width);
c010360e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103611:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103614:	89 54 24 10          	mov    %edx,0x10(%esp)
c0103618:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010361b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010361f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103622:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103626:	8b 55 08             	mov    0x8(%ebp),%edx
c0103629:	89 54 24 04          	mov    %edx,0x4(%esp)
c010362d:	89 04 24             	mov    %eax,(%esp)
c0103630:	e8 18 ed ff ff       	call   c010234d <itoa_ex>
        while (*++buf);
c0103635:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0103639:	8b 45 08             	mov    0x8(%ebp),%eax
c010363c:	0f b6 00             	movzbl (%eax),%eax
c010363f:	84 c0                	test   %al,%al
c0103641:	75 f2                	jne    c0103635 <vsprintf+0x41e>
    int precision;
    int qualifier;

    int base;

    for (; *fmt; ++fmt)
c0103643:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0103647:	8b 45 0c             	mov    0xc(%ebp),%eax
c010364a:	0f b6 00             	movzbl (%eax),%eax
c010364d:	84 c0                	test   %al,%al
c010364f:	0f 85 d3 fb ff ff    	jne    c0103228 <vsprintf+0x11>

        itoa_ex(num, buf, base, flags, width);
        while (*++buf);
    }

    *buf = '\0';
c0103655:	8b 45 08             	mov    0x8(%ebp),%eax
c0103658:	c6 00 00             	movb   $0x0,(%eax)

    return buf - str;
c010365b:	8b 55 08             	mov    0x8(%ebp),%edx
c010365e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103661:	89 d1                	mov    %edx,%ecx
c0103663:	29 c1                	sub    %eax,%ecx
c0103665:	89 c8                	mov    %ecx,%eax
}
c0103667:	c9                   	leave  
c0103668:	c3                   	ret    

c0103669 <print_logo>:
                 UUUUUUUUU       NNNNNNNN         NNNNNNN IIIIIIIIII           \n\
                                                                               \n\
";

static void print_logo(color_t color)
{
c0103669:	55                   	push   %ebp
c010366a:	89 e5                	mov    %esp,%ebp
c010366c:	83 ec 38             	sub    $0x38,%esp
c010366f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103672:	88 45 e4             	mov    %al,-0x1c(%ebp)
    color_t color_saved = get_color();
c0103675:	e8 26 87 00 00       	call   c010bda0 <get_color>
c010367a:	88 45 f7             	mov    %al,-0x9(%ebp)

    set_color(color | BLACK << 4);
c010367d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0103681:	89 04 24             	mov    %eax,(%esp)
c0103684:	e8 00 87 00 00       	call   c010bd89 <set_color>

    puts(__logo);
c0103689:	a1 00 30 11 c0       	mov    0xc0113000,%eax
c010368e:	89 04 24             	mov    %eax,(%esp)
c0103691:	e8 1e 86 00 00       	call   c010bcb4 <puts>

    set_color(color_saved);
c0103696:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010369a:	89 04 24             	mov    %eax,(%esp)
c010369d:	e8 e7 86 00 00       	call   c010bd89 <set_color>
}
c01036a2:	c9                   	leave  
c01036a3:	c3                   	ret    

c01036a4 <init>:
* @return 0
*/
extern struct process_state *kernel_state;
extern list_t *running_threads;
int init (struct multiboot_struct *mb_info, uint32_t magic_number)
{
c01036a4:	55                   	push   %ebp
c01036a5:	89 e5                	mov    %esp,%ebp
c01036a7:	83 ec 68             	sub    $0x68,%esp
    clear_screen();
c01036aa:	e8 7c 86 00 00       	call   c010bd2b <clear_screen>
    if (magic_number != 0x2BADB002)
c01036af:	81 7d 0c 02 b0 ad 2b 	cmpl   $0x2badb002,0xc(%ebp)
c01036b6:	74 0c                	je     c01036c4 <init+0x20>
    {
        panic("Incompatible Bootloader");
c01036b8:	c7 04 24 5d 17 11 c0 	movl   $0xc011175d,(%esp)
c01036bf:	e8 ab 89 00 00       	call   c010c06f <panic>
    }
    set_color(WHITE | BLACK << 4);
c01036c4:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c01036cb:	e8 b9 86 00 00       	call   c010bd89 <set_color>
    //Init Kernelmodules
    INIT_PMM(mb_info);
c01036d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01036d3:	89 04 24             	mov    %eax,(%esp)
c01036d6:	e8 e9 bf 00 00       	call   c010f6c4 <INIT_PMM>
    INIT_GDT();
c01036db:	e8 40 c9 00 00       	call   c0110020 <INIT_GDT>
    INIT_IDT();
c01036e0:	e8 e3 ad 00 00       	call   c010e4c8 <INIT_IDT>
    INIT_PAGING(mb_info);
c01036e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01036e8:	89 04 24             	mov    %eax,(%esp)
c01036eb:	e8 78 99 00 00       	call   c010d068 <INIT_PAGING>
    INIT_HEAP();
c01036f0:	e8 d0 9e 00 00       	call   c010d5c5 <INIT_HEAP>
    INIT_VFS();
c01036f5:	e8 83 1a 00 00       	call   c010517d <INIT_VFS>
    INIT_TRIGGER();
c01036fa:	e8 72 69 00 00       	call   c010a071 <INIT_TRIGGER>
    INIT_CLOCK(600);
c01036ff:	c7 04 24 58 02 00 00 	movl   $0x258,(%esp)
c0103706:	e8 9d 8d 00 00       	call   c010c4a8 <INIT_CLOCK>
    INIT_SCHEDULER();
c010370b:	e8 44 11 00 00       	call   c0104854 <INIT_SCHEDULER>
    asm volatile("sti");
c0103710:	fb                   	sti    

    //print Logo and loading message
    clear_screen();
c0103711:	e8 15 86 00 00       	call   c010bd2b <clear_screen>
    print_logo(YELLOW);
c0103716:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010371d:	e8 47 ff ff ff       	call   c0103669 <print_logo>
    puts("Universe wird gestartet...\n");
c0103722:	c7 04 24 75 17 11 c0 	movl   $0xc0111775,(%esp)
c0103729:	e8 86 85 00 00       	call   c010bcb4 <puts>
    // count free memory and display it
    /*uint32_t pages = pmm_count_free_pages();
    printf("%u freie Speicherseiten (%u MB)\n", pages, pages >> 8);*/
    //print current time
    struct time t;
    update_time(&t);
c010372e:	8d 45 c1             	lea    -0x3f(%ebp),%eax
c0103731:	89 04 24             	mov    %eax,(%esp)
c0103734:	e8 99 8e 00 00       	call   c010c5d2 <update_time>
    print_time(&t); //crashes on a real computer and on virtual box
c0103739:	8d 45 c1             	lea    -0x3f(%ebp),%eax
c010373c:	89 04 24             	mov    %eax,(%esp)
c010373f:	e8 e1 74 00 00       	call   c010ac25 <print_time>
    printf("\n");
c0103744:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010374b:	e8 05 84 00 00       	call   c010bb55 <putchar>
    printf("Timestamp:%d\n\n",unix_time(&t));
c0103750:	8d 45 c1             	lea    -0x3f(%ebp),%eax
c0103753:	89 04 24             	mov    %eax,(%esp)
c0103756:	e8 54 73 00 00       	call   c010aaaf <unix_time>
c010375b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010375f:	c7 04 24 91 17 11 c0 	movl   $0xc0111791,(%esp)
c0103766:	e8 12 fa ff ff       	call   c010317d <printf>
    INIT_CPUID();
c010376b:	e8 88 c7 00 00       	call   c010fef8 <INIT_CPUID>
    printf("\n");
c0103770:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0103777:	e8 d9 83 00 00       	call   c010bb55 <putchar>
    INIT_PCI();
c010377c:	e8 ad 7c 00 00       	call   c010b42e <INIT_PCI>


    int i;
    struct mods_add* modules = (struct mods_add*) mb_info->mods_addr;
c0103781:	8b 45 08             	mov    0x8(%ebp),%eax
c0103784:	8b 40 18             	mov    0x18(%eax),%eax
c0103787:	89 45 f0             	mov    %eax,-0x10(%ebp)

    void *phys = (void*)((int)modules[0].string & (int)~0xfff);
c010378a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010378d:	8b 40 08             	mov    0x8(%eax),%eax
c0103790:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103795:	89 45 ec             	mov    %eax,-0x14(%ebp)
    void *virt = (void*) vmm_automap_kernel(current_context, (paddr_t)phys, VMM_WRITABLE);
c0103798:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010379b:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c01037a0:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01037a7:	00 
c01037a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01037ac:	89 04 24             	mov    %eax,(%esp)
c01037af:	e8 1a 9a 00 00       	call   c010d1ce <vmm_automap_kernel>
c01037b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for(i = 0; i < mb_info->mods_count; i++)
c01037b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01037be:	eb 3a                	jmp    c01037fa <init+0x156>
    {
        int diff = (int)modules[i].string - (int)phys;
c01037c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c3:	89 c2                	mov    %eax,%edx
c01037c5:	c1 e2 04             	shl    $0x4,%edx
c01037c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037cb:	01 d0                	add    %edx,%eax
c01037cd:	8b 40 08             	mov    0x8(%eax),%eax
c01037d0:	89 c2                	mov    %eax,%edx
c01037d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d5:	89 d1                	mov    %edx,%ecx
c01037d7:	29 c1                	sub    %eax,%ecx
c01037d9:	89 c8                	mov    %ecx,%eax
c01037db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        modules[i].string = virt + diff;
c01037de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037e1:	89 c2                	mov    %eax,%edx
c01037e3:	c1 e2 04             	shl    $0x4,%edx
c01037e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037e9:	01 d0                	add    %edx,%eax
c01037eb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01037ee:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01037f1:	01 ca                	add    %ecx,%edx
c01037f3:	89 50 08             	mov    %edx,0x8(%eax)
    int i;
    struct mods_add* modules = (struct mods_add*) mb_info->mods_addr;

    void *phys = (void*)((int)modules[0].string & (int)~0xfff);
    void *virt = (void*) vmm_automap_kernel(current_context, (paddr_t)phys, VMM_WRITABLE);
    for(i = 0; i < mb_info->mods_count; i++)
c01037f6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01037fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01037fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103800:	8b 40 14             	mov    0x14(%eax),%eax
c0103803:	39 c2                	cmp    %eax,%edx
c0103805:	72 b9                	jb     c01037c0 <init+0x11c>
    {
        int diff = (int)modules[i].string - (int)phys;
        modules[i].string = virt + diff;
    }

    struct mapping_statistics stats = map_all(mb_info);
c0103807:	8d 45 b4             	lea    -0x4c(%ebp),%eax
c010380a:	8b 55 08             	mov    0x8(%ebp),%edx
c010380d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103811:	89 04 24             	mov    %eax,(%esp)
c0103814:	e8 75 38 00 00       	call   c010708e <map_all>
c0103819:	83 ec 04             	sub    $0x4,%esp
    printf("%d modules total, %d successfully loaded, %d failed\n", stats.total, stats.load_success, stats.load_failed);
c010381c:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010381f:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103822:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103825:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0103829:	89 54 24 08          	mov    %edx,0x8(%esp)
c010382d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103831:	c7 04 24 a0 17 11 c0 	movl   $0xc01117a0,(%esp)
c0103838:	e8 40 f9 ff ff       	call   c010317d <printf>

    vfs_inode_t *pfnode = vfs_lookup_path("/drivers/system.pf");
c010383d:	c7 04 24 d5 17 11 c0 	movl   $0xc01117d5,(%esp)
c0103844:	e8 76 20 00 00       	call   c01058bf <vfs_lookup_path>
c0103849:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if(pfnode != NULL)
c010384c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0103850:	0f 84 93 00 00 00    	je     c01038e9 <init+0x245>
    {
        int argc = 2;
c0103856:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%ebp)
        void *argv[2];
        char *pf = (char *)malloc(pfnode->length+1);
c010385d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103860:	8b 40 08             	mov    0x8(%eax),%eax
c0103863:	83 c0 01             	add    $0x1,%eax
c0103866:	89 04 24             	mov    %eax,(%esp)
c0103869:	e8 38 9e 00 00       	call   c010d6a6 <malloc>
c010386e:	89 45 d8             	mov    %eax,-0x28(%ebp)
        vfs_read(pfnode, 0, pf, pfnode->length);
c0103871:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103874:	8b 40 08             	mov    0x8(%eax),%eax
c0103877:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010387b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010387e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103882:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103889:	00 
c010388a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010388d:	89 04 24             	mov    %eax,(%esp)
c0103890:	e8 4f 1d 00 00       	call   c01055e4 <vfs_read>
        pf[pfnode->length+1] = '\0';
c0103895:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103898:	8b 40 08             	mov    0x8(%eax),%eax
c010389b:	8d 50 01             	lea    0x1(%eax),%edx
c010389e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038a1:	01 d0                	add    %edx,%eax
c01038a3:	c6 00 00             	movb   $0x0,(%eax)
        list_t *pipelines = pfp(pf);
c01038a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038a9:	89 04 24             	mov    %eax,(%esp)
c01038ac:	e8 03 5c 00 00       	call   c01094b4 <pfp>
c01038b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        struct section *sec = list_pop_front(pipelines);
c01038b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01038b7:	89 04 24             	mov    %eax,(%esp)
c01038ba:	e8 c6 ee ff ff       	call   c0102785 <list_pop_front>
c01038bf:	89 45 d0             	mov    %eax,-0x30(%ebp)

        argv[1] = mb_info;
c01038c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01038c5:	89 45 b0             	mov    %eax,-0x50(%ebp)
        argv[0] = sec;
c01038c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01038cb:	89 45 ac             	mov    %eax,-0x54(%ebp)
        kernel_thread_create((uintptr_t)INIT_HYPERVISOR,argc,argv);
c01038ce:	b8 77 8e 10 c0       	mov    $0xc0108e77,%eax
c01038d3:	8d 55 ac             	lea    -0x54(%ebp),%edx
c01038d6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01038da:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01038dd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01038e1:	89 04 24             	mov    %eax,(%esp)
c01038e4:	e8 da 12 00 00       	call   c0104bc3 <kernel_thread_create>
    }

    vfs_inode_t *testnode = vfs_lookup_path("/test.elf");
c01038e9:	c7 04 24 e8 17 11 c0 	movl   $0xc01117e8,(%esp)
c01038f0:	e8 ca 1f 00 00       	call   c01058bf <vfs_lookup_path>
c01038f5:	89 45 cc             	mov    %eax,-0x34(%ebp)

    if(testnode == NULL)
c01038f8:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01038fc:	75 0e                	jne    c010390c <init+0x268>
    {
        printf("ultrashell.elf not in vfs\n");
c01038fe:	c7 04 24 f2 17 11 c0 	movl   $0xc01117f2,(%esp)
c0103905:	e8 aa 83 00 00       	call   c010bcb4 <puts>
c010390a:	eb 23                	jmp    c010392f <init+0x28b>
    }
    else
    {
        load_elf_from_file(testnode, 0, 0, 0);
c010390c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0103913:	00 
c0103914:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010391b:	00 
c010391c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103923:	00 
c0103924:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103927:	89 04 24             	mov    %eax,(%esp)
c010392a:	e8 07 00 00 00       	call   c0103936 <load_elf_from_file>
    }


    return 0;
c010392f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103934:	c9                   	leave  
c0103935:	c3                   	ret    

c0103936 <load_elf_from_file>:
#include <sched/thread.h>
#include <printf.h>
#include <string.h>

struct process_state *load_elf_from_file(vfs_inode_t *inode, uid_t uid, gid_t gid, struct pipeset *s)
{
c0103936:	55                   	push   %ebp
c0103937:	89 e5                	mov    %esp,%ebp
c0103939:	83 ec 38             	sub    $0x38,%esp
    void *image = malloc(inode->length);
c010393c:	8b 45 08             	mov    0x8(%ebp),%eax
c010393f:	8b 40 08             	mov    0x8(%eax),%eax
c0103942:	89 04 24             	mov    %eax,(%esp)
c0103945:	e8 5c 9d 00 00       	call   c010d6a6 <malloc>
c010394a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vfs_read(inode, 0, image, inode->length);
c010394d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103950:	8b 40 08             	mov    0x8(%eax),%eax
c0103953:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103957:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010395a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010395e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103965:	00 
c0103966:	8b 45 08             	mov    0x8(%ebp),%eax
c0103969:	89 04 24             	mov    %eax,(%esp)
c010396c:	e8 73 1c 00 00       	call   c01055e4 <vfs_read>
    struct process_state *state = load_elf(image, inode->name, uid, gid, s);
c0103971:	8b 45 08             	mov    0x8(%ebp),%eax
c0103974:	8b 00                	mov    (%eax),%eax
c0103976:	8b 55 14             	mov    0x14(%ebp),%edx
c0103979:	89 54 24 10          	mov    %edx,0x10(%esp)
c010397d:	8b 55 10             	mov    0x10(%ebp),%edx
c0103980:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0103984:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103987:	89 54 24 08          	mov    %edx,0x8(%esp)
c010398b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010398f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103992:	89 04 24             	mov    %eax,(%esp)
c0103995:	e8 13 00 00 00       	call   c01039ad <load_elf>
c010399a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    free(image);
c010399d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039a0:	89 04 24             	mov    %eax,(%esp)
c01039a3:	e8 e5 9d 00 00       	call   c010d78d <free>

    return state;
c01039a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01039ab:	c9                   	leave  
c01039ac:	c3                   	ret    

c01039ad <load_elf>:

struct process_state *load_elf(void *image, char *name, uid_t uid, gid_t gid, struct pipeset *s)
{
c01039ad:	55                   	push   %ebp
c01039ae:	89 e5                	mov    %esp,%ebp
c01039b0:	83 ec 38             	sub    $0x38,%esp
    struct process_state *proc = process_create(name, "Hallo", PROCESS_ACTIVE, NULL, uid, gid, s);
c01039b3:	8b 45 18             	mov    0x18(%ebp),%eax
c01039b6:	89 44 24 18          	mov    %eax,0x18(%esp)
c01039ba:	8b 45 14             	mov    0x14(%ebp),%eax
c01039bd:	89 44 24 14          	mov    %eax,0x14(%esp)
c01039c1:	8b 45 10             	mov    0x10(%ebp),%eax
c01039c4:	89 44 24 10          	mov    %eax,0x10(%esp)
c01039c8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01039cf:	00 
c01039d0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01039d7:	00 
c01039d8:	c7 44 24 04 0c 18 11 	movl   $0xc011180c,0x4(%esp)
c01039df:	c0 
c01039e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039e3:	89 04 24             	mov    %eax,(%esp)
c01039e6:	e8 5d 03 00 00       	call   c0103d48 <process_create>
c01039eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    load_elf_thread(image, proc, 0, 0);
c01039ee:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01039f5:	00 
c01039f6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01039fd:	00 
c01039fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a01:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a05:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a08:	89 04 24             	mov    %eax,(%esp)
c0103a0b:	e8 73 00 00 00       	call   c0103a83 <load_elf_thread>

    return proc;
c0103a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103a13:	c9                   	leave  
c0103a14:	c3                   	ret    

c0103a15 <load_elf_thread_from_file>:

struct process_state *load_elf_thread_from_file(vfs_inode_t *inode, struct process_state *proc, int argc, void **argv)
{
c0103a15:	55                   	push   %ebp
c0103a16:	89 e5                	mov    %esp,%ebp
c0103a18:	83 ec 28             	sub    $0x28,%esp
    void *image = malloc(inode->length);
c0103a1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a1e:	8b 40 08             	mov    0x8(%eax),%eax
c0103a21:	89 04 24             	mov    %eax,(%esp)
c0103a24:	e8 7d 9c 00 00       	call   c010d6a6 <malloc>
c0103a29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vfs_read(inode, 0, image, inode->length);
c0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a2f:	8b 40 08             	mov    0x8(%eax),%eax
c0103a32:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a39:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103a3d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a44:	00 
c0103a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a48:	89 04 24             	mov    %eax,(%esp)
c0103a4b:	e8 94 1b 00 00       	call   c01055e4 <vfs_read>
    struct process_state *state = load_elf_thread(image, proc, argc, argv);
c0103a50:	8b 45 14             	mov    0x14(%ebp),%eax
c0103a53:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103a57:	8b 45 10             	mov    0x10(%ebp),%eax
c0103a5a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103a5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a61:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a68:	89 04 24             	mov    %eax,(%esp)
c0103a6b:	e8 13 00 00 00       	call   c0103a83 <load_elf_thread>
c0103a70:	89 45 f0             	mov    %eax,-0x10(%ebp)
    free(image);
c0103a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a76:	89 04 24             	mov    %eax,(%esp)
c0103a79:	e8 0f 9d 00 00       	call   c010d78d <free>

    return state;
c0103a7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0103a81:	c9                   	leave  
c0103a82:	c3                   	ret    

c0103a83 <load_elf_thread>:

struct process_state *load_elf_thread(void *image, struct process_state *proc, int argc, void **argv)
{
c0103a83:	55                   	push   %ebp
c0103a84:	89 e5                	mov    %esp,%ebp
c0103a86:	83 ec 58             	sub    $0x58,%esp
    struct elf_header *header = image;
c0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct elf_program_header *ph;

    if(!(header->ident[EI_MAG0] == ELF_MAG0 &&
c0103a8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a92:	0f b6 00             	movzbl (%eax),%eax
c0103a95:	3c 7f                	cmp    $0x7f,%al
c0103a97:	75 21                	jne    c0103aba <load_elf_thread+0x37>
            header->ident[EI_MAG1] == ELF_MAG1 &&
c0103a99:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a9c:	0f b6 40 01          	movzbl 0x1(%eax),%eax
struct process_state *load_elf_thread(void *image, struct process_state *proc, int argc, void **argv)
{
    struct elf_header *header = image;
    struct elf_program_header *ph;

    if(!(header->ident[EI_MAG0] == ELF_MAG0 &&
c0103aa0:	3c 45                	cmp    $0x45,%al
c0103aa2:	75 16                	jne    c0103aba <load_elf_thread+0x37>
            header->ident[EI_MAG1] == ELF_MAG1 &&
            header->ident[EI_MAG2] == ELF_MAG2 &&
c0103aa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103aa7:	0f b6 40 02          	movzbl 0x2(%eax),%eax
{
    struct elf_header *header = image;
    struct elf_program_header *ph;

    if(!(header->ident[EI_MAG0] == ELF_MAG0 &&
            header->ident[EI_MAG1] == ELF_MAG1 &&
c0103aab:	3c 4c                	cmp    $0x4c,%al
c0103aad:	75 0b                	jne    c0103aba <load_elf_thread+0x37>
            header->ident[EI_MAG2] == ELF_MAG2 &&
            header->ident[EI_MAG3] == ELF_MAG3))
c0103aaf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ab2:	0f b6 40 03          	movzbl 0x3(%eax),%eax
struct process_state *load_elf_thread(void *image, struct process_state *proc, int argc, void **argv)
{
    struct elf_header *header = image;
    struct elf_program_header *ph;

    if(!(header->ident[EI_MAG0] == ELF_MAG0 &&
c0103ab6:	3c 46                	cmp    $0x46,%al
c0103ab8:	74 16                	je     c0103ad0 <load_elf_thread+0x4d>
            header->ident[EI_MAG1] == ELF_MAG1 &&
            header->ident[EI_MAG2] == ELF_MAG2 &&
            header->ident[EI_MAG3] == ELF_MAG3))
    {
        printf("Invalid ELF-Magic!\n");
c0103aba:	c7 04 24 12 18 11 c0 	movl   $0xc0111812,(%esp)
c0103ac1:	e8 ee 81 00 00       	call   c010bcb4 <puts>
        return NULL;
c0103ac6:	b8 00 00 00 00       	mov    $0x0,%eax
c0103acb:	e9 c6 01 00 00       	jmp    c0103c96 <load_elf_thread+0x213>
    }

    int i,j;
    ph = (struct elf_program_header*) (image + header->ph_offset);
c0103ad0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ad3:	8b 50 1c             	mov    0x1c(%eax),%edx
c0103ad6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad9:	01 d0                	add    %edx,%eax
c0103adb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    vmm_context_t context;
    vmm_create_context(&context);
c0103ade:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0103ae1:	89 04 24             	mov    %eax,(%esp)
c0103ae4:	e8 a6 95 00 00       	call   c010d08f <vmm_create_context>

    for(i = 0; i < header->ph_entry_count; i++, ph++)
c0103ae9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103af0:	e9 49 01 00 00       	jmp    c0103c3e <load_elf_thread+0x1bb>
    {
        if(ph->type == EPT_LOAD)
c0103af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103af8:	8b 00                	mov    (%eax),%eax
c0103afa:	83 f8 01             	cmp    $0x1,%eax
c0103afd:	0f 85 33 01 00 00    	jne    c0103c36 <load_elf_thread+0x1b3>
        {
            int pages = NUM_PAGES(ph->mem_size);
c0103b03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b06:	8b 40 14             	mov    0x14(%eax),%eax
c0103b09:	05 ff 0f 00 00       	add    $0xfff,%eax
c0103b0e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103b13:	c1 e8 0c             	shr    $0xc,%eax
c0103b16:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            uintptr_t dest_start = (uintptr_t) arch_vaddr_find((arch_vmm_context_t*)current_context, pages,
c0103b19:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0103b1e:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0103b25:	00 
c0103b26:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c0103b2d:	ff 
c0103b2e:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
c0103b35:	c0 
c0103b36:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103b39:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103b3d:	89 04 24             	mov    %eax,(%esp)
c0103b40:	e8 84 a3 00 00       	call   c010dec9 <arch_vaddr_find>
c0103b45:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   MEMORY_LAYOUT_KERNEL_START, MEMORY_LAYOUT_KERNEL_END, VMM_WRITABLE);

            // map pages
            for(j = 0; j < pages; j++)
c0103b48:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103b4f:	eb 71                	jmp    c0103bc2 <load_elf_thread+0x13f>
            {
                paddr_t paddr = (uintptr_t) pmm_alloc_page();
c0103b51:	e8 32 ba 00 00       	call   c010f588 <pmm_alloc_page>
c0103b56:	89 45 dc             	mov    %eax,-0x24(%ebp)
                vaddr_t vaddr = (uintptr_t) ph->virt_addr + j*PAGE_SIZE;
c0103b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b5c:	8b 50 08             	mov    0x8(%eax),%edx
c0103b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b62:	c1 e0 0c             	shl    $0xc,%eax
c0103b65:	01 d0                	add    %edx,%eax
c0103b67:	89 45 d8             	mov    %eax,-0x28(%ebp)
                uintptr_t dest = (uintptr_t) dest_start + j*PAGE_SIZE;
c0103b6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b6d:	c1 e0 0c             	shl    $0xc,%eax
c0103b70:	89 c2                	mov    %eax,%edx
c0103b72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103b75:	01 d0                	add    %edx,%eax
c0103b77:	89 45 d4             	mov    %eax,-0x2c(%ebp)

                vmm_map(&context, paddr, vaddr, VMM_WRITABLE | VMM_USER);
c0103b7a:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0103b81:	00 
c0103b82:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103b85:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103b89:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103b8c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103b90:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0103b93:	89 04 24             	mov    %eax,(%esp)
c0103b96:	e8 4a 95 00 00       	call   c010d0e5 <vmm_map>
                vmm_map(current_context, paddr, dest, VMM_WRITABLE);
c0103b9b:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0103ba0:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0103ba7:	00 
c0103ba8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103bab:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103baf:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103bb2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103bb6:	89 04 24             	mov    %eax,(%esp)
c0103bb9:	e8 27 95 00 00       	call   c010d0e5 <vmm_map>
            int pages = NUM_PAGES(ph->mem_size);
            uintptr_t dest_start = (uintptr_t) arch_vaddr_find((arch_vmm_context_t*)current_context, pages,
                                   MEMORY_LAYOUT_KERNEL_START, MEMORY_LAYOUT_KERNEL_END, VMM_WRITABLE);

            // map pages
            for(j = 0; j < pages; j++)
c0103bbe:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0103bc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bc5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0103bc8:	7c 87                	jl     c0103b51 <load_elf_thread+0xce>
                vmm_map(&context, paddr, vaddr, VMM_WRITABLE | VMM_USER);
                vmm_map(current_context, paddr, dest, VMM_WRITABLE);
            }

            // copy data
            memcpy((void*) dest_start, image + ph->offset, ph->file_size);
c0103bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bcd:	8b 50 10             	mov    0x10(%eax),%edx
c0103bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bd3:	8b 48 04             	mov    0x4(%eax),%ecx
c0103bd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd9:	01 c1                	add    %eax,%ecx
c0103bdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103bde:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103be2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0103be6:	89 04 24             	mov    %eax,(%esp)
c0103be9:	e8 11 f2 ff ff       	call   c0102dff <memcpy>

            // clear rest
            memset((void*)dest_start + ph->file_size, 0, ph->mem_size - ph->file_size);
c0103bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bf1:	8b 50 14             	mov    0x14(%eax),%edx
c0103bf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bf7:	8b 40 10             	mov    0x10(%eax),%eax
c0103bfa:	29 c2                	sub    %eax,%edx
c0103bfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bff:	8b 48 10             	mov    0x10(%eax),%ecx
c0103c02:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c05:	01 c8                	add    %ecx,%eax
c0103c07:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c0b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103c12:	00 
c0103c13:	89 04 24             	mov    %eax,(%esp)
c0103c16:	e8 5a f3 ff ff       	call   c0102f75 <memset>

            vmm_unmap_range(current_context, dest_start, pages);
c0103c1b:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0103c20:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103c23:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c27:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103c2a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103c2e:	89 04 24             	mov    %eax,(%esp)
c0103c31:	e8 5a 95 00 00       	call   c010d190 <vmm_unmap_range>
    ph = (struct elf_program_header*) (image + header->ph_offset);

    vmm_context_t context;
    vmm_create_context(&context);

    for(i = 0; i < header->ph_entry_count; i++, ph++)
c0103c36:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103c3a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103c3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c41:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0103c45:	0f b7 c0             	movzwl %ax,%eax
c0103c48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103c4b:	0f 8f a4 fe ff ff    	jg     c0103af5 <load_elf_thread+0x72>

            vmm_unmap_range(current_context, dest_start, pages);
        }
    }

    thread_create(proc, 3, header->entry, NULL, argc,(void **) argv, NULL, &context);
c0103c51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c54:	8b 40 18             	mov    0x18(%eax),%eax
c0103c57:	8d 55 cc             	lea    -0x34(%ebp),%edx
c0103c5a:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c0103c5e:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0103c65:	00 
c0103c66:	8b 55 14             	mov    0x14(%ebp),%edx
c0103c69:	89 54 24 14          	mov    %edx,0x14(%esp)
c0103c6d:	8b 55 10             	mov    0x10(%ebp),%edx
c0103c70:	89 54 24 10          	mov    %edx,0x10(%esp)
c0103c74:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0103c7b:	00 
c0103c7c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103c80:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0103c87:	00 
c0103c88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103c8b:	89 04 24             	mov    %eax,(%esp)
c0103c8e:	e8 80 0f 00 00       	call   c0104c13 <thread_create>

    return proc;
c0103c93:	8b 45 0c             	mov    0xc(%ebp),%eax
}
c0103c96:	c9                   	leave  
c0103c97:	c3                   	ret    

c0103c98 <min>:
 * @param a     inputvalue
 * @param b     inputvalue
 * @return the smallest inputvalue
 */
inline int min(int a, int b)
{
c0103c98:	55                   	push   %ebp
c0103c99:	89 e5                	mov    %esp,%ebp
    return (a < b) ? a : b;
c0103c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c9e:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0103ca1:	0f 4e 45 0c          	cmovle 0xc(%ebp),%eax
}
c0103ca5:	5d                   	pop    %ebp
c0103ca6:	c3                   	ret    

c0103ca7 <dump_thread_list>:
/**
 * @breif Prints a thread-list.
 * @param The thread list
 */
void dump_thread_list(list_t *threads)
{
c0103ca7:	55                   	push   %ebp
c0103ca8:	89 e5                	mov    %esp,%ebp
c0103caa:	83 ec 28             	sub    $0x28,%esp
    iterator_t it = iterator_create(threads);
c0103cad:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0103cb0:	8b 55 08             	mov    0x8(%ebp),%edx
c0103cb3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103cb7:	89 04 24             	mov    %eax,(%esp)
c0103cba:	e8 88 eb ff ff       	call   c0102847 <iterator_create>
c0103cbf:	83 ec 04             	sub    $0x4,%esp
    printf("-----%d-----\n", list_length(threads));
c0103cc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cc5:	89 04 24             	mov    %eax,(%esp)
c0103cc8:	e8 fd ea ff ff       	call   c01027ca <list_length>
c0103ccd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103cd1:	c7 04 24 25 18 11 c0 	movl   $0xc0111825,(%esp)
c0103cd8:	e8 a0 f4 ff ff       	call   c010317d <printf>
    while(!list_is_empty(threads) && !list_is_last(&it))
c0103cdd:	eb 49                	jmp    c0103d28 <dump_thread_list+0x81>
    {
        struct thread_state *t = list_get_current(&it);
c0103cdf:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0103ce2:	89 04 24             	mov    %eax,(%esp)
c0103ce5:	e8 26 ec ff ff       	call   c0102910 <list_get_current>
c0103cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
        printf("PID: %d  TID: %d  FLAG: %08x\n",t->process->pid, t->tid, t->flags);
c0103ced:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cf0:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0103cf4:	0f b7 c8             	movzwl %ax,%ecx
c0103cf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cfa:	8b 50 20             	mov    0x20(%eax),%edx
c0103cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d00:	8b 40 04             	mov    0x4(%eax),%eax
c0103d03:	8b 00                	mov    (%eax),%eax
c0103d05:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0103d09:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103d0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103d11:	c7 04 24 33 18 11 c0 	movl   $0xc0111833,(%esp)
c0103d18:	e8 60 f4 ff ff       	call   c010317d <printf>
        list_next(&it);
c0103d1d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0103d20:	89 04 24             	mov    %eax,(%esp)
c0103d23:	e8 0d ec ff ff       	call   c0102935 <list_next>
 */
void dump_thread_list(list_t *threads)
{
    iterator_t it = iterator_create(threads);
    printf("-----%d-----\n", list_length(threads));
    while(!list_is_empty(threads) && !list_is_last(&it))
c0103d28:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d2b:	89 04 24             	mov    %eax,(%esp)
c0103d2e:	e8 d3 ea ff ff       	call   c0102806 <list_is_empty>
c0103d33:	85 c0                	test   %eax,%eax
c0103d35:	75 0f                	jne    c0103d46 <dump_thread_list+0x9f>
c0103d37:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0103d3a:	89 04 24             	mov    %eax,(%esp)
c0103d3d:	e8 1a ec ff ff       	call   c010295c <list_is_last>
c0103d42:	85 c0                	test   %eax,%eax
c0103d44:	74 99                	je     c0103cdf <dump_thread_list+0x38>
    {
        struct thread_state *t = list_get_current(&it);
        printf("PID: %d  TID: %d  FLAG: %08x\n",t->process->pid, t->tid, t->flags);
        list_next(&it);
    }
}
c0103d46:	c9                   	leave  
c0103d47:	c3                   	ret    

c0103d48 <process_create>:
 * @param flags     process flags (activ, freezed, zombies)
 * @param parent    pointer to the parent process struct (NULL: Kernel Init = parent)
 * @return          The new process-state
 */
struct process_state *process_create(const char *name, const char *desc, uint16_t flags,struct process_state *parent, uid_t uid, gid_t gid,struct pipeset *set)
{
c0103d48:	55                   	push   %ebp
c0103d49:	89 e5                	mov    %esp,%ebp
c0103d4b:	83 ec 58             	sub    $0x58,%esp
c0103d4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0103d51:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    struct process_state *state = malloc(sizeof(struct process_state));
c0103d55:	c7 04 24 4c 00 00 00 	movl   $0x4c,(%esp)
c0103d5c:	e8 45 99 00 00       	call   c010d6a6 <malloc>
c0103d61:	89 45 e8             	mov    %eax,-0x18(%ebp)

    int string_len = min(strlen(name), 255);
c0103d64:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d67:	89 04 24             	mov    %eax,(%esp)
c0103d6a:	e8 ba ec ff ff       	call   c0102a29 <strlen>
c0103d6f:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c0103d76:	00 
c0103d77:	89 04 24             	mov    %eax,(%esp)
c0103d7a:	e8 19 ff ff ff       	call   c0103c98 <min>
c0103d7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    state->name = (char *) malloc(string_len + 1);
c0103d82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d85:	83 c0 01             	add    $0x1,%eax
c0103d88:	89 04 24             	mov    %eax,(%esp)
c0103d8b:	e8 16 99 00 00       	call   c010d6a6 <malloc>
c0103d90:	89 c2                	mov    %eax,%edx
c0103d92:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103d95:	89 50 0c             	mov    %edx,0xc(%eax)
    strncpy(state->name, name, string_len);
c0103d98:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103d9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103d9e:	8b 40 0c             	mov    0xc(%eax),%eax
c0103da1:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103da5:	8b 55 08             	mov    0x8(%ebp),%edx
c0103da8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103dac:	89 04 24             	mov    %eax,(%esp)
c0103daf:	e8 ed ec ff ff       	call   c0102aa1 <strncpy>
    state->name[string_len + 1] = 0;
c0103db4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103db7:	8b 40 0c             	mov    0xc(%eax),%eax
c0103dba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103dbd:	83 c2 01             	add    $0x1,%edx
c0103dc0:	01 d0                	add    %edx,%eax
c0103dc2:	c6 00 00             	movb   $0x0,(%eax)
    string_len = min(strlen(desc), 255);
c0103dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103dc8:	89 04 24             	mov    %eax,(%esp)
c0103dcb:	e8 59 ec ff ff       	call   c0102a29 <strlen>
c0103dd0:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c0103dd7:	00 
c0103dd8:	89 04 24             	mov    %eax,(%esp)
c0103ddb:	e8 b8 fe ff ff       	call   c0103c98 <min>
c0103de0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    state->desc = (char *) malloc(string_len + 1);
c0103de3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103de6:	83 c0 01             	add    $0x1,%eax
c0103de9:	89 04 24             	mov    %eax,(%esp)
c0103dec:	e8 b5 98 00 00       	call   c010d6a6 <malloc>
c0103df1:	89 c2                	mov    %eax,%edx
c0103df3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103df6:	89 50 10             	mov    %edx,0x10(%eax)
    strncpy(state->desc, desc, string_len);
c0103df9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103dfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103dff:	8b 40 10             	mov    0x10(%eax),%eax
c0103e02:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103e06:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103e09:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103e0d:	89 04 24             	mov    %eax,(%esp)
c0103e10:	e8 8c ec ff ff       	call   c0102aa1 <strncpy>
    state->desc[string_len + 1] = 0;
c0103e15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e18:	8b 40 10             	mov    0x10(%eax),%eax
c0103e1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103e1e:	83 c2 01             	add    $0x1,%edx
c0103e21:	01 d0                	add    %edx,%eax
c0103e23:	c6 00 00             	movb   $0x0,(%eax)
    state->flags = flags;
c0103e26:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e29:	0f b7 55 c4          	movzwl -0x3c(%ebp),%edx
c0103e2d:	66 89 50 3c          	mov    %dx,0x3c(%eax)
    state->files = list_create();
c0103e31:	e8 48 e7 ff ff       	call   c010257e <list_create>
c0103e36:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103e39:	89 42 1c             	mov    %eax,0x1c(%edx)
    state->env = list_create();
c0103e3c:	e8 3d e7 ff ff       	call   c010257e <list_create>
c0103e41:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103e44:	89 42 24             	mov    %eax,0x24(%edx)
    state->heap_top = 0;
c0103e47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e4a:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    state->heap_lower_limit = 0;
c0103e51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e54:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    state->heap_upper_limit = 0;
c0103e5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e5e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)

    state->main_thread = NULL;
c0103e65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e68:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)

    if(parent != NULL)
c0103e6f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0103e73:	74 0e                	je     c0103e83 <process_create+0x13b>
    {
        state->cwd = parent->cwd;
c0103e75:	8b 45 14             	mov    0x14(%ebp),%eax
c0103e78:	8b 50 18             	mov    0x18(%eax),%edx
c0103e7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e7e:	89 50 18             	mov    %edx,0x18(%eax)
c0103e81:	eb 0c                	jmp    c0103e8f <process_create+0x147>
    }
    else
    {
        state->cwd = root;
c0103e83:	8b 15 10 80 11 c0    	mov    0xc0118010,%edx
c0103e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e8c:	89 50 18             	mov    %edx,0x18(%eax)
    }

    state->children = list_create();    // he crashes here...
c0103e8f:	e8 ea e6 ff ff       	call   c010257e <list_create>
c0103e94:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103e97:	89 42 38             	mov    %eax,0x38(%edx)
    state->zombie_tids = list_create();
c0103e9a:	e8 df e6 ff ff       	call   c010257e <list_create>
c0103e9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103ea2:	89 42 34             	mov    %eax,0x34(%edx)
    state->threads = list_create();
c0103ea5:	e8 d4 e6 ff ff       	call   c010257e <list_create>
c0103eaa:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103ead:	89 42 28             	mov    %eax,0x28(%edx)
    state->ports = list_create();
c0103eb0:	e8 c9 e6 ff ff       	call   c010257e <list_create>
c0103eb5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103eb8:	89 42 20             	mov    %eax,0x20(%edx)
    state->tid_counter = 1;
c0103ebb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ebe:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
    state->uid = uid;
c0103ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ec8:	8b 55 18             	mov    0x18(%ebp),%edx
c0103ecb:	89 50 04             	mov    %edx,0x4(%eax)
    state->gid = gid;
c0103ece:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ed1:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0103ed4:	89 50 08             	mov    %edx,0x8(%eax)

    if (parent == NULL)
c0103ed7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0103edb:	75 0e                	jne    c0103eeb <process_create+0x1a3>
        state->parent = kernel_state;
c0103edd:	8b 15 08 a0 11 c0    	mov    0xc011a008,%edx
c0103ee3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ee6:	89 50 14             	mov    %edx,0x14(%eax)
c0103ee9:	eb 09                	jmp    c0103ef4 <process_create+0x1ac>
    else
        state->parent = parent;
c0103eeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103eee:	8b 55 14             	mov    0x14(%ebp),%edx
c0103ef1:	89 50 14             	mov    %edx,0x14(%eax)

    if (list_is_empty(zombie_list))
c0103ef4:	a1 0c 80 11 c0       	mov    0xc011800c,%eax
c0103ef9:	89 04 24             	mov    %eax,(%esp)
c0103efc:	e8 05 e9 ff ff       	call   c0102806 <list_is_empty>
c0103f01:	85 c0                	test   %eax,%eax
c0103f03:	74 14                	je     c0103f19 <process_create+0x1d1>
    {
        state->pid = pid_counter++;
c0103f05:	a1 04 30 11 c0       	mov    0xc0113004,%eax
c0103f0a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103f0d:	89 02                	mov    %eax,(%edx)
c0103f0f:	83 c0 01             	add    $0x1,%eax
c0103f12:	a3 04 30 11 c0       	mov    %eax,0xc0113004
c0103f17:	eb 14                	jmp    c0103f2d <process_create+0x1e5>
    }
    else
    {
        state->pid = (pid_t) list_pop_front(zombie_list);
c0103f19:	a1 0c 80 11 c0       	mov    0xc011800c,%eax
c0103f1e:	89 04 24             	mov    %eax,(%esp)
c0103f21:	e8 5f e8 ff ff       	call   c0102785 <list_pop_front>
c0103f26:	89 c2                	mov    %eax,%edx
c0103f28:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f2b:	89 10                	mov    %edx,(%eax)
    }


    list_lock(process_list);
c0103f2d:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c0103f32:	89 04 24             	mov    %eax,(%esp)
c0103f35:	e8 e7 e8 ff ff       	call   c0102821 <list_lock>
    if(state->pid != 1)
c0103f3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f3d:	8b 00                	mov    (%eax),%eax
c0103f3f:	83 f8 01             	cmp    $0x1,%eax
c0103f42:	74 39                	je     c0103f7d <process_create+0x235>
    {
        struct child *new_child = malloc(sizeof(struct child));
c0103f44:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0103f4b:	e8 56 97 00 00       	call   c010d6a6 <malloc>
c0103f50:	89 45 e0             	mov    %eax,-0x20(%ebp)
        new_child->process = state;
c0103f53:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103f56:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103f59:	89 50 04             	mov    %edx,0x4(%eax)
        new_child->status = 0;
c0103f5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103f5f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        list_push_front(state->parent->children, new_child);
c0103f65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f68:	8b 40 14             	mov    0x14(%eax),%eax
c0103f6b:	8b 40 38             	mov    0x38(%eax),%eax
c0103f6e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103f71:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103f75:	89 04 24             	mov    %eax,(%esp)
c0103f78:	e8 38 e7 ff ff       	call   c01026b5 <list_push_front>
    }

    list_push_front(process_list, state);
c0103f7d:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c0103f82:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103f85:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103f89:	89 04 24             	mov    %eax,(%esp)
c0103f8c:	e8 24 e7 ff ff       	call   c01026b5 <list_push_front>
    list_unlock(process_list);
c0103f91:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c0103f96:	89 04 24             	mov    %eax,(%esp)
c0103f99:	e8 96 e8 ff ff       	call   c0102834 <list_unlock>

    /* create stream files*/
    vfs_inode_t *stdin;
    vfs_inode_t *stdout;
    vfs_inode_t *stderr;
    if(!set)
c0103f9e:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0103fa2:	75 41                	jne    c0103fe5 <process_create+0x29d>
    {
        stdin = vfs_create_pipe(uid, gid);
c0103fa4:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0103fa7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103fab:	8b 45 18             	mov    0x18(%ebp),%eax
c0103fae:	89 04 24             	mov    %eax,(%esp)
c0103fb1:	e8 90 13 00 00       	call   c0105346 <vfs_create_pipe>
c0103fb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stdout = vfs_create_pipe(uid, gid);
c0103fb9:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0103fbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103fc0:	8b 45 18             	mov    0x18(%ebp),%eax
c0103fc3:	89 04 24             	mov    %eax,(%esp)
c0103fc6:	e8 7b 13 00 00       	call   c0105346 <vfs_create_pipe>
c0103fcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stderr = vfs_create_pipe(uid, gid);
c0103fce:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0103fd1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103fd5:	8b 45 18             	mov    0x18(%ebp),%eax
c0103fd8:	89 04 24             	mov    %eax,(%esp)
c0103fdb:	e8 66 13 00 00       	call   c0105346 <vfs_create_pipe>
c0103fe0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103fe3:	eb 1a                	jmp    c0103fff <process_create+0x2b7>
    }
    else
    {
        stdin = set->stdin;
c0103fe5:	8b 45 20             	mov    0x20(%ebp),%eax
c0103fe8:	8b 00                	mov    (%eax),%eax
c0103fea:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stdout = set->stdout;
c0103fed:	8b 45 20             	mov    0x20(%ebp),%eax
c0103ff0:	8b 40 04             	mov    0x4(%eax),%eax
c0103ff3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stderr = set->stderr;
c0103ff6:	8b 45 20             	mov    0x20(%ebp),%eax
c0103ff9:	8b 40 08             	mov    0x8(%eax),%eax
c0103ffc:	89 45 ec             	mov    %eax,-0x14(%ebp)


    /*extern vfs_inode_t *kbd_inode;
    kbd_inode = stdin;*/

    struct fd *desc0 = malloc(sizeof(struct fd));
c0103fff:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0104006:	e8 9b 96 00 00       	call   c010d6a6 <malloc>
c010400b:	89 45 dc             	mov    %eax,-0x24(%ebp)
    desc0->id = 0;
c010400e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104011:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    desc0->mode = 0x7ff;
c0104017:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010401a:	c7 40 08 ff 07 00 00 	movl   $0x7ff,0x8(%eax)
    desc0->flags = O_RDONLY;
c0104021:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104024:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
    desc0->read_pos = 0;
c010402b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010402e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc0->write_pos = 0;
c0104035:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104038:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc0->inode = stdin;
c010403f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104042:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104045:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(state->files, desc0);
c0104048:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010404b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010404e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104051:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104055:	89 04 24             	mov    %eax,(%esp)
c0104058:	e8 05 e6 ff ff       	call   c0102662 <list_push_back>

    struct fd *desc1 = malloc(sizeof(struct fd));
c010405d:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0104064:	e8 3d 96 00 00       	call   c010d6a6 <malloc>
c0104069:	89 45 d8             	mov    %eax,-0x28(%ebp)
    desc1->id = 1;
c010406c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010406f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    desc1->mode = 0x7ff;
c0104075:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104078:	c7 40 08 ff 07 00 00 	movl   $0x7ff,0x8(%eax)
    desc1->flags = O_WRONLY;
c010407f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104082:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
    desc1->read_pos = 0;
c0104089:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010408c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc1->write_pos = 0;
c0104093:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104096:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc1->inode = stdout;
c010409d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01040a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01040a3:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(state->files, desc1);
c01040a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040a9:	8b 40 1c             	mov    0x1c(%eax),%eax
c01040ac:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01040af:	89 54 24 04          	mov    %edx,0x4(%esp)
c01040b3:	89 04 24             	mov    %eax,(%esp)
c01040b6:	e8 a7 e5 ff ff       	call   c0102662 <list_push_back>

    struct fd *desc2 = malloc(sizeof(struct fd));
c01040bb:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c01040c2:	e8 df 95 00 00       	call   c010d6a6 <malloc>
c01040c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    desc2->id = 2;
c01040ca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040cd:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    desc2->mode = 0x7ff;
c01040d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040d6:	c7 40 08 ff 07 00 00 	movl   $0x7ff,0x8(%eax)
    desc2->flags = O_WRONLY;
c01040dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040e0:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
    desc2->read_pos = 0;
c01040e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040ea:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc2->write_pos = 0;
c01040f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040f4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc2->inode = stderr;
c01040fb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104101:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(state->files, desc2);
c0104104:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104107:	8b 40 1c             	mov    0x1c(%eax),%eax
c010410a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010410d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104111:	89 04 24             	mov    %eax,(%esp)
c0104114:	e8 49 e5 ff ff       	call   c0102662 <list_push_back>


    return state;
c0104119:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c010411c:	c9                   	leave  
c010411d:	c3                   	ret    

c010411e <process_kill>:
/**
 * @brief kills a process
 * @param process pointer to the process state
 */
void process_kill(struct process_state *process)
{
c010411e:	55                   	push   %ebp
c010411f:	89 e5                	mov    %esp,%ebp
c0104121:	83 ec 38             	sub    $0x38,%esp
    asm volatile("cli");
c0104124:	fa                   	cli    
    send_killed_process(process);
c0104125:	8b 45 08             	mov    0x8(%ebp),%eax
c0104128:	89 04 24             	mov    %eax,(%esp)
c010412b:	e8 8f 67 00 00       	call   c010a8bf <send_killed_process>

    while(!list_is_empty(process->threads))
c0104130:	eb 51                	jmp    c0104183 <process_kill+0x65>
    {
        struct thread_state *thread = list_pop_front(process->threads);
c0104132:	8b 45 08             	mov    0x8(%ebp),%eax
c0104135:	8b 40 28             	mov    0x28(%eax),%eax
c0104138:	89 04 24             	mov    %eax,(%esp)
c010413b:	e8 45 e6 ff ff       	call   c0102785 <list_pop_front>
c0104140:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(thread == current_thread)
c0104143:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104148:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010414b:	75 2b                	jne    c0104178 <process_kill+0x5a>
        {
            current_thread->flags |= THREAD_ZOMBIE;
c010414d:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104152:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c0104158:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c010415c:	83 ca 08             	or     $0x8,%edx
c010415f:	66 89 50 14          	mov    %dx,0x14(%eax)
            process->flags |= PROCESS_ZOMBIE;
c0104163:	8b 45 08             	mov    0x8(%ebp),%eax
c0104166:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010416a:	89 c2                	mov    %eax,%edx
c010416c:	83 ca 04             	or     $0x4,%edx
c010416f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104172:	66 89 50 3c          	mov    %dx,0x3c(%eax)
c0104176:	eb 0b                	jmp    c0104183 <process_kill+0x65>
        }
        else
            thread_kill_sub(thread);
c0104178:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010417b:	89 04 24             	mov    %eax,(%esp)
c010417e:	e8 f0 0d 00 00       	call   c0104f73 <thread_kill_sub>
void process_kill(struct process_state *process)
{
    asm volatile("cli");
    send_killed_process(process);

    while(!list_is_empty(process->threads))
c0104183:	8b 45 08             	mov    0x8(%ebp),%eax
c0104186:	8b 40 28             	mov    0x28(%eax),%eax
c0104189:	89 04 24             	mov    %eax,(%esp)
c010418c:	e8 75 e6 ff ff       	call   c0102806 <list_is_empty>
c0104191:	85 c0                	test   %eax,%eax
c0104193:	74 9d                	je     c0104132 <process_kill+0x14>
        }
        else
            thread_kill_sub(thread);
    }

    list_lock(process->children);
c0104195:	8b 45 08             	mov    0x8(%ebp),%eax
c0104198:	8b 40 38             	mov    0x38(%eax),%eax
c010419b:	89 04 24             	mov    %eax,(%esp)
c010419e:	e8 7e e6 ff ff       	call   c0102821 <list_lock>
    while(!list_is_empty(process->children))
c01041a3:	eb 34                	jmp    c01041d9 <process_kill+0xbb>
    {
        struct child *current_child = list_pop_front(process->children);
c01041a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01041a8:	8b 40 38             	mov    0x38(%eax),%eax
c01041ab:	89 04 24             	mov    %eax,(%esp)
c01041ae:	e8 d2 e5 ff ff       	call   c0102785 <list_pop_front>
c01041b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(current_child->process)
c01041b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041b9:	8b 40 04             	mov    0x4(%eax),%eax
c01041bc:	85 c0                	test   %eax,%eax
c01041be:	74 0e                	je     c01041ce <process_kill+0xb0>
            process_kill(current_child->process);
c01041c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041c3:	8b 40 04             	mov    0x4(%eax),%eax
c01041c6:	89 04 24             	mov    %eax,(%esp)
c01041c9:	e8 50 ff ff ff       	call   c010411e <process_kill>
        free(current_child);
c01041ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041d1:	89 04 24             	mov    %eax,(%esp)
c01041d4:	e8 b4 95 00 00       	call   c010d78d <free>
        else
            thread_kill_sub(thread);
    }

    list_lock(process->children);
    while(!list_is_empty(process->children))
c01041d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01041dc:	8b 40 38             	mov    0x38(%eax),%eax
c01041df:	89 04 24             	mov    %eax,(%esp)
c01041e2:	e8 1f e6 ff ff       	call   c0102806 <list_is_empty>
c01041e7:	85 c0                	test   %eax,%eax
c01041e9:	74 ba                	je     c01041a5 <process_kill+0x87>
        struct child *current_child = list_pop_front(process->children);
        if(current_child->process)
            process_kill(current_child->process);
        free(current_child);
    }
    free(process->children);
c01041eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01041ee:	8b 40 38             	mov    0x38(%eax),%eax
c01041f1:	89 04 24             	mov    %eax,(%esp)
c01041f4:	e8 94 95 00 00       	call   c010d78d <free>

    list_lock(process->parent->children);
c01041f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01041fc:	8b 40 14             	mov    0x14(%eax),%eax
c01041ff:	8b 40 38             	mov    0x38(%eax),%eax
c0104202:	89 04 24             	mov    %eax,(%esp)
c0104205:	e8 17 e6 ff ff       	call   c0102821 <list_lock>
    iterator_t parents_children_it = iterator_create(process->parent->children);
c010420a:	8b 45 08             	mov    0x8(%ebp),%eax
c010420d:	8b 40 14             	mov    0x14(%eax),%eax
c0104210:	8b 50 38             	mov    0x38(%eax),%edx
c0104213:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0104216:	89 54 24 04          	mov    %edx,0x4(%esp)
c010421a:	89 04 24             	mov    %eax,(%esp)
c010421d:	e8 25 e6 ff ff       	call   c0102847 <iterator_create>
c0104222:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_empty(process->parent->children) && !list_is_last(&parents_children_it))
c0104225:	eb 30                	jmp    c0104257 <process_kill+0x139>
    {
        struct child *current_child = list_get_current(&parents_children_it);
c0104227:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010422a:	89 04 24             	mov    %eax,(%esp)
c010422d:	e8 de e6 ff ff       	call   c0102910 <list_get_current>
c0104232:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if(current_child->process == process)
c0104235:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104238:	8b 40 04             	mov    0x4(%eax),%eax
c010423b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010423e:	75 0c                	jne    c010424c <process_kill+0x12e>
        {
            current_child->process = 0;
c0104240:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104243:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
c010424a:	eb 2f                	jmp    c010427b <process_kill+0x15d>
        }
        list_next(&parents_children_it);
c010424c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010424f:	89 04 24             	mov    %eax,(%esp)
c0104252:	e8 de e6 ff ff       	call   c0102935 <list_next>
    free(process->children);

    list_lock(process->parent->children);
    iterator_t parents_children_it = iterator_create(process->parent->children);

    while(!list_is_empty(process->parent->children) && !list_is_last(&parents_children_it))
c0104257:	8b 45 08             	mov    0x8(%ebp),%eax
c010425a:	8b 40 14             	mov    0x14(%eax),%eax
c010425d:	8b 40 38             	mov    0x38(%eax),%eax
c0104260:	89 04 24             	mov    %eax,(%esp)
c0104263:	e8 9e e5 ff ff       	call   c0102806 <list_is_empty>
c0104268:	85 c0                	test   %eax,%eax
c010426a:	75 0f                	jne    c010427b <process_kill+0x15d>
c010426c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010426f:	89 04 24             	mov    %eax,(%esp)
c0104272:	e8 e5 e6 ff ff       	call   c010295c <list_is_last>
c0104277:	85 c0                	test   %eax,%eax
c0104279:	74 ac                	je     c0104227 <process_kill+0x109>
            current_child->process = 0;
            break;
        }
        list_next(&parents_children_it);
    }
    list_unlock(process->parent->children);
c010427b:	8b 45 08             	mov    0x8(%ebp),%eax
c010427e:	8b 40 14             	mov    0x14(%eax),%eax
c0104281:	8b 40 38             	mov    0x38(%eax),%eax
c0104284:	89 04 24             	mov    %eax,(%esp)
c0104287:	e8 a8 e5 ff ff       	call   c0102834 <list_unlock>

    list_destroy(process->ports);
c010428c:	8b 45 08             	mov    0x8(%ebp),%eax
c010428f:	8b 40 20             	mov    0x20(%eax),%eax
c0104292:	89 04 24             	mov    %eax,(%esp)
c0104295:	e8 3c e3 ff ff       	call   c01025d6 <list_destroy>
    list_destroy(process->zombie_tids);
c010429a:	8b 45 08             	mov    0x8(%ebp),%eax
c010429d:	8b 40 34             	mov    0x34(%eax),%eax
c01042a0:	89 04 24             	mov    %eax,(%esp)
c01042a3:	e8 2e e3 ff ff       	call   c01025d6 <list_destroy>

    list_lock(process_list);
c01042a8:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c01042ad:	89 04 24             	mov    %eax,(%esp)
c01042b0:	e8 6c e5 ff ff       	call   c0102821 <list_lock>
    iterator_t process_it = iterator_create(process_list);
c01042b5:	8b 15 08 80 11 c0    	mov    0xc0118008,%edx
c01042bb:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01042be:	89 54 24 04          	mov    %edx,0x4(%esp)
c01042c2:	89 04 24             	mov    %eax,(%esp)
c01042c5:	e8 7d e5 ff ff       	call   c0102847 <iterator_create>
c01042ca:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_empty(process_list) &&!list_is_last(&process_it))
c01042cd:	eb 28                	jmp    c01042f7 <process_kill+0x1d9>
    {
        if(((struct process_state *)list_get_current(&process_it)) == process)
c01042cf:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01042d2:	89 04 24             	mov    %eax,(%esp)
c01042d5:	e8 36 e6 ff ff       	call   c0102910 <list_get_current>
c01042da:	3b 45 08             	cmp    0x8(%ebp),%eax
c01042dd:	75 0d                	jne    c01042ec <process_kill+0x1ce>
        {
            list_remove(&process_it);
c01042df:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01042e2:	89 04 24             	mov    %eax,(%esp)
c01042e5:	e8 b8 e6 ff ff       	call   c01029a2 <list_remove>
            break;
c01042ea:	eb 2b                	jmp    c0104317 <process_kill+0x1f9>
        }
        list_next(&process_it);
c01042ec:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01042ef:	89 04 24             	mov    %eax,(%esp)
c01042f2:	e8 3e e6 ff ff       	call   c0102935 <list_next>
    list_destroy(process->zombie_tids);

    list_lock(process_list);
    iterator_t process_it = iterator_create(process_list);

    while(!list_is_empty(process_list) &&!list_is_last(&process_it))
c01042f7:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c01042fc:	89 04 24             	mov    %eax,(%esp)
c01042ff:	e8 02 e5 ff ff       	call   c0102806 <list_is_empty>
c0104304:	85 c0                	test   %eax,%eax
c0104306:	75 0f                	jne    c0104317 <process_kill+0x1f9>
c0104308:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010430b:	89 04 24             	mov    %eax,(%esp)
c010430e:	e8 49 e6 ff ff       	call   c010295c <list_is_last>
c0104313:	85 c0                	test   %eax,%eax
c0104315:	74 b8                	je     c01042cf <process_kill+0x1b1>
            list_remove(&process_it);
            break;
        }
        list_next(&process_it);
    }
    list_unlock(process_list);
c0104317:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c010431c:	89 04 24             	mov    %eax,(%esp)
c010431f:	e8 10 e5 ff ff       	call   c0102834 <list_unlock>

    free(process->name);
c0104324:	8b 45 08             	mov    0x8(%ebp),%eax
c0104327:	8b 40 0c             	mov    0xc(%eax),%eax
c010432a:	89 04 24             	mov    %eax,(%esp)
c010432d:	e8 5b 94 00 00       	call   c010d78d <free>
    free(process->desc);
c0104332:	8b 45 08             	mov    0x8(%ebp),%eax
c0104335:	8b 40 10             	mov    0x10(%eax),%eax
c0104338:	89 04 24             	mov    %eax,(%esp)
c010433b:	e8 4d 94 00 00       	call   c010d78d <free>

    if(!(process->flags & PROCESS_ZOMBIE) )
c0104340:	8b 45 08             	mov    0x8(%ebp),%eax
c0104343:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0104347:	0f b7 c0             	movzwl %ax,%eax
c010434a:	83 e0 04             	and    $0x4,%eax
c010434d:	85 c0                	test   %eax,%eax
c010434f:	75 0b                	jne    c010435c <process_kill+0x23e>
    {
        free(process);
c0104351:	8b 45 08             	mov    0x8(%ebp),%eax
c0104354:	89 04 24             	mov    %eax,(%esp)
c0104357:	e8 31 94 00 00       	call   c010d78d <free>
    }
    asm volatile("sti");
c010435c:	fb                   	sti    
}
c010435d:	c9                   	leave  
c010435e:	c3                   	ret    

c010435f <process_find>:
 * @brief finds a process by ID
 * @param pid Process ID
 * @return process state pointer or NULL if the process does not exist
 */
struct process_state *process_find(pid_t pid)
{
c010435f:	55                   	push   %ebp
c0104360:	89 e5                	mov    %esp,%ebp
c0104362:	83 ec 28             	sub    $0x28,%esp
    iterator_t process_it = iterator_create(process_list);
c0104365:	8b 15 08 80 11 c0    	mov    0xc0118008,%edx
c010436b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010436e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104372:	89 04 24             	mov    %eax,(%esp)
c0104375:	e8 cd e4 ff ff       	call   c0102847 <iterator_create>
c010437a:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(process_list) && !list_is_last(&process_it))
c010437d:	eb 2a                	jmp    c01043a9 <process_find+0x4a>
    {
        if(((struct process_state *)list_get_current(&process_it))->pid == pid)
c010437f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0104382:	89 04 24             	mov    %eax,(%esp)
c0104385:	e8 86 e5 ff ff       	call   c0102910 <list_get_current>
c010438a:	8b 00                	mov    (%eax),%eax
c010438c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010438f:	75 0d                	jne    c010439e <process_find+0x3f>
        {
            return (struct process_state *)list_get_current(&process_it);
c0104391:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0104394:	89 04 24             	mov    %eax,(%esp)
c0104397:	e8 74 e5 ff ff       	call   c0102910 <list_get_current>
c010439c:	eb 30                	jmp    c01043ce <process_find+0x6f>
        }
        list_next(&process_it);
c010439e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01043a1:	89 04 24             	mov    %eax,(%esp)
c01043a4:	e8 8c e5 ff ff       	call   c0102935 <list_next>
 * @return process state pointer or NULL if the process does not exist
 */
struct process_state *process_find(pid_t pid)
{
    iterator_t process_it = iterator_create(process_list);
    while(!list_is_empty(process_list) && !list_is_last(&process_it))
c01043a9:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c01043ae:	89 04 24             	mov    %eax,(%esp)
c01043b1:	e8 50 e4 ff ff       	call   c0102806 <list_is_empty>
c01043b6:	85 c0                	test   %eax,%eax
c01043b8:	75 0f                	jne    c01043c9 <process_find+0x6a>
c01043ba:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01043bd:	89 04 24             	mov    %eax,(%esp)
c01043c0:	e8 97 e5 ff ff       	call   c010295c <list_is_last>
c01043c5:	85 c0                	test   %eax,%eax
c01043c7:	74 b6                	je     c010437f <process_find+0x20>
        {
            return (struct process_state *)list_get_current(&process_it);
        }
        list_next(&process_it);
    }
    return 0;
c01043c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01043ce:	c9                   	leave  
c01043cf:	c3                   	ret    

c01043d0 <sys_exit>:
/**
 * @brief terminates the current process (linux function for the API)
 * @param cpu registers of the corrent process
 */
void sys_exit(struct cpu_state **cpu)
{
c01043d0:	55                   	push   %ebp
c01043d1:	89 e5                	mov    %esp,%ebp
c01043d3:	83 ec 28             	sub    $0x28,%esp
    iterator_t parents_children_it = iterator_create(current_thread->process->parent->children);
c01043d6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01043db:	8b 40 04             	mov    0x4(%eax),%eax
c01043de:	8b 40 14             	mov    0x14(%eax),%eax
c01043e1:	8b 50 38             	mov    0x38(%eax),%edx
c01043e4:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01043e7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01043eb:	89 04 24             	mov    %eax,(%esp)
c01043ee:	e8 54 e4 ff ff       	call   c0102847 <iterator_create>
c01043f3:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_empty(current_thread->process->parent->children) && !list_is_last(&parents_children_it))
c01043f6:	eb 3c                	jmp    c0104434 <sys_exit+0x64>
    {
        struct child *current_child = list_get_current(&parents_children_it);
c01043f8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01043fb:	89 04 24             	mov    %eax,(%esp)
c01043fe:	e8 0d e5 ff ff       	call   c0102910 <list_get_current>
c0104403:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(current_child->process == current_thread->process)
c0104406:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104409:	8b 50 04             	mov    0x4(%eax),%edx
c010440c:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104411:	8b 40 04             	mov    0x4(%eax),%eax
c0104414:	39 c2                	cmp    %eax,%edx
c0104416:	75 11                	jne    c0104429 <sys_exit+0x59>
        {
            current_child->status = (*cpu)->CPU_ARG1;
c0104418:	8b 45 08             	mov    0x8(%ebp),%eax
c010441b:	8b 00                	mov    (%eax),%eax
c010441d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104420:	89 c2                	mov    %eax,%edx
c0104422:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104425:	89 10                	mov    %edx,(%eax)
            break;
c0104427:	eb 34                	jmp    c010445d <sys_exit+0x8d>
        }
        list_next(&parents_children_it);
c0104429:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010442c:	89 04 24             	mov    %eax,(%esp)
c010442f:	e8 01 e5 ff ff       	call   c0102935 <list_next>
 */
void sys_exit(struct cpu_state **cpu)
{
    iterator_t parents_children_it = iterator_create(current_thread->process->parent->children);

    while(!list_is_empty(current_thread->process->parent->children) && !list_is_last(&parents_children_it))
c0104434:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104439:	8b 40 04             	mov    0x4(%eax),%eax
c010443c:	8b 40 14             	mov    0x14(%eax),%eax
c010443f:	8b 40 38             	mov    0x38(%eax),%eax
c0104442:	89 04 24             	mov    %eax,(%esp)
c0104445:	e8 bc e3 ff ff       	call   c0102806 <list_is_empty>
c010444a:	85 c0                	test   %eax,%eax
c010444c:	75 0f                	jne    c010445d <sys_exit+0x8d>
c010444e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0104451:	89 04 24             	mov    %eax,(%esp)
c0104454:	e8 03 e5 ff ff       	call   c010295c <list_is_last>
c0104459:	85 c0                	test   %eax,%eax
c010445b:	74 9b                	je     c01043f8 <sys_exit+0x28>
            break;
        }
        list_next(&parents_children_it);
    }

    process_kill(current_thread->process);
c010445d:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104462:	8b 40 04             	mov    0x4(%eax),%eax
c0104465:	89 04 24             	mov    %eax,(%esp)
c0104468:	e8 b1 fc ff ff       	call   c010411e <process_kill>
    *cpu = task_schedule(*cpu);
c010446d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104470:	8b 00                	mov    (%eax),%eax
c0104472:	89 04 24             	mov    %eax,(%esp)
c0104475:	e8 15 05 00 00       	call   c010498f <task_schedule>
c010447a:	8b 55 08             	mov    0x8(%ebp),%edx
c010447d:	89 02                	mov    %eax,(%edx)
}
c010447f:	c9                   	leave  
c0104480:	c3                   	ret    

c0104481 <sys_fork>:
/**
 * @brief creates a new child process (linux function for the API)
 * @param cpu registers of the current process
 */
void sys_fork(struct cpu_state **cpu)
{
c0104481:	55                   	push   %ebp
c0104482:	89 e5                	mov    %esp,%ebp
c0104484:	57                   	push   %edi
c0104485:	56                   	push   %esi
c0104486:	53                   	push   %ebx
c0104487:	83 ec 5c             	sub    $0x5c,%esp
    vmm_context_t context;
    vmm_create_context(&context);
c010448a:	8d 45 bc             	lea    -0x44(%ebp),%eax
c010448d:	89 04 24             	mov    %eax,(%esp)
c0104490:	e8 fa 8b 00 00       	call   c010d08f <vmm_create_context>
    arch_fork_context(&current_thread->context.arch_context, &context.arch_context);
c0104495:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010449a:	8d 50 08             	lea    0x8(%eax),%edx
c010449d:	8d 45 bc             	lea    -0x44(%ebp),%eax
c01044a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01044a4:	89 14 24             	mov    %edx,(%esp)
c01044a7:	e8 5b 96 00 00       	call   c010db07 <arch_fork_context>
    struct process_state *new_process = process_create(current_thread->process->name ,current_thread->process->desc ,current_thread->process->flags ,current_thread->process, current_thread->process->uid, current_thread->process->gid, NULL);
c01044ac:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044b1:	8b 40 04             	mov    0x4(%eax),%eax
c01044b4:	8b 78 08             	mov    0x8(%eax),%edi
c01044b7:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044bc:	8b 40 04             	mov    0x4(%eax),%eax
c01044bf:	8b 70 04             	mov    0x4(%eax),%esi
c01044c2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044c7:	8b 58 04             	mov    0x4(%eax),%ebx
c01044ca:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044cf:	8b 40 04             	mov    0x4(%eax),%eax
c01044d2:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01044d6:	0f b7 c8             	movzwl %ax,%ecx
c01044d9:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044de:	8b 40 04             	mov    0x4(%eax),%eax
c01044e1:	8b 50 10             	mov    0x10(%eax),%edx
c01044e4:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044e9:	8b 40 04             	mov    0x4(%eax),%eax
c01044ec:	8b 40 0c             	mov    0xc(%eax),%eax
c01044ef:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c01044f6:	00 
c01044f7:	89 7c 24 14          	mov    %edi,0x14(%esp)
c01044fb:	89 74 24 10          	mov    %esi,0x10(%esp)
c01044ff:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0104503:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0104507:	89 54 24 04          	mov    %edx,0x4(%esp)
c010450b:	89 04 24             	mov    %eax,(%esp)
c010450e:	e8 35 f8 ff ff       	call   c0103d48 <process_create>
c0104513:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct thread_state *new_thread = thread_create(new_process, !(current_thread->flags & THREAD_KERNELMODE), 0, *cpu, 0, NULL, NULL, &context);
c0104516:	8b 45 08             	mov    0x8(%ebp),%eax
c0104519:	8b 10                	mov    (%eax),%edx
c010451b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104520:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104524:	0f b7 c0             	movzwl %ax,%eax
c0104527:	83 e0 04             	and    $0x4,%eax
c010452a:	85 c0                	test   %eax,%eax
c010452c:	0f 94 c0             	sete   %al
c010452f:	0f b6 c0             	movzbl %al,%eax
c0104532:	8d 4d bc             	lea    -0x44(%ebp),%ecx
c0104535:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
c0104539:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0104540:	00 
c0104541:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0104548:	00 
c0104549:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0104550:	00 
c0104551:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0104555:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010455c:	00 
c010455d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104561:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104564:	89 04 24             	mov    %eax,(%esp)
c0104567:	e8 a7 06 00 00       	call   c0104c13 <thread_create>
c010456c:	89 45 dc             	mov    %eax,-0x24(%ebp)

    void *stack_src = (void *)(MEMORY_LAYOUT_STACK_TOP - THREAD_STACK_SIZE);
c010456f:	c7 45 d8 00 f0 ff bf 	movl   $0xbffff000,-0x28(%ebp)
    paddr_t pframe = pmm_alloc_page();
c0104576:	e8 0d b0 00 00       	call   c010f588 <pmm_alloc_page>
c010457b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    vmm_map(&new_thread->context, pframe, MEMORY_LAYOUT_STACK_TOP-0x1000, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c010457e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104581:	8d 50 08             	lea    0x8(%eax),%edx
c0104584:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c010458b:	00 
c010458c:	c7 44 24 08 00 f0 ff 	movl   $0xbffff000,0x8(%esp)
c0104593:	bf 
c0104594:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104597:	89 44 24 04          	mov    %eax,0x4(%esp)
c010459b:	89 14 24             	mov    %edx,(%esp)
c010459e:	e8 42 8b 00 00       	call   c010d0e5 <vmm_map>
    void *stack = (void *)vmm_automap_kernel(current_context, pframe, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c01045a3:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c01045a8:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c01045af:	00 
c01045b0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01045b3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01045b7:	89 04 24             	mov    %eax,(%esp)
c01045ba:	e8 0f 8c 00 00       	call   c010d1ce <vmm_automap_kernel>
c01045bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
    memcpy(stack, stack_src, THREAD_STACK_SIZE);
c01045c2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01045c9:	00 
c01045ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01045cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01045d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01045d4:	89 04 24             	mov    %eax,(%esp)
c01045d7:	e8 23 e8 ff ff       	call   c0102dff <memcpy>

    struct list_node *node = current_thread->process->files->head->next;
c01045dc:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01045e1:	8b 40 04             	mov    0x4(%eax),%eax
c01045e4:	8b 40 1c             	mov    0x1c(%eax),%eax
c01045e7:	8b 40 04             	mov    0x4(%eax),%eax
c01045ea:	8b 00                	mov    (%eax),%eax
c01045ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct list_node *head = current_thread->process->files->head;
c01045ef:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01045f4:	8b 40 04             	mov    0x4(%eax),%eax
c01045f7:	8b 40 1c             	mov    0x1c(%eax),%eax
c01045fa:	8b 40 04             	mov    0x4(%eax),%eax
c01045fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
    while(node != head)
c0104600:	eb 4f                	jmp    c0104651 <sys_fork+0x1d0>
    {
        struct fd *dest = malloc(sizeof(struct fd));
c0104602:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0104609:	e8 98 90 00 00       	call   c010d6a6 <malloc>
c010460e:	89 45 c8             	mov    %eax,-0x38(%ebp)
        struct fd *src  = (struct fd*) node->element;
c0104611:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104614:	8b 40 08             	mov    0x8(%eax),%eax
c0104617:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        memcpy(dest, src, sizeof(struct fd));
c010461a:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
c0104621:	00 
c0104622:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104625:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104629:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010462c:	89 04 24             	mov    %eax,(%esp)
c010462f:	e8 cb e7 ff ff       	call   c0102dff <memcpy>
        list_push_back(new_process->files, dest);
c0104634:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104637:	8b 40 1c             	mov    0x1c(%eax),%eax
c010463a:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010463d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104641:	89 04 24             	mov    %eax,(%esp)
c0104644:	e8 19 e0 ff ff       	call   c0102662 <list_push_back>

        node = node->next;
c0104649:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010464c:	8b 00                	mov    (%eax),%eax
c010464e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    void *stack = (void *)vmm_automap_kernel(current_context, pframe, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
    memcpy(stack, stack_src, THREAD_STACK_SIZE);

    struct list_node *node = current_thread->process->files->head->next;
    struct list_node *head = current_thread->process->files->head;
    while(node != head)
c0104651:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104654:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0104657:	75 a9                	jne    c0104602 <sys_fork+0x181>
        list_push_back(new_process->files, dest);

        node = node->next;
    }

    new_thread->state->CPU_ARG0 = 0;
c0104659:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010465c:	8b 00                	mov    (%eax),%eax
c010465e:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    current_thread->state->CPU_ARG0 = new_process->pid;
c0104665:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010466a:	8b 00                	mov    (%eax),%eax
c010466c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010466f:	8b 12                	mov    (%edx),%edx
c0104671:	89 50 28             	mov    %edx,0x28(%eax)
}
c0104674:	83 c4 5c             	add    $0x5c,%esp
c0104677:	5b                   	pop    %ebx
c0104678:	5e                   	pop    %esi
c0104679:	5f                   	pop    %edi
c010467a:	5d                   	pop    %ebp
c010467b:	c3                   	ret    

c010467c <sys_waitpid>:
 *  @param cpu registers of the current process
 *  Not completed
 */

void sys_waitpid(struct cpu_state **cpu)
{
c010467c:	55                   	push   %ebp
c010467d:	89 e5                	mov    %esp,%ebp
c010467f:	83 ec 28             	sub    $0x28,%esp
    list_set_first(&thread_iterator);
c0104682:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104689:	e8 e9 e2 ff ff       	call   c0102977 <list_set_first>
    while(list_get_current(&thread_iterator) != current_thread)
c010468e:	eb 0c                	jmp    c010469c <sys_waitpid+0x20>
    {
        list_next(&thread_iterator);
c0104690:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104697:	e8 99 e2 ff ff       	call   c0102935 <list_next>
 */

void sys_waitpid(struct cpu_state **cpu)
{
    list_set_first(&thread_iterator);
    while(list_get_current(&thread_iterator) != current_thread)
c010469c:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c01046a3:	e8 68 e2 ff ff       	call   c0102910 <list_get_current>
c01046a8:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01046ae:	39 d0                	cmp    %edx,%eax
c01046b0:	75 de                	jne    c0104690 <sys_waitpid+0x14>
    {
        list_next(&thread_iterator);
    }
    list_remove(&thread_iterator);
c01046b2:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c01046b9:	e8 e4 e2 ff ff       	call   c01029a2 <list_remove>
    current_thread->ticks = 0;
c01046be:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01046c3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    current_thread->flags |= THREAD_WAITPID;
c01046ca:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01046cf:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01046d5:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c01046d9:	83 ca 10             	or     $0x10,%edx
c01046dc:	66 89 50 14          	mov    %dx,0x14(%eax)
    current_thread->waitpid = (*cpu)->CPU_ARG1;
c01046e0:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01046e5:	8b 55 08             	mov    0x8(%ebp),%edx
c01046e8:	8b 12                	mov    (%edx),%edx
c01046ea:	8b 52 1c             	mov    0x1c(%edx),%edx
c01046ed:	89 50 18             	mov    %edx,0x18(%eax)
    add_trigger(WAIT_PID, current_thread->waitpid, false, (void *)current_thread,NULL);
c01046f0:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01046f6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01046fb:	8b 40 18             	mov    0x18(%eax),%eax
c01046fe:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0104705:	00 
c0104706:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010470a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104711:	00 
c0104712:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104716:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010471d:	e8 cc 5f 00 00       	call   c010a6ee <add_trigger>
    *cpu = task_schedule(*cpu);
c0104722:	8b 45 08             	mov    0x8(%ebp),%eax
c0104725:	8b 00                	mov    (%eax),%eax
c0104727:	89 04 24             	mov    %eax,(%esp)
c010472a:	e8 60 02 00 00       	call   c010498f <task_schedule>
c010472f:	8b 55 08             	mov    0x8(%ebp),%edx
c0104732:	89 02                	mov    %eax,(%edx)
}
c0104734:	c9                   	leave  
c0104735:	c3                   	ret    

c0104736 <sys_getpid>:

void sys_getpid(struct cpu_state **cpu)
{
c0104736:	55                   	push   %ebp
c0104737:	89 e5                	mov    %esp,%ebp
    (*cpu)->CPU_ARG0 = current_thread->process->pid;
c0104739:	8b 45 08             	mov    0x8(%ebp),%eax
c010473c:	8b 00                	mov    (%eax),%eax
c010473e:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c0104744:	8b 52 04             	mov    0x4(%edx),%edx
c0104747:	8b 12                	mov    (%edx),%edx
c0104749:	89 50 28             	mov    %edx,0x28(%eax)
}
c010474c:	5d                   	pop    %ebp
c010474d:	c3                   	ret    

c010474e <sys_execve>:
 * executes a programm
 * @param cpu registers of the current process
 * todo: the function is still a litte bit slow and envp is not taken over from the new process.
 */
void sys_execve(struct cpu_state **cpu)
{
c010474e:	55                   	push   %ebp
c010474f:	89 e5                	mov    %esp,%ebp
c0104751:	83 ec 38             	sub    $0x38,%esp
    char *filename = (char*) (*cpu)->CPU_ARG1;
c0104754:	8b 45 08             	mov    0x8(%ebp),%eax
c0104757:	8b 00                	mov    (%eax),%eax
c0104759:	8b 40 1c             	mov    0x1c(%eax),%eax
c010475c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char **argv = (char**) (*cpu)->CPU_ARG2;
c010475f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104762:	8b 00                	mov    (%eax),%eax
c0104764:	8b 40 24             	mov    0x24(%eax),%eax
c0104767:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //char **envp = (char**) (*cpu)->CPU_ARG3;

    vfs_inode_t *filenode = vfs_lookup_path(filename);
c010476a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010476d:	89 04 24             	mov    %eax,(%esp)
c0104770:	e8 4a 11 00 00       	call   c01058bf <vfs_lookup_path>
c0104775:	89 45 ec             	mov    %eax,-0x14(%ebp)
    printf(filename);
c0104778:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010477b:	89 04 24             	mov    %eax,(%esp)
c010477e:	e8 fa e9 ff ff       	call   c010317d <printf>
    if(filenode == NULL)
c0104783:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104787:	75 11                	jne    c010479a <sys_execve+0x4c>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0104789:	8b 45 08             	mov    0x8(%ebp),%eax
c010478c:	8b 00                	mov    (%eax),%eax
c010478e:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0104795:	e9 b8 00 00 00       	jmp    c0104852 <sys_execve+0x104>
    }

    struct process_state *process = current_thread->process;
c010479a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010479f:	8b 40 04             	mov    0x4(%eax),%eax
c01047a2:	89 45 e8             	mov    %eax,-0x18(%ebp)

    while(!list_is_empty(process->threads))
c01047a5:	eb 51                	jmp    c01047f8 <sys_execve+0xaa>
    {
        struct thread_state *thread = list_pop_front(process->threads);
c01047a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047aa:	8b 40 28             	mov    0x28(%eax),%eax
c01047ad:	89 04 24             	mov    %eax,(%esp)
c01047b0:	e8 d0 df ff ff       	call   c0102785 <list_pop_front>
c01047b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if(thread == current_thread)
c01047b8:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01047bd:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01047c0:	75 2b                	jne    c01047ed <sys_execve+0x9f>
        {
            current_thread->flags |= THREAD_ZOMBIE;
c01047c2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01047c7:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01047cd:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c01047d1:	83 ca 08             	or     $0x8,%edx
c01047d4:	66 89 50 14          	mov    %dx,0x14(%eax)
            process->flags |= PROCESS_ZOMBIE;
c01047d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047db:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01047df:	89 c2                	mov    %eax,%edx
c01047e1:	83 ca 04             	or     $0x4,%edx
c01047e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047e7:	66 89 50 3c          	mov    %dx,0x3c(%eax)
c01047eb:	eb 0b                	jmp    c01047f8 <sys_execve+0xaa>
        }
        else
            thread_kill_sub(thread);
c01047ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01047f0:	89 04 24             	mov    %eax,(%esp)
c01047f3:	e8 7b 07 00 00       	call   c0104f73 <thread_kill_sub>
        return;
    }

    struct process_state *process = current_thread->process;

    while(!list_is_empty(process->threads))
c01047f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047fb:	8b 40 28             	mov    0x28(%eax),%eax
c01047fe:	89 04 24             	mov    %eax,(%esp)
c0104801:	e8 00 e0 ff ff       	call   c0102806 <list_is_empty>
c0104806:	85 c0                	test   %eax,%eax
c0104808:	74 9d                	je     c01047a7 <sys_execve+0x59>
        }
        else
            thread_kill_sub(thread);
    }

    list_destroy(process->ports);
c010480a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010480d:	8b 40 20             	mov    0x20(%eax),%eax
c0104810:	89 04 24             	mov    %eax,(%esp)
c0104813:	e8 be dd ff ff       	call   c01025d6 <list_destroy>
    list_destroy(process->zombie_tids);
c0104818:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010481b:	8b 40 34             	mov    0x34(%eax),%eax
c010481e:	89 04 24             	mov    %eax,(%esp)
c0104821:	e8 b0 dd ff ff       	call   c01025d6 <list_destroy>
    process->zombie_tids = list_create();
c0104826:	e8 53 dd ff ff       	call   c010257e <list_create>
c010482b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010482e:	89 42 34             	mov    %eax,0x34(%edx)

    // run the new process
    load_elf_thread_from_file(filenode, process, 0,(void**) argv);
c0104831:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104834:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104838:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010483f:	00 
c0104840:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104843:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104847:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010484a:	89 04 24             	mov    %eax,(%esp)
c010484d:	e8 c3 f1 ff ff       	call   c0103a15 <load_elf_thread_from_file>
}
c0104852:	c9                   	leave  
c0104853:	c3                   	ret    

c0104854 <INIT_SCHEDULER>:

/**
 * Initiate the scheduler module
 */
void INIT_SCHEDULER(void)
{
c0104854:	55                   	push   %ebp
c0104855:	89 e5                	mov    %esp,%ebp
c0104857:	83 ec 38             	sub    $0x38,%esp
    set_GDT_entry(5, (uint32_t) &tss, sizeof(tss), 0x89, 0x8); //qemu does not support TSS-Desc on position 7... wiered hardware stuff
c010485a:	b8 20 30 11 c0       	mov    $0xc0113020,%eax
c010485f:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%esp)
c0104866:	00 
c0104867:	c7 44 24 0c 89 00 00 	movl   $0x89,0xc(%esp)
c010486e:	00 
c010486f:	c7 44 24 08 68 00 00 	movl   $0x68,0x8(%esp)
c0104876:	00 
c0104877:	89 44 24 04          	mov    %eax,0x4(%esp)
c010487b:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104882:	e8 e5 b6 00 00       	call   c010ff6c <set_GDT_entry>
    load_gdt(5);
c0104887:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010488e:	e8 5a b7 00 00       	call   c010ffed <load_gdt>

    asm volatile("ltr %%ax" : : "a" (5 << 3));
c0104893:	b8 28 00 00 00       	mov    $0x28,%eax
c0104898:	0f 00 d8             	ltr    %ax



    kernelstack = malloc(KERNEL_STACK_SIZE) + KERNEL_STACK_SIZE;
c010489b:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01048a2:	e8 ff 8d 00 00       	call   c010d6a6 <malloc>
c01048a7:	05 00 10 00 00       	add    $0x1000,%eax
c01048ac:	a3 04 a0 11 c0       	mov    %eax,0xc011a004
    tss.esp0 = (uint32_t)kernelstack;
c01048b1:	a1 04 a0 11 c0       	mov    0xc011a004,%eax
c01048b6:	a3 24 30 11 c0       	mov    %eax,0xc0113024

    running_threads = list_create();
c01048bb:	e8 be dc ff ff       	call   c010257e <list_create>
c01048c0:	a3 10 a0 11 c0       	mov    %eax,0xc011a010
    thread_iterator = iterator_create(running_threads);
c01048c5:	8b 15 10 a0 11 c0    	mov    0xc011a010,%edx
c01048cb:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01048ce:	89 54 24 04          	mov    %edx,0x4(%esp)
c01048d2:	89 04 24             	mov    %eax,(%esp)
c01048d5:	e8 6d df ff ff       	call   c0102847 <iterator_create>
c01048da:	83 ec 04             	sub    $0x4,%esp
c01048dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01048e3:	a3 14 a0 11 c0       	mov    %eax,0xc011a014
c01048e8:	89 15 18 a0 11 c0    	mov    %edx,0xc011a018
    process_list = list_create();
c01048ee:	e8 8b dc ff ff       	call   c010257e <list_create>
c01048f3:	a3 08 80 11 c0       	mov    %eax,0xc0118008
    zombie_list = list_create();
c01048f8:	e8 81 dc ff ff       	call   c010257e <list_create>
c01048fd:	a3 0c 80 11 c0       	mov    %eax,0xc011800c
    kernel_state = process_create("Kernel INIT", "initiate system", PROCESS_ACTIVE, NULL, 0, 0, NULL);
c0104902:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0104909:	00 
c010490a:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0104911:	00 
c0104912:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0104919:	00 
c010491a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104921:	00 
c0104922:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0104929:	00 
c010492a:	c7 44 24 04 51 18 11 	movl   $0xc0111851,0x4(%esp)
c0104931:	c0 
c0104932:	c7 04 24 61 18 11 c0 	movl   $0xc0111861,(%esp)
c0104939:	e8 0a f4 ff ff       	call   c0103d48 <process_create>
c010493e:	a3 08 a0 11 c0       	mov    %eax,0xc011a008
    current_thread = thread_create(kernel_state, KERNELMODE, 0, NULL, 0, 0,0, NULL);
c0104943:	a1 08 a0 11 c0       	mov    0xc011a008,%eax
c0104948:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
c010494f:	00 
c0104950:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0104957:	00 
c0104958:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c010495f:	00 
c0104960:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0104967:	00 
c0104968:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010496f:	00 
c0104970:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104977:	00 
c0104978:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010497f:	00 
c0104980:	89 04 24             	mov    %eax,(%esp)
c0104983:	e8 8b 02 00 00       	call   c0104c13 <thread_create>
c0104988:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
}
c010498d:	c9                   	leave  
c010498e:	c3                   	ret    

c010498f <task_schedule>:
/**
 * performs context switches
 * @param process pointer to the process state
 */
struct cpu_state *task_schedule(struct cpu_state *cpu)
{
c010498f:	55                   	push   %ebp
c0104990:	89 e5                	mov    %esp,%ebp
c0104992:	83 ec 18             	sub    $0x18,%esp
    if((current_thread->flags & THREAD_KERNELMODE))
c0104995:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010499a:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010499e:	0f b7 c0             	movzwl %ax,%eax
c01049a1:	83 e0 04             	and    $0x4,%eax
c01049a4:	85 c0                	test   %eax,%eax
c01049a6:	74 0c                	je     c01049b4 <task_schedule+0x25>
    {
        current_thread->state = cpu;
c01049a8:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01049ad:	8b 55 08             	mov    0x8(%ebp),%edx
c01049b0:	89 10                	mov    %edx,(%eax)
c01049b2:	eb 1e                	jmp    c01049d2 <task_schedule+0x43>
    }
    else
    {
        memcpy(current_thread->state, cpu, sizeof(struct cpu_state));
c01049b4:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01049b9:	8b 00                	mov    (%eax),%eax
c01049bb:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c01049c2:	00 
c01049c3:	8b 55 08             	mov    0x8(%ebp),%edx
c01049c6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01049ca:	89 04 24             	mov    %eax,(%esp)
c01049cd:	e8 2d e4 ff ff       	call   c0102dff <memcpy>
    }

    if(current_thread->flags & THREAD_ZOMBIE)
c01049d2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01049d7:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c01049db:	0f b7 c0             	movzwl %ax,%eax
c01049de:	83 e0 08             	and    $0x8,%eax
c01049e1:	85 c0                	test   %eax,%eax
c01049e3:	0f 84 8f 00 00 00    	je     c0104a78 <task_schedule+0xe9>
    {
//        dump_thread_list(running_threads);
        thread_kill_sub(current_thread);
c01049e9:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01049ee:	89 04 24             	mov    %eax,(%esp)
c01049f1:	e8 7d 05 00 00       	call   c0104f73 <thread_kill_sub>
        if(list_is_empty(running_threads))
c01049f6:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c01049fb:	89 04 24             	mov    %eax,(%esp)
c01049fe:	e8 03 de ff ff       	call   c0102806 <list_is_empty>
c0104a03:	85 c0                	test   %eax,%eax
c0104a05:	74 21                	je     c0104a28 <task_schedule+0x99>
        {
            asm volatile("sti");
c0104a07:	fb                   	sti    
            while(list_is_empty(running_threads))
c0104a08:	eb 0c                	jmp    c0104a16 <task_schedule+0x87>
            {
                printf("halted!\n");
c0104a0a:	c7 04 24 6d 18 11 c0 	movl   $0xc011186d,(%esp)
c0104a11:	e8 9e 72 00 00       	call   c010bcb4 <puts>
//        dump_thread_list(running_threads);
        thread_kill_sub(current_thread);
        if(list_is_empty(running_threads))
        {
            asm volatile("sti");
            while(list_is_empty(running_threads))
c0104a16:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c0104a1b:	89 04 24             	mov    %eax,(%esp)
c0104a1e:	e8 e3 dd ff ff       	call   c0102806 <list_is_empty>
c0104a23:	85 c0                	test   %eax,%eax
c0104a25:	75 e3                	jne    c0104a0a <task_schedule+0x7b>
            {
                printf("halted!\n");
            }
            asm volatile("cli");
c0104a27:	fa                   	cli    
        }

        list_set_first(&thread_iterator);
c0104a28:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104a2f:	e8 43 df ff ff       	call   c0102977 <list_set_first>
        current_thread = list_get_current(&thread_iterator);
c0104a34:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104a3b:	e8 d0 de ff ff       	call   c0102910 <list_get_current>
c0104a40:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
        vmm_switch_context(&current_thread->context);
c0104a45:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104a4a:	83 c0 08             	add    $0x8,%eax
c0104a4d:	89 04 24             	mov    %eax,(%esp)
c0104a50:	e8 60 86 00 00       	call   c010d0b5 <vmm_switch_context>
        memcpy(cpu, current_thread->state, sizeof(struct cpu_state));
c0104a55:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104a5a:	8b 00                	mov    (%eax),%eax
c0104a5c:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c0104a63:	00 
c0104a64:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104a68:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a6b:	89 04 24             	mov    %eax,(%esp)
c0104a6e:	e8 8c e3 ff ff       	call   c0102dff <memcpy>
c0104a73:	e9 ba 00 00 00       	jmp    c0104b32 <task_schedule+0x1a3>
//       dump_thread_list(running_threads);
    }
    else if(current_thread->ticks == 0)
c0104a78:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104a7d:	8b 40 10             	mov    0x10(%eax),%eax
c0104a80:	85 c0                	test   %eax,%eax
c0104a82:	0f 85 9c 00 00 00    	jne    c0104b24 <task_schedule+0x195>
    {
        current_thread->ticks = 10;
c0104a88:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104a8d:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
        list_next(&thread_iterator);
c0104a94:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104a9b:	e8 95 de ff ff       	call   c0102935 <list_next>
        if(list_is_last(&thread_iterator))
c0104aa0:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104aa7:	e8 b0 de ff ff       	call   c010295c <list_is_last>
c0104aac:	85 c0                	test   %eax,%eax
c0104aae:	74 0c                	je     c0104abc <task_schedule+0x12d>
            list_set_first(&thread_iterator);
c0104ab0:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104ab7:	e8 bb de ff ff       	call   c0102977 <list_set_first>
        current_thread = list_get_current(&thread_iterator);
c0104abc:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104ac3:	e8 48 de ff ff       	call   c0102910 <list_get_current>
c0104ac8:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
        vmm_switch_context(&current_thread->context);
c0104acd:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104ad2:	83 c0 08             	add    $0x8,%eax
c0104ad5:	89 04 24             	mov    %eax,(%esp)
c0104ad8:	e8 d8 85 00 00       	call   c010d0b5 <vmm_switch_context>

        if(current_thread->flags & THREAD_KERNELMODE)
c0104add:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104ae2:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104ae6:	0f b7 c0             	movzwl %ax,%eax
c0104ae9:	83 e0 04             	and    $0x4,%eax
c0104aec:	85 c0                	test   %eax,%eax
c0104aee:	74 0c                	je     c0104afc <task_schedule+0x16d>
        {
            cpu = current_thread->state;
c0104af0:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104af5:	8b 00                	mov    (%eax),%eax
c0104af7:	89 45 08             	mov    %eax,0x8(%ebp)
c0104afa:	eb 36                	jmp    c0104b32 <task_schedule+0x1a3>
        }
        else
        {
            cpu = (struct cpu_state *)kernelstack;
c0104afc:	a1 04 a0 11 c0       	mov    0xc011a004,%eax
c0104b01:	89 45 08             	mov    %eax,0x8(%ebp)
            memcpy(cpu, current_thread->state, sizeof(struct cpu_state));
c0104b04:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104b09:	8b 00                	mov    (%eax),%eax
c0104b0b:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c0104b12:	00 
c0104b13:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b17:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b1a:	89 04 24             	mov    %eax,(%esp)
c0104b1d:	e8 dd e2 ff ff       	call   c0102dff <memcpy>
c0104b22:	eb 0e                	jmp    c0104b32 <task_schedule+0x1a3>
        }
    }
    else
    {
        current_thread->ticks--;
c0104b24:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104b29:	8b 50 10             	mov    0x10(%eax),%edx
c0104b2c:	83 ea 01             	sub    $0x1,%edx
c0104b2f:	89 50 10             	mov    %edx,0x10(%eax)
    }
    EOI(0);
c0104b32:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0104b39:	e8 5c 96 00 00       	call   c010e19a <EOI>
    return cpu;
c0104b3e:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0104b41:	c9                   	leave  
c0104b42:	c3                   	ret    

c0104b43 <thread_sync_context>:
extern list_t *running_threads;
extern struct thread_state* current_thread;
extern struct process_state *kernel_state;

void thread_sync_context(struct thread_state *thread)
{
c0104b43:	55                   	push   %ebp
c0104b44:	89 e5                	mov    %esp,%ebp
c0104b46:	83 ec 28             	sub    $0x28,%esp
    struct thread_state *main_thread = thread->process->main_thread;
c0104b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b4c:	8b 40 04             	mov    0x4(%eax),%eax
c0104b4f:	8b 40 30             	mov    0x30(%eax),%eax
c0104b52:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(thread != main_thread && main_thread != NULL && thread != NULL)
c0104b55:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b58:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b5b:	74 3a                	je     c0104b97 <thread_sync_context+0x54>
c0104b5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b61:	74 34                	je     c0104b97 <thread_sync_context+0x54>
c0104b63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b67:	74 2e                	je     c0104b97 <thread_sync_context+0x54>
    {
        int end = PDE_INDEX(0xB0000000);
c0104b69:	c7 45 f0 c0 02 00 00 	movl   $0x2c0,-0x10(%ebp)
        //printf("call sync... 0x%x, 0x%x, %d, %d\n", &thread->context.arch_context, &main_thread->context.arch_context, 0, end);
        arch_sync_pts(&thread->context.arch_context, &main_thread->context.arch_context, 0, end);
c0104b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b73:	8d 48 08             	lea    0x8(%eax),%ecx
c0104b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b79:	8d 50 08             	lea    0x8(%eax),%edx
c0104b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b7f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104b83:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104b8a:	00 
c0104b8b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104b8f:	89 14 24             	mov    %edx,(%esp)
c0104b92:	e8 36 8f 00 00       	call   c010dacd <arch_sync_pts>
    }
}
c0104b97:	c9                   	leave  
c0104b98:	c3                   	ret    

c0104b99 <kernel_thread_exit>:

void kernel_thread_exit(void)
{
c0104b99:	55                   	push   %ebp
c0104b9a:	89 e5                	mov    %esp,%ebp
c0104b9c:	83 ec 18             	sub    $0x18,%esp
    current_thread->flags |= THREAD_ZOMBIE;
c0104b9f:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104ba4:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c0104baa:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c0104bae:	83 ca 08             	or     $0x8,%edx
c0104bb1:	66 89 50 14          	mov    %dx,0x14(%eax)
    printf("death row\n");
c0104bb5:	c7 04 24 75 18 11 c0 	movl   $0xc0111875,(%esp)
c0104bbc:	e8 f3 70 00 00       	call   c010bcb4 <puts>
    while(1) {}
c0104bc1:	eb fe                	jmp    c0104bc1 <kernel_thread_exit+0x28>

c0104bc3 <kernel_thread_create>:
}



struct thread_state *kernel_thread_create(uintptr_t eip, int argc, void **argv)
{
c0104bc3:	55                   	push   %ebp
c0104bc4:	89 e5                	mov    %esp,%ebp
c0104bc6:	83 ec 38             	sub    $0x38,%esp
    struct thread_state *new_thread = thread_create(kernel_state, KERNELMODE, (uint32_t) eip, NULL, argc, argv, NULL, NULL);
c0104bc9:	a1 08 a0 11 c0       	mov    0xc011a008,%eax
c0104bce:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
c0104bd5:	00 
c0104bd6:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0104bdd:	00 
c0104bde:	8b 55 10             	mov    0x10(%ebp),%edx
c0104be1:	89 54 24 14          	mov    %edx,0x14(%esp)
c0104be5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104be8:	89 54 24 10          	mov    %edx,0x10(%esp)
c0104bec:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104bf3:	00 
c0104bf4:	8b 55 08             	mov    0x8(%ebp),%edx
c0104bf7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104bfb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104c02:	00 
c0104c03:	89 04 24             	mov    %eax,(%esp)
c0104c06:	e8 08 00 00 00       	call   c0104c13 <thread_create>
c0104c0b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return new_thread;
c0104c0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104c11:	c9                   	leave  
c0104c12:	c3                   	ret    

c0104c13 <thread_create>:


struct thread_state *thread_create(struct process_state *process, privilege_t prev, uint32_t eip, struct cpu_state *state, int argc, void **argv, void *return_address, vmm_context_t *context)
{
c0104c13:	55                   	push   %ebp
c0104c14:	89 e5                	mov    %esp,%ebp
c0104c16:	53                   	push   %ebx
c0104c17:	83 ec 44             	sub    $0x44,%esp
    struct thread_state *new_thread = malloc(sizeof(struct thread_state));
c0104c1a:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
c0104c21:	e8 80 8a 00 00       	call   c010d6a6 <malloc>
c0104c26:	89 45 f0             	mov    %eax,-0x10(%ebp)
    new_thread->flags = THREAD_ACTIV;
c0104c29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c2c:	66 c7 40 14 01 00    	movw   $0x1,0x14(%eax)
    new_thread->process = process;
c0104c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c35:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c38:	89 50 04             	mov    %edx,0x4(%eax)

    if(return_address == NULL)
c0104c3b:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0104c3f:	75 07                	jne    c0104c48 <thread_create+0x35>
        return_address = &kernel_thread_exit;
c0104c41:	c7 45 20 99 4b 10 c0 	movl   $0xc0104b99,0x20(%ebp)

    if(process->main_thread == NULL)
c0104c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c4b:	8b 40 30             	mov    0x30(%eax),%eax
c0104c4e:	85 c0                	test   %eax,%eax
c0104c50:	75 09                	jne    c0104c5b <thread_create+0x48>
    {
        process->main_thread = new_thread;
c0104c52:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c55:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c58:	89 50 30             	mov    %edx,0x30(%eax)
    }

    vmm_create_context(&new_thread->context);
c0104c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c5e:	83 c0 08             	add    $0x8,%eax
c0104c61:	89 04 24             	mov    %eax,(%esp)
c0104c64:	e8 26 84 00 00       	call   c010d08f <vmm_create_context>

    if(context != NULL)
c0104c69:	83 7d 24 00          	cmpl   $0x0,0x24(%ebp)
c0104c6d:	74 1d                	je     c0104c8c <thread_create+0x79>
        memcpy(&new_thread->context.arch_context, &context->arch_context, sizeof(arch_vmm_context_t));
c0104c6f:	8b 45 24             	mov    0x24(%ebp),%eax
c0104c72:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c75:	83 c2 08             	add    $0x8,%edx
c0104c78:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
c0104c7f:	00 
c0104c80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c84:	89 14 24             	mov    %edx,(%esp)
c0104c87:	e8 73 e1 ff ff       	call   c0102dff <memcpy>

    thread_sync_context(new_thread);
c0104c8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c8f:	89 04 24             	mov    %eax,(%esp)
c0104c92:	e8 ac fe ff ff       	call   c0104b43 <thread_sync_context>
    new_thread->ticks = 10;
c0104c97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c9a:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
    new_thread->return_value = 0;
c0104ca1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca4:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

    void *kernel_stack = malloc(0x1000);
c0104cab:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0104cb2:	e8 ef 89 00 00       	call   c010d6a6 <malloc>
c0104cb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct cpu_state *new_state = kernel_stack + (0x1000 - sizeof(struct cpu_state))-12;
c0104cba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cbd:	05 ac 0f 00 00       	add    $0xfac,%eax
c0104cc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    new_thread->state = new_state;
c0104cc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cc8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104ccb:	89 10                	mov    %edx,(%eax)

    if(state != NULL)
c0104ccd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104cd1:	74 1c                	je     c0104cef <thread_create+0xdc>
    {
        memcpy(new_state, state, sizeof(struct cpu_state));
c0104cd3:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c0104cda:	00 
c0104cdb:	8b 45 14             	mov    0x14(%ebp),%eax
c0104cde:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104ce5:	89 04 24             	mov    %eax,(%esp)
c0104ce8:	e8 12 e1 ff ff       	call   c0102dff <memcpy>
c0104ced:	eb 2e                	jmp    c0104d1d <thread_create+0x10a>
    }
    else
    {
        memset(new_state, 0, sizeof(struct cpu_state));
c0104cef:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c0104cf6:	00 
c0104cf7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104cfe:	00 
c0104cff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d02:	89 04 24             	mov    %eax,(%esp)
c0104d05:	e8 6b e2 ff ff       	call   c0102f75 <memset>
        new_state->eip = eip;
c0104d0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d0d:	8b 55 10             	mov    0x10(%ebp),%edx
c0104d10:	89 50 34             	mov    %edx,0x34(%eax)
        new_state->eflags = 0x202;
c0104d13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d16:	c7 40 3c 02 02 00 00 	movl   $0x202,0x3c(%eax)
    }

    uint32_t *stack;
    if(prev == KERNELMODE)
c0104d1d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104d21:	75 78                	jne    c0104d9b <thread_create+0x188>
    {
        new_thread->flags |= THREAD_KERNELMODE;
c0104d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d26:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104d2a:	89 c2                	mov    %eax,%edx
c0104d2c:	83 ca 04             	or     $0x4,%edx
c0104d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d32:	66 89 50 14          	mov    %dx,0x14(%eax)
        new_state->cs = 0x08;
c0104d36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d39:	c7 40 38 08 00 00 00 	movl   $0x8,0x38(%eax)
        new_state->ds = 0x10;
c0104d40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d43:	c7 40 0c 10 00 00 00 	movl   $0x10,0xc(%eax)
        new_state->es = 0x10;
c0104d4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d4d:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
        new_state->fs = 0x10;
c0104d54:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d57:	c7 40 04 10 00 00 00 	movl   $0x10,0x4(%eax)
        new_state->gs = 0x10;
c0104d5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d61:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
        stack = kernel_stack + 0x1000-8;
c0104d67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d6a:	05 f8 0f 00 00       	add    $0xff8,%eax
c0104d6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        *--stack = (uint32_t) argv;
c0104d72:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104d76:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0104d79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d7c:	89 10                	mov    %edx,(%eax)
        *--stack = argc;
c0104d7e:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104d82:	8b 55 18             	mov    0x18(%ebp),%edx
c0104d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d88:	89 10                	mov    %edx,(%eax)
        *--stack = (uint32_t) return_address;
c0104d8a:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104d8e:	8b 55 20             	mov    0x20(%ebp),%edx
c0104d91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d94:	89 10                	mov    %edx,(%eax)
c0104d96:	e9 b1 00 00 00       	jmp    c0104e4c <thread_create+0x239>
    }
    else
    {
        if(!state)
c0104d9b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104d9f:	0f 85 93 00 00 00    	jne    c0104e38 <thread_create+0x225>
        {
            paddr_t pframe = pmm_alloc_page();
c0104da5:	e8 de a7 00 00       	call   c010f588 <pmm_alloc_page>
c0104daa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vmm_map(&new_thread->context, pframe, MEMORY_LAYOUT_STACK_TOP-0x1000, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c0104dad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104db0:	8d 50 08             	lea    0x8(%eax),%edx
c0104db3:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c0104dba:	00 
c0104dbb:	c7 44 24 08 00 f0 ff 	movl   $0xbffff000,0x8(%esp)
c0104dc2:	bf 
c0104dc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104dc6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104dca:	89 14 24             	mov    %edx,(%esp)
c0104dcd:	e8 13 83 00 00       	call   c010d0e5 <vmm_map>
            new_state->esp = (uint32_t) MEMORY_LAYOUT_STACK_TOP - 12;
c0104dd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104dd5:	c7 40 40 f4 ff ff bf 	movl   $0xbffffff4,0x40(%eax)

            stack = (uint32_t *) (vmm_automap_kernel(current_context, pframe, VMM_PRESENT | VMM_WRITABLE | VMM_USER) + 0x1000);
c0104ddc:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0104de1:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c0104de8:	00 
c0104de9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104dec:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104df0:	89 04 24             	mov    %eax,(%esp)
c0104df3:	e8 d6 83 00 00       	call   c010d1ce <vmm_automap_kernel>
c0104df8:	05 00 10 00 00       	add    $0x1000,%eax
c0104dfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
            *--stack = (uint32_t) argv;
c0104e00:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104e04:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0104e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e0a:	89 10                	mov    %edx,(%eax)
            *--stack = argc;
c0104e0c:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104e10:	8b 55 18             	mov    0x18(%ebp),%edx
c0104e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e16:	89 10                	mov    %edx,(%eax)
            *--stack = (uint32_t) return_address;
c0104e18:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104e1c:	8b 55 20             	mov    0x20(%ebp),%edx
c0104e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e22:	89 10                	mov    %edx,(%eax)
            vmm_unmap(current_context, (vaddr_t) stack);
c0104e24:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104e27:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0104e2c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e30:	89 04 24             	mov    %eax,(%esp)
c0104e33:	e8 dc 82 00 00       	call   c010d114 <vmm_unmap>
        }

        new_state->cs = 0x1b;
c0104e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104e3b:	c7 40 38 1b 00 00 00 	movl   $0x1b,0x38(%eax)
        new_state->ss = 0x23;
c0104e42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104e45:	c7 40 44 23 00 00 00 	movl   $0x23,0x44(%eax)
    }

    if(process->heap_top == 0)
c0104e4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e4f:	8b 40 40             	mov    0x40(%eax),%eax
c0104e52:	85 c0                	test   %eax,%eax
c0104e54:	75 78                	jne    c0104ece <thread_create+0x2bb>
    {
        process->heap_top = arch_vaddr_find(&new_thread->context.arch_context, 1, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c0104e56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e59:	83 c0 08             	add    $0x8,%eax
c0104e5c:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
c0104e63:	00 
c0104e64:	c7 44 24 0c 00 00 00 	movl   $0xb0000000,0xc(%esp)
c0104e6b:	b0 
c0104e6c:	c7 44 24 08 00 00 00 	movl   $0xa0000000,0x8(%esp)
c0104e73:	a0 
c0104e74:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104e7b:	00 
c0104e7c:	89 04 24             	mov    %eax,(%esp)
c0104e7f:	e8 45 90 00 00       	call   c010dec9 <arch_vaddr_find>
c0104e84:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e87:	89 42 40             	mov    %eax,0x40(%edx)
        vmm_map(&new_thread->context, pmm_alloc_page(), process->heap_top, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c0104e8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e8d:	8b 58 40             	mov    0x40(%eax),%ebx
c0104e90:	e8 f3 a6 00 00       	call   c010f588 <pmm_alloc_page>
c0104e95:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e98:	83 c2 08             	add    $0x8,%edx
c0104e9b:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c0104ea2:	00 
c0104ea3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0104ea7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104eab:	89 14 24             	mov    %edx,(%esp)
c0104eae:	e8 32 82 00 00       	call   c010d0e5 <vmm_map>
        process->heap_lower_limit = process->heap_top;
c0104eb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eb6:	8b 50 40             	mov    0x40(%eax),%edx
c0104eb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ebc:	89 50 44             	mov    %edx,0x44(%eax)
        process->heap_upper_limit = (uint32_t) stack-0x1000;
c0104ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ec2:	8d 90 00 f0 ff ff    	lea    -0x1000(%eax),%edx
c0104ec8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ecb:	89 50 48             	mov    %edx,0x48(%eax)

    }

    if(list_is_empty(process->zombie_tids))
c0104ece:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed1:	8b 40 34             	mov    0x34(%eax),%eax
c0104ed4:	89 04 24             	mov    %eax,(%esp)
c0104ed7:	e8 2a d9 ff ff       	call   c0102806 <list_is_empty>
c0104edc:	85 c0                	test   %eax,%eax
c0104ede:	74 17                	je     c0104ef7 <thread_create+0x2e4>
        new_thread->tid = process->tid_counter++;
c0104ee0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee3:	8b 40 2c             	mov    0x2c(%eax),%eax
c0104ee6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104ee9:	89 42 20             	mov    %eax,0x20(%edx)
c0104eec:	8d 50 01             	lea    0x1(%eax),%edx
c0104eef:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef2:	89 50 2c             	mov    %edx,0x2c(%eax)
c0104ef5:	eb 16                	jmp    c0104f0d <thread_create+0x2fa>
    else
        new_thread->tid = (tid_t) list_pop_back(process->zombie_tids);
c0104ef7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104efa:	8b 40 34             	mov    0x34(%eax),%eax
c0104efd:	89 04 24             	mov    %eax,(%esp)
c0104f00:	e8 3a d8 ff ff       	call   c010273f <list_pop_back>
c0104f05:	89 c2                	mov    %eax,%edx
c0104f07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f0a:	89 50 20             	mov    %edx,0x20(%eax)

    list_push_front(process->threads,new_thread);
c0104f0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f10:	8b 40 28             	mov    0x28(%eax),%eax
c0104f13:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f16:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104f1a:	89 04 24             	mov    %eax,(%esp)
c0104f1d:	e8 93 d7 ff ff       	call   c01026b5 <list_push_front>

    list_push_front(running_threads, new_thread);
c0104f22:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c0104f27:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f2a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104f2e:	89 04 24             	mov    %eax,(%esp)
c0104f31:	e8 7f d7 ff ff       	call   c01026b5 <list_push_front>


    return new_thread;
c0104f36:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0104f39:	83 c4 44             	add    $0x44,%esp
c0104f3c:	5b                   	pop    %ebx
c0104f3d:	5d                   	pop    %ebp
c0104f3e:	c3                   	ret    

c0104f3f <thread_kill>:

void thread_kill(struct thread_state *thread)
{
c0104f3f:	55                   	push   %ebp
c0104f40:	89 e5                	mov    %esp,%ebp
c0104f42:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0104f45:	fa                   	cli    
    if(current_thread == thread)
c0104f46:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104f4b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104f4e:	75 15                	jne    c0104f65 <thread_kill+0x26>
        thread->flags |= THREAD_ZOMBIE;
c0104f50:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f53:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104f57:	89 c2                	mov    %eax,%edx
c0104f59:	83 ca 08             	or     $0x8,%edx
c0104f5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f5f:	66 89 50 14          	mov    %dx,0x14(%eax)
c0104f63:	eb 0b                	jmp    c0104f70 <thread_kill+0x31>
    else
    {
        thread_kill_sub(thread);
c0104f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f68:	89 04 24             	mov    %eax,(%esp)
c0104f6b:	e8 03 00 00 00       	call   c0104f73 <thread_kill_sub>
    }
    asm volatile("sti");
c0104f70:	fb                   	sti    
}
c0104f71:	c9                   	leave  
c0104f72:	c3                   	ret    

c0104f73 <thread_kill_sub>:

void thread_kill_sub(struct thread_state *thread)
{
c0104f73:	55                   	push   %ebp
c0104f74:	89 e5                	mov    %esp,%ebp
c0104f76:	83 ec 38             	sub    $0x38,%esp
    if(thread->flags & THREAD_ACTIV || thread->flags & THREAD_ZOMBIE)
c0104f79:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f7c:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104f80:	0f b7 c0             	movzwl %ax,%eax
c0104f83:	83 e0 01             	and    $0x1,%eax
c0104f86:	85 c0                	test   %eax,%eax
c0104f88:	75 11                	jne    c0104f9b <thread_kill_sub+0x28>
c0104f8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f8d:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104f91:	0f b7 c0             	movzwl %ax,%eax
c0104f94:	83 e0 08             	and    $0x8,%eax
c0104f97:	85 c0                	test   %eax,%eax
c0104f99:	74 57                	je     c0104ff2 <thread_kill_sub+0x7f>
    {
        iterator_t running_thread_it = iterator_create(running_threads);
c0104f9b:	8b 15 10 a0 11 c0    	mov    0xc011a010,%edx
c0104fa1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fa4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104fa8:	89 04 24             	mov    %eax,(%esp)
c0104fab:	e8 97 d8 ff ff       	call   c0102847 <iterator_create>
c0104fb0:	83 ec 04             	sub    $0x4,%esp
        while(!list_is_last(&running_thread_it))
c0104fb3:	eb 2e                	jmp    c0104fe3 <thread_kill_sub+0x70>
        {
            struct thread_state *t = list_get_current(&running_thread_it);
c0104fb5:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fb8:	89 04 24             	mov    %eax,(%esp)
c0104fbb:	e8 50 d9 ff ff       	call   c0102910 <list_get_current>
c0104fc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if(t == thread)
c0104fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc6:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104fc9:	75 0d                	jne    c0104fd8 <thread_kill_sub+0x65>
            {
                list_remove(&running_thread_it);
c0104fcb:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fce:	89 04 24             	mov    %eax,(%esp)
c0104fd1:	e8 cc d9 ff ff       	call   c01029a2 <list_remove>
                break;
c0104fd6:	eb 1a                	jmp    c0104ff2 <thread_kill_sub+0x7f>
            }
            list_next(&running_thread_it);
c0104fd8:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fdb:	89 04 24             	mov    %eax,(%esp)
c0104fde:	e8 52 d9 ff ff       	call   c0102935 <list_next>
void thread_kill_sub(struct thread_state *thread)
{
    if(thread->flags & THREAD_ACTIV || thread->flags & THREAD_ZOMBIE)
    {
        iterator_t running_thread_it = iterator_create(running_threads);
        while(!list_is_last(&running_thread_it))
c0104fe3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fe6:	89 04 24             	mov    %eax,(%esp)
c0104fe9:	e8 6e d9 ff ff       	call   c010295c <list_is_last>
c0104fee:	85 c0                	test   %eax,%eax
c0104ff0:	74 c3                	je     c0104fb5 <thread_kill_sub+0x42>
            list_next(&running_thread_it);
        }
    }

    // only delete the cpu state of usermode threads. Freeing the kernel cpu-state can cause pagefaults
    if(! (thread->flags & THREAD_KERNELMODE))
c0104ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ff5:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104ff9:	0f b7 c0             	movzwl %ax,%eax
c0104ffc:	83 e0 04             	and    $0x4,%eax
c0104fff:	85 c0                	test   %eax,%eax
c0105001:	75 1b                	jne    c010501e <thread_kill_sub+0xab>
    {
        free(thread->state);
c0105003:	8b 45 08             	mov    0x8(%ebp),%eax
c0105006:	8b 00                	mov    (%eax),%eax
c0105008:	89 04 24             	mov    %eax,(%esp)
c010500b:	e8 7d 87 00 00       	call   c010d78d <free>
        arch_vmm_destroy_context(&thread->context.arch_context);
c0105010:	8b 45 08             	mov    0x8(%ebp),%eax
c0105013:	83 c0 08             	add    $0x8,%eax
c0105016:	89 04 24             	mov    %eax,(%esp)
c0105019:	e8 56 8a 00 00       	call   c010da74 <arch_vmm_destroy_context>
    }

    if(thread->process->flags & PROCESS_ZOMBIE)
c010501e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105021:	8b 40 04             	mov    0x4(%eax),%eax
c0105024:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0105028:	0f b7 c0             	movzwl %ax,%eax
c010502b:	83 e0 04             	and    $0x4,%eax
c010502e:	85 c0                	test   %eax,%eax
c0105030:	0f 84 a8 00 00 00    	je     c01050de <thread_kill_sub+0x16b>
    {
        list_push_front(thread->process->zombie_tids,(void *) thread->tid);
c0105036:	8b 45 08             	mov    0x8(%ebp),%eax
c0105039:	8b 40 20             	mov    0x20(%eax),%eax
c010503c:	89 c2                	mov    %eax,%edx
c010503e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105041:	8b 40 04             	mov    0x4(%eax),%eax
c0105044:	8b 40 34             	mov    0x34(%eax),%eax
c0105047:	89 54 24 04          	mov    %edx,0x4(%esp)
c010504b:	89 04 24             	mov    %eax,(%esp)
c010504e:	e8 62 d6 ff ff       	call   c01026b5 <list_push_front>
        iterator_t thread_it = iterator_create(thread->process->threads);
c0105053:	8b 45 08             	mov    0x8(%ebp),%eax
c0105056:	8b 40 04             	mov    0x4(%eax),%eax
c0105059:	8b 50 28             	mov    0x28(%eax),%edx
c010505c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010505f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105063:	89 04 24             	mov    %eax,(%esp)
c0105066:	e8 dc d7 ff ff       	call   c0102847 <iterator_create>
c010506b:	83 ec 04             	sub    $0x4,%esp
        while(!list_is_last(&thread_it))
c010506e:	eb 51                	jmp    c01050c1 <thread_kill_sub+0x14e>
        {
            struct thread_state *t = list_get_current(&thread_it);
c0105070:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0105073:	89 04 24             	mov    %eax,(%esp)
c0105076:	e8 95 d8 ff ff       	call   c0102910 <list_get_current>
c010507b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(t == thread)
c010507e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105081:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105084:	75 30                	jne    c01050b6 <thread_kill_sub+0x143>
            {
                list_remove(&thread_it);
c0105086:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0105089:	89 04 24             	mov    %eax,(%esp)
c010508c:	e8 11 d9 ff ff       	call   c01029a2 <list_remove>
                if(list_is_empty(thread->process->threads))
c0105091:	8b 45 08             	mov    0x8(%ebp),%eax
c0105094:	8b 40 04             	mov    0x4(%eax),%eax
c0105097:	8b 40 28             	mov    0x28(%eax),%eax
c010509a:	89 04 24             	mov    %eax,(%esp)
c010509d:	e8 64 d7 ff ff       	call   c0102806 <list_is_empty>
c01050a2:	85 c0                	test   %eax,%eax
c01050a4:	74 2c                	je     c01050d2 <thread_kill_sub+0x15f>
                    process_kill(thread->process);
c01050a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01050a9:	8b 40 04             	mov    0x4(%eax),%eax
c01050ac:	89 04 24             	mov    %eax,(%esp)
c01050af:	e8 6a f0 ff ff       	call   c010411e <process_kill>
                break;
c01050b4:	eb 1c                	jmp    c01050d2 <thread_kill_sub+0x15f>
            }
            list_next(&thread_it);
c01050b6:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01050b9:	89 04 24             	mov    %eax,(%esp)
c01050bc:	e8 74 d8 ff ff       	call   c0102935 <list_next>

    if(thread->process->flags & PROCESS_ZOMBIE)
    {
        list_push_front(thread->process->zombie_tids,(void *) thread->tid);
        iterator_t thread_it = iterator_create(thread->process->threads);
        while(!list_is_last(&thread_it))
c01050c1:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01050c4:	89 04 24             	mov    %eax,(%esp)
c01050c7:	e8 90 d8 ff ff       	call   c010295c <list_is_last>
c01050cc:	85 c0                	test   %eax,%eax
c01050ce:	74 a0                	je     c0105070 <thread_kill_sub+0xfd>
c01050d0:	eb 01                	jmp    c01050d3 <thread_kill_sub+0x160>
            if(t == thread)
            {
                list_remove(&thread_it);
                if(list_is_empty(thread->process->threads))
                    process_kill(thread->process);
                break;
c01050d2:	90                   	nop
            }
            list_next(&thread_it);
        }
        free(thread);
c01050d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01050d6:	89 04 24             	mov    %eax,(%esp)
c01050d9:	e8 af 86 00 00       	call   c010d78d <free>
    }
}
c01050de:	c9                   	leave  
c01050df:	c3                   	ret    

c01050e0 <thread_exit>:

void thread_exit(struct cpu_state **cpu)
{
c01050e0:	55                   	push   %ebp
c01050e1:	89 e5                	mov    %esp,%ebp
c01050e3:	83 ec 18             	sub    $0x18,%esp
    current_thread->flags |= THREAD_ZOMBIE;
c01050e6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01050eb:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01050f1:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c01050f5:	83 ca 08             	or     $0x8,%edx
c01050f8:	66 89 50 14          	mov    %dx,0x14(%eax)
    *cpu = task_schedule(*cpu);
c01050fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01050ff:	8b 00                	mov    (%eax),%eax
c0105101:	89 04 24             	mov    %eax,(%esp)
c0105104:	e8 86 f8 ff ff       	call   c010498f <task_schedule>
c0105109:	8b 55 08             	mov    0x8(%ebp),%edx
c010510c:	89 02                	mov    %eax,(%edx)
}
c010510e:	c9                   	leave  
c010510f:	c3                   	ret    

c0105110 <launch_thread>:

void launch_thread(struct cpu_state **cpu)
{
c0105110:	55                   	push   %ebp
c0105111:	89 e5                	mov    %esp,%ebp
c0105113:	56                   	push   %esi
c0105114:	53                   	push   %ebx
c0105115:	83 ec 20             	sub    $0x20,%esp
    thread_create(current_thread->process, USERMODE, (*cpu)->CPU_ARG1, NULL, (*cpu)->CPU_ARG2, (void**)(*cpu)->CPU_ARG3, (void*)(*cpu)->CPU_ARG4, NULL);
c0105118:	8b 45 08             	mov    0x8(%ebp),%eax
c010511b:	8b 00                	mov    (%eax),%eax
c010511d:	8b 40 14             	mov    0x14(%eax),%eax
c0105120:	89 c6                	mov    %eax,%esi
c0105122:	8b 45 08             	mov    0x8(%ebp),%eax
c0105125:	8b 00                	mov    (%eax),%eax
c0105127:	8b 40 20             	mov    0x20(%eax),%eax
c010512a:	89 c3                	mov    %eax,%ebx
c010512c:	8b 45 08             	mov    0x8(%ebp),%eax
c010512f:	8b 00                	mov    (%eax),%eax
c0105131:	8b 40 24             	mov    0x24(%eax),%eax
c0105134:	89 c1                	mov    %eax,%ecx
c0105136:	8b 45 08             	mov    0x8(%ebp),%eax
c0105139:	8b 00                	mov    (%eax),%eax
c010513b:	8b 50 1c             	mov    0x1c(%eax),%edx
c010513e:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105143:	8b 40 04             	mov    0x4(%eax),%eax
c0105146:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
c010514d:	00 
c010514e:	89 74 24 18          	mov    %esi,0x18(%esp)
c0105152:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c0105156:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010515a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105161:	00 
c0105162:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105166:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010516d:	00 
c010516e:	89 04 24             	mov    %eax,(%esp)
c0105171:	e8 9d fa ff ff       	call   c0104c13 <thread_create>
}
c0105176:	83 c4 20             	add    $0x20,%esp
c0105179:	5b                   	pop    %ebx
c010517a:	5e                   	pop    %esi
c010517b:	5d                   	pop    %ebp
c010517c:	c3                   	ret    

c010517d <INIT_VFS>:
 *
 * @param void
 * @return void
 */
void INIT_VFS(void)
{
c010517d:	55                   	push   %ebp
c010517e:	89 e5                	mov    %esp,%ebp
c0105180:	83 ec 38             	sub    $0x38,%esp
    root = vfs_create_inode(NULL, S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH, NULL, 0, 0);
c0105183:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010518a:	00 
c010518b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105192:	00 
c0105193:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010519a:	00 
c010519b:	c7 44 24 04 c0 5b 00 	movl   $0x5bc0,0x4(%esp)
c01051a2:	00 
c01051a3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01051aa:	e8 5a 00 00 00       	call   c0105209 <vfs_create_inode>
c01051af:	a3 10 80 11 c0       	mov    %eax,0xc0118010

    vfs_inode_t *foo = vfs_create_inode("foo.txt", S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH, root, 0, 0);
c01051b4:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c01051b9:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01051c0:	00 
c01051c1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01051c8:	00 
c01051c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01051cd:	c7 44 24 04 c0 5b 00 	movl   $0x5bc0,0x4(%esp)
c01051d4:	00 
c01051d5:	c7 04 24 7f 18 11 c0 	movl   $0xc011187f,(%esp)
c01051dc:	e8 28 00 00 00       	call   c0105209 <vfs_create_inode>
c01051e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vfs_write(foo, 0, "Hallo Welt!\n", 13);
c01051e4:	c7 44 24 0c 0d 00 00 	movl   $0xd,0xc(%esp)
c01051eb:	00 
c01051ec:	c7 44 24 08 87 18 11 	movl   $0xc0111887,0x8(%esp)
c01051f3:	c0 
c01051f4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01051fb:	00 
c01051fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051ff:	89 04 24             	mov    %eax,(%esp)
c0105202:	e8 d0 01 00 00       	call   c01053d7 <vfs_write>
}
c0105207:	c9                   	leave  
c0105208:	c3                   	ret    

c0105209 <vfs_create_inode>:
 *               if parent is NULL, the parent for the node is root.
 *
 * @return pointer to the new node
 */
vfs_inode_t* vfs_create_inode(char *name, mode_t mode, vfs_inode_t *parent, uid_t uid, gid_t gid)
{
c0105209:	55                   	push   %ebp
c010520a:	89 e5                	mov    %esp,%ebp
c010520c:	53                   	push   %ebx
c010520d:	83 ec 24             	sub    $0x24,%esp
    vfs_inode_t *inode = malloc(sizeof(vfs_inode_t));
c0105210:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0105217:	e8 8a 84 00 00       	call   c010d6a6 <malloc>
c010521c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(name != NULL)
c010521f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105223:	74 31                	je     c0105256 <vfs_create_inode+0x4d>
    {
        inode->name = (char*) malloc(strlen(name)+1);
c0105225:	8b 45 08             	mov    0x8(%ebp),%eax
c0105228:	89 04 24             	mov    %eax,(%esp)
c010522b:	e8 f9 d7 ff ff       	call   c0102a29 <strlen>
c0105230:	83 c0 01             	add    $0x1,%eax
c0105233:	89 04 24             	mov    %eax,(%esp)
c0105236:	e8 6b 84 00 00       	call   c010d6a6 <malloc>
c010523b:	89 c2                	mov    %eax,%edx
c010523d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105240:	89 10                	mov    %edx,(%eax)
        strcpy(inode->name, name);
c0105242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105245:	8b 00                	mov    (%eax),%eax
c0105247:	8b 55 08             	mov    0x8(%ebp),%edx
c010524a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010524e:	89 04 24             	mov    %eax,(%esp)
c0105251:	e8 fa d7 ff ff       	call   c0102a50 <strcpy>
    }

    inode->length = 0;
c0105256:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105259:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    inode->type = VFS_REGULAR;
c0105260:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105263:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(parent != NULL)
c010526a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010526e:	74 3b                	je     c01052ab <vfs_create_inode+0xa2>
    {
        inode->parent = parent;
c0105270:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105273:	8b 55 10             	mov    0x10(%ebp),%edx
c0105276:	89 50 3c             	mov    %edx,0x3c(%eax)
        vfs_dentry_t *entry = vfs_create_dir_entry(inode);
c0105279:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010527c:	89 04 24             	mov    %eax,(%esp)
c010527f:	e8 25 01 00 00       	call   c01053a9 <vfs_create_dir_entry>
c0105284:	89 45 f0             	mov    %eax,-0x10(%ebp)
        vfs_write(parent, parent->length, entry, sizeof(vfs_dentry_t));
c0105287:	8b 45 10             	mov    0x10(%ebp),%eax
c010528a:	8b 40 08             	mov    0x8(%eax),%eax
c010528d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0105294:	00 
c0105295:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105298:	89 54 24 08          	mov    %edx,0x8(%esp)
c010529c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01052a0:	8b 45 10             	mov    0x10(%ebp),%eax
c01052a3:	89 04 24             	mov    %eax,(%esp)
c01052a6:	e8 2c 01 00 00       	call   c01053d7 <vfs_write>
    }

    inode->stat.st_mode = mode;
c01052ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052ae:	8b 55 0c             	mov    0xc(%ebp),%edx
c01052b1:	89 50 0c             	mov    %edx,0xc(%eax)
    inode->stat.st_ino = nodes++;
c01052b4:	a1 14 80 11 c0       	mov    0xc0118014,%eax
c01052b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01052bc:	89 42 10             	mov    %eax,0x10(%edx)
c01052bf:	83 c0 01             	add    $0x1,%eax
c01052c2:	a3 14 80 11 c0       	mov    %eax,0xc0118014
    inode->stat.st_uid = uid;
c01052c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052ca:	8b 55 14             	mov    0x14(%ebp),%edx
c01052cd:	89 50 18             	mov    %edx,0x18(%eax)
    inode->stat.st_gid = gid;
c01052d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052d3:	8b 55 18             	mov    0x18(%ebp),%edx
c01052d6:	89 50 1c             	mov    %edx,0x1c(%eax)
    update_time((struct time*)&inode->stat.st_atime);
c01052d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052dc:	83 c0 24             	add    $0x24,%eax
c01052df:	89 04 24             	mov    %eax,(%esp)
c01052e2:	e8 eb 72 00 00       	call   c010c5d2 <update_time>
    update_time((struct time*)&inode->stat.st_mtime);
c01052e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052ea:	83 c0 28             	add    $0x28,%eax
c01052ed:	89 04 24             	mov    %eax,(%esp)
c01052f0:	e8 dd 72 00 00       	call   c010c5d2 <update_time>

    inode->buffer = (vfs_buffer_info_t*) malloc(sizeof(vfs_buffer_info_t));
c01052f5:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c01052fc:	e8 a5 83 00 00       	call   c010d6a6 <malloc>
c0105301:	89 c2                	mov    %eax,%edx
c0105303:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105306:	89 50 38             	mov    %edx,0x38(%eax)
    inode->buffer->num_readers = 1;
c0105309:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010530c:	8b 40 38             	mov    0x38(%eax),%eax
c010530f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    inode->buffer->num_writers = 1;
c0105315:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105318:	8b 40 38             	mov    0x38(%eax),%eax
c010531b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    inode->buffer->num_blocks = 0;
c0105322:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105325:	8b 40 38             	mov    0x38(%eax),%eax
c0105328:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    inode->buffer->blocks = list_create();
c010532f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105332:	8b 58 38             	mov    0x38(%eax),%ebx
c0105335:	e8 44 d2 ff ff       	call   c010257e <list_create>
c010533a:	89 43 10             	mov    %eax,0x10(%ebx)

    return inode;
c010533d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105340:	83 c4 24             	add    $0x24,%esp
c0105343:	5b                   	pop    %ebx
c0105344:	5d                   	pop    %ebp
c0105345:	c3                   	ret    

c0105346 <vfs_create_pipe>:

vfs_inode_t *vfs_create_pipe(uid_t uid, gid_t gid)
{
c0105346:	55                   	push   %ebp
c0105347:	89 e5                	mov    %esp,%ebp
c0105349:	53                   	push   %ebx
c010534a:	83 ec 34             	sub    $0x34,%esp
    vfs_inode_t *inode = vfs_create_inode("pipe", S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH, NULL, uid, gid);
c010534d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105350:	89 44 24 10          	mov    %eax,0x10(%esp)
c0105354:	8b 45 08             	mov    0x8(%ebp),%eax
c0105357:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010535b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105362:	00 
c0105363:	c7 44 24 04 c0 36 00 	movl   $0x36c0,0x4(%esp)
c010536a:	00 
c010536b:	c7 04 24 94 18 11 c0 	movl   $0xc0111894,(%esp)
c0105372:	e8 92 fe ff ff       	call   c0105209 <vfs_create_inode>
c0105377:	89 45 f4             	mov    %eax,-0xc(%ebp)

    inode->buffer->event_id = get_new_event_ID();
c010537a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010537d:	8b 58 38             	mov    0x38(%eax),%ebx
c0105380:	e8 d0 52 00 00       	call   c010a655 <get_new_event_ID>
c0105385:	89 43 08             	mov    %eax,0x8(%ebx)
    inode->buffer->handlers = list_create();
c0105388:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010538b:	8b 58 38             	mov    0x38(%eax),%ebx
c010538e:	e8 eb d1 ff ff       	call   c010257e <list_create>
c0105393:	89 43 0c             	mov    %eax,0xc(%ebx)

    inode->type = VFS_PIPE;
c0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105399:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

    return inode;
c01053a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01053a3:	83 c4 34             	add    $0x34,%esp
c01053a6:	5b                   	pop    %ebx
c01053a7:	5d                   	pop    %ebp
c01053a8:	c3                   	ret    

c01053a9 <vfs_create_dir_entry>:
 *
 * @param entry_inode the node that will be entried
 * @return the new directory entry
 */
vfs_dentry_t* vfs_create_dir_entry(vfs_inode_t *entry_inode)
{
c01053a9:	55                   	push   %ebp
c01053aa:	89 e5                	mov    %esp,%ebp
c01053ac:	83 ec 28             	sub    $0x28,%esp
    vfs_dentry_t *dir_ent = malloc(sizeof(vfs_dentry_t));
c01053af:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01053b6:	e8 eb 82 00 00       	call   c010d6a6 <malloc>
c01053bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    dir_ent->ino = entry_inode->stat.st_ino;
c01053be:	8b 45 08             	mov    0x8(%ebp),%eax
c01053c1:	8b 50 10             	mov    0x10(%eax),%edx
c01053c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053c7:	89 10                	mov    %edx,(%eax)
    dir_ent->inode = entry_inode;
c01053c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053cc:	8b 55 08             	mov    0x8(%ebp),%edx
c01053cf:	89 50 04             	mov    %edx,0x4(%eax)

    return dir_ent;
c01053d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01053d5:	c9                   	leave  
c01053d6:	c3                   	ret    

c01053d7 <vfs_write>:
 * @param bytes number of bytes to write
 *
 * @return number of written bytes
 */
int vfs_write(vfs_inode_t *inode, int off, void *buffer, int bytes)
{
c01053d7:	55                   	push   %ebp
c01053d8:	89 e5                	mov    %esp,%ebp
c01053da:	83 ec 48             	sub    $0x48,%esp
    GET_INODE(inode);
c01053dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01053e0:	8b 40 04             	mov    0x4(%eax),%eax
c01053e3:	83 f8 03             	cmp    $0x3,%eax
c01053e6:	75 09                	jne    c01053f1 <vfs_write+0x1a>
c01053e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01053eb:	8b 40 38             	mov    0x38(%eax),%eax
c01053ee:	89 45 08             	mov    %eax,0x8(%ebp)

    // calculate block indices
    int block_id = off / PAGE_SIZE;
c01053f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053f4:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c01053fa:	85 c0                	test   %eax,%eax
c01053fc:	0f 48 c2             	cmovs  %edx,%eax
c01053ff:	c1 f8 0c             	sar    $0xc,%eax
c0105402:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int block_off= off % PAGE_SIZE;
c0105405:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105408:	89 c2                	mov    %eax,%edx
c010540a:	c1 fa 1f             	sar    $0x1f,%edx
c010540d:	c1 ea 14             	shr    $0x14,%edx
c0105410:	01 d0                	add    %edx,%eax
c0105412:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105417:	29 d0                	sub    %edx,%eax
c0105419:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // search first block
    vfs_buffer_info_t *info = inode->buffer;
c010541c:	8b 45 08             	mov    0x8(%ebp),%eax
c010541f:	8b 40 38             	mov    0x38(%eax),%eax
c0105422:	89 45 dc             	mov    %eax,-0x24(%ebp)
    vfs_buffer_block_t *block = NULL;
c0105425:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    iterator_t it = iterator_create(info->blocks);
c010542c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010542f:	8b 50 10             	mov    0x10(%eax),%edx
c0105432:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0105435:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105439:	89 04 24             	mov    %eax,(%esp)
c010543c:	e8 06 d4 ff ff       	call   c0102847 <iterator_create>
c0105441:	83 ec 04             	sub    $0x4,%esp

    int i,found = 0;
c0105444:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    for(i = 0; i < info->num_blocks; i++)
c010544b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105452:	eb 2e                	jmp    c0105482 <vfs_write+0xab>
    {
        block = (vfs_buffer_block_t*) it.current->element;
c0105454:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105457:	8b 40 08             	mov    0x8(%eax),%eax
c010545a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(block->block_id == block_id)
c010545d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105460:	8b 50 04             	mov    0x4(%eax),%edx
c0105463:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105466:	39 c2                	cmp    %eax,%edx
c0105468:	75 09                	jne    c0105473 <vfs_write+0x9c>
        {
            found = 1;
c010546a:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
            break;
c0105471:	eb 1a                	jmp    c010548d <vfs_write+0xb6>
        }

        list_next(&it);
c0105473:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0105476:	89 04 24             	mov    %eax,(%esp)
c0105479:	e8 b7 d4 ff ff       	call   c0102935 <list_next>
    vfs_buffer_info_t *info = inode->buffer;
    vfs_buffer_block_t *block = NULL;
    iterator_t it = iterator_create(info->blocks);

    int i,found = 0;
    for(i = 0; i < info->num_blocks; i++)
c010547e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105482:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105485:	8b 40 14             	mov    0x14(%eax),%eax
c0105488:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010548b:	7f c7                	jg     c0105454 <vfs_write+0x7d>
        }

        list_next(&it);
    }

    uint8_t *data = (uint8_t*) buffer;
c010548d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105490:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int index = block_off;
c0105493:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105496:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // go through all bytes...
    for(i = 0; i < bytes; i++)
c0105499:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01054a0:	e9 cd 00 00 00       	jmp    c0105572 <vfs_write+0x19b>
    {
        // if the block ends, go to the next
        if(index >= VFS_BLOCK_SIZE)
c01054a5:	81 7d e4 ff 0f 00 00 	cmpl   $0xfff,-0x1c(%ebp)
c01054ac:	7e 3a                	jle    c01054e8 <vfs_write+0x111>
        {
            block_id++;
c01054ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            if(block_id >= info->num_blocks)
c01054b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01054b5:	8b 40 14             	mov    0x14(%eax),%eax
c01054b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01054bb:	7f 09                	jg     c01054c6 <vfs_write+0xef>
            {
                found = 0;
c01054bd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01054c4:	eb 22                	jmp    c01054e8 <vfs_write+0x111>
            }
            else
            {
                list_next(&it);
c01054c6:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01054c9:	89 04 24             	mov    %eax,(%esp)
c01054cc:	e8 64 d4 ff ff       	call   c0102935 <list_next>
                block = (vfs_buffer_block_t*) it.current->element;
c01054d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01054d4:	8b 40 08             	mov    0x8(%eax),%eax
c01054d7:	89 45 f0             	mov    %eax,-0x10(%ebp)

                found = 1;
c01054da:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
                index = 0;
c01054e1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            }
        }

        // if nothing found, create a new block
        if(! found)
c01054e8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01054ec:	75 65                	jne    c0105553 <vfs_write+0x17c>
        {
            block = malloc(sizeof(vfs_buffer_block_t));
c01054ee:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01054f5:	e8 ac 81 00 00       	call   c010d6a6 <malloc>
c01054fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
            block->base = malloc(VFS_BLOCK_SIZE);
c01054fd:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0105504:	e8 9d 81 00 00       	call   c010d6a6 <malloc>
c0105509:	89 c2                	mov    %eax,%edx
c010550b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010550e:	89 10                	mov    %edx,(%eax)
            block->block_id = info->num_blocks++;
c0105510:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105513:	8b 40 14             	mov    0x14(%eax),%eax
c0105516:	89 c1                	mov    %eax,%ecx
c0105518:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010551b:	89 4a 04             	mov    %ecx,0x4(%edx)
c010551e:	8d 50 01             	lea    0x1(%eax),%edx
c0105521:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105524:	89 50 14             	mov    %edx,0x14(%eax)
            list_push_back(info->blocks, block);
c0105527:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010552a:	8b 40 10             	mov    0x10(%eax),%eax
c010552d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105530:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105534:	89 04 24             	mov    %eax,(%esp)
c0105537:	e8 26 d1 ff ff       	call   c0102662 <list_push_back>

            block_id = block->block_id;
c010553c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010553f:	8b 40 04             	mov    0x4(%eax),%eax
c0105542:	89 45 f4             	mov    %eax,-0xc(%ebp)

            found = 1;
c0105545:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
            index = 0;
c010554c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }

        // copy data
        block->base[index++] = data[i];
c0105553:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105556:	8b 10                	mov    (%eax),%edx
c0105558:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010555b:	01 c2                	add    %eax,%edx
c010555d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0105560:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105563:	01 c8                	add    %ecx,%eax
c0105565:	0f b6 00             	movzbl (%eax),%eax
c0105568:	88 02                	mov    %al,(%edx)
c010556a:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)

    uint8_t *data = (uint8_t*) buffer;
    int index = block_off;

    // go through all bytes...
    for(i = 0; i < bytes; i++)
c010556e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105572:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105575:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105578:	0f 8c 27 ff ff ff    	jl     c01054a5 <vfs_write+0xce>
        // copy data
        block->base[index++] = data[i];
    }

    // increase length
    if( (off + bytes) > inode->length)
c010557e:	8b 45 14             	mov    0x14(%ebp),%eax
c0105581:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105584:	01 d0                	add    %edx,%eax
c0105586:	89 c2                	mov    %eax,%edx
c0105588:	8b 45 08             	mov    0x8(%ebp),%eax
c010558b:	8b 40 08             	mov    0x8(%eax),%eax
c010558e:	39 c2                	cmp    %eax,%edx
c0105590:	76 1e                	jbe    c01055b0 <vfs_write+0x1d9>
    {
        inode->length = off + bytes;
c0105592:	8b 45 14             	mov    0x14(%ebp),%eax
c0105595:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105598:	01 d0                	add    %edx,%eax
c010559a:	89 c2                	mov    %eax,%edx
c010559c:	8b 45 08             	mov    0x8(%ebp),%eax
c010559f:	89 50 08             	mov    %edx,0x8(%eax)
        inode->stat.st_size = inode->length;
c01055a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01055a5:	8b 40 08             	mov    0x8(%eax),%eax
c01055a8:	89 c2                	mov    %eax,%edx
c01055aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01055ad:	89 50 20             	mov    %edx,0x20(%eax)
    }

    // pipes send an event signal
    if(inode->type == VFS_PIPE)
c01055b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01055b3:	8b 40 04             	mov    0x4(%eax),%eax
c01055b6:	83 f8 01             	cmp    $0x1,%eax
c01055b9:	75 24                	jne    c01055df <vfs_write+0x208>
    {
        send_event(info->event_id);
c01055bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01055be:	8b 40 08             	mov    0x8(%eax),%eax
c01055c1:	89 04 24             	mov    %eax,(%esp)
c01055c4:	e8 eb 4e 00 00       	call   c010a4b4 <send_event>
        info->event_id = get_new_event_ID();
c01055c9:	e8 87 50 00 00       	call   c010a655 <get_new_event_ID>
c01055ce:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01055d1:	89 42 08             	mov    %eax,0x8(%edx)
        launch_pipe_handlers(info);
c01055d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01055d7:	89 04 24             	mov    %eax,(%esp)
c01055da:	e8 da 16 00 00       	call   c0106cb9 <launch_pipe_handlers>
    }

    return bytes;
c01055df:	8b 45 14             	mov    0x14(%ebp),%eax
}
c01055e2:	c9                   	leave  
c01055e3:	c3                   	ret    

c01055e4 <vfs_read>:
 * @param offset the offset from the node
 *
 * @return number of bytes
 */
int vfs_read(vfs_inode_t *inode, int offset, void *buffer, int bytes)
{
c01055e4:	55                   	push   %ebp
c01055e5:	89 e5                	mov    %esp,%ebp
c01055e7:	83 ec 48             	sub    $0x48,%esp
    GET_INODE(inode);
c01055ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01055ed:	8b 40 04             	mov    0x4(%eax),%eax
c01055f0:	83 f8 03             	cmp    $0x3,%eax
c01055f3:	75 09                	jne    c01055fe <vfs_read+0x1a>
c01055f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01055f8:	8b 40 38             	mov    0x38(%eax),%eax
c01055fb:	89 45 08             	mov    %eax,0x8(%ebp)

    if(inode->length >= (offset+bytes))
c01055fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0105601:	8b 50 08             	mov    0x8(%eax),%edx
c0105604:	8b 45 14             	mov    0x14(%ebp),%eax
c0105607:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010560a:	01 c8                	add    %ecx,%eax
c010560c:	39 c2                	cmp    %eax,%edx
c010560e:	0f 82 06 01 00 00    	jb     c010571a <vfs_read+0x136>
    {
        int block_id = offset / PAGE_SIZE;
c0105614:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105617:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c010561d:	85 c0                	test   %eax,%eax
c010561f:	0f 48 c2             	cmovs  %edx,%eax
c0105622:	c1 f8 0c             	sar    $0xc,%eax
c0105625:	89 45 f4             	mov    %eax,-0xc(%ebp)
        int block_off= offset % PAGE_SIZE;
c0105628:	8b 45 0c             	mov    0xc(%ebp),%eax
c010562b:	89 c2                	mov    %eax,%edx
c010562d:	c1 fa 1f             	sar    $0x1f,%edx
c0105630:	c1 ea 14             	shr    $0x14,%edx
c0105633:	01 d0                	add    %edx,%eax
c0105635:	25 ff 0f 00 00       	and    $0xfff,%eax
c010563a:	29 d0                	sub    %edx,%eax
c010563c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // search first block
        vfs_buffer_info_t *info = inode->buffer;
c010563f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105642:	8b 40 38             	mov    0x38(%eax),%eax
c0105645:	89 45 e0             	mov    %eax,-0x20(%ebp)
        vfs_buffer_block_t *block = NULL;
c0105648:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
        iterator_t it = iterator_create(info->blocks);
c010564f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105652:	8b 50 10             	mov    0x10(%eax),%edx
c0105655:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0105658:	89 54 24 04          	mov    %edx,0x4(%esp)
c010565c:	89 04 24             	mov    %eax,(%esp)
c010565f:	e8 e3 d1 ff ff       	call   c0102847 <iterator_create>
c0105664:	83 ec 04             	sub    $0x4,%esp

        int i;
        for(i = 0; i < info->num_blocks; i++)
c0105667:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010566e:	eb 25                	jmp    c0105695 <vfs_read+0xb1>
        {
            block = (vfs_buffer_block_t*) it.current->element;
c0105670:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105673:	8b 40 08             	mov    0x8(%eax),%eax
c0105676:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(block->block_id == block_id)
c0105679:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010567c:	8b 50 04             	mov    0x4(%eax),%edx
c010567f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105682:	39 c2                	cmp    %eax,%edx
c0105684:	74 1c                	je     c01056a2 <vfs_read+0xbe>
            {
                break;
            }

            list_next(&it);
c0105686:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0105689:	89 04 24             	mov    %eax,(%esp)
c010568c:	e8 a4 d2 ff ff       	call   c0102935 <list_next>
        vfs_buffer_info_t *info = inode->buffer;
        vfs_buffer_block_t *block = NULL;
        iterator_t it = iterator_create(info->blocks);

        int i;
        for(i = 0; i < info->num_blocks; i++)
c0105691:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105695:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105698:	8b 40 14             	mov    0x14(%eax),%eax
c010569b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010569e:	7f d0                	jg     c0105670 <vfs_read+0x8c>
c01056a0:	eb 01                	jmp    c01056a3 <vfs_read+0xbf>
        {
            block = (vfs_buffer_block_t*) it.current->element;
            if(block->block_id == block_id)
            {
                break;
c01056a2:	90                   	nop
            }

            list_next(&it);
        }

        uint8_t *data = (uint8_t*) buffer;
c01056a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01056a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
        int index = block_off;
c01056a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056ac:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // go through all bytes...
        for(i = 0; i < bytes; i++)
c01056af:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01056b6:	eb 52                	jmp    c010570a <vfs_read+0x126>
        {
            // if the block ends, go to the next
            if(index >= VFS_BLOCK_SIZE)
c01056b8:	81 7d e8 ff 0f 00 00 	cmpl   $0xfff,-0x18(%ebp)
c01056bf:	7e 2a                	jle    c01056eb <vfs_read+0x107>
            {
                block_id++;
c01056c1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
                if(block_id >= info->num_blocks)
c01056c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01056c8:	8b 40 14             	mov    0x14(%eax),%eax
c01056cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01056ce:	7e 44                	jle    c0105714 <vfs_read+0x130>
                {
                    break;
                }
                else
                {
                    list_next(&it);
c01056d0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01056d3:	89 04 24             	mov    %eax,(%esp)
c01056d6:	e8 5a d2 ff ff       	call   c0102935 <list_next>
                    block = (vfs_buffer_block_t*) it.current->element;
c01056db:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01056de:	8b 40 08             	mov    0x8(%eax),%eax
c01056e1:	89 45 f0             	mov    %eax,-0x10(%ebp)

                    index = 0;
c01056e4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
                }
            }

            // copy data
            data[i] = block->base[index++];
c01056eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01056ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01056f1:	01 c2                	add    %eax,%edx
c01056f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056f6:	8b 08                	mov    (%eax),%ecx
c01056f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056fb:	01 c8                	add    %ecx,%eax
c01056fd:	0f b6 00             	movzbl (%eax),%eax
c0105700:	88 02                	mov    %al,(%edx)
c0105702:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)

        uint8_t *data = (uint8_t*) buffer;
        int index = block_off;

        // go through all bytes...
        for(i = 0; i < bytes; i++)
c0105706:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010570a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010570d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105710:	7c a6                	jl     c01056b8 <vfs_read+0xd4>
c0105712:	eb 01                	jmp    c0105715 <vfs_read+0x131>
            if(index >= VFS_BLOCK_SIZE)
            {
                block_id++;
                if(block_id >= info->num_blocks)
                {
                    break;
c0105714:	90                   	nop

            // copy data
            data[i] = block->base[index++];
        }

        return i;
c0105715:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105718:	eb 05                	jmp    c010571f <vfs_read+0x13b>
    }

    return 0;
c010571a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010571f:	c9                   	leave  
c0105720:	c3                   	ret    

c0105721 <vfs_stat>:
 * @param buffer buffer
 *
 * @return _SUCCESS
 */
int vfs_stat(vfs_inode_t *node, struct stat *buffer)
{
c0105721:	55                   	push   %ebp
c0105722:	89 e5                	mov    %esp,%ebp
c0105724:	83 ec 10             	sub    $0x10,%esp
    uint8_t *node_stat = (uint8_t*) &node->stat;
c0105727:	8b 45 08             	mov    0x8(%ebp),%eax
c010572a:	83 c0 0c             	add    $0xc,%eax
c010572d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *buf = (uint8_t*) buffer;
c0105730:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105733:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int i = 0;
c0105736:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (i++ < sizeof(struct stat))
c010573d:	eb 13                	jmp    c0105752 <vfs_stat+0x31>
    {
        *buf++ = *node_stat++;
c010573f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105742:	0f b6 10             	movzbl (%eax),%edx
c0105745:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105748:	88 10                	mov    %dl,(%eax)
c010574a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c010574e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
int vfs_stat(vfs_inode_t *node, struct stat *buffer)
{
    uint8_t *node_stat = (uint8_t*) &node->stat;
    uint8_t *buf = (uint8_t*) buffer;
    int i = 0;
    while (i++ < sizeof(struct stat))
c0105752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105755:	83 f8 2b             	cmp    $0x2b,%eax
c0105758:	0f 96 c0             	setbe  %al
c010575b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010575f:	84 c0                	test   %al,%al
c0105761:	75 dc                	jne    c010573f <vfs_stat+0x1e>
    {
        *buf++ = *node_stat++;
    }

    return 0;
c0105763:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105768:	c9                   	leave  
c0105769:	c3                   	ret    

c010576a <vfs_access>:
 * @param modus access to check
 *
 * @return
 */
int vfs_access(vfs_inode_t *node, mode_t modus, uid_t uid, gid_t gid)
{
c010576a:	55                   	push   %ebp
c010576b:	89 e5                	mov    %esp,%ebp
    if (node->stat.st_uid == uid)
c010576d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105770:	8b 40 18             	mov    0x18(%eax),%eax
c0105773:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105776:	75 6f                	jne    c01057e7 <vfs_access+0x7d>
    {
        if ((modus & R_OK) &&
c0105778:	8b 45 0c             	mov    0xc(%ebp),%eax
c010577b:	83 e0 01             	and    $0x1,%eax
c010577e:	85 c0                	test   %eax,%eax
c0105780:	74 17                	je     c0105799 <vfs_access+0x2f>
                !(node->stat.st_mode & S_IRUSR))
c0105782:	8b 45 08             	mov    0x8(%ebp),%eax
c0105785:	8b 40 0c             	mov    0xc(%eax),%eax
c0105788:	83 e0 40             	and    $0x40,%eax
 */
int vfs_access(vfs_inode_t *node, mode_t modus, uid_t uid, gid_t gid)
{
    if (node->stat.st_uid == uid)
    {
        if ((modus & R_OK) &&
c010578b:	85 c0                	test   %eax,%eax
c010578d:	75 0a                	jne    c0105799 <vfs_access+0x2f>
                !(node->stat.st_mode & S_IRUSR))
            return -1;
c010578f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0105794:	e9 24 01 00 00       	jmp    c01058bd <vfs_access+0x153>
        if ((modus & W_OK) &&
c0105799:	8b 45 0c             	mov    0xc(%ebp),%eax
c010579c:	83 e0 02             	and    $0x2,%eax
c010579f:	85 c0                	test   %eax,%eax
c01057a1:	74 19                	je     c01057bc <vfs_access+0x52>
                !(node->stat.st_mode & S_IWUSR))
c01057a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01057a6:	8b 40 0c             	mov    0xc(%eax),%eax
c01057a9:	25 80 00 00 00       	and    $0x80,%eax
    if (node->stat.st_uid == uid)
    {
        if ((modus & R_OK) &&
                !(node->stat.st_mode & S_IRUSR))
            return -1;
        if ((modus & W_OK) &&
c01057ae:	85 c0                	test   %eax,%eax
c01057b0:	75 0a                	jne    c01057bc <vfs_access+0x52>
                !(node->stat.st_mode & S_IWUSR))
            return -1;
c01057b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01057b7:	e9 01 01 00 00       	jmp    c01058bd <vfs_access+0x153>
        if ((modus & X_OK) &&
c01057bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057bf:	83 e0 04             	and    $0x4,%eax
c01057c2:	85 c0                	test   %eax,%eax
c01057c4:	0f 84 ee 00 00 00    	je     c01058b8 <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXUSR))
c01057ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01057cd:	8b 40 0c             	mov    0xc(%eax),%eax
c01057d0:	25 00 01 00 00       	and    $0x100,%eax
                !(node->stat.st_mode & S_IRUSR))
            return -1;
        if ((modus & W_OK) &&
                !(node->stat.st_mode & S_IWUSR))
            return -1;
        if ((modus & X_OK) &&
c01057d5:	85 c0                	test   %eax,%eax
c01057d7:	0f 85 db 00 00 00    	jne    c01058b8 <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXUSR))
            return -1;
c01057dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01057e2:	e9 d6 00 00 00       	jmp    c01058bd <vfs_access+0x153>
    }
    else if (node->stat.st_gid == gid)
c01057e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01057ea:	8b 40 1c             	mov    0x1c(%eax),%eax
c01057ed:	3b 45 14             	cmp    0x14(%ebp),%eax
c01057f0:	75 66                	jne    c0105858 <vfs_access+0xee>
    {
        if ((modus & R_OK) &&
c01057f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057f5:	83 e0 01             	and    $0x1,%eax
c01057f8:	85 c0                	test   %eax,%eax
c01057fa:	74 19                	je     c0105815 <vfs_access+0xab>
                !(node->stat.st_mode & S_IRGRP))
c01057fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01057ff:	8b 40 0c             	mov    0xc(%eax),%eax
c0105802:	25 00 02 00 00       	and    $0x200,%eax
                !(node->stat.st_mode & S_IXUSR))
            return -1;
    }
    else if (node->stat.st_gid == gid)
    {
        if ((modus & R_OK) &&
c0105807:	85 c0                	test   %eax,%eax
c0105809:	75 0a                	jne    c0105815 <vfs_access+0xab>
                !(node->stat.st_mode & S_IRGRP))
            return -1;
c010580b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0105810:	e9 a8 00 00 00       	jmp    c01058bd <vfs_access+0x153>
        if ((modus & W_OK) &&
c0105815:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105818:	83 e0 02             	and    $0x2,%eax
c010581b:	85 c0                	test   %eax,%eax
c010581d:	74 19                	je     c0105838 <vfs_access+0xce>
                !(node->stat.st_mode & S_IWGRP))
c010581f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105822:	8b 40 0c             	mov    0xc(%eax),%eax
c0105825:	25 00 04 00 00       	and    $0x400,%eax
    else if (node->stat.st_gid == gid)
    {
        if ((modus & R_OK) &&
                !(node->stat.st_mode & S_IRGRP))
            return -1;
        if ((modus & W_OK) &&
c010582a:	85 c0                	test   %eax,%eax
c010582c:	75 0a                	jne    c0105838 <vfs_access+0xce>
                !(node->stat.st_mode & S_IWGRP))
            return -1;
c010582e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0105833:	e9 85 00 00 00       	jmp    c01058bd <vfs_access+0x153>
        if ((modus & X_OK) &&
c0105838:	8b 45 0c             	mov    0xc(%ebp),%eax
c010583b:	83 e0 04             	and    $0x4,%eax
c010583e:	85 c0                	test   %eax,%eax
c0105840:	74 76                	je     c01058b8 <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXGRP))
c0105842:	8b 45 08             	mov    0x8(%ebp),%eax
c0105845:	8b 40 0c             	mov    0xc(%eax),%eax
c0105848:	25 00 08 00 00       	and    $0x800,%eax
                !(node->stat.st_mode & S_IRGRP))
            return -1;
        if ((modus & W_OK) &&
                !(node->stat.st_mode & S_IWGRP))
            return -1;
        if ((modus & X_OK) &&
c010584d:	85 c0                	test   %eax,%eax
c010584f:	75 67                	jne    c01058b8 <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXGRP))
            return -1;
c0105851:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0105856:	eb 65                	jmp    c01058bd <vfs_access+0x153>
    }
    else
    {
        if ((modus & R_OK) &&
c0105858:	8b 45 0c             	mov    0xc(%ebp),%eax
c010585b:	83 e0 01             	and    $0x1,%eax
c010585e:	85 c0                	test   %eax,%eax
c0105860:	74 16                	je     c0105878 <vfs_access+0x10e>
                !(node->stat.st_mode & S_IROTH))
c0105862:	8b 45 08             	mov    0x8(%ebp),%eax
c0105865:	8b 40 0c             	mov    0xc(%eax),%eax
c0105868:	25 00 10 00 00       	and    $0x1000,%eax
                !(node->stat.st_mode & S_IXGRP))
            return -1;
    }
    else
    {
        if ((modus & R_OK) &&
c010586d:	85 c0                	test   %eax,%eax
c010586f:	75 07                	jne    c0105878 <vfs_access+0x10e>
                !(node->stat.st_mode & S_IROTH))
            return -1;
c0105871:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0105876:	eb 45                	jmp    c01058bd <vfs_access+0x153>
        if ((modus & W_OK) &&
c0105878:	8b 45 0c             	mov    0xc(%ebp),%eax
c010587b:	83 e0 02             	and    $0x2,%eax
c010587e:	85 c0                	test   %eax,%eax
c0105880:	74 16                	je     c0105898 <vfs_access+0x12e>
                !(node->stat.st_mode & S_IWOTH))
c0105882:	8b 45 08             	mov    0x8(%ebp),%eax
c0105885:	8b 40 0c             	mov    0xc(%eax),%eax
c0105888:	25 00 20 00 00       	and    $0x2000,%eax
    else
    {
        if ((modus & R_OK) &&
                !(node->stat.st_mode & S_IROTH))
            return -1;
        if ((modus & W_OK) &&
c010588d:	85 c0                	test   %eax,%eax
c010588f:	75 07                	jne    c0105898 <vfs_access+0x12e>
                !(node->stat.st_mode & S_IWOTH))
            return -1;
c0105891:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0105896:	eb 25                	jmp    c01058bd <vfs_access+0x153>
        if ((modus & X_OK) &&
c0105898:	8b 45 0c             	mov    0xc(%ebp),%eax
c010589b:	83 e0 04             	and    $0x4,%eax
c010589e:	85 c0                	test   %eax,%eax
c01058a0:	74 16                	je     c01058b8 <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXOTH))
c01058a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01058a5:	8b 40 0c             	mov    0xc(%eax),%eax
c01058a8:	25 00 40 00 00       	and    $0x4000,%eax
                !(node->stat.st_mode & S_IROTH))
            return -1;
        if ((modus & W_OK) &&
                !(node->stat.st_mode & S_IWOTH))
            return -1;
        if ((modus & X_OK) &&
c01058ad:	85 c0                	test   %eax,%eax
c01058af:	75 07                	jne    c01058b8 <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXOTH))
            return -1;
c01058b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01058b6:	eb 05                	jmp    c01058bd <vfs_access+0x153>
    }

    return 0;
c01058b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01058bd:	5d                   	pop    %ebp
c01058be:	c3                   	ret    

c01058bf <vfs_lookup_path>:
 *
 * @param path
 * @return inode
 */
vfs_inode_t *vfs_lookup_path(char *path)
{
c01058bf:	55                   	push   %ebp
c01058c0:	89 e5                	mov    %esp,%ebp
c01058c2:	83 ec 48             	sub    $0x48,%esp
    vfs_inode_t *parent = root;
c01058c5:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c01058ca:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(path[0] != '/')
c01058cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01058d0:	0f b6 00             	movzbl (%eax),%eax
c01058d3:	3c 2f                	cmp    $0x2f,%al
c01058d5:	74 10                	je     c01058e7 <vfs_lookup_path+0x28>
    {
        parent = current_thread->process->cwd;
c01058d7:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01058dc:	8b 40 04             	mov    0x4(%eax),%eax
c01058df:	8b 40 18             	mov    0x18(%eax),%eax
c01058e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058e5:	eb 04                	jmp    c01058eb <vfs_lookup_path+0x2c>
    }
    else
    {
        path++;
c01058e7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    }

    if(path[0] == '\0')
c01058eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01058ee:	0f b6 00             	movzbl (%eax),%eax
c01058f1:	84 c0                	test   %al,%al
c01058f3:	75 08                	jne    c01058fd <vfs_lookup_path+0x3e>
        return parent;
c01058f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058f8:	e9 f1 00 00 00       	jmp    c01059ee <vfs_lookup_path+0x12f>

    int len = strlen(path);
c01058fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105900:	89 04 24             	mov    %eax,(%esp)
c0105903:	e8 21 d1 ff ff       	call   c0102a29 <strlen>
c0105908:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(path[len-1] == '/')
c010590b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010590e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105911:	8b 45 08             	mov    0x8(%ebp),%eax
c0105914:	01 d0                	add    %edx,%eax
c0105916:	0f b6 00             	movzbl (%eax),%eax
c0105919:	3c 2f                	cmp    $0x2f,%al
c010591b:	75 0e                	jne    c010592b <vfs_lookup_path+0x6c>
    {
        path[len-1] = '\0';
c010591d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105920:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105923:	8b 45 08             	mov    0x8(%ebp),%eax
c0105926:	01 d0                	add    %edx,%eax
c0105928:	c6 00 00             	movb   $0x0,(%eax)
    }

    char delimiter[] = "/";
c010592b:	66 c7 45 de 2f 00    	movw   $0x2f,-0x22(%ebp)
    char *str = (char*) strtok(path, delimiter);
c0105931:	8d 45 de             	lea    -0x22(%ebp),%eax
c0105934:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105938:	8b 45 08             	mov    0x8(%ebp),%eax
c010593b:	89 04 24             	mov    %eax,(%esp)
c010593e:	e8 a7 d3 ff ff       	call   c0102cea <strtok>
c0105943:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while(str != NULL)
c0105946:	e9 96 00 00 00       	jmp    c01059e1 <vfs_lookup_path+0x122>
    {
        int num = parent->length / sizeof(vfs_dentry_t);
c010594b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010594e:	8b 40 08             	mov    0x8(%eax),%eax
c0105951:	c1 e8 03             	shr    $0x3,%eax
c0105954:	89 45 e0             	mov    %eax,-0x20(%ebp)
        int found = 0;
c0105957:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
        int i;
        for(i = 0; i < num; i++)
c010595e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105965:	eb 4f                	jmp    c01059b6 <vfs_lookup_path+0xf7>
        {
            vfs_dentry_t entry;
            vfs_read(parent, i*sizeof(vfs_dentry_t), &entry, sizeof(vfs_dentry_t));
c0105967:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010596a:	c1 e0 03             	shl    $0x3,%eax
c010596d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0105974:	00 
c0105975:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0105978:	89 54 24 08          	mov    %edx,0x8(%esp)
c010597c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105980:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105983:	89 04 24             	mov    %eax,(%esp)
c0105986:	e8 59 fc ff ff       	call   c01055e4 <vfs_read>
            if(strcmp(str, entry.inode->name) == 0)
c010598b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010598e:	8b 00                	mov    (%eax),%eax
c0105990:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105997:	89 04 24             	mov    %eax,(%esp)
c010599a:	e8 ce d1 ff ff       	call   c0102b6d <strcmp>
c010599f:	85 c0                	test   %eax,%eax
c01059a1:	75 0f                	jne    c01059b2 <vfs_lookup_path+0xf3>
            {
                parent = entry.inode;
c01059a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01059a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
                found = 1;
c01059a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c01059b0:	eb 0c                	jmp    c01059be <vfs_lookup_path+0xff>
    while(str != NULL)
    {
        int num = parent->length / sizeof(vfs_dentry_t);
        int found = 0;
        int i;
        for(i = 0; i < num; i++)
c01059b2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c01059b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059b9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01059bc:	7c a9                	jl     c0105967 <vfs_lookup_path+0xa8>
                found = 1;
                break;
            }
        }

        if(!found)
c01059be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01059c2:	75 07                	jne    c01059cb <vfs_lookup_path+0x10c>
        {
            return NULL;
c01059c4:	b8 00 00 00 00       	mov    $0x0,%eax
c01059c9:	eb 23                	jmp    c01059ee <vfs_lookup_path+0x12f>
        }
        else
        {
            str = strtok(NULL, delimiter);
c01059cb:	8d 45 de             	lea    -0x22(%ebp),%eax
c01059ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059d2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01059d9:	e8 0c d3 ff ff       	call   c0102cea <strtok>
c01059de:	89 45 f0             	mov    %eax,-0x10(%ebp)
        path[len-1] = '\0';
    }

    char delimiter[] = "/";
    char *str = (char*) strtok(path, delimiter);
    while(str != NULL)
c01059e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01059e5:	0f 85 60 ff ff ff    	jne    c010594b <vfs_lookup_path+0x8c>
        {
            str = strtok(NULL, delimiter);
        }
    }

    return parent;
c01059eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01059ee:	c9                   	leave  
c01059ef:	c3                   	ret    

c01059f0 <vfs_create_path>:
 * @param uid
 * @param gid
 * @return inode
 */
vfs_inode_t *vfs_create_path(char *path, mode_t mode, uid_t uid, gid_t gid)
{
c01059f0:	55                   	push   %ebp
c01059f1:	89 e5                	mov    %esp,%ebp
c01059f3:	83 ec 58             	sub    $0x58,%esp
    vfs_inode_t *parent = root;
c01059f6:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c01059fb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(path[0] != '/')
c01059fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a01:	0f b6 00             	movzbl (%eax),%eax
c0105a04:	3c 2f                	cmp    $0x2f,%al
c0105a06:	74 10                	je     c0105a18 <vfs_create_path+0x28>
    {
        parent = current_thread->process->cwd;
c0105a08:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105a0d:	8b 40 04             	mov    0x4(%eax),%eax
c0105a10:	8b 40 18             	mov    0x18(%eax),%eax
c0105a13:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105a16:	eb 04                	jmp    c0105a1c <vfs_create_path+0x2c>
    }
    else
    {
        path++;
c0105a18:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    }

    if(path[0] == '\0')
c0105a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a1f:	0f b6 00             	movzbl (%eax),%eax
c0105a22:	84 c0                	test   %al,%al
c0105a24:	75 08                	jne    c0105a2e <vfs_create_path+0x3e>
        return parent;
c0105a26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a29:	e9 58 01 00 00       	jmp    c0105b86 <vfs_create_path+0x196>

    int len = strlen(path);
c0105a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a31:	89 04 24             	mov    %eax,(%esp)
c0105a34:	e8 f0 cf ff ff       	call   c0102a29 <strlen>
c0105a39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(path[len-1] == '/')
c0105a3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a3f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105a42:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a45:	01 d0                	add    %edx,%eax
c0105a47:	0f b6 00             	movzbl (%eax),%eax
c0105a4a:	3c 2f                	cmp    $0x2f,%al
c0105a4c:	75 0e                	jne    c0105a5c <vfs_create_path+0x6c>
    {
        path[len-1] = '\0';
c0105a4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a51:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a57:	01 d0                	add    %edx,%eax
c0105a59:	c6 00 00             	movb   $0x0,(%eax)
    }

    char delimiter[] = "/";
c0105a5c:	66 c7 45 d6 2f 00    	movw   $0x2f,-0x2a(%ebp)
    char *str = (char*) strtok(path, delimiter);
c0105a62:	8d 45 d6             	lea    -0x2a(%ebp),%eax
c0105a65:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a69:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a6c:	89 04 24             	mov    %eax,(%esp)
c0105a6f:	e8 76 d2 ff ff       	call   c0102cea <strtok>
c0105a74:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while(str != NULL)
c0105a77:	e9 fd 00 00 00       	jmp    c0105b79 <vfs_create_path+0x189>
    {
        int num = parent->length / sizeof(vfs_dentry_t);
c0105a7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a7f:	8b 40 08             	mov    0x8(%eax),%eax
c0105a82:	c1 e8 03             	shr    $0x3,%eax
c0105a85:	89 45 e0             	mov    %eax,-0x20(%ebp)
        int found = 0;
c0105a88:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
        int i;
        for(i = 0; i < num; i++)
c0105a8f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105a96:	eb 4f                	jmp    c0105ae7 <vfs_create_path+0xf7>
        {
            vfs_dentry_t entry;
            vfs_read(parent, i*sizeof(vfs_dentry_t), &entry, sizeof(vfs_dentry_t));
c0105a98:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a9b:	c1 e0 03             	shl    $0x3,%eax
c0105a9e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0105aa5:	00 
c0105aa6:	8d 55 cc             	lea    -0x34(%ebp),%edx
c0105aa9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105aad:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ab4:	89 04 24             	mov    %eax,(%esp)
c0105ab7:	e8 28 fb ff ff       	call   c01055e4 <vfs_read>
            if(strcmp(str, entry.inode->name) == 0)
c0105abc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105abf:	8b 00                	mov    (%eax),%eax
c0105ac1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ac8:	89 04 24             	mov    %eax,(%esp)
c0105acb:	e8 9d d0 ff ff       	call   c0102b6d <strcmp>
c0105ad0:	85 c0                	test   %eax,%eax
c0105ad2:	75 0f                	jne    c0105ae3 <vfs_create_path+0xf3>
            {
                parent = entry.inode;
c0105ad4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105ad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
                found = 1;
c0105ada:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0105ae1:	eb 0c                	jmp    c0105aef <vfs_create_path+0xff>
    while(str != NULL)
    {
        int num = parent->length / sizeof(vfs_dentry_t);
        int found = 0;
        int i;
        for(i = 0; i < num; i++)
c0105ae3:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0105ae7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105aea:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105aed:	7c a9                	jl     c0105a98 <vfs_create_path+0xa8>
                found = 1;
                break;
            }
        }

        char *new_str = strtok(NULL, delimiter);
c0105aef:	8d 45 d6             	lea    -0x2a(%ebp),%eax
c0105af2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105af6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0105afd:	e8 e8 d1 ff ff       	call   c0102cea <strtok>
c0105b02:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if(!found)
c0105b05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105b09:	75 68                	jne    c0105b73 <vfs_create_path+0x183>
        {
            int n_mode = mode;
c0105b0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b0e:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if(new_str != NULL)
c0105b11:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105b15:	74 04                	je     c0105b1b <vfs_create_path+0x12b>
            {
                mode |= S_IFDIR;
c0105b17:	83 4d 0c 05          	orl    $0x5,0xc(%ebp)
            }

            if(vfs_access(parent, W_OK, uid, gid) == 0)
c0105b1b:	8b 45 14             	mov    0x14(%ebp),%eax
c0105b1e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105b22:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b25:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b29:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0105b30:	00 
c0105b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b34:	89 04 24             	mov    %eax,(%esp)
c0105b37:	e8 2e fc ff ff       	call   c010576a <vfs_access>
c0105b3c:	85 c0                	test   %eax,%eax
c0105b3e:	75 2c                	jne    c0105b6c <vfs_create_path+0x17c>
            {
                parent = vfs_create_inode(str, n_mode, parent, uid, gid);
c0105b40:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105b43:	8b 55 14             	mov    0x14(%ebp),%edx
c0105b46:	89 54 24 10          	mov    %edx,0x10(%esp)
c0105b4a:	8b 55 10             	mov    0x10(%ebp),%edx
c0105b4d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105b51:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105b54:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105b58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b5f:	89 04 24             	mov    %eax,(%esp)
c0105b62:	e8 a2 f6 ff ff       	call   c0105209 <vfs_create_inode>
c0105b67:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105b6a:	eb 07                	jmp    c0105b73 <vfs_create_path+0x183>
            }
            else
            {
                return NULL;
c0105b6c:	b8 00 00 00 00       	mov    $0x0,%eax
c0105b71:	eb 13                	jmp    c0105b86 <vfs_create_path+0x196>
            }
        }
        str = new_str;
c0105b73:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105b76:	89 45 f0             	mov    %eax,-0x10(%ebp)
        path[len-1] = '\0';
    }

    char delimiter[] = "/";
    char *str = (char*) strtok(path, delimiter);
    while(str != NULL)
c0105b79:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105b7d:	0f 85 f9 fe ff ff    	jne    c0105a7c <vfs_create_path+0x8c>
            }
        }
        str = new_str;
    }

    return parent;
c0105b83:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105b86:	c9                   	leave  
c0105b87:	c3                   	ret    

c0105b88 <vfs_debug_output_all>:

#ifdef VFS_DEBUG
void vfs_debug_output_all()
{
c0105b88:	55                   	push   %ebp
c0105b89:	89 e5                	mov    %esp,%ebp
c0105b8b:	83 ec 18             	sub    $0x18,%esp
    vfs_debug_output(root);
c0105b8e:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0105b93:	89 04 24             	mov    %eax,(%esp)
c0105b96:	e8 02 00 00 00       	call   c0105b9d <vfs_debug_output>
}
c0105b9b:	c9                   	leave  
c0105b9c:	c3                   	ret    

c0105b9d <vfs_debug_output>:

void vfs_debug_output(vfs_inode_t *start)
{
c0105b9d:	55                   	push   %ebp
c0105b9e:	89 e5                	mov    %esp,%ebp
c0105ba0:	83 ec 28             	sub    $0x28,%esp
    vfs_inode_t *current;

    int num = start->length / sizeof(vfs_dentry_t);
c0105ba3:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ba6:	8b 40 08             	mov    0x8(%eax),%eax
c0105ba9:	c1 e8 03             	shr    $0x3,%eax
c0105bac:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vfs_dentry_t *entries = malloc(start->length);
c0105baf:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bb2:	8b 40 08             	mov    0x8(%eax),%eax
c0105bb5:	89 04 24             	mov    %eax,(%esp)
c0105bb8:	e8 e9 7a 00 00       	call   c010d6a6 <malloc>
c0105bbd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vfs_read(start, 0, entries, start->length);
c0105bc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bc3:	8b 40 08             	mov    0x8(%eax),%eax
c0105bc6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105bca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105bcd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105bd1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105bd8:	00 
c0105bd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bdc:	89 04 24             	mov    %eax,(%esp)
c0105bdf:	e8 00 fa ff ff       	call   c01055e4 <vfs_read>

    int i;
    for(i = 0; i < num; i++)
c0105be4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0105beb:	e9 87 00 00 00       	jmp    c0105c77 <vfs_debug_output+0xda>
    {
        if(S_ISDIR(entries[i].inode->stat))
c0105bf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bf3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105bfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105bfd:	01 d0                	add    %edx,%eax
c0105bff:	8b 40 04             	mov    0x4(%eax),%eax
c0105c02:	8b 40 0c             	mov    0xc(%eax),%eax
c0105c05:	83 e0 05             	and    $0x5,%eax
c0105c08:	85 c0                	test   %eax,%eax
c0105c0a:	74 1c                	je     c0105c28 <vfs_debug_output+0x8b>
        {
            vfs_debug_output(entries[i].inode);
c0105c0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c0f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105c16:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c19:	01 d0                	add    %edx,%eax
c0105c1b:	8b 40 04             	mov    0x4(%eax),%eax
c0105c1e:	89 04 24             	mov    %eax,(%esp)
c0105c21:	e8 77 ff ff ff       	call   c0105b9d <vfs_debug_output>
c0105c26:	eb 4b                	jmp    c0105c73 <vfs_debug_output+0xd6>
        }
        else
        {
            current = entries[i].inode;
c0105c28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c2b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105c32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c35:	01 d0                	add    %edx,%eax
c0105c37:	8b 40 04             	mov    0x4(%eax),%eax
c0105c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)

            while(current != root)
c0105c3d:	eb 1e                	jmp    c0105c5d <vfs_debug_output+0xc0>
            {
                printf("%s in ", current->name);
c0105c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c42:	8b 00                	mov    (%eax),%eax
c0105c44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c48:	c7 04 24 99 18 11 c0 	movl   $0xc0111899,(%esp)
c0105c4f:	e8 29 d5 ff ff       	call   c010317d <printf>
                current = current->parent;
c0105c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c57:	8b 40 3c             	mov    0x3c(%eax),%eax
c0105c5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else
        {
            current = entries[i].inode;

            while(current != root)
c0105c5d:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0105c62:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0105c65:	75 d8                	jne    c0105c3f <vfs_debug_output+0xa2>
            {
                printf("%s in ", current->name);
                current = current->parent;
            }

            printf("root\n");
c0105c67:	c7 04 24 a0 18 11 c0 	movl   $0xc01118a0,(%esp)
c0105c6e:	e8 41 60 00 00       	call   c010bcb4 <puts>
    int num = start->length / sizeof(vfs_dentry_t);
    vfs_dentry_t *entries = malloc(start->length);
    vfs_read(start, 0, entries, start->length);

    int i;
    for(i = 0; i < num; i++)
c0105c73:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0105c77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c7a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0105c7d:	0f 8c 6d ff ff ff    	jl     c0105bf0 <vfs_debug_output+0x53>

            printf("root\n");
        }
    }

    free(entries);
c0105c83:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c86:	89 04 24             	mov    %eax,(%esp)
c0105c89:	e8 ff 7a 00 00       	call   c010d78d <free>
}
c0105c8e:	c9                   	leave  
c0105c8f:	c3                   	ret    

c0105c90 <get_fd>:
#endif

// Systemcalls

struct fd *get_fd(int fd)
{
c0105c90:	55                   	push   %ebp
c0105c91:	89 e5                	mov    %esp,%ebp
c0105c93:	83 ec 10             	sub    $0x10,%esp
    struct fd *desc = NULL;
c0105c96:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct list_node *node = current_thread->process->files->head->next;
c0105c9d:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105ca2:	8b 40 04             	mov    0x4(%eax),%eax
c0105ca5:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105ca8:	8b 40 04             	mov    0x4(%eax),%eax
c0105cab:	8b 00                	mov    (%eax),%eax
c0105cad:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(node != current_thread->process->files->head)
c0105cb0:	eb 22                	jmp    c0105cd4 <get_fd+0x44>
    {
        desc = node->element;
c0105cb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105cb5:	8b 40 08             	mov    0x8(%eax),%eax
c0105cb8:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->id == fd)
c0105cbb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105cbe:	8b 10                	mov    (%eax),%edx
c0105cc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cc3:	39 c2                	cmp    %eax,%edx
c0105cc5:	75 05                	jne    c0105ccc <get_fd+0x3c>
        {
            return desc;
c0105cc7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105cca:	eb 20                	jmp    c0105cec <get_fd+0x5c>
        }
        else
        {
            node = node->next;
c0105ccc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105ccf:	8b 00                	mov    (%eax),%eax
c0105cd1:	89 45 fc             	mov    %eax,-0x4(%ebp)

struct fd *get_fd(int fd)
{
    struct fd *desc = NULL;
    struct list_node *node = current_thread->process->files->head->next;
    while(node != current_thread->process->files->head)
c0105cd4:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105cd9:	8b 40 04             	mov    0x4(%eax),%eax
c0105cdc:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105cdf:	8b 40 04             	mov    0x4(%eax),%eax
c0105ce2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0105ce5:	75 cb                	jne    c0105cb2 <get_fd+0x22>
        {
            node = node->next;
        }
    }

    return NULL;
c0105ce7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105cec:	c9                   	leave  
c0105ced:	c3                   	ret    

c0105cee <sys_open>:

void sys_open(struct cpu_state **cpu)
{
c0105cee:	55                   	push   %ebp
c0105cef:	89 e5                	mov    %esp,%ebp
c0105cf1:	83 ec 38             	sub    $0x38,%esp
    char *path = (char *) (*cpu)->CPU_ARG1;
c0105cf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cf7:	8b 00                	mov    (%eax),%eax
c0105cf9:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105cfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int oflags = (*cpu)->CPU_ARG2;
c0105cff:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d02:	8b 00                	mov    (%eax),%eax
c0105d04:	8b 40 24             	mov    0x24(%eax),%eax
c0105d07:	89 45 ec             	mov    %eax,-0x14(%ebp)
    mode_t mode = (*cpu)->CPU_ARG3;
c0105d0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d0d:	8b 00                	mov    (%eax),%eax
c0105d0f:	8b 40 20             	mov    0x20(%eax),%eax
c0105d12:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vfs_inode_t *inode = vfs_lookup_path(path);
c0105d15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d18:	89 04 24             	mov    %eax,(%esp)
c0105d1b:	e8 9f fb ff ff       	call   c01058bf <vfs_lookup_path>
c0105d20:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(inode == NULL)
c0105d23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d27:	75 65                	jne    c0105d8e <sys_open+0xa0>
    {
        if(oflags & O_CREAT)   // create inode
c0105d29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d2c:	83 e0 20             	and    $0x20,%eax
c0105d2f:	85 c0                	test   %eax,%eax
c0105d31:	74 4a                	je     c0105d7d <sys_open+0x8f>
        {
            inode = vfs_create_path(path, mode, current_thread->process->uid, current_thread->process->gid);
c0105d33:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105d38:	8b 40 04             	mov    0x4(%eax),%eax
c0105d3b:	8b 50 08             	mov    0x8(%eax),%edx
c0105d3e:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105d43:	8b 40 04             	mov    0x4(%eax),%eax
c0105d46:	8b 40 04             	mov    0x4(%eax),%eax
c0105d49:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105d4d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d54:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d5b:	89 04 24             	mov    %eax,(%esp)
c0105d5e:	e8 8d fc ff ff       	call   c01059f0 <vfs_create_path>
c0105d63:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if(inode == NULL)
c0105d66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d6a:	75 3d                	jne    c0105da9 <sys_open+0xbb>
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0105d6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d6f:	8b 00                	mov    (%eax),%eax
c0105d71:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
                return;
c0105d78:	e9 68 01 00 00       	jmp    c0105ee5 <sys_open+0x1f7>
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _FAILURE;
c0105d7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d80:	8b 00                	mov    (%eax),%eax
c0105d82:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            return;
c0105d89:	e9 57 01 00 00       	jmp    c0105ee5 <sys_open+0x1f7>
        }
    }
    else
    {
        if(oflags & O_EXCL)
c0105d8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d91:	83 e0 40             	and    $0x40,%eax
c0105d94:	85 c0                	test   %eax,%eax
c0105d96:	74 11                	je     c0105da9 <sys_open+0xbb>
        {
            (*cpu)->CPU_ARG0 = _FAILURE;
c0105d98:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d9b:	8b 00                	mov    (%eax),%eax
c0105d9d:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            return;
c0105da4:	e9 3c 01 00 00       	jmp    c0105ee5 <sys_open+0x1f7>
        }
    }

    if(vfs_access(inode, R_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c0105da9:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105dae:	8b 40 04             	mov    0x4(%eax),%eax
c0105db1:	8b 50 08             	mov    0x8(%eax),%edx
c0105db4:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105db9:	8b 40 04             	mov    0x4(%eax),%eax
c0105dbc:	8b 40 04             	mov    0x4(%eax),%eax
c0105dbf:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105dc3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105dc7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105dce:	00 
c0105dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dd2:	89 04 24             	mov    %eax,(%esp)
c0105dd5:	e8 90 f9 ff ff       	call   c010576a <vfs_access>
c0105dda:	85 c0                	test   %eax,%eax
c0105ddc:	0f 85 f7 00 00 00    	jne    c0105ed9 <sys_open+0x1eb>
    {
        if(oflags & O_TRUNC)
c0105de2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105de5:	83 e0 10             	and    $0x10,%eax
c0105de8:	85 c0                	test   %eax,%eax
c0105dea:	74 46                	je     c0105e32 <sys_open+0x144>
        {
            if(vfs_access(inode, W_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c0105dec:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105df1:	8b 40 04             	mov    0x4(%eax),%eax
c0105df4:	8b 50 08             	mov    0x8(%eax),%edx
c0105df7:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105dfc:	8b 40 04             	mov    0x4(%eax),%eax
c0105dff:	8b 40 04             	mov    0x4(%eax),%eax
c0105e02:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105e06:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e0a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0105e11:	00 
c0105e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e15:	89 04 24             	mov    %eax,(%esp)
c0105e18:	e8 4d f9 ff ff       	call   c010576a <vfs_access>
c0105e1d:	85 c0                	test   %eax,%eax
c0105e1f:	74 11                	je     c0105e32 <sys_open+0x144>
            {
                // TODO: clear file
            }
            else
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0105e21:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e24:	8b 00                	mov    (%eax),%eax
c0105e26:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
                return;
c0105e2d:	e9 b3 00 00 00       	jmp    c0105ee5 <sys_open+0x1f7>
            }
        }

        struct fd *desc = malloc(sizeof(struct fd));
c0105e32:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0105e39:	e8 68 78 00 00       	call   c010d6a6 <malloc>
c0105e3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        desc->id = list_length(current_thread->process->files);
c0105e41:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105e46:	8b 40 04             	mov    0x4(%eax),%eax
c0105e49:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105e4c:	89 04 24             	mov    %eax,(%esp)
c0105e4f:	e8 76 c9 ff ff       	call   c01027ca <list_length>
c0105e54:	89 c2                	mov    %eax,%edx
c0105e56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e59:	89 10                	mov    %edx,(%eax)
        desc->mode = mode;
c0105e5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e5e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105e61:	89 50 08             	mov    %edx,0x8(%eax)
        desc->flags = oflags;
c0105e64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e67:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105e6a:	89 50 0c             	mov    %edx,0xc(%eax)
        desc->read_pos = 0;
c0105e6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e70:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        desc->write_pos = 0;
c0105e77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e7a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        desc->inode = inode;
c0105e81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e84:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105e87:	89 50 04             	mov    %edx,0x4(%eax)

        if(oflags & O_APPEND)
c0105e8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e8d:	83 e0 08             	and    $0x8,%eax
c0105e90:	85 c0                	test   %eax,%eax
c0105e92:	74 1c                	je     c0105eb0 <sys_open+0x1c2>
        {
            desc->read_pos = inode->length;
c0105e94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e97:	8b 40 08             	mov    0x8(%eax),%eax
c0105e9a:	89 c2                	mov    %eax,%edx
c0105e9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e9f:	89 50 10             	mov    %edx,0x10(%eax)
            desc->write_pos = inode->length;
c0105ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea5:	8b 40 08             	mov    0x8(%eax),%eax
c0105ea8:	89 c2                	mov    %eax,%edx
c0105eaa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ead:	89 50 14             	mov    %edx,0x14(%eax)
        }

        list_push_back(current_thread->process->files, desc);
c0105eb0:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105eb5:	8b 40 04             	mov    0x4(%eax),%eax
c0105eb8:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105ebe:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105ec2:	89 04 24             	mov    %eax,(%esp)
c0105ec5:	e8 98 c7 ff ff       	call   c0102662 <list_push_back>

        (*cpu)->CPU_ARG0 = desc->id;
c0105eca:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ecd:	8b 00                	mov    (%eax),%eax
c0105ecf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105ed2:	8b 12                	mov    (%edx),%edx
c0105ed4:	89 50 28             	mov    %edx,0x28(%eax)
c0105ed7:	eb 0c                	jmp    c0105ee5 <sys_open+0x1f7>
    }
    else
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0105ed9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105edc:	8b 00                	mov    (%eax),%eax
c0105ede:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    }
}
c0105ee5:	c9                   	leave  
c0105ee6:	c3                   	ret    

c0105ee7 <sys_pipe>:

void sys_pipe(struct cpu_state **cpu)
{
c0105ee7:	55                   	push   %ebp
c0105ee8:	89 e5                	mov    %esp,%ebp
c0105eea:	53                   	push   %ebx
c0105eeb:	83 ec 24             	sub    $0x24,%esp
    int *id = (int *) (*cpu)->CPU_ARG1;
c0105eee:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ef1:	8b 00                	mov    (%eax),%eax
c0105ef3:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105ef6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    vfs_inode_t *inode = vfs_create_pipe(current_thread->process->uid, current_thread->process->gid);
c0105ef9:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105efe:	8b 40 04             	mov    0x4(%eax),%eax
c0105f01:	8b 50 08             	mov    0x8(%eax),%edx
c0105f04:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105f09:	8b 40 04             	mov    0x4(%eax),%eax
c0105f0c:	8b 40 04             	mov    0x4(%eax),%eax
c0105f0f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105f13:	89 04 24             	mov    %eax,(%esp)
c0105f16:	e8 2b f4 ff ff       	call   c0105346 <vfs_create_pipe>
c0105f1b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // create read channel
    struct fd *desc0 = malloc(sizeof(struct fd));
c0105f1e:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0105f25:	e8 7c 77 00 00       	call   c010d6a6 <malloc>
c0105f2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    desc0->id = id[0] = list_length(current_thread->process->files);
c0105f2d:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105f32:	8b 40 04             	mov    0x4(%eax),%eax
c0105f35:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105f38:	89 04 24             	mov    %eax,(%esp)
c0105f3b:	e8 8a c8 ff ff       	call   c01027ca <list_length>
c0105f40:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105f43:	89 02                	mov    %eax,(%edx)
c0105f45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f48:	8b 00                	mov    (%eax),%eax
c0105f4a:	89 c2                	mov    %eax,%edx
c0105f4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f4f:	89 10                	mov    %edx,(%eax)
    desc0->mode = O_APPEND;
c0105f51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f54:	c7 40 08 08 00 00 00 	movl   $0x8,0x8(%eax)
    desc0->flags = O_RDONLY;
c0105f5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f5e:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
    desc0->read_pos = 0;
c0105f65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f68:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc0->write_pos = 0;
c0105f6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f72:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc0->inode = inode;
c0105f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105f7f:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(current_thread->process->files, desc0);
c0105f82:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105f87:	8b 40 04             	mov    0x4(%eax),%eax
c0105f8a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105f8d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105f90:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105f94:	89 04 24             	mov    %eax,(%esp)
c0105f97:	e8 c6 c6 ff ff       	call   c0102662 <list_push_back>

    // create write channel
    struct fd *desc1 = malloc(sizeof(struct fd));
c0105f9c:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0105fa3:	e8 fe 76 00 00       	call   c010d6a6 <malloc>
c0105fa8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    desc1->id = id[1] = list_length(current_thread->process->files);
c0105fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fae:	8d 58 04             	lea    0x4(%eax),%ebx
c0105fb1:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105fb6:	8b 40 04             	mov    0x4(%eax),%eax
c0105fb9:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105fbc:	89 04 24             	mov    %eax,(%esp)
c0105fbf:	e8 06 c8 ff ff       	call   c01027ca <list_length>
c0105fc4:	89 03                	mov    %eax,(%ebx)
c0105fc6:	8b 03                	mov    (%ebx),%eax
c0105fc8:	89 c2                	mov    %eax,%edx
c0105fca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fcd:	89 10                	mov    %edx,(%eax)
    desc1->mode = O_APPEND;
c0105fcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fd2:	c7 40 08 08 00 00 00 	movl   $0x8,0x8(%eax)
    desc1->flags = O_WRONLY;
c0105fd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fdc:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
    desc1->read_pos = 0;
c0105fe3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fe6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc1->write_pos = 0;
c0105fed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ff0:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc1->inode = inode;
c0105ff7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ffa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105ffd:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(current_thread->process->files, desc1);
c0106000:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106005:	8b 40 04             	mov    0x4(%eax),%eax
c0106008:	8b 40 1c             	mov    0x1c(%eax),%eax
c010600b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010600e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106012:	89 04 24             	mov    %eax,(%esp)
c0106015:	e8 48 c6 ff ff       	call   c0102662 <list_push_back>

    //printf("kernel: piieeepe %d %d\n", desc0->id, desc1->id);

    if(desc0 != NULL && desc1 != NULL && inode != NULL)
c010601a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010601e:	74 1a                	je     c010603a <sys_pipe+0x153>
c0106020:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106024:	74 14                	je     c010603a <sys_pipe+0x153>
c0106026:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010602a:	74 0e                	je     c010603a <sys_pipe+0x153>
    {
        (*cpu)->CPU_ARG0 = _SUCCESS;
c010602c:	8b 45 08             	mov    0x8(%ebp),%eax
c010602f:	8b 00                	mov    (%eax),%eax
c0106031:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c0106038:	eb 0c                	jmp    c0106046 <sys_pipe+0x15f>
    }
    else
    {
        //	printf("feehler\n");
        (*cpu)->CPU_ARG0 = _FAILURE;
c010603a:	8b 45 08             	mov    0x8(%ebp),%eax
c010603d:	8b 00                	mov    (%eax),%eax
c010603f:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c0106046:	83 c4 24             	add    $0x24,%esp
c0106049:	5b                   	pop    %ebx
c010604a:	5d                   	pop    %ebp
c010604b:	c3                   	ret    

c010604c <sys_mknod>:

void sys_mknod(struct cpu_state **cpu)
{
c010604c:	55                   	push   %ebp
c010604d:	89 e5                	mov    %esp,%ebp
c010604f:	53                   	push   %ebx
c0106050:	83 ec 24             	sub    $0x24,%esp
    char *path = (char *) (*cpu)->CPU_ARG1;
c0106053:	8b 45 08             	mov    0x8(%ebp),%eax
c0106056:	8b 00                	mov    (%eax),%eax
c0106058:	8b 40 1c             	mov    0x1c(%eax),%eax
c010605b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int mode =(int) (*cpu)->CPU_ARG2;
c010605e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106061:	8b 00                	mov    (%eax),%eax
c0106063:	8b 40 24             	mov    0x24(%eax),%eax
c0106066:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //int dev = (int)(*cpu)->CPU_ARG3; // unused

    vfs_inode_t *inode = vfs_create_path(path, mode, current_thread->process->uid, current_thread->process->gid);
c0106069:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010606e:	8b 40 04             	mov    0x4(%eax),%eax
c0106071:	8b 48 08             	mov    0x8(%eax),%ecx
c0106074:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106079:	8b 40 04             	mov    0x4(%eax),%eax
c010607c:	8b 50 04             	mov    0x4(%eax),%edx
c010607f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106082:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0106086:	89 54 24 08          	mov    %edx,0x8(%esp)
c010608a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010608e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106091:	89 04 24             	mov    %eax,(%esp)
c0106094:	e8 57 f9 ff ff       	call   c01059f0 <vfs_create_path>
c0106099:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(inode != NULL)
c010609c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01060a0:	74 41                	je     c01060e3 <sys_mknod+0x97>
    {
        if(S_ISFIFO(inode->stat))
c01060a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060a5:	8b 40 0c             	mov    0xc(%eax),%eax
c01060a8:	83 e0 03             	and    $0x3,%eax
c01060ab:	85 c0                	test   %eax,%eax
c01060ad:	74 26                	je     c01060d5 <sys_mknod+0x89>
        {
            inode->buffer->event_id = get_new_event_ID();
c01060af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060b2:	8b 58 38             	mov    0x38(%eax),%ebx
c01060b5:	e8 9b 45 00 00       	call   c010a655 <get_new_event_ID>
c01060ba:	89 43 08             	mov    %eax,0x8(%ebx)
            inode->buffer->handlers = list_create();
c01060bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060c0:	8b 58 38             	mov    0x38(%eax),%ebx
c01060c3:	e8 b6 c4 ff ff       	call   c010257e <list_create>
c01060c8:	89 43 0c             	mov    %eax,0xc(%ebx)
            inode->type = VFS_PIPE;
c01060cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060ce:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        }

        (*cpu)->CPU_ARG0 = _SUCCESS;
c01060d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01060d8:	8b 00                	mov    (%eax),%eax
c01060da:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c01060e1:	eb 0c                	jmp    c01060ef <sys_mknod+0xa3>
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c01060e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01060e6:	8b 00                	mov    (%eax),%eax
c01060e8:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c01060ef:	83 c4 24             	add    $0x24,%esp
c01060f2:	5b                   	pop    %ebx
c01060f3:	5d                   	pop    %ebp
c01060f4:	c3                   	ret    

c01060f5 <sys_close>:

void sys_close(struct cpu_state **cpu)
{
c01060f5:	55                   	push   %ebp
c01060f6:	89 e5                	mov    %esp,%ebp
c01060f8:	83 ec 28             	sub    $0x28,%esp
    int fd = (*cpu)->CPU_ARG1;
c01060fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01060fe:	8b 00                	mov    (%eax),%eax
c0106100:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106103:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct list_node *node = current_thread->process->files->head->next;
c0106106:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010610b:	8b 40 04             	mov    0x4(%eax),%eax
c010610e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106111:	8b 40 04             	mov    0x4(%eax),%eax
c0106114:	8b 00                	mov    (%eax),%eax
c0106116:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i;
    for(i = 0; i < list_length(current_thread->process->files); i++)
c0106119:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0106120:	eb 3a                	jmp    c010615c <sys_close+0x67>
    {
        struct fd *desc = node->element;
c0106122:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106125:	8b 40 08             	mov    0x8(%eax),%eax
c0106128:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(desc->id == fd)
c010612b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010612e:	8b 10                	mov    (%eax),%edx
c0106130:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106133:	39 c2                	cmp    %eax,%edx
c0106135:	75 19                	jne    c0106150 <sys_close+0x5b>
        {
            list_remove_node(node);
c0106137:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010613a:	89 04 24             	mov    %eax,(%esp)
c010613d:	e8 c3 c5 ff ff       	call   c0102705 <list_remove_node>
            (*cpu)->CPU_ARG0 = _SUCCESS;
c0106142:	8b 45 08             	mov    0x8(%ebp),%eax
c0106145:	8b 00                	mov    (%eax),%eax
c0106147:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
            return;
c010614e:	eb 30                	jmp    c0106180 <sys_close+0x8b>
        }
        else
        {
            node = node->next;
c0106150:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106153:	8b 00                	mov    (%eax),%eax
c0106155:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
    int fd = (*cpu)->CPU_ARG1;

    struct list_node *node = current_thread->process->files->head->next;
    int i;
    for(i = 0; i < list_length(current_thread->process->files); i++)
c0106158:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010615c:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106161:	8b 40 04             	mov    0x4(%eax),%eax
c0106164:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106167:	89 04 24             	mov    %eax,(%esp)
c010616a:	e8 5b c6 ff ff       	call   c01027ca <list_length>
c010616f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106172:	7f ae                	jg     c0106122 <sys_close+0x2d>
        {
            node = node->next;
        }
    }

    (*cpu)->CPU_ARG0 = _FAILURE;
c0106174:	8b 45 08             	mov    0x8(%ebp),%eax
c0106177:	8b 00                	mov    (%eax),%eax
c0106179:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
}
c0106180:	c9                   	leave  
c0106181:	c3                   	ret    

c0106182 <sys_read>:

void sys_read(struct cpu_state **cpu)
{
c0106182:	55                   	push   %ebp
c0106183:	89 e5                	mov    %esp,%ebp
c0106185:	83 ec 48             	sub    $0x48,%esp
    int fd = (*cpu)->CPU_ARG1;
c0106188:	8b 45 08             	mov    0x8(%ebp),%eax
c010618b:	8b 00                	mov    (%eax),%eax
c010618d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106190:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *buf = (void*) (*cpu)->CPU_ARG2;
c0106193:	8b 45 08             	mov    0x8(%ebp),%eax
c0106196:	8b 00                	mov    (%eax),%eax
c0106198:	8b 40 24             	mov    0x24(%eax),%eax
c010619b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (*cpu)->CPU_ARG3;
c010619e:	8b 45 08             	mov    0x8(%ebp),%eax
c01061a1:	8b 00                	mov    (%eax),%eax
c01061a3:	8b 40 20             	mov    0x20(%eax),%eax
c01061a6:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct fd *desc = get_fd(fd);
c01061a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061ac:	89 04 24             	mov    %eax,(%esp)
c01061af:	e8 dc fa ff ff       	call   c0105c90 <get_fd>
c01061b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(desc != NULL)
c01061b7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01061bb:	0f 84 63 01 00 00    	je     c0106324 <sys_read+0x1a2>
    {
        if(desc->flags & O_RDONLY ||
c01061c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061c4:	8b 40 0c             	mov    0xc(%eax),%eax
c01061c7:	83 e0 01             	and    $0x1,%eax
c01061ca:	85 c0                	test   %eax,%eax
c01061cc:	75 11                	jne    c01061df <sys_read+0x5d>
                desc->flags & O_RDWR)
c01061ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061d1:	8b 40 0c             	mov    0xc(%eax),%eax
c01061d4:	83 e0 04             	and    $0x4,%eax
    size_t len = (*cpu)->CPU_ARG3;

    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
c01061d7:	85 c0                	test   %eax,%eax
c01061d9:	0f 84 37 01 00 00    	je     c0106316 <sys_read+0x194>
                desc->flags & O_RDWR)
        {
            vfs_inode_t *inode = desc->inode;
c01061df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061e2:	8b 40 04             	mov    0x4(%eax),%eax
c01061e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vfs_buffer_info_t *info = inode->buffer;
c01061e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061eb:	8b 40 38             	mov    0x38(%eax),%eax
c01061ee:	89 45 e0             	mov    %eax,-0x20(%ebp)

            if(vfs_access(inode, R_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c01061f1:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01061f6:	8b 40 04             	mov    0x4(%eax),%eax
c01061f9:	8b 50 08             	mov    0x8(%eax),%edx
c01061fc:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106201:	8b 40 04             	mov    0x4(%eax),%eax
c0106204:	8b 40 04             	mov    0x4(%eax),%eax
c0106207:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010620b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010620f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106216:	00 
c0106217:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010621a:	89 04 24             	mov    %eax,(%esp)
c010621d:	e8 48 f5 ff ff       	call   c010576a <vfs_access>
c0106222:	85 c0                	test   %eax,%eax
c0106224:	0f 85 dd 00 00 00    	jne    c0106307 <sys_read+0x185>
            {
                int ret = vfs_read(inode, desc->read_pos, buf, len);
c010622a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010622d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106230:	8b 40 10             	mov    0x10(%eax),%eax
c0106233:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106237:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010623a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010623e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106242:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106245:	89 04 24             	mov    %eax,(%esp)
c0106248:	e8 97 f3 ff ff       	call   c01055e4 <vfs_read>
c010624d:	89 45 dc             	mov    %eax,-0x24(%ebp)

                if(ret == len)
c0106250:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106253:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106256:	75 45                	jne    c010629d <sys_read+0x11b>
                {
                    desc->read_pos += len;
c0106258:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010625b:	8b 40 10             	mov    0x10(%eax),%eax
c010625e:	89 c2                	mov    %eax,%edx
c0106260:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106263:	01 d0                	add    %edx,%eax
c0106265:	89 c2                	mov    %eax,%edx
c0106267:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010626a:	89 50 10             	mov    %edx,0x10(%eax)
                    if(inode->type != VFS_PIPE)
c010626d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106270:	8b 40 04             	mov    0x4(%eax),%eax
c0106273:	83 f8 01             	cmp    $0x1,%eax
c0106276:	74 15                	je     c010628d <sys_read+0x10b>
                    {
                        desc->write_pos += len;
c0106278:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010627b:	8b 40 14             	mov    0x14(%eax),%eax
c010627e:	89 c2                	mov    %eax,%edx
c0106280:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106283:	01 d0                	add    %edx,%eax
c0106285:	89 c2                	mov    %eax,%edx
c0106287:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010628a:	89 50 14             	mov    %edx,0x14(%eax)
                    }

                    (*cpu)->CPU_ARG0 = len;
c010628d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106290:	8b 00                	mov    (%eax),%eax
c0106292:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106295:	89 50 28             	mov    %edx,0x28(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
                desc->flags & O_RDWR)
        {
c0106298:	e9 93 00 00 00       	jmp    c0106330 <sys_read+0x1ae>
                        desc->write_pos += len;
                    }

                    (*cpu)->CPU_ARG0 = len;
                }
                else if(inode->type == VFS_PIPE)
c010629d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062a0:	8b 40 04             	mov    0x4(%eax),%eax
c01062a3:	83 f8 01             	cmp    $0x1,%eax
c01062a6:	75 51                	jne    c01062f9 <sys_read+0x177>
                {
                    add_trigger(WAIT_EVENT, info->event_id, 0, current_thread, sys_read);
c01062a8:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01062ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01062b1:	8b 40 08             	mov    0x8(%eax),%eax
c01062b4:	c7 44 24 10 82 61 10 	movl   $0xc0106182,0x10(%esp)
c01062bb:	c0 
c01062bc:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01062c0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062c7:	00 
c01062c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01062cc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01062d3:	e8 16 44 00 00       	call   c010a6ee <add_trigger>
                    suspend_thread(current_thread);
c01062d8:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01062dd:	89 04 24             	mov    %eax,(%esp)
c01062e0:	e8 a8 3d 00 00       	call   c010a08d <suspend_thread>
                    *cpu = (struct cpu_state *)task_schedule(*cpu);
c01062e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01062e8:	8b 00                	mov    (%eax),%eax
c01062ea:	89 04 24             	mov    %eax,(%esp)
c01062ed:	e8 9d e6 ff ff       	call   c010498f <task_schedule>
c01062f2:	8b 55 08             	mov    0x8(%ebp),%edx
c01062f5:	89 02                	mov    %eax,(%edx)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
                desc->flags & O_RDWR)
        {
c01062f7:	eb 37                	jmp    c0106330 <sys_read+0x1ae>
                    suspend_thread(current_thread);
                    *cpu = (struct cpu_state *)task_schedule(*cpu);
                }
                else
                {
                    (*cpu)->CPU_ARG0 = _FAILURE;
c01062f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01062fc:	8b 00                	mov    (%eax),%eax
c01062fe:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
                desc->flags & O_RDWR)
        {
c0106305:	eb 29                	jmp    c0106330 <sys_read+0x1ae>
                    (*cpu)->CPU_ARG0 = _FAILURE;
                }
            }
            else
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106307:	8b 45 08             	mov    0x8(%ebp),%eax
c010630a:	8b 00                	mov    (%eax),%eax
c010630c:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
                desc->flags & O_RDWR)
        {
c0106313:	90                   	nop
c0106314:	eb 1a                	jmp    c0106330 <sys_read+0x1ae>
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106316:	8b 45 08             	mov    0x8(%ebp),%eax
c0106319:	8b 00                	mov    (%eax),%eax
c010631b:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c0106322:	eb 0c                	jmp    c0106330 <sys_read+0x1ae>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106324:	8b 45 08             	mov    0x8(%ebp),%eax
c0106327:	8b 00                	mov    (%eax),%eax
c0106329:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c0106330:	c9                   	leave  
c0106331:	c3                   	ret    

c0106332 <sys_write>:

void sys_write(struct cpu_state **cpu)
{
c0106332:	55                   	push   %ebp
c0106333:	89 e5                	mov    %esp,%ebp
c0106335:	83 ec 38             	sub    $0x38,%esp
    int fd = (*cpu)->CPU_ARG1;
c0106338:	8b 45 08             	mov    0x8(%ebp),%eax
c010633b:	8b 00                	mov    (%eax),%eax
c010633d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106340:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char *buf = (void*) (*cpu)->CPU_ARG2;
c0106343:	8b 45 08             	mov    0x8(%ebp),%eax
c0106346:	8b 00                	mov    (%eax),%eax
c0106348:	8b 40 24             	mov    0x24(%eax),%eax
c010634b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t len = (*cpu)->CPU_ARG3;
c010634e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106351:	8b 00                	mov    (%eax),%eax
c0106353:	8b 40 20             	mov    0x20(%eax),%eax
c0106356:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if(fd == 2)   // TODO FIXME
c0106359:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
c010635d:	75 3c                	jne    c010639b <sys_write+0x69>
    {
        int i;
        for(i = 0; i < len; i++)
c010635f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106366:	eb 1a                	jmp    c0106382 <sys_write+0x50>
        {
            printf("%c", buf[i]);
c0106368:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010636b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010636e:	01 d0                	add    %edx,%eax
c0106370:	0f b6 00             	movzbl (%eax),%eax
c0106373:	0f be c0             	movsbl %al,%eax
c0106376:	89 04 24             	mov    %eax,(%esp)
c0106379:	e8 d7 57 00 00       	call   c010bb55 <putchar>
    size_t len = (*cpu)->CPU_ARG3;

    if(fd == 2)   // TODO FIXME
    {
        int i;
        for(i = 0; i < len; i++)
c010637e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106382:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106385:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0106388:	72 de                	jb     c0106368 <sys_write+0x36>
        {
            printf("%c", buf[i]);
        }
        (*cpu)->CPU_ARG0 = _SUCCESS;
c010638a:	8b 45 08             	mov    0x8(%ebp),%eax
c010638d:	8b 00                	mov    (%eax),%eax
c010638f:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        return;
c0106396:	e9 0e 01 00 00       	jmp    c01064a9 <sys_write+0x177>
    }

    struct fd *desc = get_fd(fd);
c010639b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010639e:	89 04 24             	mov    %eax,(%esp)
c01063a1:	e8 ea f8 ff ff       	call   c0105c90 <get_fd>
c01063a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(desc != NULL)
c01063a9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01063ad:	0f 84 e7 00 00 00    	je     c010649a <sys_write+0x168>
    {
        if(desc->flags & O_WRONLY ||
c01063b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063b6:	8b 40 0c             	mov    0xc(%eax),%eax
c01063b9:	83 e0 02             	and    $0x2,%eax
c01063bc:	85 c0                	test   %eax,%eax
c01063be:	75 11                	jne    c01063d1 <sys_write+0x9f>
                desc->flags & O_RDWR)
c01063c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063c3:	8b 40 0c             	mov    0xc(%eax),%eax
c01063c6:	83 e0 04             	and    $0x4,%eax
    }

    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_WRONLY ||
c01063c9:	85 c0                	test   %eax,%eax
c01063cb:	0f 84 bb 00 00 00    	je     c010648c <sys_write+0x15a>
                desc->flags & O_RDWR)
        {
            vfs_inode_t *inode = desc->inode;
c01063d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063d4:	8b 40 04             	mov    0x4(%eax),%eax
c01063d7:	89 45 e0             	mov    %eax,-0x20(%ebp)

            if(vfs_access(inode, W_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c01063da:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01063df:	8b 40 04             	mov    0x4(%eax),%eax
c01063e2:	8b 50 08             	mov    0x8(%eax),%edx
c01063e5:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01063ea:	8b 40 04             	mov    0x4(%eax),%eax
c01063ed:	8b 40 04             	mov    0x4(%eax),%eax
c01063f0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01063f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01063f8:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01063ff:	00 
c0106400:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106403:	89 04 24             	mov    %eax,(%esp)
c0106406:	e8 5f f3 ff ff       	call   c010576a <vfs_access>
c010640b:	85 c0                	test   %eax,%eax
c010640d:	75 6e                	jne    c010647d <sys_write+0x14b>
            {
                int ret = vfs_write(inode, desc->write_pos, buf, len);
c010640f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106412:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106415:	8b 40 14             	mov    0x14(%eax),%eax
c0106418:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010641c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010641f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106423:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106427:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010642a:	89 04 24             	mov    %eax,(%esp)
c010642d:	e8 a5 ef ff ff       	call   c01053d7 <vfs_write>
c0106432:	89 45 dc             	mov    %eax,-0x24(%ebp)
                (*cpu)->CPU_ARG0 = ret;
c0106435:	8b 45 08             	mov    0x8(%ebp),%eax
c0106438:	8b 00                	mov    (%eax),%eax
c010643a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010643d:	89 50 28             	mov    %edx,0x28(%eax)
                if(ret > 0)
c0106440:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106444:	7e 62                	jle    c01064a8 <sys_write+0x176>
                {
                    desc->write_pos += len;
c0106446:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106449:	8b 40 14             	mov    0x14(%eax),%eax
c010644c:	89 c2                	mov    %eax,%edx
c010644e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106451:	01 d0                	add    %edx,%eax
c0106453:	89 c2                	mov    %eax,%edx
c0106455:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106458:	89 50 14             	mov    %edx,0x14(%eax)
                    if(inode->type != VFS_PIPE)
c010645b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010645e:	8b 40 04             	mov    0x4(%eax),%eax
c0106461:	83 f8 01             	cmp    $0x1,%eax
c0106464:	74 42                	je     c01064a8 <sys_write+0x176>
                    {
                        desc->read_pos += len;
c0106466:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106469:	8b 40 10             	mov    0x10(%eax),%eax
c010646c:	89 c2                	mov    %eax,%edx
c010646e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106471:	01 d0                	add    %edx,%eax
c0106473:	89 c2                	mov    %eax,%edx
c0106475:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106478:	89 50 10             	mov    %edx,0x10(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_WRONLY ||
                desc->flags & O_RDWR)
        {
c010647b:	eb 2b                	jmp    c01064a8 <sys_write+0x176>
                    }
                }
            }
            else
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c010647d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106480:	8b 00                	mov    (%eax),%eax
c0106482:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_WRONLY ||
                desc->flags & O_RDWR)
        {
c0106489:	90                   	nop
c010648a:	eb 1c                	jmp    c01064a8 <sys_write+0x176>
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c010648c:	8b 45 08             	mov    0x8(%ebp),%eax
c010648f:	8b 00                	mov    (%eax),%eax
c0106491:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c0106498:	eb 0f                	jmp    c01064a9 <sys_write+0x177>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c010649a:	8b 45 08             	mov    0x8(%ebp),%eax
c010649d:	8b 00                	mov    (%eax),%eax
c010649f:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
c01064a6:	eb 01                	jmp    c01064a9 <sys_write+0x177>
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_WRONLY ||
                desc->flags & O_RDWR)
        {
c01064a8:	90                   	nop
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
    }
}
c01064a9:	c9                   	leave  
c01064aa:	c3                   	ret    

c01064ab <sys_create>:

void sys_create(struct cpu_state **cpu)
{
c01064ab:	55                   	push   %ebp
c01064ac:	89 e5                	mov    %esp,%ebp
c01064ae:	83 ec 48             	sub    $0x48,%esp
    char *name = (char *)(*cpu)->CPU_ARG1;
c01064b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01064b4:	8b 00                	mov    (%eax),%eax
c01064b6:	8b 40 1c             	mov    0x1c(%eax),%eax
c01064b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int mode = (*cpu)->CPU_ARG2;
c01064bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01064bf:	8b 00                	mov    (%eax),%eax
c01064c1:	8b 40 24             	mov    0x24(%eax),%eax
c01064c4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // FIXME: only works in root
    vfs_inode_t *parent = root; // FIXME TODO
c01064c7:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c01064cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(parent != NULL)
c01064cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01064d3:	0f 84 1b 01 00 00    	je     c01065f4 <sys_create+0x149>
    {
        if(vfs_access(parent, W_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c01064d9:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01064de:	8b 40 04             	mov    0x4(%eax),%eax
c01064e1:	8b 50 08             	mov    0x8(%eax),%edx
c01064e4:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01064e9:	8b 40 04             	mov    0x4(%eax),%eax
c01064ec:	8b 40 04             	mov    0x4(%eax),%eax
c01064ef:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01064f3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01064f7:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01064fe:	00 
c01064ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106502:	89 04 24             	mov    %eax,(%esp)
c0106505:	e8 60 f2 ff ff       	call   c010576a <vfs_access>
c010650a:	85 c0                	test   %eax,%eax
c010650c:	0f 85 d4 00 00 00    	jne    c01065e6 <sys_create+0x13b>
        {
            vfs_inode_t *inode = vfs_create_inode(name, mode, parent, current_thread->process->uid, current_thread->process->gid);
c0106512:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106517:	8b 40 04             	mov    0x4(%eax),%eax
c010651a:	8b 48 08             	mov    0x8(%eax),%ecx
c010651d:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106522:	8b 40 04             	mov    0x4(%eax),%eax
c0106525:	8b 50 04             	mov    0x4(%eax),%edx
c0106528:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010652b:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010652f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106533:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106536:	89 54 24 08          	mov    %edx,0x8(%esp)
c010653a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010653e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106541:	89 04 24             	mov    %eax,(%esp)
c0106544:	e8 c0 ec ff ff       	call   c0105209 <vfs_create_inode>
c0106549:	89 45 e8             	mov    %eax,-0x18(%ebp)

            if(inode != NULL)
c010654c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106550:	0f 84 82 00 00 00    	je     c01065d8 <sys_create+0x12d>
            {
                struct fd *desc = malloc(sizeof(struct fd));
c0106556:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010655d:	e8 44 71 00 00       	call   c010d6a6 <malloc>
c0106562:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                desc->id = list_length(current_thread->process->files);
c0106565:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010656a:	8b 40 04             	mov    0x4(%eax),%eax
c010656d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106570:	89 04 24             	mov    %eax,(%esp)
c0106573:	e8 52 c2 ff ff       	call   c01027ca <list_length>
c0106578:	89 c2                	mov    %eax,%edx
c010657a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010657d:	89 10                	mov    %edx,(%eax)
                desc->mode = mode;
c010657f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106582:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106585:	89 50 08             	mov    %edx,0x8(%eax)
                desc->flags = O_RDWR;
c0106588:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010658b:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
                desc->read_pos = 0;
c0106592:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106595:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
                desc->write_pos = 0;
c010659c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010659f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
                desc->inode = inode;
c01065a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065a9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01065ac:	89 50 04             	mov    %edx,0x4(%eax)

                list_push_back(current_thread->process->files, desc);
c01065af:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01065b4:	8b 40 04             	mov    0x4(%eax),%eax
c01065b7:	8b 40 1c             	mov    0x1c(%eax),%eax
c01065ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065bd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01065c1:	89 04 24             	mov    %eax,(%esp)
c01065c4:	e8 99 c0 ff ff       	call   c0102662 <list_push_back>

                (*cpu)->CPU_ARG0 = desc->id;
c01065c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01065cc:	8b 00                	mov    (%eax),%eax
c01065ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065d1:	8b 12                	mov    (%edx),%edx
c01065d3:	89 50 28             	mov    %edx,0x28(%eax)
c01065d6:	eb 28                	jmp    c0106600 <sys_create+0x155>
            }
            else
            {
                (*cpu)->CPU_ARG0 = _FAILURE;
c01065d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01065db:	8b 00                	mov    (%eax),%eax
c01065dd:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
c01065e4:	eb 1a                	jmp    c0106600 <sys_create+0x155>
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c01065e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01065e9:	8b 00                	mov    (%eax),%eax
c01065eb:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c01065f2:	eb 0c                	jmp    c0106600 <sys_create+0x155>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c01065f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01065f7:	8b 00                	mov    (%eax),%eax
c01065f9:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c0106600:	c9                   	leave  
c0106601:	c3                   	ret    

c0106602 <sys_link>:

void sys_link(struct cpu_state **cpu)
{
c0106602:	55                   	push   %ebp
c0106603:	89 e5                	mov    %esp,%ebp
c0106605:	83 ec 48             	sub    $0x48,%esp
    char *src_path = (char *)(*cpu)->CPU_ARG1;
c0106608:	8b 45 08             	mov    0x8(%ebp),%eax
c010660b:	8b 00                	mov    (%eax),%eax
c010660d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106610:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *dest_path = (char *)(*cpu)->CPU_ARG2;
c0106613:	8b 45 08             	mov    0x8(%ebp),%eax
c0106616:	8b 00                	mov    (%eax),%eax
c0106618:	8b 40 24             	mov    0x24(%eax),%eax
c010661b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    vfs_inode_t *src_inode = vfs_lookup_path(src_path);
c010661e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106621:	89 04 24             	mov    %eax,(%esp)
c0106624:	e8 96 f2 ff ff       	call   c01058bf <vfs_lookup_path>
c0106629:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // FIXME: only works in root
    vfs_inode_t *dest_parent = root; // FIXME TODO
c010662c:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106631:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if(src_inode != NULL && dest_parent != NULL)
c0106634:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106638:	0f 84 0a 01 00 00    	je     c0106748 <sys_link+0x146>
c010663e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106642:	0f 84 00 01 00 00    	je     c0106748 <sys_link+0x146>
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
c0106648:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010664d:	8b 40 04             	mov    0x4(%eax),%eax
c0106650:	8b 40 08             	mov    0x8(%eax),%eax
c0106653:	85 c0                	test   %eax,%eax
c0106655:	0f 94 c0             	sete   %al
c0106658:	0f b6 d0             	movzbl %al,%edx
c010665b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106660:	8b 40 04             	mov    0x4(%eax),%eax
c0106663:	8b 40 04             	mov    0x4(%eax),%eax
c0106666:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010666a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010666e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106675:	00 
c0106676:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106679:	89 04 24             	mov    %eax,(%esp)
c010667c:	e8 e9 f0 ff ff       	call   c010576a <vfs_access>
c0106681:	85 c0                	test   %eax,%eax
c0106683:	0f 84 af 00 00 00    	je     c0106738 <sys_link+0x136>
                vfs_access(dest_parent, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
c0106689:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010668e:	8b 40 04             	mov    0x4(%eax),%eax
c0106691:	8b 40 08             	mov    0x8(%eax),%eax
c0106694:	85 c0                	test   %eax,%eax
c0106696:	0f 94 c0             	sete   %al
c0106699:	0f b6 d0             	movzbl %al,%edx
c010669c:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01066a1:	8b 40 04             	mov    0x4(%eax),%eax
c01066a4:	8b 40 04             	mov    0x4(%eax),%eax
c01066a7:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01066ab:	89 44 24 08          	mov    %eax,0x8(%esp)
c01066af:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01066b6:	00 
c01066b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01066ba:	89 04 24             	mov    %eax,(%esp)
c01066bd:	e8 a8 f0 ff ff       	call   c010576a <vfs_access>
    // FIXME: only works in root
    vfs_inode_t *dest_parent = root; // FIXME TODO

    if(src_inode != NULL && dest_parent != NULL)
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
c01066c2:	85 c0                	test   %eax,%eax
c01066c4:	74 72                	je     c0106738 <sys_link+0x136>
                vfs_access(dest_parent, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
        {
            vfs_inode_t *dest_inode = vfs_create_inode(dest_path, src_inode->stat.st_mode, dest_parent, current_thread->process->uid, current_thread->process->gid);
c01066c6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01066cb:	8b 40 04             	mov    0x4(%eax),%eax
c01066ce:	8b 48 08             	mov    0x8(%eax),%ecx
c01066d1:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01066d6:	8b 40 04             	mov    0x4(%eax),%eax
c01066d9:	8b 50 04             	mov    0x4(%eax),%edx
c01066dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066df:	8b 40 0c             	mov    0xc(%eax),%eax
c01066e2:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01066e6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01066ea:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01066ed:	89 54 24 08          	mov    %edx,0x8(%esp)
c01066f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01066f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066f8:	89 04 24             	mov    %eax,(%esp)
c01066fb:	e8 09 eb ff ff       	call   c0105209 <vfs_create_inode>
c0106700:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            if(dest_inode != NULL)
c0106703:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106707:	74 21                	je     c010672a <sys_link+0x128>
            {
                dest_inode->type = VFS_LINK;
c0106709:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010670c:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
                dest_inode->buffer = (void *)dest_inode;
c0106713:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106716:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106719:	89 50 38             	mov    %edx,0x38(%eax)

                (*cpu)->CPU_ARG0 = _SUCCESS;
c010671c:	8b 45 08             	mov    0x8(%ebp),%eax
c010671f:	8b 00                	mov    (%eax),%eax
c0106721:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)

    if(src_inode != NULL && dest_parent != NULL)
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
                vfs_access(dest_parent, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
        {
c0106728:	eb 1c                	jmp    c0106746 <sys_link+0x144>

                (*cpu)->CPU_ARG0 = _SUCCESS;
            }
            else
            {
                (*cpu)->CPU_ARG0 = _FAILURE;
c010672a:	8b 45 08             	mov    0x8(%ebp),%eax
c010672d:	8b 00                	mov    (%eax),%eax
c010672f:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)

    if(src_inode != NULL && dest_parent != NULL)
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
                vfs_access(dest_parent, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
        {
c0106736:	eb 0e                	jmp    c0106746 <sys_link+0x144>
                (*cpu)->CPU_ARG0 = _FAILURE;
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106738:	8b 45 08             	mov    0x8(%ebp),%eax
c010673b:	8b 00                	mov    (%eax),%eax
c010673d:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    // FIXME: only works in root
    vfs_inode_t *dest_parent = root; // FIXME TODO

    if(src_inode != NULL && dest_parent != NULL)
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
c0106744:	eb 0e                	jmp    c0106754 <sys_link+0x152>
c0106746:	eb 0c                	jmp    c0106754 <sys_link+0x152>
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106748:	8b 45 08             	mov    0x8(%ebp),%eax
c010674b:	8b 00                	mov    (%eax),%eax
c010674d:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c0106754:	c9                   	leave  
c0106755:	c3                   	ret    

c0106756 <sys_unlink>:

void sys_unlink(struct cpu_state **cpu)
{
c0106756:	55                   	push   %ebp
c0106757:	89 e5                	mov    %esp,%ebp
c0106759:	83 ec 28             	sub    $0x28,%esp
    char *path = (char *)(*cpu)->CPU_ARG1;
c010675c:	8b 45 08             	mov    0x8(%ebp),%eax
c010675f:	8b 00                	mov    (%eax),%eax
c0106761:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106764:	89 45 f4             	mov    %eax,-0xc(%ebp)

    vfs_inode_t *link = vfs_lookup_path(path);
c0106767:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010676a:	89 04 24             	mov    %eax,(%esp)
c010676d:	e8 4d f1 ff ff       	call   c01058bf <vfs_lookup_path>
c0106772:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(link != NULL)
c0106775:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106779:	74 78                	je     c01067f3 <sys_unlink+0x9d>
    {
        if(vfs_access(link, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
c010677b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106780:	8b 40 04             	mov    0x4(%eax),%eax
c0106783:	8b 40 08             	mov    0x8(%eax),%eax
c0106786:	85 c0                	test   %eax,%eax
c0106788:	0f 94 c0             	sete   %al
c010678b:	0f b6 d0             	movzbl %al,%edx
c010678e:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106793:	8b 40 04             	mov    0x4(%eax),%eax
c0106796:	8b 40 04             	mov    0x4(%eax),%eax
c0106799:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010679d:	89 44 24 08          	mov    %eax,0x8(%esp)
c01067a1:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01067a8:	00 
c01067a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067ac:	89 04 24             	mov    %eax,(%esp)
c01067af:	e8 b6 ef ff ff       	call   c010576a <vfs_access>
c01067b4:	85 c0                	test   %eax,%eax
c01067b6:	74 2d                	je     c01067e5 <sys_unlink+0x8f>
        {
            link->buffer = NULL;
c01067b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067bb:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
            link->type = VFS_REGULAR;
c01067c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067c5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            free(link);
c01067cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067cf:	89 04 24             	mov    %eax,(%esp)
c01067d2:	e8 b6 6f 00 00       	call   c010d78d <free>
            (*cpu)->CPU_ARG0 = _SUCCESS;
c01067d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01067da:	8b 00                	mov    (%eax),%eax
c01067dc:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c01067e3:	eb 1a                	jmp    c01067ff <sys_unlink+0xa9>
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c01067e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01067e8:	8b 00                	mov    (%eax),%eax
c01067ea:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c01067f1:	eb 0c                	jmp    c01067ff <sys_unlink+0xa9>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c01067f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01067f6:	8b 00                	mov    (%eax),%eax
c01067f8:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c01067ff:	c9                   	leave  
c0106800:	c3                   	ret    

c0106801 <sys_chdir>:

void sys_chdir(struct cpu_state **cpu)
{
c0106801:	55                   	push   %ebp
c0106802:	89 e5                	mov    %esp,%ebp
c0106804:	83 ec 28             	sub    $0x28,%esp
    char *path = (char *)(*cpu)->CPU_ARG1;
c0106807:	8b 45 08             	mov    0x8(%ebp),%eax
c010680a:	8b 00                	mov    (%eax),%eax
c010680c:	8b 40 1c             	mov    0x1c(%eax),%eax
c010680f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    vfs_inode_t *nwd = vfs_lookup_path(path);
c0106812:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106815:	89 04 24             	mov    %eax,(%esp)
c0106818:	e8 a2 f0 ff ff       	call   c01058bf <vfs_lookup_path>
c010681d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(nwd != NULL)
c0106820:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106824:	0f 84 82 00 00 00    	je     c01068ac <sys_chdir+0xab>
    {
        if(S_ISDIR(nwd->stat))
c010682a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010682d:	8b 40 0c             	mov    0xc(%eax),%eax
c0106830:	83 e0 05             	and    $0x5,%eax
c0106833:	85 c0                	test   %eax,%eax
c0106835:	74 67                	je     c010689e <sys_chdir+0x9d>
        {
            if(vfs_access(nwd, R_OK, current_thread->process->uid, current_thread->process->gid == 0))
c0106837:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010683c:	8b 40 04             	mov    0x4(%eax),%eax
c010683f:	8b 40 08             	mov    0x8(%eax),%eax
c0106842:	85 c0                	test   %eax,%eax
c0106844:	0f 94 c0             	sete   %al
c0106847:	0f b6 d0             	movzbl %al,%edx
c010684a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010684f:	8b 40 04             	mov    0x4(%eax),%eax
c0106852:	8b 40 04             	mov    0x4(%eax),%eax
c0106855:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106859:	89 44 24 08          	mov    %eax,0x8(%esp)
c010685d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106864:	00 
c0106865:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106868:	89 04 24             	mov    %eax,(%esp)
c010686b:	e8 fa ee ff ff       	call   c010576a <vfs_access>
c0106870:	85 c0                	test   %eax,%eax
c0106872:	74 1c                	je     c0106890 <sys_chdir+0x8f>
            {
                current_thread->process->cwd = nwd;
c0106874:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106879:	8b 40 04             	mov    0x4(%eax),%eax
c010687c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010687f:	89 50 18             	mov    %edx,0x18(%eax)
                (*cpu)->CPU_ARG0 = _SUCCESS;
c0106882:	8b 45 08             	mov    0x8(%ebp),%eax
c0106885:	8b 00                	mov    (%eax),%eax
c0106887:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c010688e:	eb 28                	jmp    c01068b8 <sys_chdir+0xb7>
            }
            else
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106890:	8b 45 08             	mov    0x8(%ebp),%eax
c0106893:	8b 00                	mov    (%eax),%eax
c0106895:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c010689c:	eb 1a                	jmp    c01068b8 <sys_chdir+0xb7>
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _FAILURE;
c010689e:	8b 45 08             	mov    0x8(%ebp),%eax
c01068a1:	8b 00                	mov    (%eax),%eax
c01068a3:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
c01068aa:	eb 0c                	jmp    c01068b8 <sys_chdir+0xb7>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c01068ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01068af:	8b 00                	mov    (%eax),%eax
c01068b1:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c01068b8:	c9                   	leave  
c01068b9:	c3                   	ret    

c01068ba <sys_getdents>:

void sys_getdents(struct cpu_state **cpu)
{
c01068ba:	55                   	push   %ebp
c01068bb:	89 e5                	mov    %esp,%ebp
c01068bd:	83 ec 38             	sub    $0x38,%esp
    static int pos = 0;
    static int old_fd = -1;
    int fd = (*cpu)->CPU_ARG1;
c01068c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01068c3:	8b 00                	mov    (%eax),%eax
c01068c5:	8b 40 1c             	mov    0x1c(%eax),%eax
c01068c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //int count = (*cpu)->CPU_ARG2;		// count is currently unused, so i commented it out

    vfs_inode_t *parent = get_fd(fd)->inode;
c01068cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068ce:	89 04 24             	mov    %eax,(%esp)
c01068d1:	e8 ba f3 ff ff       	call   c0105c90 <get_fd>
c01068d6:	8b 40 04             	mov    0x4(%eax),%eax
c01068d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(vfs_access(parent, R_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c01068dc:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01068e1:	8b 40 04             	mov    0x4(%eax),%eax
c01068e4:	8b 50 08             	mov    0x8(%eax),%edx
c01068e7:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01068ec:	8b 40 04             	mov    0x4(%eax),%eax
c01068ef:	8b 40 04             	mov    0x4(%eax),%eax
c01068f2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01068f6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01068fa:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106901:	00 
c0106902:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106905:	89 04 24             	mov    %eax,(%esp)
c0106908:	e8 5d ee ff ff       	call   c010576a <vfs_access>
c010690d:	85 c0                	test   %eax,%eax
c010690f:	0f 85 02 01 00 00    	jne    c0106a17 <sys_getdents+0x15d>
    {
        dirent_t *dentry = (dirent_t *)(*cpu)->CPU_ARG2;
c0106915:	8b 45 08             	mov    0x8(%ebp),%eax
c0106918:	8b 00                	mov    (%eax),%eax
c010691a:	8b 40 24             	mov    0x24(%eax),%eax
c010691d:	89 45 ec             	mov    %eax,-0x14(%ebp)

        vfs_dentry_t *entries = malloc(parent->length);
c0106920:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106923:	8b 40 08             	mov    0x8(%eax),%eax
c0106926:	89 04 24             	mov    %eax,(%esp)
c0106929:	e8 78 6d 00 00       	call   c010d6a6 <malloc>
c010692e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        vfs_read(parent, 0, entries, parent->length);
c0106931:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106934:	8b 40 08             	mov    0x8(%eax),%eax
c0106937:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010693b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010693e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106942:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106949:	00 
c010694a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010694d:	89 04 24             	mov    %eax,(%esp)
c0106950:	e8 8f ec ff ff       	call   c01055e4 <vfs_read>
        int num = parent->length / sizeof(vfs_dentry_t);
c0106955:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106958:	8b 40 08             	mov    0x8(%eax),%eax
c010695b:	c1 e8 03             	shr    $0x3,%eax
c010695e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if(pos < num && (fd == old_fd || old_fd == -1))
c0106961:	a1 18 80 11 c0       	mov    0xc0118018,%eax
c0106966:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0106969:	0f 8d 88 00 00 00    	jge    c01069f7 <sys_getdents+0x13d>
c010696f:	a1 88 30 11 c0       	mov    0xc0113088,%eax
c0106974:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0106977:	74 0a                	je     c0106983 <sys_getdents+0xc9>
c0106979:	a1 88 30 11 c0       	mov    0xc0113088,%eax
c010697e:	83 f8 ff             	cmp    $0xffffffff,%eax
c0106981:	75 74                	jne    c01069f7 <sys_getdents+0x13d>
        {
            vfs_inode_t *ino = entries[pos++].inode;
c0106983:	a1 18 80 11 c0       	mov    0xc0118018,%eax
c0106988:	89 c2                	mov    %eax,%edx
c010698a:	8d 0c d5 00 00 00 00 	lea    0x0(,%edx,8),%ecx
c0106991:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106994:	01 ca                	add    %ecx,%edx
c0106996:	8b 52 04             	mov    0x4(%edx),%edx
c0106999:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010699c:	83 c0 01             	add    $0x1,%eax
c010699f:	a3 18 80 11 c0       	mov    %eax,0xc0118018

            strcpy(dentry->name, ino->name);
c01069a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069a7:	8b 00                	mov    (%eax),%eax
c01069a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01069ac:	83 c2 04             	add    $0x4,%edx
c01069af:	89 44 24 04          	mov    %eax,0x4(%esp)
c01069b3:	89 14 24             	mov    %edx,(%esp)
c01069b6:	e8 95 c0 ff ff       	call   c0102a50 <strcpy>
            memcpy(&dentry->stat, &ino->stat, sizeof(struct stat));
c01069bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069be:	8d 50 0c             	lea    0xc(%eax),%edx
c01069c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069c4:	05 04 01 00 00       	add    $0x104,%eax
c01069c9:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c01069d0:	00 
c01069d1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069d5:	89 04 24             	mov    %eax,(%esp)
c01069d8:	e8 22 c4 ff ff       	call   c0102dff <memcpy>
            dentry->id = ino->stat.st_ino;
c01069dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069e0:	8b 40 10             	mov    0x10(%eax),%eax
c01069e3:	89 c2                	mov    %eax,%edx
c01069e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069e8:	89 10                	mov    %edx,(%eax)
            (*cpu)->CPU_ARG0 = (uint32_t) dentry;
c01069ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01069ed:	8b 00                	mov    (%eax),%eax
c01069ef:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01069f2:	89 50 28             	mov    %edx,0x28(%eax)
        vfs_dentry_t *entries = malloc(parent->length);
        vfs_read(parent, 0, entries, parent->length);
        int num = parent->length / sizeof(vfs_dentry_t);

        if(pos < num && (fd == old_fd || old_fd == -1))
        {
c01069f5:	eb 16                	jmp    c0106a0d <sys_getdents+0x153>
            dentry->id = ino->stat.st_ino;
            (*cpu)->CPU_ARG0 = (uint32_t) dentry;
        }
        else
        {
            pos = 0;
c01069f7:	c7 05 18 80 11 c0 00 	movl   $0x0,0xc0118018
c01069fe:	00 00 00 
            (*cpu)->CPU_ARG0 = (uint32_t) NULL;
c0106a01:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a04:	8b 00                	mov    (%eax),%eax
c0106a06:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        }

        old_fd = fd;
c0106a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a10:	a3 88 30 11 c0       	mov    %eax,0xc0113088
c0106a15:	eb 0c                	jmp    c0106a23 <sys_getdents+0x169>
    }
    else
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a1a:	8b 00                	mov    (%eax),%eax
c0106a1c:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    }
}
c0106a23:	c9                   	leave  
c0106a24:	c3                   	ret    

c0106a25 <sys_seek>:

void sys_seek(struct cpu_state **cpu)
{
c0106a25:	55                   	push   %ebp
c0106a26:	89 e5                	mov    %esp,%ebp
c0106a28:	83 ec 14             	sub    $0x14,%esp
    int fd = (*cpu)->CPU_ARG1;
c0106a2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a2e:	8b 00                	mov    (%eax),%eax
c0106a30:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106a33:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int off = (*cpu)->CPU_ARG2;
c0106a36:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a39:	8b 00                	mov    (%eax),%eax
c0106a3b:	8b 40 24             	mov    0x24(%eax),%eax
c0106a3e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int whence = (*cpu)->CPU_ARG3;
c0106a41:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a44:	8b 00                	mov    (%eax),%eax
c0106a46:	8b 40 20             	mov    0x20(%eax),%eax
c0106a49:	89 45 f4             	mov    %eax,-0xc(%ebp)

    struct fd *file = get_fd(fd);
c0106a4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106a4f:	89 04 24             	mov    %eax,(%esp)
c0106a52:	e8 39 f2 ff ff       	call   c0105c90 <get_fd>
c0106a57:	89 45 f0             	mov    %eax,-0x10(%ebp)

    file->flags |= O_APPEND;
c0106a5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a5d:	8b 40 0c             	mov    0xc(%eax),%eax
c0106a60:	89 c2                	mov    %eax,%edx
c0106a62:	83 ca 08             	or     $0x8,%edx
c0106a65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a68:	89 50 0c             	mov    %edx,0xc(%eax)
    switch(whence)
c0106a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a6e:	83 f8 02             	cmp    $0x2,%eax
c0106a71:	74 1e                	je     c0106a91 <sys_seek+0x6c>
c0106a73:	83 f8 03             	cmp    $0x3,%eax
c0106a76:	74 3d                	je     c0106ab5 <sys_seek+0x90>
c0106a78:	83 f8 01             	cmp    $0x1,%eax
c0106a7b:	75 6e                	jne    c0106aeb <sys_seek+0xc6>
    {
        case SEEK_SET: // absolute
            file->read_pos = off;
c0106a7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a80:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0106a83:	89 50 10             	mov    %edx,0x10(%eax)
            file->write_pos = off;
c0106a86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a89:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0106a8c:	89 50 14             	mov    %edx,0x14(%eax)
            break;
c0106a8f:	eb 68                	jmp    c0106af9 <sys_seek+0xd4>
        case SEEK_CUR: // relative from current position
            file->read_pos += off;
c0106a91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a94:	8b 50 10             	mov    0x10(%eax),%edx
c0106a97:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a9a:	01 c2                	add    %eax,%edx
c0106a9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a9f:	89 50 10             	mov    %edx,0x10(%eax)
            file->write_pos += off;
c0106aa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aa5:	8b 50 14             	mov    0x14(%eax),%edx
c0106aa8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106aab:	01 c2                	add    %eax,%edx
c0106aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ab0:	89 50 14             	mov    %edx,0x14(%eax)
            break;
c0106ab3:	eb 44                	jmp    c0106af9 <sys_seek+0xd4>
        case SEEK_END: // relative from end
            file->read_pos = file->inode->length - off;
c0106ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ab8:	8b 40 04             	mov    0x4(%eax),%eax
c0106abb:	8b 50 08             	mov    0x8(%eax),%edx
c0106abe:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106ac1:	89 d1                	mov    %edx,%ecx
c0106ac3:	29 c1                	sub    %eax,%ecx
c0106ac5:	89 c8                	mov    %ecx,%eax
c0106ac7:	89 c2                	mov    %eax,%edx
c0106ac9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106acc:	89 50 10             	mov    %edx,0x10(%eax)
            file->write_pos = file->inode->length - off;
c0106acf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ad2:	8b 40 04             	mov    0x4(%eax),%eax
c0106ad5:	8b 50 08             	mov    0x8(%eax),%edx
c0106ad8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106adb:	89 d1                	mov    %edx,%ecx
c0106add:	29 c1                	sub    %eax,%ecx
c0106adf:	89 c8                	mov    %ecx,%eax
c0106ae1:	89 c2                	mov    %eax,%edx
c0106ae3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ae6:	89 50 14             	mov    %edx,0x14(%eax)
            break;
c0106ae9:	eb 0e                	jmp    c0106af9 <sys_seek+0xd4>
        default: // ???
            (*cpu)->CPU_ARG0 = _FAILURE;
c0106aeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106aee:	8b 00                	mov    (%eax),%eax
c0106af0:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            return;
c0106af7:	eb 0e                	jmp    c0106b07 <sys_seek+0xe2>
    }

    (*cpu)->CPU_ARG0 = file->read_pos;
c0106af9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106afc:	8b 00                	mov    (%eax),%eax
c0106afe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106b01:	8b 52 10             	mov    0x10(%edx),%edx
c0106b04:	89 50 28             	mov    %edx,0x28(%eax)
}
c0106b07:	c9                   	leave  
c0106b08:	c3                   	ret    

c0106b09 <sys_mkdir>:

void sys_mkdir(struct cpu_state **cpu)
{
c0106b09:	55                   	push   %ebp
c0106b0a:	89 e5                	mov    %esp,%ebp
c0106b0c:	83 ec 28             	sub    $0x28,%esp
    char *path = (char *)(*cpu)->CPU_ARG1;
c0106b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b12:	8b 00                	mov    (%eax),%eax
c0106b14:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106b17:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int mode = (int)(*cpu)->CPU_ARG2;
c0106b1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b1d:	8b 00                	mov    (%eax),%eax
c0106b1f:	8b 40 24             	mov    0x24(%eax),%eax
c0106b22:	89 45 f0             	mov    %eax,-0x10(%ebp)

    vfs_create_path(path, mode, current_thread->process->uid, current_thread->process->gid);
c0106b25:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106b2a:	8b 40 04             	mov    0x4(%eax),%eax
c0106b2d:	8b 48 08             	mov    0x8(%eax),%ecx
c0106b30:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106b35:	8b 40 04             	mov    0x4(%eax),%eax
c0106b38:	8b 50 04             	mov    0x4(%eax),%edx
c0106b3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b3e:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0106b42:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106b46:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b4d:	89 04 24             	mov    %eax,(%esp)
c0106b50:	e8 9b ee ff ff       	call   c01059f0 <vfs_create_path>

    (*cpu)->CPU_ARG0 = 0;
c0106b55:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b58:	8b 00                	mov    (%eax),%eax
c0106b5a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)

    return;
c0106b61:	90                   	nop
}
c0106b62:	c9                   	leave  
c0106b63:	c3                   	ret    

c0106b64 <sys_getcwd>:

void sys_getcwd(struct cpu_state **cpu)
{
c0106b64:	55                   	push   %ebp
c0106b65:	89 e5                	mov    %esp,%ebp
c0106b67:	53                   	push   %ebx
c0106b68:	83 ec 34             	sub    $0x34,%esp
    char *buffer = (char *)(*cpu)->CPU_ARG1;
c0106b6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b6e:	8b 00                	mov    (%eax),%eax
c0106b70:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106b73:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int buffersize = (int)(*cpu)->CPU_ARG2;
c0106b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b79:	8b 00                	mov    (%eax),%eax
c0106b7b:	8b 40 24             	mov    0x24(%eax),%eax
c0106b7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int currentend = 0;
c0106b81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int cwdsize = 1;				// the final size of the final '\0'
c0106b88:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

    vfs_inode_t *inode = current_thread->process->cwd;
c0106b8f:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106b94:	8b 40 04             	mov    0x4(%eax),%eax
c0106b97:	8b 40 18             	mov    0x18(%eax),%eax
c0106b9a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(inode == root)
c0106b9d:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106ba2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106ba5:	75 2a                	jne    c0106bd1 <sys_getcwd+0x6d>
        cwdsize++;
c0106ba7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

    while(inode != root)
c0106bab:	eb 24                	jmp    c0106bd1 <sys_getcwd+0x6d>
    {
        cwdsize += strlen(inode->name);		// add the lenght of the directory name
c0106bad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106bb0:	8b 00                	mov    (%eax),%eax
c0106bb2:	89 04 24             	mov    %eax,(%esp)
c0106bb5:	e8 6f be ff ff       	call   c0102a29 <strlen>
c0106bba:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106bbd:	01 d0                	add    %edx,%eax
c0106bbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cwdsize++;				// add the length of the '/' between the directorys
c0106bc2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
        inode = inode->parent;			// next directory
c0106bc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106bc9:	8b 40 3c             	mov    0x3c(%eax),%eax
c0106bcc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106bcf:	eb 01                	jmp    c0106bd2 <sys_getcwd+0x6e>
    vfs_inode_t *inode = current_thread->process->cwd;

    if(inode == root)
        cwdsize++;

    while(inode != root)
c0106bd1:	90                   	nop
c0106bd2:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106bd7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106bda:	75 d1                	jne    c0106bad <sys_getcwd+0x49>
        cwdsize += strlen(inode->name);		// add the lenght of the directory name
        cwdsize++;				// add the length of the '/' between the directorys
        inode = inode->parent;			// next directory
    }

    if(buffer == NULL)
c0106bdc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106be0:	75 11                	jne    c0106bf3 <sys_getcwd+0x8f>
    {
        (*cpu)->CPU_ARG0 = 0;
c0106be2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106be5:	8b 00                	mov    (%eax),%eax
c0106be7:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        return;
c0106bee:	e9 c0 00 00 00       	jmp    c0106cb3 <sys_getcwd+0x14f>
    }

    if(buffersize < cwdsize)
c0106bf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106bf6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106bf9:	7d 11                	jge    c0106c0c <sys_getcwd+0xa8>
    {
        (*cpu)->CPU_ARG0 = 0;
c0106bfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bfe:	8b 00                	mov    (%eax),%eax
c0106c00:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        return;
c0106c07:	e9 a7 00 00 00       	jmp    c0106cb3 <sys_getcwd+0x14f>
    }

    currentend = cwdsize - 1;		// because first element is buffer[0] (instead of buffer[1])
c0106c0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c0f:	83 e8 01             	sub    $0x1,%eax
c0106c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    buffer[currentend--] = '\0';
c0106c15:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106c18:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c1b:	01 d0                	add    %edx,%eax
c0106c1d:	c6 00 00             	movb   $0x0,(%eax)
c0106c20:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
    inode = current_thread->process->cwd;
c0106c24:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106c29:	8b 40 04             	mov    0x4(%eax),%eax
c0106c2c:	8b 40 18             	mov    0x18(%eax),%eax
c0106c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(inode == root)
c0106c32:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106c37:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106c3a:	75 60                	jne    c0106c9c <sys_getcwd+0x138>
        buffer[currentend] = '/';
c0106c3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106c3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c42:	01 d0                	add    %edx,%eax
c0106c44:	c6 00 2f             	movb   $0x2f,(%eax)

    while(inode != root)
c0106c47:	eb 53                	jmp    c0106c9c <sys_getcwd+0x138>
    {
        currentend -= (strlen(inode->name) - 1);
c0106c49:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0106c4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c4f:	8b 00                	mov    (%eax),%eax
c0106c51:	89 04 24             	mov    %eax,(%esp)
c0106c54:	e8 d0 bd ff ff       	call   c0102a29 <strlen>
c0106c59:	89 da                	mov    %ebx,%edx
c0106c5b:	29 c2                	sub    %eax,%edx
c0106c5d:	89 d0                	mov    %edx,%eax
c0106c5f:	83 c0 01             	add    $0x1,%eax
c0106c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
        strcpy(&buffer[currentend--], inode->name);
c0106c65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c68:	8b 00                	mov    (%eax),%eax
c0106c6a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0106c6d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106c70:	01 ca                	add    %ecx,%edx
c0106c72:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106c76:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106c7a:	89 14 24             	mov    %edx,(%esp)
c0106c7d:	e8 ce bd ff ff       	call   c0102a50 <strcpy>
        buffer[currentend--] = '/';
c0106c82:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c88:	01 d0                	add    %edx,%eax
c0106c8a:	c6 00 2f             	movb   $0x2f,(%eax)
c0106c8d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
        inode = inode->parent;
c0106c91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c94:	8b 40 3c             	mov    0x3c(%eax),%eax
c0106c97:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106c9a:	eb 01                	jmp    c0106c9d <sys_getcwd+0x139>
    inode = current_thread->process->cwd;

    if(inode == root)
        buffer[currentend] = '/';

    while(inode != root)
c0106c9c:	90                   	nop
c0106c9d:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106ca2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106ca5:	75 a2                	jne    c0106c49 <sys_getcwd+0xe5>
        strcpy(&buffer[currentend--], inode->name);
        buffer[currentend--] = '/';
        inode = inode->parent;
    }

    (*cpu)->CPU_ARG0 =(unsigned int) buffer;
c0106ca7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106caa:	8b 00                	mov    (%eax),%eax
c0106cac:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106caf:	89 50 28             	mov    %edx,0x28(%eax)
    return;
c0106cb2:	90                   	nop
}
c0106cb3:	83 c4 34             	add    $0x34,%esp
c0106cb6:	5b                   	pop    %ebx
c0106cb7:	5d                   	pop    %ebp
c0106cb8:	c3                   	ret    

c0106cb9 <launch_pipe_handlers>:

void launch_pipe_handlers(vfs_buffer_info_t *pipe)
{
c0106cb9:	55                   	push   %ebp
c0106cba:	89 e5                	mov    %esp,%ebp
c0106cbc:	53                   	push   %ebx
c0106cbd:	83 ec 34             	sub    $0x34,%esp
    struct list_node *node = pipe->handlers->head->next;
c0106cc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cc3:	8b 40 0c             	mov    0xc(%eax),%eax
c0106cc6:	8b 40 04             	mov    0x4(%eax),%eax
c0106cc9:	8b 00                	mov    (%eax),%eax
c0106ccb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct list_node *head = pipe->handlers->head;
c0106cce:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cd1:	8b 40 0c             	mov    0xc(%eax),%eax
c0106cd4:	8b 40 04             	mov    0x4(%eax),%eax
c0106cd7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while(node != head)
c0106cda:	eb 5e                	jmp    c0106d3a <launch_pipe_handlers+0x81>
    {
        vfs_pipe_trigger_t *trigger = (vfs_pipe_trigger_t*) node->element;
c0106cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cdf:	8b 40 08             	mov    0x8(%eax),%eax
c0106ce2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        thread_create(current_thread->process, USERMODE, trigger->eip, NULL, trigger->argc, trigger->argv, NULL, NULL);
c0106ce5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ce8:	8b 58 08             	mov    0x8(%eax),%ebx
c0106ceb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106cee:	8b 48 04             	mov    0x4(%eax),%ecx
c0106cf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106cf4:	8b 10                	mov    (%eax),%edx
c0106cf6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106cfb:	8b 40 04             	mov    0x4(%eax),%eax
c0106cfe:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
c0106d05:	00 
c0106d06:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0106d0d:	00 
c0106d0e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c0106d12:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d16:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106d1d:	00 
c0106d1e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106d22:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0106d29:	00 
c0106d2a:	89 04 24             	mov    %eax,(%esp)
c0106d2d:	e8 e1 de ff ff       	call   c0104c13 <thread_create>

        node = node->next;
c0106d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d35:	8b 00                	mov    (%eax),%eax
c0106d37:	89 45 f4             	mov    %eax,-0xc(%ebp)
void launch_pipe_handlers(vfs_buffer_info_t *pipe)
{
    struct list_node *node = pipe->handlers->head->next;
    struct list_node *head = pipe->handlers->head;

    while(node != head)
c0106d3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106d40:	75 9a                	jne    c0106cdc <launch_pipe_handlers+0x23>
        vfs_pipe_trigger_t *trigger = (vfs_pipe_trigger_t*) node->element;
        thread_create(current_thread->process, USERMODE, trigger->eip, NULL, trigger->argc, trigger->argv, NULL, NULL);

        node = node->next;
    }
}
c0106d42:	83 c4 34             	add    $0x34,%esp
c0106d45:	5b                   	pop    %ebx
c0106d46:	5d                   	pop    %ebp
c0106d47:	c3                   	ret    

c0106d48 <set_pipe_trigger>:

void set_pipe_trigger(struct cpu_state **cpu)
{
c0106d48:	55                   	push   %ebp
c0106d49:	89 e5                	mov    %esp,%ebp
c0106d4b:	83 ec 28             	sub    $0x28,%esp
    int fd = (*cpu)->CPU_ARG1;
c0106d4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d51:	8b 00                	mov    (%eax),%eax
c0106d53:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vfs_inode_t *inode = get_fd(fd)->inode;
c0106d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d5c:	89 04 24             	mov    %eax,(%esp)
c0106d5f:	e8 2c ef ff ff       	call   c0105c90 <get_fd>
c0106d64:	8b 40 04             	mov    0x4(%eax),%eax
c0106d67:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(vfs_access(inode, R_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c0106d6a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106d6f:	8b 40 04             	mov    0x4(%eax),%eax
c0106d72:	8b 50 08             	mov    0x8(%eax),%edx
c0106d75:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106d7a:	8b 40 04             	mov    0x4(%eax),%eax
c0106d7d:	8b 40 04             	mov    0x4(%eax),%eax
c0106d80:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d84:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d88:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106d8f:	00 
c0106d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d93:	89 04 24             	mov    %eax,(%esp)
c0106d96:	e8 cf e9 ff ff       	call   c010576a <vfs_access>
c0106d9b:	85 c0                	test   %eax,%eax
c0106d9d:	75 68                	jne    c0106e07 <set_pipe_trigger+0xbf>
    {
        vfs_buffer_info_t *pipe = inode->buffer;
c0106d9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106da2:	8b 40 38             	mov    0x38(%eax),%eax
c0106da5:	89 45 ec             	mov    %eax,-0x14(%ebp)

        vfs_pipe_trigger_t *trigger = malloc(sizeof(vfs_pipe_trigger_t));
c0106da8:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0106daf:	e8 f2 68 00 00       	call   c010d6a6 <malloc>
c0106db4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        trigger->eip = (*cpu)->CPU_ARG2;
c0106db7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dba:	8b 00                	mov    (%eax),%eax
c0106dbc:	8b 50 24             	mov    0x24(%eax),%edx
c0106dbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106dc2:	89 10                	mov    %edx,(%eax)
        trigger->argc = (*cpu)->CPU_ARG3;
c0106dc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dc7:	8b 00                	mov    (%eax),%eax
c0106dc9:	8b 40 20             	mov    0x20(%eax),%eax
c0106dcc:	89 c2                	mov    %eax,%edx
c0106dce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106dd1:	89 50 04             	mov    %edx,0x4(%eax)
        trigger->argv = (void**)(*cpu)->CPU_ARG4;
c0106dd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dd7:	8b 00                	mov    (%eax),%eax
c0106dd9:	8b 40 14             	mov    0x14(%eax),%eax
c0106ddc:	89 c2                	mov    %eax,%edx
c0106dde:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106de1:	89 50 08             	mov    %edx,0x8(%eax)
        list_push_back(pipe->handlers, (void*) trigger);
c0106de4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106de7:	8b 40 0c             	mov    0xc(%eax),%eax
c0106dea:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106ded:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106df1:	89 04 24             	mov    %eax,(%esp)
c0106df4:	e8 69 b8 ff ff       	call   c0102662 <list_push_back>

        (*cpu)->CPU_ARG0 = _SUCCESS;
c0106df9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dfc:	8b 00                	mov    (%eax),%eax
c0106dfe:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c0106e05:	eb 0c                	jmp    c0106e13 <set_pipe_trigger+0xcb>
    }
    else
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106e07:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e0a:	8b 00                	mov    (%eax),%eax
c0106e0c:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    }
}
c0106e13:	c9                   	leave  
c0106e14:	c3                   	ret    

c0106e15 <sys_stat>:


void sys_stat(struct cpu_state **cpu)
{
c0106e15:	55                   	push   %ebp
c0106e16:	89 e5                	mov    %esp,%ebp
c0106e18:	53                   	push   %ebx
c0106e19:	83 ec 24             	sub    $0x24,%esp
    if((*cpu)->CPU_ARG1 == 0 || (*cpu)->CPU_ARG2 == 0)
c0106e1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e1f:	8b 00                	mov    (%eax),%eax
c0106e21:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106e24:	85 c0                	test   %eax,%eax
c0106e26:	74 0c                	je     c0106e34 <sys_stat+0x1f>
c0106e28:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e2b:	8b 00                	mov    (%eax),%eax
c0106e2d:	8b 40 24             	mov    0x24(%eax),%eax
c0106e30:	85 c0                	test   %eax,%eax
c0106e32:	75 0e                	jne    c0106e42 <sys_stat+0x2d>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106e34:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e37:	8b 00                	mov    (%eax),%eax
c0106e39:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106e40:	eb 46                	jmp    c0106e88 <sys_stat+0x73>
    }

    vfs_inode_t *node = vfs_lookup_path((char*)(*cpu)->CPU_ARG1);
c0106e42:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e45:	8b 00                	mov    (%eax),%eax
c0106e47:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106e4a:	89 04 24             	mov    %eax,(%esp)
c0106e4d:	e8 6d ea ff ff       	call   c01058bf <vfs_lookup_path>
c0106e52:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(node == NULL)
c0106e55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e59:	75 0e                	jne    c0106e69 <sys_stat+0x54>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106e5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e5e:	8b 00                	mov    (%eax),%eax
c0106e60:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106e67:	eb 1f                	jmp    c0106e88 <sys_stat+0x73>
    }

    (*cpu)->CPU_ARG0 = vfs_stat(node,(struct stat *)(*cpu)->CPU_ARG2);
c0106e69:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e6c:	8b 18                	mov    (%eax),%ebx
c0106e6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e71:	8b 00                	mov    (%eax),%eax
c0106e73:	8b 40 24             	mov    0x24(%eax),%eax
c0106e76:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e7d:	89 04 24             	mov    %eax,(%esp)
c0106e80:	e8 9c e8 ff ff       	call   c0105721 <vfs_stat>
c0106e85:	89 43 28             	mov    %eax,0x28(%ebx)
}
c0106e88:	83 c4 24             	add    $0x24,%esp
c0106e8b:	5b                   	pop    %ebx
c0106e8c:	5d                   	pop    %ebp
c0106e8d:	c3                   	ret    

c0106e8e <sys_fstat>:


void sys_fstat(struct cpu_state **cpu)
{
c0106e8e:	55                   	push   %ebp
c0106e8f:	89 e5                	mov    %esp,%ebp
c0106e91:	53                   	push   %ebx
c0106e92:	83 ec 24             	sub    $0x24,%esp
    if((*cpu)->CPU_ARG1 == 0)
c0106e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e98:	8b 00                	mov    (%eax),%eax
c0106e9a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106e9d:	85 c0                	test   %eax,%eax
c0106e9f:	75 11                	jne    c0106eb2 <sys_fstat+0x24>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106ea1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ea4:	8b 00                	mov    (%eax),%eax
c0106ea6:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
c0106ead:	e9 a1 00 00 00       	jmp    c0106f53 <sys_fstat+0xc5>
        return;
    }

    iterator_t file_it = iterator_create(current_thread->process->files);
c0106eb2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106eb7:	8b 40 04             	mov    0x4(%eax),%eax
c0106eba:	8b 50 1c             	mov    0x1c(%eax),%edx
c0106ebd:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0106ec0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ec4:	89 04 24             	mov    %eax,(%esp)
c0106ec7:	e8 7b b9 ff ff       	call   c0102847 <iterator_create>
c0106ecc:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(current_thread->process->files) && !list_is_last(&file_it))
c0106ecf:	eb 50                	jmp    c0106f21 <sys_fstat+0x93>
    {
        struct fd *file = list_get_current(&file_it);
c0106ed1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0106ed4:	89 04 24             	mov    %eax,(%esp)
c0106ed7:	e8 34 ba ff ff       	call   c0102910 <list_get_current>
c0106edc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(file->id == (*cpu)->CPU_ARG1)
c0106edf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ee2:	8b 10                	mov    (%eax),%edx
c0106ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ee7:	8b 00                	mov    (%eax),%eax
c0106ee9:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106eec:	39 c2                	cmp    %eax,%edx
c0106eee:	75 26                	jne    c0106f16 <sys_fstat+0x88>
        {
            (*cpu)->CPU_ARG0 = vfs_stat(file->inode, (struct stat *)(*cpu)->CPU_ARG2);
c0106ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef3:	8b 18                	mov    (%eax),%ebx
c0106ef5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef8:	8b 00                	mov    (%eax),%eax
c0106efa:	8b 40 24             	mov    0x24(%eax),%eax
c0106efd:	89 c2                	mov    %eax,%edx
c0106eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f02:	8b 40 04             	mov    0x4(%eax),%eax
c0106f05:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f09:	89 04 24             	mov    %eax,(%esp)
c0106f0c:	e8 10 e8 ff ff       	call   c0105721 <vfs_stat>
c0106f11:	89 43 28             	mov    %eax,0x28(%ebx)
c0106f14:	eb 3d                	jmp    c0106f53 <sys_fstat+0xc5>
            return;
        }
        list_next(&file_it);
c0106f16:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0106f19:	89 04 24             	mov    %eax,(%esp)
c0106f1c:	e8 14 ba ff ff       	call   c0102935 <list_next>
        (*cpu)->CPU_ARG0 = _FAILURE;
        return;
    }

    iterator_t file_it = iterator_create(current_thread->process->files);
    while(!list_is_empty(current_thread->process->files) && !list_is_last(&file_it))
c0106f21:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106f26:	8b 40 04             	mov    0x4(%eax),%eax
c0106f29:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f2c:	89 04 24             	mov    %eax,(%esp)
c0106f2f:	e8 d2 b8 ff ff       	call   c0102806 <list_is_empty>
c0106f34:	85 c0                	test   %eax,%eax
c0106f36:	75 0f                	jne    c0106f47 <sys_fstat+0xb9>
c0106f38:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0106f3b:	89 04 24             	mov    %eax,(%esp)
c0106f3e:	e8 19 ba ff ff       	call   c010295c <list_is_last>
c0106f43:	85 c0                	test   %eax,%eax
c0106f45:	74 8a                	je     c0106ed1 <sys_fstat+0x43>
            return;
        }
        list_next(&file_it);
    }

    (*cpu)->CPU_ARG0 = _FAILURE;
c0106f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f4a:	8b 00                	mov    (%eax),%eax
c0106f4c:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
}
c0106f53:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106f56:	c9                   	leave  
c0106f57:	c3                   	ret    

c0106f58 <sys_chmod>:

void sys_chmod(struct cpu_state **cpu)
{
c0106f58:	55                   	push   %ebp
c0106f59:	89 e5                	mov    %esp,%ebp
c0106f5b:	83 ec 28             	sub    $0x28,%esp
    // Check if path is not NULL
    char *file = (char *)(*cpu)->CPU_ARG1;
c0106f5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f61:	8b 00                	mov    (%eax),%eax
c0106f63:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(file == NULL)
c0106f69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106f6d:	75 0e                	jne    c0106f7d <sys_chmod+0x25>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106f6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f72:	8b 00                	mov    (%eax),%eax
c0106f74:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106f7b:	eb 5f                	jmp    c0106fdc <sys_chmod+0x84>
    }
    // Lookup path
    vfs_inode_t *node = vfs_lookup_path(file);
c0106f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f80:	89 04 24             	mov    %eax,(%esp)
c0106f83:	e8 37 e9 ff ff       	call   c01058bf <vfs_lookup_path>
c0106f88:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(node == NULL)
c0106f8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f8f:	75 0e                	jne    c0106f9f <sys_chmod+0x47>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106f91:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f94:	8b 00                	mov    (%eax),%eax
c0106f96:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106f9d:	eb 3d                	jmp    c0106fdc <sys_chmod+0x84>
    }
    // Check permissions
    if(node->stat.st_uid != current_thread->process->uid)
c0106f9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106fa2:	8b 50 18             	mov    0x18(%eax),%edx
c0106fa5:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106faa:	8b 40 04             	mov    0x4(%eax),%eax
c0106fad:	8b 40 04             	mov    0x4(%eax),%eax
c0106fb0:	39 c2                	cmp    %eax,%edx
c0106fb2:	74 0e                	je     c0106fc2 <sys_chmod+0x6a>
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106fb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fb7:	8b 00                	mov    (%eax),%eax
c0106fb9:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
        return;
c0106fc0:	eb 1a                	jmp    c0106fdc <sys_chmod+0x84>
    }
    // change mode
    node->stat.st_mode = (*cpu)->CPU_ARG2;
c0106fc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fc5:	8b 00                	mov    (%eax),%eax
c0106fc7:	8b 50 24             	mov    0x24(%eax),%edx
c0106fca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106fcd:	89 50 0c             	mov    %edx,0xc(%eax)
    (*cpu)->CPU_ARG0 = _SUCCESS;
c0106fd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fd3:	8b 00                	mov    (%eax),%eax
c0106fd5:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
}
c0106fdc:	c9                   	leave  
c0106fdd:	c3                   	ret    

c0106fde <sys_lchown>:


void sys_lchown(struct cpu_state **cpu)
{
c0106fde:	55                   	push   %ebp
c0106fdf:	89 e5                	mov    %esp,%ebp
c0106fe1:	83 ec 28             	sub    $0x28,%esp
    char *file = (char *)(*cpu)->CPU_ARG1;
c0106fe4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fe7:	8b 00                	mov    (%eax),%eax
c0106fe9:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106fec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(file == NULL)
c0106fef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ff3:	75 11                	jne    c0107006 <sys_lchown+0x28>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106ff5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ff8:	8b 00                	mov    (%eax),%eax
c0106ffa:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0107001:	e9 86 00 00 00       	jmp    c010708c <sys_lchown+0xae>
    }
    // Lookup path
    vfs_inode_t *node = vfs_lookup_path(file);
c0107006:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107009:	89 04 24             	mov    %eax,(%esp)
c010700c:	e8 ae e8 ff ff       	call   c01058bf <vfs_lookup_path>
c0107011:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(node == NULL)
c0107014:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107018:	75 0e                	jne    c0107028 <sys_lchown+0x4a>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c010701a:	8b 45 08             	mov    0x8(%ebp),%eax
c010701d:	8b 00                	mov    (%eax),%eax
c010701f:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0107026:	eb 64                	jmp    c010708c <sys_lchown+0xae>
    }
    // Check permissions
    if(node->stat.st_uid != current_thread->process->uid)
c0107028:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010702b:	8b 50 18             	mov    0x18(%eax),%edx
c010702e:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0107033:	8b 40 04             	mov    0x4(%eax),%eax
c0107036:	8b 40 04             	mov    0x4(%eax),%eax
c0107039:	39 c2                	cmp    %eax,%edx
c010703b:	74 0e                	je     c010704b <sys_lchown+0x6d>
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c010703d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107040:	8b 00                	mov    (%eax),%eax
c0107042:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
        return;
c0107049:	eb 41                	jmp    c010708c <sys_lchown+0xae>
    }

    // do to follow link
    if(node->type == VFS_LINK)
c010704b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010704e:	8b 40 04             	mov    0x4(%eax),%eax
c0107051:	83 f8 03             	cmp    $0x3,%eax
c0107054:	75 0e                	jne    c0107064 <sys_lchown+0x86>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0107056:	8b 45 08             	mov    0x8(%ebp),%eax
c0107059:	8b 00                	mov    (%eax),%eax
c010705b:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0107062:	eb 28                	jmp    c010708c <sys_lchown+0xae>
    }

    node->stat.st_uid = (uid_t) (*cpu)->CPU_ARG2;
c0107064:	8b 45 08             	mov    0x8(%ebp),%eax
c0107067:	8b 00                	mov    (%eax),%eax
c0107069:	8b 50 24             	mov    0x24(%eax),%edx
c010706c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010706f:	89 50 18             	mov    %edx,0x18(%eax)
    node->stat.st_gid = (gid_t) (*cpu)->CPU_ARG3;
c0107072:	8b 45 08             	mov    0x8(%ebp),%eax
c0107075:	8b 00                	mov    (%eax),%eax
c0107077:	8b 50 20             	mov    0x20(%eax),%edx
c010707a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010707d:	89 50 1c             	mov    %edx,0x1c(%eax)
    (*cpu)->CPU_ARG0 = _SUCCESS;
c0107080:	8b 45 08             	mov    0x8(%ebp),%eax
c0107083:	8b 00                	mov    (%eax),%eax
c0107085:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
}
c010708c:	c9                   	leave  
c010708d:	c3                   	ret    

c010708e <map_all>:
 * @brief maps all multiboot modules into the vfs
 * @param mb_info the multiboot struct with the modules in it
 * @return how many modules got mapped and how many failed
 */
struct mapping_statistics map_all(struct multiboot_struct *mb_info)
{
c010708e:	55                   	push   %ebp
c010708f:	89 e5                	mov    %esp,%ebp
c0107091:	83 ec 28             	sub    $0x28,%esp
    struct mapping_statistics s;
    memset(&s, 0, sizeof(struct mapping_statistics));
c0107094:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
c010709b:	00 
c010709c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01070a3:	00 
c01070a4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01070a7:	89 04 24             	mov    %eax,(%esp)
c01070aa:	e8 c6 be ff ff       	call   c0102f75 <memset>
    struct mods_add *modules = (struct mods_add*) mb_info->mods_addr;
c01070af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070b2:	8b 40 18             	mov    0x18(%eax),%eax
c01070b5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(s.total = 0; s.total < mb_info->mods_count; s.total++)
c01070b8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01070bf:	eb 36                	jmp    c01070f7 <map_all+0x69>
    {
        if(map_module(&modules[s.total]) == success)
c01070c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070c4:	89 c2                	mov    %eax,%edx
c01070c6:	c1 e2 04             	shl    $0x4,%edx
c01070c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070cc:	01 d0                	add    %edx,%eax
c01070ce:	89 04 24             	mov    %eax,(%esp)
c01070d1:	e8 4b 00 00 00       	call   c0107121 <map_module>
c01070d6:	85 c0                	test   %eax,%eax
c01070d8:	75 0b                	jne    c01070e5 <map_all+0x57>
            s.load_success++;
c01070da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070dd:	83 c0 01             	add    $0x1,%eax
c01070e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01070e3:	eb 09                	jmp    c01070ee <map_all+0x60>
        else
            s.load_failed++;
c01070e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070e8:	83 c0 01             	add    $0x1,%eax
c01070eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
{
    struct mapping_statistics s;
    memset(&s, 0, sizeof(struct mapping_statistics));
    struct mods_add *modules = (struct mods_add*) mb_info->mods_addr;

    for(s.total = 0; s.total < mb_info->mods_count; s.total++)
c01070ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070f1:	83 c0 01             	add    $0x1,%eax
c01070f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01070f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070fa:	89 c2                	mov    %eax,%edx
c01070fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070ff:	8b 40 14             	mov    0x14(%eax),%eax
c0107102:	39 c2                	cmp    %eax,%edx
c0107104:	72 bb                	jb     c01070c1 <map_all+0x33>
            s.load_success++;
        else
            s.load_failed++;
    }

    return s;
c0107106:	8b 45 08             	mov    0x8(%ebp),%eax
c0107109:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010710c:	89 10                	mov    %edx,(%eax)
c010710e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107111:	89 50 04             	mov    %edx,0x4(%eax)
c0107114:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107117:	89 50 08             	mov    %edx,0x8(%eax)
}
c010711a:	8b 45 08             	mov    0x8(%ebp),%eax
c010711d:	c9                   	leave  
c010711e:	c2 04 00             	ret    $0x4

c0107121 <map_module>:
 * @brief maps one module into the vfs
 * @param module the information i need to map this module
 * @return success or failture
 */
success_t map_module(struct mods_add *module)
{
c0107121:	55                   	push   %ebp
c0107122:	89 e5                	mov    %esp,%ebp
c0107124:	83 ec 48             	sub    $0x48,%esp
    if(module == NULL)  // i don't think this will ever happen, but you have what you have
c0107127:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010712b:	75 0a                	jne    c0107137 <map_module+0x16>
        return failed;
c010712d:	b8 01 00 00 00       	mov    $0x1,%eax
c0107132:	e9 3d 01 00 00       	jmp    c0107274 <map_module+0x153>

    char *path = NULL;  // later i will need path and name
c0107137:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    char *name = NULL;
c010713e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

    if(split_module_string(module->string, &path, &name) == failed)     // if i can't split the module string there is no reason for executing further
c0107145:	8b 45 08             	mov    0x8(%ebp),%eax
c0107148:	8b 40 08             	mov    0x8(%eax),%eax
c010714b:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010714e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107152:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0107155:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107159:	89 04 24             	mov    %eax,(%esp)
c010715c:	e8 15 01 00 00       	call   c0107276 <split_module_string>
c0107161:	83 f8 01             	cmp    $0x1,%eax
c0107164:	75 0a                	jne    c0107170 <map_module+0x4f>
        return failed;
c0107166:	b8 01 00 00 00       	mov    $0x1,%eax
c010716b:	e9 04 01 00 00       	jmp    c0107274 <map_module+0x153>

//    printf("%s%s\n", path, name);

    vfs_inode_t *node = vfs_create_path(path, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH | S_IFDIR, 0, 0); // i need a node to place the module in
c0107170:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107173:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010717a:	00 
c010717b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107182:	00 
c0107183:	c7 44 24 04 c5 12 00 	movl   $0x12c5,0x4(%esp)
c010718a:	00 
c010718b:	89 04 24             	mov    %eax,(%esp)
c010718e:	e8 5d e8 ff ff       	call   c01059f0 <vfs_create_path>
c0107193:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int size = module->mod_end - module->mod_start;     // basic stuff
c0107196:	8b 45 08             	mov    0x8(%ebp),%eax
c0107199:	8b 50 04             	mov    0x4(%eax),%edx
c010719c:	8b 45 08             	mov    0x8(%ebp),%eax
c010719f:	8b 00                	mov    (%eax),%eax
c01071a1:	89 d1                	mov    %edx,%ecx
c01071a3:	29 c1                	sub    %eax,%ecx
c01071a5:	89 c8                	mov    %ecx,%eax
c01071a7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(size < 0)        // should never happen, but you never know
c01071aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01071ae:	79 20                	jns    c01071d0 <map_module+0xaf>
    {
        free(path);     // i have to free the allocated memory (to avoid memory leaks)
c01071b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071b3:	89 04 24             	mov    %eax,(%esp)
c01071b6:	e8 d2 65 00 00       	call   c010d78d <free>
        free(name);
c01071bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01071be:	89 04 24             	mov    %eax,(%esp)
c01071c1:	e8 c7 65 00 00       	call   c010d78d <free>
        return failed;
c01071c6:	b8 01 00 00 00       	mov    $0x1,%eax
c01071cb:	e9 a4 00 00 00       	jmp    c0107274 <map_module+0x153>
    }

    int pages = NUM_PAGES(size);
c01071d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071d3:	05 ff 0f 00 00       	add    $0xfff,%eax
c01071d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01071dd:	c1 e8 0c             	shr    $0xc,%eax
c01071e0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    vaddr_t virtaddr = vmm_automap_kernel_range(current_context, module->mod_start, pages, VMM_WRITABLE);   // something about physical and virtual memory and kernel and user space... ask someone else
c01071e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01071e6:	8b 10                	mov    (%eax),%edx
c01071e8:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c01071ed:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01071f4:	00 
c01071f5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01071f8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01071fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107200:	89 04 24             	mov    %eax,(%esp)
c0107203:	e8 2c 60 00 00       	call   c010d234 <vmm_automap_kernel_range>
c0107208:	89 45 e8             	mov    %eax,-0x18(%ebp)

    vfs_inode_t *file = vfs_create_inode(name,  S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH, node, 0, 0);   // create the module in the vfs
c010720b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010720e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0107215:	00 
c0107216:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010721d:	00 
c010721e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107221:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107225:	c7 44 24 04 c0 5b 00 	movl   $0x5bc0,0x4(%esp)
c010722c:	00 
c010722d:	89 04 24             	mov    %eax,(%esp)
c0107230:	e8 d4 df ff ff       	call   c0105209 <vfs_create_inode>
c0107235:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    vfs_write(file, 0, (void*)virtaddr, size);
c0107238:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010723b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010723e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0107242:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107246:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010724d:	00 
c010724e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107251:	89 04 24             	mov    %eax,(%esp)
c0107254:	e8 7e e1 ff ff       	call   c01053d7 <vfs_write>

    free(path);     // "we don't waste memory" (tdotu)
c0107259:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010725c:	89 04 24             	mov    %eax,(%esp)
c010725f:	e8 29 65 00 00       	call   c010d78d <free>
    free(name);
c0107264:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107267:	89 04 24             	mov    %eax,(%esp)
c010726a:	e8 1e 65 00 00       	call   c010d78d <free>

    return success; // be happy
c010726f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107274:	c9                   	leave  
c0107275:	c3                   	ret    

c0107276 <split_module_string>:
 * @param path_buffer the adress of the char pointer in which the path should be placed
 * @param name_buffer the adress of the char pointer in which the name should be placed
 * @return success or failture
 */
success_t split_module_string(char *string, char **path_buffer, char **name_buffer)
{
c0107276:	55                   	push   %ebp
c0107277:	89 e5                	mov    %esp,%ebp
c0107279:	83 ec 28             	sub    $0x28,%esp
    if(string == NULL || path_buffer == NULL || name_buffer == NULL)    // i don't think this will ever happen, but you have what you have
c010727c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107280:	74 0c                	je     c010728e <split_module_string+0x18>
c0107282:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107286:	74 06                	je     c010728e <split_module_string+0x18>
c0107288:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010728c:	75 0a                	jne    c0107298 <split_module_string+0x22>
        return failed;
c010728e:	b8 01 00 00 00       	mov    $0x1,%eax
c0107293:	e9 6f 01 00 00       	jmp    c0107407 <split_module_string+0x191>

    int i, j;

    for(i = 0, j = 0; string[i] != '\0'; i++)       // in this loop i count the number of slashes in a string
c0107298:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010729f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01072a6:	eb 17                	jmp    c01072bf <split_module_string+0x49>
        if(string[i] == '/')
c01072a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01072ae:	01 d0                	add    %edx,%eax
c01072b0:	0f b6 00             	movzbl (%eax),%eax
c01072b3:	3c 2f                	cmp    $0x2f,%al
c01072b5:	75 04                	jne    c01072bb <split_module_string+0x45>
            j++;
c01072b7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    if(string == NULL || path_buffer == NULL || name_buffer == NULL)    // i don't think this will ever happen, but you have what you have
        return failed;

    int i, j;

    for(i = 0, j = 0; string[i] != '\0'; i++)       // in this loop i count the number of slashes in a string
c01072bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01072c5:	01 d0                	add    %edx,%eax
c01072c7:	0f b6 00             	movzbl (%eax),%eax
c01072ca:	84 c0                	test   %al,%al
c01072cc:	75 da                	jne    c01072a8 <split_module_string+0x32>
        if(string[i] == '/')
            j++;

    if(j == 0)  // illegal path
c01072ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01072d2:	75 0a                	jne    c01072de <split_module_string+0x68>
        return failed;
c01072d4:	b8 01 00 00 00       	mov    $0x1,%eax
c01072d9:	e9 29 01 00 00       	jmp    c0107407 <split_module_string+0x191>

    for(i = 0; j > 0; i++)                          // in this loop i count the number of characters from the beginning to the final slash
c01072de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01072e5:	eb 17                	jmp    c01072fe <split_module_string+0x88>
        if(string[i] == '/')
c01072e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01072ed:	01 d0                	add    %edx,%eax
c01072ef:	0f b6 00             	movzbl (%eax),%eax
c01072f2:	3c 2f                	cmp    $0x2f,%al
c01072f4:	75 04                	jne    c01072fa <split_module_string+0x84>
            j--;
c01072f6:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            j++;

    if(j == 0)  // illegal path
        return failed;

    for(i = 0; j > 0; i++)                          // in this loop i count the number of characters from the beginning to the final slash
c01072fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107302:	7f e3                	jg     c01072e7 <split_module_string+0x71>
        if(string[i] == '/')
            j--;

    (*path_buffer) = (char *)malloc(sizeof(char) * (i + 1));    // the length of the path is the number of characters to the final slash plus one for zero-termination
c0107304:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107307:	83 c0 01             	add    $0x1,%eax
c010730a:	89 04 24             	mov    %eax,(%esp)
c010730d:	e8 94 63 00 00       	call   c010d6a6 <malloc>
c0107312:	89 c2                	mov    %eax,%edx
c0107314:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107317:	89 10                	mov    %edx,(%eax)

    if((*path_buffer) == NULL)  // if malloc fails (virtually impossible)
c0107319:	8b 45 0c             	mov    0xc(%ebp),%eax
c010731c:	8b 00                	mov    (%eax),%eax
c010731e:	85 c0                	test   %eax,%eax
c0107320:	75 0a                	jne    c010732c <split_module_string+0xb6>
        return failed;
c0107322:	b8 01 00 00 00       	mov    $0x1,%eax
c0107327:	e9 db 00 00 00       	jmp    c0107407 <split_module_string+0x191>

    memset((*path_buffer), '\0', sizeof(char) * (i + 1));
c010732c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010732f:	83 c0 01             	add    $0x1,%eax
c0107332:	89 c2                	mov    %eax,%edx
c0107334:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107337:	8b 00                	mov    (%eax),%eax
c0107339:	89 54 24 08          	mov    %edx,0x8(%esp)
c010733d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107344:	00 
c0107345:	89 04 24             	mov    %eax,(%esp)
c0107348:	e8 28 bc ff ff       	call   c0102f75 <memset>

    (*name_buffer) = (char *)malloc(sizeof(char) * ((strlen(string) - i) + 1));     // the length of the name is the number of characters after the final slash plus one for zero-termination
c010734d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107350:	89 04 24             	mov    %eax,(%esp)
c0107353:	e8 d1 b6 ff ff       	call   c0102a29 <strlen>
c0107358:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010735b:	29 d0                	sub    %edx,%eax
c010735d:	83 c0 01             	add    $0x1,%eax
c0107360:	89 04 24             	mov    %eax,(%esp)
c0107363:	e8 3e 63 00 00       	call   c010d6a6 <malloc>
c0107368:	89 c2                	mov    %eax,%edx
c010736a:	8b 45 10             	mov    0x10(%ebp),%eax
c010736d:	89 10                	mov    %edx,(%eax)

    if((*name_buffer) == NULL)  // if malloc fails (virtually impossible)
c010736f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107372:	8b 00                	mov    (%eax),%eax
c0107374:	85 c0                	test   %eax,%eax
c0107376:	75 14                	jne    c010738c <split_module_string+0x116>
    {
        free(*path_buffer);     // i have to free the successfully allocated memory (to avoid memory leaks)
c0107378:	8b 45 0c             	mov    0xc(%ebp),%eax
c010737b:	8b 00                	mov    (%eax),%eax
c010737d:	89 04 24             	mov    %eax,(%esp)
c0107380:	e8 08 64 00 00       	call   c010d78d <free>
        return failed;
c0107385:	b8 01 00 00 00       	mov    $0x1,%eax
c010738a:	eb 7b                	jmp    c0107407 <split_module_string+0x191>
    }

    memset((*name_buffer), '\0', sizeof(char) * ((strlen(string) - i) + 1));
c010738c:	8b 45 08             	mov    0x8(%ebp),%eax
c010738f:	89 04 24             	mov    %eax,(%esp)
c0107392:	e8 92 b6 ff ff       	call   c0102a29 <strlen>
c0107397:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010739a:	29 d0                	sub    %edx,%eax
c010739c:	8d 50 01             	lea    0x1(%eax),%edx
c010739f:	8b 45 10             	mov    0x10(%ebp),%eax
c01073a2:	8b 00                	mov    (%eax),%eax
c01073a4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01073a8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01073af:	00 
c01073b0:	89 04 24             	mov    %eax,(%esp)
c01073b3:	e8 bd bb ff ff       	call   c0102f75 <memset>

    strncpy((*path_buffer), string, i);                         // copy the two parts of the string in the two other strings
c01073b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01073bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073be:	8b 00                	mov    (%eax),%eax
c01073c0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01073c4:	8b 55 08             	mov    0x8(%ebp),%edx
c01073c7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01073cb:	89 04 24             	mov    %eax,(%esp)
c01073ce:	e8 ce b6 ff ff       	call   c0102aa1 <strncpy>
    strncpy((*name_buffer), &string[i], strlen(string) - i);
c01073d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01073d6:	89 04 24             	mov    %eax,(%esp)
c01073d9:	e8 4b b6 ff ff       	call   c0102a29 <strlen>
c01073de:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01073e1:	89 c1                	mov    %eax,%ecx
c01073e3:	29 d1                	sub    %edx,%ecx
c01073e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01073e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01073eb:	01 c2                	add    %eax,%edx
c01073ed:	8b 45 10             	mov    0x10(%ebp),%eax
c01073f0:	8b 00                	mov    (%eax),%eax
c01073f2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01073f6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01073fa:	89 04 24             	mov    %eax,(%esp)
c01073fd:	e8 9f b6 ff ff       	call   c0102aa1 <strncpy>

    return success;
c0107402:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107407:	c9                   	leave  
c0107408:	c3                   	ret    

c0107409 <USER_INIT>:

list_t *users;		// user list
list_t *groups;		// group list

void USER_INIT(void)
{
c0107409:	55                   	push   %ebp
c010740a:	89 e5                	mov    %esp,%ebp
c010740c:	53                   	push   %ebx
c010740d:	83 ec 14             	sub    $0x14,%esp
    users = list_create();
c0107410:	e8 69 b1 ff ff       	call   c010257e <list_create>
c0107415:	a3 20 a0 11 c0       	mov    %eax,0xc011a020
    groups = list_create();
c010741a:	e8 5f b1 ff ff       	call   c010257e <list_create>
c010741f:	a3 1c a0 11 c0       	mov    %eax,0xc011a01c

    add_group("root", 0);
c0107424:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010742b:	00 
c010742c:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c0107433:	e8 97 04 00 00       	call   c01078cf <add_group>
    add_user("root","","/",0);
c0107438:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010743f:	00 
c0107440:	c7 44 24 08 aa 18 11 	movl   $0xc01118aa,0x8(%esp)
c0107447:	c0 
c0107448:	c7 44 24 04 ac 18 11 	movl   $0xc01118ac,0x4(%esp)
c010744f:	c0 
c0107450:	c7 04 24 a5 18 11 c0 	movl   $0xc01118a5,(%esp)
c0107457:	e8 2c 00 00 00       	call   c0107488 <add_user>
    add_user_to_group(get_user_by_id(0), get_group_by_id(0));
c010745c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0107463:	e8 72 06 00 00       	call   c0107ada <get_group_by_id>
c0107468:	89 c3                	mov    %eax,%ebx
c010746a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0107471:	e8 30 03 00 00       	call   c01077a6 <get_user_by_id>
c0107476:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010747a:	89 04 24             	mov    %eax,(%esp)
c010747d:	e8 75 07 00 00       	call   c0107bf7 <add_user_to_group>
}
c0107482:	83 c4 14             	add    $0x14,%esp
c0107485:	5b                   	pop    %ebx
c0107486:	5d                   	pop    %ebp
c0107487:	c3                   	ret    

c0107488 <add_user>:

int add_user(const char *uname, const char *upasswd, const char *uhome, uid_t uid)
{
c0107488:	55                   	push   %ebp
c0107489:	89 e5                	mov    %esp,%ebp
c010748b:	83 ec 38             	sub    $0x38,%esp
    if(uname == NULL || uname[0] == '\0')
c010748e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107492:	74 0a                	je     c010749e <add_user+0x16>
c0107494:	8b 45 08             	mov    0x8(%ebp),%eax
c0107497:	0f b6 00             	movzbl (%eax),%eax
c010749a:	84 c0                	test   %al,%al
c010749c:	75 0a                	jne    c01074a8 <add_user+0x20>
        return FAILTURE;
c010749e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01074a3:	e9 ad 01 00 00       	jmp    c0107655 <add_user+0x1cd>

    if(user_id_exists(uid))
c01074a8:	8b 45 14             	mov    0x14(%ebp),%eax
c01074ab:	89 04 24             	mov    %eax,(%esp)
c01074ae:	e8 38 09 00 00       	call   c0107deb <user_id_exists>
c01074b3:	85 c0                	test   %eax,%eax
c01074b5:	74 0a                	je     c01074c1 <add_user+0x39>
        return FAILTURE;
c01074b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01074bc:	e9 94 01 00 00       	jmp    c0107655 <add_user+0x1cd>

    if(user_name_exists(uname))
c01074c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01074c4:	89 04 24             	mov    %eax,(%esp)
c01074c7:	e8 30 0a 00 00       	call   c0107efc <user_name_exists>
c01074cc:	85 c0                	test   %eax,%eax
c01074ce:	74 0a                	je     c01074da <add_user+0x52>
        return FAILTURE;
c01074d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01074d5:	e9 7b 01 00 00       	jmp    c0107655 <add_user+0x1cd>

    user_t *new_user = (user_t *)malloc(sizeof(user_t));
c01074da:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c01074e1:	e8 c0 61 00 00       	call   c010d6a6 <malloc>
c01074e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    new_user->name = (char *)malloc(sizeof(char) * strlen(uname));
c01074e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01074ec:	89 04 24             	mov    %eax,(%esp)
c01074ef:	e8 35 b5 ff ff       	call   c0102a29 <strlen>
c01074f4:	89 04 24             	mov    %eax,(%esp)
c01074f7:	e8 aa 61 00 00       	call   c010d6a6 <malloc>
c01074fc:	89 c2                	mov    %eax,%edx
c01074fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107501:	89 10                	mov    %edx,(%eax)
    strcpy(new_user->name, uname);
c0107503:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107506:	8b 00                	mov    (%eax),%eax
c0107508:	8b 55 08             	mov    0x8(%ebp),%edx
c010750b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010750f:	89 04 24             	mov    %eax,(%esp)
c0107512:	e8 39 b5 ff ff       	call   c0102a50 <strcpy>

    if(upasswd == NULL)
c0107517:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010751b:	75 0c                	jne    c0107529 <add_user+0xa1>
        new_user->passwd = NULL;
c010751d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107520:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c0107527:	eb 30                	jmp    c0107559 <add_user+0xd1>
    else
    {
        new_user->passwd = (char *)malloc(sizeof(char) * strlen(upasswd));
c0107529:	8b 45 0c             	mov    0xc(%ebp),%eax
c010752c:	89 04 24             	mov    %eax,(%esp)
c010752f:	e8 f5 b4 ff ff       	call   c0102a29 <strlen>
c0107534:	89 04 24             	mov    %eax,(%esp)
c0107537:	e8 6a 61 00 00       	call   c010d6a6 <malloc>
c010753c:	89 c2                	mov    %eax,%edx
c010753e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107541:	89 50 04             	mov    %edx,0x4(%eax)
        strcpy(new_user->passwd, upasswd);
c0107544:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107547:	8b 40 04             	mov    0x4(%eax),%eax
c010754a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010754d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107551:	89 04 24             	mov    %eax,(%esp)
c0107554:	e8 f7 b4 ff ff       	call   c0102a50 <strcpy>
    }

    if(uhome != NULL)
c0107559:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010755d:	74 32                	je     c0107591 <add_user+0x109>
    {
        new_user->home = (char *)malloc(sizeof(char) * strlen(uhome));
c010755f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107562:	89 04 24             	mov    %eax,(%esp)
c0107565:	e8 bf b4 ff ff       	call   c0102a29 <strlen>
c010756a:	89 04 24             	mov    %eax,(%esp)
c010756d:	e8 34 61 00 00       	call   c010d6a6 <malloc>
c0107572:	89 c2                	mov    %eax,%edx
c0107574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107577:	89 50 08             	mov    %edx,0x8(%eax)
        strcpy(new_user->home, uhome);
c010757a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010757d:	8b 40 08             	mov    0x8(%eax),%eax
c0107580:	8b 55 10             	mov    0x10(%ebp),%edx
c0107583:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107587:	89 04 24             	mov    %eax,(%esp)
c010758a:	e8 c1 b4 ff ff       	call   c0102a50 <strcpy>
c010758f:	eb 7d                	jmp    c010760e <add_user+0x186>
    }
    else
    {
        new_user->home = (char *)malloc(sizeof(char) * (strlen("/home/") + strlen(uname)));
c0107591:	8b 45 08             	mov    0x8(%ebp),%eax
c0107594:	89 04 24             	mov    %eax,(%esp)
c0107597:	e8 8d b4 ff ff       	call   c0102a29 <strlen>
c010759c:	83 c0 06             	add    $0x6,%eax
c010759f:	89 04 24             	mov    %eax,(%esp)
c01075a2:	e8 ff 60 00 00       	call   c010d6a6 <malloc>
c01075a7:	89 c2                	mov    %eax,%edx
c01075a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075ac:	89 50 08             	mov    %edx,0x8(%eax)
        strcpy(new_user->home, "/home/");
c01075af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075b2:	8b 40 08             	mov    0x8(%eax),%eax
c01075b5:	c7 00 2f 68 6f 6d    	movl   $0x6d6f682f,(%eax)
c01075bb:	66 c7 40 04 65 2f    	movw   $0x2f65,0x4(%eax)
c01075c1:	c6 40 06 00          	movb   $0x0,0x6(%eax)
        strcat(new_user->home, uname);
c01075c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075c8:	8b 40 08             	mov    0x8(%eax),%eax
c01075cb:	8b 55 08             	mov    0x8(%ebp),%edx
c01075ce:	89 54 24 04          	mov    %edx,0x4(%esp)
c01075d2:	89 04 24             	mov    %eax,(%esp)
c01075d5:	e8 2c b5 ff ff       	call   c0102b06 <strcat>
        vfs_create_inode(new_user->name, S_IRUSR | S_IWUSR, vfs_lookup_path("/home/"), uid, 0);
c01075da:	c7 04 24 ad 18 11 c0 	movl   $0xc01118ad,(%esp)
c01075e1:	e8 d9 e2 ff ff       	call   c01058bf <vfs_lookup_path>
c01075e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01075e9:	8b 12                	mov    (%edx),%edx
c01075eb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01075f2:	00 
c01075f3:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01075f6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01075fa:	89 44 24 08          	mov    %eax,0x8(%esp)
c01075fe:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0107605:	00 
c0107606:	89 14 24             	mov    %edx,(%esp)
c0107609:	e8 fb db ff ff       	call   c0105209 <vfs_create_inode>
    }

    new_user->id = uid;
c010760e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107611:	8b 55 14             	mov    0x14(%ebp),%edx
c0107614:	89 50 0c             	mov    %edx,0xc(%eax)
    new_user->grps = list_create();
c0107617:	e8 62 af ff ff       	call   c010257e <list_create>
c010761c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010761f:	89 42 10             	mov    %eax,0x10(%edx)
    list_lock(users);
c0107622:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107627:	89 04 24             	mov    %eax,(%esp)
c010762a:	e8 f2 b1 ff ff       	call   c0102821 <list_lock>
    list_push_back(users, new_user);
c010762f:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107634:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107637:	89 54 24 04          	mov    %edx,0x4(%esp)
c010763b:	89 04 24             	mov    %eax,(%esp)
c010763e:	e8 1f b0 ff ff       	call   c0102662 <list_push_back>
    list_unlock(users);
c0107643:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107648:	89 04 24             	mov    %eax,(%esp)
c010764b:	e8 e4 b1 ff ff       	call   c0102834 <list_unlock>

    return SUCCESS;
c0107650:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107655:	c9                   	leave  
c0107656:	c3                   	ret    

c0107657 <remove_user>:

int remove_user(user_t *user)
{
c0107657:	55                   	push   %ebp
c0107658:	89 e5                	mov    %esp,%ebp
c010765a:	83 ec 38             	sub    $0x38,%esp
    iterator_t user_itr = iterator_create(users);
c010765d:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c0107663:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107666:	89 54 24 04          	mov    %edx,0x4(%esp)
c010766a:	89 04 24             	mov    %eax,(%esp)
c010766d:	e8 d5 b1 ff ff       	call   c0102847 <iterator_create>
c0107672:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c0107675:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010767a:	89 04 24             	mov    %eax,(%esp)
c010767d:	e8 9f b1 ff ff       	call   c0102821 <list_lock>
    while(!list_is_last(&user_itr))
c0107682:	e9 f8 00 00 00       	jmp    c010777f <remove_user+0x128>
    {
        if(((user_t *)list_get_current(&user_itr)) == user)
c0107687:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010768a:	89 04 24             	mov    %eax,(%esp)
c010768d:	e8 7e b2 ff ff       	call   c0102910 <list_get_current>
c0107692:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107695:	0f 85 d9 00 00 00    	jne    c0107774 <remove_user+0x11d>
        {
            user_t *usr = ((user_t *)list_get_current(&user_itr));
c010769b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010769e:	89 04 24             	mov    %eax,(%esp)
c01076a1:	e8 6a b2 ff ff       	call   c0102910 <list_get_current>
c01076a6:	89 45 f4             	mov    %eax,-0xc(%ebp)

            iterator_t grps_itr = iterator_create(usr->grps);
c01076a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076ac:	8b 50 10             	mov    0x10(%eax),%edx
c01076af:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076b2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01076b6:	89 04 24             	mov    %eax,(%esp)
c01076b9:	e8 89 b1 ff ff       	call   c0102847 <iterator_create>
c01076be:	83 ec 04             	sub    $0x4,%esp
            list_lock(usr->grps);
c01076c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076c4:	8b 40 10             	mov    0x10(%eax),%eax
c01076c7:	89 04 24             	mov    %eax,(%esp)
c01076ca:	e8 52 b1 ff ff       	call   c0102821 <list_lock>
            while(!list_is_last(&grps_itr))
c01076cf:	eb 25                	jmp    c01076f6 <remove_user+0x9f>
            {
                remove_user_from_group_lockfree(usr, (group_t *)list_get_current(&grps_itr));
c01076d1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076d4:	89 04 24             	mov    %eax,(%esp)
c01076d7:	e8 34 b2 ff ff       	call   c0102910 <list_get_current>
c01076dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01076e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076e3:	89 04 24             	mov    %eax,(%esp)
c01076e6:	e8 ca 05 00 00       	call   c0107cb5 <remove_user_from_group_lockfree>

                list_next(&grps_itr);
c01076eb:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076ee:	89 04 24             	mov    %eax,(%esp)
c01076f1:	e8 3f b2 ff ff       	call   c0102935 <list_next>
        {
            user_t *usr = ((user_t *)list_get_current(&user_itr));

            iterator_t grps_itr = iterator_create(usr->grps);
            list_lock(usr->grps);
            while(!list_is_last(&grps_itr))
c01076f6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076f9:	89 04 24             	mov    %eax,(%esp)
c01076fc:	e8 5b b2 ff ff       	call   c010295c <list_is_last>
c0107701:	85 c0                	test   %eax,%eax
c0107703:	74 cc                	je     c01076d1 <remove_user+0x7a>
            {
                remove_user_from_group_lockfree(usr, (group_t *)list_get_current(&grps_itr));

                list_next(&grps_itr);
            }
            list_unlock(usr->grps);
c0107705:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107708:	8b 40 10             	mov    0x10(%eax),%eax
c010770b:	89 04 24             	mov    %eax,(%esp)
c010770e:	e8 21 b1 ff ff       	call   c0102834 <list_unlock>

            free(usr->name);
c0107713:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107716:	8b 00                	mov    (%eax),%eax
c0107718:	89 04 24             	mov    %eax,(%esp)
c010771b:	e8 6d 60 00 00       	call   c010d78d <free>
            free(usr->passwd);
c0107720:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107723:	8b 40 04             	mov    0x4(%eax),%eax
c0107726:	89 04 24             	mov    %eax,(%esp)
c0107729:	e8 5f 60 00 00       	call   c010d78d <free>
            free(usr->home);
c010772e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107731:	8b 40 08             	mov    0x8(%eax),%eax
c0107734:	89 04 24             	mov    %eax,(%esp)
c0107737:	e8 51 60 00 00       	call   c010d78d <free>
            list_destroy(usr->grps);
c010773c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010773f:	8b 40 10             	mov    0x10(%eax),%eax
c0107742:	89 04 24             	mov    %eax,(%esp)
c0107745:	e8 8c ae ff ff       	call   c01025d6 <list_destroy>
            free(usr);
c010774a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010774d:	89 04 24             	mov    %eax,(%esp)
c0107750:	e8 38 60 00 00       	call   c010d78d <free>

            list_remove(&user_itr);
c0107755:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107758:	89 04 24             	mov    %eax,(%esp)
c010775b:	e8 42 b2 ff ff       	call   c01029a2 <list_remove>
            list_unlock(users);
c0107760:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107765:	89 04 24             	mov    %eax,(%esp)
c0107768:	e8 c7 b0 ff ff       	call   c0102834 <list_unlock>
            return SUCCESS;
c010776d:	b8 00 00 00 00       	mov    $0x0,%eax
c0107772:	eb 30                	jmp    c01077a4 <remove_user+0x14d>
        }

        list_next(&user_itr);
c0107774:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107777:	89 04 24             	mov    %eax,(%esp)
c010777a:	e8 b6 b1 ff ff       	call   c0102935 <list_next>

int remove_user(user_t *user)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);
    while(!list_is_last(&user_itr))
c010777f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107782:	89 04 24             	mov    %eax,(%esp)
c0107785:	e8 d2 b1 ff ff       	call   c010295c <list_is_last>
c010778a:	85 c0                	test   %eax,%eax
c010778c:	0f 84 f5 fe ff ff    	je     c0107687 <remove_user+0x30>
        }

        list_next(&user_itr);
    }

    list_unlock(users);
c0107792:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107797:	89 04 24             	mov    %eax,(%esp)
c010779a:	e8 95 b0 ff ff       	call   c0102834 <list_unlock>
    return FAILTURE;
c010779f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c01077a4:	c9                   	leave  
c01077a5:	c3                   	ret    

c01077a6 <get_user_by_id>:

user_t *get_user_by_id(uid_t id)
{
c01077a6:	55                   	push   %ebp
c01077a7:	89 e5                	mov    %esp,%ebp
c01077a9:	83 ec 28             	sub    $0x28,%esp
    iterator_t user_itr = iterator_create(users);
c01077ac:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c01077b2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01077b5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01077b9:	89 04 24             	mov    %eax,(%esp)
c01077bc:	e8 86 b0 ff ff       	call   c0102847 <iterator_create>
c01077c1:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c01077c4:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c01077c9:	89 04 24             	mov    %eax,(%esp)
c01077cc:	e8 50 b0 ff ff       	call   c0102821 <list_lock>
    while(!list_is_last(&user_itr))
c01077d1:	eb 3e                	jmp    c0107811 <get_user_by_id+0x6b>
    {
        if(((user_t *)list_get_current(&user_itr))->id == id)
c01077d3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01077d6:	89 04 24             	mov    %eax,(%esp)
c01077d9:	e8 32 b1 ff ff       	call   c0102910 <list_get_current>
c01077de:	8b 40 0c             	mov    0xc(%eax),%eax
c01077e1:	3b 45 08             	cmp    0x8(%ebp),%eax
c01077e4:	75 20                	jne    c0107806 <get_user_by_id+0x60>
        {
            user_t *target = (user_t *)list_get_current(&user_itr);
c01077e6:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01077e9:	89 04 24             	mov    %eax,(%esp)
c01077ec:	e8 1f b1 ff ff       	call   c0102910 <list_get_current>
c01077f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            list_unlock(users);
c01077f4:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c01077f9:	89 04 24             	mov    %eax,(%esp)
c01077fc:	e8 33 b0 ff ff       	call   c0102834 <list_unlock>
            return target;
c0107801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107804:	eb 2c                	jmp    c0107832 <get_user_by_id+0x8c>
        }

        list_next(&user_itr);
c0107806:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107809:	89 04 24             	mov    %eax,(%esp)
c010780c:	e8 24 b1 ff ff       	call   c0102935 <list_next>

user_t *get_user_by_id(uid_t id)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);
    while(!list_is_last(&user_itr))
c0107811:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107814:	89 04 24             	mov    %eax,(%esp)
c0107817:	e8 40 b1 ff ff       	call   c010295c <list_is_last>
c010781c:	85 c0                	test   %eax,%eax
c010781e:	74 b3                	je     c01077d3 <get_user_by_id+0x2d>
            return target;
        }

        list_next(&user_itr);
    }
    list_unlock(users);
c0107820:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107825:	89 04 24             	mov    %eax,(%esp)
c0107828:	e8 07 b0 ff ff       	call   c0102834 <list_unlock>
    return NULL;
c010782d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107832:	c9                   	leave  
c0107833:	c3                   	ret    

c0107834 <get_user_by_name>:

user_t *get_user_by_name(const char *uname)
{
c0107834:	55                   	push   %ebp
c0107835:	89 e5                	mov    %esp,%ebp
c0107837:	83 ec 28             	sub    $0x28,%esp
    iterator_t user_itr = iterator_create(users);
c010783a:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c0107840:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107843:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107847:	89 04 24             	mov    %eax,(%esp)
c010784a:	e8 f8 af ff ff       	call   c0102847 <iterator_create>
c010784f:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c0107852:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107857:	89 04 24             	mov    %eax,(%esp)
c010785a:	e8 c2 af ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&user_itr))
c010785f:	eb 4b                	jmp    c01078ac <get_user_by_name+0x78>
    {
        if(strcmp(((user_t *)list_get_current(&user_itr))->name, uname) == 0)
c0107861:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107864:	89 04 24             	mov    %eax,(%esp)
c0107867:	e8 a4 b0 ff ff       	call   c0102910 <list_get_current>
c010786c:	8b 00                	mov    (%eax),%eax
c010786e:	8b 55 08             	mov    0x8(%ebp),%edx
c0107871:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107875:	89 04 24             	mov    %eax,(%esp)
c0107878:	e8 f0 b2 ff ff       	call   c0102b6d <strcmp>
c010787d:	85 c0                	test   %eax,%eax
c010787f:	75 20                	jne    c01078a1 <get_user_by_name+0x6d>
        {
            user_t *target = (user_t *)list_get_current(&user_itr);
c0107881:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107884:	89 04 24             	mov    %eax,(%esp)
c0107887:	e8 84 b0 ff ff       	call   c0102910 <list_get_current>
c010788c:	89 45 f4             	mov    %eax,-0xc(%ebp)
            list_unlock(users);
c010788f:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107894:	89 04 24             	mov    %eax,(%esp)
c0107897:	e8 98 af ff ff       	call   c0102834 <list_unlock>
            return target;
c010789c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010789f:	eb 2c                	jmp    c01078cd <get_user_by_name+0x99>
        }

        list_next(&user_itr);
c01078a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01078a4:	89 04 24             	mov    %eax,(%esp)
c01078a7:	e8 89 b0 ff ff       	call   c0102935 <list_next>
user_t *get_user_by_name(const char *uname)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);

    while(!list_is_last(&user_itr))
c01078ac:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01078af:	89 04 24             	mov    %eax,(%esp)
c01078b2:	e8 a5 b0 ff ff       	call   c010295c <list_is_last>
c01078b7:	85 c0                	test   %eax,%eax
c01078b9:	74 a6                	je     c0107861 <get_user_by_name+0x2d>
        }

        list_next(&user_itr);
    }

    list_unlock(users);
c01078bb:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c01078c0:	89 04 24             	mov    %eax,(%esp)
c01078c3:	e8 6c af ff ff       	call   c0102834 <list_unlock>
    return NULL;
c01078c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01078cd:	c9                   	leave  
c01078ce:	c3                   	ret    

c01078cf <add_group>:

int add_group(const char *groupname, gid_t gid)
{
c01078cf:	55                   	push   %ebp
c01078d0:	89 e5                	mov    %esp,%ebp
c01078d2:	83 ec 28             	sub    $0x28,%esp
    if(groupname == NULL || groupname[0] == '\0')
c01078d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01078d9:	74 0a                	je     c01078e5 <add_group+0x16>
c01078db:	8b 45 08             	mov    0x8(%ebp),%eax
c01078de:	0f b6 00             	movzbl (%eax),%eax
c01078e1:	84 c0                	test   %al,%al
c01078e3:	75 0a                	jne    c01078ef <add_group+0x20>
        return FAILTURE;
c01078e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01078ea:	e9 b6 00 00 00       	jmp    c01079a5 <add_group+0xd6>

    if(group_id_exists(gid))
c01078ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078f2:	89 04 24             	mov    %eax,(%esp)
c01078f5:	e8 6f 04 00 00       	call   c0107d69 <group_id_exists>
c01078fa:	85 c0                	test   %eax,%eax
c01078fc:	74 0a                	je     c0107908 <add_group+0x39>
        return FAILTURE;
c01078fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0107903:	e9 9d 00 00 00       	jmp    c01079a5 <add_group+0xd6>

    if(group_name_exists(groupname))
c0107908:	8b 45 08             	mov    0x8(%ebp),%eax
c010790b:	89 04 24             	mov    %eax,(%esp)
c010790e:	e8 5a 05 00 00       	call   c0107e6d <group_name_exists>
c0107913:	85 c0                	test   %eax,%eax
c0107915:	74 0a                	je     c0107921 <add_group+0x52>
        return FAILTURE;
c0107917:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010791c:	e9 84 00 00 00       	jmp    c01079a5 <add_group+0xd6>

    group_t *new_group = (group_t *)malloc(sizeof(group_t));
c0107921:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0107928:	e8 79 5d 00 00       	call   c010d6a6 <malloc>
c010792d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    new_group->name = (char *)malloc(sizeof(char) * strlen(groupname));
c0107930:	8b 45 08             	mov    0x8(%ebp),%eax
c0107933:	89 04 24             	mov    %eax,(%esp)
c0107936:	e8 ee b0 ff ff       	call   c0102a29 <strlen>
c010793b:	89 04 24             	mov    %eax,(%esp)
c010793e:	e8 63 5d 00 00       	call   c010d6a6 <malloc>
c0107943:	89 c2                	mov    %eax,%edx
c0107945:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107948:	89 10                	mov    %edx,(%eax)
    strcpy(new_group->name, groupname);
c010794a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010794d:	8b 00                	mov    (%eax),%eax
c010794f:	8b 55 08             	mov    0x8(%ebp),%edx
c0107952:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107956:	89 04 24             	mov    %eax,(%esp)
c0107959:	e8 f2 b0 ff ff       	call   c0102a50 <strcpy>

    new_group->id = gid;
c010795e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107961:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107964:	89 50 04             	mov    %edx,0x4(%eax)
    new_group->users = list_create();
c0107967:	e8 12 ac ff ff       	call   c010257e <list_create>
c010796c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010796f:	89 42 08             	mov    %eax,0x8(%edx)
    list_lock(groups);
c0107972:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107977:	89 04 24             	mov    %eax,(%esp)
c010797a:	e8 a2 ae ff ff       	call   c0102821 <list_lock>
    list_push_back(groups, new_group);
c010797f:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107984:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107987:	89 54 24 04          	mov    %edx,0x4(%esp)
c010798b:	89 04 24             	mov    %eax,(%esp)
c010798e:	e8 cf ac ff ff       	call   c0102662 <list_push_back>
    list_unlock(groups);
c0107993:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107998:	89 04 24             	mov    %eax,(%esp)
c010799b:	e8 94 ae ff ff       	call   c0102834 <list_unlock>

    return SUCCESS;
c01079a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01079a5:	c9                   	leave  
c01079a6:	c3                   	ret    

c01079a7 <remove_group>:

int remove_group(group_t *group)
{
c01079a7:	55                   	push   %ebp
c01079a8:	89 e5                	mov    %esp,%ebp
c01079aa:	83 ec 38             	sub    $0x38,%esp
    iterator_t grps_itr = iterator_create(groups);
c01079ad:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c01079b3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01079b6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01079ba:	89 04 24             	mov    %eax,(%esp)
c01079bd:	e8 85 ae ff ff       	call   c0102847 <iterator_create>
c01079c2:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c01079c5:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c01079ca:	89 04 24             	mov    %eax,(%esp)
c01079cd:	e8 4f ae ff ff       	call   c0102821 <list_lock>
    while(!list_is_last(&grps_itr))
c01079d2:	e9 dc 00 00 00       	jmp    c0107ab3 <remove_group+0x10c>
    {
        if(((group_t *)list_get_current(&grps_itr)) == group)
c01079d7:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01079da:	89 04 24             	mov    %eax,(%esp)
c01079dd:	e8 2e af ff ff       	call   c0102910 <list_get_current>
c01079e2:	3b 45 08             	cmp    0x8(%ebp),%eax
c01079e5:	0f 85 bd 00 00 00    	jne    c0107aa8 <remove_group+0x101>
        {
            group_t *grp = ((group_t *)list_get_current(&grps_itr));
c01079eb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01079ee:	89 04 24             	mov    %eax,(%esp)
c01079f1:	e8 1a af ff ff       	call   c0102910 <list_get_current>
c01079f6:	89 45 f4             	mov    %eax,-0xc(%ebp)

            iterator_t user_itr = iterator_create(grp->users);
c01079f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079fc:	8b 50 08             	mov    0x8(%eax),%edx
c01079ff:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0107a02:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107a06:	89 04 24             	mov    %eax,(%esp)
c0107a09:	e8 39 ae ff ff       	call   c0102847 <iterator_create>
c0107a0e:	83 ec 04             	sub    $0x4,%esp
            list_lock(grp->users);
c0107a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a14:	8b 40 08             	mov    0x8(%eax),%eax
c0107a17:	89 04 24             	mov    %eax,(%esp)
c0107a1a:	e8 02 ae ff ff       	call   c0102821 <list_lock>
            while(!list_is_last(&user_itr))
c0107a1f:	eb 25                	jmp    c0107a46 <remove_group+0x9f>
            {
                remove_user_from_group_lockfree((user_t *)list_get_current(&user_itr), grp);
c0107a21:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0107a24:	89 04 24             	mov    %eax,(%esp)
c0107a27:	e8 e4 ae ff ff       	call   c0102910 <list_get_current>
c0107a2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107a2f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107a33:	89 04 24             	mov    %eax,(%esp)
c0107a36:	e8 7a 02 00 00       	call   c0107cb5 <remove_user_from_group_lockfree>

                list_next(&user_itr);
c0107a3b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0107a3e:	89 04 24             	mov    %eax,(%esp)
c0107a41:	e8 ef ae ff ff       	call   c0102935 <list_next>
        {
            group_t *grp = ((group_t *)list_get_current(&grps_itr));

            iterator_t user_itr = iterator_create(grp->users);
            list_lock(grp->users);
            while(!list_is_last(&user_itr))
c0107a46:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0107a49:	89 04 24             	mov    %eax,(%esp)
c0107a4c:	e8 0b af ff ff       	call   c010295c <list_is_last>
c0107a51:	85 c0                	test   %eax,%eax
c0107a53:	74 cc                	je     c0107a21 <remove_group+0x7a>
            {
                remove_user_from_group_lockfree((user_t *)list_get_current(&user_itr), grp);

                list_next(&user_itr);
            }
            list_unlock(grp->users);
c0107a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a58:	8b 40 08             	mov    0x8(%eax),%eax
c0107a5b:	89 04 24             	mov    %eax,(%esp)
c0107a5e:	e8 d1 ad ff ff       	call   c0102834 <list_unlock>

            free(grp->name);
c0107a63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a66:	8b 00                	mov    (%eax),%eax
c0107a68:	89 04 24             	mov    %eax,(%esp)
c0107a6b:	e8 1d 5d 00 00       	call   c010d78d <free>
            list_destroy(grp->users);
c0107a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a73:	8b 40 08             	mov    0x8(%eax),%eax
c0107a76:	89 04 24             	mov    %eax,(%esp)
c0107a79:	e8 58 ab ff ff       	call   c01025d6 <list_destroy>
            free(grp);
c0107a7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a81:	89 04 24             	mov    %eax,(%esp)
c0107a84:	e8 04 5d 00 00       	call   c010d78d <free>

            list_remove(&grps_itr);
c0107a89:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107a8c:	89 04 24             	mov    %eax,(%esp)
c0107a8f:	e8 0e af ff ff       	call   c01029a2 <list_remove>
            list_unlock(groups);
c0107a94:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107a99:	89 04 24             	mov    %eax,(%esp)
c0107a9c:	e8 93 ad ff ff       	call   c0102834 <list_unlock>
            return SUCCESS;
c0107aa1:	b8 00 00 00 00       	mov    $0x0,%eax
c0107aa6:	eb 30                	jmp    c0107ad8 <remove_group+0x131>
        }

        list_next(&grps_itr);
c0107aa8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107aab:	89 04 24             	mov    %eax,(%esp)
c0107aae:	e8 82 ae ff ff       	call   c0102935 <list_next>

int remove_group(group_t *group)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);
    while(!list_is_last(&grps_itr))
c0107ab3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107ab6:	89 04 24             	mov    %eax,(%esp)
c0107ab9:	e8 9e ae ff ff       	call   c010295c <list_is_last>
c0107abe:	85 c0                	test   %eax,%eax
c0107ac0:	0f 84 11 ff ff ff    	je     c01079d7 <remove_group+0x30>
            return SUCCESS;
        }

        list_next(&grps_itr);
    }
    list_unlock(groups);
c0107ac6:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107acb:	89 04 24             	mov    %eax,(%esp)
c0107ace:	e8 61 ad ff ff       	call   c0102834 <list_unlock>
    return FAILTURE;
c0107ad3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0107ad8:	c9                   	leave  
c0107ad9:	c3                   	ret    

c0107ada <get_group_by_id>:

group_t *get_group_by_id(gid_t id)
{
c0107ada:	55                   	push   %ebp
c0107adb:	89 e5                	mov    %esp,%ebp
c0107add:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(groups);
c0107ae0:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c0107ae6:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107ae9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107aed:	89 04 24             	mov    %eax,(%esp)
c0107af0:	e8 52 ad ff ff       	call   c0102847 <iterator_create>
c0107af5:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c0107af8:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107afd:	89 04 24             	mov    %eax,(%esp)
c0107b00:	e8 1c ad ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&grps_itr))
c0107b05:	eb 38                	jmp    c0107b3f <get_group_by_id+0x65>
    {
        if(((group_t *)list_get_current(&grps_itr))->id == id)
c0107b07:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b0a:	89 04 24             	mov    %eax,(%esp)
c0107b0d:	e8 fe ad ff ff       	call   c0102910 <list_get_current>
c0107b12:	8b 40 04             	mov    0x4(%eax),%eax
c0107b15:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107b18:	75 1a                	jne    c0107b34 <get_group_by_id+0x5a>
        {
            list_unlock(groups);
c0107b1a:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107b1f:	89 04 24             	mov    %eax,(%esp)
c0107b22:	e8 0d ad ff ff       	call   c0102834 <list_unlock>
            return ((group_t *)list_get_current(&grps_itr));
c0107b27:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b2a:	89 04 24             	mov    %eax,(%esp)
c0107b2d:	e8 de ad ff ff       	call   c0102910 <list_get_current>
c0107b32:	eb 2c                	jmp    c0107b60 <get_group_by_id+0x86>
        }

        list_next(&grps_itr);
c0107b34:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b37:	89 04 24             	mov    %eax,(%esp)
c0107b3a:	e8 f6 ad ff ff       	call   c0102935 <list_next>
group_t *get_group_by_id(gid_t id)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);

    while(!list_is_last(&grps_itr))
c0107b3f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b42:	89 04 24             	mov    %eax,(%esp)
c0107b45:	e8 12 ae ff ff       	call   c010295c <list_is_last>
c0107b4a:	85 c0                	test   %eax,%eax
c0107b4c:	74 b9                	je     c0107b07 <get_group_by_id+0x2d>
        }

        list_next(&grps_itr);
    }

    list_unlock(groups);
c0107b4e:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107b53:	89 04 24             	mov    %eax,(%esp)
c0107b56:	e8 d9 ac ff ff       	call   c0102834 <list_unlock>

    return NULL;
c0107b5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b60:	c9                   	leave  
c0107b61:	c3                   	ret    

c0107b62 <get_group_by_name>:

group_t *get_group_by_name(const char *gname)
{
c0107b62:	55                   	push   %ebp
c0107b63:	89 e5                	mov    %esp,%ebp
c0107b65:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(groups);
c0107b68:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c0107b6e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b71:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107b75:	89 04 24             	mov    %eax,(%esp)
c0107b78:	e8 ca ac ff ff       	call   c0102847 <iterator_create>
c0107b7d:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c0107b80:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107b85:	89 04 24             	mov    %eax,(%esp)
c0107b88:	e8 94 ac ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&grps_itr))
c0107b8d:	eb 45                	jmp    c0107bd4 <get_group_by_name+0x72>
    {
        if(strcmp(((group_t *)list_get_current(&grps_itr))->name, gname) == 0)
c0107b8f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b92:	89 04 24             	mov    %eax,(%esp)
c0107b95:	e8 76 ad ff ff       	call   c0102910 <list_get_current>
c0107b9a:	8b 00                	mov    (%eax),%eax
c0107b9c:	8b 55 08             	mov    0x8(%ebp),%edx
c0107b9f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107ba3:	89 04 24             	mov    %eax,(%esp)
c0107ba6:	e8 c2 af ff ff       	call   c0102b6d <strcmp>
c0107bab:	85 c0                	test   %eax,%eax
c0107bad:	75 1a                	jne    c0107bc9 <get_group_by_name+0x67>
        {
            list_unlock(groups);
c0107baf:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107bb4:	89 04 24             	mov    %eax,(%esp)
c0107bb7:	e8 78 ac ff ff       	call   c0102834 <list_unlock>
            return ((group_t *)list_get_current(&grps_itr));
c0107bbc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107bbf:	89 04 24             	mov    %eax,(%esp)
c0107bc2:	e8 49 ad ff ff       	call   c0102910 <list_get_current>
c0107bc7:	eb 2c                	jmp    c0107bf5 <get_group_by_name+0x93>
        }

        list_next(&grps_itr);
c0107bc9:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107bcc:	89 04 24             	mov    %eax,(%esp)
c0107bcf:	e8 61 ad ff ff       	call   c0102935 <list_next>
group_t *get_group_by_name(const char *gname)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);

    while(!list_is_last(&grps_itr))
c0107bd4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107bd7:	89 04 24             	mov    %eax,(%esp)
c0107bda:	e8 7d ad ff ff       	call   c010295c <list_is_last>
c0107bdf:	85 c0                	test   %eax,%eax
c0107be1:	74 ac                	je     c0107b8f <get_group_by_name+0x2d>
        }

        list_next(&grps_itr);
    }

    list_unlock(groups);
c0107be3:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107be8:	89 04 24             	mov    %eax,(%esp)
c0107beb:	e8 44 ac ff ff       	call   c0102834 <list_unlock>

    return NULL;
c0107bf0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bf5:	c9                   	leave  
c0107bf6:	c3                   	ret    

c0107bf7 <add_user_to_group>:

int add_user_to_group(user_t *user, group_t *group)
{
c0107bf7:	55                   	push   %ebp
c0107bf8:	89 e5                	mov    %esp,%ebp
c0107bfa:	83 ec 18             	sub    $0x18,%esp
    if(user == NULL || group == NULL)
c0107bfd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107c01:	74 06                	je     c0107c09 <add_user_to_group+0x12>
c0107c03:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107c07:	75 07                	jne    c0107c10 <add_user_to_group+0x19>
        return FAILTURE;
c0107c09:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0107c0e:	eb 67                	jmp    c0107c77 <add_user_to_group+0x80>

    list_lock(user->grps);
c0107c10:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c13:	8b 40 10             	mov    0x10(%eax),%eax
c0107c16:	89 04 24             	mov    %eax,(%esp)
c0107c19:	e8 03 ac ff ff       	call   c0102821 <list_lock>
    list_push_back(user->grps, group);
c0107c1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c21:	8b 40 10             	mov    0x10(%eax),%eax
c0107c24:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107c27:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107c2b:	89 04 24             	mov    %eax,(%esp)
c0107c2e:	e8 2f aa ff ff       	call   c0102662 <list_push_back>
    list_unlock(user->grps);
c0107c33:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c36:	8b 40 10             	mov    0x10(%eax),%eax
c0107c39:	89 04 24             	mov    %eax,(%esp)
c0107c3c:	e8 f3 ab ff ff       	call   c0102834 <list_unlock>

    list_lock(group->users);
c0107c41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c44:	8b 40 08             	mov    0x8(%eax),%eax
c0107c47:	89 04 24             	mov    %eax,(%esp)
c0107c4a:	e8 d2 ab ff ff       	call   c0102821 <list_lock>
    list_push_back(group->users, user);
c0107c4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c52:	8b 40 08             	mov    0x8(%eax),%eax
c0107c55:	8b 55 08             	mov    0x8(%ebp),%edx
c0107c58:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107c5c:	89 04 24             	mov    %eax,(%esp)
c0107c5f:	e8 fe a9 ff ff       	call   c0102662 <list_push_back>
    list_unlock(group->users);
c0107c64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c67:	8b 40 08             	mov    0x8(%eax),%eax
c0107c6a:	89 04 24             	mov    %eax,(%esp)
c0107c6d:	e8 c2 ab ff ff       	call   c0102834 <list_unlock>

    return SUCCESS;
c0107c72:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c77:	c9                   	leave  
c0107c78:	c3                   	ret    

c0107c79 <remove_user_from_group>:

int remove_user_from_group(user_t *user, group_t *group)
{
c0107c79:	55                   	push   %ebp
c0107c7a:	89 e5                	mov    %esp,%ebp
c0107c7c:	83 ec 28             	sub    $0x28,%esp
    list_lock(group->users);
c0107c7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c82:	8b 40 08             	mov    0x8(%eax),%eax
c0107c85:	89 04 24             	mov    %eax,(%esp)
c0107c88:	e8 94 ab ff ff       	call   c0102821 <list_lock>
    int result = remove_user_from_group_lockfree(user, group);
c0107c8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c90:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107c94:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c97:	89 04 24             	mov    %eax,(%esp)
c0107c9a:	e8 16 00 00 00       	call   c0107cb5 <remove_user_from_group_lockfree>
c0107c9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_unlock(group->users);
c0107ca2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ca5:	8b 40 08             	mov    0x8(%eax),%eax
c0107ca8:	89 04 24             	mov    %eax,(%esp)
c0107cab:	e8 84 ab ff ff       	call   c0102834 <list_unlock>

    return result;
c0107cb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107cb3:	c9                   	leave  
c0107cb4:	c3                   	ret    

c0107cb5 <remove_user_from_group_lockfree>:

int remove_user_from_group_lockfree(user_t *user, group_t *group)
{
c0107cb5:	55                   	push   %ebp
c0107cb6:	89 e5                	mov    %esp,%ebp
c0107cb8:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(user->grps);
c0107cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0107cbe:	8b 50 10             	mov    0x10(%eax),%edx
c0107cc1:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107cc4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107cc8:	89 04 24             	mov    %eax,(%esp)
c0107ccb:	e8 77 ab ff ff       	call   c0102847 <iterator_create>
c0107cd0:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_last(&grps_itr))
c0107cd3:	eb 28                	jmp    c0107cfd <remove_user_from_group_lockfree+0x48>
    {
        if((group_t *)list_get_current(&grps_itr) == group)
c0107cd5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107cd8:	89 04 24             	mov    %eax,(%esp)
c0107cdb:	e8 30 ac ff ff       	call   c0102910 <list_get_current>
c0107ce0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107ce3:	75 0d                	jne    c0107cf2 <remove_user_from_group_lockfree+0x3d>
        {
            list_remove(&grps_itr);
c0107ce5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107ce8:	89 04 24             	mov    %eax,(%esp)
c0107ceb:	e8 b2 ac ff ff       	call   c01029a2 <list_remove>
            break;
c0107cf0:	eb 1a                	jmp    c0107d0c <remove_user_from_group_lockfree+0x57>
        }

        list_next(&grps_itr);
c0107cf2:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107cf5:	89 04 24             	mov    %eax,(%esp)
c0107cf8:	e8 38 ac ff ff       	call   c0102935 <list_next>

int remove_user_from_group_lockfree(user_t *user, group_t *group)
{
    iterator_t grps_itr = iterator_create(user->grps);

    while(!list_is_last(&grps_itr))
c0107cfd:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107d00:	89 04 24             	mov    %eax,(%esp)
c0107d03:	e8 54 ac ff ff       	call   c010295c <list_is_last>
c0107d08:	85 c0                	test   %eax,%eax
c0107d0a:	74 c9                	je     c0107cd5 <remove_user_from_group_lockfree+0x20>
        }

        list_next(&grps_itr);
    }

    iterator_t user_itr = iterator_create(group->users);
c0107d0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d0f:	8b 50 08             	mov    0x8(%eax),%edx
c0107d12:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d15:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107d19:	89 04 24             	mov    %eax,(%esp)
c0107d1c:	e8 26 ab ff ff       	call   c0102847 <iterator_create>
c0107d21:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_last(&user_itr))
c0107d24:	eb 2d                	jmp    c0107d53 <remove_user_from_group_lockfree+0x9e>
    {
        if((user_t *)list_get_current(&user_itr) == user)
c0107d26:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d29:	89 04 24             	mov    %eax,(%esp)
c0107d2c:	e8 df ab ff ff       	call   c0102910 <list_get_current>
c0107d31:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107d34:	75 12                	jne    c0107d48 <remove_user_from_group_lockfree+0x93>
        {
            list_remove(&user_itr);
c0107d36:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d39:	89 04 24             	mov    %eax,(%esp)
c0107d3c:	e8 61 ac ff ff       	call   c01029a2 <list_remove>
            return SUCCESS;
c0107d41:	b8 00 00 00 00       	mov    $0x0,%eax
c0107d46:	eb 1f                	jmp    c0107d67 <remove_user_from_group_lockfree+0xb2>
        }

        list_next(&user_itr);
c0107d48:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d4b:	89 04 24             	mov    %eax,(%esp)
c0107d4e:	e8 e2 ab ff ff       	call   c0102935 <list_next>
        list_next(&grps_itr);
    }

    iterator_t user_itr = iterator_create(group->users);

    while(!list_is_last(&user_itr))
c0107d53:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d56:	89 04 24             	mov    %eax,(%esp)
c0107d59:	e8 fe ab ff ff       	call   c010295c <list_is_last>
c0107d5e:	85 c0                	test   %eax,%eax
c0107d60:	74 c4                	je     c0107d26 <remove_user_from_group_lockfree+0x71>
        }

        list_next(&user_itr);
    }

    return FAILTURE;
c0107d62:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0107d67:	c9                   	leave  
c0107d68:	c3                   	ret    

c0107d69 <group_id_exists>:

int group_id_exists(gid_t id)
{
c0107d69:	55                   	push   %ebp
c0107d6a:	89 e5                	mov    %esp,%ebp
c0107d6c:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(groups);
c0107d6f:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c0107d75:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107d78:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107d7c:	89 04 24             	mov    %eax,(%esp)
c0107d7f:	e8 c3 aa ff ff       	call   c0102847 <iterator_create>
c0107d84:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c0107d87:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107d8c:	89 04 24             	mov    %eax,(%esp)
c0107d8f:	e8 8d aa ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&grps_itr))
c0107d94:	eb 32                	jmp    c0107dc8 <group_id_exists+0x5f>
    {
        if(((group_t *)list_get_current(&grps_itr))->id == id)
c0107d96:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107d99:	89 04 24             	mov    %eax,(%esp)
c0107d9c:	e8 6f ab ff ff       	call   c0102910 <list_get_current>
c0107da1:	8b 40 04             	mov    0x4(%eax),%eax
c0107da4:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107da7:	75 14                	jne    c0107dbd <group_id_exists+0x54>
        {
            list_unlock(groups);
c0107da9:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107dae:	89 04 24             	mov    %eax,(%esp)
c0107db1:	e8 7e aa ff ff       	call   c0102834 <list_unlock>
            return YES;
c0107db6:	b8 01 00 00 00       	mov    $0x1,%eax
c0107dbb:	eb 2c                	jmp    c0107de9 <group_id_exists+0x80>
        }

        list_next(&grps_itr);
c0107dbd:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107dc0:	89 04 24             	mov    %eax,(%esp)
c0107dc3:	e8 6d ab ff ff       	call   c0102935 <list_next>
int group_id_exists(gid_t id)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);

    while(!list_is_last(&grps_itr))
c0107dc8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107dcb:	89 04 24             	mov    %eax,(%esp)
c0107dce:	e8 89 ab ff ff       	call   c010295c <list_is_last>
c0107dd3:	85 c0                	test   %eax,%eax
c0107dd5:	74 bf                	je     c0107d96 <group_id_exists+0x2d>
        }

        list_next(&grps_itr);
    }

    list_unlock(groups);
c0107dd7:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107ddc:	89 04 24             	mov    %eax,(%esp)
c0107ddf:	e8 50 aa ff ff       	call   c0102834 <list_unlock>

    return NO;
c0107de4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107de9:	c9                   	leave  
c0107dea:	c3                   	ret    

c0107deb <user_id_exists>:

int user_id_exists(uid_t id)
{
c0107deb:	55                   	push   %ebp
c0107dec:	89 e5                	mov    %esp,%ebp
c0107dee:	83 ec 28             	sub    $0x28,%esp
    iterator_t user_itr = iterator_create(users);
c0107df1:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c0107df7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107dfa:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107dfe:	89 04 24             	mov    %eax,(%esp)
c0107e01:	e8 41 aa ff ff       	call   c0102847 <iterator_create>
c0107e06:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c0107e09:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107e0e:	89 04 24             	mov    %eax,(%esp)
c0107e11:	e8 0b aa ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&user_itr))
c0107e16:	eb 32                	jmp    c0107e4a <user_id_exists+0x5f>
    {
        if(((user_t *)list_get_current(&user_itr))->id == id)
c0107e18:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e1b:	89 04 24             	mov    %eax,(%esp)
c0107e1e:	e8 ed aa ff ff       	call   c0102910 <list_get_current>
c0107e23:	8b 40 0c             	mov    0xc(%eax),%eax
c0107e26:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107e29:	75 14                	jne    c0107e3f <user_id_exists+0x54>
        {
            list_unlock(users);
c0107e2b:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107e30:	89 04 24             	mov    %eax,(%esp)
c0107e33:	e8 fc a9 ff ff       	call   c0102834 <list_unlock>
            return YES;
c0107e38:	b8 01 00 00 00       	mov    $0x1,%eax
c0107e3d:	eb 2c                	jmp    c0107e6b <user_id_exists+0x80>
        }

        list_next(&user_itr);
c0107e3f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e42:	89 04 24             	mov    %eax,(%esp)
c0107e45:	e8 eb aa ff ff       	call   c0102935 <list_next>
int user_id_exists(uid_t id)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);

    while(!list_is_last(&user_itr))
c0107e4a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e4d:	89 04 24             	mov    %eax,(%esp)
c0107e50:	e8 07 ab ff ff       	call   c010295c <list_is_last>
c0107e55:	85 c0                	test   %eax,%eax
c0107e57:	74 bf                	je     c0107e18 <user_id_exists+0x2d>
        }

        list_next(&user_itr);
    }

    list_unlock(users);
c0107e59:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107e5e:	89 04 24             	mov    %eax,(%esp)
c0107e61:	e8 ce a9 ff ff       	call   c0102834 <list_unlock>

    return NO;
c0107e66:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e6b:	c9                   	leave  
c0107e6c:	c3                   	ret    

c0107e6d <group_name_exists>:

int group_name_exists(const char *name)
{
c0107e6d:	55                   	push   %ebp
c0107e6e:	89 e5                	mov    %esp,%ebp
c0107e70:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(groups);
c0107e73:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c0107e79:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e7c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107e80:	89 04 24             	mov    %eax,(%esp)
c0107e83:	e8 bf a9 ff ff       	call   c0102847 <iterator_create>
c0107e88:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c0107e8b:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107e90:	89 04 24             	mov    %eax,(%esp)
c0107e93:	e8 89 a9 ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&grps_itr))
c0107e98:	eb 3f                	jmp    c0107ed9 <group_name_exists+0x6c>
    {
        if(strcmp(((group_t *)list_get_current(&grps_itr))->name, name) == 0)
c0107e9a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e9d:	89 04 24             	mov    %eax,(%esp)
c0107ea0:	e8 6b aa ff ff       	call   c0102910 <list_get_current>
c0107ea5:	8b 00                	mov    (%eax),%eax
c0107ea7:	8b 55 08             	mov    0x8(%ebp),%edx
c0107eaa:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107eae:	89 04 24             	mov    %eax,(%esp)
c0107eb1:	e8 b7 ac ff ff       	call   c0102b6d <strcmp>
c0107eb6:	85 c0                	test   %eax,%eax
c0107eb8:	75 14                	jne    c0107ece <group_name_exists+0x61>
        {
            list_unlock(groups);
c0107eba:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107ebf:	89 04 24             	mov    %eax,(%esp)
c0107ec2:	e8 6d a9 ff ff       	call   c0102834 <list_unlock>
            return YES;
c0107ec7:	b8 01 00 00 00       	mov    $0x1,%eax
c0107ecc:	eb 2c                	jmp    c0107efa <group_name_exists+0x8d>
        }

        list_next(&grps_itr);
c0107ece:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107ed1:	89 04 24             	mov    %eax,(%esp)
c0107ed4:	e8 5c aa ff ff       	call   c0102935 <list_next>
int group_name_exists(const char *name)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);

    while(!list_is_last(&grps_itr))
c0107ed9:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107edc:	89 04 24             	mov    %eax,(%esp)
c0107edf:	e8 78 aa ff ff       	call   c010295c <list_is_last>
c0107ee4:	85 c0                	test   %eax,%eax
c0107ee6:	74 b2                	je     c0107e9a <group_name_exists+0x2d>
        }

        list_next(&grps_itr);
    }

    list_unlock(groups);
c0107ee8:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107eed:	89 04 24             	mov    %eax,(%esp)
c0107ef0:	e8 3f a9 ff ff       	call   c0102834 <list_unlock>

    return NO;
c0107ef5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107efa:	c9                   	leave  
c0107efb:	c3                   	ret    

c0107efc <user_name_exists>:

int user_name_exists(const char *name)
{
c0107efc:	55                   	push   %ebp
c0107efd:	89 e5                	mov    %esp,%ebp
c0107eff:	83 ec 28             	sub    $0x28,%esp
    iterator_t user_itr = iterator_create(users);
c0107f02:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c0107f08:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107f0b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107f0f:	89 04 24             	mov    %eax,(%esp)
c0107f12:	e8 30 a9 ff ff       	call   c0102847 <iterator_create>
c0107f17:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c0107f1a:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107f1f:	89 04 24             	mov    %eax,(%esp)
c0107f22:	e8 fa a8 ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&user_itr))
c0107f27:	eb 3f                	jmp    c0107f68 <user_name_exists+0x6c>
    {
        if(strcmp(((user_t *)list_get_current(&user_itr))->name, name) == 0)
c0107f29:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107f2c:	89 04 24             	mov    %eax,(%esp)
c0107f2f:	e8 dc a9 ff ff       	call   c0102910 <list_get_current>
c0107f34:	8b 00                	mov    (%eax),%eax
c0107f36:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f39:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107f3d:	89 04 24             	mov    %eax,(%esp)
c0107f40:	e8 28 ac ff ff       	call   c0102b6d <strcmp>
c0107f45:	85 c0                	test   %eax,%eax
c0107f47:	75 14                	jne    c0107f5d <user_name_exists+0x61>
        {
            list_unlock(users);
c0107f49:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107f4e:	89 04 24             	mov    %eax,(%esp)
c0107f51:	e8 de a8 ff ff       	call   c0102834 <list_unlock>
            return YES;
c0107f56:	b8 01 00 00 00       	mov    $0x1,%eax
c0107f5b:	eb 2c                	jmp    c0107f89 <user_name_exists+0x8d>
        }

        list_next(&user_itr);
c0107f5d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107f60:	89 04 24             	mov    %eax,(%esp)
c0107f63:	e8 cd a9 ff ff       	call   c0102935 <list_next>
int user_name_exists(const char *name)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);

    while(!list_is_last(&user_itr))
c0107f68:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107f6b:	89 04 24             	mov    %eax,(%esp)
c0107f6e:	e8 e9 a9 ff ff       	call   c010295c <list_is_last>
c0107f73:	85 c0                	test   %eax,%eax
c0107f75:	74 b2                	je     c0107f29 <user_name_exists+0x2d>
        }

        list_next(&user_itr);
    }

    list_unlock(users);
c0107f77:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107f7c:	89 04 24             	mov    %eax,(%esp)
c0107f7f:	e8 b0 a8 ff ff       	call   c0102834 <list_unlock>

    return NO;
c0107f84:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f89:	c9                   	leave  
c0107f8a:	c3                   	ret    

c0107f8b <sys_getuid>:


void sys_getuid(struct cpu_state **cpu)
{
c0107f8b:	55                   	push   %ebp
c0107f8c:	89 e5                	mov    %esp,%ebp
    (*cpu)->CPU_ARG0 = current_thread->process->uid;
c0107f8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f91:	8b 00                	mov    (%eax),%eax
c0107f93:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c0107f99:	8b 52 04             	mov    0x4(%edx),%edx
c0107f9c:	8b 52 04             	mov    0x4(%edx),%edx
c0107f9f:	89 50 28             	mov    %edx,0x28(%eax)
}
c0107fa2:	5d                   	pop    %ebp
c0107fa3:	c3                   	ret    

c0107fa4 <sys_setuid>:

void sys_setuid(struct cpu_state **cpu)
{
c0107fa4:	55                   	push   %ebp
c0107fa5:	89 e5                	mov    %esp,%ebp
c0107fa7:	83 ec 28             	sub    $0x28,%esp
    if(user_id_exists((*cpu)->CPU_ARG1))
c0107faa:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fad:	8b 00                	mov    (%eax),%eax
c0107faf:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107fb2:	89 04 24             	mov    %eax,(%esp)
c0107fb5:	e8 31 fe ff ff       	call   c0107deb <user_id_exists>
c0107fba:	85 c0                	test   %eax,%eax
c0107fbc:	74 0e                	je     c0107fcc <sys_setuid+0x28>
    {
        (*cpu)->CPU_ARG0 = -1;
c0107fbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fc1:	8b 00                	mov    (%eax),%eax
c0107fc3:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0107fca:	eb 30                	jmp    c0107ffc <sys_setuid+0x58>
    }

    user_t *user = get_user_by_id(current_thread->process->uid);
c0107fcc:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0107fd1:	8b 40 04             	mov    0x4(%eax),%eax
c0107fd4:	8b 40 04             	mov    0x4(%eax),%eax
c0107fd7:	89 04 24             	mov    %eax,(%esp)
c0107fda:	e8 c7 f7 ff ff       	call   c01077a6 <get_user_by_id>
c0107fdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    user->id = (*cpu)->CPU_ARG1;
c0107fe2:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fe5:	8b 00                	mov    (%eax),%eax
c0107fe7:	8b 50 1c             	mov    0x1c(%eax),%edx
c0107fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fed:	89 50 0c             	mov    %edx,0xc(%eax)
    //todo: change the uids of each process and file in the home durectory
    (*cpu)->CPU_ARG0 = 1;
c0107ff0:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ff3:	8b 00                	mov    (%eax),%eax
c0107ff5:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
c0107ffc:	c9                   	leave  
c0107ffd:	c3                   	ret    

c0107ffe <test_vfs>:
#define COUNT 10001
#define STEP (int)((float)COUNT/(float)10)
extern vfs_inode_t *root;

bool test_vfs()
{
c0107ffe:	55                   	push   %ebp
c0107fff:	89 e5                	mov    %esp,%ebp
c0108001:	53                   	push   %ebx
c0108002:	81 ec 44 01 00 00    	sub    $0x144,%esp
    int i,j;
    char name[256];
    vfs_inode_t **inodes = malloc(sizeof(vfs_inode_t*) * COUNT);
c0108008:	c7 04 24 44 9c 00 00 	movl   $0x9c44,(%esp)
c010800f:	e8 92 56 00 00       	call   c010d6a6 <malloc>
c0108014:	89 45 e8             	mov    %eax,-0x18(%ebp)

    printf("creating %d inodes...\n", COUNT);
c0108017:	c7 44 24 04 11 27 00 	movl   $0x2711,0x4(%esp)
c010801e:	00 
c010801f:	c7 04 24 b4 18 11 c0 	movl   $0xc01118b4,(%esp)
c0108026:	e8 52 b1 ff ff       	call   c010317d <printf>
    for(i = 0; i < COUNT; i++)
c010802b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108032:	e9 98 00 00 00       	jmp    c01080cf <test_vfs+0xd1>
    {
        sprintf(name, "test_inode%d", i);
c0108037:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010803a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010803e:	c7 44 24 04 cb 18 11 	movl   $0xc01118cb,0x4(%esp)
c0108045:	c0 
c0108046:	8d 85 df fe ff ff    	lea    -0x121(%ebp),%eax
c010804c:	89 04 24             	mov    %eax,(%esp)
c010804f:	e8 96 b1 ff ff       	call   c01031ea <sprintf>
        inodes[i] = vfs_create_inode(name, S_IRUSR | S_IWUSR, root, 0, 0);
c0108054:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108057:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010805e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108061:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c0108064:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0108069:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0108070:	00 
c0108071:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0108078:	00 
c0108079:	89 44 24 08          	mov    %eax,0x8(%esp)
c010807d:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108084:	00 
c0108085:	8d 85 df fe ff ff    	lea    -0x121(%ebp),%eax
c010808b:	89 04 24             	mov    %eax,(%esp)
c010808e:	e8 76 d1 ff ff       	call   c0105209 <vfs_create_inode>
c0108093:	89 03                	mov    %eax,(%ebx)

        if((i % STEP) == 0)
c0108095:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0108098:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c010809d:	89 c8                	mov    %ecx,%eax
c010809f:	f7 ea                	imul   %edx
c01080a1:	c1 fa 06             	sar    $0x6,%edx
c01080a4:	89 c8                	mov    %ecx,%eax
c01080a6:	c1 f8 1f             	sar    $0x1f,%eax
c01080a9:	89 d3                	mov    %edx,%ebx
c01080ab:	29 c3                	sub    %eax,%ebx
c01080ad:	89 d8                	mov    %ebx,%eax
c01080af:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c01080b5:	89 ca                	mov    %ecx,%edx
c01080b7:	29 c2                	sub    %eax,%edx
c01080b9:	89 d0                	mov    %edx,%eax
c01080bb:	85 c0                	test   %eax,%eax
c01080bd:	75 0c                	jne    c01080cb <test_vfs+0xcd>
        {
            printf("=");
c01080bf:	c7 04 24 3d 00 00 00 	movl   $0x3d,(%esp)
c01080c6:	e8 8a 3a 00 00       	call   c010bb55 <putchar>
    int i,j;
    char name[256];
    vfs_inode_t **inodes = malloc(sizeof(vfs_inode_t*) * COUNT);

    printf("creating %d inodes...\n", COUNT);
    for(i = 0; i < COUNT; i++)
c01080cb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01080cf:	81 7d f4 10 27 00 00 	cmpl   $0x2710,-0xc(%ebp)
c01080d6:	0f 8e 5b ff ff ff    	jle    c0108037 <test_vfs+0x39>
        if((i % STEP) == 0)
        {
            printf("=");
        }
    }
    printf("\n");
c01080dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01080e3:	e8 6d 3a 00 00       	call   c010bb55 <putchar>

    printf("writing a lot in them...\n");
c01080e8:	c7 04 24 d8 18 11 c0 	movl   $0xc01118d8,(%esp)
c01080ef:	e8 c0 3b 00 00       	call   c010bcb4 <puts>
    for(i = 0; i < COUNT; i++)
c01080f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01080fb:	e9 d4 00 00 00       	jmp    c01081d4 <test_vfs+0x1d6>
    {
        char *buffer = malloc(10000);
c0108100:	c7 04 24 10 27 00 00 	movl   $0x2710,(%esp)
c0108107:	e8 9a 55 00 00       	call   c010d6a6 <malloc>
c010810c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for(j = 0; j < 10000; j++)
c010810f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0108116:	eb 3e                	jmp    c0108156 <test_vfs+0x158>
        {
            buffer[j] = 'a' + j%25;
c0108118:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010811b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010811e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c0108121:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108124:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c0108129:	89 c8                	mov    %ecx,%eax
c010812b:	f7 ea                	imul   %edx
c010812d:	c1 fa 03             	sar    $0x3,%edx
c0108130:	89 c8                	mov    %ecx,%eax
c0108132:	c1 f8 1f             	sar    $0x1f,%eax
c0108135:	29 c2                	sub    %eax,%edx
c0108137:	89 d0                	mov    %edx,%eax
c0108139:	c1 e0 02             	shl    $0x2,%eax
c010813c:	01 d0                	add    %edx,%eax
c010813e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108145:	01 d0                	add    %edx,%eax
c0108147:	89 ca                	mov    %ecx,%edx
c0108149:	29 c2                	sub    %eax,%edx
c010814b:	89 d0                	mov    %edx,%eax
c010814d:	83 c0 61             	add    $0x61,%eax
c0108150:	88 03                	mov    %al,(%ebx)

    printf("writing a lot in them...\n");
    for(i = 0; i < COUNT; i++)
    {
        char *buffer = malloc(10000);
        for(j = 0; j < 10000; j++)
c0108152:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0108156:	81 7d f0 0f 27 00 00 	cmpl   $0x270f,-0x10(%ebp)
c010815d:	7e b9                	jle    c0108118 <test_vfs+0x11a>
        {
            buffer[j] = 'a' + j%25;
        }

        vfs_write(inodes[i], 0, buffer, 10000);
c010815f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108162:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108169:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010816c:	01 d0                	add    %edx,%eax
c010816e:	8b 00                	mov    (%eax),%eax
c0108170:	c7 44 24 0c 10 27 00 	movl   $0x2710,0xc(%esp)
c0108177:	00 
c0108178:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010817b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010817f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108186:	00 
c0108187:	89 04 24             	mov    %eax,(%esp)
c010818a:	e8 48 d2 ff ff       	call   c01053d7 <vfs_write>

        free(buffer);
c010818f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108192:	89 04 24             	mov    %eax,(%esp)
c0108195:	e8 f3 55 00 00       	call   c010d78d <free>

        if((i % STEP) == 0)
c010819a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010819d:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c01081a2:	89 c8                	mov    %ecx,%eax
c01081a4:	f7 ea                	imul   %edx
c01081a6:	c1 fa 06             	sar    $0x6,%edx
c01081a9:	89 c8                	mov    %ecx,%eax
c01081ab:	c1 f8 1f             	sar    $0x1f,%eax
c01081ae:	89 d3                	mov    %edx,%ebx
c01081b0:	29 c3                	sub    %eax,%ebx
c01081b2:	89 d8                	mov    %ebx,%eax
c01081b4:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c01081ba:	89 ca                	mov    %ecx,%edx
c01081bc:	29 c2                	sub    %eax,%edx
c01081be:	89 d0                	mov    %edx,%eax
c01081c0:	85 c0                	test   %eax,%eax
c01081c2:	75 0c                	jne    c01081d0 <test_vfs+0x1d2>
        {
            printf("=");
c01081c4:	c7 04 24 3d 00 00 00 	movl   $0x3d,(%esp)
c01081cb:	e8 85 39 00 00       	call   c010bb55 <putchar>
        }
    }
    printf("\n");

    printf("writing a lot in them...\n");
    for(i = 0; i < COUNT; i++)
c01081d0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01081d4:	81 7d f4 10 27 00 00 	cmpl   $0x2710,-0xc(%ebp)
c01081db:	0f 8e 1f ff ff ff    	jle    c0108100 <test_vfs+0x102>
        if((i % STEP) == 0)
        {
            printf("=");
        }
    }
    printf("\n");
c01081e1:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01081e8:	e8 68 39 00 00       	call   c010bb55 <putchar>

    printf("read them out and check!\n");
c01081ed:	c7 04 24 f1 18 11 c0 	movl   $0xc01118f1,(%esp)
c01081f4:	e8 bb 3a 00 00       	call   c010bcb4 <puts>
    int fails=0;
c01081f9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for(i = 0; i < COUNT; i++)
c0108200:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108207:	e9 f5 00 00 00       	jmp    c0108301 <test_vfs+0x303>
    {
        char *buffer = malloc(10000);
c010820c:	c7 04 24 10 27 00 00 	movl   $0x2710,(%esp)
c0108213:	e8 8e 54 00 00       	call   c010d6a6 <malloc>
c0108218:	89 45 e0             	mov    %eax,-0x20(%ebp)
        vfs_read(inodes[i], 0, buffer, 10000);
c010821b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010821e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108225:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108228:	01 d0                	add    %edx,%eax
c010822a:	8b 00                	mov    (%eax),%eax
c010822c:	c7 44 24 0c 10 27 00 	movl   $0x2710,0xc(%esp)
c0108233:	00 
c0108234:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108237:	89 54 24 08          	mov    %edx,0x8(%esp)
c010823b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108242:	00 
c0108243:	89 04 24             	mov    %eax,(%esp)
c0108246:	e8 99 d3 ff ff       	call   c01055e4 <vfs_read>

        for(j = 0; j < 10000; j++)
c010824b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0108252:	eb 5f                	jmp    c01082b3 <test_vfs+0x2b5>
        {
            char testchar = 'a' + j%25;
c0108254:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108257:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010825c:	89 c8                	mov    %ecx,%eax
c010825e:	f7 ea                	imul   %edx
c0108260:	c1 fa 03             	sar    $0x3,%edx
c0108263:	89 c8                	mov    %ecx,%eax
c0108265:	c1 f8 1f             	sar    $0x1f,%eax
c0108268:	29 c2                	sub    %eax,%edx
c010826a:	89 d0                	mov    %edx,%eax
c010826c:	c1 e0 02             	shl    $0x2,%eax
c010826f:	01 d0                	add    %edx,%eax
c0108271:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108278:	01 d0                	add    %edx,%eax
c010827a:	89 ca                	mov    %ecx,%edx
c010827c:	29 c2                	sub    %eax,%edx
c010827e:	89 d0                	mov    %edx,%eax
c0108280:	83 c0 61             	add    $0x61,%eax
c0108283:	88 45 df             	mov    %al,-0x21(%ebp)
            if(buffer[j] != testchar)
c0108286:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108289:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010828c:	01 d0                	add    %edx,%eax
c010828e:	0f b6 00             	movzbl (%eax),%eax
c0108291:	3a 45 df             	cmp    -0x21(%ebp),%al
c0108294:	74 19                	je     c01082af <test_vfs+0x2b1>
            {
                printf("failed at %d\n", j);
c0108296:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108299:	89 44 24 04          	mov    %eax,0x4(%esp)
c010829d:	c7 04 24 0a 19 11 c0 	movl   $0xc011190a,(%esp)
c01082a4:	e8 d4 ae ff ff       	call   c010317d <printf>
                fails ++;
c01082a9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
                break;
c01082ad:	eb 0d                	jmp    c01082bc <test_vfs+0x2be>
    for(i = 0; i < COUNT; i++)
    {
        char *buffer = malloc(10000);
        vfs_read(inodes[i], 0, buffer, 10000);

        for(j = 0; j < 10000; j++)
c01082af:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01082b3:	81 7d f0 0f 27 00 00 	cmpl   $0x270f,-0x10(%ebp)
c01082ba:	7e 98                	jle    c0108254 <test_vfs+0x256>
                fails ++;
                break;
            }
        }

        free(buffer);
c01082bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01082bf:	89 04 24             	mov    %eax,(%esp)
c01082c2:	e8 c6 54 00 00       	call   c010d78d <free>

        if((i % STEP) == 0)
c01082c7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01082ca:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c01082cf:	89 c8                	mov    %ecx,%eax
c01082d1:	f7 ea                	imul   %edx
c01082d3:	c1 fa 06             	sar    $0x6,%edx
c01082d6:	89 c8                	mov    %ecx,%eax
c01082d8:	c1 f8 1f             	sar    $0x1f,%eax
c01082db:	89 d3                	mov    %edx,%ebx
c01082dd:	29 c3                	sub    %eax,%ebx
c01082df:	89 d8                	mov    %ebx,%eax
c01082e1:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c01082e7:	89 ca                	mov    %ecx,%edx
c01082e9:	29 c2                	sub    %eax,%edx
c01082eb:	89 d0                	mov    %edx,%eax
c01082ed:	85 c0                	test   %eax,%eax
c01082ef:	75 0c                	jne    c01082fd <test_vfs+0x2ff>
        {
            printf("=");
c01082f1:	c7 04 24 3d 00 00 00 	movl   $0x3d,(%esp)
c01082f8:	e8 58 38 00 00       	call   c010bb55 <putchar>
    }
    printf("\n");

    printf("read them out and check!\n");
    int fails=0;
    for(i = 0; i < COUNT; i++)
c01082fd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108301:	81 7d f4 10 27 00 00 	cmpl   $0x2710,-0xc(%ebp)
c0108308:	0f 8e fe fe ff ff    	jle    c010820c <test_vfs+0x20e>
        if((i % STEP) == 0)
        {
            printf("=");
        }
    }
    printf("\n");
c010830e:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0108315:	e8 3b 38 00 00       	call   c010bb55 <putchar>

    printf("%d of %d inodes failed\n", fails, COUNT);
c010831a:	c7 44 24 08 11 27 00 	movl   $0x2711,0x8(%esp)
c0108321:	00 
c0108322:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108325:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108329:	c7 04 24 18 19 11 c0 	movl   $0xc0111918,(%esp)
c0108330:	e8 48 ae ff ff       	call   c010317d <printf>

    free(inodes);
c0108335:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108338:	89 04 24             	mov    %eax,(%esp)
c010833b:	e8 4d 54 00 00       	call   c010d78d <free>
    if(fails)
c0108340:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108344:	74 07                	je     c010834d <test_vfs+0x34f>
        return false;
c0108346:	b8 00 00 00 00       	mov    $0x0,%eax
c010834b:	eb 05                	jmp    c0108352 <test_vfs+0x354>
    return true;
c010834d:	b8 01 00 00 00       	mov    $0x1,%eax
c0108352:	81 c4 44 01 00 00    	add    $0x144,%esp
c0108358:	5b                   	pop    %ebx
c0108359:	5d                   	pop    %ebp
c010835a:	c3                   	ret    

c010835b <test_heap>:

#include <mm/heap.h>
#include <printf.h>

bool test_heap()
{
c010835b:	55                   	push   %ebp
c010835c:	89 e5                	mov    %esp,%ebp
c010835e:	83 ec 28             	sub    $0x28,%esp
    int i;
    printf("allocating array a with 5000 integers...\n");
c0108361:	c7 04 24 30 19 11 c0 	movl   $0xc0111930,(%esp)
c0108368:	e8 47 39 00 00       	call   c010bcb4 <puts>
    int *a = malloc(sizeof(int) * 5000);
c010836d:	c7 04 24 20 4e 00 00 	movl   $0x4e20,(%esp)
c0108374:	e8 2d 53 00 00       	call   c010d6a6 <malloc>
c0108379:	89 45 f0             	mov    %eax,-0x10(%ebp)
    printf("a is at 0x%p\nwriting to a...", a);
c010837c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010837f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108383:	c7 04 24 59 19 11 c0 	movl   $0xc0111959,(%esp)
c010838a:	e8 ee ad ff ff       	call   c010317d <printf>

    for(i = 0; i < 5000; i++) a[i] = i;
c010838f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108396:	eb 18                	jmp    c01083b0 <test_heap+0x55>
c0108398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010839b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01083a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083a5:	01 c2                	add    %eax,%edx
c01083a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083aa:	89 02                	mov    %eax,(%edx)
c01083ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01083b0:	81 7d f4 87 13 00 00 	cmpl   $0x1387,-0xc(%ebp)
c01083b7:	7e df                	jle    c0108398 <test_heap+0x3d>

    printf("allocating array b with 25000 integers...\n");
c01083b9:	c7 04 24 78 19 11 c0 	movl   $0xc0111978,(%esp)
c01083c0:	e8 ef 38 00 00       	call   c010bcb4 <puts>
    int *b = malloc(sizeof(int) * 25000);
c01083c5:	c7 04 24 a0 86 01 00 	movl   $0x186a0,(%esp)
c01083cc:	e8 d5 52 00 00       	call   c010d6a6 <malloc>
c01083d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    printf("b is at 0x%p\nwriting to b...\n", b);
c01083d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083db:	c7 04 24 a2 19 11 c0 	movl   $0xc01119a2,(%esp)
c01083e2:	e8 96 ad ff ff       	call   c010317d <printf>
    for(i = 0; i < 25000; i++) b[i] = 25000-i;
c01083e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01083ee:	eb 1d                	jmp    c010840d <test_heap+0xb2>
c01083f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01083fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083fd:	01 c2                	add    %eax,%edx
c01083ff:	b8 a8 61 00 00       	mov    $0x61a8,%eax
c0108404:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0108407:	89 02                	mov    %eax,(%edx)
c0108409:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010840d:	81 7d f4 a7 61 00 00 	cmpl   $0x61a7,-0xc(%ebp)
c0108414:	7e da                	jle    c01083f0 <test_heap+0x95>

    printf("reallocating array a with 25000...\n");
c0108416:	c7 04 24 c0 19 11 c0 	movl   $0xc01119c0,(%esp)
c010841d:	e8 92 38 00 00       	call   c010bcb4 <puts>
    a = realloc(a, sizeof(int) * 25000);
c0108422:	c7 44 24 04 a0 86 01 	movl   $0x186a0,0x4(%esp)
c0108429:	00 
c010842a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010842d:	89 04 24             	mov    %eax,(%esp)
c0108430:	e8 b0 53 00 00       	call   c010d7e5 <realloc>
c0108435:	89 45 f0             	mov    %eax,-0x10(%ebp)

    printf("copying array b to array a...\n");
c0108438:	c7 04 24 e3 19 11 c0 	movl   $0xc01119e3,(%esp)
c010843f:	e8 70 38 00 00       	call   c010bcb4 <puts>
    for(i = 0; i < 25000; i++) a[i] = b[i];
c0108444:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010844b:	eb 26                	jmp    c0108473 <test_heap+0x118>
c010844d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108450:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108457:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010845a:	01 c2                	add    %eax,%edx
c010845c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010845f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0108466:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108469:	01 c8                	add    %ecx,%eax
c010846b:	8b 00                	mov    (%eax),%eax
c010846d:	89 02                	mov    %eax,(%edx)
c010846f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108473:	81 7d f4 a7 61 00 00 	cmpl   $0x61a7,-0xc(%ebp)
c010847a:	7e d1                	jle    c010844d <test_heap+0xf2>

    printf("freeing b\n");
c010847c:	c7 04 24 01 1a 11 c0 	movl   $0xc0111a01,(%esp)
c0108483:	e8 2c 38 00 00       	call   c010bcb4 <puts>
    free(b);
c0108488:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010848b:	89 04 24             	mov    %eax,(%esp)
c010848e:	e8 fa 52 00 00       	call   c010d78d <free>

    for(i = 0; i < 2500; i++) ;//printf("test : %d, %d\n", i, a[i]);
c0108493:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010849a:	eb 04                	jmp    c01084a0 <test_heap+0x145>
c010849c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01084a0:	81 7d f4 c3 09 00 00 	cmpl   $0x9c3,-0xc(%ebp)
c01084a7:	7e f3                	jle    c010849c <test_heap+0x141>

    printf("freeing a\n");
c01084a9:	c7 04 24 0b 1a 11 c0 	movl   $0xc0111a0b,(%esp)
c01084b0:	e8 ff 37 00 00       	call   c010bcb4 <puts>
    free(a);
c01084b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084b8:	89 04 24             	mov    %eax,(%esp)
c01084bb:	e8 cd 52 00 00       	call   c010d78d <free>

    return true;
c01084c0:	b8 01 00 00 00       	mov    $0x1,%eax
c01084c5:	c9                   	leave  
c01084c6:	c3                   	ret    

c01084c7 <test_list_create_destroy>:
 * @brief tests the create/destroy functions of the list module
 * @return 0 if success
 * @return 1 if failture
 */
int test_list_create_destroy()
{
c01084c7:	55                   	push   %ebp
c01084c8:	89 e5                	mov    %esp,%ebp
c01084ca:	81 ec b8 01 00 00    	sub    $0x1b8,%esp
    list_t *firstList = NULL;
c01084d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    if((firstList = list_create()) == NULL)
c01084d7:	e8 a2 a0 ff ff       	call   c010257e <list_create>
c01084dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01084df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01084e3:	75 16                	jne    c01084fb <test_list_create_destroy+0x34>
    {
        printf("create/delete one list: failture\n");
c01084e5:	c7 04 24 18 1a 11 c0 	movl   $0xc0111a18,(%esp)
c01084ec:	e8 c3 37 00 00       	call   c010bcb4 <puts>
        return 1;
c01084f1:	b8 01 00 00 00       	mov    $0x1,%eax
c01084f6:	e9 80 00 00 00       	jmp    c010857b <test_list_create_destroy+0xb4>
    }

    list_destroy(firstList);
c01084fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084fe:	89 04 24             	mov    %eax,(%esp)
c0108501:	e8 d0 a0 ff ff       	call   c01025d6 <list_destroy>

    list_t *nextLists[CREATE_TEST_NUMBER];
    int i;

    for(i = 0; i < CREATE_TEST_NUMBER; i++)
c0108506:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010850d:	eb 3c                	jmp    c010854b <test_list_create_destroy+0x84>
    {
        if((nextLists[i] = list_create()) == NULL)
c010850f:	e8 6a a0 ff ff       	call   c010257e <list_create>
c0108514:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108517:	89 84 95 60 fe ff ff 	mov    %eax,-0x1a0(%ebp,%edx,4)
c010851e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108521:	8b 84 85 60 fe ff ff 	mov    -0x1a0(%ebp,%eax,4),%eax
c0108528:	85 c0                	test   %eax,%eax
c010852a:	75 1b                	jne    c0108547 <test_list_create_destroy+0x80>
        {
            printf("create/delete %d lists: failture\n", CREATE_TEST_NUMBER);
c010852c:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0108533:	00 
c0108534:	c7 04 24 3c 1a 11 c0 	movl   $0xc0111a3c,(%esp)
c010853b:	e8 3d ac ff ff       	call   c010317d <printf>
            return 1;
c0108540:	b8 01 00 00 00       	mov    $0x1,%eax
c0108545:	eb 34                	jmp    c010857b <test_list_create_destroy+0xb4>
    list_destroy(firstList);

    list_t *nextLists[CREATE_TEST_NUMBER];
    int i;

    for(i = 0; i < CREATE_TEST_NUMBER; i++)
c0108547:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010854b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010854f:	7e be                	jle    c010850f <test_list_create_destroy+0x48>
            printf("create/delete %d lists: failture\n", CREATE_TEST_NUMBER);
            return 1;
        }
    }

    for(i = 0; i < CREATE_TEST_NUMBER; i++)
c0108551:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108558:	eb 16                	jmp    c0108570 <test_list_create_destroy+0xa9>
        list_destroy(nextLists[i]);
c010855a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010855d:	8b 84 85 60 fe ff ff 	mov    -0x1a0(%ebp,%eax,4),%eax
c0108564:	89 04 24             	mov    %eax,(%esp)
c0108567:	e8 6a a0 ff ff       	call   c01025d6 <list_destroy>
            printf("create/delete %d lists: failture\n", CREATE_TEST_NUMBER);
            return 1;
        }
    }

    for(i = 0; i < CREATE_TEST_NUMBER; i++)
c010856c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108570:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108574:	7e e4                	jle    c010855a <test_list_create_destroy+0x93>
        list_destroy(nextLists[i]);

    return 0;
c0108576:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010857b:	c9                   	leave  
c010857c:	c3                   	ret    

c010857d <test_list_push_pop>:
 * @brief tests the push/pop functions of the list module
 * @return 0 if success
 * @return 1 if failture
 */
int test_list_push_pop()
{
c010857d:	55                   	push   %ebp
c010857e:	89 e5                	mov    %esp,%ebp
c0108580:	83 ec 48             	sub    $0x48,%esp
    list_t *testList = list_create();
c0108583:	e8 f6 9f ff ff       	call   c010257e <list_create>
c0108588:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int a = 12345;
c010858b:	c7 45 e0 39 30 00 00 	movl   $0x3039,-0x20(%ebp)
    int b = 98765;
c0108592:	c7 45 dc cd 81 01 00 	movl   $0x181cd,-0x24(%ebp)
    int c = 54321;
c0108599:	c7 45 d8 31 d4 00 00 	movl   $0xd431,-0x28(%ebp)
    int d = 56789;
c01085a0:	c7 45 d4 d5 dd 00 00 	movl   $0xddd5,-0x2c(%ebp)
    int *resa, *resb, *resc, *resd;

    list_push_front(testList, &b);
c01085a7:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01085aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085b1:	89 04 24             	mov    %eax,(%esp)
c01085b4:	e8 fc a0 ff ff       	call   c01026b5 <list_push_front>
    list_push_front(testList, &a);
c01085b9:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01085bc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085c3:	89 04 24             	mov    %eax,(%esp)
c01085c6:	e8 ea a0 ff ff       	call   c01026b5 <list_push_front>
    list_push_back(testList, &c);
c01085cb:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01085ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085d5:	89 04 24             	mov    %eax,(%esp)
c01085d8:	e8 85 a0 ff ff       	call   c0102662 <list_push_back>
    list_push_back(testList, &d);
c01085dd:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01085e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085e7:	89 04 24             	mov    %eax,(%esp)
c01085ea:	e8 73 a0 ff ff       	call   c0102662 <list_push_back>

    resa = list_pop_front(testList);
c01085ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085f2:	89 04 24             	mov    %eax,(%esp)
c01085f5:	e8 8b a1 ff ff       	call   c0102785 <list_pop_front>
c01085fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    resb = list_pop_front(testList);
c01085fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108600:	89 04 24             	mov    %eax,(%esp)
c0108603:	e8 7d a1 ff ff       	call   c0102785 <list_pop_front>
c0108608:	89 45 ec             	mov    %eax,-0x14(%ebp)
    resd = list_pop_back(testList);
c010860b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010860e:	89 04 24             	mov    %eax,(%esp)
c0108611:	e8 29 a1 ff ff       	call   c010273f <list_pop_back>
c0108616:	89 45 e8             	mov    %eax,-0x18(%ebp)
    resc = list_pop_back(testList);
c0108619:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010861c:	89 04 24             	mov    %eax,(%esp)
c010861f:	e8 1b a1 ff ff       	call   c010273f <list_pop_back>
c0108624:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if(*resa != a || *resb != b || *resc != c || *resd != d)
c0108627:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010862a:	8b 10                	mov    (%eax),%edx
c010862c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010862f:	39 c2                	cmp    %eax,%edx
c0108631:	75 24                	jne    c0108657 <test_list_push_pop+0xda>
c0108633:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108636:	8b 10                	mov    (%eax),%edx
c0108638:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010863b:	39 c2                	cmp    %eax,%edx
c010863d:	75 18                	jne    c0108657 <test_list_push_pop+0xda>
c010863f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108642:	8b 10                	mov    (%eax),%edx
c0108644:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108647:	39 c2                	cmp    %eax,%edx
c0108649:	75 0c                	jne    c0108657 <test_list_push_pop+0xda>
c010864b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010864e:	8b 10                	mov    (%eax),%edx
c0108650:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108653:	39 c2                	cmp    %eax,%edx
c0108655:	74 13                	je     c010866a <test_list_push_pop+0xed>
    {
        printf("list push and pop front and back: failture\n");
c0108657:	c7 04 24 60 1a 11 c0 	movl   $0xc0111a60,(%esp)
c010865e:	e8 51 36 00 00       	call   c010bcb4 <puts>
        return 1;
c0108663:	b8 01 00 00 00       	mov    $0x1,%eax
c0108668:	eb 10                	jmp    c010867a <test_list_push_pop+0xfd>
    }

    list_destroy(testList);
c010866a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010866d:	89 04 24             	mov    %eax,(%esp)
c0108670:	e8 61 9f ff ff       	call   c01025d6 <list_destroy>

    return 0;
c0108675:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010867a:	c9                   	leave  
c010867b:	c3                   	ret    

c010867c <test_list_is_empty>:
 * @brief tests the is_empty function of the list module
 * @return 0 if success
 * @return 1 if failture
 */
int test_list_is_empty()
{
c010867c:	55                   	push   %ebp
c010867d:	89 e5                	mov    %esp,%ebp
c010867f:	83 ec 28             	sub    $0x28,%esp
    list_t *testList = list_create();
c0108682:	e8 f7 9e ff ff       	call   c010257e <list_create>
c0108687:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(!list_is_empty(testList))
c010868a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010868d:	89 04 24             	mov    %eax,(%esp)
c0108690:	e8 71 a1 ff ff       	call   c0102806 <list_is_empty>
c0108695:	85 c0                	test   %eax,%eax
c0108697:	75 13                	jne    c01086ac <test_list_is_empty+0x30>
    {
        printf("list is empty: failture\n");
c0108699:	c7 04 24 8b 1a 11 c0 	movl   $0xc0111a8b,(%esp)
c01086a0:	e8 0f 36 00 00       	call   c010bcb4 <puts>
        return 1;
c01086a5:	b8 01 00 00 00       	mov    $0x1,%eax
c01086aa:	eb 75                	jmp    c0108721 <test_list_is_empty+0xa5>
    }

    int i;

    for(i = 0; i < FILL_TEST_NUMBER; i++)
c01086ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01086b3:	eb 16                	jmp    c01086cb <test_list_is_empty+0x4f>
        list_push_front(testList, testList);
c01086b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086bf:	89 04 24             	mov    %eax,(%esp)
c01086c2:	e8 ee 9f ff ff       	call   c01026b5 <list_push_front>
        return 1;
    }

    int i;

    for(i = 0; i < FILL_TEST_NUMBER; i++)
c01086c7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01086cb:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c01086cf:	7e e4                	jle    c01086b5 <test_list_is_empty+0x39>
        list_push_front(testList, testList);

    for(i = 0; i < FILL_TEST_NUMBER; i++)
c01086d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01086d8:	eb 0f                	jmp    c01086e9 <test_list_is_empty+0x6d>
        list_pop_front(testList);
c01086da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086dd:	89 04 24             	mov    %eax,(%esp)
c01086e0:	e8 a0 a0 ff ff       	call   c0102785 <list_pop_front>
    int i;

    for(i = 0; i < FILL_TEST_NUMBER; i++)
        list_push_front(testList, testList);

    for(i = 0; i < FILL_TEST_NUMBER; i++)
c01086e5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01086e9:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c01086ed:	7e eb                	jle    c01086da <test_list_is_empty+0x5e>
        list_pop_front(testList);

    if(!list_is_empty(testList))
c01086ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086f2:	89 04 24             	mov    %eax,(%esp)
c01086f5:	e8 0c a1 ff ff       	call   c0102806 <list_is_empty>
c01086fa:	85 c0                	test   %eax,%eax
c01086fc:	75 13                	jne    c0108711 <test_list_is_empty+0x95>
    {
        printf("list is empty: failture\n");
c01086fe:	c7 04 24 8b 1a 11 c0 	movl   $0xc0111a8b,(%esp)
c0108705:	e8 aa 35 00 00       	call   c010bcb4 <puts>
        return 1;
c010870a:	b8 01 00 00 00       	mov    $0x1,%eax
c010870f:	eb 10                	jmp    c0108721 <test_list_is_empty+0xa5>
    }

    list_destroy(testList);
c0108711:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108714:	89 04 24             	mov    %eax,(%esp)
c0108717:	e8 ba 9e ff ff       	call   c01025d6 <list_destroy>

    return 0;
c010871c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108721:	c9                   	leave  
c0108722:	c3                   	ret    

c0108723 <test_list_length>:
* @brief tests the length function of the list module
* @return 0 if success
* @return 1 if failture
*/
int test_list_length()
{
c0108723:	55                   	push   %ebp
c0108724:	89 e5                	mov    %esp,%ebp
c0108726:	83 ec 28             	sub    $0x28,%esp
    list_t *testList = list_create();
c0108729:	e8 50 9e ff ff       	call   c010257e <list_create>
c010872e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i;

    for(i = 0; i < SIZE_TEST_NUMBER; i++)
c0108731:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108738:	eb 16                	jmp    c0108750 <test_list_length+0x2d>
        list_push_front(testList, testList);
c010873a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010873d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108741:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108744:	89 04 24             	mov    %eax,(%esp)
c0108747:	e8 69 9f ff ff       	call   c01026b5 <list_push_front>
{
    list_t *testList = list_create();

    int i;

    for(i = 0; i < SIZE_TEST_NUMBER; i++)
c010874c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108750:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108754:	7e e4                	jle    c010873a <test_list_length+0x17>
        list_push_front(testList, testList);

    if(list_length(testList) != SIZE_TEST_NUMBER)
c0108756:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108759:	89 04 24             	mov    %eax,(%esp)
c010875c:	e8 69 a0 ff ff       	call   c01027ca <list_length>
c0108761:	83 f8 64             	cmp    $0x64,%eax
c0108764:	74 13                	je     c0108779 <test_list_length+0x56>
    {
        printf("list length: failture\n");
c0108766:	c7 04 24 a3 1a 11 c0 	movl   $0xc0111aa3,(%esp)
c010876d:	e8 42 35 00 00       	call   c010bcb4 <puts>
        return 1;
c0108772:	b8 01 00 00 00       	mov    $0x1,%eax
c0108777:	eb 10                	jmp    c0108789 <test_list_length+0x66>
    }

    list_destroy(testList);
c0108779:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010877c:	89 04 24             	mov    %eax,(%esp)
c010877f:	e8 52 9e ff ff       	call   c01025d6 <list_destroy>

    return 0;
c0108784:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108789:	c9                   	leave  
c010878a:	c3                   	ret    

c010878b <test_list>:
 * @brief tests the list module
 * @return 0 if success
 * @return 1 if failture
 */
int test_list()
{
c010878b:	55                   	push   %ebp
c010878c:	89 e5                	mov    %esp,%ebp
c010878e:	83 ec 18             	sub    $0x18,%esp
    if(test_list_create_destroy())
c0108791:	e8 31 fd ff ff       	call   c01084c7 <test_list_create_destroy>
c0108796:	85 c0                	test   %eax,%eax
c0108798:	74 07                	je     c01087a1 <test_list+0x16>
        return 1;
c010879a:	b8 01 00 00 00       	mov    $0x1,%eax
c010879f:	eb 41                	jmp    c01087e2 <test_list+0x57>

    if(test_list_push_pop())
c01087a1:	e8 d7 fd ff ff       	call   c010857d <test_list_push_pop>
c01087a6:	85 c0                	test   %eax,%eax
c01087a8:	74 07                	je     c01087b1 <test_list+0x26>
        return 1;
c01087aa:	b8 01 00 00 00       	mov    $0x1,%eax
c01087af:	eb 31                	jmp    c01087e2 <test_list+0x57>

    if(test_list_is_empty())
c01087b1:	e8 c6 fe ff ff       	call   c010867c <test_list_is_empty>
c01087b6:	85 c0                	test   %eax,%eax
c01087b8:	74 07                	je     c01087c1 <test_list+0x36>
        return 1;
c01087ba:	b8 01 00 00 00       	mov    $0x1,%eax
c01087bf:	eb 21                	jmp    c01087e2 <test_list+0x57>

    if(test_list_length())
c01087c1:	e8 5d ff ff ff       	call   c0108723 <test_list_length>
c01087c6:	85 c0                	test   %eax,%eax
c01087c8:	74 07                	je     c01087d1 <test_list+0x46>
        return 1;
c01087ca:	b8 01 00 00 00       	mov    $0x1,%eax
c01087cf:	eb 11                	jmp    c01087e2 <test_list+0x57>

    printf("list test: all successful\n");
c01087d1:	c7 04 24 b9 1a 11 c0 	movl   $0xc0111ab9,(%esp)
c01087d8:	e8 d7 34 00 00       	call   c010bcb4 <puts>

    return 0;
c01087dd:	b8 00 00 00 00       	mov    $0x0,%eax
c01087e2:	c9                   	leave  
c01087e3:	c3                   	ret    

c01087e4 <identify_os>:
extern struct process_state *kernel_state;



void identify_os(struct cpu_state **cpu)
{
c01087e4:	55                   	push   %ebp
c01087e5:	89 e5                	mov    %esp,%ebp
    (*cpu)->CPU_ARG0 = 'u' | ('n' << 8) | ('i' << 16) | (OS_VERSION << 24);
c01087e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01087ea:	8b 00                	mov    (%eax),%eax
c01087ec:	c7 40 28 75 6e 69 01 	movl   $0x1696e75,0x28(%eax)
};
c01087f3:	5d                   	pop    %ebp
c01087f4:	c3                   	ret    

c01087f5 <linux_syscall_handler>:
    sys_getdents, NULL, NULL, NULL,
    /*FIXME: getcwd kommt weiter hinten (183)*/ sys_getcwd
};

void linux_syscall_handler(struct cpu_state **cpu)
{
c01087f5:	55                   	push   %ebp
c01087f6:	89 e5                	mov    %esp,%ebp
c01087f8:	83 ec 18             	sub    $0x18,%esp
    if( (*cpu)->CPU_ARG0 < DEFINED_LINUX_FUNCTIONS)
c01087fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01087fe:	8b 00                	mov    (%eax),%eax
c0108800:	8b 40 28             	mov    0x28(%eax),%eax
c0108803:	83 f8 3b             	cmp    $0x3b,%eax
c0108806:	77 2a                	ja     c0108832 <linux_syscall_handler+0x3d>
    {
        if(linux_functions[(*cpu)->CPU_ARG0] != NULL)
c0108808:	8b 45 08             	mov    0x8(%ebp),%eax
c010880b:	8b 00                	mov    (%eax),%eax
c010880d:	8b 40 28             	mov    0x28(%eax),%eax
c0108810:	8b 04 85 a0 30 11 c0 	mov    -0x3feecf60(,%eax,4),%eax
c0108817:	85 c0                	test   %eax,%eax
c0108819:	74 17                	je     c0108832 <linux_syscall_handler+0x3d>
            linux_functions[(*cpu)->CPU_ARG0](cpu);
c010881b:	8b 45 08             	mov    0x8(%ebp),%eax
c010881e:	8b 00                	mov    (%eax),%eax
c0108820:	8b 40 28             	mov    0x28(%eax),%eax
c0108823:	8b 04 85 a0 30 11 c0 	mov    -0x3feecf60(,%eax,4),%eax
c010882a:	8b 55 08             	mov    0x8(%ebp),%edx
c010882d:	89 14 24             	mov    %edx,(%esp)
c0108830:	ff d0                	call   *%eax
    }
}
c0108832:	c9                   	leave  
c0108833:	c3                   	ret    

c0108834 <universe_syscall_handler>:
    thread_exit,launch_thread,alloc_memory,identify_os,set_pipe_trigger
};


void universe_syscall_handler(struct cpu_state **cpu)
{
c0108834:	55                   	push   %ebp
c0108835:	89 e5                	mov    %esp,%ebp
c0108837:	83 ec 18             	sub    $0x18,%esp
    if( (*cpu)->CPU_ARG0 < DEFINED_UNIVERSE_FUNCTIONS)
c010883a:	8b 45 08             	mov    0x8(%ebp),%eax
c010883d:	8b 00                	mov    (%eax),%eax
c010883f:	8b 40 28             	mov    0x28(%eax),%eax
c0108842:	83 f8 04             	cmp    $0x4,%eax
c0108845:	77 2a                	ja     c0108871 <universe_syscall_handler+0x3d>
    {
        if(universe_functions[(*cpu)->CPU_ARG0] != NULL)
c0108847:	8b 45 08             	mov    0x8(%ebp),%eax
c010884a:	8b 00                	mov    (%eax),%eax
c010884c:	8b 40 28             	mov    0x28(%eax),%eax
c010884f:	8b 04 85 7c 31 11 c0 	mov    -0x3feece84(,%eax,4),%eax
c0108856:	85 c0                	test   %eax,%eax
c0108858:	74 17                	je     c0108871 <universe_syscall_handler+0x3d>
            universe_functions[(*cpu)->CPU_ARG0](cpu);
c010885a:	8b 45 08             	mov    0x8(%ebp),%eax
c010885d:	8b 00                	mov    (%eax),%eax
c010885f:	8b 40 28             	mov    0x28(%eax),%eax
c0108862:	8b 04 85 7c 31 11 c0 	mov    -0x3feece84(,%eax,4),%eax
c0108869:	8b 55 08             	mov    0x8(%ebp),%edx
c010886c:	89 14 24             	mov    %edx,(%esp)
c010886f:	ff d0                	call   *%eax
    }
}
c0108871:	c9                   	leave  
c0108872:	c3                   	ret    

c0108873 <new_pckmgr>:
#include <udrcp/udrcp.h>



pckmgr *new_pckmgr(vfs_inode_t *in, vfs_inode_t *out, vfs_inode_t *err)
{
c0108873:	55                   	push   %ebp
c0108874:	89 e5                	mov    %esp,%ebp
c0108876:	83 ec 28             	sub    $0x28,%esp
    pckmgr *mgr = malloc(sizeof(pckmgr));
c0108879:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
c0108880:	e8 21 4e 00 00       	call   c010d6a6 <malloc>
c0108885:	89 45 f4             	mov    %eax,-0xc(%ebp)
    mgr->counter = 0;
c0108888:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010888b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    mgr->used_ids = list_create();
c0108891:	e8 e8 9c ff ff       	call   c010257e <list_create>
c0108896:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108899:	89 42 04             	mov    %eax,0x4(%edx)
    mgr->pset.stdin = in;
c010889c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010889f:	8b 55 08             	mov    0x8(%ebp),%edx
c01088a2:	89 50 08             	mov    %edx,0x8(%eax)
    mgr->pset.stdout = out;
c01088a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088a8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01088ab:	89 50 0c             	mov    %edx,0xc(%eax)
    mgr->pset.stderr = err;
c01088ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088b1:	8b 55 10             	mov    0x10(%ebp),%edx
c01088b4:	89 50 10             	mov    %edx,0x10(%eax)
    mgr->recieved_pcks = list_create();
c01088b7:	e8 c2 9c ff ff       	call   c010257e <list_create>
c01088bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088bf:	89 42 1c             	mov    %eax,0x1c(%edx)
    mgr->stdout_seeker = out->length;
c01088c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01088c5:	8b 40 08             	mov    0x8(%eax),%eax
c01088c8:	89 c2                	mov    %eax,%edx
c01088ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088cd:	89 50 14             	mov    %edx,0x14(%eax)
    mgr->stderr_seeker = err->length;
c01088d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01088d3:	8b 40 08             	mov    0x8(%eax),%eax
c01088d6:	89 c2                	mov    %eax,%edx
c01088d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088db:	89 50 18             	mov    %edx,0x18(%eax)
    return mgr;
c01088de:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01088e1:	c9                   	leave  
c01088e2:	c3                   	ret    

c01088e3 <reset_conn>:

void reset_conn(pckmgr *mgr)
{
c01088e3:	55                   	push   %ebp
c01088e4:	89 e5                	mov    %esp,%ebp
c01088e6:	83 ec 18             	sub    $0x18,%esp
    mgr->counter = 0;
c01088e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01088ec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    while(!list_is_empty(mgr->used_ids))
c01088f2:	eb 0e                	jmp    c0108902 <reset_conn+0x1f>
        list_pop_front(mgr->used_ids);
c01088f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01088f7:	8b 40 04             	mov    0x4(%eax),%eax
c01088fa:	89 04 24             	mov    %eax,(%esp)
c01088fd:	e8 83 9e ff ff       	call   c0102785 <list_pop_front>
}

void reset_conn(pckmgr *mgr)
{
    mgr->counter = 0;
    while(!list_is_empty(mgr->used_ids))
c0108902:	8b 45 08             	mov    0x8(%ebp),%eax
c0108905:	8b 40 04             	mov    0x4(%eax),%eax
c0108908:	89 04 24             	mov    %eax,(%esp)
c010890b:	e8 f6 9e ff ff       	call   c0102806 <list_is_empty>
c0108910:	85 c0                	test   %eax,%eax
c0108912:	74 e0                	je     c01088f4 <reset_conn+0x11>
        list_pop_front(mgr->used_ids);
    while(!list_is_empty(mgr->recieved_pcks))
c0108914:	eb 0e                	jmp    c0108924 <reset_conn+0x41>
        list_pop_front(mgr->recieved_pcks);
c0108916:	8b 45 08             	mov    0x8(%ebp),%eax
c0108919:	8b 40 1c             	mov    0x1c(%eax),%eax
c010891c:	89 04 24             	mov    %eax,(%esp)
c010891f:	e8 61 9e ff ff       	call   c0102785 <list_pop_front>
void reset_conn(pckmgr *mgr)
{
    mgr->counter = 0;
    while(!list_is_empty(mgr->used_ids))
        list_pop_front(mgr->used_ids);
    while(!list_is_empty(mgr->recieved_pcks))
c0108924:	8b 45 08             	mov    0x8(%ebp),%eax
c0108927:	8b 40 1c             	mov    0x1c(%eax),%eax
c010892a:	89 04 24             	mov    %eax,(%esp)
c010892d:	e8 d4 9e ff ff       	call   c0102806 <list_is_empty>
c0108932:	85 c0                	test   %eax,%eax
c0108934:	74 e0                	je     c0108916 <reset_conn+0x33>
        list_pop_front(mgr->recieved_pcks);
}
c0108936:	c9                   	leave  
c0108937:	c3                   	ret    

c0108938 <gen_pckid>:


pckid_t gen_pckid(pckmgr *mgr)
{
c0108938:	55                   	push   %ebp
c0108939:	89 e5                	mov    %esp,%ebp
c010893b:	83 ec 28             	sub    $0x28,%esp
    iterator_t used_id_it = iterator_create(mgr->used_ids);
c010893e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108941:	8b 50 04             	mov    0x4(%eax),%edx
c0108944:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108947:	89 54 24 04          	mov    %edx,0x4(%esp)
c010894b:	89 04 24             	mov    %eax,(%esp)
c010894e:	e8 f4 9e ff ff       	call   c0102847 <iterator_create>
c0108953:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(mgr->used_ids) && !list_is_last(&used_id_it))
c0108956:	eb 50                	jmp    c01089a8 <gen_pckid+0x70>
    {
        if((pckid_t)list_get_current(&used_id_it) == mgr->counter )
c0108958:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010895b:	89 04 24             	mov    %eax,(%esp)
c010895e:	e8 ad 9f ff ff       	call   c0102910 <list_get_current>
c0108963:	89 c2                	mov    %eax,%edx
c0108965:	8b 45 08             	mov    0x8(%ebp),%eax
c0108968:	8b 00                	mov    (%eax),%eax
c010896a:	39 c2                	cmp    %eax,%edx
c010896c:	75 2f                	jne    c010899d <gen_pckid+0x65>
        {
            if(mgr->counter == MAX_ID)
c010896e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108971:	8b 00                	mov    (%eax),%eax
c0108973:	83 f8 ff             	cmp    $0xffffffff,%eax
c0108976:	75 0b                	jne    c0108983 <gen_pckid+0x4b>
                mgr->counter = 0;
c0108978:	8b 45 08             	mov    0x8(%ebp),%eax
c010897b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0108981:	eb 0d                	jmp    c0108990 <gen_pckid+0x58>
            else
                mgr->counter++;
c0108983:	8b 45 08             	mov    0x8(%ebp),%eax
c0108986:	8b 00                	mov    (%eax),%eax
c0108988:	8d 50 01             	lea    0x1(%eax),%edx
c010898b:	8b 45 08             	mov    0x8(%ebp),%eax
c010898e:	89 10                	mov    %edx,(%eax)

            list_set_first(&used_id_it);
c0108990:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108993:	89 04 24             	mov    %eax,(%esp)
c0108996:	e8 dc 9f ff ff       	call   c0102977 <list_set_first>
c010899b:	eb 0b                	jmp    c01089a8 <gen_pckid+0x70>
        }
        else
            list_next(&used_id_it);
c010899d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01089a0:	89 04 24             	mov    %eax,(%esp)
c01089a3:	e8 8d 9f ff ff       	call   c0102935 <list_next>


pckid_t gen_pckid(pckmgr *mgr)
{
    iterator_t used_id_it = iterator_create(mgr->used_ids);
    while(!list_is_empty(mgr->used_ids) && !list_is_last(&used_id_it))
c01089a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01089ab:	8b 40 04             	mov    0x4(%eax),%eax
c01089ae:	89 04 24             	mov    %eax,(%esp)
c01089b1:	e8 50 9e ff ff       	call   c0102806 <list_is_empty>
c01089b6:	85 c0                	test   %eax,%eax
c01089b8:	75 0f                	jne    c01089c9 <gen_pckid+0x91>
c01089ba:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01089bd:	89 04 24             	mov    %eax,(%esp)
c01089c0:	e8 97 9f ff ff       	call   c010295c <list_is_last>
c01089c5:	85 c0                	test   %eax,%eax
c01089c7:	74 8f                	je     c0108958 <gen_pckid+0x20>
            list_set_first(&used_id_it);
        }
        else
            list_next(&used_id_it);
    }
    list_push_front(mgr->used_ids,(void*)mgr->counter);
c01089c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01089cc:	8b 00                	mov    (%eax),%eax
c01089ce:	89 c2                	mov    %eax,%edx
c01089d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01089d3:	8b 40 04             	mov    0x4(%eax),%eax
c01089d6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01089da:	89 04 24             	mov    %eax,(%esp)
c01089dd:	e8 d3 9c ff ff       	call   c01026b5 <list_push_front>
    return mgr->counter++;
c01089e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01089e5:	8b 00                	mov    (%eax),%eax
c01089e7:	89 c2                	mov    %eax,%edx
c01089e9:	8d 48 01             	lea    0x1(%eax),%ecx
c01089ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01089ef:	89 08                	mov    %ecx,(%eax)
c01089f1:	89 d0                	mov    %edx,%eax
}
c01089f3:	c9                   	leave  
c01089f4:	c3                   	ret    

c01089f5 <free_pckid>:


bool free_pckid(pckmgr *mgr, pckid_t id)
{
c01089f5:	55                   	push   %ebp
c01089f6:	89 e5                	mov    %esp,%ebp
c01089f8:	83 ec 28             	sub    $0x28,%esp
    iterator_t used_id_it = iterator_create(mgr->used_ids);
c01089fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01089fe:	8b 50 04             	mov    0x4(%eax),%edx
c0108a01:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a04:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108a08:	89 04 24             	mov    %eax,(%esp)
c0108a0b:	e8 37 9e ff ff       	call   c0102847 <iterator_create>
c0108a10:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(mgr->used_ids) && !list_is_last(&used_id_it))
c0108a13:	eb 2d                	jmp    c0108a42 <free_pckid+0x4d>
    {
        if((pckid_t)list_get_current(&used_id_it) == id )
c0108a15:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a18:	89 04 24             	mov    %eax,(%esp)
c0108a1b:	e8 f0 9e ff ff       	call   c0102910 <list_get_current>
c0108a20:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108a23:	75 12                	jne    c0108a37 <free_pckid+0x42>
        {
            list_remove(&used_id_it);
c0108a25:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a28:	89 04 24             	mov    %eax,(%esp)
c0108a2b:	e8 72 9f ff ff       	call   c01029a2 <list_remove>
            return true;
c0108a30:	b8 01 00 00 00       	mov    $0x1,%eax
c0108a35:	eb 31                	jmp    c0108a68 <free_pckid+0x73>
        }
        else
            list_next(&used_id_it);
c0108a37:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a3a:	89 04 24             	mov    %eax,(%esp)
c0108a3d:	e8 f3 9e ff ff       	call   c0102935 <list_next>


bool free_pckid(pckmgr *mgr, pckid_t id)
{
    iterator_t used_id_it = iterator_create(mgr->used_ids);
    while(!list_is_empty(mgr->used_ids) && !list_is_last(&used_id_it))
c0108a42:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a45:	8b 40 04             	mov    0x4(%eax),%eax
c0108a48:	89 04 24             	mov    %eax,(%esp)
c0108a4b:	e8 b6 9d ff ff       	call   c0102806 <list_is_empty>
c0108a50:	85 c0                	test   %eax,%eax
c0108a52:	75 0f                	jne    c0108a63 <free_pckid+0x6e>
c0108a54:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a57:	89 04 24             	mov    %eax,(%esp)
c0108a5a:	e8 fd 9e ff ff       	call   c010295c <list_is_last>
c0108a5f:	85 c0                	test   %eax,%eax
c0108a61:	74 b2                	je     c0108a15 <free_pckid+0x20>
        }
        else
            list_next(&used_id_it);
    }

    return false;
c0108a63:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108a68:	c9                   	leave  
c0108a69:	c3                   	ret    

c0108a6a <send_package>:

pckid_t send_package(pckmgr *mgr, pcktype_t type, size_t size, void *data)
{
c0108a6a:	55                   	push   %ebp
c0108a6b:	89 e5                	mov    %esp,%ebp
c0108a6d:	83 ec 28             	sub    $0x28,%esp
    pckhead_t *header = malloc(sizeof(pckhead_t));
c0108a70:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0108a77:	e8 2a 4c 00 00       	call   c010d6a6 <malloc>
c0108a7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pckid_t id = gen_pckid(mgr);
c0108a7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a82:	89 04 24             	mov    %eax,(%esp)
c0108a85:	e8 ae fe ff ff       	call   c0108938 <gen_pckid>
c0108a8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    header->id = id;
c0108a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a90:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108a93:	89 10                	mov    %edx,(%eax)
    header->size = size+sizeof(pckhead_t);
c0108a95:	8b 45 10             	mov    0x10(%ebp),%eax
c0108a98:	8d 50 0c             	lea    0xc(%eax),%edx
c0108a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a9e:	89 50 04             	mov    %edx,0x4(%eax)
    header->type = type;
c0108aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aa4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108aa7:	89 50 08             	mov    %edx,0x8(%eax)
    vfs_write(mgr->pset.stdin,mgr->pset.stdin->length,header,sizeof(pckhead_t));
c0108aaa:	8b 45 08             	mov    0x8(%ebp),%eax
c0108aad:	8b 40 08             	mov    0x8(%eax),%eax
c0108ab0:	8b 40 08             	mov    0x8(%eax),%eax
c0108ab3:	89 c2                	mov    %eax,%edx
c0108ab5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ab8:	8b 40 08             	mov    0x8(%eax),%eax
c0108abb:	c7 44 24 0c 0c 00 00 	movl   $0xc,0xc(%esp)
c0108ac2:	00 
c0108ac3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0108ac6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108aca:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ace:	89 04 24             	mov    %eax,(%esp)
c0108ad1:	e8 01 c9 ff ff       	call   c01053d7 <vfs_write>
    if(size)
c0108ad6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108ada:	74 2b                	je     c0108b07 <send_package+0x9d>
        vfs_write(mgr->pset.stdin,mgr->pset.stdin->length,data,size);
c0108adc:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108adf:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ae2:	8b 40 08             	mov    0x8(%eax),%eax
c0108ae5:	8b 40 08             	mov    0x8(%eax),%eax
c0108ae8:	89 c2                	mov    %eax,%edx
c0108aea:	8b 45 08             	mov    0x8(%ebp),%eax
c0108aed:	8b 40 08             	mov    0x8(%eax),%eax
c0108af0:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108af4:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0108af7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108afb:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108aff:	89 04 24             	mov    %eax,(%esp)
c0108b02:	e8 d0 c8 ff ff       	call   c01053d7 <vfs_write>
    free(header);
c0108b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b0a:	89 04 24             	mov    %eax,(%esp)
c0108b0d:	e8 7b 4c 00 00       	call   c010d78d <free>
    return id;
c0108b12:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0108b15:	c9                   	leave  
c0108b16:	c3                   	ret    

c0108b17 <respond>:


void respond(pckmgr *mgr,pckid_t id,pcktype_t type, size_t size, void *data)
{
c0108b17:	55                   	push   %ebp
c0108b18:	89 e5                	mov    %esp,%ebp
c0108b1a:	83 ec 28             	sub    $0x28,%esp
    pckhead_t *header = malloc(sizeof(pckhead_t));
c0108b1d:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0108b24:	e8 7d 4b 00 00       	call   c010d6a6 <malloc>
c0108b29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    header->id = id;
c0108b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b2f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108b32:	89 10                	mov    %edx,(%eax)
    header->size = size+12;
c0108b34:	8b 45 14             	mov    0x14(%ebp),%eax
c0108b37:	8d 50 0c             	lea    0xc(%eax),%edx
c0108b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b3d:	89 50 04             	mov    %edx,0x4(%eax)
    header->type = type;
c0108b40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b43:	8b 55 10             	mov    0x10(%ebp),%edx
c0108b46:	89 50 08             	mov    %edx,0x8(%eax)
    vfs_write(mgr->pset.stdin,mgr->pset.stdin->length,header,sizeof(pckhead_t));
c0108b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b4c:	8b 40 08             	mov    0x8(%eax),%eax
c0108b4f:	8b 40 08             	mov    0x8(%eax),%eax
c0108b52:	89 c2                	mov    %eax,%edx
c0108b54:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b57:	8b 40 08             	mov    0x8(%eax),%eax
c0108b5a:	c7 44 24 0c 0c 00 00 	movl   $0xc,0xc(%esp)
c0108b61:	00 
c0108b62:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0108b65:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108b69:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108b6d:	89 04 24             	mov    %eax,(%esp)
c0108b70:	e8 62 c8 ff ff       	call   c01053d7 <vfs_write>
    if(size)
c0108b75:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108b79:	74 2b                	je     c0108ba6 <respond+0x8f>
        vfs_write(mgr->pset.stdin,mgr->pset.stdin->length,data,size);
c0108b7b:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0108b7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b81:	8b 40 08             	mov    0x8(%eax),%eax
c0108b84:	8b 40 08             	mov    0x8(%eax),%eax
c0108b87:	89 c2                	mov    %eax,%edx
c0108b89:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b8c:	8b 40 08             	mov    0x8(%eax),%eax
c0108b8f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108b93:	8b 4d 18             	mov    0x18(%ebp),%ecx
c0108b96:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108b9a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108b9e:	89 04 24             	mov    %eax,(%esp)
c0108ba1:	e8 31 c8 ff ff       	call   c01053d7 <vfs_write>
    free(header);
c0108ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ba9:	89 04 24             	mov    %eax,(%esp)
c0108bac:	e8 dc 4b 00 00       	call   c010d78d <free>
}
c0108bb1:	c9                   	leave  
c0108bb2:	c3                   	ret    

c0108bb3 <poll_next>:

pck_t *poll_next(pckmgr *mgr)
{
c0108bb3:	55                   	push   %ebp
c0108bb4:	89 e5                	mov    %esp,%ebp
c0108bb6:	53                   	push   %ebx
c0108bb7:	83 ec 24             	sub    $0x24,%esp
    pck_t *pck = malloc(sizeof(pck_t));
c0108bba:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0108bc1:	e8 e0 4a 00 00       	call   c010d6a6 <malloc>
c0108bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while((mgr->pset.stdout->length - mgr->stdout_seeker) < sizeof(pckhead_t));
c0108bc9:	90                   	nop
c0108bca:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bcd:	8b 40 0c             	mov    0xc(%eax),%eax
c0108bd0:	8b 50 08             	mov    0x8(%eax),%edx
c0108bd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bd6:	8b 40 14             	mov    0x14(%eax),%eax
c0108bd9:	89 d1                	mov    %edx,%ecx
c0108bdb:	29 c1                	sub    %eax,%ecx
c0108bdd:	89 c8                	mov    %ecx,%eax
c0108bdf:	83 f8 0b             	cmp    $0xb,%eax
c0108be2:	76 e6                	jbe    c0108bca <poll_next+0x17>
    vfs_read(mgr->pset.stdout,mgr->stdout_seeker,pck, sizeof(pckhead_t));
c0108be4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108be7:	8b 50 14             	mov    0x14(%eax),%edx
c0108bea:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bed:	8b 40 0c             	mov    0xc(%eax),%eax
c0108bf0:	c7 44 24 0c 0c 00 00 	movl   $0xc,0xc(%esp)
c0108bf7:	00 
c0108bf8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0108bfb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108bff:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108c03:	89 04 24             	mov    %eax,(%esp)
c0108c06:	e8 d9 c9 ff ff       	call   c01055e4 <vfs_read>
    mgr->stdout_seeker += sizeof(pckhead_t);
c0108c0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c0e:	8b 40 14             	mov    0x14(%eax),%eax
c0108c11:	83 c0 0c             	add    $0xc,%eax
c0108c14:	89 c2                	mov    %eax,%edx
c0108c16:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c19:	89 50 14             	mov    %edx,0x14(%eax)
    if(pck->size > 12)
c0108c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c1f:	8b 40 04             	mov    0x4(%eax),%eax
c0108c22:	83 f8 0c             	cmp    $0xc,%eax
c0108c25:	76 74                	jbe    c0108c9b <poll_next+0xe8>
    {
        int data_size = pck->size-12;
c0108c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c2a:	8b 40 04             	mov    0x4(%eax),%eax
c0108c2d:	83 e8 0c             	sub    $0xc,%eax
c0108c30:	89 45 f0             	mov    %eax,-0x10(%ebp)
        pck->data = malloc(data_size);
c0108c33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c36:	89 04 24             	mov    %eax,(%esp)
c0108c39:	e8 68 4a 00 00       	call   c010d6a6 <malloc>
c0108c3e:	89 c2                	mov    %eax,%edx
c0108c40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c43:	89 50 0c             	mov    %edx,0xc(%eax)
        while((mgr->pset.stdout->length - mgr->stdout_seeker) < data_size);
c0108c46:	90                   	nop
c0108c47:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c4a:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c4d:	8b 50 08             	mov    0x8(%eax),%edx
c0108c50:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c53:	8b 40 14             	mov    0x14(%eax),%eax
c0108c56:	29 c2                	sub    %eax,%edx
c0108c58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c5b:	39 c2                	cmp    %eax,%edx
c0108c5d:	72 e8                	jb     c0108c47 <poll_next+0x94>
        vfs_read(mgr->pset.stdout,mgr->stdout_seeker, pck->data,data_size);
c0108c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c62:	8b 48 0c             	mov    0xc(%eax),%ecx
c0108c65:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c68:	8b 50 14             	mov    0x14(%eax),%edx
c0108c6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c6e:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c71:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0108c74:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108c78:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108c7c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108c80:	89 04 24             	mov    %eax,(%esp)
c0108c83:	e8 5c c9 ff ff       	call   c01055e4 <vfs_read>
        mgr->stdout_seeker += data_size;
c0108c88:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c8b:	8b 50 14             	mov    0x14(%eax),%edx
c0108c8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c91:	01 c2                	add    %eax,%edx
c0108c93:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c96:	89 50 14             	mov    %edx,0x14(%eax)
c0108c99:	eb 0a                	jmp    c0108ca5 <poll_next+0xf2>
    }
    else
        pck->data = NULL;
c0108c9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c9e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    return pck;
c0108ca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108ca8:	83 c4 24             	add    $0x24,%esp
c0108cab:	5b                   	pop    %ebx
c0108cac:	5d                   	pop    %ebp
c0108cad:	c3                   	ret    

c0108cae <poll_queue>:

void poll_queue(pckmgr *mgr)
{
c0108cae:	55                   	push   %ebp
c0108caf:	89 e5                	mov    %esp,%ebp
c0108cb1:	83 ec 18             	sub    $0x18,%esp
    list_push_front(mgr->recieved_pcks,poll_next(mgr));
c0108cb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cb7:	89 04 24             	mov    %eax,(%esp)
c0108cba:	e8 f4 fe ff ff       	call   c0108bb3 <poll_next>
c0108cbf:	8b 55 08             	mov    0x8(%ebp),%edx
c0108cc2:	8b 52 1c             	mov    0x1c(%edx),%edx
c0108cc5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cc9:	89 14 24             	mov    %edx,(%esp)
c0108ccc:	e8 e4 99 ff ff       	call   c01026b5 <list_push_front>
}
c0108cd1:	c9                   	leave  
c0108cd2:	c3                   	ret    

c0108cd3 <fetch_queue>:

pck_t *fetch_queue(pckmgr *mgr,pckid_t id)
{
c0108cd3:	55                   	push   %ebp
c0108cd4:	89 e5                	mov    %esp,%ebp
c0108cd6:	83 ec 28             	sub    $0x28,%esp
    iterator_t recieved_pck_it = iterator_create(mgr->recieved_pcks);
c0108cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cdc:	8b 50 1c             	mov    0x1c(%eax),%edx
c0108cdf:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108ce2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ce6:	89 04 24             	mov    %eax,(%esp)
c0108ce9:	e8 59 9b ff ff       	call   c0102847 <iterator_create>
c0108cee:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&recieved_pck_it) && !list_is_empty(mgr->recieved_pcks))
c0108cf1:	eb 33                	jmp    c0108d26 <fetch_queue+0x53>
    {
        pck_t *current = list_get_current(&recieved_pck_it);
c0108cf3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108cf6:	89 04 24             	mov    %eax,(%esp)
c0108cf9:	e8 12 9c ff ff       	call   c0102910 <list_get_current>
c0108cfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(current->id == id)
c0108d01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d04:	8b 00                	mov    (%eax),%eax
c0108d06:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108d09:	75 10                	jne    c0108d1b <fetch_queue+0x48>
        {
            list_remove(&recieved_pck_it);
c0108d0b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108d0e:	89 04 24             	mov    %eax,(%esp)
c0108d11:	e8 8c 9c ff ff       	call   c01029a2 <list_remove>
            return current;
c0108d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d19:	eb 31                	jmp    c0108d4c <fetch_queue+0x79>
        }
        list_next(&recieved_pck_it);
c0108d1b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108d1e:	89 04 24             	mov    %eax,(%esp)
c0108d21:	e8 0f 9c ff ff       	call   c0102935 <list_next>
}

pck_t *fetch_queue(pckmgr *mgr,pckid_t id)
{
    iterator_t recieved_pck_it = iterator_create(mgr->recieved_pcks);
    while(!list_is_last(&recieved_pck_it) && !list_is_empty(mgr->recieved_pcks))
c0108d26:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108d29:	89 04 24             	mov    %eax,(%esp)
c0108d2c:	e8 2b 9c ff ff       	call   c010295c <list_is_last>
c0108d31:	85 c0                	test   %eax,%eax
c0108d33:	75 12                	jne    c0108d47 <fetch_queue+0x74>
c0108d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d38:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108d3b:	89 04 24             	mov    %eax,(%esp)
c0108d3e:	e8 c3 9a ff ff       	call   c0102806 <list_is_empty>
c0108d43:	85 c0                	test   %eax,%eax
c0108d45:	74 ac                	je     c0108cf3 <fetch_queue+0x20>
            list_remove(&recieved_pck_it);
            return current;
        }
        list_next(&recieved_pck_it);
    }
    return NULL;
c0108d47:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108d4c:	c9                   	leave  
c0108d4d:	c3                   	ret    

c0108d4e <pck_poll>:


pck_t *pck_poll(pckmgr *mgr, pckid_t id)
{
c0108d4e:	55                   	push   %ebp
c0108d4f:	89 e5                	mov    %esp,%ebp
c0108d51:	83 ec 28             	sub    $0x28,%esp
    pck_t *pck = fetch_queue(mgr,id);
c0108d54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108d57:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d5e:	89 04 24             	mov    %eax,(%esp)
c0108d61:	e8 6d ff ff ff       	call   c0108cd3 <fetch_queue>
c0108d66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pck)
c0108d69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108d6d:	74 05                	je     c0108d74 <pck_poll+0x26>
        return pck;
c0108d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d72:	eb 40                	jmp    c0108db4 <pck_poll+0x66>

    pck = poll_next(mgr);
c0108d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d77:	89 04 24             	mov    %eax,(%esp)
c0108d7a:	e8 34 fe ff ff       	call   c0108bb3 <poll_next>
c0108d7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(pck->id != id)
c0108d82:	eb 23                	jmp    c0108da7 <pck_poll+0x59>
    {
        list_push_front(mgr->recieved_pcks,pck);
c0108d84:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d87:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108d8a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d8d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108d91:	89 04 24             	mov    %eax,(%esp)
c0108d94:	e8 1c 99 ff ff       	call   c01026b5 <list_push_front>
        pck = poll_next(mgr);
c0108d99:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d9c:	89 04 24             	mov    %eax,(%esp)
c0108d9f:	e8 0f fe ff ff       	call   c0108bb3 <poll_next>
c0108da4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pck_t *pck = fetch_queue(mgr,id);
    if(pck)
        return pck;

    pck = poll_next(mgr);
    while(pck->id != id)
c0108da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108daa:	8b 00                	mov    (%eax),%eax
c0108dac:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108daf:	75 d3                	jne    c0108d84 <pck_poll+0x36>
    {
        list_push_front(mgr->recieved_pcks,pck);
        pck = poll_next(mgr);
    }
    return pck;
c0108db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108db4:	c9                   	leave  
c0108db5:	c3                   	ret    

c0108db6 <fetch_pipe>:



pck_t *fetch_pipe(pckmgr *mgr)
{
c0108db6:	55                   	push   %ebp
c0108db7:	89 e5                	mov    %esp,%ebp
c0108db9:	83 ec 18             	sub    $0x18,%esp
    if((mgr->pset.stdout->length - mgr->stdout_seeker) < sizeof(pckhead_t))
c0108dbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dbf:	8b 40 0c             	mov    0xc(%eax),%eax
c0108dc2:	8b 50 08             	mov    0x8(%eax),%edx
c0108dc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dc8:	8b 40 14             	mov    0x14(%eax),%eax
c0108dcb:	89 d1                	mov    %edx,%ecx
c0108dcd:	29 c1                	sub    %eax,%ecx
c0108dcf:	89 c8                	mov    %ecx,%eax
c0108dd1:	83 f8 0b             	cmp    $0xb,%eax
c0108dd4:	77 07                	ja     c0108ddd <fetch_pipe+0x27>
        return NULL;
c0108dd6:	b8 00 00 00 00       	mov    $0x0,%eax
c0108ddb:	eb 0b                	jmp    c0108de8 <fetch_pipe+0x32>
    return poll_next(mgr);
c0108ddd:	8b 45 08             	mov    0x8(%ebp),%eax
c0108de0:	89 04 24             	mov    %eax,(%esp)
c0108de3:	e8 cb fd ff ff       	call   c0108bb3 <poll_next>
}
c0108de8:	c9                   	leave  
c0108de9:	c3                   	ret    

c0108dea <subsystem_isr>:

list_t *subdrivers;
list_t *interrupts;

void subsystem_isr(int irq)
{
c0108dea:	55                   	push   %ebp
c0108deb:	89 e5                	mov    %esp,%ebp
c0108ded:	83 ec 28             	sub    $0x28,%esp
    iterator_t int_it = iterator_create(interrupts);
c0108df0:	8b 15 24 a0 11 c0    	mov    0xc011a024,%edx
c0108df6:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108df9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108dfd:	89 04 24             	mov    %eax,(%esp)
c0108e00:	e8 42 9a ff ff       	call   c0102847 <iterator_create>
c0108e05:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&int_it) && !list_is_empty(interrupts))
c0108e08:	eb 4b                	jmp    c0108e55 <subsystem_isr+0x6b>
    {
        struct int_relation *rel = list_get_current(&int_it);
c0108e0a:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108e0d:	89 04 24             	mov    %eax,(%esp)
c0108e10:	e8 fb 9a ff ff       	call   c0102910 <list_get_current>
c0108e15:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(rel->intnr == irq)
c0108e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e1b:	8b 10                	mov    (%eax),%edx
c0108e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e20:	39 c2                	cmp    %eax,%edx
c0108e22:	75 26                	jne    c0108e4a <subsystem_isr+0x60>
            send_package(rel->drv, INTSIG, 0, NULL);
c0108e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e27:	8b 40 04             	mov    0x4(%eax),%eax
c0108e2a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0108e31:	00 
c0108e32:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108e39:	00 
c0108e3a:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0108e41:	00 
c0108e42:	89 04 24             	mov    %eax,(%esp)
c0108e45:	e8 20 fc ff ff       	call   c0108a6a <send_package>
        list_next(&int_it);
c0108e4a:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108e4d:	89 04 24             	mov    %eax,(%esp)
c0108e50:	e8 e0 9a ff ff       	call   c0102935 <list_next>
list_t *interrupts;

void subsystem_isr(int irq)
{
    iterator_t int_it = iterator_create(interrupts);
    while(!list_is_last(&int_it) && !list_is_empty(interrupts))
c0108e55:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108e58:	89 04 24             	mov    %eax,(%esp)
c0108e5b:	e8 fc 9a ff ff       	call   c010295c <list_is_last>
c0108e60:	85 c0                	test   %eax,%eax
c0108e62:	75 11                	jne    c0108e75 <subsystem_isr+0x8b>
c0108e64:	a1 24 a0 11 c0       	mov    0xc011a024,%eax
c0108e69:	89 04 24             	mov    %eax,(%esp)
c0108e6c:	e8 95 99 ff ff       	call   c0102806 <list_is_empty>
c0108e71:	85 c0                	test   %eax,%eax
c0108e73:	74 95                	je     c0108e0a <subsystem_isr+0x20>
        struct int_relation *rel = list_get_current(&int_it);
        if(rel->intnr == irq)
            send_package(rel->drv, INTSIG, 0, NULL);
        list_next(&int_it);
    }
}
c0108e75:	c9                   	leave  
c0108e76:	c3                   	ret    

c0108e77 <INIT_HYPERVISOR>:

void INIT_HYPERVISOR(int argc, void **argv)
{
c0108e77:	55                   	push   %ebp
c0108e78:	89 e5                	mov    %esp,%ebp
c0108e7a:	56                   	push   %esi
c0108e7b:	53                   	push   %ebx
c0108e7c:	83 ec 60             	sub    $0x60,%esp
    subdrivers = list_create();
c0108e7f:	e8 fa 96 ff ff       	call   c010257e <list_create>
c0108e84:	a3 28 a0 11 c0       	mov    %eax,0xc011a028
    interrupts = list_create();
c0108e89:	e8 f0 96 ff ff       	call   c010257e <list_create>
c0108e8e:	a3 24 a0 11 c0       	mov    %eax,0xc011a024
    //struct multiboot_struct *mb_info =  argv[1];      // currently unused
    struct section *current_section = argv[0];
c0108e93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108e96:	8b 00                	mov    (%eax),%eax
c0108e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pckmgr *pman;
    printf("hypervisor subsystems:\n");
c0108e9b:	c7 04 24 d4 1a 11 c0 	movl   $0xc0111ad4,(%esp)
c0108ea2:	e8 0d 2e 00 00       	call   c010bcb4 <puts>
    iterator_t i = iterator_create(current_section->subtree);
c0108ea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108eaa:	8b 50 08             	mov    0x8(%eax),%edx
c0108ead:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0108eb0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108eb4:	89 04 24             	mov    %eax,(%esp)
c0108eb7:	e8 8b 99 ff ff       	call   c0102847 <iterator_create>
c0108ebc:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&i))
c0108ebf:	e9 05 01 00 00       	jmp    c0108fc9 <INIT_HYPERVISOR+0x152>
    {
        char *path = ((struct pnode *)list_get_current(&i))->file;
c0108ec4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0108ec7:	89 04 24             	mov    %eax,(%esp)
c0108eca:	e8 41 9a ff ff       	call   c0102910 <list_get_current>
c0108ecf:	8b 00                	mov    (%eax),%eax
c0108ed1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        vfs_inode_t *driver_inode = vfs_lookup_path(path);
c0108ed4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ed7:	89 04 24             	mov    %eax,(%esp)
c0108eda:	e8 e0 c9 ff ff       	call   c01058bf <vfs_lookup_path>
c0108edf:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if(driver_inode != NULL)
c0108ee2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108ee6:	0f 84 d2 00 00 00    	je     c0108fbe <INIT_HYPERVISOR+0x147>
        {
            printf("load %s\n", path);
c0108eec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108eef:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ef3:	c7 04 24 eb 1a 11 c0 	movl   $0xc0111aeb,(%esp)
c0108efa:	e8 7e a2 ff ff       	call   c010317d <printf>
            pman = new_pckmgr(vfs_create_pipe(0, 0), vfs_create_pipe(0, 0), vfs_create_pipe(0, 0));
c0108eff:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108f06:	00 
c0108f07:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108f0e:	e8 33 c4 ff ff       	call   c0105346 <vfs_create_pipe>
c0108f13:	89 c6                	mov    %eax,%esi
c0108f15:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108f1c:	00 
c0108f1d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108f24:	e8 1d c4 ff ff       	call   c0105346 <vfs_create_pipe>
c0108f29:	89 c3                	mov    %eax,%ebx
c0108f2b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108f32:	00 
c0108f33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108f3a:	e8 07 c4 ff ff       	call   c0105346 <vfs_create_pipe>
c0108f3f:	89 74 24 08          	mov    %esi,0x8(%esp)
c0108f43:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0108f47:	89 04 24             	mov    %eax,(%esp)
c0108f4a:	e8 24 f9 ff ff       	call   c0108873 <new_pckmgr>
c0108f4f:	89 45 e8             	mov    %eax,-0x18(%ebp)

            struct driver *new_driver = malloc(sizeof(struct driver));
c0108f52:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0108f59:	e8 48 47 00 00       	call   c010d6a6 <malloc>
c0108f5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            new_driver->pman = pman;
c0108f61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f64:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108f67:	89 50 0c             	mov    %edx,0xc(%eax)
            new_driver->process = load_elf_from_file(driver_inode, 0, 0, &pman->pset);
c0108f6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f6d:	83 c0 08             	add    $0x8,%eax
c0108f70:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108f74:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108f7b:	00 
c0108f7c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108f83:	00 
c0108f84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f87:	89 04 24             	mov    %eax,(%esp)
c0108f8a:	e8 a7 a9 ff ff       	call   c0103936 <load_elf_from_file>
c0108f8f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f92:	89 02                	mov    %eax,(%edx)
            new_driver->ports = list_create();
c0108f94:	e8 e5 95 ff ff       	call   c010257e <list_create>
c0108f99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f9c:	89 42 08             	mov    %eax,0x8(%edx)
            new_driver->memory = list_create();
c0108f9f:	e8 da 95 ff ff       	call   c010257e <list_create>
c0108fa4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108fa7:	89 42 04             	mov    %eax,0x4(%edx)
            list_push_front(subdrivers,new_driver);
c0108faa:	a1 28 a0 11 c0       	mov    0xc011a028,%eax
c0108faf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108fb2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fb6:	89 04 24             	mov    %eax,(%esp)
c0108fb9:	e8 f7 96 ff ff       	call   c01026b5 <list_push_front>
        }
        list_next(&i);
c0108fbe:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0108fc1:	89 04 24             	mov    %eax,(%esp)
c0108fc4:	e8 6c 99 ff ff       	call   c0102935 <list_next>
    //struct multiboot_struct *mb_info =  argv[1];      // currently unused
    struct section *current_section = argv[0];
    pckmgr *pman;
    printf("hypervisor subsystems:\n");
    iterator_t i = iterator_create(current_section->subtree);
    while(!list_is_last(&i))
c0108fc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0108fcc:	89 04 24             	mov    %eax,(%esp)
c0108fcf:	e8 88 99 ff ff       	call   c010295c <list_is_last>
c0108fd4:	85 c0                	test   %eax,%eax
c0108fd6:	0f 84 e8 fe ff ff    	je     c0108ec4 <INIT_HYPERVISOR+0x4d>
            new_driver->memory = list_create();
            list_push_front(subdrivers,new_driver);
        }
        list_next(&i);
    }
    printf("\n");
c0108fdc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0108fe3:	e8 6d 2b 00 00       	call   c010bb55 <putchar>
    //Poll packages
    if(list_is_empty(subdrivers))
c0108fe8:	a1 28 a0 11 c0       	mov    0xc011a028,%eax
c0108fed:	89 04 24             	mov    %eax,(%esp)
c0108ff0:	e8 11 98 ff ff       	call   c0102806 <list_is_empty>
c0108ff5:	85 c0                	test   %eax,%eax
c0108ff7:	74 0e                	je     c0109007 <INIT_HYPERVISOR+0x190>
    {
        printf("could not load any subsystem!\n");
c0108ff9:	c7 04 24 f4 1a 11 c0 	movl   $0xc0111af4,(%esp)
c0109000:	e8 af 2c 00 00       	call   c010bcb4 <puts>
        while(1);
c0109005:	eb fe                	jmp    c0109005 <INIT_HYPERVISOR+0x18e>
    }

    iterator_t subdriver_it = iterator_create(subdrivers);
c0109007:	8b 15 28 a0 11 c0    	mov    0xc011a028,%edx
c010900d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0109010:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109014:	89 04 24             	mov    %eax,(%esp)
c0109017:	e8 2b 98 ff ff       	call   c0102847 <iterator_create>
c010901c:	83 ec 04             	sub    $0x4,%esp
c010901f:	eb 01                	jmp    c0109022 <INIT_HYPERVISOR+0x1ab>
                break;

        };


    }
c0109021:	90                   	nop

    /** NOTE: current implementation is based on polling. Switch to pipetrigger as fast as possible**/

    while(1)
    {
        struct driver *current_driver = list_get_current(&subdriver_it);
c0109022:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0109025:	89 04 24             	mov    %eax,(%esp)
c0109028:	e8 e3 98 ff ff       	call   c0102910 <list_get_current>
c010902d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        pman = current_driver->pman;
c0109030:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109033:	8b 40 0c             	mov    0xc(%eax),%eax
c0109036:	89 45 e8             	mov    %eax,-0x18(%ebp)
        pck_t *pck = fetch_pipe(pman);
c0109039:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010903c:	89 04 24             	mov    %eax,(%esp)
c010903f:	e8 72 fd ff ff       	call   c0108db6 <fetch_pipe>
c0109044:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if(!pck)
c0109047:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010904b:	75 27                	jne    c0109074 <INIT_HYPERVISOR+0x1fd>
        {
            list_next(&subdriver_it);
c010904d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0109050:	89 04 24             	mov    %eax,(%esp)
c0109053:	e8 dd 98 ff ff       	call   c0102935 <list_next>
            if(list_is_last(&subdriver_it))
c0109058:	8d 45 c8             	lea    -0x38(%ebp),%eax
c010905b:	89 04 24             	mov    %eax,(%esp)
c010905e:	e8 f9 98 ff ff       	call   c010295c <list_is_last>
c0109063:	85 c0                	test   %eax,%eax
c0109065:	74 ba                	je     c0109021 <INIT_HYPERVISOR+0x1aa>
                list_set_first(&subdriver_it);
c0109067:	8d 45 c8             	lea    -0x38(%ebp),%eax
c010906a:	89 04 24             	mov    %eax,(%esp)
c010906d:	e8 05 99 ff ff       	call   c0102977 <list_set_first>
                break;

        };


    }
c0109072:	eb ad                	jmp    c0109021 <INIT_HYPERVISOR+0x1aa>
        }

        //printf("host: recieved package %d    size:%d    type:%x\n",pck->id,pck->size,pck->type);
        struct int_relation *r;
        int ret;
        switch(pck->type)
c0109074:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109077:	8b 40 08             	mov    0x8(%eax),%eax
c010907a:	83 f8 07             	cmp    $0x7,%eax
c010907d:	0f 87 5c 01 00 00    	ja     c01091df <INIT_HYPERVISOR+0x368>
c0109083:	8b 04 85 84 1b 11 c0 	mov    -0x3feee47c(,%eax,4),%eax
c010908a:	ff e0                	jmp    *%eax

            case PING:
#ifdef DEBUG
                printf("host: recieved ping -> sending pong\n");
#endif
                respond(pman,pck->id,PONG,UHOST_DEFAULT_ASYNCHRON_SIZE,UHOST_DEFAULT_ASYNCHRON);
c010908c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010908f:	8b 00                	mov    (%eax),%eax
c0109091:	c7 44 24 10 12 1b 11 	movl   $0xc0111b12,0x10(%esp)
c0109098:	c0 
c0109099:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c01090a0:	00 
c01090a1:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01090a8:	00 
c01090a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090b0:	89 04 24             	mov    %eax,(%esp)
c01090b3:	e8 5f fa ff ff       	call   c0108b17 <respond>
                break;
c01090b8:	e9 4f 01 00 00       	jmp    c010920c <INIT_HYPERVISOR+0x395>

            case PORT_ALLOC:
#ifdef DEBUG
                printf("host: allocationg Port 0x%x\n",*((unsigned int*)pck->data));
#endif
                handle_port_alloc(current_driver, pck);
c01090bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01090c7:	89 04 24             	mov    %eax,(%esp)
c01090ca:	e8 5d 02 00 00       	call   c010932c <handle_port_alloc>
                break;
c01090cf:	e9 38 01 00 00       	jmp    c010920c <INIT_HYPERVISOR+0x395>

            case INT_REQ:
#ifdef DEBUG
                printf("host: setting up interrupt signal 0x%x\n",*((unsigned int*)pck->data));
#endif // DEBUG
                r = malloc(sizeof(struct int_relation));
c01090d4:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01090db:	e8 c6 45 00 00       	call   c010d6a6 <malloc>
c01090e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
                r->intnr = *((unsigned int*)pck->data);
c01090e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090e6:	8b 40 0c             	mov    0xc(%eax),%eax
c01090e9:	8b 10                	mov    (%eax),%edx
c01090eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01090ee:	89 10                	mov    %edx,(%eax)
                r->drv = pman;
c01090f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01090f3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01090f6:	89 50 04             	mov    %edx,0x4(%eax)
                list_push_front(interrupts,r);
c01090f9:	a1 24 a0 11 c0       	mov    0xc011a024,%eax
c01090fe:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0109101:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109105:	89 04 24             	mov    %eax,(%esp)
c0109108:	e8 a8 95 ff ff       	call   c01026b5 <list_push_front>
                if(add_int_trigger(r->intnr, NULL,subsystem_isr))
c010910d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109110:	8b 00                	mov    (%eax),%eax
c0109112:	c7 44 24 08 ea 8d 10 	movl   $0xc0108dea,0x8(%esp)
c0109119:	c0 
c010911a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109121:	00 
c0109122:	89 04 24             	mov    %eax,(%esp)
c0109125:	e8 1b 16 00 00       	call   c010a745 <add_int_trigger>
c010912a:	85 c0                	test   %eax,%eax
c010912c:	74 3d                	je     c010916b <INIT_HYPERVISOR+0x2f4>
                {
                    printf("sucess!\n");
c010912e:	c7 04 24 17 1b 11 c0 	movl   $0xc0111b17,(%esp)
c0109135:	e8 7a 2b 00 00       	call   c010bcb4 <puts>
                    respond(pman,pck->id,SUCCESS,0,NULL);
c010913a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010913d:	8b 00                	mov    (%eax),%eax
c010913f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0109146:	00 
c0109147:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010914e:	00 
c010914f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0109156:	00 
c0109157:	89 44 24 04          	mov    %eax,0x4(%esp)
c010915b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010915e:	89 04 24             	mov    %eax,(%esp)
c0109161:	e8 b1 f9 ff ff       	call   c0108b17 <respond>
                {
                    printf("could not allocate interrupt\n");
                    ret = -1;
                    respond(pman,pck->id,ERROR,sizeof(unsigned int),&ret);
                }
                break;
c0109166:	e9 a1 00 00 00       	jmp    c010920c <INIT_HYPERVISOR+0x395>
                    printf("sucess!\n");
                    respond(pman,pck->id,SUCCESS,0,NULL);
                }
                else
                {
                    printf("could not allocate interrupt\n");
c010916b:	c7 04 24 1f 1b 11 c0 	movl   $0xc0111b1f,(%esp)
c0109172:	e8 3d 2b 00 00       	call   c010bcb4 <puts>
                    ret = -1;
c0109177:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
                    respond(pman,pck->id,ERROR,sizeof(unsigned int),&ret);
c010917e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109181:	8b 00                	mov    (%eax),%eax
c0109183:	8d 55 c4             	lea    -0x3c(%ebp),%edx
c0109186:	89 54 24 10          	mov    %edx,0x10(%esp)
c010918a:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c0109191:	00 
c0109192:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0109199:	00 
c010919a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010919e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091a1:	89 04 24             	mov    %eax,(%esp)
c01091a4:	e8 6e f9 ff ff       	call   c0108b17 <respond>
                }
                break;
c01091a9:	eb 61                	jmp    c010920c <INIT_HYPERVISOR+0x395>

            case PMA_ALLOC:
#ifdef DEBUG
                printf("PMA-Alloc\n");
#endif
                handle_pma_alloc(current_driver, pck);
c01091ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01091b5:	89 04 24             	mov    %eax,(%esp)
c01091b8:	e8 54 00 00 00       	call   c0109211 <handle_pma_alloc>

                break;
c01091bd:	eb 4d                	jmp    c010920c <INIT_HYPERVISOR+0x395>

            case PMA_FREE:
                printf("PMA-Free\n");
c01091bf:	c7 04 24 3c 1b 11 c0 	movl   $0xc0111b3c,(%esp)
c01091c6:	e8 e9 2a 00 00       	call   c010bcb4 <puts>
                handle_pma_free(current_driver, pck);
c01091cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01091d5:	89 04 24             	mov    %eax,(%esp)
c01091d8:	e8 4a 01 00 00       	call   c0109327 <handle_pma_free>
                break;
c01091dd:	eb 2d                	jmp    c010920c <INIT_HYPERVISOR+0x395>



            default:
                printf("host: recieved unknown package %d    size:%d    type:%x\n",pck->id,pck->size,pck->type);
c01091df:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091e2:	8b 48 08             	mov    0x8(%eax),%ecx
c01091e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091e8:	8b 50 04             	mov    0x4(%eax),%edx
c01091eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091ee:	8b 00                	mov    (%eax),%eax
c01091f0:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01091f4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01091f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091fc:	c7 04 24 48 1b 11 c0 	movl   $0xc0111b48,(%esp)
c0109203:	e8 75 9f ff ff       	call   c010317d <printf>
                break;
c0109208:	90                   	nop
c0109209:	eb 01                	jmp    c010920c <INIT_HYPERVISOR+0x395>
        {
            case RESET_CON:
#ifdef DEBUG
                printf("host: connection reset\n");
#endif
                break;
c010920b:	90                   	nop
                break;

        };


    }
c010920c:	e9 10 fe ff ff       	jmp    c0109021 <INIT_HYPERVISOR+0x1aa>

c0109211 <handle_pma_alloc>:
 * @brief Handles a PMA_ALLOC request
 * @param drv pointer to the driver struct
 * @param req pointer to the request package
 */
void handle_pma_alloc(struct driver *drv, pck_t *req)
{
c0109211:	55                   	push   %ebp
c0109212:	89 e5                	mov    %esp,%ebp
c0109214:	53                   	push   %ebx
c0109215:	83 ec 44             	sub    $0x44,%esp
    struct pma_request *pma_req = (struct pma_request*) req->data;
c0109218:	8b 45 0c             	mov    0xc(%ebp),%eax
c010921b:	8b 40 0c             	mov    0xc(%eax),%eax
c010921e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    paddr_t phys_base;

    switch(pma_req->type)
c0109221:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109224:	8b 00                	mov    (%eax),%eax
c0109226:	83 f8 02             	cmp    $0x2,%eax
c0109229:	74 20                	je     c010924b <handle_pma_alloc+0x3a>
c010922b:	83 f8 03             	cmp    $0x3,%eax
c010922e:	74 26                	je     c0109256 <handle_pma_alloc+0x45>
c0109230:	83 f8 01             	cmp    $0x1,%eax
c0109233:	75 34                	jne    c0109269 <handle_pma_alloc+0x58>
    {
        case PMA_ALLOC_RANDOM:
            phys_base = pmm_alloc_page_range(pma_req->size/PAGE_SIZE);
c0109235:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109238:	8b 40 04             	mov    0x4(%eax),%eax
c010923b:	c1 e8 0c             	shr    $0xc,%eax
c010923e:	89 04 24             	mov    %eax,(%esp)
c0109241:	e8 21 64 00 00       	call   c010f667 <pmm_alloc_page_range>
c0109246:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0109249:	eb 52                	jmp    c010929d <handle_pma_alloc+0x8c>
             {
                 respond(drv->pman, req->id, ERROR, 0, NULL);
                 return;
             }*/

            phys_base = pma_req->phys_base;
c010924b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010924e:	8b 40 08             	mov    0x8(%eax),%eax
c0109251:	89 45 f4             	mov    %eax,-0xc(%ebp)
            //pmm_mark_page_range_as_used(phys_base, pma_req->size/PAGE_SIZE);
            break;
c0109254:	eb 47                	jmp    c010929d <handle_pma_alloc+0x8c>

        case PMA_ALLOC_LOWER:
            phys_base = pmm_alloc_page_limit(pma_req->phys_base);
c0109256:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109259:	8b 40 08             	mov    0x8(%eax),%eax
c010925c:	89 04 24             	mov    %eax,(%esp)
c010925f:	e8 61 63 00 00       	call   c010f5c5 <pmm_alloc_page_limit>
c0109264:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0109267:	eb 34                	jmp    c010929d <handle_pma_alloc+0x8c>

        default:
            respond(drv->pman, req->id, ERROR, 0, NULL);
c0109269:	8b 45 0c             	mov    0xc(%ebp),%eax
c010926c:	8b 10                	mov    (%eax),%edx
c010926e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109271:	8b 40 0c             	mov    0xc(%eax),%eax
c0109274:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010927b:	00 
c010927c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109283:	00 
c0109284:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010928b:	00 
c010928c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109290:	89 04 24             	mov    %eax,(%esp)
c0109293:	e8 7f f8 ff ff       	call   c0108b17 <respond>
c0109298:	e9 85 00 00 00       	jmp    c0109322 <handle_pma_alloc+0x111>
            return;
            break;
    }


    iterator_t i = iterator_create(drv->process->threads);
c010929d:	8b 45 08             	mov    0x8(%ebp),%eax
c01092a0:	8b 00                	mov    (%eax),%eax
c01092a2:	8b 50 28             	mov    0x28(%eax),%edx
c01092a5:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01092a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01092ac:	89 04 24             	mov    %eax,(%esp)
c01092af:	e8 93 95 ff ff       	call   c0102847 <iterator_create>
c01092b4:	83 ec 04             	sub    $0x4,%esp
    struct pma_response resp;
    resp.mem_base = vmm_automap_user_range( &((struct thread_state*)list_get_current(&i))->context, phys_base, pma_req->size/PAGE_SIZE, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c01092b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092ba:	8b 40 04             	mov    0x4(%eax),%eax
c01092bd:	c1 e8 0c             	shr    $0xc,%eax
c01092c0:	89 c3                	mov    %eax,%ebx
c01092c2:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01092c5:	89 04 24             	mov    %eax,(%esp)
c01092c8:	e8 43 96 ff ff       	call   c0102910 <list_get_current>
c01092cd:	8d 50 08             	lea    0x8(%eax),%edx
c01092d0:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c01092d7:	00 
c01092d8:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01092dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092df:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092e3:	89 14 24             	mov    %edx,(%esp)
c01092e6:	e8 43 40 00 00       	call   c010d32e <vmm_automap_user_range>
c01092eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    resp.phys_base = phys_base;
c01092ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    respond(drv->pman, req->id, SUCCESS, sizeof(struct pma_response), &resp);
c01092f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01092f7:	8b 10                	mov    (%eax),%edx
c01092f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01092fc:	8b 40 0c             	mov    0xc(%eax),%eax
c01092ff:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0109302:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0109306:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010930d:	00 
c010930e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0109315:	00 
c0109316:	89 54 24 04          	mov    %edx,0x4(%esp)
c010931a:	89 04 24             	mov    %eax,(%esp)
c010931d:	e8 f5 f7 ff ff       	call   c0108b17 <respond>
}
c0109322:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109325:	c9                   	leave  
c0109326:	c3                   	ret    

c0109327 <handle_pma_free>:
 * @brief Handles a PMA_FREE request
 * @param drv pointer to the driver struct
 * @param req pointer to the request package
 */
void handle_pma_free(struct driver *drv, pck_t *req)
{
c0109327:	55                   	push   %ebp
c0109328:	89 e5                	mov    %esp,%ebp
    /*TODO: free in HW resource list or free the page in PMM*/

c010932a:	5d                   	pop    %ebp
c010932b:	c3                   	ret    

c010932c <handle_port_alloc>:
 * @brief handles PORT_ALLOC call
 * @param drv pointer to the driver struct
 * @param req pointer to the request package
 */
void handle_port_alloc(struct driver *drv, pck_t *req)
{
c010932c:	55                   	push   %ebp
c010932d:	89 e5                	mov    %esp,%ebp
c010932f:	83 ec 38             	sub    $0x38,%esp
    //validate package
    if(req->size != sizeof(portpck_t)+12)
c0109332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109335:	8b 40 04             	mov    0x4(%eax),%eax
c0109338:	83 f8 10             	cmp    $0x10,%eax
c010933b:	74 5a                	je     c0109397 <handle_port_alloc+0x6b>
    {
        printf("invalid package! %d  %d\n",req->size,(int)sizeof(portpck_t));
c010933d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109340:	8b 40 04             	mov    0x4(%eax),%eax
c0109343:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010934a:	00 
c010934b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010934f:	c7 04 24 a4 1b 11 c0 	movl   $0xc0111ba4,(%esp)
c0109356:	e8 22 9e ff ff       	call   c010317d <printf>
        respond(drv->pman, req->id, INVALID_REQUEST, 0, 0);
c010935b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010935e:	8b 10                	mov    (%eax),%edx
c0109360:	8b 45 08             	mov    0x8(%ebp),%eax
c0109363:	8b 40 0c             	mov    0xc(%eax),%eax
c0109366:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010936d:	00 
c010936e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109375:	00 
c0109376:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010937d:	00 
c010937e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109382:	89 04 24             	mov    %eax,(%esp)
c0109385:	e8 8d f7 ff ff       	call   c0108b17 <respond>
        free(req);
c010938a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010938d:	89 04 24             	mov    %eax,(%esp)
c0109390:	e8 f8 43 00 00       	call   c010d78d <free>
c0109395:	eb 4d                	jmp    c01093e4 <handle_port_alloc+0xb8>
        return;
    }

    list_push_front(drv->ports,req->data);
c0109397:	8b 45 0c             	mov    0xc(%ebp),%eax
c010939a:	8b 50 0c             	mov    0xc(%eax),%edx
c010939d:	8b 45 08             	mov    0x8(%ebp),%eax
c01093a0:	8b 40 08             	mov    0x8(%eax),%eax
c01093a3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01093a7:	89 04 24             	mov    %eax,(%esp)
c01093aa:	e8 06 93 ff ff       	call   c01026b5 <list_push_front>

    //todo: check if the port is already taken
    port_type p = hw_port;
c01093af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    respond(drv->pman, req->id, SUCCESS, sizeof(port_type), &p);
c01093b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093b9:	8b 10                	mov    (%eax),%edx
c01093bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01093be:	8b 40 0c             	mov    0xc(%eax),%eax
c01093c1:	8d 4d f4             	lea    -0xc(%ebp),%ecx
c01093c4:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01093c8:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c01093cf:	00 
c01093d0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01093d7:	00 
c01093d8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01093dc:	89 04 24             	mov    %eax,(%esp)
c01093df:	e8 33 f7 ff ff       	call   c0108b17 <respond>
}
c01093e4:	c9                   	leave  
c01093e5:	c3                   	ret    

c01093e6 <handle_port_free>:
 * @brief handles PORT_FREE call
 * @param drv pointer to the driver struct
 * @param req pointer to the request package
 */
void handle_port_free(struct driver *drv, pck_t *req)
{
c01093e6:	55                   	push   %ebp
c01093e7:	89 e5                	mov    %esp,%ebp
c01093e9:	83 ec 38             	sub    $0x38,%esp
    iterator_t i = iterator_create(drv->ports);
c01093ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01093ef:	8b 50 08             	mov    0x8(%eax),%edx
c01093f2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01093f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01093f9:	89 04 24             	mov    %eax,(%esp)
c01093fc:	e8 46 94 ff ff       	call   c0102847 <iterator_create>
c0109401:	83 ec 04             	sub    $0x4,%esp
    portpck_t *free_port = (portpck_t*) req->data;
c0109404:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109407:	8b 40 0c             	mov    0xc(%eax),%eax
c010940a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(!list_is_last(&i))
c010940d:	eb 65                	jmp    c0109474 <handle_port_free+0x8e>
    {
        if(((portpck_t*)list_get_current(&i))->port == free_port->port)
c010940f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109412:	89 04 24             	mov    %eax,(%esp)
c0109415:	e8 f6 94 ff ff       	call   c0102910 <list_get_current>
c010941a:	8b 10                	mov    (%eax),%edx
c010941c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010941f:	8b 00                	mov    (%eax),%eax
c0109421:	39 c2                	cmp    %eax,%edx
c0109423:	75 44                	jne    c0109469 <handle_port_free+0x83>
        {
            free(list_remove(&i));
c0109425:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109428:	89 04 24             	mov    %eax,(%esp)
c010942b:	e8 72 95 ff ff       	call   c01029a2 <list_remove>
c0109430:	89 04 24             	mov    %eax,(%esp)
c0109433:	e8 55 43 00 00       	call   c010d78d <free>
            respond(drv->pman, req->id, SUCCESS, 0, 0);
c0109438:	8b 45 0c             	mov    0xc(%ebp),%eax
c010943b:	8b 10                	mov    (%eax),%edx
c010943d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109440:	8b 40 0c             	mov    0xc(%eax),%eax
c0109443:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010944a:	00 
c010944b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109452:	00 
c0109453:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010945a:	00 
c010945b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010945f:	89 04 24             	mov    %eax,(%esp)
c0109462:	e8 b0 f6 ff ff       	call   c0108b17 <respond>
c0109467:	eb 49                	jmp    c01094b2 <handle_port_free+0xcc>
            return;
        }
        list_next(&i);
c0109469:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010946c:	89 04 24             	mov    %eax,(%esp)
c010946f:	e8 c1 94 ff ff       	call   c0102935 <list_next>
 */
void handle_port_free(struct driver *drv, pck_t *req)
{
    iterator_t i = iterator_create(drv->ports);
    portpck_t *free_port = (portpck_t*) req->data;
    while(!list_is_last(&i))
c0109474:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109477:	89 04 24             	mov    %eax,(%esp)
c010947a:	e8 dd 94 ff ff       	call   c010295c <list_is_last>
c010947f:	85 c0                	test   %eax,%eax
c0109481:	74 8c                	je     c010940f <handle_port_free+0x29>
            return;
        }
        list_next(&i);
    }

    respond(drv->pman, req->id, ERROR, 0, 0);
c0109483:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109486:	8b 10                	mov    (%eax),%edx
c0109488:	8b 45 08             	mov    0x8(%ebp),%eax
c010948b:	8b 40 0c             	mov    0xc(%eax),%eax
c010948e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0109495:	00 
c0109496:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010949d:	00 
c010949e:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01094a5:	00 
c01094a6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01094aa:	89 04 24             	mov    %eax,(%esp)
c01094ad:	e8 65 f6 ff ff       	call   c0108b17 <respond>
}
c01094b2:	c9                   	leave  
c01094b3:	c3                   	ret    

c01094b4 <pfp>:
 * @brief parsers a pipeline file
 * @param pipelines the pipeline file as a ascii string
 * @return a list of the sections
 */
list_t *pfp(char *pipelines)
{
c01094b4:	55                   	push   %ebp
c01094b5:	89 e5                	mov    %esp,%ebp
c01094b7:	83 ec 38             	sub    $0x38,%esp
    bool valid = validate_pf(pipelines);
c01094ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01094bd:	89 04 24             	mov    %eax,(%esp)
c01094c0:	e8 82 00 00 00       	call   c0109547 <validate_pf>
c01094c5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(valid == true)
c01094c8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
c01094cc:	75 72                	jne    c0109540 <pfp+0x8c>
    {
        list_t *pipes = list_create();
c01094ce:	e8 ab 90 ff ff       	call   c010257e <list_create>
c01094d3:	89 45 ec             	mov    %eax,-0x14(%ebp)

        int sections_nr = count_sections(pipelines);
c01094d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01094d9:	89 04 24             	mov    %eax,(%esp)
c01094dc:	e8 70 00 00 00       	call   c0109551 <count_sections>
c01094e1:	89 45 e8             	mov    %eax,-0x18(%ebp)

        if(sections_nr == 0)
c01094e4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01094e8:	75 07                	jne    c01094f1 <pfp+0x3d>
            return NULL;
c01094ea:	b8 00 00 00 00       	mov    $0x0,%eax
c01094ef:	eb 54                	jmp    c0109545 <pfp+0x91>

        int i = 0;
c01094f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        int current_position = 0;
c01094f8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

        for(i = 0; i < sections_nr; i++)
c01094ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109506:	eb 2b                	jmp    c0109533 <pfp+0x7f>
        {
            struct section *current_section = parser_section(pipelines, &current_position);
c0109508:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010950b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010950f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109512:	89 04 24             	mov    %eax,(%esp)
c0109515:	e8 bb 00 00 00       	call   c01095d5 <parser_section>
c010951a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            list_push_back(pipes, current_section);
c010951d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109520:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109524:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109527:	89 04 24             	mov    %eax,(%esp)
c010952a:	e8 33 91 ff ff       	call   c0102662 <list_push_back>
            return NULL;

        int i = 0;
        int current_position = 0;

        for(i = 0; i < sections_nr; i++)
c010952f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109533:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109536:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0109539:	7c cd                	jl     c0109508 <pfp+0x54>
        {
            struct section *current_section = parser_section(pipelines, &current_position);
            list_push_back(pipes, current_section);
        }

        return pipes;
c010953b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010953e:	eb 05                	jmp    c0109545 <pfp+0x91>
    }
    else
    {
        return NULL;
c0109540:	b8 00 00 00 00       	mov    $0x0,%eax
    }
}
c0109545:	c9                   	leave  
c0109546:	c3                   	ret    

c0109547 <validate_pf>:
 * @param pipelines the pipeline file as a ascii string
 * @return true if the pipeline file is valid
 * @return false if the pipeline file is invalid
 */
bool validate_pf(char *pipelines)
{
c0109547:	55                   	push   %ebp
c0109548:	89 e5                	mov    %esp,%ebp
    // TODO

    return true;
c010954a:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010954f:	5d                   	pop    %ebp
c0109550:	c3                   	ret    

c0109551 <count_sections>:
 * @brief counts the number of sections in a pipeline file
 * @param pipelines the pipeline file as a ascii string
 * @return the number of sections
 */
int count_sections(char *pipelines)
{
c0109551:	55                   	push   %ebp
c0109552:	89 e5                	mov    %esp,%ebp
c0109554:	83 ec 28             	sub    $0x28,%esp
    int i = 0;
c0109557:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int nr = 0;
c010955e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    for(i = 0; pipelines[i + STRING_SECTION_LEN] != '\0'; i++)
c0109565:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010956c:	eb 50                	jmp    c01095be <count_sections+0x6d>
    {
        if(pipelines[i] == '#')
c010956e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109571:	8b 45 08             	mov    0x8(%ebp),%eax
c0109574:	01 d0                	add    %edx,%eax
c0109576:	0f b6 00             	movzbl (%eax),%eax
c0109579:	3c 23                	cmp    $0x23,%al
c010957b:	75 15                	jne    c0109592 <count_sections+0x41>
            for(; pipelines[i] != '\n'; i++);
c010957d:	eb 04                	jmp    c0109583 <count_sections+0x32>
c010957f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109583:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109586:	8b 45 08             	mov    0x8(%ebp),%eax
c0109589:	01 d0                	add    %edx,%eax
c010958b:	0f b6 00             	movzbl (%eax),%eax
c010958e:	3c 0a                	cmp    $0xa,%al
c0109590:	75 ed                	jne    c010957f <count_sections+0x2e>

        if(!strncmp(&pipelines[i], "section", STRING_SECTION_LEN))
c0109592:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109595:	8b 45 08             	mov    0x8(%ebp),%eax
c0109598:	01 d0                	add    %edx,%eax
c010959a:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c01095a1:	00 
c01095a2:	c7 44 24 04 bd 1b 11 	movl   $0xc0111bbd,0x4(%esp)
c01095a9:	c0 
c01095aa:	89 04 24             	mov    %eax,(%esp)
c01095ad:	e8 21 96 ff ff       	call   c0102bd3 <strncmp>
c01095b2:	85 c0                	test   %eax,%eax
c01095b4:	75 04                	jne    c01095ba <count_sections+0x69>
            nr++;
c01095b6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
int count_sections(char *pipelines)
{
    int i = 0;
    int nr = 0;

    for(i = 0; pipelines[i + STRING_SECTION_LEN] != '\0'; i++)
c01095ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01095be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095c1:	8d 50 06             	lea    0x6(%eax),%edx
c01095c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01095c7:	01 d0                	add    %edx,%eax
c01095c9:	0f b6 00             	movzbl (%eax),%eax
c01095cc:	84 c0                	test   %al,%al
c01095ce:	75 9e                	jne    c010956e <count_sections+0x1d>
        if(!strncmp(&pipelines[i], "section", STRING_SECTION_LEN))
            nr++;
    }


    return nr;
c01095d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01095d3:	c9                   	leave  
c01095d4:	c3                   	ret    

c01095d5 <parser_section>:
 * @brief parsers a section of a pipeline file
 * @param pipelines the pipeline file as a ascii string
 * @param section_pos the position in the string where the section starts
 */
struct section *parser_section(char *pipelines, int *section_pos)
{
c01095d5:	55                   	push   %ebp
c01095d6:	89 e5                	mov    %esp,%ebp
c01095d8:	83 ec 28             	sub    $0x28,%esp
    find_next_section(pipelines, section_pos);
c01095db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01095e5:	89 04 24             	mov    %eax,(%esp)
c01095e8:	e8 b8 01 00 00       	call   c01097a5 <find_next_section>

    (*section_pos) += 7;
c01095ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095f0:	8b 00                	mov    (%eax),%eax
c01095f2:	8d 50 07             	lea    0x7(%eax),%edx
c01095f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095f8:	89 10                	mov    %edx,(%eax)

    skip_whitespaces(pipelines, section_pos);
c01095fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109601:	8b 45 08             	mov    0x8(%ebp),%eax
c0109604:	89 04 24             	mov    %eax,(%esp)
c0109607:	e8 cb 02 00 00       	call   c01098d7 <skip_whitespaces>

    int section_name_length = count_sectionname_length(pipelines, section_pos);
c010960c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010960f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109613:	8b 45 08             	mov    0x8(%ebp),%eax
c0109616:	89 04 24             	mov    %eax,(%esp)
c0109619:	e8 f3 02 00 00       	call   c0109911 <count_sectionname_length>
c010961e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    struct section *this = (struct section *)malloc(sizeof(struct section));
c0109621:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0109628:	e8 79 40 00 00       	call   c010d6a6 <malloc>
c010962d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    this->name = (char *)malloc(sizeof(char) * (section_name_length + 1));
c0109630:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109633:	83 c0 01             	add    $0x1,%eax
c0109636:	89 04 24             	mov    %eax,(%esp)
c0109639:	e8 68 40 00 00       	call   c010d6a6 <malloc>
c010963e:	89 c2                	mov    %eax,%edx
c0109640:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109643:	89 50 04             	mov    %edx,0x4(%eax)
    memset(this->name, '\0',sizeof(char) * (section_name_length + 1));
c0109646:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109649:	83 c0 01             	add    $0x1,%eax
c010964c:	89 c2                	mov    %eax,%edx
c010964e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109651:	8b 40 04             	mov    0x4(%eax),%eax
c0109654:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109658:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010965f:	00 
c0109660:	89 04 24             	mov    %eax,(%esp)
c0109663:	e8 0d 99 ff ff       	call   c0102f75 <memset>
    strncpy(this->name, &pipelines[(*section_pos)], section_name_length);
c0109668:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010966b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010966e:	8b 00                	mov    (%eax),%eax
c0109670:	89 c1                	mov    %eax,%ecx
c0109672:	8b 45 08             	mov    0x8(%ebp),%eax
c0109675:	01 c1                	add    %eax,%ecx
c0109677:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010967a:	8b 40 04             	mov    0x4(%eax),%eax
c010967d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109681:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0109685:	89 04 24             	mov    %eax,(%esp)
c0109688:	e8 14 94 ff ff       	call   c0102aa1 <strncpy>
    (*section_pos) += section_name_length;
c010968d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109690:	8b 10                	mov    (%eax),%edx
c0109692:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109695:	01 c2                	add    %eax,%edx
c0109697:	8b 45 0c             	mov    0xc(%ebp),%eax
c010969a:	89 10                	mov    %edx,(%eax)
    this->type = get_section_type(pipelines, section_pos);
c010969c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010969f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01096a6:	89 04 24             	mov    %eax,(%esp)
c01096a9:	e8 a8 02 00 00       	call   c0109956 <get_section_type>
c01096ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01096b1:	89 02                	mov    %eax,(%edx)
    skip_until_colon(pipelines, section_pos);
c01096b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01096bd:	89 04 24             	mov    %eax,(%esp)
c01096c0:	e8 e8 03 00 00       	call   c0109aad <skip_until_colon>
    int section_end = find_end_of_section(pipelines, section_pos);
c01096c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01096cf:	89 04 24             	mov    %eax,(%esp)
c01096d2:	e8 5e 01 00 00       	call   c0109835 <find_end_of_section>
c01096d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    this->subtree = list_create();
c01096da:	e8 9f 8e ff ff       	call   c010257e <list_create>
c01096df:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01096e2:	89 42 08             	mov    %eax,0x8(%edx)

    for(; (*section_pos) < section_end; (*section_pos)++)
c01096e5:	e9 a8 00 00 00       	jmp    c0109792 <parser_section+0x1bd>
    {
        if(pipelines[(*section_pos)] == '#')
c01096ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096ed:	8b 00                	mov    (%eax),%eax
c01096ef:	89 c2                	mov    %eax,%edx
c01096f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01096f4:	01 d0                	add    %edx,%eax
c01096f6:	0f b6 00             	movzbl (%eax),%eax
c01096f9:	3c 23                	cmp    $0x23,%al
c01096fb:	75 41                	jne    c010973e <parser_section+0x169>
        {
            while(pipelines[(*section_pos)] != '\n' && pipelines[(*section_pos)] != '\0' && (*section_pos) <= section_end)
c01096fd:	eb 0d                	jmp    c010970c <parser_section+0x137>
                (*section_pos)++;
c01096ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109702:	8b 00                	mov    (%eax),%eax
c0109704:	8d 50 01             	lea    0x1(%eax),%edx
c0109707:	8b 45 0c             	mov    0xc(%ebp),%eax
c010970a:	89 10                	mov    %edx,(%eax)

    for(; (*section_pos) < section_end; (*section_pos)++)
    {
        if(pipelines[(*section_pos)] == '#')
        {
            while(pipelines[(*section_pos)] != '\n' && pipelines[(*section_pos)] != '\0' && (*section_pos) <= section_end)
c010970c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010970f:	8b 00                	mov    (%eax),%eax
c0109711:	89 c2                	mov    %eax,%edx
c0109713:	8b 45 08             	mov    0x8(%ebp),%eax
c0109716:	01 d0                	add    %edx,%eax
c0109718:	0f b6 00             	movzbl (%eax),%eax
c010971b:	3c 0a                	cmp    $0xa,%al
c010971d:	74 66                	je     c0109785 <parser_section+0x1b0>
c010971f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109722:	8b 00                	mov    (%eax),%eax
c0109724:	89 c2                	mov    %eax,%edx
c0109726:	8b 45 08             	mov    0x8(%ebp),%eax
c0109729:	01 d0                	add    %edx,%eax
c010972b:	0f b6 00             	movzbl (%eax),%eax
c010972e:	84 c0                	test   %al,%al
c0109730:	74 53                	je     c0109785 <parser_section+0x1b0>
c0109732:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109735:	8b 00                	mov    (%eax),%eax
c0109737:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010973a:	7e c3                	jle    c01096ff <parser_section+0x12a>
c010973c:	eb 47                	jmp    c0109785 <parser_section+0x1b0>
                (*section_pos)++;
        }
        else if(pipelines[(*section_pos)] == '<')
c010973e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109741:	8b 00                	mov    (%eax),%eax
c0109743:	89 c2                	mov    %eax,%edx
c0109745:	8b 45 08             	mov    0x8(%ebp),%eax
c0109748:	01 d0                	add    %edx,%eax
c010974a:	0f b6 00             	movzbl (%eax),%eax
c010974d:	3c 3c                	cmp    $0x3c,%al
c010974f:	75 34                	jne    c0109785 <parser_section+0x1b0>
        {
            struct pnode *node = parser_pnode(pipelines, section_pos, this->subtree);
c0109751:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109754:	8b 40 08             	mov    0x8(%eax),%eax
c0109757:	89 44 24 08          	mov    %eax,0x8(%esp)
c010975b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010975e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109762:	8b 45 08             	mov    0x8(%ebp),%eax
c0109765:	89 04 24             	mov    %eax,(%esp)
c0109768:	e8 7f 03 00 00       	call   c0109aec <parser_pnode>
c010976d:	89 45 e8             	mov    %eax,-0x18(%ebp)

            list_push_front(this->subtree, node);
c0109770:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109773:	8b 40 08             	mov    0x8(%eax),%eax
c0109776:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109779:	89 54 24 04          	mov    %edx,0x4(%esp)
c010977d:	89 04 24             	mov    %eax,(%esp)
c0109780:	e8 30 8f ff ff       	call   c01026b5 <list_push_front>
    this->type = get_section_type(pipelines, section_pos);
    skip_until_colon(pipelines, section_pos);
    int section_end = find_end_of_section(pipelines, section_pos);
    this->subtree = list_create();

    for(; (*section_pos) < section_end; (*section_pos)++)
c0109785:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109788:	8b 00                	mov    (%eax),%eax
c010978a:	8d 50 01             	lea    0x1(%eax),%edx
c010978d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109790:	89 10                	mov    %edx,(%eax)
c0109792:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109795:	8b 00                	mov    (%eax),%eax
c0109797:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010979a:	0f 8c 4a ff ff ff    	jl     c01096ea <parser_section+0x115>

            list_push_front(this->subtree, node);
        }
    }

    return this;
c01097a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01097a3:	c9                   	leave  
c01097a4:	c3                   	ret    

c01097a5 <find_next_section>:
 * @param pipelines the pipeline file as a ascii string
 * @param search_begin the point in the string where i should start searching
 * @return the position of the next section
 */
int find_next_section(char *pipelines, int *search_begin)
{
c01097a5:	55                   	push   %ebp
c01097a6:	89 e5                	mov    %esp,%ebp
c01097a8:	83 ec 18             	sub    $0x18,%esp
    for(; pipelines[(*search_begin) + STRING_SECTION_LEN] != '\0'; (*search_begin)++)
c01097ab:	eb 6a                	jmp    c0109817 <find_next_section+0x72>
    {
        if(pipelines[(*search_begin)] == '#')
c01097ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097b0:	8b 00                	mov    (%eax),%eax
c01097b2:	89 c2                	mov    %eax,%edx
c01097b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b7:	01 d0                	add    %edx,%eax
c01097b9:	0f b6 00             	movzbl (%eax),%eax
c01097bc:	3c 23                	cmp    $0x23,%al
c01097be:	75 22                	jne    c01097e2 <find_next_section+0x3d>
            for(; pipelines[(*search_begin)] != '\n'; (*search_begin)++);
c01097c0:	eb 0d                	jmp    c01097cf <find_next_section+0x2a>
c01097c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097c5:	8b 00                	mov    (%eax),%eax
c01097c7:	8d 50 01             	lea    0x1(%eax),%edx
c01097ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097cd:	89 10                	mov    %edx,(%eax)
c01097cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097d2:	8b 00                	mov    (%eax),%eax
c01097d4:	89 c2                	mov    %eax,%edx
c01097d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01097d9:	01 d0                	add    %edx,%eax
c01097db:	0f b6 00             	movzbl (%eax),%eax
c01097de:	3c 0a                	cmp    $0xa,%al
c01097e0:	75 e0                	jne    c01097c2 <find_next_section+0x1d>

        if(strncmp(&pipelines[(*search_begin)], "section", STRING_SECTION_LEN) == 0)
c01097e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097e5:	8b 00                	mov    (%eax),%eax
c01097e7:	89 c2                	mov    %eax,%edx
c01097e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ec:	01 d0                	add    %edx,%eax
c01097ee:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c01097f5:	00 
c01097f6:	c7 44 24 04 bd 1b 11 	movl   $0xc0111bbd,0x4(%esp)
c01097fd:	c0 
c01097fe:	89 04 24             	mov    %eax,(%esp)
c0109801:	e8 cd 93 ff ff       	call   c0102bd3 <strncmp>
c0109806:	85 c0                	test   %eax,%eax
c0109808:	74 23                	je     c010982d <find_next_section+0x88>
 * @param search_begin the point in the string where i should start searching
 * @return the position of the next section
 */
int find_next_section(char *pipelines, int *search_begin)
{
    for(; pipelines[(*search_begin) + STRING_SECTION_LEN] != '\0'; (*search_begin)++)
c010980a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010980d:	8b 00                	mov    (%eax),%eax
c010980f:	8d 50 01             	lea    0x1(%eax),%edx
c0109812:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109815:	89 10                	mov    %edx,(%eax)
c0109817:	8b 45 0c             	mov    0xc(%ebp),%eax
c010981a:	8b 00                	mov    (%eax),%eax
c010981c:	8d 50 06             	lea    0x6(%eax),%edx
c010981f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109822:	01 d0                	add    %edx,%eax
c0109824:	0f b6 00             	movzbl (%eax),%eax
c0109827:	84 c0                	test   %al,%al
c0109829:	75 82                	jne    c01097ad <find_next_section+0x8>
c010982b:	eb 01                	jmp    c010982e <find_next_section+0x89>
    {
        if(pipelines[(*search_begin)] == '#')
            for(; pipelines[(*search_begin)] != '\n'; (*search_begin)++);

        if(strncmp(&pipelines[(*search_begin)], "section", STRING_SECTION_LEN) == 0)
            break;
c010982d:	90                   	nop
    }


    return (*search_begin);
c010982e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109831:	8b 00                	mov    (%eax),%eax
}
c0109833:	c9                   	leave  
c0109834:	c3                   	ret    

c0109835 <find_end_of_section>:
 * @param pipelines the pipeline file as a ascii string
 * @param search_begin the point in the string where i should start searching
 * @return the point of the end of the current section
 */
int find_end_of_section(char *pipelines, int *search_begin)
{
c0109835:	55                   	push   %ebp
c0109836:	89 e5                	mov    %esp,%ebp
c0109838:	83 ec 28             	sub    $0x28,%esp
    int i;

    for(i = (*search_begin); pipelines[i + STRING_SECTION_LEN] != '\0'; i++)
c010983b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010983e:	8b 00                	mov    (%eax),%eax
c0109840:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109843:	eb 4c                	jmp    c0109891 <find_end_of_section+0x5c>
    {
        if(pipelines[i] == '#')
c0109845:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109848:	8b 45 08             	mov    0x8(%ebp),%eax
c010984b:	01 d0                	add    %edx,%eax
c010984d:	0f b6 00             	movzbl (%eax),%eax
c0109850:	3c 23                	cmp    $0x23,%al
c0109852:	75 15                	jne    c0109869 <find_end_of_section+0x34>
            for(; pipelines[i] != '\n'; i++);
c0109854:	eb 04                	jmp    c010985a <find_end_of_section+0x25>
c0109856:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010985a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010985d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109860:	01 d0                	add    %edx,%eax
c0109862:	0f b6 00             	movzbl (%eax),%eax
c0109865:	3c 0a                	cmp    $0xa,%al
c0109867:	75 ed                	jne    c0109856 <find_end_of_section+0x21>

        if(strncmp(&pipelines[i], "section", STRING_SECTION_LEN) == 0)
c0109869:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010986c:	8b 45 08             	mov    0x8(%ebp),%eax
c010986f:	01 d0                	add    %edx,%eax
c0109871:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c0109878:	00 
c0109879:	c7 44 24 04 bd 1b 11 	movl   $0xc0111bbd,0x4(%esp)
c0109880:	c0 
c0109881:	89 04 24             	mov    %eax,(%esp)
c0109884:	e8 4a 93 ff ff       	call   c0102bd3 <strncmp>
c0109889:	85 c0                	test   %eax,%eax
c010988b:	74 18                	je     c01098a5 <find_end_of_section+0x70>
 */
int find_end_of_section(char *pipelines, int *search_begin)
{
    int i;

    for(i = (*search_begin); pipelines[i + STRING_SECTION_LEN] != '\0'; i++)
c010988d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109891:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109894:	8d 50 06             	lea    0x6(%eax),%edx
c0109897:	8b 45 08             	mov    0x8(%ebp),%eax
c010989a:	01 d0                	add    %edx,%eax
c010989c:	0f b6 00             	movzbl (%eax),%eax
c010989f:	84 c0                	test   %al,%al
c01098a1:	75 a2                	jne    c0109845 <find_end_of_section+0x10>
c01098a3:	eb 01                	jmp    c01098a6 <find_end_of_section+0x71>
    {
        if(pipelines[i] == '#')
            for(; pipelines[i] != '\n'; i++);

        if(strncmp(&pipelines[i], "section", STRING_SECTION_LEN) == 0)
            break;
c01098a5:	90                   	nop
    }

    return i;
c01098a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01098a9:	c9                   	leave  
c01098aa:	c3                   	ret    

c01098ab <is_whitespace>:
 * @brief checks if a character is a whitespace
 * @param character the character
 * @return true or false
 */
bool is_whitespace(char character)
{
c01098ab:	55                   	push   %ebp
c01098ac:	89 e5                	mov    %esp,%ebp
c01098ae:	83 ec 04             	sub    $0x4,%esp
c01098b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098b4:	88 45 fc             	mov    %al,-0x4(%ebp)
    return ((character == ' ' || character == '\t' || character == '\n') ? true : false);
c01098b7:	80 7d fc 20          	cmpb   $0x20,-0x4(%ebp)
c01098bb:	74 0c                	je     c01098c9 <is_whitespace+0x1e>
c01098bd:	80 7d fc 09          	cmpb   $0x9,-0x4(%ebp)
c01098c1:	74 06                	je     c01098c9 <is_whitespace+0x1e>
c01098c3:	80 7d fc 0a          	cmpb   $0xa,-0x4(%ebp)
c01098c7:	75 07                	jne    c01098d0 <is_whitespace+0x25>
c01098c9:	b8 01 00 00 00       	mov    $0x1,%eax
c01098ce:	eb 05                	jmp    c01098d5 <is_whitespace+0x2a>
c01098d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01098d5:	c9                   	leave  
c01098d6:	c3                   	ret    

c01098d7 <skip_whitespaces>:
 * @param pipelines the string
 * @param start the current position in the string
 * @return the new position in the string
 */
int skip_whitespaces(char *pipelines, int *start)
{
c01098d7:	55                   	push   %ebp
c01098d8:	89 e5                	mov    %esp,%ebp
c01098da:	83 ec 04             	sub    $0x4,%esp
    for(; is_whitespace(pipelines[(*start)]); (*start)++);
c01098dd:	eb 0d                	jmp    c01098ec <skip_whitespaces+0x15>
c01098df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098e2:	8b 00                	mov    (%eax),%eax
c01098e4:	8d 50 01             	lea    0x1(%eax),%edx
c01098e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098ea:	89 10                	mov    %edx,(%eax)
c01098ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098ef:	8b 00                	mov    (%eax),%eax
c01098f1:	89 c2                	mov    %eax,%edx
c01098f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f6:	01 d0                	add    %edx,%eax
c01098f8:	0f b6 00             	movzbl (%eax),%eax
c01098fb:	0f be c0             	movsbl %al,%eax
c01098fe:	89 04 24             	mov    %eax,(%esp)
c0109901:	e8 a5 ff ff ff       	call   c01098ab <is_whitespace>
c0109906:	85 c0                	test   %eax,%eax
c0109908:	75 d5                	jne    c01098df <skip_whitespaces+0x8>

    return (*start);
c010990a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010990d:	8b 00                	mov    (%eax),%eax
}
c010990f:	c9                   	leave  
c0109910:	c3                   	ret    

c0109911 <count_sectionname_length>:
 * @param pipelines the string in which the section name is
 * @param start the position of the section name
 * @return the length of the sections name
 */
int count_sectionname_length(char *pipelines, int *start)
{
c0109911:	55                   	push   %ebp
c0109912:	89 e5                	mov    %esp,%ebp
c0109914:	83 ec 14             	sub    $0x14,%esp
    int i = (*start);
c0109917:	8b 45 0c             	mov    0xc(%ebp),%eax
c010991a:	8b 00                	mov    (%eax),%eax
c010991c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int nr = 0;
c010991f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    for(nr = 0; !is_whitespace(pipelines[i]); i++)
c0109926:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010992d:	eb 08                	jmp    c0109937 <count_sectionname_length+0x26>
        nr++;
c010992f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
int count_sectionname_length(char *pipelines, int *start)
{
    int i = (*start);
    int nr = 0;

    for(nr = 0; !is_whitespace(pipelines[i]); i++)
c0109933:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109937:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010993a:	8b 45 08             	mov    0x8(%ebp),%eax
c010993d:	01 d0                	add    %edx,%eax
c010993f:	0f b6 00             	movzbl (%eax),%eax
c0109942:	0f be c0             	movsbl %al,%eax
c0109945:	89 04 24             	mov    %eax,(%esp)
c0109948:	e8 5e ff ff ff       	call   c01098ab <is_whitespace>
c010994d:	85 c0                	test   %eax,%eax
c010994f:	74 de                	je     c010992f <count_sectionname_length+0x1e>
        nr++;

    return nr;
c0109951:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0109954:	c9                   	leave  
c0109955:	c3                   	ret    

c0109956 <get_section_type>:
 * @param pipelines the string in which i should look up the section type
 * @param start the position of the section type definition
 * @return the type of the section
 */
ptype get_section_type(char *pipelines, int *start)
{
c0109956:	55                   	push   %ebp
c0109957:	89 e5                	mov    %esp,%ebp
c0109959:	83 ec 28             	sub    $0x28,%esp
    ptype t = NOTHING;
c010995c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    if(check_section_type_given(pipelines, start) == false)
c0109963:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109966:	89 44 24 04          	mov    %eax,0x4(%esp)
c010996a:	8b 45 08             	mov    0x8(%ebp),%eax
c010996d:	89 04 24             	mov    %eax,(%esp)
c0109970:	e8 be 00 00 00       	call   c0109a33 <check_section_type_given>
c0109975:	85 c0                	test   %eax,%eax
c0109977:	75 0a                	jne    c0109983 <get_section_type+0x2d>
        return UNDEFINED;
c0109979:	b8 20 00 00 00       	mov    $0x20,%eax
c010997e:	e9 ae 00 00 00       	jmp    c0109a31 <get_section_type+0xdb>

    skip_whitespaces(pipelines, start);
c0109983:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109986:	89 44 24 04          	mov    %eax,0x4(%esp)
c010998a:	8b 45 08             	mov    0x8(%ebp),%eax
c010998d:	89 04 24             	mov    %eax,(%esp)
c0109990:	e8 42 ff ff ff       	call   c01098d7 <skip_whitespaces>
    (*start)++;
c0109995:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109998:	8b 00                	mov    (%eax),%eax
c010999a:	8d 50 01             	lea    0x1(%eax),%edx
c010999d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099a0:	89 10                	mov    %edx,(%eax)

    if(strncmp(&pipelines[(*start)], "replace", STRING_REPLACE_LEN) == 0)
c01099a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099a5:	8b 00                	mov    (%eax),%eax
c01099a7:	89 c2                	mov    %eax,%edx
c01099a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ac:	01 d0                	add    %edx,%eax
c01099ae:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c01099b5:	00 
c01099b6:	c7 44 24 04 c5 1b 11 	movl   $0xc0111bc5,0x4(%esp)
c01099bd:	c0 
c01099be:	89 04 24             	mov    %eax,(%esp)
c01099c1:	e8 0d 92 ff ff       	call   c0102bd3 <strncmp>
c01099c6:	85 c0                	test   %eax,%eax
c01099c8:	75 13                	jne    c01099dd <get_section_type+0x87>
    {
        t |= REPLACE;
c01099ca:	83 4d f4 08          	orl    $0x8,-0xc(%ebp)
        (*start) += (STRING_REPLACE_LEN + 1);
c01099ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099d1:	8b 00                	mov    (%eax),%eax
c01099d3:	8d 50 07             	lea    0x7(%eax),%edx
c01099d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099d9:	89 10                	mov    %edx,(%eax)
c01099db:	eb 51                	jmp    c0109a2e <get_section_type+0xd8>
    }
    else if(strncmp(&pipelines[(*start)], "append", STRING_APPEND_LEN) == 0)
c01099dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099e0:	8b 00                	mov    (%eax),%eax
c01099e2:	89 c2                	mov    %eax,%edx
c01099e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e7:	01 d0                	add    %edx,%eax
c01099e9:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
c01099f0:	00 
c01099f1:	c7 44 24 04 cd 1b 11 	movl   $0xc0111bcd,0x4(%esp)
c01099f8:	c0 
c01099f9:	89 04 24             	mov    %eax,(%esp)
c01099fc:	e8 d2 91 ff ff       	call   c0102bd3 <strncmp>
c0109a01:	85 c0                	test   %eax,%eax
c0109a03:	75 13                	jne    c0109a18 <get_section_type+0xc2>
    {
        t |= APPEND;
c0109a05:	83 4d f4 10          	orl    $0x10,-0xc(%ebp)
        (*start) += (STRING_APPEND_LEN + 1);
c0109a09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a0c:	8b 00                	mov    (%eax),%eax
c0109a0e:	8d 50 06             	lea    0x6(%eax),%edx
c0109a11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a14:	89 10                	mov    %edx,(%eax)
c0109a16:	eb 16                	jmp    c0109a2e <get_section_type+0xd8>
    }
    else
    {
        t |= FAILTURE;
c0109a18:	83 4d f4 40          	orl    $0x40,-0xc(%ebp)
        skip_until_whitespace(pipelines, start);
c0109a1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a23:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a26:	89 04 24             	mov    %eax,(%esp)
c0109a29:	e8 45 00 00 00       	call   c0109a73 <skip_until_whitespace>
    }

    return t;
c0109a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109a31:	c9                   	leave  
c0109a32:	c3                   	ret    

c0109a33 <check_section_type_given>:
 * @param pipelines the string in which the section type could be
 * @param start the position where i should look for a section type
 * @return true or false
 */
bool check_section_type_given(char *pipelines, int *start)
{
c0109a33:	55                   	push   %ebp
c0109a34:	89 e5                	mov    %esp,%ebp
c0109a36:	83 ec 10             	sub    $0x10,%esp
    int i = (*start);
c0109a39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a3c:	8b 00                	mov    (%eax),%eax
c0109a3e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    for(; pipelines[i] != ':'; i++)
c0109a41:	eb 1a                	jmp    c0109a5d <check_section_type_given+0x2a>
        if(pipelines[i] == '(')
c0109a43:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a49:	01 d0                	add    %edx,%eax
c0109a4b:	0f b6 00             	movzbl (%eax),%eax
c0109a4e:	3c 28                	cmp    $0x28,%al
c0109a50:	75 07                	jne    c0109a59 <check_section_type_given+0x26>
            return true;
c0109a52:	b8 01 00 00 00       	mov    $0x1,%eax
c0109a57:	eb 18                	jmp    c0109a71 <check_section_type_given+0x3e>
 */
bool check_section_type_given(char *pipelines, int *start)
{
    int i = (*start);

    for(; pipelines[i] != ':'; i++)
c0109a59:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109a5d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a60:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a63:	01 d0                	add    %edx,%eax
c0109a65:	0f b6 00             	movzbl (%eax),%eax
c0109a68:	3c 3a                	cmp    $0x3a,%al
c0109a6a:	75 d7                	jne    c0109a43 <check_section_type_given+0x10>
        if(pipelines[i] == '(')
            return true;

    return false;
c0109a6c:	b8 00 00 00 00       	mov    $0x0,%eax

}
c0109a71:	c9                   	leave  
c0109a72:	c3                   	ret    

c0109a73 <skip_until_whitespace>:
 * @param pipelines the string
 * @param start the current position
 * @return the position after skipping the characters
 */
int skip_until_whitespace(char *pipelines, int *start)
{
c0109a73:	55                   	push   %ebp
c0109a74:	89 e5                	mov    %esp,%ebp
c0109a76:	83 ec 04             	sub    $0x4,%esp
    for(; !is_whitespace(pipelines[(*start)]); (*start)++);
c0109a79:	eb 0d                	jmp    c0109a88 <skip_until_whitespace+0x15>
c0109a7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a7e:	8b 00                	mov    (%eax),%eax
c0109a80:	8d 50 01             	lea    0x1(%eax),%edx
c0109a83:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a86:	89 10                	mov    %edx,(%eax)
c0109a88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a8b:	8b 00                	mov    (%eax),%eax
c0109a8d:	89 c2                	mov    %eax,%edx
c0109a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a92:	01 d0                	add    %edx,%eax
c0109a94:	0f b6 00             	movzbl (%eax),%eax
c0109a97:	0f be c0             	movsbl %al,%eax
c0109a9a:	89 04 24             	mov    %eax,(%esp)
c0109a9d:	e8 09 fe ff ff       	call   c01098ab <is_whitespace>
c0109aa2:	85 c0                	test   %eax,%eax
c0109aa4:	74 d5                	je     c0109a7b <skip_until_whitespace+0x8>

    return (*start);
c0109aa6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109aa9:	8b 00                	mov    (%eax),%eax
}
c0109aab:	c9                   	leave  
c0109aac:	c3                   	ret    

c0109aad <skip_until_colon>:
 * @param pipelines the string
 * @param start the current position
 * @return the position after skipping the characters
 */
int skip_until_colon(char *pipelines, int *start)
{
c0109aad:	55                   	push   %ebp
c0109aae:	89 e5                	mov    %esp,%ebp
    for(; pipelines[(*start)] != ':' && pipelines[(*start)] != '\0'; (*start)++);
c0109ab0:	eb 0d                	jmp    c0109abf <skip_until_colon+0x12>
c0109ab2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ab5:	8b 00                	mov    (%eax),%eax
c0109ab7:	8d 50 01             	lea    0x1(%eax),%edx
c0109aba:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109abd:	89 10                	mov    %edx,(%eax)
c0109abf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ac2:	8b 00                	mov    (%eax),%eax
c0109ac4:	89 c2                	mov    %eax,%edx
c0109ac6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ac9:	01 d0                	add    %edx,%eax
c0109acb:	0f b6 00             	movzbl (%eax),%eax
c0109ace:	3c 3a                	cmp    $0x3a,%al
c0109ad0:	74 13                	je     c0109ae5 <skip_until_colon+0x38>
c0109ad2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ad5:	8b 00                	mov    (%eax),%eax
c0109ad7:	89 c2                	mov    %eax,%edx
c0109ad9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109adc:	01 d0                	add    %edx,%eax
c0109ade:	0f b6 00             	movzbl (%eax),%eax
c0109ae1:	84 c0                	test   %al,%al
c0109ae3:	75 cd                	jne    c0109ab2 <skip_until_colon+0x5>

    return (*start);
c0109ae5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ae8:	8b 00                	mov    (%eax),%eax
}
c0109aea:	5d                   	pop    %ebp
c0109aeb:	c3                   	ret    

c0109aec <parser_pnode>:
 * @param start the position of the pnode
 * @param other a list of all pnodes until here (for services)
 * @return a pointer to the pnode struct
 */
struct pnode *parser_pnode(char *pipelines, int *start, list_t *other)
{
c0109aec:	55                   	push   %ebp
c0109aed:	89 e5                	mov    %esp,%ebp
c0109aef:	83 ec 38             	sub    $0x38,%esp
    struct pnode *node = (struct pnode *)malloc(sizeof(struct pnode));
c0109af2:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0109af9:	e8 a8 3b 00 00       	call   c010d6a6 <malloc>
c0109afe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int pnode_end = find_pnode_end(pipelines, start);
c0109b01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b0b:	89 04 24             	mov    %eax,(%esp)
c0109b0e:	e8 76 02 00 00       	call   c0109d89 <find_pnode_end>
c0109b13:	89 45 ec             	mov    %eax,-0x14(%ebp)
    node->type = get_ptype(pipelines, (*start), pnode_end);
c0109b16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b19:	8b 00                	mov    (%eax),%eax
c0109b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109b1e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109b22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b26:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b29:	89 04 24             	mov    %eax,(%esp)
c0109b2c:	e8 59 03 00 00       	call   c0109e8a <get_ptype>
c0109b31:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b34:	89 42 04             	mov    %eax,0x4(%edx)
    node->file = get_pnode_filename(pipelines, (*start), pnode_end);
c0109b37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b3a:	8b 00                	mov    (%eax),%eax
c0109b3c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109b3f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109b43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b47:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b4a:	89 04 24             	mov    %eax,(%esp)
c0109b4d:	e8 8c 03 00 00       	call   c0109ede <get_pnode_filename>
c0109b52:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b55:	89 02                	mov    %eax,(%edx)
    node->subtree = list_create();
c0109b57:	e8 22 8a ff ff       	call   c010257e <list_create>
c0109b5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b5f:	89 42 0c             	mov    %eax,0xc(%edx)

    (*start) = pnode_end;
c0109b62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b65:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109b68:	89 10                	mov    %edx,(%eax)

    for(; pipelines[(*start)] != ';'; (*start)++)
c0109b6a:	e9 fe 01 00 00       	jmp    c0109d6d <parser_pnode+0x281>
    {
        if(pipelines[(*start)] == '|')
c0109b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b72:	8b 00                	mov    (%eax),%eax
c0109b74:	89 c2                	mov    %eax,%edx
c0109b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b79:	01 d0                	add    %edx,%eax
c0109b7b:	0f b6 00             	movzbl (%eax),%eax
c0109b7e:	3c 7c                	cmp    $0x7c,%al
c0109b80:	0f 85 ee 00 00 00    	jne    c0109c74 <parser_pnode+0x188>
        {
            for(; pipelines[(*start)] != '<' && pipelines[(*start)] != '['; (*start)++);
c0109b86:	eb 0d                	jmp    c0109b95 <parser_pnode+0xa9>
c0109b88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b8b:	8b 00                	mov    (%eax),%eax
c0109b8d:	8d 50 01             	lea    0x1(%eax),%edx
c0109b90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b93:	89 10                	mov    %edx,(%eax)
c0109b95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b98:	8b 00                	mov    (%eax),%eax
c0109b9a:	89 c2                	mov    %eax,%edx
c0109b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b9f:	01 d0                	add    %edx,%eax
c0109ba1:	0f b6 00             	movzbl (%eax),%eax
c0109ba4:	3c 3c                	cmp    $0x3c,%al
c0109ba6:	74 13                	je     c0109bbb <parser_pnode+0xcf>
c0109ba8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bab:	8b 00                	mov    (%eax),%eax
c0109bad:	89 c2                	mov    %eax,%edx
c0109baf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bb2:	01 d0                	add    %edx,%eax
c0109bb4:	0f b6 00             	movzbl (%eax),%eax
c0109bb7:	3c 5b                	cmp    $0x5b,%al
c0109bb9:	75 cd                	jne    c0109b88 <parser_pnode+0x9c>

            if(pipelines[(*start)] == '<')
c0109bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bbe:	8b 00                	mov    (%eax),%eax
c0109bc0:	89 c2                	mov    %eax,%edx
c0109bc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc5:	01 d0                	add    %edx,%eax
c0109bc7:	0f b6 00             	movzbl (%eax),%eax
c0109bca:	3c 3c                	cmp    $0x3c,%al
c0109bcc:	0f 85 89 00 00 00    	jne    c0109c5b <parser_pnode+0x16f>
            {
                struct pnode *subnode = parser_pnode(pipelines, start, other);
c0109bd2:	8b 45 10             	mov    0x10(%ebp),%eax
c0109bd5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109bd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109be0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be3:	89 04 24             	mov    %eax,(%esp)
c0109be6:	e8 01 ff ff ff       	call   c0109aec <parser_pnode>
c0109beb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                list_push_front(node->subtree, subnode);
c0109bee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bf1:	8b 40 0c             	mov    0xc(%eax),%eax
c0109bf4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109bf7:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109bfb:	89 04 24             	mov    %eax,(%esp)
c0109bfe:	e8 b2 8a ff ff       	call   c01026b5 <list_push_front>
c0109c03:	e9 58 01 00 00       	jmp    c0109d60 <parser_pnode+0x274>
            }
            else
            {
                for(; pipelines[(*start)] != ']'; (*start)++)
                {
                    if(pipelines[(*start)] == '<')
c0109c08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c0b:	8b 00                	mov    (%eax),%eax
c0109c0d:	89 c2                	mov    %eax,%edx
c0109c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c12:	01 d0                	add    %edx,%eax
c0109c14:	0f b6 00             	movzbl (%eax),%eax
c0109c17:	3c 3c                	cmp    $0x3c,%al
c0109c19:	75 31                	jne    c0109c4c <parser_pnode+0x160>
                    {
                        struct pnode *subnode = parser_pnode(pipelines, start, other);
c0109c1b:	8b 45 10             	mov    0x10(%ebp),%eax
c0109c1e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c29:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c2c:	89 04 24             	mov    %eax,(%esp)
c0109c2f:	e8 b8 fe ff ff       	call   c0109aec <parser_pnode>
c0109c34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                        list_push_front(node->subtree, subnode);
c0109c37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c3a:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109c40:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109c44:	89 04 24             	mov    %eax,(%esp)
c0109c47:	e8 69 8a ff ff       	call   c01026b5 <list_push_front>

                //if(pipelines[(*start)] == ';')
            }
            else
            {
                for(; pipelines[(*start)] != ']'; (*start)++)
c0109c4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c4f:	8b 00                	mov    (%eax),%eax
c0109c51:	8d 50 01             	lea    0x1(%eax),%edx
c0109c54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c57:	89 10                	mov    %edx,(%eax)
c0109c59:	eb 01                	jmp    c0109c5c <parser_pnode+0x170>
c0109c5b:	90                   	nop
c0109c5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c5f:	8b 00                	mov    (%eax),%eax
c0109c61:	89 c2                	mov    %eax,%edx
c0109c63:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c66:	01 d0                	add    %edx,%eax
c0109c68:	0f b6 00             	movzbl (%eax),%eax
c0109c6b:	3c 5d                	cmp    $0x5d,%al
c0109c6d:	75 99                	jne    c0109c08 <parser_pnode+0x11c>
c0109c6f:	e9 ec 00 00 00       	jmp    c0109d60 <parser_pnode+0x274>
                        list_push_front(node->subtree, subnode);
                    }
                }
            }
        }
        else if(pipelines[(*start)] == '~')
c0109c74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c77:	8b 00                	mov    (%eax),%eax
c0109c79:	89 c2                	mov    %eax,%edx
c0109c7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c7e:	01 d0                	add    %edx,%eax
c0109c80:	0f b6 00             	movzbl (%eax),%eax
c0109c83:	3c 7e                	cmp    $0x7e,%al
c0109c85:	0f 85 d5 00 00 00    	jne    c0109d60 <parser_pnode+0x274>
        {
            for(; pipelines[(*start)] != '<' && pipelines[(*start)] != '{'; (*start)++);
c0109c8b:	eb 0d                	jmp    c0109c9a <parser_pnode+0x1ae>
c0109c8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c90:	8b 00                	mov    (%eax),%eax
c0109c92:	8d 50 01             	lea    0x1(%eax),%edx
c0109c95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c98:	89 10                	mov    %edx,(%eax)
c0109c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c9d:	8b 00                	mov    (%eax),%eax
c0109c9f:	89 c2                	mov    %eax,%edx
c0109ca1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ca4:	01 d0                	add    %edx,%eax
c0109ca6:	0f b6 00             	movzbl (%eax),%eax
c0109ca9:	3c 3c                	cmp    $0x3c,%al
c0109cab:	74 13                	je     c0109cc0 <parser_pnode+0x1d4>
c0109cad:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cb0:	8b 00                	mov    (%eax),%eax
c0109cb2:	89 c2                	mov    %eax,%edx
c0109cb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb7:	01 d0                	add    %edx,%eax
c0109cb9:	0f b6 00             	movzbl (%eax),%eax
c0109cbc:	3c 7b                	cmp    $0x7b,%al
c0109cbe:	75 cd                	jne    c0109c8d <parser_pnode+0x1a1>

            if(pipelines[(*start)] == '<')
c0109cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cc3:	8b 00                	mov    (%eax),%eax
c0109cc5:	89 c2                	mov    %eax,%edx
c0109cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cca:	01 d0                	add    %edx,%eax
c0109ccc:	0f b6 00             	movzbl (%eax),%eax
c0109ccf:	3c 3c                	cmp    $0x3c,%al
c0109cd1:	75 27                	jne    c0109cfa <parser_pnode+0x20e>
            {
                struct pnode *subnode = parser_pnode(pipelines, start, other);
c0109cd3:	8b 45 10             	mov    0x10(%ebp),%eax
c0109cd6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109cda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cdd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ce1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce4:	89 04 24             	mov    %eax,(%esp)
c0109ce7:	e8 00 fe ff ff       	call   c0109aec <parser_pnode>
c0109cec:	89 45 e0             	mov    %eax,-0x20(%ebp)
                node->fallback = subnode;
c0109cef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cf2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109cf5:	89 50 08             	mov    %edx,0x8(%eax)
c0109cf8:	eb 66                	jmp    c0109d60 <parser_pnode+0x274>
            }
            else
            {
                struct pnode *currentnode = node;
c0109cfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cfd:	89 45 f4             	mov    %eax,-0xc(%ebp)

                for(; pipelines[(*start)] != '}'; (*start)++)
c0109d00:	eb 4b                	jmp    c0109d4d <parser_pnode+0x261>
                {
                    if(pipelines[(*start)] == '<')
c0109d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d05:	8b 00                	mov    (%eax),%eax
c0109d07:	89 c2                	mov    %eax,%edx
c0109d09:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d0c:	01 d0                	add    %edx,%eax
c0109d0e:	0f b6 00             	movzbl (%eax),%eax
c0109d11:	3c 3c                	cmp    $0x3c,%al
c0109d13:	75 2b                	jne    c0109d40 <parser_pnode+0x254>
                    {
                        struct pnode *subnode = parser_pnode(pipelines, start, other);
c0109d15:	8b 45 10             	mov    0x10(%ebp),%eax
c0109d18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109d1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d23:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d26:	89 04 24             	mov    %eax,(%esp)
c0109d29:	e8 be fd ff ff       	call   c0109aec <parser_pnode>
c0109d2e:	89 45 dc             	mov    %eax,-0x24(%ebp)
                        currentnode->fallback = subnode;
c0109d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d34:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109d37:	89 50 08             	mov    %edx,0x8(%eax)
                        currentnode = subnode;
c0109d3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109d3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
            }
            else
            {
                struct pnode *currentnode = node;

                for(; pipelines[(*start)] != '}'; (*start)++)
c0109d40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d43:	8b 00                	mov    (%eax),%eax
c0109d45:	8d 50 01             	lea    0x1(%eax),%edx
c0109d48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d4b:	89 10                	mov    %edx,(%eax)
c0109d4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d50:	8b 00                	mov    (%eax),%eax
c0109d52:	89 c2                	mov    %eax,%edx
c0109d54:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d57:	01 d0                	add    %edx,%eax
c0109d59:	0f b6 00             	movzbl (%eax),%eax
c0109d5c:	3c 7d                	cmp    $0x7d,%al
c0109d5e:	75 a2                	jne    c0109d02 <parser_pnode+0x216>
    node->file = get_pnode_filename(pipelines, (*start), pnode_end);
    node->subtree = list_create();

    (*start) = pnode_end;

    for(; pipelines[(*start)] != ';'; (*start)++)
c0109d60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d63:	8b 00                	mov    (%eax),%eax
c0109d65:	8d 50 01             	lea    0x1(%eax),%edx
c0109d68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d6b:	89 10                	mov    %edx,(%eax)
c0109d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d70:	8b 00                	mov    (%eax),%eax
c0109d72:	89 c2                	mov    %eax,%edx
c0109d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d77:	01 d0                	add    %edx,%eax
c0109d79:	0f b6 00             	movzbl (%eax),%eax
c0109d7c:	3c 3b                	cmp    $0x3b,%al
c0109d7e:	0f 85 eb fd ff ff    	jne    c0109b6f <parser_pnode+0x83>
                }
            }
        }
    }

    return node;
c0109d84:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109d87:	c9                   	leave  
c0109d88:	c3                   	ret    

c0109d89 <find_pnode_end>:
 * @param pipelines the string in which the pnode is located
 * @param start the current position
 * @return the end of the pnode
 */
int find_pnode_end(char *pipelines, int *start)
{
c0109d89:	55                   	push   %ebp
c0109d8a:	89 e5                	mov    %esp,%ebp
c0109d8c:	83 ec 10             	sub    $0x10,%esp
    int i;

    for(i = (*start); pipelines[i] != '\0'; i++)
c0109d8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d92:	8b 00                	mov    (%eax),%eax
c0109d94:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109d97:	eb 49                	jmp    c0109de2 <find_pnode_end+0x59>
    {
        if(pipelines[i] == '#')
c0109d99:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109d9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d9f:	01 d0                	add    %edx,%eax
c0109da1:	0f b6 00             	movzbl (%eax),%eax
c0109da4:	3c 23                	cmp    $0x23,%al
c0109da6:	75 15                	jne    c0109dbd <find_pnode_end+0x34>
            for(; pipelines[i] != '\n'; i++);
c0109da8:	eb 04                	jmp    c0109dae <find_pnode_end+0x25>
c0109daa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109dae:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109db1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109db4:	01 d0                	add    %edx,%eax
c0109db6:	0f b6 00             	movzbl (%eax),%eax
c0109db9:	3c 0a                	cmp    $0xa,%al
c0109dbb:	75 ed                	jne    c0109daa <find_pnode_end+0x21>

        if(pipelines[i-1] != '-' && pipelines[i] == '>')
c0109dbd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109dc0:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109dc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dc6:	01 d0                	add    %edx,%eax
c0109dc8:	0f b6 00             	movzbl (%eax),%eax
c0109dcb:	3c 2d                	cmp    $0x2d,%al
c0109dcd:	74 0f                	je     c0109dde <find_pnode_end+0x55>
c0109dcf:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109dd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dd5:	01 d0                	add    %edx,%eax
c0109dd7:	0f b6 00             	movzbl (%eax),%eax
c0109dda:	3c 3e                	cmp    $0x3e,%al
c0109ddc:	74 15                	je     c0109df3 <find_pnode_end+0x6a>
 */
int find_pnode_end(char *pipelines, int *start)
{
    int i;

    for(i = (*start); pipelines[i] != '\0'; i++)
c0109dde:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109de2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109de5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109de8:	01 d0                	add    %edx,%eax
c0109dea:	0f b6 00             	movzbl (%eax),%eax
c0109ded:	84 c0                	test   %al,%al
c0109def:	75 a8                	jne    c0109d99 <find_pnode_end+0x10>
c0109df1:	eb 01                	jmp    c0109df4 <find_pnode_end+0x6b>
    {
        if(pipelines[i] == '#')
            for(; pipelines[i] != '\n'; i++);

        if(pipelines[i-1] != '-' && pipelines[i] == '>')
            break;
c0109df3:	90                   	nop
    }

    return i;
c0109df4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0109df7:	c9                   	leave  
c0109df8:	c3                   	ret    

c0109df9 <is_service>:
 * @param start the start of the pnode
 * @param end the end of the pnode
 * @return true or false
 */
bool is_service(char *pipelines, int start, int end)
{
c0109df9:	55                   	push   %ebp
c0109dfa:	89 e5                	mov    %esp,%ebp
c0109dfc:	83 ec 28             	sub    $0x28,%esp
    int i;

    for(i = start; i < (end - STRING_SERVICE_LEN); i++)
c0109dff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e02:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e05:	eb 2f                	jmp    c0109e36 <is_service+0x3d>
        if(strncmp(&pipelines[i], "service", STRING_SERVICE_LEN) == 0)
c0109e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e0d:	01 d0                	add    %edx,%eax
c0109e0f:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c0109e16:	00 
c0109e17:	c7 44 24 04 d4 1b 11 	movl   $0xc0111bd4,0x4(%esp)
c0109e1e:	c0 
c0109e1f:	89 04 24             	mov    %eax,(%esp)
c0109e22:	e8 ac 8d ff ff       	call   c0102bd3 <strncmp>
c0109e27:	85 c0                	test   %eax,%eax
c0109e29:	75 07                	jne    c0109e32 <is_service+0x39>
            return true;
c0109e2b:	b8 01 00 00 00       	mov    $0x1,%eax
c0109e30:	eb 14                	jmp    c0109e46 <is_service+0x4d>
 */
bool is_service(char *pipelines, int start, int end)
{
    int i;

    for(i = start; i < (end - STRING_SERVICE_LEN); i++)
c0109e32:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109e36:	8b 45 10             	mov    0x10(%ebp),%eax
c0109e39:	83 e8 06             	sub    $0x6,%eax
c0109e3c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109e3f:	7f c6                	jg     c0109e07 <is_service+0xe>
        if(strncmp(&pipelines[i], "service", STRING_SERVICE_LEN) == 0)
            return true;

    return false;
c0109e41:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e46:	c9                   	leave  
c0109e47:	c3                   	ret    

c0109e48 <is_kernelroot>:
 * @param start the start of the pnode
 * @param end the end of the pnode
 * @return true or false
 */
bool is_kernelroot(char *pipelines, int start, int end)
{
c0109e48:	55                   	push   %ebp
c0109e49:	89 e5                	mov    %esp,%ebp
c0109e4b:	83 ec 10             	sub    $0x10,%esp
    int i;

    for(i = start; i < (end - ARROW_LEN); i++)
c0109e4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e51:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109e54:	eb 22                	jmp    c0109e78 <is_kernelroot+0x30>
        if(strncmp(&pipelines[i], "->", ARROW_LEN) == 0)
c0109e56:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109e59:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e5c:	01 d0                	add    %edx,%eax
c0109e5e:	0f b6 10             	movzbl (%eax),%edx
c0109e61:	b8 dc 1b 11 c0       	mov    $0xc0111bdc,%eax
c0109e66:	0f b6 00             	movzbl (%eax),%eax
c0109e69:	38 c2                	cmp    %al,%dl
c0109e6b:	75 07                	jne    c0109e74 <is_kernelroot+0x2c>
            return true;
c0109e6d:	b8 01 00 00 00       	mov    $0x1,%eax
c0109e72:	eb 14                	jmp    c0109e88 <is_kernelroot+0x40>
 */
bool is_kernelroot(char *pipelines, int start, int end)
{
    int i;

    for(i = start; i < (end - ARROW_LEN); i++)
c0109e74:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109e78:	8b 45 10             	mov    0x10(%ebp),%eax
c0109e7b:	83 e8 01             	sub    $0x1,%eax
c0109e7e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109e81:	7f d3                	jg     c0109e56 <is_kernelroot+0xe>
        if(strncmp(&pipelines[i], "->", ARROW_LEN) == 0)
            return true;

    return false;
c0109e83:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e88:	c9                   	leave  
c0109e89:	c3                   	ret    

c0109e8a <get_ptype>:
 * @param start the start of the pnode
 * @param end the end of the pnode
 * @return the type of a pnode
 */
ptype get_ptype(char *pipelines, int start, int end)
{
c0109e8a:	55                   	push   %ebp
c0109e8b:	89 e5                	mov    %esp,%ebp
c0109e8d:	83 ec 28             	sub    $0x28,%esp
    ptype result = NOTHING;
c0109e90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    if(is_service(pipelines, start, end))
c0109e97:	8b 45 10             	mov    0x10(%ebp),%eax
c0109e9a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ea1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ea5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea8:	89 04 24             	mov    %eax,(%esp)
c0109eab:	e8 49 ff ff ff       	call   c0109df9 <is_service>
c0109eb0:	85 c0                	test   %eax,%eax
c0109eb2:	74 04                	je     c0109eb8 <get_ptype+0x2e>
        result |= SERVICE;
c0109eb4:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)

    if(is_kernelroot(pipelines, start, end))
c0109eb8:	8b 45 10             	mov    0x10(%ebp),%eax
c0109ebb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ec2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ec6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec9:	89 04 24             	mov    %eax,(%esp)
c0109ecc:	e8 77 ff ff ff       	call   c0109e48 <is_kernelroot>
c0109ed1:	85 c0                	test   %eax,%eax
c0109ed3:	74 04                	je     c0109ed9 <get_ptype+0x4f>
        result |= KERNELROOT;
c0109ed5:	83 4d f4 04          	orl    $0x4,-0xc(%ebp)

    return result;
c0109ed9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109edc:	c9                   	leave  
c0109edd:	c3                   	ret    

c0109ede <get_pnode_filename>:
 * @param start the start of the pnode
 * @param end the end of the pnode
 * @return the name of a pnode
 */
char *get_pnode_filename(char *pipelines, int start, int end)
{
c0109ede:	55                   	push   %ebp
c0109edf:	89 e5                	mov    %esp,%ebp
c0109ee1:	83 ec 28             	sub    $0x28,%esp
    int i;

    for(i = start; pipelines[i] != '>'; i++)
c0109ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109eea:	e9 ba 00 00 00       	jmp    c0109fa9 <get_pnode_filename+0xcb>
    {
        if(!strncmp(&pipelines[i], "->", ARROW_LEN))
c0109eef:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109ef2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef5:	01 d0                	add    %edx,%eax
c0109ef7:	0f b6 10             	movzbl (%eax),%edx
c0109efa:	b8 dc 1b 11 c0       	mov    $0xc0111bdc,%eax
c0109eff:	0f b6 00             	movzbl (%eax),%eax
c0109f02:	38 c2                	cmp    %al,%dl
c0109f04:	75 09                	jne    c0109f0f <get_pnode_filename+0x31>
            i += ARROW_LEN;
c0109f06:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109f0a:	e9 96 00 00 00       	jmp    c0109fa5 <get_pnode_filename+0xc7>
        else if(!strncmp(&pipelines[i], "service", STRING_SERVICE_LEN))
c0109f0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f15:	01 d0                	add    %edx,%eax
c0109f17:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c0109f1e:	00 
c0109f1f:	c7 44 24 04 d4 1b 11 	movl   $0xc0111bd4,0x4(%esp)
c0109f26:	c0 
c0109f27:	89 04 24             	mov    %eax,(%esp)
c0109f2a:	e8 a4 8c ff ff       	call   c0102bd3 <strncmp>
c0109f2f:	85 c0                	test   %eax,%eax
c0109f31:	75 06                	jne    c0109f39 <get_pnode_filename+0x5b>
            i += STRING_SERVICE_LEN;
c0109f33:	83 45 f4 06          	addl   $0x6,-0xc(%ebp)
c0109f37:	eb 6c                	jmp    c0109fa5 <get_pnode_filename+0xc7>
        else if(!is_whitespace(pipelines[i]) && pipelines[i] != '<')
c0109f39:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f3f:	01 d0                	add    %edx,%eax
c0109f41:	0f b6 00             	movzbl (%eax),%eax
c0109f44:	0f be c0             	movsbl %al,%eax
c0109f47:	89 04 24             	mov    %eax,(%esp)
c0109f4a:	e8 5c f9 ff ff       	call   c01098ab <is_whitespace>
c0109f4f:	85 c0                	test   %eax,%eax
c0109f51:	75 52                	jne    c0109fa5 <get_pnode_filename+0xc7>
c0109f53:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f59:	01 d0                	add    %edx,%eax
c0109f5b:	0f b6 00             	movzbl (%eax),%eax
c0109f5e:	3c 3c                	cmp    $0x3c,%al
c0109f60:	74 43                	je     c0109fa5 <get_pnode_filename+0xc7>
        {
            int len = end - i;
c0109f62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f65:	8b 55 10             	mov    0x10(%ebp),%edx
c0109f68:	89 d1                	mov    %edx,%ecx
c0109f6a:	29 c1                	sub    %eax,%ecx
c0109f6c:	89 c8                	mov    %ecx,%eax
c0109f6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            char *name = (char *)malloc(sizeof(char) * (len + 1));
c0109f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f74:	83 c0 01             	add    $0x1,%eax
c0109f77:	89 04 24             	mov    %eax,(%esp)
c0109f7a:	e8 27 37 00 00       	call   c010d6a6 <malloc>
c0109f7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            strncpy(name, &pipelines[i], len);
c0109f82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f85:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0109f88:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f8b:	01 ca                	add    %ecx,%edx
c0109f8d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f91:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f98:	89 04 24             	mov    %eax,(%esp)
c0109f9b:	e8 01 8b ff ff       	call   c0102aa1 <strncpy>
            return name;
c0109fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fa3:	eb 1c                	jmp    c0109fc1 <get_pnode_filename+0xe3>
 */
char *get_pnode_filename(char *pipelines, int start, int end)
{
    int i;

    for(i = start; pipelines[i] != '>'; i++)
c0109fa5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109fa9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109fac:	8b 45 08             	mov    0x8(%ebp),%eax
c0109faf:	01 d0                	add    %edx,%eax
c0109fb1:	0f b6 00             	movzbl (%eax),%eax
c0109fb4:	3c 3e                	cmp    $0x3e,%al
c0109fb6:	0f 85 33 ff ff ff    	jne    c0109eef <get_pnode_filename+0x11>
            strncpy(name, &pipelines[i], len);
            return name;
        }
    }

    return NULL;
c0109fbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fc1:	c9                   	leave  
c0109fc2:	c3                   	ret    

c0109fc3 <find_module>:
* @param mb_info multiboot struct
* @param name module name
* @return moduel information
*/
struct mods_add* find_module(struct multiboot_struct *mb_info, char *name)
{
c0109fc3:	55                   	push   %ebp
c0109fc4:	89 e5                	mov    %esp,%ebp
c0109fc6:	83 ec 28             	sub    $0x28,%esp
    int i;
    while(*name == ' ' || *name == '\t')
c0109fc9:	eb 04                	jmp    c0109fcf <find_module+0xc>
        name++;
c0109fcb:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
* @return moduel information
*/
struct mods_add* find_module(struct multiboot_struct *mb_info, char *name)
{
    int i;
    while(*name == ' ' || *name == '\t')
c0109fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fd2:	0f b6 00             	movzbl (%eax),%eax
c0109fd5:	3c 20                	cmp    $0x20,%al
c0109fd7:	74 f2                	je     c0109fcb <find_module+0x8>
c0109fd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fdc:	0f b6 00             	movzbl (%eax),%eax
c0109fdf:	3c 09                	cmp    $0x9,%al
c0109fe1:	74 e8                	je     c0109fcb <find_module+0x8>
        name++;
    int n = 0;
c0109fe3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while(name[n] != ' ' && name[n] != '\0')
c0109fea:	eb 04                	jmp    c0109ff0 <find_module+0x2d>

        n++;
c0109fec:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
{
    int i;
    while(*name == ' ' || *name == '\t')
        name++;
    int n = 0;
    while(name[n] != ' ' && name[n] != '\0')
c0109ff0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109ff3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ff6:	01 d0                	add    %edx,%eax
c0109ff8:	0f b6 00             	movzbl (%eax),%eax
c0109ffb:	3c 20                	cmp    $0x20,%al
c0109ffd:	74 0f                	je     c010a00e <find_module+0x4b>
c0109fff:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a002:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a005:	01 d0                	add    %edx,%eax
c010a007:	0f b6 00             	movzbl (%eax),%eax
c010a00a:	84 c0                	test   %al,%al
c010a00c:	75 de                	jne    c0109fec <find_module+0x29>

        n++;

    struct mods_add* modules = (struct mods_add*) mb_info->mods_addr;
c010a00e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a011:	8b 40 18             	mov    0x18(%eax),%eax
c010a014:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(i = 0; i < mb_info->mods_count; i++)
c010a017:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a01e:	eb 3d                	jmp    c010a05d <find_module+0x9a>
    {
        if(! strncmp(name, modules[i].string, n))
c010a020:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a023:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a026:	89 c1                	mov    %eax,%ecx
c010a028:	c1 e1 04             	shl    $0x4,%ecx
c010a02b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a02e:	01 c8                	add    %ecx,%eax
c010a030:	8b 40 08             	mov    0x8(%eax),%eax
c010a033:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a037:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a03b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a03e:	89 04 24             	mov    %eax,(%esp)
c010a041:	e8 8d 8b ff ff       	call   c0102bd3 <strncmp>
c010a046:	85 c0                	test   %eax,%eax
c010a048:	75 0f                	jne    c010a059 <find_module+0x96>
        {
            return &modules[i];
c010a04a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a04d:	89 c2                	mov    %eax,%edx
c010a04f:	c1 e2 04             	shl    $0x4,%edx
c010a052:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a055:	01 d0                	add    %edx,%eax
c010a057:	eb 16                	jmp    c010a06f <find_module+0xac>
    while(name[n] != ' ' && name[n] != '\0')

        n++;

    struct mods_add* modules = (struct mods_add*) mb_info->mods_addr;
    for(i = 0; i < mb_info->mods_count; i++)
c010a059:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a05d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a060:	8b 45 08             	mov    0x8(%ebp),%eax
c010a063:	8b 40 14             	mov    0x14(%eax),%eax
c010a066:	39 c2                	cmp    %eax,%edx
c010a068:	72 b6                	jb     c010a020 <find_module+0x5d>
        {
            return &modules[i];
        }

    }
    return NULL;
c010a06a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a06f:	c9                   	leave  
c010a070:	c3                   	ret    

c010a071 <INIT_TRIGGER>:
 * Initiates the process/thread trigger module
 * @param void
 * @return void
 **/
void INIT_TRIGGER(void)
{
c010a071:	55                   	push   %ebp
c010a072:	89 e5                	mov    %esp,%ebp
c010a074:	83 ec 08             	sub    $0x8,%esp
    trigger_list = list_create();
c010a077:	e8 02 85 ff ff       	call   c010257e <list_create>
c010a07c:	a3 1c 80 11 c0       	mov    %eax,0xc011801c
    event_id_list = list_create();
c010a081:	e8 f8 84 ff ff       	call   c010257e <list_create>
c010a086:	a3 20 80 11 c0       	mov    %eax,0xc0118020
}
c010a08b:	c9                   	leave  
c010a08c:	c3                   	ret    

c010a08d <suspend_thread>:
 * Suspends a running thread
 * @param 0 pointer to the thread state
 * @return void
 */
void suspend_thread(struct thread_state *object)
{
c010a08d:	55                   	push   %ebp
c010a08e:	89 e5                	mov    %esp,%ebp
c010a090:	83 ec 28             	sub    $0x28,%esp
    if(list_is_empty(running_threads))
c010a093:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c010a098:	89 04 24             	mov    %eax,(%esp)
c010a09b:	e8 66 87 ff ff       	call   c0102806 <list_is_empty>
c010a0a0:	85 c0                	test   %eax,%eax
c010a0a2:	0f 85 87 00 00 00    	jne    c010a12f <suspend_thread+0xa2>
        return;

    iterator_t it = iterator_create(running_threads);
c010a0a8:	8b 15 10 a0 11 c0    	mov    0xc011a010,%edx
c010a0ae:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0b1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a0b5:	89 04 24             	mov    %eax,(%esp)
c010a0b8:	e8 8a 87 ff ff       	call   c0102847 <iterator_create>
c010a0bd:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a0c0:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0c3:	89 04 24             	mov    %eax,(%esp)
c010a0c6:	e8 ac 88 ff ff       	call   c0102977 <list_set_first>
    while(list_get_current(&it) != object && !list_is_last(&it))
c010a0cb:	eb 0b                	jmp    c010a0d8 <suspend_thread+0x4b>
        list_next(&it);
c010a0cd:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0d0:	89 04 24             	mov    %eax,(%esp)
c010a0d3:	e8 5d 88 ff ff       	call   c0102935 <list_next>
    if(list_is_empty(running_threads))
        return;

    iterator_t it = iterator_create(running_threads);
    list_set_first(&it);
    while(list_get_current(&it) != object && !list_is_last(&it))
c010a0d8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0db:	89 04 24             	mov    %eax,(%esp)
c010a0de:	e8 2d 88 ff ff       	call   c0102910 <list_get_current>
c010a0e3:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a0e6:	74 0f                	je     c010a0f7 <suspend_thread+0x6a>
c010a0e8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0eb:	89 04 24             	mov    %eax,(%esp)
c010a0ee:	e8 69 88 ff ff       	call   c010295c <list_is_last>
c010a0f3:	85 c0                	test   %eax,%eax
c010a0f5:	74 d6                	je     c010a0cd <suspend_thread+0x40>
        list_next(&it);

    if(list_get_current(&it) == object)
c010a0f7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0fa:	89 04 24             	mov    %eax,(%esp)
c010a0fd:	e8 0e 88 ff ff       	call   c0102910 <list_get_current>
c010a102:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a105:	75 28                	jne    c010a12f <suspend_thread+0xa2>
    {
        list_remove(&it);
c010a107:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a10a:	89 04 24             	mov    %eax,(%esp)
c010a10d:	e8 90 88 ff ff       	call   c01029a2 <list_remove>
        object->ticks  =  0;
c010a112:	8b 45 08             	mov    0x8(%ebp),%eax
c010a115:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        object->flags &= ~THREAD_ACTIV;
c010a11c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a11f:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a123:	89 c2                	mov    %eax,%edx
c010a125:	83 e2 fe             	and    $0xfffffffe,%edx
c010a128:	8b 45 08             	mov    0x8(%ebp),%eax
c010a12b:	66 89 50 14          	mov    %dx,0x14(%eax)
    }
}
c010a12f:	c9                   	leave  
c010a130:	c3                   	ret    

c010a131 <suspend_process>:
 * Suspends a process
 * @param 0 pointer to the process state
 * @return void
 */
void suspend_process(struct process_state *object)
{
c010a131:	55                   	push   %ebp
c010a132:	89 e5                	mov    %esp,%ebp
c010a134:	83 ec 28             	sub    $0x28,%esp
    if(list_is_empty(object->threads))
c010a137:	8b 45 08             	mov    0x8(%ebp),%eax
c010a13a:	8b 40 28             	mov    0x28(%eax),%eax
c010a13d:	89 04 24             	mov    %eax,(%esp)
c010a140:	e8 c1 86 ff ff       	call   c0102806 <list_is_empty>
c010a145:	85 c0                	test   %eax,%eax
c010a147:	75 7c                	jne    c010a1c5 <suspend_process+0x94>
        return;

    iterator_t it = iterator_create(object->threads);
c010a149:	8b 45 08             	mov    0x8(%ebp),%eax
c010a14c:	8b 50 28             	mov    0x28(%eax),%edx
c010a14f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a152:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a156:	89 04 24             	mov    %eax,(%esp)
c010a159:	e8 e9 86 ff ff       	call   c0102847 <iterator_create>
c010a15e:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a161:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a164:	89 04 24             	mov    %eax,(%esp)
c010a167:	e8 0b 88 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_last(&it))
c010a16c:	eb 35                	jmp    c010a1a3 <suspend_process+0x72>
    {
        struct thread_state *thread = (struct thread_state *)list_get_current(&it);
c010a16e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a171:	89 04 24             	mov    %eax,(%esp)
c010a174:	e8 97 87 ff ff       	call   c0102910 <list_get_current>
c010a179:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(thread->flags & THREAD_ACTIV)
c010a17c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a17f:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a183:	0f b7 c0             	movzwl %ax,%eax
c010a186:	83 e0 01             	and    $0x1,%eax
c010a189:	85 c0                	test   %eax,%eax
c010a18b:	74 0b                	je     c010a198 <suspend_process+0x67>
            suspend_thread(thread);
c010a18d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a190:	89 04 24             	mov    %eax,(%esp)
c010a193:	e8 f5 fe ff ff       	call   c010a08d <suspend_thread>

        list_next(&it);
c010a198:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a19b:	89 04 24             	mov    %eax,(%esp)
c010a19e:	e8 92 87 ff ff       	call   c0102935 <list_next>
    if(list_is_empty(object->threads))
        return;

    iterator_t it = iterator_create(object->threads);
    list_set_first(&it);
    while(!list_is_last(&it))
c010a1a3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a1a6:	89 04 24             	mov    %eax,(%esp)
c010a1a9:	e8 ae 87 ff ff       	call   c010295c <list_is_last>
c010a1ae:	85 c0                	test   %eax,%eax
c010a1b0:	74 bc                	je     c010a16e <suspend_process+0x3d>
            suspend_thread(thread);

        list_next(&it);
    }

    object->flags &= ~PROCESS_ACTIVE;
c010a1b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b5:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010a1b9:	89 c2                	mov    %eax,%edx
c010a1bb:	83 e2 fe             	and    $0xfffffffe,%edx
c010a1be:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c1:	66 89 50 3c          	mov    %dx,0x3c(%eax)
}
c010a1c5:	c9                   	leave  
c010a1c6:	c3                   	ret    

c010a1c7 <wakeup_thread>:
 * Wakes up a thread
 * @param 0 pointer to the thread state
 * @return void
 **/
void wakeup_thread(struct thread_state *object)
{
c010a1c7:	55                   	push   %ebp
c010a1c8:	89 e5                	mov    %esp,%ebp
c010a1ca:	83 ec 18             	sub    $0x18,%esp
    list_push_front(running_threads, object);
c010a1cd:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c010a1d2:	8b 55 08             	mov    0x8(%ebp),%edx
c010a1d5:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a1d9:	89 04 24             	mov    %eax,(%esp)
c010a1dc:	e8 d4 84 ff ff       	call   c01026b5 <list_push_front>
    object->flags |= THREAD_ACTIV;
c010a1e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1e4:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a1e8:	89 c2                	mov    %eax,%edx
c010a1ea:	83 ca 01             	or     $0x1,%edx
c010a1ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f0:	66 89 50 14          	mov    %dx,0x14(%eax)
}
c010a1f4:	c9                   	leave  
c010a1f5:	c3                   	ret    

c010a1f6 <wakeup_process>:
 * Wakes up a process
 * @param 0 pointer to the process state
 * @return void
 **/
void wakeup_process(struct process_state *object)
{
c010a1f6:	55                   	push   %ebp
c010a1f7:	89 e5                	mov    %esp,%ebp
c010a1f9:	83 ec 28             	sub    $0x28,%esp
    struct process_state *process = object;
c010a1fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    iterator_t it = iterator_create(process->threads);
c010a202:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a205:	8b 50 28             	mov    0x28(%eax),%edx
c010a208:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a20b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a20f:	89 04 24             	mov    %eax,(%esp)
c010a212:	e8 30 86 ff ff       	call   c0102847 <iterator_create>
c010a217:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a21a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a21d:	89 04 24             	mov    %eax,(%esp)
c010a220:	e8 52 87 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_empty(process->threads) && !list_is_last(&it))
c010a225:	eb 35                	jmp    c010a25c <wakeup_process+0x66>
    {
        struct thread_state *thread = (struct thread_state *)list_get_current(&it);
c010a227:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a22a:	89 04 24             	mov    %eax,(%esp)
c010a22d:	e8 de 86 ff ff       	call   c0102910 <list_get_current>
c010a232:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(!(thread->flags & THREAD_ACTIV))
c010a235:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a238:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a23c:	0f b7 c0             	movzwl %ax,%eax
c010a23f:	83 e0 01             	and    $0x1,%eax
c010a242:	85 c0                	test   %eax,%eax
c010a244:	75 0b                	jne    c010a251 <wakeup_process+0x5b>
            wakeup_thread(thread);
c010a246:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a249:	89 04 24             	mov    %eax,(%esp)
c010a24c:	e8 76 ff ff ff       	call   c010a1c7 <wakeup_thread>
        list_next(&it);
c010a251:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a254:	89 04 24             	mov    %eax,(%esp)
c010a257:	e8 d9 86 ff ff       	call   c0102935 <list_next>
void wakeup_process(struct process_state *object)
{
    struct process_state *process = object;
    iterator_t it = iterator_create(process->threads);
    list_set_first(&it);
    while(!list_is_empty(process->threads) && !list_is_last(&it))
c010a25c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a25f:	8b 40 28             	mov    0x28(%eax),%eax
c010a262:	89 04 24             	mov    %eax,(%esp)
c010a265:	e8 9c 85 ff ff       	call   c0102806 <list_is_empty>
c010a26a:	85 c0                	test   %eax,%eax
c010a26c:	75 0f                	jne    c010a27d <wakeup_process+0x87>
c010a26e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a271:	89 04 24             	mov    %eax,(%esp)
c010a274:	e8 e3 86 ff ff       	call   c010295c <list_is_last>
c010a279:	85 c0                	test   %eax,%eax
c010a27b:	74 aa                	je     c010a227 <wakeup_process+0x31>
        struct thread_state *thread = (struct thread_state *)list_get_current(&it);
        if(!(thread->flags & THREAD_ACTIV))
            wakeup_thread(thread);
        list_next(&it);
    }
    object->flags |= PROCESS_ACTIVE;
c010a27d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a280:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010a284:	89 c2                	mov    %eax,%edx
c010a286:	83 ca 01             	or     $0x1,%edx
c010a289:	8b 45 08             	mov    0x8(%ebp),%eax
c010a28c:	66 89 50 3c          	mov    %dx,0x3c(%eax)
}
c010a290:	c9                   	leave  
c010a291:	c3                   	ret    

c010a292 <remove_event_trigger>:
 * @param 0 pointer to thread/process state
 * @param 1 optional event ID (0 = don't care)
 * @return number or removed triggers
 **/
int remove_event_trigger(void *object, uint32_t ID)
{
c010a292:	55                   	push   %ebp
c010a293:	89 e5                	mov    %esp,%ebp
c010a295:	83 ec 38             	sub    $0x38,%esp
    int removed_elements = 0;
c010a298:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    iterator_t it = iterator_create(trigger_list);
c010a29f:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a2a5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a2a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a2ac:	89 04 24             	mov    %eax,(%esp)
c010a2af:	e8 93 85 ff ff       	call   c0102847 <iterator_create>
c010a2b4:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a2b7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a2ba:	89 04 24             	mov    %eax,(%esp)
c010a2bd:	e8 b5 86 ff ff       	call   c0102977 <list_set_first>
    if(ID == 0)
c010a2c2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a2c6:	0f 85 00 01 00 00    	jne    c010a3cc <remove_event_trigger+0x13a>
    {
        while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a2cc:	eb 61                	jmp    c010a32f <remove_event_trigger+0x9d>
        {
            struct trigger_entry *current_entry = list_get_current(&it);
c010a2ce:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a2d1:	89 04 24             	mov    %eax,(%esp)
c010a2d4:	e8 37 86 ff ff       	call   c0102910 <list_get_current>
c010a2d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(current_entry->object == object)
c010a2dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a2df:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2e2:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a2e5:	75 3d                	jne    c010a324 <remove_event_trigger+0x92>
            {
                list_remove(&it);
c010a2e7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a2ea:	89 04 24             	mov    %eax,(%esp)
c010a2ed:	e8 b0 86 ff ff       	call   c01029a2 <list_remove>
                if(current_entry->type == WAIT_EVENT)
c010a2f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a2f5:	8b 00                	mov    (%eax),%eax
c010a2f7:	83 f8 02             	cmp    $0x2,%eax
c010a2fa:	75 19                	jne    c010a315 <remove_event_trigger+0x83>
                    list_push_front(event_id_list,(void*)current_entry->ID);
c010a2fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a2ff:	8b 40 04             	mov    0x4(%eax),%eax
c010a302:	89 c2                	mov    %eax,%edx
c010a304:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a309:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a30d:	89 04 24             	mov    %eax,(%esp)
c010a310:	e8 a0 83 ff ff       	call   c01026b5 <list_push_front>
                free(current_entry);
c010a315:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a318:	89 04 24             	mov    %eax,(%esp)
c010a31b:	e8 6d 34 00 00       	call   c010d78d <free>
                removed_elements++;
c010a320:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            }
            list_next(&it);
c010a324:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a327:	89 04 24             	mov    %eax,(%esp)
c010a32a:	e8 06 86 ff ff       	call   c0102935 <list_next>
    int removed_elements = 0;
    iterator_t it = iterator_create(trigger_list);
    list_set_first(&it);
    if(ID == 0)
    {
        while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a32f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a332:	89 04 24             	mov    %eax,(%esp)
c010a335:	e8 22 86 ff ff       	call   c010295c <list_is_last>
c010a33a:	85 c0                	test   %eax,%eax
c010a33c:	0f 85 af 00 00 00    	jne    c010a3f1 <remove_event_trigger+0x15f>
c010a342:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a347:	89 04 24             	mov    %eax,(%esp)
c010a34a:	e8 b7 84 ff ff       	call   c0102806 <list_is_empty>
c010a34f:	85 c0                	test   %eax,%eax
c010a351:	0f 84 77 ff ff ff    	je     c010a2ce <remove_event_trigger+0x3c>
c010a357:	e9 95 00 00 00       	jmp    c010a3f1 <remove_event_trigger+0x15f>
    }
    else
    {
        while(!list_is_last(&it) && !list_is_empty(trigger_list))
        {
            struct trigger_entry *current_entry = list_get_current(&it);
c010a35c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a35f:	89 04 24             	mov    %eax,(%esp)
c010a362:	e8 a9 85 ff ff       	call   c0102910 <list_get_current>
c010a367:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if(current_entry->object == object && current_entry->ID == ID)
c010a36a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a36d:	8b 40 0c             	mov    0xc(%eax),%eax
c010a370:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a373:	75 4a                	jne    c010a3bf <remove_event_trigger+0x12d>
c010a375:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a378:	8b 40 04             	mov    0x4(%eax),%eax
c010a37b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a37e:	75 3f                	jne    c010a3bf <remove_event_trigger+0x12d>
            {
                list_remove(&it);
c010a380:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a383:	89 04 24             	mov    %eax,(%esp)
c010a386:	e8 17 86 ff ff       	call   c01029a2 <list_remove>
                if(current_entry->type == WAIT_EVENT)
c010a38b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a38e:	8b 00                	mov    (%eax),%eax
c010a390:	83 f8 02             	cmp    $0x2,%eax
c010a393:	75 19                	jne    c010a3ae <remove_event_trigger+0x11c>
                    list_push_front(event_id_list,(void*)current_entry->ID);
c010a395:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a398:	8b 40 04             	mov    0x4(%eax),%eax
c010a39b:	89 c2                	mov    %eax,%edx
c010a39d:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a3a2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a3a6:	89 04 24             	mov    %eax,(%esp)
c010a3a9:	e8 07 83 ff ff       	call   c01026b5 <list_push_front>
                free(current_entry);
c010a3ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3b1:	89 04 24             	mov    %eax,(%esp)
c010a3b4:	e8 d4 33 00 00       	call   c010d78d <free>
                removed_elements++;
c010a3b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
                break;
c010a3bd:	eb 32                	jmp    c010a3f1 <remove_event_trigger+0x15f>
            }
            list_next(&it);
c010a3bf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a3c2:	89 04 24             	mov    %eax,(%esp)
c010a3c5:	e8 6b 85 ff ff       	call   c0102935 <list_next>
c010a3ca:	eb 01                	jmp    c010a3cd <remove_event_trigger+0x13b>
            list_next(&it);
        }
    }
    else
    {
        while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a3cc:	90                   	nop
c010a3cd:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a3d0:	89 04 24             	mov    %eax,(%esp)
c010a3d3:	e8 84 85 ff ff       	call   c010295c <list_is_last>
c010a3d8:	85 c0                	test   %eax,%eax
c010a3da:	75 15                	jne    c010a3f1 <remove_event_trigger+0x15f>
c010a3dc:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a3e1:	89 04 24             	mov    %eax,(%esp)
c010a3e4:	e8 1d 84 ff ff       	call   c0102806 <list_is_empty>
c010a3e9:	85 c0                	test   %eax,%eax
c010a3eb:	0f 84 6b ff ff ff    	je     c010a35c <remove_event_trigger+0xca>
                break;
            }
            list_next(&it);
        }
    }
    return removed_elements;
c010a3f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a3f4:	c9                   	leave  
c010a3f5:	c3                   	ret    

c010a3f6 <remove_event>:
 * Removes every trigger with the given ID
 * @param 0 event ID
 * @return number of removed triggers, 0 if there was no trigger with the given ID
 **/
int remove_event(uint32_t ID)
{
c010a3f6:	55                   	push   %ebp
c010a3f7:	89 e5                	mov    %esp,%ebp
c010a3f9:	83 ec 28             	sub    $0x28,%esp
    int removed_elements = 0;
c010a3fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    iterator_t it = iterator_create(trigger_list);
c010a403:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a409:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a40c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a410:	89 04 24             	mov    %eax,(%esp)
c010a413:	e8 2f 84 ff ff       	call   c0102847 <iterator_create>
c010a418:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a41b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a41e:	89 04 24             	mov    %eax,(%esp)
c010a421:	e8 51 85 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a426:	eb 63                	jmp    c010a48b <remove_event+0x95>
    {
        struct trigger_entry *current_entry = list_get_current(&it);
c010a428:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a42b:	89 04 24             	mov    %eax,(%esp)
c010a42e:	e8 dd 84 ff ff       	call   c0102910 <list_get_current>
c010a433:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(current_entry->ID == ID)
c010a436:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a439:	8b 40 04             	mov    0x4(%eax),%eax
c010a43c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a43f:	75 3f                	jne    c010a480 <remove_event+0x8a>
        {
            list_remove(&it);
c010a441:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a444:	89 04 24             	mov    %eax,(%esp)
c010a447:	e8 56 85 ff ff       	call   c01029a2 <list_remove>
            if(current_entry->type == WAIT_EVENT)
c010a44c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a44f:	8b 00                	mov    (%eax),%eax
c010a451:	83 f8 02             	cmp    $0x2,%eax
c010a454:	75 19                	jne    c010a46f <remove_event+0x79>
                list_push_front(event_id_list,(void*)current_entry->ID);
c010a456:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a459:	8b 40 04             	mov    0x4(%eax),%eax
c010a45c:	89 c2                	mov    %eax,%edx
c010a45e:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a463:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a467:	89 04 24             	mov    %eax,(%esp)
c010a46a:	e8 46 82 ff ff       	call   c01026b5 <list_push_front>
            free(current_entry);
c010a46f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a472:	89 04 24             	mov    %eax,(%esp)
c010a475:	e8 13 33 00 00       	call   c010d78d <free>
            removed_elements++;
c010a47a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            break;
c010a47e:	eb 2f                	jmp    c010a4af <remove_event+0xb9>
        }

        list_next(&it);
c010a480:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a483:	89 04 24             	mov    %eax,(%esp)
c010a486:	e8 aa 84 ff ff       	call   c0102935 <list_next>
int remove_event(uint32_t ID)
{
    int removed_elements = 0;
    iterator_t it = iterator_create(trigger_list);
    list_set_first(&it);
    while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a48b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a48e:	89 04 24             	mov    %eax,(%esp)
c010a491:	e8 c6 84 ff ff       	call   c010295c <list_is_last>
c010a496:	85 c0                	test   %eax,%eax
c010a498:	75 15                	jne    c010a4af <remove_event+0xb9>
c010a49a:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a49f:	89 04 24             	mov    %eax,(%esp)
c010a4a2:	e8 5f 83 ff ff       	call   c0102806 <list_is_empty>
c010a4a7:	85 c0                	test   %eax,%eax
c010a4a9:	0f 84 79 ff ff ff    	je     c010a428 <remove_event+0x32>
            break;
        }

        list_next(&it);
    }
    return removed_elements;
c010a4af:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a4b2:	c9                   	leave  
c010a4b3:	c3                   	ret    

c010a4b4 <send_event>:
 * Send a event which can lauch a event trigger
 * @param  0 event ID
 * @return true if the trigger was pulled, false if there's no trigger with the given ID
 */
int send_event(uint32_t ID)
{
c010a4b4:	55                   	push   %ebp
c010a4b5:	89 e5                	mov    %esp,%ebp
c010a4b7:	83 ec 38             	sub    $0x38,%esp
    int ret = false;
c010a4ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    iterator_t it = iterator_create(trigger_list);
c010a4c1:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a4c7:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a4ca:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a4ce:	89 04 24             	mov    %eax,(%esp)
c010a4d1:	e8 71 83 ff ff       	call   c0102847 <iterator_create>
c010a4d6:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a4d9:	e9 4e 01 00 00       	jmp    c010a62c <send_event+0x178>
    {
        struct trigger_entry *current_entry = list_get_current(&it);
c010a4de:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a4e1:	89 04 24             	mov    %eax,(%esp)
c010a4e4:	e8 27 84 ff ff       	call   c0102910 <list_get_current>
c010a4e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(current_entry->ID == ID && current_entry->type == WAIT_EVENT)
c010a4ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4ef:	8b 40 04             	mov    0x4(%eax),%eax
c010a4f2:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a4f5:	0f 85 26 01 00 00    	jne    c010a621 <send_event+0x16d>
c010a4fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4fe:	8b 00                	mov    (%eax),%eax
c010a500:	83 f8 02             	cmp    $0x2,%eax
c010a503:	0f 85 18 01 00 00    	jne    c010a621 <send_event+0x16d>
        {
            if(current_entry->proc)
c010a509:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a50c:	8b 40 08             	mov    0x8(%eax),%eax
c010a50f:	85 c0                	test   %eax,%eax
c010a511:	74 2b                	je     c010a53e <send_event+0x8a>
            {
                wakeup_process(current_entry->object);
c010a513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a516:	8b 40 0c             	mov    0xc(%eax),%eax
c010a519:	89 04 24             	mov    %eax,(%esp)
c010a51c:	e8 d5 fc ff ff       	call   c010a1f6 <wakeup_process>
                remove_event_trigger(current_entry->object, current_entry->ID);
c010a521:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a524:	8b 50 04             	mov    0x4(%eax),%edx
c010a527:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a52a:	8b 40 0c             	mov    0xc(%eax),%eax
c010a52d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a531:	89 04 24             	mov    %eax,(%esp)
c010a534:	e8 59 fd ff ff       	call   c010a292 <remove_event_trigger>
c010a539:	e9 82 00 00 00       	jmp    c010a5c0 <send_event+0x10c>
            }
            else
            {
                struct thread_state *thread = current_entry->object;
c010a53e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a541:	8b 40 0c             	mov    0xc(%eax),%eax
c010a544:	89 45 ec             	mov    %eax,-0x14(%ebp)
                remove_event_trigger(current_entry->object, current_entry->ID);
c010a547:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a54a:	8b 50 04             	mov    0x4(%eax),%edx
c010a54d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a550:	8b 40 0c             	mov    0xc(%eax),%eax
c010a553:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a557:	89 04 24             	mov    %eax,(%esp)
c010a55a:	e8 33 fd ff ff       	call   c010a292 <remove_event_trigger>
                wakeup_thread(thread);
c010a55f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a562:	89 04 24             	mov    %eax,(%esp)
c010a565:	e8 5d fc ff ff       	call   c010a1c7 <wakeup_thread>

                if(current_entry->callback != NULL)
c010a56a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a56d:	8b 40 10             	mov    0x10(%eax),%eax
c010a570:	85 c0                	test   %eax,%eax
c010a572:	74 4c                	je     c010a5c0 <send_event+0x10c>
                {
                    struct cpu_state **cpu = &thread->state;
c010a574:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a577:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    struct thread_state *tmp = current_thread;
c010a57a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010a57f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    current_thread = thread;
c010a582:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a585:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
                    vmm_switch_context(&current_thread->context);
c010a58a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010a58f:	83 c0 08             	add    $0x8,%eax
c010a592:	89 04 24             	mov    %eax,(%esp)
c010a595:	e8 1b 2b 00 00       	call   c010d0b5 <vmm_switch_context>
                    current_entry->callback(cpu);
c010a59a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a59d:	8b 40 10             	mov    0x10(%eax),%eax
c010a5a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a5a3:	89 14 24             	mov    %edx,(%esp)
c010a5a6:	ff d0                	call   *%eax
                    current_thread = tmp;
c010a5a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a5ab:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
                    vmm_switch_context(&current_thread->context);
c010a5b0:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010a5b5:	83 c0 08             	add    $0x8,%eax
c010a5b8:	89 04 24             	mov    %eax,(%esp)
c010a5bb:	e8 f5 2a 00 00       	call   c010d0b5 <vmm_switch_context>
                }
            }
            // that's a temporary workaround. I have to fix it later.
            // the problems are caused by blitzbasics list ports.
            ret = true;
c010a5c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
            list_remove(&it);
c010a5c7:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a5ca:	89 04 24             	mov    %eax,(%esp)
c010a5cd:	e8 d0 83 ff ff       	call   c01029a2 <list_remove>
            if(current_entry->type == WAIT_EVENT)
c010a5d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5d5:	8b 00                	mov    (%eax),%eax
c010a5d7:	83 f8 02             	cmp    $0x2,%eax
c010a5da:	75 19                	jne    c010a5f5 <send_event+0x141>
                list_push_front(event_id_list,(void*)current_entry->ID);
c010a5dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5df:	8b 40 04             	mov    0x4(%eax),%eax
c010a5e2:	89 c2                	mov    %eax,%edx
c010a5e4:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a5e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a5ed:	89 04 24             	mov    %eax,(%esp)
c010a5f0:	e8 c0 80 ff ff       	call   c01026b5 <list_push_front>
            free(current_entry);
c010a5f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5f8:	89 04 24             	mov    %eax,(%esp)
c010a5fb:	e8 8d 31 00 00       	call   c010d78d <free>
            if(list_is_last(&it))
c010a600:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a603:	89 04 24             	mov    %eax,(%esp)
c010a606:	e8 51 83 ff ff       	call   c010295c <list_is_last>
c010a60b:	85 c0                	test   %eax,%eax
c010a60d:	74 05                	je     c010a614 <send_event+0x160>
                return ret;
c010a60f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a612:	eb 3f                	jmp    c010a653 <send_event+0x19f>
            list_set_first(&it);
c010a614:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a617:	89 04 24             	mov    %eax,(%esp)
c010a61a:	e8 58 83 ff ff       	call   c0102977 <list_set_first>
c010a61f:	eb 0b                	jmp    c010a62c <send_event+0x178>
        }
        else
            list_next(&it);
c010a621:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a624:	89 04 24             	mov    %eax,(%esp)
c010a627:	e8 09 83 ff ff       	call   c0102935 <list_next>
 */
int send_event(uint32_t ID)
{
    int ret = false;
    iterator_t it = iterator_create(trigger_list);
    while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a62c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a62f:	89 04 24             	mov    %eax,(%esp)
c010a632:	e8 25 83 ff ff       	call   c010295c <list_is_last>
c010a637:	85 c0                	test   %eax,%eax
c010a639:	75 15                	jne    c010a650 <send_event+0x19c>
c010a63b:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a640:	89 04 24             	mov    %eax,(%esp)
c010a643:	e8 be 81 ff ff       	call   c0102806 <list_is_empty>
c010a648:	85 c0                	test   %eax,%eax
c010a64a:	0f 84 8e fe ff ff    	je     c010a4de <send_event+0x2a>
            list_set_first(&it);
        }
        else
            list_next(&it);
    }
    return ret;
c010a650:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a653:	c9                   	leave  
c010a654:	c3                   	ret    

c010a655 <get_new_event_ID>:
 * returns a new, unused event ID
 * @param void
 * @return new event ID
 */
uint32_t get_new_event_ID(void)
{
c010a655:	55                   	push   %ebp
c010a656:	89 e5                	mov    %esp,%ebp
c010a658:	83 ec 18             	sub    $0x18,%esp
    if(list_is_empty(event_id_list))
c010a65b:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a660:	89 04 24             	mov    %eax,(%esp)
c010a663:	e8 9e 81 ff ff       	call   c0102806 <list_is_empty>
c010a668:	85 c0                	test   %eax,%eax
c010a66a:	74 13                	je     c010a67f <get_new_event_ID+0x2a>
        return event_id_counter++;
c010a66c:	8b 15 90 31 11 c0    	mov    0xc0113190,%edx
c010a672:	89 d0                	mov    %edx,%eax
c010a674:	83 c2 01             	add    $0x1,%edx
c010a677:	89 15 90 31 11 c0    	mov    %edx,0xc0113190
c010a67d:	eb 0d                	jmp    c010a68c <get_new_event_ID+0x37>

    return (uint32_t) list_pop_back(event_id_list);
c010a67f:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a684:	89 04 24             	mov    %eax,(%esp)
c010a687:	e8 b3 80 ff ff       	call   c010273f <list_pop_back>
}
c010a68c:	c9                   	leave  
c010a68d:	c3                   	ret    

c010a68e <add_event_trigger>:
 * @param 1 pointer to process/thread state
 * @param 2 pointer to callback function (will be called before the thread/process wakes up) or NULL if there is no need for a callback
 * @return event ID
 **/
uint32_t add_event_trigger(bool proc, void *object, void (*callback)(struct cpu_state **cpu))
{
c010a68e:	55                   	push   %ebp
c010a68f:	89 e5                	mov    %esp,%ebp
c010a691:	83 ec 28             	sub    $0x28,%esp
    struct trigger_entry *new_entry = (struct trigger_entry*) malloc(sizeof(struct trigger_entry));
c010a694:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c010a69b:	e8 06 30 00 00       	call   c010d6a6 <malloc>
c010a6a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    new_entry->type = WAIT_EVENT;
c010a6a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6a6:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    new_entry->ID = get_new_event_ID();
c010a6ac:	e8 a4 ff ff ff       	call   c010a655 <get_new_event_ID>
c010a6b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6b4:	89 42 04             	mov    %eax,0x4(%edx)
    new_entry->proc = proc;
c010a6b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6ba:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6bd:	89 50 08             	mov    %edx,0x8(%eax)
    new_entry->object = object;
c010a6c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a6c6:	89 50 0c             	mov    %edx,0xc(%eax)
    new_entry->callback = callback;
c010a6c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6cc:	8b 55 10             	mov    0x10(%ebp),%edx
c010a6cf:	89 50 10             	mov    %edx,0x10(%eax)

    list_push_front(trigger_list,new_entry);
c010a6d2:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a6d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6da:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a6de:	89 04 24             	mov    %eax,(%esp)
c010a6e1:	e8 cf 7f ff ff       	call   c01026b5 <list_push_front>
    return new_entry->ID;
c010a6e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6e9:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a6ec:	c9                   	leave  
c010a6ed:	c3                   	ret    

c010a6ee <add_trigger>:
 * @param 3 pointer to process/thread state
 * @param 4 pointer to callback function (will be called before the thread/process wakes up) or NULL if there is no need for a callback
 * @return void
 **/
void add_trigger(trigger_t type, uint32_t ID, bool proc, void *object, void (*callback)(struct cpu_state **cpu))
{
c010a6ee:	55                   	push   %ebp
c010a6ef:	89 e5                	mov    %esp,%ebp
c010a6f1:	83 ec 28             	sub    $0x28,%esp
    struct trigger_entry *new_entry = (struct trigger_entry*) malloc(sizeof(struct trigger_entry));
c010a6f4:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c010a6fb:	e8 a6 2f 00 00       	call   c010d6a6 <malloc>
c010a700:	89 45 f4             	mov    %eax,-0xc(%ebp)
    new_entry->type   = type;
c010a703:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a706:	8b 55 08             	mov    0x8(%ebp),%edx
c010a709:	89 10                	mov    %edx,(%eax)
    new_entry->ID     = ID;
c010a70b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a70e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a711:	89 50 04             	mov    %edx,0x4(%eax)
    new_entry->proc   = proc;
c010a714:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a717:	8b 55 10             	mov    0x10(%ebp),%edx
c010a71a:	89 50 08             	mov    %edx,0x8(%eax)
    new_entry->object = object;
c010a71d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a720:	8b 55 14             	mov    0x14(%ebp),%edx
c010a723:	89 50 0c             	mov    %edx,0xc(%eax)
    new_entry->callback = callback;
c010a726:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a729:	8b 55 18             	mov    0x18(%ebp),%edx
c010a72c:	89 50 10             	mov    %edx,0x10(%eax)
    list_push_front(trigger_list,new_entry);
c010a72f:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a734:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a737:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a73b:	89 04 24             	mov    %eax,(%esp)
c010a73e:	e8 72 7f ff ff       	call   c01026b5 <list_push_front>
}
c010a743:	c9                   	leave  
c010a744:	c3                   	ret    

c010a745 <add_int_trigger>:
 * @param 1 pointer to the thread (optional NULL)
 * @param 2 callback function (optional NULL)
 * @return true = sucess, false = failure
 **/
int add_int_trigger(int irq, struct thread_state *object,void (*callback)(int irq))
{
c010a745:	55                   	push   %ebp
c010a746:	89 e5                	mov    %esp,%ebp
c010a748:	83 ec 28             	sub    $0x28,%esp
    if(install_irq(irq,handle_interupts))
c010a74b:	c7 44 24 04 99 a7 10 	movl   $0xc010a799,0x4(%esp)
c010a752:	c0 
c010a753:	8b 45 08             	mov    0x8(%ebp),%eax
c010a756:	89 04 24             	mov    %eax,(%esp)
c010a759:	e8 0c 3b 00 00       	call   c010e26a <install_irq>
c010a75e:	85 c0                	test   %eax,%eax
c010a760:	74 30                	je     c010a792 <add_int_trigger+0x4d>
    {
        add_trigger(WAIT_INT, irq, false, object,(void (*)(struct cpu_state **cpu))callback);
c010a762:	8b 45 08             	mov    0x8(%ebp),%eax
c010a765:	8b 55 10             	mov    0x10(%ebp),%edx
c010a768:	89 54 24 10          	mov    %edx,0x10(%esp)
c010a76c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a76f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010a773:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010a77a:	00 
c010a77b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a77f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010a786:	e8 63 ff ff ff       	call   c010a6ee <add_trigger>
        return true;
c010a78b:	b8 01 00 00 00       	mov    $0x1,%eax
c010a790:	eb 05                	jmp    c010a797 <add_int_trigger+0x52>
    }
    return false;
c010a792:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a797:	c9                   	leave  
c010a798:	c3                   	ret    

c010a799 <handle_interupts>:
 * pulls a interrupt trigger
 * @param 0 cpu-state of the current process
 * @return void
 **/
void handle_interupts(struct cpu_state **cpu)
{
c010a799:	55                   	push   %ebp
c010a79a:	89 e5                	mov    %esp,%ebp
c010a79c:	83 ec 28             	sub    $0x28,%esp
    iterator_t it = iterator_create(trigger_list);
c010a79f:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a7a5:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a7a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a7ac:	89 04 24             	mov    %eax,(%esp)
c010a7af:	e8 93 80 ff ff       	call   c0102847 <iterator_create>
c010a7b4:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a7b7:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a7ba:	89 04 24             	mov    %eax,(%esp)
c010a7bd:	e8 b5 81 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_empty(trigger_list) && !list_is_last(&it))
c010a7c2:	e9 d2 00 00 00       	jmp    c010a899 <handle_interupts+0x100>
    {
        struct trigger_entry *trg = list_get_current(&it);
c010a7c7:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a7ca:	89 04 24             	mov    %eax,(%esp)
c010a7cd:	e8 3e 81 ff ff       	call   c0102910 <list_get_current>
c010a7d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        list_next(&it);
c010a7d5:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a7d8:	89 04 24             	mov    %eax,(%esp)
c010a7db:	e8 55 81 ff ff       	call   c0102935 <list_next>
        if(trg->type == WAIT_INT && trg->ID == (*cpu)->intr-IRQ_OFFSET)
c010a7e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7e3:	8b 00                	mov    (%eax),%eax
c010a7e5:	83 f8 05             	cmp    $0x5,%eax
c010a7e8:	0f 85 ab 00 00 00    	jne    c010a899 <handle_interupts+0x100>
c010a7ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7f1:	8b 50 04             	mov    0x4(%eax),%edx
c010a7f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7f7:	8b 00                	mov    (%eax),%eax
c010a7f9:	8b 40 2c             	mov    0x2c(%eax),%eax
c010a7fc:	83 e8 20             	sub    $0x20,%eax
c010a7ff:	39 c2                	cmp    %eax,%edx
c010a801:	0f 85 92 00 00 00    	jne    c010a899 <handle_interupts+0x100>
        {
            if(trg->callback)
c010a807:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a80a:	8b 40 10             	mov    0x10(%eax),%eax
c010a80d:	85 c0                	test   %eax,%eax
c010a80f:	74 11                	je     c010a822 <handle_interupts+0x89>
            {
                ((void (*)(int irq))trg->callback)(trg->ID);
c010a811:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a814:	8b 40 10             	mov    0x10(%eax),%eax
c010a817:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a81a:	8b 52 04             	mov    0x4(%edx),%edx
c010a81d:	89 14 24             	mov    %edx,(%esp)
c010a820:	ff d0                	call   *%eax
            }

            if(trg->object && ! (((struct thread_state *)trg->object)->flags & THREAD_ACTIV))
c010a822:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a825:	8b 40 0c             	mov    0xc(%eax),%eax
c010a828:	85 c0                	test   %eax,%eax
c010a82a:	74 6d                	je     c010a899 <handle_interupts+0x100>
c010a82c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a82f:	8b 40 0c             	mov    0xc(%eax),%eax
c010a832:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a836:	0f b7 c0             	movzwl %ax,%eax
c010a839:	83 e0 01             	and    $0x1,%eax
c010a83c:	85 c0                	test   %eax,%eax
c010a83e:	75 59                	jne    c010a899 <handle_interupts+0x100>
            {
                ((struct thread_state *)trg->object)->flags |= THREAD_ACTIV;
c010a840:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a843:	8b 40 0c             	mov    0xc(%eax),%eax
c010a846:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a849:	8b 52 0c             	mov    0xc(%edx),%edx
c010a84c:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c010a850:	83 ca 01             	or     $0x1,%edx
c010a853:	66 89 50 14          	mov    %dx,0x14(%eax)
                list_insert_after(&it,trg->object);
c010a857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a85a:	8b 40 0c             	mov    0xc(%eax),%eax
c010a85d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a861:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a864:	89 04 24             	mov    %eax,(%esp)
c010a867:	e8 07 80 ff ff       	call   c0102873 <list_insert_after>
                ((struct thread_state *)trg->object)->ticks = 10;
c010a86c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a86f:	8b 40 0c             	mov    0xc(%eax),%eax
c010a872:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
                current_thread->ticks = 0;
c010a879:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010a87e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
                *cpu = task_schedule(*cpu);
c010a885:	8b 45 08             	mov    0x8(%ebp),%eax
c010a888:	8b 00                	mov    (%eax),%eax
c010a88a:	89 04 24             	mov    %eax,(%esp)
c010a88d:	e8 fd a0 ff ff       	call   c010498f <task_schedule>
c010a892:	8b 55 08             	mov    0x8(%ebp),%edx
c010a895:	89 02                	mov    %eax,(%edx)
c010a897:	eb 24                	jmp    c010a8bd <handle_interupts+0x124>
 **/
void handle_interupts(struct cpu_state **cpu)
{
    iterator_t it = iterator_create(trigger_list);
    list_set_first(&it);
    while(!list_is_empty(trigger_list) && !list_is_last(&it))
c010a899:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a89e:	89 04 24             	mov    %eax,(%esp)
c010a8a1:	e8 60 7f ff ff       	call   c0102806 <list_is_empty>
c010a8a6:	85 c0                	test   %eax,%eax
c010a8a8:	75 13                	jne    c010a8bd <handle_interupts+0x124>
c010a8aa:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a8ad:	89 04 24             	mov    %eax,(%esp)
c010a8b0:	e8 a7 80 ff ff       	call   c010295c <list_is_last>
c010a8b5:	85 c0                	test   %eax,%eax
c010a8b7:	0f 84 0a ff ff ff    	je     c010a7c7 <handle_interupts+0x2e>
            }

        }

    }
}
c010a8bd:	c9                   	leave  
c010a8be:	c3                   	ret    

c010a8bf <send_killed_process>:
 * pulls waitpid triggers when a process has been killed
 * @param pointer to process state
 * @return void
 **/
void send_killed_process(struct process_state *proc)
{
c010a8bf:	55                   	push   %ebp
c010a8c0:	89 e5                	mov    %esp,%ebp
c010a8c2:	83 ec 38             	sub    $0x38,%esp
    iterator_t it = iterator_create(trigger_list);
c010a8c5:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a8cb:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a8ce:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a8d2:	89 04 24             	mov    %eax,(%esp)
c010a8d5:	e8 6d 7f ff ff       	call   c0102847 <iterator_create>
c010a8da:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a8dd:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a8e0:	89 04 24             	mov    %eax,(%esp)
c010a8e3:	e8 8f 80 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_empty(trigger_list) && !list_is_last(&it))
c010a8e8:	e9 9c 01 00 00       	jmp    c010aa89 <send_killed_process+0x1ca>
    {
        struct trigger_entry *current_entry = list_get_current(&it);
c010a8ed:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a8f0:	89 04 24             	mov    %eax,(%esp)
c010a8f3:	e8 18 80 ff ff       	call   c0102910 <list_get_current>
c010a8f8:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(current_entry->ID == proc->pid && current_entry->type == WAIT_PID) // pid > 0
c010a8fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8fe:	8b 50 04             	mov    0x4(%eax),%edx
c010a901:	8b 45 08             	mov    0x8(%ebp),%eax
c010a904:	8b 00                	mov    (%eax),%eax
c010a906:	39 c2                	cmp    %eax,%edx
c010a908:	75 7c                	jne    c010a986 <send_killed_process+0xc7>
c010a90a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a90d:	8b 00                	mov    (%eax),%eax
c010a90f:	85 c0                	test   %eax,%eax
c010a911:	75 73                	jne    c010a986 <send_killed_process+0xc7>
        {
            if(current_entry->proc)
c010a913:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a916:	8b 40 08             	mov    0x8(%eax),%eax
c010a919:	85 c0                	test   %eax,%eax
c010a91b:	74 28                	je     c010a945 <send_killed_process+0x86>
            {
                wakeup_process(current_entry->object);
c010a91d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a920:	8b 40 0c             	mov    0xc(%eax),%eax
c010a923:	89 04 24             	mov    %eax,(%esp)
c010a926:	e8 cb f8 ff ff       	call   c010a1f6 <wakeup_process>
                remove_event_trigger(current_entry->object, current_entry->ID);
c010a92b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a92e:	8b 50 04             	mov    0x4(%eax),%edx
c010a931:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a934:	8b 40 0c             	mov    0xc(%eax),%eax
c010a937:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a93b:	89 04 24             	mov    %eax,(%esp)
c010a93e:	e8 4f f9 ff ff       	call   c010a292 <remove_event_trigger>
c010a943:	eb 26                	jmp    c010a96b <send_killed_process+0xac>
            }
            else
            {
                wakeup_thread(current_entry->object);
c010a945:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a948:	8b 40 0c             	mov    0xc(%eax),%eax
c010a94b:	89 04 24             	mov    %eax,(%esp)
c010a94e:	e8 74 f8 ff ff       	call   c010a1c7 <wakeup_thread>
                remove_event_trigger(current_entry->object, current_entry->ID);
c010a953:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a956:	8b 50 04             	mov    0x4(%eax),%edx
c010a959:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a95c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a95f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a963:	89 04 24             	mov    %eax,(%esp)
c010a966:	e8 27 f9 ff ff       	call   c010a292 <remove_event_trigger>
            }

            list_remove(&it);
c010a96b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a96e:	89 04 24             	mov    %eax,(%esp)
c010a971:	e8 2c 80 ff ff       	call   c01029a2 <list_remove>
            free(current_entry);
c010a976:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a979:	89 04 24             	mov    %eax,(%esp)
c010a97c:	e8 0c 2e 00 00       	call   c010d78d <free>
            continue;
c010a981:	e9 03 01 00 00       	jmp    c010aa89 <send_killed_process+0x1ca>
        }

        if(current_entry->ID == 0 && current_entry->type == WAIT_PID) // pid = 0
c010a986:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a989:	8b 40 04             	mov    0x4(%eax),%eax
c010a98c:	85 c0                	test   %eax,%eax
                Please rewrite this case.
            */

        }

        if((int)current_entry->ID == -1 && current_entry->type == WAIT_PID) // pid = -1
c010a98e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a991:	8b 40 04             	mov    0x4(%eax),%eax
c010a994:	83 f8 ff             	cmp    $0xffffffff,%eax
c010a997:	0f 85 d8 00 00 00    	jne    c010aa75 <send_killed_process+0x1b6>
c010a99d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9a0:	8b 00                	mov    (%eax),%eax
c010a9a2:	85 c0                	test   %eax,%eax
c010a9a4:	0f 85 cb 00 00 00    	jne    c010aa75 <send_killed_process+0x1b6>
        {
            if(current_entry->object == proc->parent)
c010a9aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9ad:	8b 50 0c             	mov    0xc(%eax),%edx
c010a9b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9b3:	8b 40 14             	mov    0x14(%eax),%eax
c010a9b6:	39 c2                	cmp    %eax,%edx
c010a9b8:	75 2b                	jne    c010a9e5 <send_killed_process+0x126>
            {
                wakeup_process(proc->parent);
c010a9ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9bd:	8b 40 14             	mov    0x14(%eax),%eax
c010a9c0:	89 04 24             	mov    %eax,(%esp)
c010a9c3:	e8 2e f8 ff ff       	call   c010a1f6 <wakeup_process>
                remove_event_trigger(proc->parent, current_entry->ID);
c010a9c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9cb:	8b 50 04             	mov    0x4(%eax),%edx
c010a9ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9d1:	8b 40 14             	mov    0x14(%eax),%eax
c010a9d4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a9d8:	89 04 24             	mov    %eax,(%esp)
c010a9db:	e8 b2 f8 ff ff       	call   c010a292 <remove_event_trigger>
c010a9e0:	e9 90 00 00 00       	jmp    c010aa75 <send_killed_process+0x1b6>
            }
            else
            {
                iterator_t thread_it = iterator_create(proc->parent->threads);
c010a9e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9e8:	8b 40 14             	mov    0x14(%eax),%eax
c010a9eb:	8b 50 28             	mov    0x28(%eax),%edx
c010a9ee:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a9f1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a9f5:	89 04 24             	mov    %eax,(%esp)
c010a9f8:	e8 4a 7e ff ff       	call   c0102847 <iterator_create>
c010a9fd:	83 ec 04             	sub    $0x4,%esp
                list_set_first(&thread_it);
c010aa00:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010aa03:	89 04 24             	mov    %eax,(%esp)
c010aa06:	e8 6c 7f ff ff       	call   c0102977 <list_set_first>
                while(!list_is_empty(proc->parent->threads) && !list_is_last(&thread_it))
c010aa0b:	eb 44                	jmp    c010aa51 <send_killed_process+0x192>
                {
                    struct thread_state *thread = list_get_current(&thread_it);
c010aa0d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010aa10:	89 04 24             	mov    %eax,(%esp)
c010aa13:	e8 f8 7e ff ff       	call   c0102910 <list_get_current>
c010aa18:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    if(thread == current_entry->object)
c010aa1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa1e:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa21:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010aa24:	75 20                	jne    c010aa46 <send_killed_process+0x187>
                    {
                        wakeup_thread(thread);
c010aa26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa29:	89 04 24             	mov    %eax,(%esp)
c010aa2c:	e8 96 f7 ff ff       	call   c010a1c7 <wakeup_thread>
                        remove_event_trigger(thread, current_entry->ID);
c010aa31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa34:	8b 40 04             	mov    0x4(%eax),%eax
c010aa37:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa3e:	89 04 24             	mov    %eax,(%esp)
c010aa41:	e8 4c f8 ff ff       	call   c010a292 <remove_event_trigger>
                    }
                    list_next(&thread_it);
c010aa46:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010aa49:	89 04 24             	mov    %eax,(%esp)
c010aa4c:	e8 e4 7e ff ff       	call   c0102935 <list_next>
            }
            else
            {
                iterator_t thread_it = iterator_create(proc->parent->threads);
                list_set_first(&thread_it);
                while(!list_is_empty(proc->parent->threads) && !list_is_last(&thread_it))
c010aa51:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa54:	8b 40 14             	mov    0x14(%eax),%eax
c010aa57:	8b 40 28             	mov    0x28(%eax),%eax
c010aa5a:	89 04 24             	mov    %eax,(%esp)
c010aa5d:	e8 a4 7d ff ff       	call   c0102806 <list_is_empty>
c010aa62:	85 c0                	test   %eax,%eax
c010aa64:	75 0f                	jne    c010aa75 <send_killed_process+0x1b6>
c010aa66:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010aa69:	89 04 24             	mov    %eax,(%esp)
c010aa6c:	e8 eb 7e ff ff       	call   c010295c <list_is_last>
c010aa71:	85 c0                	test   %eax,%eax
c010aa73:	74 98                	je     c010aa0d <send_killed_process+0x14e>
                    list_next(&thread_it);
                }
            }
        }

        if((int)current_entry->ID < -1 && current_entry->type == WAIT_PID) // pid < -1
c010aa75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa78:	8b 40 04             	mov    0x4(%eax),%eax
c010aa7b:	83 f8 ff             	cmp    $0xffffffff,%eax
            /*
                Process groups aren't implemented yet.
                Please rewrite this case.
            */
        }
        list_next(&it);
c010aa7e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010aa81:	89 04 24             	mov    %eax,(%esp)
c010aa84:	e8 ac 7e ff ff       	call   c0102935 <list_next>
 **/
void send_killed_process(struct process_state *proc)
{
    iterator_t it = iterator_create(trigger_list);
    list_set_first(&it);
    while(!list_is_empty(trigger_list) && !list_is_last(&it))
c010aa89:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010aa8e:	89 04 24             	mov    %eax,(%esp)
c010aa91:	e8 70 7d ff ff       	call   c0102806 <list_is_empty>
c010aa96:	85 c0                	test   %eax,%eax
c010aa98:	75 13                	jne    c010aaad <send_killed_process+0x1ee>
c010aa9a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010aa9d:	89 04 24             	mov    %eax,(%esp)
c010aaa0:	e8 b7 7e ff ff       	call   c010295c <list_is_last>
c010aaa5:	85 c0                	test   %eax,%eax
c010aaa7:	0f 84 40 fe ff ff    	je     c010a8ed <send_killed_process+0x2e>
            */
        }
        list_next(&it);
    }

}
c010aaad:	c9                   	leave  
c010aaae:	c3                   	ret    

c010aaaf <unix_time>:
 * @param pointer ti time struct
 *
 * @return unix timestamp
 */
time_t unix_time(struct time *time)
{
c010aaaf:	55                   	push   %ebp
c010aab0:	89 e5                	mov    %esp,%ebp
c010aab2:	53                   	push   %ebx
c010aab3:	83 ec 10             	sub    $0x10,%esp
    int year = (time->century*100)+time->year;
c010aab6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aab9:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c010aabd:	0f b6 c0             	movzbl %al,%eax
c010aac0:	6b d0 64             	imul   $0x64,%eax,%edx
c010aac3:	8b 45 08             	mov    0x8(%ebp),%eax
c010aac6:	0f b6 40 09          	movzbl 0x9(%eax),%eax
c010aaca:	0f b6 c0             	movzbl %al,%eax
c010aacd:	01 d0                	add    %edx,%eax
c010aacf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int leap_years = ((year - 1) - 1968) / 4 - ((year - 1) - 1900) / 100 + ((year - 1) - 1600) / 400;
c010aad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aad5:	2d b1 07 00 00       	sub    $0x7b1,%eax
c010aada:	8d 50 03             	lea    0x3(%eax),%edx
c010aadd:	85 c0                	test   %eax,%eax
c010aadf:	0f 48 c2             	cmovs  %edx,%eax
c010aae2:	c1 f8 02             	sar    $0x2,%eax
c010aae5:	89 c3                	mov    %eax,%ebx
c010aae7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aaea:	8d 88 93 f8 ff ff    	lea    -0x76d(%eax),%ecx
c010aaf0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010aaf5:	89 c8                	mov    %ecx,%eax
c010aaf7:	f7 ea                	imul   %edx
c010aaf9:	c1 fa 05             	sar    $0x5,%edx
c010aafc:	89 c8                	mov    %ecx,%eax
c010aafe:	c1 f8 1f             	sar    $0x1f,%eax
c010ab01:	89 d1                	mov    %edx,%ecx
c010ab03:	29 c1                	sub    %eax,%ecx
c010ab05:	89 c8                	mov    %ecx,%eax
c010ab07:	29 c3                	sub    %eax,%ebx
c010ab09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab0c:	8d 88 bf f9 ff ff    	lea    -0x641(%eax),%ecx
c010ab12:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010ab17:	89 c8                	mov    %ecx,%eax
c010ab19:	f7 ea                	imul   %edx
c010ab1b:	c1 fa 07             	sar    $0x7,%edx
c010ab1e:	89 c8                	mov    %ecx,%eax
c010ab20:	c1 f8 1f             	sar    $0x1f,%eax
c010ab23:	89 d1                	mov    %edx,%ecx
c010ab25:	29 c1                	sub    %eax,%ecx
c010ab27:	89 c8                	mov    %ecx,%eax
c010ab29:	01 d8                	add    %ebx,%eax
c010ab2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int unix_time = time->second + (time->minute *60) + (time->hour *60*60) + ((day_to_current_month[time->month - 1] + time->day_in_month - 1) *24*60*60) + (((year-1970)*365+leap_years)*24*60*60);
c010ab2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab31:	0f b6 00             	movzbl (%eax),%eax
c010ab34:	0f b6 d0             	movzbl %al,%edx
c010ab37:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab3a:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010ab3e:	0f b6 c0             	movzbl %al,%eax
c010ab41:	c1 e0 02             	shl    $0x2,%eax
c010ab44:	89 c1                	mov    %eax,%ecx
c010ab46:	c1 e1 04             	shl    $0x4,%ecx
c010ab49:	89 cb                	mov    %ecx,%ebx
c010ab4b:	29 c3                	sub    %eax,%ebx
c010ab4d:	89 d8                	mov    %ebx,%eax
c010ab4f:	01 c2                	add    %eax,%edx
c010ab51:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab54:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010ab58:	0f b6 c0             	movzbl %al,%eax
c010ab5b:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
c010ab61:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c010ab64:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab67:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c010ab6b:	0f b6 c0             	movzbl %al,%eax
c010ab6e:	83 e8 01             	sub    $0x1,%eax
c010ab71:	8b 14 85 e0 1b 11 c0 	mov    -0x3feee420(,%eax,4),%edx
c010ab78:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab7b:	0f b6 40 07          	movzbl 0x7(%eax),%eax
c010ab7f:	0f b6 c0             	movzbl %al,%eax
c010ab82:	01 d0                	add    %edx,%eax
c010ab84:	83 e8 01             	sub    $0x1,%eax
c010ab87:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c010ab8d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010ab90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab93:	69 c0 6d 01 00 00    	imul   $0x16d,%eax,%eax
c010ab99:	8d 88 36 07 f5 ff    	lea    -0xaf8ca(%eax),%ecx
c010ab9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aba2:	01 c8                	add    %ecx,%eax
c010aba4:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c010abaa:	01 d0                	add    %edx,%eax
c010abac:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if((time->month >2) && (year%4==0 && (year%100!=0 || year%400==0)))
c010abaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010abb2:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c010abb6:	3c 02                	cmp    $0x2,%al
c010abb8:	76 62                	jbe    c010ac1c <unix_time+0x16d>
c010abba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abbd:	83 e0 03             	and    $0x3,%eax
c010abc0:	85 c0                	test   %eax,%eax
c010abc2:	75 58                	jne    c010ac1c <unix_time+0x16d>
c010abc4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010abc7:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010abcc:	89 c8                	mov    %ecx,%eax
c010abce:	f7 ea                	imul   %edx
c010abd0:	c1 fa 05             	sar    $0x5,%edx
c010abd3:	89 c8                	mov    %ecx,%eax
c010abd5:	c1 f8 1f             	sar    $0x1f,%eax
c010abd8:	89 d3                	mov    %edx,%ebx
c010abda:	29 c3                	sub    %eax,%ebx
c010abdc:	89 d8                	mov    %ebx,%eax
c010abde:	6b c0 64             	imul   $0x64,%eax,%eax
c010abe1:	89 ca                	mov    %ecx,%edx
c010abe3:	29 c2                	sub    %eax,%edx
c010abe5:	89 d0                	mov    %edx,%eax
c010abe7:	85 c0                	test   %eax,%eax
c010abe9:	75 2a                	jne    c010ac15 <unix_time+0x166>
c010abeb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010abee:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010abf3:	89 c8                	mov    %ecx,%eax
c010abf5:	f7 ea                	imul   %edx
c010abf7:	c1 fa 07             	sar    $0x7,%edx
c010abfa:	89 c8                	mov    %ecx,%eax
c010abfc:	c1 f8 1f             	sar    $0x1f,%eax
c010abff:	89 d3                	mov    %edx,%ebx
c010ac01:	29 c3                	sub    %eax,%ebx
c010ac03:	89 d8                	mov    %ebx,%eax
c010ac05:	69 c0 90 01 00 00    	imul   $0x190,%eax,%eax
c010ac0b:	89 ca                	mov    %ecx,%edx
c010ac0d:	29 c2                	sub    %eax,%edx
c010ac0f:	89 d0                	mov    %edx,%eax
c010ac11:	85 c0                	test   %eax,%eax
c010ac13:	75 07                	jne    c010ac1c <unix_time+0x16d>
        unix_time += 24*60*60;
c010ac15:	81 45 f8 80 51 01 00 	addl   $0x15180,-0x8(%ebp)
    return unix_time;
c010ac1c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010ac1f:	83 c4 10             	add    $0x10,%esp
c010ac22:	5b                   	pop    %ebx
c010ac23:	5d                   	pop    %ebp
c010ac24:	c3                   	ret    

c010ac25 <print_time>:

/**
 * Print datetime
 */
void print_time(struct time *time)
{
c010ac25:	55                   	push   %ebp
c010ac26:	89 e5                	mov    %esp,%ebp
c010ac28:	53                   	push   %ebx
c010ac29:	83 ec 34             	sub    $0x34,%esp
    char *day_string;
    switch (time->week_day)
c010ac2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac2f:	0f b6 40 06          	movzbl 0x6(%eax),%eax
c010ac33:	0f b6 c0             	movzbl %al,%eax
c010ac36:	83 f8 06             	cmp    $0x6,%eax
c010ac39:	77 47                	ja     c010ac82 <print_time+0x5d>
c010ac3b:	8b 04 85 8c 1c 11 c0 	mov    -0x3feee374(,%eax,4),%eax
c010ac42:	ff e0                	jmp    *%eax
    {
        case 0:
            day_string = "Sonntag";
c010ac44:	c7 45 f4 10 1c 11 c0 	movl   $0xc0111c10,-0xc(%ebp)
            break;
c010ac4b:	eb 35                	jmp    c010ac82 <print_time+0x5d>
        case 1:
            day_string = "Montag";
c010ac4d:	c7 45 f4 18 1c 11 c0 	movl   $0xc0111c18,-0xc(%ebp)
            break;
c010ac54:	eb 2c                	jmp    c010ac82 <print_time+0x5d>
        case 2:
            day_string = "Dienstag";
c010ac56:	c7 45 f4 1f 1c 11 c0 	movl   $0xc0111c1f,-0xc(%ebp)
            break;
c010ac5d:	eb 23                	jmp    c010ac82 <print_time+0x5d>
        case 3:
            day_string = "Mittwoch";
c010ac5f:	c7 45 f4 28 1c 11 c0 	movl   $0xc0111c28,-0xc(%ebp)
            break;
c010ac66:	eb 1a                	jmp    c010ac82 <print_time+0x5d>
        case 4:
            day_string = "Donnerstag";
c010ac68:	c7 45 f4 31 1c 11 c0 	movl   $0xc0111c31,-0xc(%ebp)
            break;
c010ac6f:	eb 11                	jmp    c010ac82 <print_time+0x5d>
        case 5:
            day_string = "Freitag";
c010ac71:	c7 45 f4 3c 1c 11 c0 	movl   $0xc0111c3c,-0xc(%ebp)
            break;
c010ac78:	eb 08                	jmp    c010ac82 <print_time+0x5d>
        case 6:
            day_string = "Samstag";
c010ac7a:	c7 45 f4 44 1c 11 c0 	movl   $0xc0111c44,-0xc(%ebp)
            break;
c010ac81:	90                   	nop
    }

    printf("System Date: %02d/%02d/%02d (%s)\n", time->day_in_month, time->month, time->year, day_string);
c010ac82:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac85:	0f b6 40 09          	movzbl 0x9(%eax),%eax
c010ac89:	0f b6 c8             	movzbl %al,%ecx
c010ac8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac8f:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c010ac93:	0f b6 d0             	movzbl %al,%edx
c010ac96:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac99:	0f b6 40 07          	movzbl 0x7(%eax),%eax
c010ac9d:	0f b6 c0             	movzbl %al,%eax
c010aca0:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010aca3:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c010aca7:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010acab:	89 54 24 08          	mov    %edx,0x8(%esp)
c010acaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010acb3:	c7 04 24 4c 1c 11 c0 	movl   $0xc0111c4c,(%esp)
c010acba:	e8 be 84 ff ff       	call   c010317d <printf>
    printf("System Time: %02d:%02d:%02d\n", time->hour, time->minute, time->second);
c010acbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010acc2:	0f b6 00             	movzbl (%eax),%eax
c010acc5:	0f b6 c8             	movzbl %al,%ecx
c010acc8:	8b 45 08             	mov    0x8(%ebp),%eax
c010accb:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010accf:	0f b6 d0             	movzbl %al,%edx
c010acd2:	8b 45 08             	mov    0x8(%ebp),%eax
c010acd5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010acd9:	0f b6 c0             	movzbl %al,%eax
c010acdc:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010ace0:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ace4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ace8:	c7 04 24 6e 1c 11 c0 	movl   $0xc0111c6e,(%esp)
c010acef:	e8 89 84 ff ff       	call   c010317d <printf>
}
c010acf4:	83 c4 34             	add    $0x34,%esp
c010acf7:	5b                   	pop    %ebx
c010acf8:	5d                   	pop    %ebp
c010acf9:	c3                   	ret    

c010acfa <sys_time>:
/**
 * @brief unix sys_time syscall. Returns the current unix-timestamp to the user
 * @param current user cpu state
 */
void sys_time(struct cpu_state **cpu)
{
c010acfa:	55                   	push   %ebp
c010acfb:	89 e5                	mov    %esp,%ebp
c010acfd:	83 ec 28             	sub    $0x28,%esp
    struct time current_time;
    update_time(&current_time);
c010ad00:	8d 45 e9             	lea    -0x17(%ebp),%eax
c010ad03:	89 04 24             	mov    %eax,(%esp)
c010ad06:	e8 c7 18 00 00       	call   c010c5d2 <update_time>
    int stamp = unix_time(&current_time);
c010ad0b:	8d 45 e9             	lea    -0x17(%ebp),%eax
c010ad0e:	89 04 24             	mov    %eax,(%esp)
c010ad11:	e8 99 fd ff ff       	call   c010aaaf <unix_time>
c010ad16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    (*cpu)->CPU_ARG0 = stamp;
c010ad19:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad1c:	8b 00                	mov    (%eax),%eax
c010ad1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ad21:	89 50 28             	mov    %edx,0x28(%eax)
    if((*cpu)->CPU_ARG1)
c010ad24:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad27:	8b 00                	mov    (%eax),%eax
c010ad29:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ad2c:	85 c0                	test   %eax,%eax
c010ad2e:	74 0d                	je     c010ad3d <sys_time+0x43>
        *((int*)(*cpu)->CPU_ARG1) = stamp;
c010ad30:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad33:	8b 00                	mov    (%eax),%eax
c010ad35:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ad38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ad3b:	89 10                	mov    %edx,(%eax)
c010ad3d:	c9                   	leave  
c010ad3e:	c3                   	ret    

c010ad3f <inl>:
    asm volatile("inw %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline uint32_t inl(uint16_t port)
{
c010ad3f:	55                   	push   %ebp
c010ad40:	89 e5                	mov    %esp,%ebp
c010ad42:	53                   	push   %ebx
c010ad43:	83 ec 14             	sub    $0x14,%esp
c010ad46:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad49:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    uint32_t result;
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
c010ad4d:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010ad51:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010ad55:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010ad59:	ed                   	in     (%dx),%eax
c010ad5a:	89 c3                	mov    %eax,%ebx
c010ad5c:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    return result;
c010ad5f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010ad62:	83 c4 14             	add    $0x14,%esp
c010ad65:	5b                   	pop    %ebx
c010ad66:	5d                   	pop    %ebp
c010ad67:	c3                   	ret    

c010ad68 <outb>:

static inline void outb(uint16_t port, uint8_t value)
{
c010ad68:	55                   	push   %ebp
c010ad69:	89 e5                	mov    %esp,%ebp
c010ad6b:	83 ec 08             	sub    $0x8,%esp
c010ad6e:	8b 55 08             	mov    0x8(%ebp),%edx
c010ad71:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad74:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ad78:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010ad7b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ad7f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ad83:	ee                   	out    %al,(%dx)
}
c010ad84:	c9                   	leave  
c010ad85:	c3                   	ret    

c010ad86 <outw>:

static inline void outw(uint16_t port, uint16_t value)
{
c010ad86:	55                   	push   %ebp
c010ad87:	89 e5                	mov    %esp,%ebp
c010ad89:	83 ec 08             	sub    $0x8,%esp
c010ad8c:	8b 55 08             	mov    0x8(%ebp),%edx
c010ad8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad92:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ad96:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    asm volatile("outw %1, %0" : : "Nd" (port), "a" (value));
c010ad9a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ad9e:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c010ada2:	66 ef                	out    %ax,(%dx)
}
c010ada4:	c9                   	leave  
c010ada5:	c3                   	ret    

c010ada6 <outl>:

static inline void outl(uint16_t port, uint32_t value)
{
c010ada6:	55                   	push   %ebp
c010ada7:	89 e5                	mov    %esp,%ebp
c010ada9:	83 ec 04             	sub    $0x4,%esp
c010adac:	8b 45 08             	mov    0x8(%ebp),%eax
c010adaf:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    asm volatile("outl %1, %0" : : "Nd" (port), "a" (value));
c010adb3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010adb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010adba:	ef                   	out    %eax,(%dx)
}
c010adbb:	c9                   	leave  
c010adbc:	c3                   	ret    

c010adbd <pci_read>:
#include <mm/heap.h>
#include <printf.h>
#include <idt.h>

uint32_t pci_read(uint8_t bus,uint8_t dev,uint8_t func,uint8_t offset)
{
c010adbd:	55                   	push   %ebp
c010adbe:	89 e5                	mov    %esp,%ebp
c010adc0:	53                   	push   %ebx
c010adc1:	83 ec 18             	sub    $0x18,%esp
c010adc4:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010adc7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010adca:	8b 55 10             	mov    0x10(%ebp),%edx
c010adcd:	8b 45 14             	mov    0x14(%ebp),%eax
c010add0:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010add3:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010add6:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010add9:	88 45 ec             	mov    %al,-0x14(%ebp)
    outl(PCI_CONFIG_ADDRESS,0x80000000 | (bus << 16) | (dev << 11) |( func << 8) | (offset & 0xFC));
c010addc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ade0:	c1 e0 10             	shl    $0x10,%eax
c010ade3:	89 c2                	mov    %eax,%edx
c010ade5:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010ade9:	c1 e0 0b             	shl    $0xb,%eax
c010adec:	09 c2                	or     %eax,%edx
c010adee:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c010adf2:	c1 e0 08             	shl    $0x8,%eax
c010adf5:	09 c2                	or     %eax,%edx
c010adf7:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010adfb:	25 fc 00 00 00       	and    $0xfc,%eax
c010ae00:	09 d0                	or     %edx,%eax
c010ae02:	0d 00 00 00 80       	or     $0x80000000,%eax
c010ae07:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae0b:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c010ae12:	e8 8f ff ff ff       	call   c010ada6 <outl>
    return inl(PCI_CONFIG_DATA) >> (8 * (offset % 4));
c010ae17:	c7 04 24 fc 0c 00 00 	movl   $0xcfc,(%esp)
c010ae1e:	e8 1c ff ff ff       	call   c010ad3f <inl>
c010ae23:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
c010ae27:	83 e2 03             	and    $0x3,%edx
c010ae2a:	c1 e2 03             	shl    $0x3,%edx
c010ae2d:	89 d1                	mov    %edx,%ecx
c010ae2f:	d3 e8                	shr    %cl,%eax
}
c010ae31:	83 c4 18             	add    $0x18,%esp
c010ae34:	5b                   	pop    %ebx
c010ae35:	5d                   	pop    %ebp
c010ae36:	c3                   	ret    

c010ae37 <pci_readb>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
uint8_t pci_readb(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c010ae37:	55                   	push   %ebp
c010ae38:	89 e5                	mov    %esp,%ebp
c010ae3a:	53                   	push   %ebx
c010ae3b:	83 ec 20             	sub    $0x20,%esp
c010ae3e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010ae41:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ae44:	8b 55 10             	mov    0x10(%ebp),%edx
c010ae47:	8b 45 14             	mov    0x14(%ebp),%eax
c010ae4a:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010ae4d:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010ae50:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010ae53:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset) & 0xff;
c010ae56:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c010ae5a:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c010ae5e:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c010ae62:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ae66:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010ae6a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010ae6e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ae72:	89 04 24             	mov    %eax,(%esp)
c010ae75:	e8 43 ff ff ff       	call   c010adbd <pci_read>
}
c010ae7a:	83 c4 20             	add    $0x20,%esp
c010ae7d:	5b                   	pop    %ebx
c010ae7e:	5d                   	pop    %ebp
c010ae7f:	c3                   	ret    

c010ae80 <pci_readw>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
inline uint16_t pci_readw(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c010ae80:	55                   	push   %ebp
c010ae81:	89 e5                	mov    %esp,%ebp
c010ae83:	53                   	push   %ebx
c010ae84:	83 ec 20             	sub    $0x20,%esp
c010ae87:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010ae8a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ae8d:	8b 55 10             	mov    0x10(%ebp),%edx
c010ae90:	8b 45 14             	mov    0x14(%ebp),%eax
c010ae93:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010ae96:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010ae99:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010ae9c:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset) & 0xffff;
c010ae9f:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c010aea3:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c010aea7:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c010aeab:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010aeaf:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010aeb3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010aeb7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010aebb:	89 04 24             	mov    %eax,(%esp)
c010aebe:	e8 fa fe ff ff       	call   c010adbd <pci_read>
}
c010aec3:	83 c4 20             	add    $0x20,%esp
c010aec6:	5b                   	pop    %ebx
c010aec7:	5d                   	pop    %ebp
c010aec8:	c3                   	ret    

c010aec9 <pci_readl>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
inline uint32_t pci_readl(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c010aec9:	55                   	push   %ebp
c010aeca:	89 e5                	mov    %esp,%ebp
c010aecc:	53                   	push   %ebx
c010aecd:	83 ec 20             	sub    $0x20,%esp
c010aed0:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010aed3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010aed6:	8b 55 10             	mov    0x10(%ebp),%edx
c010aed9:	8b 45 14             	mov    0x14(%ebp),%eax
c010aedc:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010aedf:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010aee2:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010aee5:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset);
c010aee8:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c010aeec:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c010aef0:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c010aef4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010aef8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010aefc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010af00:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af04:	89 04 24             	mov    %eax,(%esp)
c010af07:	e8 b1 fe ff ff       	call   c010adbd <pci_read>
}
c010af0c:	83 c4 20             	add    $0x20,%esp
c010af0f:	5b                   	pop    %ebx
c010af10:	5d                   	pop    %ebp
c010af11:	c3                   	ret    

c010af12 <pci_writeb>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writeb(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint8_t value)
{
c010af12:	55                   	push   %ebp
c010af13:	89 e5                	mov    %esp,%ebp
c010af15:	56                   	push   %esi
c010af16:	53                   	push   %ebx
c010af17:	83 ec 20             	sub    $0x20,%esp
c010af1a:	8b 75 08             	mov    0x8(%ebp),%esi
c010af1d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010af20:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010af23:	8b 55 14             	mov    0x14(%ebp),%edx
c010af26:	8b 45 18             	mov    0x18(%ebp),%eax
c010af29:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010af2c:	89 f0                	mov    %esi,%eax
c010af2e:	88 45 f4             	mov    %al,-0xc(%ebp)
c010af31:	88 5d f0             	mov    %bl,-0x10(%ebp)
c010af34:	88 4d ec             	mov    %cl,-0x14(%ebp)
c010af37:	88 55 e8             	mov    %dl,-0x18(%ebp)
c010af3a:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010af3e:	88 45 e4             	mov    %al,-0x1c(%ebp)
    outl(PCI_CONFIG_ADDRESS,0x80000000 | (bus << 16) | (dev << 11 ) | (func << 8) | (offset & 0xFC));
c010af41:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010af45:	c1 e0 10             	shl    $0x10,%eax
c010af48:	89 c2                	mov    %eax,%edx
c010af4a:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c010af4e:	c1 e0 0b             	shl    $0xb,%eax
c010af51:	09 c2                	or     %eax,%edx
c010af53:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010af57:	c1 e0 08             	shl    $0x8,%eax
c010af5a:	09 c2                	or     %eax,%edx
c010af5c:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010af60:	25 fc 00 00 00       	and    $0xfc,%eax
c010af65:	09 d0                	or     %edx,%eax
c010af67:	0d 00 00 00 80       	or     $0x80000000,%eax
c010af6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af70:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c010af77:	e8 2a fe ff ff       	call   c010ada6 <outl>
    outb(PCI_CONFIG_DATA + (offset & 3), value);
c010af7c:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010af80:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010af84:	83 e0 03             	and    $0x3,%eax
c010af87:	66 05 fc 0c          	add    $0xcfc,%ax
c010af8b:	0f b7 c0             	movzwl %ax,%eax
c010af8e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af92:	89 04 24             	mov    %eax,(%esp)
c010af95:	e8 ce fd ff ff       	call   c010ad68 <outb>
}
c010af9a:	83 c4 20             	add    $0x20,%esp
c010af9d:	5b                   	pop    %ebx
c010af9e:	5e                   	pop    %esi
c010af9f:	5d                   	pop    %ebp
c010afa0:	c3                   	ret    

c010afa1 <pci_writew>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writew(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint16_t value)
{
c010afa1:	55                   	push   %ebp
c010afa2:	89 e5                	mov    %esp,%ebp
c010afa4:	56                   	push   %esi
c010afa5:	53                   	push   %ebx
c010afa6:	83 ec 20             	sub    $0x20,%esp
c010afa9:	8b 75 08             	mov    0x8(%ebp),%esi
c010afac:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010afaf:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010afb2:	8b 55 14             	mov    0x14(%ebp),%edx
c010afb5:	8b 45 18             	mov    0x18(%ebp),%eax
c010afb8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010afbb:	89 f0                	mov    %esi,%eax
c010afbd:	88 45 f4             	mov    %al,-0xc(%ebp)
c010afc0:	88 5d f0             	mov    %bl,-0x10(%ebp)
c010afc3:	88 4d ec             	mov    %cl,-0x14(%ebp)
c010afc6:	88 55 e8             	mov    %dl,-0x18(%ebp)
c010afc9:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c010afcd:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    outl(PCI_CONFIG_ADDRESS, 0x80000000 | (bus << 16) | (dev << 11) | (func << 8) | (offset & 0xFC));
c010afd1:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010afd5:	c1 e0 10             	shl    $0x10,%eax
c010afd8:	89 c2                	mov    %eax,%edx
c010afda:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c010afde:	c1 e0 0b             	shl    $0xb,%eax
c010afe1:	09 c2                	or     %eax,%edx
c010afe3:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010afe7:	c1 e0 08             	shl    $0x8,%eax
c010afea:	09 c2                	or     %eax,%edx
c010afec:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010aff0:	25 fc 00 00 00       	and    $0xfc,%eax
c010aff5:	09 d0                	or     %edx,%eax
c010aff7:	0d 00 00 00 80       	or     $0x80000000,%eax
c010affc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b000:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c010b007:	e8 9a fd ff ff       	call   c010ada6 <outl>
    outw(PCI_CONFIG_DATA + (offset & 2), value);
c010b00c:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010b010:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010b014:	83 e0 02             	and    $0x2,%eax
c010b017:	66 05 fc 0c          	add    $0xcfc,%ax
c010b01b:	0f b7 c0             	movzwl %ax,%eax
c010b01e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b022:	89 04 24             	mov    %eax,(%esp)
c010b025:	e8 5c fd ff ff       	call   c010ad86 <outw>
}
c010b02a:	83 c4 20             	add    $0x20,%esp
c010b02d:	5b                   	pop    %ebx
c010b02e:	5e                   	pop    %esi
c010b02f:	5d                   	pop    %ebp
c010b030:	c3                   	ret    

c010b031 <pci_writel>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writel(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint32_t value)
{
c010b031:	55                   	push   %ebp
c010b032:	89 e5                	mov    %esp,%ebp
c010b034:	53                   	push   %ebx
c010b035:	83 ec 18             	sub    $0x18,%esp
c010b038:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010b03b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010b03e:	8b 55 10             	mov    0x10(%ebp),%edx
c010b041:	8b 45 14             	mov    0x14(%ebp),%eax
c010b044:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010b047:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010b04a:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010b04d:	88 45 ec             	mov    %al,-0x14(%ebp)
    outl(PCI_CONFIG_ADDRESS, 0x80000000 | (bus << 16) | (dev << 11) | (func << 8) | (offset & 0xFC));
c010b050:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010b054:	c1 e0 10             	shl    $0x10,%eax
c010b057:	89 c2                	mov    %eax,%edx
c010b059:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010b05d:	c1 e0 0b             	shl    $0xb,%eax
c010b060:	09 c2                	or     %eax,%edx
c010b062:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c010b066:	c1 e0 08             	shl    $0x8,%eax
c010b069:	09 c2                	or     %eax,%edx
c010b06b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010b06f:	25 fc 00 00 00       	and    $0xfc,%eax
c010b074:	09 d0                	or     %edx,%eax
c010b076:	0d 00 00 00 80       	or     $0x80000000,%eax
c010b07b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b07f:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c010b086:	e8 1b fd ff ff       	call   c010ada6 <outl>
    outl(PCI_CONFIG_DATA, value);
c010b08b:	8b 45 18             	mov    0x18(%ebp),%eax
c010b08e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b092:	c7 04 24 fc 0c 00 00 	movl   $0xcfc,(%esp)
c010b099:	e8 08 fd ff ff       	call   c010ada6 <outl>
}
c010b09e:	83 c4 18             	add    $0x18,%esp
c010b0a1:	5b                   	pop    %ebx
c010b0a2:	5d                   	pop    %ebp
c010b0a3:	c3                   	ret    

c010b0a4 <pci_dev_exist>:
 *  @param Bus
 *  @param Device/Slot
 *  @return true (device exists) or false (device does not exist)
 */
bool pci_dev_exist(uint8_t bus, uint8_t dev, uint8_t func)
{
c010b0a4:	55                   	push   %ebp
c010b0a5:	89 e5                	mov    %esp,%ebp
c010b0a7:	83 ec 2c             	sub    $0x2c,%esp
c010b0aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b0ad:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b0b0:	8b 45 10             	mov    0x10(%ebp),%eax
c010b0b3:	88 4d ec             	mov    %cl,-0x14(%ebp)
c010b0b6:	88 55 e8             	mov    %dl,-0x18(%ebp)
c010b0b9:	88 45 e4             	mov    %al,-0x1c(%ebp)
    uint16_t vendor_ID = pci_readw(bus, dev, func, 0);
c010b0bc:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c010b0c0:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c010b0c4:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010b0c8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b0cf:	00 
c010b0d0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b0d4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b0d8:	89 04 24             	mov    %eax,(%esp)
c010b0db:	e8 a0 fd ff ff       	call   c010ae80 <pci_readw>
c010b0e0:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    if(vendor_ID == 0 || vendor_ID == 0xFFFF)
c010b0e4:	66 83 7d fe 00       	cmpw   $0x0,-0x2(%ebp)
c010b0e9:	74 07                	je     c010b0f2 <pci_dev_exist+0x4e>
c010b0eb:	66 83 7d fe ff       	cmpw   $0xffff,-0x2(%ebp)
c010b0f0:	75 07                	jne    c010b0f9 <pci_dev_exist+0x55>
        return false;
c010b0f2:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0f7:	eb 05                	jmp    c010b0fe <pci_dev_exist+0x5a>
    return true;
c010b0f9:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010b0fe:	c9                   	leave  
c010b0ff:	c3                   	ret    

c010b100 <pci_search_device>:
 * @param device devicde- ID of the device
 * @param num of the device in a device list
 * @return NULL if there is no more device of the specified type or the adress auf the PCI device struct
 */
struct pci_dev *pci_search_device(list_t *device_list, uint16_t vendor, uint16_t device, int num)
{
c010b100:	55                   	push   %ebp
c010b101:	89 e5                	mov    %esp,%ebp
c010b103:	83 ec 38             	sub    $0x38,%esp
c010b106:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b109:	8b 45 10             	mov    0x10(%ebp),%eax
c010b10c:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c010b110:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
    list_lock(device_list);
c010b114:	8b 45 08             	mov    0x8(%ebp),%eax
c010b117:	89 04 24             	mov    %eax,(%esp)
c010b11a:	e8 02 77 ff ff       	call   c0102821 <list_lock>
    iterator_t device_it = iterator_create(device_list);
c010b11f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b122:	8b 55 08             	mov    0x8(%ebp),%edx
c010b125:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b129:	89 04 24             	mov    %eax,(%esp)
c010b12c:	e8 16 77 ff ff       	call   c0102847 <iterator_create>
c010b131:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(device_list) && !list_is_last(&device_it))
c010b134:	eb 67                	jmp    c010b19d <pci_search_device+0x9d>
    {
        struct pci_dev *current_dev = list_get_current(&device_it);
c010b136:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b139:	89 04 24             	mov    %eax,(%esp)
c010b13c:	e8 cf 77 ff ff       	call   c0102910 <list_get_current>
c010b141:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(num == 0 && current_dev->device_ID == device && current_dev->vendor_ID == vendor)
c010b144:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b148:	75 2a                	jne    c010b174 <pci_search_device+0x74>
c010b14a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b14d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c010b151:	66 3b 45 e0          	cmp    -0x20(%ebp),%ax
c010b155:	75 1d                	jne    c010b174 <pci_search_device+0x74>
c010b157:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b15a:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
c010b15e:	66 3b 45 e4          	cmp    -0x1c(%ebp),%ax
c010b162:	75 10                	jne    c010b174 <pci_search_device+0x74>
        {
            list_unlock(device_list);
c010b164:	8b 45 08             	mov    0x8(%ebp),%eax
c010b167:	89 04 24             	mov    %eax,(%esp)
c010b16a:	e8 c5 76 ff ff       	call   c0102834 <list_unlock>
            return current_dev;
c010b16f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b172:	eb 5b                	jmp    c010b1cf <pci_search_device+0xcf>
        }
        else if(current_dev->device_ID == device && current_dev->vendor_ID == vendor)
c010b174:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b177:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c010b17b:	66 3b 45 e0          	cmp    -0x20(%ebp),%ax
c010b17f:	75 11                	jne    c010b192 <pci_search_device+0x92>
c010b181:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b184:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
c010b188:	66 3b 45 e4          	cmp    -0x1c(%ebp),%ax
c010b18c:	75 04                	jne    c010b192 <pci_search_device+0x92>
        {
            num--;
c010b18e:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
        }
        list_next(&device_it);
c010b192:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b195:	89 04 24             	mov    %eax,(%esp)
c010b198:	e8 98 77 ff ff       	call   c0102935 <list_next>
 */
struct pci_dev *pci_search_device(list_t *device_list, uint16_t vendor, uint16_t device, int num)
{
    list_lock(device_list);
    iterator_t device_it = iterator_create(device_list);
    while(!list_is_empty(device_list) && !list_is_last(&device_it))
c010b19d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a0:	89 04 24             	mov    %eax,(%esp)
c010b1a3:	e8 5e 76 ff ff       	call   c0102806 <list_is_empty>
c010b1a8:	85 c0                	test   %eax,%eax
c010b1aa:	75 13                	jne    c010b1bf <pci_search_device+0xbf>
c010b1ac:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b1af:	89 04 24             	mov    %eax,(%esp)
c010b1b2:	e8 a5 77 ff ff       	call   c010295c <list_is_last>
c010b1b7:	85 c0                	test   %eax,%eax
c010b1b9:	0f 84 77 ff ff ff    	je     c010b136 <pci_search_device+0x36>
        {
            num--;
        }
        list_next(&device_it);
    }
    list_unlock(device_list);
c010b1bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1c2:	89 04 24             	mov    %eax,(%esp)
c010b1c5:	e8 6a 76 ff ff       	call   c0102834 <list_unlock>
    return NULL;
c010b1ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b1cf:	c9                   	leave  
c010b1d0:	c3                   	ret    

c010b1d1 <pci_install_isr>:
 * installs a isr handler for a specific pci device
 * @param isr interrupt service routine
 * @param dev pci device
 */
void pci_install_isr(void (*isr)(struct pci_dev *dev), struct pci_dev *dev)
{
c010b1d1:	55                   	push   %ebp
c010b1d2:	89 e5                	mov    %esp,%ebp
c010b1d4:	83 ec 28             	sub    $0x28,%esp
    while(pci_irq_handles->lock) {}
c010b1d7:	90                   	nop
c010b1d8:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b1dd:	8b 00                	mov    (%eax),%eax
c010b1df:	85 c0                	test   %eax,%eax
c010b1e1:	75 f5                	jne    c010b1d8 <pci_install_isr+0x7>
    list_lock(pci_irq_handles);
c010b1e3:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b1e8:	89 04 24             	mov    %eax,(%esp)
c010b1eb:	e8 31 76 ff ff       	call   c0102821 <list_lock>
    struct pci_isr *new_pci_isr = malloc(sizeof(struct pci_isr));
c010b1f0:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010b1f7:	e8 aa 24 00 00       	call   c010d6a6 <malloc>
c010b1fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    new_pci_isr->isr = isr;
c010b1ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b202:	8b 55 08             	mov    0x8(%ebp),%edx
c010b205:	89 10                	mov    %edx,(%eax)
    new_pci_isr->dev = dev;
c010b207:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b20a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b20d:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_front(pci_irq_handles,new_pci_isr);
c010b210:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b215:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b218:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b21c:	89 04 24             	mov    %eax,(%esp)
c010b21f:	e8 91 74 ff ff       	call   c01026b5 <list_push_front>
    list_unlock(pci_irq_handles);
c010b224:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b229:	89 04 24             	mov    %eax,(%esp)
c010b22c:	e8 03 76 ff ff       	call   c0102834 <list_unlock>
}
c010b231:	c9                   	leave  
c010b232:	c3                   	ret    

c010b233 <pci_deinstall_isr>:
 * deinstalls a isr handler for a specific pci device
 * @param isr interrupt service routine
 * @param dev pci device
 */
int pci_deinstall_isr(void (*isr)(struct pci_dev *dev), struct pci_dev *dev)
{
c010b233:	55                   	push   %ebp
c010b234:	89 e5                	mov    %esp,%ebp
c010b236:	83 ec 28             	sub    $0x28,%esp
    while(pci_irq_handles->lock) {}
c010b239:	90                   	nop
c010b23a:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b23f:	8b 00                	mov    (%eax),%eax
c010b241:	85 c0                	test   %eax,%eax
c010b243:	75 f5                	jne    c010b23a <pci_deinstall_isr+0x7>
    list_lock(pci_irq_handles);
c010b245:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b24a:	89 04 24             	mov    %eax,(%esp)
c010b24d:	e8 cf 75 ff ff       	call   c0102821 <list_lock>
    iterator_t handle_it = iterator_create(pci_irq_handles);
c010b252:	8b 15 2c a0 11 c0    	mov    0xc011a02c,%edx
c010b258:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b25b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b25f:	89 04 24             	mov    %eax,(%esp)
c010b262:	e8 e0 75 ff ff       	call   c0102847 <iterator_create>
c010b267:	83 ec 04             	sub    $0x4,%esp
    int num = 0;
c010b26a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(!list_is_last(&handle_it))
c010b271:	eb 4a                	jmp    c010b2bd <pci_deinstall_isr+0x8a>
    {
        struct pci_isr *current_isr = list_get_current(&handle_it);
c010b273:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b276:	89 04 24             	mov    %eax,(%esp)
c010b279:	e8 92 76 ff ff       	call   c0102910 <list_get_current>
c010b27e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(current_isr->isr == isr && current_isr->dev == dev)
c010b281:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b284:	8b 00                	mov    (%eax),%eax
c010b286:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b289:	75 27                	jne    c010b2b2 <pci_deinstall_isr+0x7f>
c010b28b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b28e:	8b 40 04             	mov    0x4(%eax),%eax
c010b291:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b294:	75 1c                	jne    c010b2b2 <pci_deinstall_isr+0x7f>
        {
            list_remove(&handle_it);
c010b296:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b299:	89 04 24             	mov    %eax,(%esp)
c010b29c:	e8 01 77 ff ff       	call   c01029a2 <list_remove>
            list_set_first(&handle_it);
c010b2a1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b2a4:	89 04 24             	mov    %eax,(%esp)
c010b2a7:	e8 cb 76 ff ff       	call   c0102977 <list_set_first>
            num++;
c010b2ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b2b0:	eb 0b                	jmp    c010b2bd <pci_deinstall_isr+0x8a>
        }
        else
            list_next(&handle_it);
c010b2b2:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b2b5:	89 04 24             	mov    %eax,(%esp)
c010b2b8:	e8 78 76 ff ff       	call   c0102935 <list_next>
{
    while(pci_irq_handles->lock) {}
    list_lock(pci_irq_handles);
    iterator_t handle_it = iterator_create(pci_irq_handles);
    int num = 0;
    while(!list_is_last(&handle_it))
c010b2bd:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b2c0:	89 04 24             	mov    %eax,(%esp)
c010b2c3:	e8 94 76 ff ff       	call   c010295c <list_is_last>
c010b2c8:	85 c0                	test   %eax,%eax
c010b2ca:	74 a7                	je     c010b273 <pci_deinstall_isr+0x40>
            num++;
        }
        else
            list_next(&handle_it);
    }
    list_unlock(pci_irq_handles);
c010b2cc:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b2d1:	89 04 24             	mov    %eax,(%esp)
c010b2d4:	e8 5b 75 ff ff       	call   c0102834 <list_unlock>
    return num;
c010b2d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b2dc:	c9                   	leave  
c010b2dd:	c3                   	ret    

c010b2de <pci_irq_handler>:

/**
 * handels pci irqs
 */
void pci_irq_handler(void)
{
c010b2de:	55                   	push   %ebp
c010b2df:	89 e5                	mov    %esp,%ebp
c010b2e1:	53                   	push   %ebx
c010b2e2:	83 ec 44             	sub    $0x44,%esp
    struct list_node *backup = pci_dev_list->head;
c010b2e5:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b2ea:	8b 40 04             	mov    0x4(%eax),%eax
c010b2ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    iterator_t pci_dev_it = iterator_create(pci_dev_list);
c010b2f0:	8b 15 30 a0 11 c0    	mov    0xc011a030,%edx
c010b2f6:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b2f9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b2fd:	89 04 24             	mov    %eax,(%esp)
c010b300:	e8 42 75 ff ff       	call   c0102847 <iterator_create>
c010b305:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&pci_dev_it))
c010b308:	e9 fe 00 00 00       	jmp    c010b40b <pci_irq_handler+0x12d>
    {
        struct pci_dev * current_dev = list_get_current(&pci_dev_it);
c010b30d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b310:	89 04 24             	mov    %eax,(%esp)
c010b313:	e8 f8 75 ff ff       	call   c0102910 <list_get_current>
c010b318:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint16_t status = pci_readw(current_dev->bus, current_dev->dev, current_dev->func, PCI_STATUS);
c010b31b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b31e:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010b322:	0f b6 c8             	movzbl %al,%ecx
c010b325:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b328:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010b32c:	0f b6 d0             	movzbl %al,%edx
c010b32f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b332:	0f b6 00             	movzbl (%eax),%eax
c010b335:	0f b6 c0             	movzbl %al,%eax
c010b338:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010b33f:	00 
c010b340:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b344:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b348:	89 04 24             	mov    %eax,(%esp)
c010b34b:	e8 30 fb ff ff       	call   c010ae80 <pci_readw>
c010b350:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
        if(status & PCI_STATUS_INT)
c010b354:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010b358:	83 e0 08             	and    $0x8,%eax
c010b35b:	85 c0                	test   %eax,%eax
c010b35d:	0f 84 9d 00 00 00    	je     c010b400 <pci_irq_handler+0x122>
        {
            iterator_t pci_irq_it = iterator_create(pci_irq_handles);
c010b363:	8b 15 2c a0 11 c0    	mov    0xc011a02c,%edx
c010b369:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b36c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b370:	89 04 24             	mov    %eax,(%esp)
c010b373:	e8 cf 74 ff ff       	call   c0102847 <iterator_create>
c010b378:	83 ec 04             	sub    $0x4,%esp
            while(!list_is_last(&pci_irq_it))
c010b37b:	eb 31                	jmp    c010b3ae <pci_irq_handler+0xd0>
            {
                struct pci_isr *current_isr = list_get_current(&pci_irq_it);
c010b37d:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b380:	89 04 24             	mov    %eax,(%esp)
c010b383:	e8 88 75 ff ff       	call   c0102910 <list_get_current>
c010b388:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if(current_isr->dev == current_dev)
c010b38b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b38e:	8b 40 04             	mov    0x4(%eax),%eax
c010b391:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010b394:	75 0d                	jne    c010b3a3 <pci_irq_handler+0xc5>
                    current_isr->isr(current_dev);
c010b396:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b399:	8b 00                	mov    (%eax),%eax
c010b39b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b39e:	89 14 24             	mov    %edx,(%esp)
c010b3a1:	ff d0                	call   *%eax
                list_next(&pci_irq_it);
c010b3a3:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b3a6:	89 04 24             	mov    %eax,(%esp)
c010b3a9:	e8 87 75 ff ff       	call   c0102935 <list_next>
        struct pci_dev * current_dev = list_get_current(&pci_dev_it);
        uint16_t status = pci_readw(current_dev->bus, current_dev->dev, current_dev->func, PCI_STATUS);
        if(status & PCI_STATUS_INT)
        {
            iterator_t pci_irq_it = iterator_create(pci_irq_handles);
            while(!list_is_last(&pci_irq_it))
c010b3ae:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b3b1:	89 04 24             	mov    %eax,(%esp)
c010b3b4:	e8 a3 75 ff ff       	call   c010295c <list_is_last>
c010b3b9:	85 c0                	test   %eax,%eax
c010b3bb:	74 c0                	je     c010b37d <pci_irq_handler+0x9f>
                struct pci_isr *current_isr = list_get_current(&pci_irq_it);
                if(current_isr->dev == current_dev)
                    current_isr->isr(current_dev);
                list_next(&pci_irq_it);
            }
            pci_writel(current_dev->bus, current_dev->dev, current_dev->func, PCI_STATUS, status ^ 1);
c010b3bd:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010b3c1:	83 f0 01             	xor    $0x1,%eax
c010b3c4:	0f b7 d8             	movzwl %ax,%ebx
c010b3c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3ca:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010b3ce:	0f b6 c8             	movzbl %al,%ecx
c010b3d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3d4:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010b3d8:	0f b6 d0             	movzbl %al,%edx
c010b3db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3de:	0f b6 00             	movzbl (%eax),%eax
c010b3e1:	0f b6 c0             	movzbl %al,%eax
c010b3e4:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c010b3e8:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010b3ef:	00 
c010b3f0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b3f4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b3f8:	89 04 24             	mov    %eax,(%esp)
c010b3fb:	e8 31 fc ff ff       	call   c010b031 <pci_writel>
        }
        list_next(&pci_dev_it);
c010b400:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b403:	89 04 24             	mov    %eax,(%esp)
c010b406:	e8 2a 75 ff ff       	call   c0102935 <list_next>
 */
void pci_irq_handler(void)
{
    struct list_node *backup = pci_dev_list->head;
    iterator_t pci_dev_it = iterator_create(pci_dev_list);
    while(!list_is_last(&pci_dev_it))
c010b40b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b40e:	89 04 24             	mov    %eax,(%esp)
c010b411:	e8 46 75 ff ff       	call   c010295c <list_is_last>
c010b416:	85 c0                	test   %eax,%eax
c010b418:	0f 84 ef fe ff ff    	je     c010b30d <pci_irq_handler+0x2f>
            pci_writel(current_dev->bus, current_dev->dev, current_dev->func, PCI_STATUS, status ^ 1);
        }
        list_next(&pci_dev_it);
    }
    //printf("PCI-IRQ!\n");
    pci_dev_list->head = backup;
c010b41e:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b423:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b426:	89 50 04             	mov    %edx,0x4(%eax)
}
c010b429:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010b42c:	c9                   	leave  
c010b42d:	c3                   	ret    

c010b42e <INIT_PCI>:

#define PRINT_DEV_LIST


void INIT_PCI()
{
c010b42e:	55                   	push   %ebp
c010b42f:	89 e5                	mov    %esp,%ebp
c010b431:	57                   	push   %edi
c010b432:	56                   	push   %esi
c010b433:	53                   	push   %ebx
c010b434:	83 ec 5c             	sub    $0x5c,%esp
#ifdef PRINT_DEV_LIST
    printf("PCI-devices:\n");
c010b437:	c7 04 24 91 1e 11 c0 	movl   $0xc0111e91,(%esp)
c010b43e:	e8 71 08 00 00       	call   c010bcb4 <puts>
#endif
    if(!pci_dev_list)
c010b443:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b448:	85 c0                	test   %eax,%eax
c010b44a:	75 0a                	jne    c010b456 <INIT_PCI+0x28>
        pci_dev_list = list_create();
c010b44c:	e8 2d 71 ff ff       	call   c010257e <list_create>
c010b451:	a3 30 a0 11 c0       	mov    %eax,0xc011a030
    if(!pci_irq_handles)
c010b456:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b45b:	85 c0                	test   %eax,%eax
c010b45d:	75 0a                	jne    c010b469 <INIT_PCI+0x3b>
        pci_irq_handles = list_create();
c010b45f:	e8 1a 71 ff ff       	call   c010257e <list_create>
c010b464:	a3 2c a0 11 c0       	mov    %eax,0xc011a02c
    pci_dev_list->lock = true;
c010b469:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b46e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
c010b474:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010b47b:	e9 88 05 00 00       	jmp    c010ba08 <INIT_PCI+0x5da>
    {

        for(dev = 0; dev < 32; dev++)
c010b480:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010b487:	e9 6e 05 00 00       	jmp    c010b9fa <INIT_PCI+0x5cc>
        {

            for(func = 0; func < 8; func ++)
c010b48c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010b493:	e9 54 05 00 00       	jmp    c010b9ec <INIT_PCI+0x5be>
            {

                if(pci_dev_exist(bus, dev, func))
c010b498:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b49b:	0f b6 c8             	movzbl %al,%ecx
c010b49e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4a1:	0f b6 d0             	movzbl %al,%edx
c010b4a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b4a7:	0f b6 c0             	movzbl %al,%eax
c010b4aa:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b4ae:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b4b2:	89 04 24             	mov    %eax,(%esp)
c010b4b5:	e8 ea fb ff ff       	call   c010b0a4 <pci_dev_exist>
c010b4ba:	85 c0                	test   %eax,%eax
c010b4bc:	0f 84 26 05 00 00    	je     c010b9e8 <INIT_PCI+0x5ba>
                {
                    bool multifunc = (pci_readb(bus, dev, func,PCI_HEADERTYPE) & 0x80) >> 7;
c010b4c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b4c5:	0f b6 c8             	movzbl %al,%ecx
c010b4c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4cb:	0f b6 d0             	movzbl %al,%edx
c010b4ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b4d1:	0f b6 c0             	movzbl %al,%eax
c010b4d4:	c7 44 24 0c 0e 00 00 	movl   $0xe,0xc(%esp)
c010b4db:	00 
c010b4dc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b4e0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b4e4:	89 04 24             	mov    %eax,(%esp)
c010b4e7:	e8 4b f9 ff ff       	call   c010ae37 <pci_readb>
c010b4ec:	c0 e8 07             	shr    $0x7,%al
c010b4ef:	0f b6 c0             	movzbl %al,%eax
c010b4f2:	89 45 d0             	mov    %eax,-0x30(%ebp)

                    if(func && ! multifunc)
c010b4f5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010b4f9:	74 0a                	je     c010b505 <INIT_PCI+0xd7>
c010b4fb:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b4ff:	0f 84 e2 04 00 00    	je     c010b9e7 <INIT_PCI+0x5b9>
                        continue;

                    struct pci_dev *current_dev = malloc(sizeof(struct pci_dev));
c010b505:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
c010b50c:	e8 95 21 00 00       	call   c010d6a6 <malloc>
c010b511:	89 45 cc             	mov    %eax,-0x34(%ebp)

                    current_dev->bus = bus;
c010b514:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b517:	89 c2                	mov    %eax,%edx
c010b519:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b51c:	88 10                	mov    %dl,(%eax)
                    current_dev->dev = dev;
c010b51e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b521:	89 c2                	mov    %eax,%edx
c010b523:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b526:	88 50 01             	mov    %dl,0x1(%eax)
                    current_dev->func = func;
c010b529:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b52c:	89 c2                	mov    %eax,%edx
c010b52e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b531:	88 50 02             	mov    %dl,0x2(%eax)

                    uint32_t classcode = pci_readl(bus, dev, 0, PCI_REVISION);
c010b534:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b537:	0f b6 d0             	movzbl %al,%edx
c010b53a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b53d:	0f b6 c0             	movzbl %al,%eax
c010b540:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010b547:	00 
c010b548:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b54f:	00 
c010b550:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b554:	89 04 24             	mov    %eax,(%esp)
c010b557:	e8 6d f9 ff ff       	call   c010aec9 <pci_readl>
c010b55c:	89 45 c8             	mov    %eax,-0x38(%ebp)

                    current_dev->reversion_ID = (uint8_t)classcode;
c010b55f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b562:	89 c2                	mov    %eax,%edx
c010b564:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b567:	88 50 0c             	mov    %dl,0xc(%eax)
                    current_dev->programming_interface = (uint8_t) (classcode >> 8);
c010b56a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b56d:	c1 e8 08             	shr    $0x8,%eax
c010b570:	89 c2                	mov    %eax,%edx
c010b572:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b575:	88 50 0f             	mov    %dl,0xf(%eax)
                    current_dev->sub_class = (uint8_t) (classcode >> 16);
c010b578:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b57b:	c1 e8 10             	shr    $0x10,%eax
c010b57e:	89 c2                	mov    %eax,%edx
c010b580:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b583:	88 50 0e             	mov    %dl,0xe(%eax)
                    current_dev->base_class = (uint8_t) (classcode >> 24);
c010b586:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b589:	c1 e8 18             	shr    $0x18,%eax
c010b58c:	89 c2                	mov    %eax,%edx
c010b58e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b591:	88 50 0d             	mov    %dl,0xd(%eax)

                    current_dev->device_ID = pci_readw(bus, dev, func, PCI_DEVICE_ID);
c010b594:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b597:	0f b6 c8             	movzbl %al,%ecx
c010b59a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b59d:	0f b6 d0             	movzbl %al,%edx
c010b5a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b5a3:	0f b6 c0             	movzbl %al,%eax
c010b5a6:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010b5ad:	00 
c010b5ae:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b5b2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b5b6:	89 04 24             	mov    %eax,(%esp)
c010b5b9:	e8 c2 f8 ff ff       	call   c010ae80 <pci_readw>
c010b5be:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b5c1:	66 89 42 08          	mov    %ax,0x8(%edx)
                    current_dev->vendor_ID = pci_readw(bus, dev, func, PCI_VENDOR_ID);
c010b5c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b5c8:	0f b6 c8             	movzbl %al,%ecx
c010b5cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5ce:	0f b6 d0             	movzbl %al,%edx
c010b5d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b5d4:	0f b6 c0             	movzbl %al,%eax
c010b5d7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b5de:	00 
c010b5df:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b5e3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b5e7:	89 04 24             	mov    %eax,(%esp)
c010b5ea:	e8 91 f8 ff ff       	call   c010ae80 <pci_readw>
c010b5ef:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b5f2:	66 89 42 0a          	mov    %ax,0xa(%edx)
                    current_dev->header_type = (pci_readb(bus, dev ,0, PCI_HEADERTYPE) | 0x80)^0x80;
c010b5f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5f9:	0f b6 d0             	movzbl %al,%edx
c010b5fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b5ff:	0f b6 c0             	movzbl %al,%eax
c010b602:	c7 44 24 0c 0e 00 00 	movl   $0xe,0xc(%esp)
c010b609:	00 
c010b60a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b611:	00 
c010b612:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b616:	89 04 24             	mov    %eax,(%esp)
c010b619:	e8 19 f8 ff ff       	call   c010ae37 <pci_readb>
c010b61e:	89 c2                	mov    %eax,%edx
c010b620:	83 e2 7f             	and    $0x7f,%edx
c010b623:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b626:	88 50 14             	mov    %dl,0x14(%eax)
                    current_dev->multifunc = multifunc;
c010b629:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b62c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b62f:	89 50 10             	mov    %edx,0x10(%eax)

                    uint32_t irq_info = pci_readl(bus, dev, func, PCI_INTERRUPT);
c010b632:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b635:	0f b6 c8             	movzbl %al,%ecx
c010b638:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b63b:	0f b6 d0             	movzbl %al,%edx
c010b63e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b641:	0f b6 c0             	movzbl %al,%eax
c010b644:	c7 44 24 0c 3c 00 00 	movl   $0x3c,0xc(%esp)
c010b64b:	00 
c010b64c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b650:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b654:	89 04 24             	mov    %eax,(%esp)
c010b657:	e8 6d f8 ff ff       	call   c010aec9 <pci_readl>
c010b65c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
                    current_dev->irq_num = (uint8_t) irq_info;
c010b65f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b662:	89 c2                	mov    %eax,%edx
c010b664:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b667:	88 50 15             	mov    %dl,0x15(%eax)
                    current_dev->irq_pin = (uint8_t) (irq_info >> 8);
c010b66a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b66d:	c1 e8 08             	shr    $0x8,%eax
c010b670:	89 c2                	mov    %eax,%edx
c010b672:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b675:	88 50 16             	mov    %dl,0x16(%eax)
                    current_dev->locked = false;
c010b678:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b67b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


#ifdef PRINT_DEV_LIST
                    printf("device ID: %04X  vendor ID: %04X  bus: %d  port: %d  function: %d interrupt:%d\n",current_dev->device_ID, current_dev->vendor_ID, current_dev->bus, current_dev->dev, current_dev->func, current_dev->irq_num);
c010b682:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b685:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b689:	0f b6 f8             	movzbl %al,%edi
c010b68c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b68f:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010b693:	0f b6 f0             	movzbl %al,%esi
c010b696:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b699:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010b69d:	0f b6 d8             	movzbl %al,%ebx
c010b6a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6a3:	0f b6 00             	movzbl (%eax),%eax
c010b6a6:	0f b6 c8             	movzbl %al,%ecx
c010b6a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6ac:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
c010b6b0:	0f b7 d0             	movzwl %ax,%edx
c010b6b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6b6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c010b6ba:	0f b7 c0             	movzwl %ax,%eax
c010b6bd:	89 7c 24 18          	mov    %edi,0x18(%esp)
c010b6c1:	89 74 24 14          	mov    %esi,0x14(%esp)
c010b6c5:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c010b6c9:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b6cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b6d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6d5:	c7 04 24 a0 1e 11 c0 	movl   $0xc0111ea0,(%esp)
c010b6dc:	e8 9c 7a ff ff       	call   c010317d <printf>
#endif

                    if(current_dev->irq_num < 16 && current_dev->irq_pin && current_dev->irq_num)
c010b6e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6e4:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b6e8:	3c 0f                	cmp    $0xf,%al
c010b6ea:	0f 87 fd 00 00 00    	ja     c010b7ed <INIT_PCI+0x3bf>
c010b6f0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6f3:	0f b6 40 16          	movzbl 0x16(%eax),%eax
c010b6f7:	84 c0                	test   %al,%al
c010b6f9:	0f 84 ee 00 00 00    	je     c010b7ed <INIT_PCI+0x3bf>
c010b6ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b702:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b706:	84 c0                	test   %al,%al
c010b708:	0f 84 df 00 00 00    	je     c010b7ed <INIT_PCI+0x3bf>
                    {
                        if(!install_irq(current_dev->irq_num, pci_irq_handler))
c010b70e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b711:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b715:	0f b6 c0             	movzbl %al,%eax
c010b718:	c7 44 24 04 de b2 10 	movl   $0xc010b2de,0x4(%esp)
c010b71f:	c0 
c010b720:	89 04 24             	mov    %eax,(%esp)
c010b723:	e8 42 2b 00 00       	call   c010e26a <install_irq>
c010b728:	85 c0                	test   %eax,%eax
c010b72a:	0f 85 bd 00 00 00    	jne    c010b7ed <INIT_PCI+0x3bf>
                        {
                            set_color(RED | BLACK << 4);
c010b730:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010b737:	e8 4d 06 00 00       	call   c010bd89 <set_color>
                            printf("WARNING: ");
c010b73c:	c7 04 24 f0 1e 11 c0 	movl   $0xc0111ef0,(%esp)
c010b743:	e8 35 7a ff ff       	call   c010317d <printf>
                            set_color(WHITE | BLACK << 4);
c010b748:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010b74f:	e8 35 06 00 00       	call   c010bd89 <set_color>
                            printf("Could not Reserver IRQ %d for PCI-DEVICE: %d:%d:%d\n", current_dev->irq_num, bus, dev, func);
c010b754:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b757:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b75b:	0f b6 c0             	movzbl %al,%eax
c010b75e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b761:	89 54 24 10          	mov    %edx,0x10(%esp)
c010b765:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b768:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b76c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b76f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b773:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b777:	c7 04 24 fc 1e 11 c0 	movl   $0xc0111efc,(%esp)
c010b77e:	e8 fa 79 ff ff       	call   c010317d <printf>

                            set_color(RED | BLACK << 4);
c010b783:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010b78a:	e8 fa 05 00 00       	call   c010bd89 <set_color>
                            printf("WARNING: ");
c010b78f:	c7 04 24 f0 1e 11 c0 	movl   $0xc0111ef0,(%esp)
c010b796:	e8 e2 79 ff ff       	call   c010317d <printf>
                            set_color(WHITE | BLACK << 4);
c010b79b:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010b7a2:	e8 e2 05 00 00       	call   c010bd89 <set_color>
                            printf("FORCING IRQ %d for the PCI-BUS\n", current_dev->irq_num);
c010b7a7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7aa:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b7ae:	0f b6 c0             	movzbl %al,%eax
c010b7b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7b5:	c7 04 24 30 1f 11 c0 	movl   $0xc0111f30,(%esp)
c010b7bc:	e8 bc 79 ff ff       	call   c010317d <printf>

                            deinstall_irq(current_dev->irq_num);
c010b7c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7c4:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b7c8:	0f b6 c0             	movzbl %al,%eax
c010b7cb:	89 04 24             	mov    %eax,(%esp)
c010b7ce:	e8 ef 2a 00 00       	call   c010e2c2 <deinstall_irq>
                            install_irq(current_dev->irq_num, pci_irq_handler);
c010b7d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7d6:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b7da:	0f b6 c0             	movzbl %al,%eax
c010b7dd:	c7 44 24 04 de b2 10 	movl   $0xc010b2de,0x4(%esp)
c010b7e4:	c0 
c010b7e5:	89 04 24             	mov    %eax,(%esp)
c010b7e8:	e8 7d 2a 00 00       	call   c010e26a <install_irq>
                        }

                    }

                    // Standart Device
                    if(! (current_dev->header_type & 0xFF) )
c010b7ed:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7f0:	0f b6 40 14          	movzbl 0x14(%eax),%eax
c010b7f4:	84 c0                	test   %al,%al
c010b7f6:	0f 85 d5 01 00 00    	jne    c010b9d1 <INIT_PCI+0x5a3>
                    {
                        int base;

                        for(base = 0; base < 6; base++)
c010b7fc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c010b803:	e9 bf 01 00 00       	jmp    c010b9c7 <INIT_PCI+0x599>
                        {
                            uint32_t current_base = pci_readl(bus, dev, func, PCI_BASE + (base * 4));
c010b808:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b80b:	83 c0 04             	add    $0x4,%eax
c010b80e:	c1 e0 02             	shl    $0x2,%eax
c010b811:	0f b6 d8             	movzbl %al,%ebx
c010b814:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b817:	0f b6 c8             	movzbl %al,%ecx
c010b81a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b81d:	0f b6 d0             	movzbl %al,%edx
c010b820:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b823:	0f b6 c0             	movzbl %al,%eax
c010b826:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010b82a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b82e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b832:	89 04 24             	mov    %eax,(%esp)
c010b835:	e8 8f f6 ff ff       	call   c010aec9 <pci_readl>
c010b83a:	89 45 c0             	mov    %eax,-0x40(%ebp)

                            // get type
                            current_dev->base_adress[base].type = current_base & 1;
c010b83d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b840:	89 c1                	mov    %eax,%ecx
c010b842:	83 e1 01             	and    $0x1,%ecx
c010b845:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c010b848:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b84b:	89 d0                	mov    %edx,%eax
c010b84d:	01 c0                	add    %eax,%eax
c010b84f:	01 d0                	add    %edx,%eax
c010b851:	c1 e0 02             	shl    $0x2,%eax
c010b854:	01 d8                	add    %ebx,%eax
c010b856:	83 c0 1c             	add    $0x1c,%eax
c010b859:	89 08                	mov    %ecx,(%eax)

                            // save current adress
                            current_dev->base_adress[base].adress = (current_base | 1) ^ 1;
c010b85b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b85e:	89 c1                	mov    %eax,%ecx
c010b860:	83 e1 fe             	and    $0xfffffffe,%ecx
c010b863:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c010b866:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b869:	89 d0                	mov    %edx,%eax
c010b86b:	01 c0                	add    %eax,%eax
c010b86d:	01 d0                	add    %edx,%eax
c010b86f:	c1 e0 02             	shl    $0x2,%eax
c010b872:	01 d8                	add    %ebx,%eax
c010b874:	83 c0 18             	add    $0x18,%eax
c010b877:	89 08                	mov    %ecx,(%eax)

                            // get reserved bits
                            pci_writel(bus, dev, func, PCI_BASE + (base * 4), 0xFFFFFFFF);
c010b879:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b87c:	83 c0 04             	add    $0x4,%eax
c010b87f:	c1 e0 02             	shl    $0x2,%eax
c010b882:	0f b6 d8             	movzbl %al,%ebx
c010b885:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b888:	0f b6 c8             	movzbl %al,%ecx
c010b88b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b88e:	0f b6 d0             	movzbl %al,%edx
c010b891:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b894:	0f b6 c0             	movzbl %al,%eax
c010b897:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%esp)
c010b89e:	ff 
c010b89f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010b8a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b8a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b8ab:	89 04 24             	mov    %eax,(%esp)
c010b8ae:	e8 7e f7 ff ff       	call   c010b031 <pci_writel>
                            uint32_t temp_base = pci_readl(bus, dev, func, PCI_BASE + (base * 4));
c010b8b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b8b6:	83 c0 04             	add    $0x4,%eax
c010b8b9:	c1 e0 02             	shl    $0x2,%eax
c010b8bc:	0f b6 d8             	movzbl %al,%ebx
c010b8bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b8c2:	0f b6 c8             	movzbl %al,%ecx
c010b8c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8c8:	0f b6 d0             	movzbl %al,%edx
c010b8cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b8ce:	0f b6 c0             	movzbl %al,%eax
c010b8d1:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010b8d5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b8d9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b8dd:	89 04 24             	mov    %eax,(%esp)
c010b8e0:	e8 e4 f5 ff ff       	call   c010aec9 <pci_readl>
c010b8e5:	89 45 bc             	mov    %eax,-0x44(%ebp)
                            if(temp_base == 0)
c010b8e8:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010b8ec:	75 1a                	jne    c010b908 <INIT_PCI+0x4da>
                                current_dev->base_adress[base].type = UNUSED;
c010b8ee:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010b8f1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b8f4:	89 d0                	mov    %edx,%eax
c010b8f6:	01 c0                	add    %eax,%eax
c010b8f8:	01 d0                	add    %edx,%eax
c010b8fa:	c1 e0 02             	shl    $0x2,%eax
c010b8fd:	01 c8                	add    %ecx,%eax
c010b8ff:	83 c0 1c             	add    $0x1c,%eax
c010b902:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
                            temp_base = (~temp_base) | 1;
c010b908:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b90b:	f7 d0                	not    %eax
c010b90d:	83 c8 01             	or     $0x1,%eax
c010b910:	89 45 bc             	mov    %eax,-0x44(%ebp)
                            current_dev->base_adress[base].resb = 0;
c010b913:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010b916:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b919:	89 d0                	mov    %edx,%eax
c010b91b:	01 c0                	add    %eax,%eax
c010b91d:	01 d0                	add    %edx,%eax
c010b91f:	c1 e0 02             	shl    $0x2,%eax
c010b922:	01 c8                	add    %ecx,%eax
c010b924:	83 c0 10             	add    $0x10,%eax
c010b927:	c6 40 10 00          	movb   $0x0,0x10(%eax)
                            int i;
                            for(i = 0; i < 32; i++)
c010b92b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c010b932:	eb 4d                	jmp    c010b981 <INIT_PCI+0x553>
                            {
                                if((temp_base & (1 << i)) != 0)
c010b934:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b937:	ba 01 00 00 00       	mov    $0x1,%edx
c010b93c:	89 d3                	mov    %edx,%ebx
c010b93e:	89 c1                	mov    %eax,%ecx
c010b940:	d3 e3                	shl    %cl,%ebx
c010b942:	89 d8                	mov    %ebx,%eax
c010b944:	23 45 bc             	and    -0x44(%ebp),%eax
c010b947:	85 c0                	test   %eax,%eax
c010b949:	74 3e                	je     c010b989 <INIT_PCI+0x55b>
                                    current_dev->base_adress[base].resb++;
c010b94b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010b94e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b951:	89 d0                	mov    %edx,%eax
c010b953:	01 c0                	add    %eax,%eax
c010b955:	01 d0                	add    %edx,%eax
c010b957:	c1 e0 02             	shl    $0x2,%eax
c010b95a:	01 c8                	add    %ecx,%eax
c010b95c:	83 c0 10             	add    $0x10,%eax
c010b95f:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c010b963:	8d 48 01             	lea    0x1(%eax),%ecx
c010b966:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c010b969:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b96c:	89 d0                	mov    %edx,%eax
c010b96e:	01 c0                	add    %eax,%eax
c010b970:	01 d0                	add    %edx,%eax
c010b972:	c1 e0 02             	shl    $0x2,%eax
c010b975:	01 d8                	add    %ebx,%eax
c010b977:	83 c0 10             	add    $0x10,%eax
c010b97a:	88 48 10             	mov    %cl,0x10(%eax)
                            if(temp_base == 0)
                                current_dev->base_adress[base].type = UNUSED;
                            temp_base = (~temp_base) | 1;
                            current_dev->base_adress[base].resb = 0;
                            int i;
                            for(i = 0; i < 32; i++)
c010b97d:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
c010b981:	83 7d d4 1f          	cmpl   $0x1f,-0x2c(%ebp)
c010b985:	7e ad                	jle    c010b934 <INIT_PCI+0x506>
c010b987:	eb 01                	jmp    c010b98a <INIT_PCI+0x55c>
                            {
                                if((temp_base & (1 << i)) != 0)
                                    current_dev->base_adress[base].resb++;
                                else
                                    break;
c010b989:	90                   	nop
                            }

                            //reset old state
                            pci_writel(bus, dev, func, PCI_BASE + (base * 4), current_base);
c010b98a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b98d:	83 c0 04             	add    $0x4,%eax
c010b990:	c1 e0 02             	shl    $0x2,%eax
c010b993:	0f b6 d8             	movzbl %al,%ebx
c010b996:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b999:	0f b6 c8             	movzbl %al,%ecx
c010b99c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b99f:	0f b6 d0             	movzbl %al,%edx
c010b9a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b9a5:	0f b6 c0             	movzbl %al,%eax
c010b9a8:	8b 75 c0             	mov    -0x40(%ebp),%esi
c010b9ab:	89 74 24 10          	mov    %esi,0x10(%esp)
c010b9af:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010b9b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b9b7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b9bb:	89 04 24             	mov    %eax,(%esp)
c010b9be:	e8 6e f6 ff ff       	call   c010b031 <pci_writel>
                    // Standart Device
                    if(! (current_dev->header_type & 0xFF) )
                    {
                        int base;

                        for(base = 0; base < 6; base++)
c010b9c3:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
c010b9c7:	83 7d d8 05          	cmpl   $0x5,-0x28(%ebp)
c010b9cb:	0f 8e 37 fe ff ff    	jle    c010b808 <INIT_PCI+0x3da>
                    else
                    {
                        //TODO: Write Cases for Bridges
                    }

                    list_push_front(pci_dev_list, current_dev);
c010b9d1:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b9d6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b9d9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b9dd:	89 04 24             	mov    %eax,(%esp)
c010b9e0:	e8 d0 6c ff ff       	call   c01026b5 <list_push_front>
c010b9e5:	eb 01                	jmp    c010b9e8 <INIT_PCI+0x5ba>
                if(pci_dev_exist(bus, dev, func))
                {
                    bool multifunc = (pci_readb(bus, dev, func,PCI_HEADERTYPE) & 0x80) >> 7;

                    if(func && ! multifunc)
                        continue;
c010b9e7:	90                   	nop
    {

        for(dev = 0; dev < 32; dev++)
        {

            for(func = 0; func < 8; func ++)
c010b9e8:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010b9ec:	83 7d dc 07          	cmpl   $0x7,-0x24(%ebp)
c010b9f0:	0f 8e a2 fa ff ff    	jle    c010b498 <INIT_PCI+0x6a>
    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
    {

        for(dev = 0; dev < 32; dev++)
c010b9f6:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010b9fa:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
c010b9fe:	0f 8e 88 fa ff ff    	jle    c010b48c <INIT_PCI+0x5e>
        pci_irq_handles = list_create();
    pci_dev_list->lock = true;

    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
c010ba04:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c010ba08:	83 7d e0 07          	cmpl   $0x7,-0x20(%ebp)
c010ba0c:	0f 8e 6e fa ff ff    	jle    c010b480 <INIT_PCI+0x52>
                    list_push_front(pci_dev_list, current_dev);
                }
            }
        }
    }
    pci_dev_list->lock = false;
c010ba12:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010ba17:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

#ifdef PRINT_DEV_LIST
    printf("\n");
c010ba1d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010ba24:	e8 2c 01 00 00       	call   c010bb55 <putchar>
#endif
}
c010ba29:	83 c4 5c             	add    $0x5c,%esp
c010ba2c:	5b                   	pop    %ebx
c010ba2d:	5e                   	pop    %esi
c010ba2e:	5f                   	pop    %edi
c010ba2f:	5d                   	pop    %ebp
c010ba30:	c3                   	ret    

c010ba31 <inb>:
#include <stdint.h>



static inline uint8_t inb(uint16_t port)
{
c010ba31:	55                   	push   %ebp
c010ba32:	89 e5                	mov    %esp,%ebp
c010ba34:	53                   	push   %ebx
c010ba35:	83 ec 14             	sub    $0x14,%esp
c010ba38:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba3b:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    uint8_t result;
    asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c010ba3f:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010ba43:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010ba47:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010ba4b:	ec                   	in     (%dx),%al
c010ba4c:	89 c3                	mov    %eax,%ebx
c010ba4e:	88 5d fb             	mov    %bl,-0x5(%ebp)
    return result;
c010ba51:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c010ba55:	83 c4 14             	add    $0x14,%esp
c010ba58:	5b                   	pop    %ebx
c010ba59:	5d                   	pop    %ebp
c010ba5a:	c3                   	ret    

c010ba5b <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010ba5b:	55                   	push   %ebp
c010ba5c:	89 e5                	mov    %esp,%ebp
c010ba5e:	83 ec 08             	sub    $0x8,%esp
c010ba61:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba64:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba67:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ba6b:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010ba6e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ba72:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ba76:	ee                   	out    %al,(%dx)
}
c010ba77:	c9                   	leave  
c010ba78:	c3                   	ret    

c010ba79 <sound_on>:
 */

#include <io.h>

void sound_on()
{
c010ba79:	55                   	push   %ebp
c010ba7a:	89 e5                	mov    %esp,%ebp
c010ba7c:	83 ec 08             	sub    $0x8,%esp
    outb(0x61, inb(0x61) | 3);
c010ba7f:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c010ba86:	e8 a6 ff ff ff       	call   c010ba31 <inb>
c010ba8b:	83 c8 03             	or     $0x3,%eax
c010ba8e:	0f b6 c0             	movzbl %al,%eax
c010ba91:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba95:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c010ba9c:	e8 ba ff ff ff       	call   c010ba5b <outb>
}
c010baa1:	c9                   	leave  
c010baa2:	c3                   	ret    

c010baa3 <sound_off>:

void sound_off()
{
c010baa3:	55                   	push   %ebp
c010baa4:	89 e5                	mov    %esp,%ebp
c010baa6:	83 ec 08             	sub    $0x8,%esp
    outb(0x61, inb(0x61) & ~3);
c010baa9:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c010bab0:	e8 7c ff ff ff       	call   c010ba31 <inb>
c010bab5:	0f b6 c0             	movzbl %al,%eax
c010bab8:	25 fc 00 00 00       	and    $0xfc,%eax
c010babd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bac1:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c010bac8:	e8 8e ff ff ff       	call   c010ba5b <outb>
}
c010bacd:	c9                   	leave  
c010bace:	c3                   	ret    

c010bacf <sound>:

void sound(uint32_t frequency, uint32_t time)
{
c010bacf:	55                   	push   %ebp
c010bad0:	89 e5                	mov    %esp,%ebp
c010bad2:	83 ec 18             	sub    $0x18,%esp
    int i;
    uint16_t tmp;
    tmp = 1193180 / frequency;
c010bad5:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
c010bada:	ba 00 00 00 00       	mov    $0x0,%edx
c010badf:	f7 75 08             	divl   0x8(%ebp)
c010bae2:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    outb(0x43, 0xB6);
c010bae6:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c010baed:	00 
c010baee:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
c010baf5:	e8 61 ff ff ff       	call   c010ba5b <outb>
    outb(0x42, tmp & 0xFF);
c010bafa:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010bafe:	0f b6 c0             	movzbl %al,%eax
c010bb01:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb05:	c7 04 24 42 00 00 00 	movl   $0x42,(%esp)
c010bb0c:	e8 4a ff ff ff       	call   c010ba5b <outb>
    outb(0x42, tmp >> 8);
c010bb11:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010bb15:	66 c1 e8 08          	shr    $0x8,%ax
c010bb19:	0f b6 c0             	movzbl %al,%eax
c010bb1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb20:	c7 04 24 42 00 00 00 	movl   $0x42,(%esp)
c010bb27:	e8 2f ff ff ff       	call   c010ba5b <outb>
    sound_on();
c010bb2c:	e8 48 ff ff ff       	call   c010ba79 <sound_on>
    for (i = 0; i < time * 10000; i++);
c010bb31:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010bb38:	eb 04                	jmp    c010bb3e <sound+0x6f>
c010bb3a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010bb3e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bb41:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb44:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
c010bb4a:	39 c2                	cmp    %eax,%edx
c010bb4c:	72 ec                	jb     c010bb3a <sound+0x6b>
    sound_off();
c010bb4e:	e8 50 ff ff ff       	call   c010baa3 <sound_off>
}
c010bb53:	c9                   	leave  
c010bb54:	c3                   	ret    

c010bb55 <putchar>:

static color_t color = CYAN | BLACK << 4;
static char *video_mem = (char *)0xc00b8000;

int putchar(int c)
{
c010bb55:	55                   	push   %ebp
c010bb56:	89 e5                	mov    %esp,%ebp
c010bb58:	83 ec 18             	sub    $0x18,%esp
    if (c == '\b')
c010bb5b:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010bb5f:	0f 85 8a 00 00 00    	jne    c010bbef <putchar+0x9a>
    {
        if (x > 0)
c010bb65:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bb6a:	85 c0                	test   %eax,%eax
c010bb6c:	7e 2b                	jle    c010bb99 <putchar+0x44>
        {
            gotoxy(--x, y);
c010bb6e:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bb73:	0f b6 d0             	movzbl %al,%edx
c010bb76:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bb7b:	83 e8 01             	sub    $0x1,%eax
c010bb7e:	a3 24 80 11 c0       	mov    %eax,0xc0118024
c010bb83:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bb88:	0f b6 c0             	movzbl %al,%eax
c010bb8b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bb8f:	89 04 24             	mov    %eax,(%esp)
c010bb92:	e8 15 02 00 00       	call   c010bdac <gotoxy>
c010bb97:	eb 2c                	jmp    c010bbc5 <putchar+0x70>
        }
        else
        {
            gotoxy(columns - 1, --y);
c010bb99:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bb9e:	83 e8 01             	sub    $0x1,%eax
c010bba1:	a3 28 80 11 c0       	mov    %eax,0xc0118028
c010bba6:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bbab:	0f b6 d0             	movzbl %al,%edx
c010bbae:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bbb3:	83 e8 01             	sub    $0x1,%eax
c010bbb6:	0f b6 c0             	movzbl %al,%eax
c010bbb9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bbbd:	89 04 24             	mov    %eax,(%esp)
c010bbc0:	e8 e7 01 00 00       	call   c010bdac <gotoxy>
        }

        video_mem[2 * (y * columns + x)] = 0;
c010bbc5:	8b 15 cc 33 11 c0    	mov    0xc01133cc,%edx
c010bbcb:	8b 0d 28 80 11 c0    	mov    0xc0118028,%ecx
c010bbd1:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bbd6:	0f af c8             	imul   %eax,%ecx
c010bbd9:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bbde:	01 c8                	add    %ecx,%eax
c010bbe0:	01 c0                	add    %eax,%eax
c010bbe2:	01 d0                	add    %edx,%eax
c010bbe4:	c6 00 00             	movb   $0x0,(%eax)

        return c;
c010bbe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbea:	e9 c3 00 00 00       	jmp    c010bcb2 <putchar+0x15d>
    }

    if ((x > columns - 1) || (c == '\n'))
c010bbef:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bbf4:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bbf7:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bbfc:	39 c2                	cmp    %eax,%edx
c010bbfe:	7c 06                	jl     c010bc06 <putchar+0xb1>
c010bc00:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c010bc04:	75 30                	jne    c010bc36 <putchar+0xe1>
    {
        gotoxy(0, ++y);
c010bc06:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bc0b:	83 c0 01             	add    $0x1,%eax
c010bc0e:	a3 28 80 11 c0       	mov    %eax,0xc0118028
c010bc13:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bc18:	0f b6 c0             	movzbl %al,%eax
c010bc1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc1f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bc26:	e8 81 01 00 00       	call   c010bdac <gotoxy>

        if (c == '\n')
c010bc2b:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c010bc2f:	75 05                	jne    c010bc36 <putchar+0xe1>
        {
            return c;
c010bc31:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc34:	eb 7c                	jmp    c010bcb2 <putchar+0x15d>
        }
    }

    video_mem[2 * (y * columns + x)] = c;
c010bc36:	8b 15 cc 33 11 c0    	mov    0xc01133cc,%edx
c010bc3c:	8b 0d 28 80 11 c0    	mov    0xc0118028,%ecx
c010bc42:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bc47:	0f af c8             	imul   %eax,%ecx
c010bc4a:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bc4f:	01 c8                	add    %ecx,%eax
c010bc51:	01 c0                	add    %eax,%eax
c010bc53:	01 c2                	add    %eax,%edx
c010bc55:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc58:	88 02                	mov    %al,(%edx)
    video_mem[2 * (y * columns + x) + 1] = color;
c010bc5a:	a1 cc 33 11 c0       	mov    0xc01133cc,%eax
c010bc5f:	8b 0d 28 80 11 c0    	mov    0xc0118028,%ecx
c010bc65:	8b 15 c4 33 11 c0    	mov    0xc01133c4,%edx
c010bc6b:	0f af ca             	imul   %edx,%ecx
c010bc6e:	8b 15 24 80 11 c0    	mov    0xc0118024,%edx
c010bc74:	01 ca                	add    %ecx,%edx
c010bc76:	01 d2                	add    %edx,%edx
c010bc78:	83 c2 01             	add    $0x1,%edx
c010bc7b:	01 c2                	add    %eax,%edx
c010bc7d:	0f b6 05 c8 33 11 c0 	movzbl 0xc01133c8,%eax
c010bc84:	88 02                	mov    %al,(%edx)

    gotoxy(++x, y);
c010bc86:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bc8b:	0f b6 d0             	movzbl %al,%edx
c010bc8e:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bc93:	83 c0 01             	add    $0x1,%eax
c010bc96:	a3 24 80 11 c0       	mov    %eax,0xc0118024
c010bc9b:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bca0:	0f b6 c0             	movzbl %al,%eax
c010bca3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bca7:	89 04 24             	mov    %eax,(%esp)
c010bcaa:	e8 fd 00 00 00       	call   c010bdac <gotoxy>

    return c;
c010bcaf:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bcb2:	c9                   	leave  
c010bcb3:	c3                   	ret    

c010bcb4 <puts>:

int puts(const char* s)
{
c010bcb4:	55                   	push   %ebp
c010bcb5:	89 e5                	mov    %esp,%ebp
c010bcb7:	83 ec 28             	sub    $0x28,%esp
    int printed = 1;
c010bcba:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

    while (*s)
c010bcc1:	eb 19                	jmp    c010bcdc <puts+0x28>
    {
        putchar(*s++);
c010bcc3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcc6:	0f b6 00             	movzbl (%eax),%eax
c010bcc9:	0f be c0             	movsbl %al,%eax
c010bccc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010bcd0:	89 04 24             	mov    %eax,(%esp)
c010bcd3:	e8 7d fe ff ff       	call   c010bb55 <putchar>
        ++printed;
c010bcd8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

int puts(const char* s)
{
    int printed = 1;

    while (*s)
c010bcdc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcdf:	0f b6 00             	movzbl (%eax),%eax
c010bce2:	84 c0                	test   %al,%al
c010bce4:	75 dd                	jne    c010bcc3 <puts+0xf>
    {
        putchar(*s++);
        ++printed;
    }
    putchar('\n');
c010bce6:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010bced:	e8 63 fe ff ff       	call   c010bb55 <putchar>

    return printed;
c010bcf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bcf5:	c9                   	leave  
c010bcf6:	c3                   	ret    

c010bcf7 <fputs>:

int fputs(const char* s, int fd)
{
c010bcf7:	55                   	push   %ebp
c010bcf8:	89 e5                	mov    %esp,%ebp
c010bcfa:	83 ec 18             	sub    $0x18,%esp
    if (fd == STDOUT)
c010bcfd:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010bd01:	75 21                	jne    c010bd24 <fputs+0x2d>
    {
        while (*s)
c010bd03:	eb 15                	jmp    c010bd1a <fputs+0x23>
        {
            putchar(*s++);
c010bd05:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd08:	0f b6 00             	movzbl (%eax),%eax
c010bd0b:	0f be c0             	movsbl %al,%eax
c010bd0e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010bd12:	89 04 24             	mov    %eax,(%esp)
c010bd15:	e8 3b fe ff ff       	call   c010bb55 <putchar>

int fputs(const char* s, int fd)
{
    if (fd == STDOUT)
    {
        while (*s)
c010bd1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd1d:	0f b6 00             	movzbl (%eax),%eax
c010bd20:	84 c0                	test   %al,%al
c010bd22:	75 e1                	jne    c010bd05 <fputs+0xe>
        {
            putchar(*s++);
        }
    }

    return 0;
c010bd24:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd29:	c9                   	leave  
c010bd2a:	c3                   	ret    

c010bd2b <clear_screen>:

void clear_screen(void)
{
c010bd2b:	55                   	push   %ebp
c010bd2c:	89 e5                	mov    %esp,%ebp
c010bd2e:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < lines * columns; i++)
c010bd31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010bd38:	eb 26                	jmp    c010bd60 <clear_screen+0x35>
    {
        video_mem[2 * i] = 0;
c010bd3a:	8b 15 cc 33 11 c0    	mov    0xc01133cc,%edx
c010bd40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd43:	01 c0                	add    %eax,%eax
c010bd45:	01 d0                	add    %edx,%eax
c010bd47:	c6 00 00             	movb   $0x0,(%eax)
        video_mem[2 * i + 1] = 0;
c010bd4a:	a1 cc 33 11 c0       	mov    0xc01133cc,%eax
c010bd4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bd52:	01 d2                	add    %edx,%edx
c010bd54:	83 c2 01             	add    $0x1,%edx
c010bd57:	01 d0                	add    %edx,%eax
c010bd59:	c6 00 00             	movb   $0x0,(%eax)
}

void clear_screen(void)
{
    int i;
    for (i = 0; i < lines * columns; i++)
c010bd5c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010bd60:	8b 15 c0 33 11 c0    	mov    0xc01133c0,%edx
c010bd66:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bd6b:	0f af c2             	imul   %edx,%eax
c010bd6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010bd71:	7f c7                	jg     c010bd3a <clear_screen+0xf>
    {
        video_mem[2 * i] = 0;
        video_mem[2 * i + 1] = 0;
    }

    gotoxy(0, 0);
c010bd73:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bd7a:	00 
c010bd7b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bd82:	e8 25 00 00 00       	call   c010bdac <gotoxy>
}
c010bd87:	c9                   	leave  
c010bd88:	c3                   	ret    

c010bd89 <set_color>:

void set_color(color_t _color)
{
c010bd89:	55                   	push   %ebp
c010bd8a:	89 e5                	mov    %esp,%ebp
c010bd8c:	83 ec 04             	sub    $0x4,%esp
c010bd8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd92:	88 45 fc             	mov    %al,-0x4(%ebp)
    color = _color;
c010bd95:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010bd99:	a2 c8 33 11 c0       	mov    %al,0xc01133c8
}
c010bd9e:	c9                   	leave  
c010bd9f:	c3                   	ret    

c010bda0 <get_color>:

color_t get_color(void)
{
c010bda0:	55                   	push   %ebp
c010bda1:	89 e5                	mov    %esp,%ebp
    return color;
c010bda3:	0f b6 05 c8 33 11 c0 	movzbl 0xc01133c8,%eax
}
c010bdaa:	5d                   	pop    %ebp
c010bdab:	c3                   	ret    

c010bdac <gotoxy>:

void gotoxy(uint8_t _x, uint8_t _y)
{
c010bdac:	55                   	push   %ebp
c010bdad:	89 e5                	mov    %esp,%ebp
c010bdaf:	53                   	push   %ebx
c010bdb0:	83 ec 34             	sub    $0x34,%esp
c010bdb3:	8b 55 08             	mov    0x8(%ebp),%edx
c010bdb6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdb9:	88 55 e4             	mov    %dl,-0x1c(%ebp)
c010bdbc:	88 45 e0             	mov    %al,-0x20(%ebp)
    uint16_t offset;

    if ((_y * columns + _x) >= (columns * lines))   /* scroll if neccessary */
c010bdbf:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
c010bdc3:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bdc8:	0f af d0             	imul   %eax,%edx
c010bdcb:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010bdcf:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c010bdd2:	8b 15 c4 33 11 c0    	mov    0xc01133c4,%edx
c010bdd8:	a1 c0 33 11 c0       	mov    0xc01133c0,%eax
c010bddd:	0f af c2             	imul   %edx,%eax
c010bde0:	39 c1                	cmp    %eax,%ecx
c010bde2:	7c 6f                	jl     c010be53 <gotoxy+0xa7>
    {
        memmove(video_mem, video_mem + 2 * columns, 2 * lines * columns);
c010bde4:	a1 c0 33 11 c0       	mov    0xc01133c0,%eax
c010bde9:	8d 14 00             	lea    (%eax,%eax,1),%edx
c010bdec:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bdf1:	0f af c2             	imul   %edx,%eax
c010bdf4:	89 c2                	mov    %eax,%edx
c010bdf6:	8b 0d cc 33 11 c0    	mov    0xc01133cc,%ecx
c010bdfc:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010be01:	01 c0                	add    %eax,%eax
c010be03:	01 c1                	add    %eax,%ecx
c010be05:	a1 cc 33 11 c0       	mov    0xc01133cc,%eax
c010be0a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010be0e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010be12:	89 04 24             	mov    %eax,(%esp)
c010be15:	e8 26 70 ff ff       	call   c0102e40 <memmove>
        memset(video_mem + 2 * lines * columns, 0, 2 * columns);
c010be1a:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010be1f:	01 c0                	add    %eax,%eax
c010be21:	8b 0d cc 33 11 c0    	mov    0xc01133cc,%ecx
c010be27:	8b 15 c0 33 11 c0    	mov    0xc01133c0,%edx
c010be2d:	8d 1c 12             	lea    (%edx,%edx,1),%ebx
c010be30:	8b 15 c4 33 11 c0    	mov    0xc01133c4,%edx
c010be36:	0f af d3             	imul   %ebx,%edx
c010be39:	01 ca                	add    %ecx,%edx
c010be3b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010be3f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010be46:	00 
c010be47:	89 14 24             	mov    %edx,(%esp)
c010be4a:	e8 26 71 ff ff       	call   c0102f75 <memset>
        --_y;
c010be4f:	80 6d e0 01          	subb   $0x1,-0x20(%ebp)
    }

    x = _x;
c010be53:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010be57:	a3 24 80 11 c0       	mov    %eax,0xc0118024
    y = _y;
c010be5c:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010be60:	a3 28 80 11 c0       	mov    %eax,0xc0118028
    offset = _y * columns + _x;
c010be65:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
c010be69:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010be6e:	0f af d0             	imul   %eax,%edx
c010be71:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010be75:	01 d0                	add    %edx,%eax
c010be77:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

    if (video_mem[2 * offset] == 0)
c010be7b:	8b 15 cc 33 11 c0    	mov    0xc01133cc,%edx
c010be81:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010be85:	01 c0                	add    %eax,%eax
c010be87:	01 d0                	add    %edx,%eax
c010be89:	0f b6 00             	movzbl (%eax),%eax
c010be8c:	84 c0                	test   %al,%al
c010be8e:	75 19                	jne    c010bea9 <gotoxy+0xfd>
    {
        video_mem[2 * offset + 1] = color;
c010be90:	a1 cc 33 11 c0       	mov    0xc01133cc,%eax
c010be95:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010be99:	01 d2                	add    %edx,%edx
c010be9b:	83 c2 01             	add    $0x1,%edx
c010be9e:	01 c2                	add    %eax,%edx
c010bea0:	0f b6 05 c8 33 11 c0 	movzbl 0xc01133c8,%eax
c010bea7:	88 02                	mov    %al,(%edx)
    }

    crtc_write(CRTC_CURSOR_LOCATION_HIGH, (uint8_t)(offset >> 8));
c010bea9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010bead:	66 c1 e8 08          	shr    $0x8,%ax
c010beb1:	0f b6 c0             	movzbl %al,%eax
c010beb4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010beb8:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010bebf:	e8 b0 0d 00 00       	call   c010cc74 <crtc_write>
    crtc_write(CRTC_CURSOR_LOCATION_LOW, (uint8_t)offset);
c010bec4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010bec8:	0f b6 c0             	movzbl %al,%eax
c010becb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010becf:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010bed6:	e8 99 0d 00 00       	call   c010cc74 <crtc_write>
}
c010bedb:	83 c4 34             	add    $0x34,%esp
c010bede:	5b                   	pop    %ebx
c010bedf:	5d                   	pop    %ebp
c010bee0:	c3                   	ret    

c010bee1 <cpu_dump>:
#include <idt.h>
#include <cpu.h>
#include <printf.h>

int cpu_dump(struct cpu_state* cpu, char *str)
{
c010bee1:	55                   	push   %ebp
c010bee2:	89 e5                	mov    %esp,%ebp
c010bee4:	53                   	push   %ebx
c010bee5:	83 ec 24             	sub    $0x24,%esp
    int len = 0;
c010bee8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    len += sprintf(str + len, "EAX:  %#010X    EBX:     %#010X\n",  cpu->eax, 	cpu->ebx);
c010beef:	8b 45 08             	mov    0x8(%ebp),%eax
c010bef2:	8b 50 1c             	mov    0x1c(%eax),%edx
c010bef5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bef8:	8b 40 28             	mov    0x28(%eax),%eax
c010befb:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010befe:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bf01:	01 d9                	add    %ebx,%ecx
c010bf03:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bf07:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf0b:	c7 44 24 04 50 1f 11 	movl   $0xc0111f50,0x4(%esp)
c010bf12:	c0 
c010bf13:	89 0c 24             	mov    %ecx,(%esp)
c010bf16:	e8 cf 72 ff ff       	call   c01031ea <sprintf>
c010bf1b:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "ECX:  %#010X    EDX:     %#010X\n",  cpu->ecx, 	cpu->edx);
c010bf1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf21:	8b 50 20             	mov    0x20(%eax),%edx
c010bf24:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf27:	8b 40 24             	mov    0x24(%eax),%eax
c010bf2a:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bf2d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bf30:	01 d9                	add    %ebx,%ecx
c010bf32:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bf36:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf3a:	c7 44 24 04 74 1f 11 	movl   $0xc0111f74,0x4(%esp)
c010bf41:	c0 
c010bf42:	89 0c 24             	mov    %ecx,(%esp)
c010bf45:	e8 a0 72 ff ff       	call   c01031ea <sprintf>
c010bf4a:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "ESI:  %#010X    EDI:     %#010X\n",  cpu->esi, 	cpu->edi);
c010bf4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf50:	8b 50 10             	mov    0x10(%eax),%edx
c010bf53:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf56:	8b 40 14             	mov    0x14(%eax),%eax
c010bf59:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bf5c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bf5f:	01 d9                	add    %ebx,%ecx
c010bf61:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bf65:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf69:	c7 44 24 04 98 1f 11 	movl   $0xc0111f98,0x4(%esp)
c010bf70:	c0 
c010bf71:	89 0c 24             	mov    %ecx,(%esp)
c010bf74:	e8 71 72 ff ff       	call   c01031ea <sprintf>
c010bf79:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "ESP:  %#010X    EBP:     %#010X\n",  cpu->esp, 	cpu->ebp);
c010bf7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf7f:	8b 50 18             	mov    0x18(%eax),%edx
c010bf82:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf85:	8b 40 40             	mov    0x40(%eax),%eax
c010bf88:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bf8b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bf8e:	01 d9                	add    %ebx,%ecx
c010bf90:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bf94:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf98:	c7 44 24 04 bc 1f 11 	movl   $0xc0111fbc,0x4(%esp)
c010bf9f:	c0 
c010bfa0:	89 0c 24             	mov    %ecx,(%esp)
c010bfa3:	e8 42 72 ff ff       	call   c01031ea <sprintf>
c010bfa8:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "CS:   %#010X    DS:      %#010X\n",  cpu->cs, 	cpu->ds);
c010bfab:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfae:	8b 50 0c             	mov    0xc(%eax),%edx
c010bfb1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfb4:	8b 40 38             	mov    0x38(%eax),%eax
c010bfb7:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bfba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bfbd:	01 d9                	add    %ebx,%ecx
c010bfbf:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bfc3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bfc7:	c7 44 24 04 e0 1f 11 	movl   $0xc0111fe0,0x4(%esp)
c010bfce:	c0 
c010bfcf:	89 0c 24             	mov    %ecx,(%esp)
c010bfd2:	e8 13 72 ff ff       	call   c01031ea <sprintf>
c010bfd7:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "SS:   %#010X    ES:      %#010X\n",  cpu->ss, 	cpu->es);
c010bfda:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfdd:	8b 50 08             	mov    0x8(%eax),%edx
c010bfe0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfe3:	8b 40 44             	mov    0x44(%eax),%eax
c010bfe6:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bfe9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bfec:	01 d9                	add    %ebx,%ecx
c010bfee:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bff2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bff6:	c7 44 24 04 04 20 11 	movl   $0xc0112004,0x4(%esp)
c010bffd:	c0 
c010bffe:	89 0c 24             	mov    %ecx,(%esp)
c010c001:	e8 e4 71 ff ff       	call   c01031ea <sprintf>
c010c006:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "GS:   %#010X    FS:      %#010X\n",  cpu->gs, 	cpu->fs);
c010c009:	8b 45 08             	mov    0x8(%ebp),%eax
c010c00c:	8b 50 04             	mov    0x4(%eax),%edx
c010c00f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c012:	8b 00                	mov    (%eax),%eax
c010c014:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010c017:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010c01a:	01 d9                	add    %ebx,%ecx
c010c01c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c020:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c024:	c7 44 24 04 28 20 11 	movl   $0xc0112028,0x4(%esp)
c010c02b:	c0 
c010c02c:	89 0c 24             	mov    %ecx,(%esp)
c010c02f:	e8 b6 71 ff ff       	call   c01031ea <sprintf>
c010c034:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "EIP:  %#010X    EFLAGS:  %#010X\n",  cpu->eip, 	cpu->eflags);
c010c037:	8b 45 08             	mov    0x8(%ebp),%eax
c010c03a:	8b 50 3c             	mov    0x3c(%eax),%edx
c010c03d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c040:	8b 40 34             	mov    0x34(%eax),%eax
c010c043:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010c046:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010c049:	01 d9                	add    %ebx,%ecx
c010c04b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c04f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c053:	c7 44 24 04 4c 20 11 	movl   $0xc011204c,0x4(%esp)
c010c05a:	c0 
c010c05b:	89 0c 24             	mov    %ecx,(%esp)
c010c05e:	e8 87 71 ff ff       	call   c01031ea <sprintf>
c010c063:	01 45 f4             	add    %eax,-0xc(%ebp)

    return len;
c010c066:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c069:	83 c4 24             	add    $0x24,%esp
c010c06c:	5b                   	pop    %ebx
c010c06d:	5d                   	pop    %ebp
c010c06e:	c3                   	ret    

c010c06f <panic>:


void panic(char *message)
{
c010c06f:	55                   	push   %ebp
c010c070:	89 e5                	mov    %esp,%ebp
c010c072:	57                   	push   %edi
c010c073:	56                   	push   %esi
c010c074:	53                   	push   %ebx
c010c075:	81 ec 2c 04 00 00    	sub    $0x42c,%esp
    char buffer[1024];
    int lines = 8;
c010c07b:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%ebp)
    int len = 0;
c010c082:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

    int i;
    len += sprintf(buffer + len, "      %c", 201);
c010c089:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c08c:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c092:	01 d0                	add    %edx,%eax
c010c094:	c7 44 24 08 c9 00 00 	movl   $0xc9,0x8(%esp)
c010c09b:	00 
c010c09c:	c7 44 24 04 6d 20 11 	movl   $0xc011206d,0x4(%esp)
c010c0a3:	c0 
c010c0a4:	89 04 24             	mov    %eax,(%esp)
c010c0a7:	e8 3e 71 ff ff       	call   c01031ea <sprintf>
c010c0ac:	01 45 e0             	add    %eax,-0x20(%ebp)
    for(i=0; i<66; i++) len += sprintf(buffer + len, "%c", 205);
c010c0af:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c0b6:	eb 2a                	jmp    c010c0e2 <panic+0x73>
c010c0b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c0bb:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c0c1:	01 d0                	add    %edx,%eax
c010c0c3:	c7 44 24 08 cd 00 00 	movl   $0xcd,0x8(%esp)
c010c0ca:	00 
c010c0cb:	c7 44 24 04 76 20 11 	movl   $0xc0112076,0x4(%esp)
c010c0d2:	c0 
c010c0d3:	89 04 24             	mov    %eax,(%esp)
c010c0d6:	e8 0f 71 ff ff       	call   c01031ea <sprintf>
c010c0db:	01 45 e0             	add    %eax,-0x20(%ebp)
c010c0de:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010c0e2:	83 7d dc 41          	cmpl   $0x41,-0x24(%ebp)
c010c0e6:	7e d0                	jle    c010c0b8 <panic+0x49>
    len += sprintf(buffer + len, "%c      \n", 187);
c010c0e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c0eb:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c0f1:	01 d0                	add    %edx,%eax
c010c0f3:	c7 44 24 08 bb 00 00 	movl   $0xbb,0x8(%esp)
c010c0fa:	00 
c010c0fb:	c7 44 24 04 79 20 11 	movl   $0xc0112079,0x4(%esp)
c010c102:	c0 
c010c103:	89 04 24             	mov    %eax,(%esp)
c010c106:	e8 df 70 ff ff       	call   c01031ea <sprintf>
c010c10b:	01 45 e0             	add    %eax,-0x20(%ebp)

    len += sprintf(buffer + len,
c010c10e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c111:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c117:	01 d0                	add    %edx,%eax
c010c119:	c7 44 24 0c ba 00 00 	movl   $0xba,0xc(%esp)
c010c120:	00 
c010c121:	c7 44 24 08 ba 00 00 	movl   $0xba,0x8(%esp)
c010c128:	00 
c010c129:	c7 44 24 04 84 20 11 	movl   $0xc0112084,0x4(%esp)
c010c130:	c0 
c010c131:	89 04 24             	mov    %eax,(%esp)
c010c134:	e8 b1 70 ff ff       	call   c01031ea <sprintf>
c010c139:	01 45 e0             	add    %eax,-0x20(%ebp)
                   "      %c                             Universe                             %c      \n",
                   186, 186);

    len += sprintf(buffer + len, "      %c", 200);
c010c13c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c13f:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c145:	01 d0                	add    %edx,%eax
c010c147:	c7 44 24 08 c8 00 00 	movl   $0xc8,0x8(%esp)
c010c14e:	00 
c010c14f:	c7 44 24 04 6d 20 11 	movl   $0xc011206d,0x4(%esp)
c010c156:	c0 
c010c157:	89 04 24             	mov    %eax,(%esp)
c010c15a:	e8 8b 70 ff ff       	call   c01031ea <sprintf>
c010c15f:	01 45 e0             	add    %eax,-0x20(%ebp)
    for(i=0; i<66; i++) len += sprintf(buffer + len, "%c", 205);
c010c162:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c169:	eb 2a                	jmp    c010c195 <panic+0x126>
c010c16b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c16e:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c174:	01 d0                	add    %edx,%eax
c010c176:	c7 44 24 08 cd 00 00 	movl   $0xcd,0x8(%esp)
c010c17d:	00 
c010c17e:	c7 44 24 04 76 20 11 	movl   $0xc0112076,0x4(%esp)
c010c185:	c0 
c010c186:	89 04 24             	mov    %eax,(%esp)
c010c189:	e8 5c 70 ff ff       	call   c01031ea <sprintf>
c010c18e:	01 45 e0             	add    %eax,-0x20(%ebp)
c010c191:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010c195:	83 7d dc 41          	cmpl   $0x41,-0x24(%ebp)
c010c199:	7e d0                	jle    c010c16b <panic+0xfc>
    len += sprintf(buffer + len, "%c      \n", 188);
c010c19b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c19e:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c1a4:	01 d0                	add    %edx,%eax
c010c1a6:	c7 44 24 08 bc 00 00 	movl   $0xbc,0x8(%esp)
c010c1ad:	00 
c010c1ae:	c7 44 24 04 79 20 11 	movl   $0xc0112079,0x4(%esp)
c010c1b5:	c0 
c010c1b6:	89 04 24             	mov    %eax,(%esp)
c010c1b9:	e8 2c 70 ff ff       	call   c01031ea <sprintf>
c010c1be:	01 45 e0             	add    %eax,-0x20(%ebp)

    len += sprintf(buffer + len,
c010c1c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c1c4:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c1ca:	01 d0                	add    %edx,%eax
c010c1cc:	ba d8 20 11 c0       	mov    $0xc01120d8,%edx
c010c1d1:	bb 96 01 00 00       	mov    $0x196,%ebx
c010c1d6:	89 c1                	mov    %eax,%ecx
c010c1d8:	83 e1 01             	and    $0x1,%ecx
c010c1db:	85 c9                	test   %ecx,%ecx
c010c1dd:	74 0e                	je     c010c1ed <panic+0x17e>
c010c1df:	0f b6 0a             	movzbl (%edx),%ecx
c010c1e2:	88 08                	mov    %cl,(%eax)
c010c1e4:	83 c0 01             	add    $0x1,%eax
c010c1e7:	83 c2 01             	add    $0x1,%edx
c010c1ea:	83 eb 01             	sub    $0x1,%ebx
c010c1ed:	89 c1                	mov    %eax,%ecx
c010c1ef:	83 e1 02             	and    $0x2,%ecx
c010c1f2:	85 c9                	test   %ecx,%ecx
c010c1f4:	74 0f                	je     c010c205 <panic+0x196>
c010c1f6:	0f b7 0a             	movzwl (%edx),%ecx
c010c1f9:	66 89 08             	mov    %cx,(%eax)
c010c1fc:	83 c0 02             	add    $0x2,%eax
c010c1ff:	83 c2 02             	add    $0x2,%edx
c010c202:	83 eb 02             	sub    $0x2,%ebx
c010c205:	89 d9                	mov    %ebx,%ecx
c010c207:	c1 e9 02             	shr    $0x2,%ecx
c010c20a:	89 c7                	mov    %eax,%edi
c010c20c:	89 d6                	mov    %edx,%esi
c010c20e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c210:	89 f2                	mov    %esi,%edx
c010c212:	89 f8                	mov    %edi,%eax
c010c214:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c219:	89 de                	mov    %ebx,%esi
c010c21b:	83 e6 02             	and    $0x2,%esi
c010c21e:	85 f6                	test   %esi,%esi
c010c220:	74 0b                	je     c010c22d <panic+0x1be>
c010c222:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c226:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c22a:	83 c1 02             	add    $0x2,%ecx
c010c22d:	83 e3 01             	and    $0x1,%ebx
c010c230:	85 db                	test   %ebx,%ebx
c010c232:	74 07                	je     c010c23b <panic+0x1cc>
c010c234:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c238:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c010c23b:	81 45 e0 95 01 00 00 	addl   $0x195,-0x20(%ebp)
                   "      Universe has been crashed. You have to restart your computer.             \n"
                   "                                                                                \n"
                   "                                                                                \n"
                  );

    while (*message != '\0')
c010c242:	eb 48                	jmp    c010c28c <panic+0x21d>
    {
        buffer[len++] = *message;
c010c244:	8b 45 08             	mov    0x8(%ebp),%eax
c010c247:	0f b6 00             	movzbl (%eax),%eax
c010c24a:	8d 8d dc fb ff ff    	lea    -0x424(%ebp),%ecx
c010c250:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c253:	01 ca                	add    %ecx,%edx
c010c255:	88 02                	mov    %al,(%edx)
c010c257:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)

        if (*message == '\n')
c010c25b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c25e:	0f b6 00             	movzbl (%eax),%eax
c010c261:	3c 0a                	cmp    $0xa,%al
c010c263:	75 23                	jne    c010c288 <panic+0x219>
        {
            len += sprintf(buffer + len, "      ");
c010c265:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c268:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c26e:	01 d0                	add    %edx,%eax
c010c270:	c7 00 20 20 20 20    	movl   $0x20202020,(%eax)
c010c276:	66 c7 40 04 20 20    	movw   $0x2020,0x4(%eax)
c010c27c:	c6 40 06 00          	movb   $0x0,0x6(%eax)
c010c280:	83 45 e0 06          	addl   $0x6,-0x20(%ebp)
            ++lines;
c010c284:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
        }

        ++message;
c010c288:	83 45 08 01          	addl   $0x1,0x8(%ebp)
                   "      Universe has been crashed. You have to restart your computer.             \n"
                   "                                                                                \n"
                   "                                                                                \n"
                  );

    while (*message != '\0')
c010c28c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c28f:	0f b6 00             	movzbl (%eax),%eax
c010c292:	84 c0                	test   %al,%al
c010c294:	75 ae                	jne    c010c244 <panic+0x1d5>
        }

        ++message;
    }

    len += sprintf (buffer + len,
c010c296:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c299:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c29f:	01 d0                	add    %edx,%eax
c010c2a1:	ba 70 22 11 c0       	mov    $0xc0112270,%edx
c010c2a6:	bb 4d 00 00 00       	mov    $0x4d,%ebx
c010c2ab:	89 c1                	mov    %eax,%ecx
c010c2ad:	83 e1 01             	and    $0x1,%ecx
c010c2b0:	85 c9                	test   %ecx,%ecx
c010c2b2:	74 0e                	je     c010c2c2 <panic+0x253>
c010c2b4:	0f b6 0a             	movzbl (%edx),%ecx
c010c2b7:	88 08                	mov    %cl,(%eax)
c010c2b9:	83 c0 01             	add    $0x1,%eax
c010c2bc:	83 c2 01             	add    $0x1,%edx
c010c2bf:	83 eb 01             	sub    $0x1,%ebx
c010c2c2:	89 c1                	mov    %eax,%ecx
c010c2c4:	83 e1 02             	and    $0x2,%ecx
c010c2c7:	85 c9                	test   %ecx,%ecx
c010c2c9:	74 0f                	je     c010c2da <panic+0x26b>
c010c2cb:	0f b7 0a             	movzwl (%edx),%ecx
c010c2ce:	66 89 08             	mov    %cx,(%eax)
c010c2d1:	83 c0 02             	add    $0x2,%eax
c010c2d4:	83 c2 02             	add    $0x2,%edx
c010c2d7:	83 eb 02             	sub    $0x2,%ebx
c010c2da:	89 d9                	mov    %ebx,%ecx
c010c2dc:	c1 e9 02             	shr    $0x2,%ecx
c010c2df:	89 c7                	mov    %eax,%edi
c010c2e1:	89 d6                	mov    %edx,%esi
c010c2e3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c2e5:	89 f2                	mov    %esi,%edx
c010c2e7:	89 f8                	mov    %edi,%eax
c010c2e9:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c2ee:	89 de                	mov    %ebx,%esi
c010c2f0:	83 e6 02             	and    $0x2,%esi
c010c2f3:	85 f6                	test   %esi,%esi
c010c2f5:	74 0b                	je     c010c302 <panic+0x293>
c010c2f7:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c2fb:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c2ff:	83 c1 02             	add    $0x2,%ecx
c010c302:	83 e3 01             	and    $0x1,%ebx
c010c305:	85 db                	test   %ebx,%ebx
c010c307:	74 07                	je     c010c310 <panic+0x2a1>
c010c309:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c30d:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c010c310:	83 45 e0 4c          	addl   $0x4c,-0x20(%ebp)

    //set_color(WHITE | RED << 4);
    //clear_screen();

    //gotoxy(0, (25 / 2) - (lines / 2) - 1);
    puts(buffer);
c010c314:	8d 85 dc fb ff ff    	lea    -0x424(%ebp),%eax
c010c31a:	89 04 24             	mov    %eax,(%esp)
c010c31d:	e8 92 f9 ff ff       	call   c010bcb4 <puts>
    printf("\n\n      ");
c010c322:	c7 04 24 bd 22 11 c0 	movl   $0xc01122bd,(%esp)
c010c329:	e8 4f 6e ff ff       	call   c010317d <printf>

    halt();
c010c32e:	e8 12 1e 00 00       	call   c010e145 <halt>
}
c010c333:	81 c4 2c 04 00 00    	add    $0x42c,%esp
c010c339:	5b                   	pop    %ebx
c010c33a:	5e                   	pop    %esi
c010c33b:	5f                   	pop    %edi
c010c33c:	5d                   	pop    %ebp
c010c33d:	c3                   	ret    

c010c33e <exc_panic>:

// just used in case of untreated exceptions
void exc_panic(struct cpu_state* cpu)
{
c010c33e:	55                   	push   %ebp
c010c33f:	89 e5                	mov    %esp,%ebp
c010c341:	81 ec 28 02 00 00    	sub    $0x228,%esp
    char message[512];
    char *exception = exception_messages[cpu->intr];
c010c347:	8b 45 08             	mov    0x8(%ebp),%eax
c010c34a:	8b 40 2c             	mov    0x2c(%eax),%eax
c010c34d:	8b 04 85 e0 33 11 c0 	mov    -0x3feecc20(,%eax,4),%eax
c010c354:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
c010c357:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    len = sprintf(message, "%s\n\n", exception);
c010c35e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c361:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c365:	c7 44 24 04 c6 22 11 	movl   $0xc01122c6,0x4(%esp)
c010c36c:	c0 
c010c36d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c010c373:	89 04 24             	mov    %eax,(%esp)
c010c376:	e8 6f 6e ff ff       	call   c01031ea <sprintf>
c010c37b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cpu_dump(cpu, message + len);
c010c37e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c381:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
c010c387:	01 d0                	add    %edx,%eax
c010c389:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c38d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c390:	89 04 24             	mov    %eax,(%esp)
c010c393:	e8 49 fb ff ff       	call   c010bee1 <cpu_dump>

    panic(message);
c010c398:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c010c39e:	89 04 24             	mov    %eax,(%esp)
c010c3a1:	e8 c9 fc ff ff       	call   c010c06f <panic>
}
c010c3a6:	c9                   	leave  
c010c3a7:	c3                   	ret    

c010c3a8 <winpanic>:

/* easter egg! */
void winpanic(char *message)
{
c010c3a8:	55                   	push   %ebp
c010c3a9:	89 e5                	mov    %esp,%ebp
c010c3ab:	83 ec 18             	sub    $0x18,%esp
    set_color(WHITE | BLUE << 4);
c010c3ae:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c010c3b5:	e8 cf f9 ff ff       	call   c010bd89 <set_color>
    clear_screen();
c010c3ba:	e8 6c f9 ff ff       	call   c010bd2b <clear_screen>

    gotoxy(37, 8);
c010c3bf:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010c3c6:	00 
c010c3c7:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010c3ce:	e8 d9 f9 ff ff       	call   c010bdac <gotoxy>
    set_color(BLUE | LIGHT_GRAY << 4);
c010c3d3:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c010c3da:	e8 aa f9 ff ff       	call   c010bd89 <set_color>
    printf(" Windows");
c010c3df:	c7 04 24 cb 22 11 c0 	movl   $0xc01122cb,(%esp)
c010c3e6:	e8 92 6d ff ff       	call   c010317d <printf>
    set_color(WHITE | BLUE << 4);
c010c3eb:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c010c3f2:	e8 92 f9 ff ff       	call   c010bd89 <set_color>
    printf("\n\n      ");
c010c3f7:	c7 04 24 bd 22 11 c0 	movl   $0xc01122bd,(%esp)
c010c3fe:	e8 7a 6d ff ff       	call   c010317d <printf>
    while (*message != '\0')
c010c403:	eb 2b                	jmp    c010c430 <winpanic+0x88>
    {
        putchar(*message);
c010c405:	8b 45 08             	mov    0x8(%ebp),%eax
c010c408:	0f b6 00             	movzbl (%eax),%eax
c010c40b:	0f be c0             	movsbl %al,%eax
c010c40e:	89 04 24             	mov    %eax,(%esp)
c010c411:	e8 3f f7 ff ff       	call   c010bb55 <putchar>

        if (*message == '\n')
c010c416:	8b 45 08             	mov    0x8(%ebp),%eax
c010c419:	0f b6 00             	movzbl (%eax),%eax
c010c41c:	3c 0a                	cmp    $0xa,%al
c010c41e:	75 0c                	jne    c010c42c <winpanic+0x84>
        {
            printf("      ");
c010c420:	c7 04 24 d4 22 11 c0 	movl   $0xc01122d4,(%esp)
c010c427:	e8 51 6d ff ff       	call   c010317d <printf>
        }

        ++message;
c010c42c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    gotoxy(37, 8);
    set_color(BLUE | LIGHT_GRAY << 4);
    printf(" Windows");
    set_color(WHITE | BLUE << 4);
    printf("\n\n      ");
    while (*message != '\0')
c010c430:	8b 45 08             	mov    0x8(%ebp),%eax
c010c433:	0f b6 00             	movzbl (%eax),%eax
c010c436:	84 c0                	test   %al,%al
c010c438:	75 cb                	jne    c010c405 <winpanic+0x5d>

        ++message;
    }
    //printf("%s\n", message);

    printf("\n\n      *  Druecken Sie eine beliebige Taste, um die Anwendung abzubrechen.\n");
c010c43a:	c7 04 24 dc 22 11 c0 	movl   $0xc01122dc,(%esp)
c010c441:	e8 6e f8 ff ff       	call   c010bcb4 <puts>
    printf("      *  Druecken Sie Strg+Alt+Entf, um den Computer neu zu\n");
c010c446:	c7 04 24 28 23 11 c0 	movl   $0xc0112328,(%esp)
c010c44d:	e8 62 f8 ff ff       	call   c010bcb4 <puts>
    printf("      starten. nicht gespeicherte Daten gehen dabei verloren.\n");
c010c452:	c7 04 24 64 23 11 c0 	movl   $0xc0112364,(%esp)
c010c459:	e8 56 f8 ff ff       	call   c010bcb4 <puts>
    halt();
c010c45e:	e8 e2 1c 00 00       	call   c010e145 <halt>
}
c010c463:	c9                   	leave  
c010c464:	c3                   	ret    

c010c465 <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010c465:	55                   	push   %ebp
c010c466:	89 e5                	mov    %esp,%ebp
c010c468:	83 ec 08             	sub    $0x8,%esp
c010c46b:	8b 55 08             	mov    0x8(%ebp),%edx
c010c46e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c471:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010c475:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010c478:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010c47c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010c480:	ee                   	out    %al,(%dx)
}
c010c481:	c9                   	leave  
c010c482:	c3                   	ret    

c010c483 <BCD_ENCODE>:

// WARNING: ONLY values up to 99
#define BCD_DECODE(x) ((0b1111 & x) + (10 * (((0b1111 << 4) & x) >> 4)))

static inline uint8_t BCD_ENCODE(char *bcd_str, int x)
{
c010c483:	55                   	push   %ebp
c010c484:	89 e5                	mov    %esp,%ebp
c010c486:	83 ec 18             	sub    $0x18,%esp
    sprintf(bcd_str, "%d", x);
c010c489:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c48c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c490:	c7 44 24 04 a2 23 11 	movl   $0xc01123a2,0x4(%esp)
c010c497:	c0 
c010c498:	8b 45 08             	mov    0x8(%ebp),%eax
c010c49b:	89 04 24             	mov    %eax,(%esp)
c010c49e:	e8 47 6d ff ff       	call   c01031ea <sprintf>
    return (uint8_t)bcd_str;
c010c4a3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c4a6:	c9                   	leave  
c010c4a7:	c3                   	ret    

c010c4a8 <INIT_CLOCK>:
int timer_freq = 0;
struct time *startup;
uint64_t up_time;

void INIT_CLOCK(int freq)
{
c010c4a8:	55                   	push   %ebp
c010c4a9:	89 e5                	mov    %esp,%ebp
c010c4ab:	83 ec 18             	sub    $0x18,%esp
    startup = malloc(sizeof(struct time));
c010c4ae:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c010c4b5:	e8 ec 11 00 00       	call   c010d6a6 <malloc>
c010c4ba:	a3 3c a0 11 c0       	mov    %eax,0xc011a03c
    up_time = 0;
c010c4bf:	c7 05 40 a0 11 c0 00 	movl   $0x0,0xc011a040
c010c4c6:	00 00 00 
c010c4c9:	c7 05 44 a0 11 c0 00 	movl   $0x0,0xc011a044
c010c4d0:	00 00 00 
    INIT_RTC();
c010c4d3:	e8 83 00 00 00       	call   c010c55b <INIT_RTC>
    INIT_PIT(freq);
c010c4d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4db:	89 04 24             	mov    %eax,(%esp)
c010c4de:	e8 51 00 00 00       	call   c010c534 <INIT_PIT>
}
c010c4e3:	c9                   	leave  
c010c4e4:	c3                   	ret    

c010c4e5 <set_pit_freq>:
 *
 * @param freqency
 * @return void
 */
void set_pit_freq(int freq)
{
c010c4e5:	55                   	push   %ebp
c010c4e6:	89 e5                	mov    %esp,%ebp
c010c4e8:	83 ec 18             	sub    $0x18,%esp
    timer_freq = freq;
c010c4eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4ee:	a3 2c 80 11 c0       	mov    %eax,0xc011802c
    int counter = 1193182 / freq;
c010c4f3:	b8 de 34 12 00       	mov    $0x1234de,%eax
c010c4f8:	89 c2                	mov    %eax,%edx
c010c4fa:	c1 fa 1f             	sar    $0x1f,%edx
c010c4fd:	f7 7d 08             	idivl  0x8(%ebp)
c010c500:	89 45 fc             	mov    %eax,-0x4(%ebp)
    outb(0x40,counter & 0xFF);
c010c503:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c506:	0f b6 c0             	movzbl %al,%eax
c010c509:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c50d:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010c514:	e8 4c ff ff ff       	call   c010c465 <outb>
    outb(0x40,counter >> 8);
c010c519:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c51c:	c1 f8 08             	sar    $0x8,%eax
c010c51f:	0f b6 c0             	movzbl %al,%eax
c010c522:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c526:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010c52d:	e8 33 ff ff ff       	call   c010c465 <outb>
}
c010c532:	c9                   	leave  
c010c533:	c3                   	ret    

c010c534 <INIT_PIT>:
 *
 * @param frequency
 * @return void
 */
void INIT_PIT(int freq)
{
c010c534:	55                   	push   %ebp
c010c535:	89 e5                	mov    %esp,%ebp
c010c537:	83 ec 08             	sub    $0x8,%esp
    outb(0x43, 0x34);
c010c53a:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c010c541:	00 
c010c542:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
c010c549:	e8 17 ff ff ff       	call   c010c465 <outb>
    set_pit_freq(freq);
c010c54e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c551:	89 04 24             	mov    %eax,(%esp)
c010c554:	e8 8c ff ff ff       	call   c010c4e5 <set_pit_freq>
}
c010c559:	c9                   	leave  
c010c55a:	c3                   	ret    

c010c55b <INIT_RTC>:
 *
 * @param void
 * @return void
 */
void INIT_RTC(void)
{
c010c55b:	55                   	push   %ebp
c010c55c:	89 e5                	mov    %esp,%ebp
c010c55e:	83 ec 18             	sub    $0x18,%esp
    cmos = malloc(sizeof(struct cmos_data));
c010c561:	c7 04 24 13 00 00 00 	movl   $0x13,(%esp)
c010c568:	e8 39 11 00 00       	call   c010d6a6 <malloc>
c010c56d:	a3 38 a0 11 c0       	mov    %eax,0xc011a038
    get_cmos_data(cmos);
c010c572:	a1 38 a0 11 c0       	mov    0xc011a038,%eax
c010c577:	89 04 24             	mov    %eax,(%esp)
c010c57a:	e8 d0 04 00 00       	call   c010ca4f <get_cmos_data>
    update_time(startup);
c010c57f:	a1 3c a0 11 c0       	mov    0xc011a03c,%eax
c010c584:	89 04 24             	mov    %eax,(%esp)
c010c587:	e8 46 00 00 00       	call   c010c5d2 <update_time>
}
c010c58c:	c9                   	leave  
c010c58d:	c3                   	ret    

c010c58e <sync_sys_clock>:

void sync_sys_clock()
{
c010c58e:	55                   	push   %ebp
c010c58f:	89 e5                	mov    %esp,%ebp
c010c591:	53                   	push   %ebx
c010c592:	83 ec 0c             	sub    $0xc,%esp
    up_time += 1000/timer_freq;
c010c595:	8b 15 2c 80 11 c0    	mov    0xc011802c,%edx
c010c59b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c59e:	b8 e8 03 00 00       	mov    $0x3e8,%eax
c010c5a3:	89 c2                	mov    %eax,%edx
c010c5a5:	c1 fa 1f             	sar    $0x1f,%edx
c010c5a8:	f7 7d f4             	idivl  -0xc(%ebp)
c010c5ab:	89 c1                	mov    %eax,%ecx
c010c5ad:	89 c3                	mov    %eax,%ebx
c010c5af:	c1 fb 1f             	sar    $0x1f,%ebx
c010c5b2:	a1 40 a0 11 c0       	mov    0xc011a040,%eax
c010c5b7:	8b 15 44 a0 11 c0    	mov    0xc011a044,%edx
c010c5bd:	01 c8                	add    %ecx,%eax
c010c5bf:	11 da                	adc    %ebx,%edx
c010c5c1:	a3 40 a0 11 c0       	mov    %eax,0xc011a040
c010c5c6:	89 15 44 a0 11 c0    	mov    %edx,0xc011a044
}
c010c5cc:	83 c4 0c             	add    $0xc,%esp
c010c5cf:	5b                   	pop    %ebx
c010c5d0:	5d                   	pop    %ebp
c010c5d1:	c3                   	ret    

c010c5d2 <update_time>:
 * Updates the time from CMOS-RTC
 *
 * @param void
 */
void update_time(struct time *time)
{
c010c5d2:	55                   	push   %ebp
c010c5d3:	89 e5                	mov    %esp,%ebp
c010c5d5:	53                   	push   %ebx
c010c5d6:	83 ec 14             	sub    $0x14,%esp
    time->second =       BCD_DECODE(cmos_read_byte(0x00));
c010c5d9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c5e0:	e8 c7 05 00 00       	call   c010cbac <cmos_read_byte>
c010c5e5:	89 c3                	mov    %eax,%ebx
c010c5e7:	83 e3 0f             	and    $0xf,%ebx
c010c5ea:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c5f1:	e8 b6 05 00 00       	call   c010cbac <cmos_read_byte>
c010c5f6:	89 c2                	mov    %eax,%edx
c010c5f8:	c0 ea 04             	shr    $0x4,%dl
c010c5fb:	89 d0                	mov    %edx,%eax
c010c5fd:	c1 e0 02             	shl    $0x2,%eax
c010c600:	01 d0                	add    %edx,%eax
c010c602:	01 c0                	add    %eax,%eax
c010c604:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c607:	8b 45 08             	mov    0x8(%ebp),%eax
c010c60a:	88 10                	mov    %dl,(%eax)
    time->alarm_sec =    BCD_DECODE(cmos_read_byte(0x01));
c010c60c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c613:	e8 94 05 00 00       	call   c010cbac <cmos_read_byte>
c010c618:	89 c3                	mov    %eax,%ebx
c010c61a:	83 e3 0f             	and    $0xf,%ebx
c010c61d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c624:	e8 83 05 00 00       	call   c010cbac <cmos_read_byte>
c010c629:	89 c2                	mov    %eax,%edx
c010c62b:	c0 ea 04             	shr    $0x4,%dl
c010c62e:	89 d0                	mov    %edx,%eax
c010c630:	c1 e0 02             	shl    $0x2,%eax
c010c633:	01 d0                	add    %edx,%eax
c010c635:	01 c0                	add    %eax,%eax
c010c637:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c63a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c63d:	88 50 01             	mov    %dl,0x1(%eax)
    time->minute =       BCD_DECODE(cmos_read_byte(0x02));
c010c640:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c647:	e8 60 05 00 00       	call   c010cbac <cmos_read_byte>
c010c64c:	89 c3                	mov    %eax,%ebx
c010c64e:	83 e3 0f             	and    $0xf,%ebx
c010c651:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c658:	e8 4f 05 00 00       	call   c010cbac <cmos_read_byte>
c010c65d:	89 c2                	mov    %eax,%edx
c010c65f:	c0 ea 04             	shr    $0x4,%dl
c010c662:	89 d0                	mov    %edx,%eax
c010c664:	c1 e0 02             	shl    $0x2,%eax
c010c667:	01 d0                	add    %edx,%eax
c010c669:	01 c0                	add    %eax,%eax
c010c66b:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c66e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c671:	88 50 02             	mov    %dl,0x2(%eax)
    time->alarm_min =    BCD_DECODE(cmos_read_byte(0x03));
c010c674:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010c67b:	e8 2c 05 00 00       	call   c010cbac <cmos_read_byte>
c010c680:	89 c3                	mov    %eax,%ebx
c010c682:	83 e3 0f             	and    $0xf,%ebx
c010c685:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010c68c:	e8 1b 05 00 00       	call   c010cbac <cmos_read_byte>
c010c691:	89 c2                	mov    %eax,%edx
c010c693:	c0 ea 04             	shr    $0x4,%dl
c010c696:	89 d0                	mov    %edx,%eax
c010c698:	c1 e0 02             	shl    $0x2,%eax
c010c69b:	01 d0                	add    %edx,%eax
c010c69d:	01 c0                	add    %eax,%eax
c010c69f:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c6a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6a5:	88 50 03             	mov    %dl,0x3(%eax)
    time->hour =         BCD_DECODE(cmos_read_byte(0x04));
c010c6a8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010c6af:	e8 f8 04 00 00       	call   c010cbac <cmos_read_byte>
c010c6b4:	89 c3                	mov    %eax,%ebx
c010c6b6:	83 e3 0f             	and    $0xf,%ebx
c010c6b9:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010c6c0:	e8 e7 04 00 00       	call   c010cbac <cmos_read_byte>
c010c6c5:	89 c2                	mov    %eax,%edx
c010c6c7:	c0 ea 04             	shr    $0x4,%dl
c010c6ca:	89 d0                	mov    %edx,%eax
c010c6cc:	c1 e0 02             	shl    $0x2,%eax
c010c6cf:	01 d0                	add    %edx,%eax
c010c6d1:	01 c0                	add    %eax,%eax
c010c6d3:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c6d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6d9:	88 50 04             	mov    %dl,0x4(%eax)
    time->alarm_hour =   BCD_DECODE(cmos_read_byte(0x05));
c010c6dc:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010c6e3:	e8 c4 04 00 00       	call   c010cbac <cmos_read_byte>
c010c6e8:	89 c3                	mov    %eax,%ebx
c010c6ea:	83 e3 0f             	and    $0xf,%ebx
c010c6ed:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010c6f4:	e8 b3 04 00 00       	call   c010cbac <cmos_read_byte>
c010c6f9:	89 c2                	mov    %eax,%edx
c010c6fb:	c0 ea 04             	shr    $0x4,%dl
c010c6fe:	89 d0                	mov    %edx,%eax
c010c700:	c1 e0 02             	shl    $0x2,%eax
c010c703:	01 d0                	add    %edx,%eax
c010c705:	01 c0                	add    %eax,%eax
c010c707:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c70a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c70d:	88 50 05             	mov    %dl,0x5(%eax)
    time->week_day =     BCD_DECODE(cmos_read_byte(0x06)) - 1;
c010c710:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010c717:	e8 90 04 00 00       	call   c010cbac <cmos_read_byte>
c010c71c:	89 c3                	mov    %eax,%ebx
c010c71e:	83 e3 0f             	and    $0xf,%ebx
c010c721:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010c728:	e8 7f 04 00 00       	call   c010cbac <cmos_read_byte>
c010c72d:	89 c2                	mov    %eax,%edx
c010c72f:	c0 ea 04             	shr    $0x4,%dl
c010c732:	89 d0                	mov    %edx,%eax
c010c734:	c1 e0 02             	shl    $0x2,%eax
c010c737:	01 d0                	add    %edx,%eax
c010c739:	01 c0                	add    %eax,%eax
c010c73b:	01 d8                	add    %ebx,%eax
c010c73d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c740:	8b 45 08             	mov    0x8(%ebp),%eax
c010c743:	88 50 06             	mov    %dl,0x6(%eax)
    time->day_in_month = BCD_DECODE(cmos_read_byte(0x07));
c010c746:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010c74d:	e8 5a 04 00 00       	call   c010cbac <cmos_read_byte>
c010c752:	89 c3                	mov    %eax,%ebx
c010c754:	83 e3 0f             	and    $0xf,%ebx
c010c757:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010c75e:	e8 49 04 00 00       	call   c010cbac <cmos_read_byte>
c010c763:	89 c2                	mov    %eax,%edx
c010c765:	c0 ea 04             	shr    $0x4,%dl
c010c768:	89 d0                	mov    %edx,%eax
c010c76a:	c1 e0 02             	shl    $0x2,%eax
c010c76d:	01 d0                	add    %edx,%eax
c010c76f:	01 c0                	add    %eax,%eax
c010c771:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c774:	8b 45 08             	mov    0x8(%ebp),%eax
c010c777:	88 50 07             	mov    %dl,0x7(%eax)
    time->month =        BCD_DECODE(cmos_read_byte(0x08));
c010c77a:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010c781:	e8 26 04 00 00       	call   c010cbac <cmos_read_byte>
c010c786:	89 c3                	mov    %eax,%ebx
c010c788:	83 e3 0f             	and    $0xf,%ebx
c010c78b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010c792:	e8 15 04 00 00       	call   c010cbac <cmos_read_byte>
c010c797:	89 c2                	mov    %eax,%edx
c010c799:	c0 ea 04             	shr    $0x4,%dl
c010c79c:	89 d0                	mov    %edx,%eax
c010c79e:	c1 e0 02             	shl    $0x2,%eax
c010c7a1:	01 d0                	add    %edx,%eax
c010c7a3:	01 c0                	add    %eax,%eax
c010c7a5:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c7a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7ab:	88 50 08             	mov    %dl,0x8(%eax)
    time->year =         BCD_DECODE(cmos_read_byte(0x09));
c010c7ae:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010c7b5:	e8 f2 03 00 00       	call   c010cbac <cmos_read_byte>
c010c7ba:	89 c3                	mov    %eax,%ebx
c010c7bc:	83 e3 0f             	and    $0xf,%ebx
c010c7bf:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010c7c6:	e8 e1 03 00 00       	call   c010cbac <cmos_read_byte>
c010c7cb:	89 c2                	mov    %eax,%edx
c010c7cd:	c0 ea 04             	shr    $0x4,%dl
c010c7d0:	89 d0                	mov    %edx,%eax
c010c7d2:	c1 e0 02             	shl    $0x2,%eax
c010c7d5:	01 d0                	add    %edx,%eax
c010c7d7:	01 c0                	add    %eax,%eax
c010c7d9:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c7dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7df:	88 50 09             	mov    %dl,0x9(%eax)
    time->century =      BCD_DECODE(cmos_read_byte(0x32));
c010c7e2:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010c7e9:	e8 be 03 00 00       	call   c010cbac <cmos_read_byte>
c010c7ee:	89 c3                	mov    %eax,%ebx
c010c7f0:	83 e3 0f             	and    $0xf,%ebx
c010c7f3:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010c7fa:	e8 ad 03 00 00       	call   c010cbac <cmos_read_byte>
c010c7ff:	89 c2                	mov    %eax,%edx
c010c801:	c0 ea 04             	shr    $0x4,%dl
c010c804:	89 d0                	mov    %edx,%eax
c010c806:	c1 e0 02             	shl    $0x2,%eax
c010c809:	01 d0                	add    %edx,%eax
c010c80b:	01 c0                	add    %eax,%eax
c010c80d:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c810:	8b 45 08             	mov    0x8(%ebp),%eax
c010c813:	88 50 0a             	mov    %dl,0xa(%eax)
}
c010c816:	83 c4 14             	add    $0x14,%esp
c010c819:	5b                   	pop    %ebx
c010c81a:	5d                   	pop    %ebp
c010c81b:	c3                   	ret    

c010c81c <change_time>:
 * Changes the Time from CMOS
 *
 * @param time New time
 */
void change_time(struct time *time)
{
c010c81c:	55                   	push   %ebp
c010c81d:	89 e5                	mov    %esp,%ebp
c010c81f:	83 ec 28             	sub    $0x28,%esp
    char bcd_str[2];
    cmos_write_byte(0x00, BCD_ENCODE(bcd_str, time->second));
c010c822:	8b 45 08             	mov    0x8(%ebp),%eax
c010c825:	0f b6 00             	movzbl (%eax),%eax
c010c828:	0f b6 c0             	movzbl %al,%eax
c010c82b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c82f:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c832:	89 04 24             	mov    %eax,(%esp)
c010c835:	e8 49 fc ff ff       	call   c010c483 <BCD_ENCODE>
c010c83a:	0f b6 c0             	movzbl %al,%eax
c010c83d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c841:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c848:	e8 ad 03 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x01, BCD_ENCODE(bcd_str, time->alarm_sec));
c010c84d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c850:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010c854:	0f b6 c0             	movzbl %al,%eax
c010c857:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c85b:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c85e:	89 04 24             	mov    %eax,(%esp)
c010c861:	e8 1d fc ff ff       	call   c010c483 <BCD_ENCODE>
c010c866:	0f b6 c0             	movzbl %al,%eax
c010c869:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c86d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c874:	e8 81 03 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x02, BCD_ENCODE(bcd_str, time->minute));
c010c879:	8b 45 08             	mov    0x8(%ebp),%eax
c010c87c:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010c880:	0f b6 c0             	movzbl %al,%eax
c010c883:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c887:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c88a:	89 04 24             	mov    %eax,(%esp)
c010c88d:	e8 f1 fb ff ff       	call   c010c483 <BCD_ENCODE>
c010c892:	0f b6 c0             	movzbl %al,%eax
c010c895:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c899:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c8a0:	e8 55 03 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x03, BCD_ENCODE(bcd_str, time->alarm_min));
c010c8a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8a8:	0f b6 40 03          	movzbl 0x3(%eax),%eax
c010c8ac:	0f b6 c0             	movzbl %al,%eax
c010c8af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8b3:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c8b6:	89 04 24             	mov    %eax,(%esp)
c010c8b9:	e8 c5 fb ff ff       	call   c010c483 <BCD_ENCODE>
c010c8be:	0f b6 c0             	movzbl %al,%eax
c010c8c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8c5:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010c8cc:	e8 29 03 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x04, BCD_ENCODE(bcd_str, time->hour));
c010c8d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8d4:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010c8d8:	0f b6 c0             	movzbl %al,%eax
c010c8db:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8df:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c8e2:	89 04 24             	mov    %eax,(%esp)
c010c8e5:	e8 99 fb ff ff       	call   c010c483 <BCD_ENCODE>
c010c8ea:	0f b6 c0             	movzbl %al,%eax
c010c8ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8f1:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010c8f8:	e8 fd 02 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x05, BCD_ENCODE(bcd_str, time->alarm_hour));
c010c8fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c900:	0f b6 40 05          	movzbl 0x5(%eax),%eax
c010c904:	0f b6 c0             	movzbl %al,%eax
c010c907:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c90b:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c90e:	89 04 24             	mov    %eax,(%esp)
c010c911:	e8 6d fb ff ff       	call   c010c483 <BCD_ENCODE>
c010c916:	0f b6 c0             	movzbl %al,%eax
c010c919:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c91d:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010c924:	e8 d1 02 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x06, BCD_ENCODE(bcd_str, time->week_day));
c010c929:	8b 45 08             	mov    0x8(%ebp),%eax
c010c92c:	0f b6 40 06          	movzbl 0x6(%eax),%eax
c010c930:	0f b6 c0             	movzbl %al,%eax
c010c933:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c937:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c93a:	89 04 24             	mov    %eax,(%esp)
c010c93d:	e8 41 fb ff ff       	call   c010c483 <BCD_ENCODE>
c010c942:	0f b6 c0             	movzbl %al,%eax
c010c945:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c949:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010c950:	e8 a5 02 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x07, BCD_ENCODE(bcd_str, time->day_in_month));
c010c955:	8b 45 08             	mov    0x8(%ebp),%eax
c010c958:	0f b6 40 07          	movzbl 0x7(%eax),%eax
c010c95c:	0f b6 c0             	movzbl %al,%eax
c010c95f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c963:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c966:	89 04 24             	mov    %eax,(%esp)
c010c969:	e8 15 fb ff ff       	call   c010c483 <BCD_ENCODE>
c010c96e:	0f b6 c0             	movzbl %al,%eax
c010c971:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c975:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010c97c:	e8 79 02 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x08, BCD_ENCODE(bcd_str, time->month));
c010c981:	8b 45 08             	mov    0x8(%ebp),%eax
c010c984:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c010c988:	0f b6 c0             	movzbl %al,%eax
c010c98b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c98f:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c992:	89 04 24             	mov    %eax,(%esp)
c010c995:	e8 e9 fa ff ff       	call   c010c483 <BCD_ENCODE>
c010c99a:	0f b6 c0             	movzbl %al,%eax
c010c99d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9a1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010c9a8:	e8 4d 02 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x09, BCD_ENCODE(bcd_str, time->year));
c010c9ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9b0:	0f b6 40 09          	movzbl 0x9(%eax),%eax
c010c9b4:	0f b6 c0             	movzbl %al,%eax
c010c9b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9bb:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c9be:	89 04 24             	mov    %eax,(%esp)
c010c9c1:	e8 bd fa ff ff       	call   c010c483 <BCD_ENCODE>
c010c9c6:	0f b6 c0             	movzbl %al,%eax
c010c9c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9cd:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010c9d4:	e8 21 02 00 00       	call   c010cbfa <cmos_write_byte>
    cmos_write_byte(0x32, BCD_ENCODE(bcd_str, time->century));
c010c9d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9dc:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c010c9e0:	0f b6 c0             	movzbl %al,%eax
c010c9e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9e7:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c9ea:	89 04 24             	mov    %eax,(%esp)
c010c9ed:	e8 91 fa ff ff       	call   c010c483 <BCD_ENCODE>
c010c9f2:	0f b6 c0             	movzbl %al,%eax
c010c9f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9f9:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010ca00:	e8 f5 01 00 00       	call   c010cbfa <cmos_write_byte>
c010ca05:	c9                   	leave  
c010ca06:	c3                   	ret    

c010ca07 <inb>:
#include <stdint.h>



static inline uint8_t inb(uint16_t port)
{
c010ca07:	55                   	push   %ebp
c010ca08:	89 e5                	mov    %esp,%ebp
c010ca0a:	53                   	push   %ebx
c010ca0b:	83 ec 14             	sub    $0x14,%esp
c010ca0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca11:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    uint8_t result;
    asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c010ca15:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010ca19:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010ca1d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010ca21:	ec                   	in     (%dx),%al
c010ca22:	89 c3                	mov    %eax,%ebx
c010ca24:	88 5d fb             	mov    %bl,-0x5(%ebp)
    return result;
c010ca27:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c010ca2b:	83 c4 14             	add    $0x14,%esp
c010ca2e:	5b                   	pop    %ebx
c010ca2f:	5d                   	pop    %ebp
c010ca30:	c3                   	ret    

c010ca31 <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010ca31:	55                   	push   %ebp
c010ca32:	89 e5                	mov    %esp,%ebp
c010ca34:	83 ec 08             	sub    $0x8,%esp
c010ca37:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca3d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ca41:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010ca44:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ca48:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ca4c:	ee                   	out    %al,(%dx)
}
c010ca4d:	c9                   	leave  
c010ca4e:	c3                   	ret    

c010ca4f <get_cmos_data>:
 *
 * @param buffer
 * @return void
 */
void get_cmos_data(struct cmos_data *cmos)
{
c010ca4f:	55                   	push   %ebp
c010ca50:	89 e5                	mov    %esp,%ebp
c010ca52:	83 ec 18             	sub    $0x18,%esp
    cmos->registers.register_a = cmos_read_byte(0x0A);
c010ca55:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010ca5c:	e8 4b 01 00 00       	call   c010cbac <cmos_read_byte>
c010ca61:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca64:	88 02                	mov    %al,(%edx)
    cmos->registers.register_b = cmos_read_byte(0x0B);
c010ca66:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c010ca6d:	e8 3a 01 00 00       	call   c010cbac <cmos_read_byte>
c010ca72:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca75:	88 42 01             	mov    %al,0x1(%edx)
    cmos->registers.register_c = cmos_read_byte(0x0C);
c010ca78:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010ca7f:	e8 28 01 00 00       	call   c010cbac <cmos_read_byte>
c010ca84:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca87:	88 42 02             	mov    %al,0x2(%edx)
    cmos->registers.register_d = cmos_read_byte(0x0D);
c010ca8a:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
c010ca91:	e8 16 01 00 00       	call   c010cbac <cmos_read_byte>
c010ca96:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca99:	88 42 03             	mov    %al,0x3(%edx)

    cmos->hardware.post_diagnostig_status_byte = cmos_read_byte(0x0E);
c010ca9c:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010caa3:	e8 04 01 00 00       	call   c010cbac <cmos_read_byte>
c010caa8:	8b 55 08             	mov    0x8(%ebp),%edx
c010caab:	88 42 04             	mov    %al,0x4(%edx)
    cmos->hardware.shutdown_status_byte =        cmos_read_byte(0x0F);
c010caae:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010cab5:	e8 f2 00 00 00       	call   c010cbac <cmos_read_byte>
c010caba:	8b 55 08             	mov    0x8(%ebp),%edx
c010cabd:	88 42 05             	mov    %al,0x5(%edx)
    cmos->hardware.floppy_disk_type =            cmos_read_byte(0x10);
c010cac0:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c010cac7:	e8 e0 00 00 00       	call   c010cbac <cmos_read_byte>
c010cacc:	8b 55 08             	mov    0x8(%ebp),%edx
c010cacf:	88 42 06             	mov    %al,0x6(%edx)
    cmos->hardware.hd_type =                     cmos_read_byte(0x12);
c010cad2:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
c010cad9:	e8 ce 00 00 00       	call   c010cbac <cmos_read_byte>
c010cade:	8b 55 08             	mov    0x8(%ebp),%edx
c010cae1:	88 42 07             	mov    %al,0x7(%edx)
    cmos->hardware.device_byte =                 cmos_read_byte(0x14);
c010cae4:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c010caeb:	e8 bc 00 00 00       	call   c010cbac <cmos_read_byte>
c010caf0:	8b 55 08             	mov    0x8(%ebp),%edx
c010caf3:	88 42 08             	mov    %al,0x8(%edx)

    cmos->hardware.basememory_size_low =         cmos_read_byte(0x15);
c010caf6:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
c010cafd:	e8 aa 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb02:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb05:	88 42 09             	mov    %al,0x9(%edx)
    cmos->hardware.basememory_size_high =        cmos_read_byte(0x16);
c010cb08:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
c010cb0f:	e8 98 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb14:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb17:	88 42 0a             	mov    %al,0xa(%edx)
    cmos->hardware.expandablememory_size_low =   cmos_read_byte(0x17);
c010cb1a:	c7 04 24 17 00 00 00 	movl   $0x17,(%esp)
c010cb21:	e8 86 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb26:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb29:	88 42 0b             	mov    %al,0xb(%edx)
    cmos->hardware.expandablememory_size_high =  cmos_read_byte(0x18);
c010cb2c:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010cb33:	e8 74 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb38:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb3b:	88 42 0c             	mov    %al,0xc(%edx)
    cmos->hardware.extension_byte_hd1 =          cmos_read_byte(0x19);
c010cb3e:	c7 04 24 19 00 00 00 	movl   $0x19,(%esp)
c010cb45:	e8 62 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb4a:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb4d:	88 42 0d             	mov    %al,0xd(%edx)
    cmos->hardware.extension_byte_hd2 =          cmos_read_byte(0x1A);
c010cb50:	c7 04 24 1a 00 00 00 	movl   $0x1a,(%esp)
c010cb57:	e8 50 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb5c:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb5f:	88 42 0e             	mov    %al,0xe(%edx)

    cmos->hardware.cmos_magic_low =              cmos_read_byte(0x2E);
c010cb62:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
c010cb69:	e8 3e 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb6e:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb71:	88 42 0f             	mov    %al,0xf(%edx)
    cmos->hardware.cmos_magic_high =             cmos_read_byte(0x2F);
c010cb74:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
c010cb7b:	e8 2c 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb80:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb83:	88 42 10             	mov    %al,0x10(%edx)

    cmos->hardware.extendedmemory_low =          cmos_read_byte(0x30);
c010cb86:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010cb8d:	e8 1a 00 00 00       	call   c010cbac <cmos_read_byte>
c010cb92:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb95:	88 42 11             	mov    %al,0x11(%edx)
    cmos->hardware.extendedmenory_high =         cmos_read_byte(0x31);
c010cb98:	c7 04 24 31 00 00 00 	movl   $0x31,(%esp)
c010cb9f:	e8 08 00 00 00       	call   c010cbac <cmos_read_byte>
c010cba4:	8b 55 08             	mov    0x8(%ebp),%edx
c010cba7:	88 42 12             	mov    %al,0x12(%edx)
}
c010cbaa:	c9                   	leave  
c010cbab:	c3                   	ret    

c010cbac <cmos_read_byte>:
 * @param offset Offset in the CMOS
 *
 * @return Read value from CMOS
 */
uint8_t cmos_read_byte(uint8_t offset)
{
c010cbac:	55                   	push   %ebp
c010cbad:	89 e5                	mov    %esp,%ebp
c010cbaf:	83 ec 1c             	sub    $0x1c,%esp
c010cbb2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbb5:	88 45 ec             	mov    %al,-0x14(%ebp)
    uint8_t tmp = inb(0x70);
c010cbb8:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010cbbf:	e8 43 fe ff ff       	call   c010ca07 <inb>
c010cbc4:	88 45 ff             	mov    %al,-0x1(%ebp)
    outb(0x70, (tmp & 0x80) | (offset & 0x7F));
c010cbc7:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c010cbcb:	89 c2                	mov    %eax,%edx
c010cbcd:	83 e2 80             	and    $0xffffff80,%edx
c010cbd0:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010cbd4:	83 e0 7f             	and    $0x7f,%eax
c010cbd7:	09 d0                	or     %edx,%eax
c010cbd9:	0f b6 c0             	movzbl %al,%eax
c010cbdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbe0:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010cbe7:	e8 45 fe ff ff       	call   c010ca31 <outb>
    return inb(0x71);
c010cbec:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c010cbf3:	e8 0f fe ff ff       	call   c010ca07 <inb>
}
c010cbf8:	c9                   	leave  
c010cbf9:	c3                   	ret    

c010cbfa <cmos_write_byte>:
 * @param value Value which is written into the CMOS
 *
 * @return void
 */
void cmos_write_byte(uint8_t offset, uint8_t value)
{
c010cbfa:	55                   	push   %ebp
c010cbfb:	89 e5                	mov    %esp,%ebp
c010cbfd:	83 ec 20             	sub    $0x20,%esp
c010cc00:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc03:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc06:	88 55 ec             	mov    %dl,-0x14(%ebp)
c010cc09:	88 45 e8             	mov    %al,-0x18(%ebp)
    uint8_t tmp = inb(0x70);
c010cc0c:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010cc13:	e8 ef fd ff ff       	call   c010ca07 <inb>
c010cc18:	88 45 ff             	mov    %al,-0x1(%ebp)
    outb(0x70, (tmp & 0x80) | (offset & 0x7F));
c010cc1b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c010cc1f:	89 c2                	mov    %eax,%edx
c010cc21:	83 e2 80             	and    $0xffffff80,%edx
c010cc24:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010cc28:	83 e0 7f             	and    $0x7f,%eax
c010cc2b:	09 d0                	or     %edx,%eax
c010cc2d:	0f b6 c0             	movzbl %al,%eax
c010cc30:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc34:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010cc3b:	e8 f1 fd ff ff       	call   c010ca31 <outb>
    outb(0x71, value);
c010cc40:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010cc44:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc48:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c010cc4f:	e8 dd fd ff ff       	call   c010ca31 <outb>
}
c010cc54:	c9                   	leave  
c010cc55:	c3                   	ret    

c010cc56 <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010cc56:	55                   	push   %ebp
c010cc57:	89 e5                	mov    %esp,%ebp
c010cc59:	83 ec 08             	sub    $0x8,%esp
c010cc5c:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc62:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010cc66:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010cc69:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cc6d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010cc71:	ee                   	out    %al,(%dx)
}
c010cc72:	c9                   	leave  
c010cc73:	c3                   	ret    

c010cc74 <crtc_write>:

#include <drivers/crtc.h>
#include <io.h>

void crtc_write(uint8_t index, uint8_t value)
{
c010cc74:	55                   	push   %ebp
c010cc75:	89 e5                	mov    %esp,%ebp
c010cc77:	83 ec 10             	sub    $0x10,%esp
c010cc7a:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc80:	88 55 fc             	mov    %dl,-0x4(%ebp)
c010cc83:	88 45 f8             	mov    %al,-0x8(%ebp)
    outb(CRTC_INDEX_PORT, index);
c010cc86:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010cc8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc8e:	c7 04 24 d4 03 00 00 	movl   $0x3d4,(%esp)
c010cc95:	e8 bc ff ff ff       	call   c010cc56 <outb>
    outb(CRTC_DATA_PORT, value);
c010cc9a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010cc9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cca2:	c7 04 24 d5 03 00 00 	movl   $0x3d5,(%esp)
c010cca9:	e8 a8 ff ff ff       	call   c010cc56 <outb>
}
c010ccae:	c9                   	leave  
c010ccaf:	c3                   	ret    

c010ccb0 <inb>:
#include <stdint.h>



static inline uint8_t inb(uint16_t port)
{
c010ccb0:	55                   	push   %ebp
c010ccb1:	89 e5                	mov    %esp,%ebp
c010ccb3:	53                   	push   %ebx
c010ccb4:	83 ec 14             	sub    $0x14,%esp
c010ccb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccba:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    uint8_t result;
    asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c010ccbe:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010ccc2:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010ccc6:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010ccca:	ec                   	in     (%dx),%al
c010cccb:	89 c3                	mov    %eax,%ebx
c010cccd:	88 5d fb             	mov    %bl,-0x5(%ebp)
    return result;
c010ccd0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c010ccd4:	83 c4 14             	add    $0x14,%esp
c010ccd7:	5b                   	pop    %ebx
c010ccd8:	5d                   	pop    %ebp
c010ccd9:	c3                   	ret    

c010ccda <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010ccda:	55                   	push   %ebp
c010ccdb:	89 e5                	mov    %esp,%ebp
c010ccdd:	83 ec 08             	sub    $0x8,%esp
c010cce0:	8b 55 08             	mov    0x8(%ebp),%edx
c010cce3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cce6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ccea:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010cced:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ccf1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ccf5:	ee                   	out    %al,(%dx)
}
c010ccf6:	c9                   	leave  
c010ccf7:	c3                   	ret    

c010ccf8 <outw>:

static inline void outw(uint16_t port, uint16_t value)
{
c010ccf8:	55                   	push   %ebp
c010ccf9:	89 e5                	mov    %esp,%ebp
c010ccfb:	83 ec 08             	sub    $0x8,%esp
c010ccfe:	8b 55 08             	mov    0x8(%ebp),%edx
c010cd01:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd04:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010cd08:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    asm volatile("outw %1, %0" : : "Nd" (port), "a" (value));
c010cd0c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cd10:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c010cd14:	66 ef                	out    %ax,(%dx)
}
c010cd16:	c9                   	leave  
c010cd17:	c3                   	ret    

c010cd18 <outl>:

static inline void outl(uint16_t port, uint32_t value)
{
c010cd18:	55                   	push   %ebp
c010cd19:	89 e5                	mov    %esp,%ebp
c010cd1b:	83 ec 04             	sub    $0x4,%esp
c010cd1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd21:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    asm volatile("outl %1, %0" : : "Nd" (port), "a" (value));
c010cd25:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cd29:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd2c:	ef                   	out    %eax,(%dx)
}
c010cd2d:	c9                   	leave  
c010cd2e:	c3                   	ret    

c010cd2f <rtl_outb>:
void rtl8139_isr(struct pci_dev *dev);
void rtl8139_reset(struct rtl_dev * dev);


static inline void rtl_outb(struct rtl_dev *dev, uint32_t offset, uint8_t value)
{
c010cd2f:	55                   	push   %ebp
c010cd30:	89 e5                	mov    %esp,%ebp
c010cd32:	83 ec 0c             	sub    $0xc,%esp
c010cd35:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd38:	88 45 fc             	mov    %al,-0x4(%ebp)
    outb(dev->portbase+offset, value);
c010cd3b:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c010cd3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd42:	8b 00                	mov    (%eax),%eax
c010cd44:	89 c1                	mov    %eax,%ecx
c010cd46:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd49:	01 c8                	add    %ecx,%eax
c010cd4b:	0f b7 c0             	movzwl %ax,%eax
c010cd4e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cd52:	89 04 24             	mov    %eax,(%esp)
c010cd55:	e8 80 ff ff ff       	call   c010ccda <outb>
}
c010cd5a:	c9                   	leave  
c010cd5b:	c3                   	ret    

c010cd5c <rtl_outw>:

static inline void rtl_outw(struct rtl_dev *dev, uint32_t offset, uint16_t value)
{
c010cd5c:	55                   	push   %ebp
c010cd5d:	89 e5                	mov    %esp,%ebp
c010cd5f:	83 ec 0c             	sub    $0xc,%esp
c010cd62:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd65:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    outw(dev->portbase+offset, value);
c010cd69:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cd6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd70:	8b 00                	mov    (%eax),%eax
c010cd72:	89 c1                	mov    %eax,%ecx
c010cd74:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd77:	01 c8                	add    %ecx,%eax
c010cd79:	0f b7 c0             	movzwl %ax,%eax
c010cd7c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cd80:	89 04 24             	mov    %eax,(%esp)
c010cd83:	e8 70 ff ff ff       	call   c010ccf8 <outw>
}
c010cd88:	c9                   	leave  
c010cd89:	c3                   	ret    

c010cd8a <rtl_outl>:

static inline void rtl_outl(struct rtl_dev *dev, uint32_t offset, uint32_t value)
{
c010cd8a:	55                   	push   %ebp
c010cd8b:	89 e5                	mov    %esp,%ebp
c010cd8d:	83 ec 08             	sub    $0x8,%esp
    outl(dev->portbase+offset, value);
c010cd90:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd93:	8b 00                	mov    (%eax),%eax
c010cd95:	89 c2                	mov    %eax,%edx
c010cd97:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd9a:	01 d0                	add    %edx,%eax
c010cd9c:	0f b7 c0             	movzwl %ax,%eax
c010cd9f:	8b 55 10             	mov    0x10(%ebp),%edx
c010cda2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cda6:	89 04 24             	mov    %eax,(%esp)
c010cda9:	e8 6a ff ff ff       	call   c010cd18 <outl>
}
c010cdae:	c9                   	leave  
c010cdaf:	c3                   	ret    

c010cdb0 <rtl_inb>:

static inline uint8_t rtl_inb(struct rtl_dev *dev, uint32_t offset)
{
c010cdb0:	55                   	push   %ebp
c010cdb1:	89 e5                	mov    %esp,%ebp
c010cdb3:	83 ec 04             	sub    $0x4,%esp
    return inb(dev->portbase+offset);
c010cdb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdb9:	8b 00                	mov    (%eax),%eax
c010cdbb:	89 c2                	mov    %eax,%edx
c010cdbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cdc0:	01 d0                	add    %edx,%eax
c010cdc2:	0f b7 c0             	movzwl %ax,%eax
c010cdc5:	89 04 24             	mov    %eax,(%esp)
c010cdc8:	e8 e3 fe ff ff       	call   c010ccb0 <inb>
}
c010cdcd:	c9                   	leave  
c010cdce:	c3                   	ret    

c010cdcf <INIT_RTL8139>:
list_t *rtl_dev = NULL;
int rtl_devc = 0;


void INIT_RTL8139(void)
{
c010cdcf:	55                   	push   %ebp
c010cdd0:	89 e5                	mov    %esp,%ebp
c010cdd2:	56                   	push   %esi
c010cdd3:	53                   	push   %ebx
c010cdd4:	83 ec 30             	sub    $0x30,%esp
    printf("RTL8139:\n");
c010cdd7:	c7 04 24 a8 23 11 c0 	movl   $0xc01123a8,(%esp)
c010cdde:	e8 d1 ee ff ff       	call   c010bcb4 <puts>
    rtl_dev = list_create();
c010cde3:	e8 96 57 ff ff       	call   c010257e <list_create>
c010cde8:	a3 30 80 11 c0       	mov    %eax,0xc0118030
    struct pci_dev *current_pci_dev = pci_search_device(pci_dev_list, VENDOR_ID, DEVICE_ID, rtl_devc);
c010cded:	8b 15 34 80 11 c0    	mov    0xc0118034,%edx
c010cdf3:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010cdf8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cdfc:	c7 44 24 08 39 81 00 	movl   $0x8139,0x8(%esp)
c010ce03:	00 
c010ce04:	c7 44 24 04 ec 10 00 	movl   $0x10ec,0x4(%esp)
c010ce0b:	00 
c010ce0c:	89 04 24             	mov    %eax,(%esp)
c010ce0f:	e8 ec e2 ff ff       	call   c010b100 <pci_search_device>
c010ce14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(current_pci_dev != NULL)
c010ce17:	e9 5d 01 00 00       	jmp    c010cf79 <INIT_RTL8139+0x1aa>
    {
        rtl_devc++;
c010ce1c:	a1 34 80 11 c0       	mov    0xc0118034,%eax
c010ce21:	83 c0 01             	add    $0x1,%eax
c010ce24:	a3 34 80 11 c0       	mov    %eax,0xc0118034
        struct rtl_dev *current_dev = malloc(sizeof(struct rtl_dev ));
c010ce29:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
c010ce30:	e8 71 08 00 00       	call   c010d6a6 <malloc>
c010ce35:	89 45 ec             	mov    %eax,-0x14(%ebp)
        current_dev->dev = current_pci_dev;
c010ce38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ce3e:	89 50 18             	mov    %edx,0x18(%eax)
        list_push_front(rtl_dev,(void *) current_dev);
c010ce41:	a1 30 80 11 c0       	mov    0xc0118030,%eax
c010ce46:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ce49:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ce4d:	89 04 24             	mov    %eax,(%esp)
c010ce50:	e8 60 58 ff ff       	call   c01026b5 <list_push_front>


        int i;
        for(i = 0; i < 6; i++)
c010ce55:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010ce5c:	e9 b1 00 00 00       	jmp    c010cf12 <INIT_RTL8139+0x143>
        {
            if(current_pci_dev->base_adress[i].type == PORT)
c010ce61:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010ce64:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ce67:	89 d0                	mov    %edx,%eax
c010ce69:	01 c0                	add    %eax,%eax
c010ce6b:	01 d0                	add    %edx,%eax
c010ce6d:	c1 e0 02             	shl    $0x2,%eax
c010ce70:	01 c8                	add    %ecx,%eax
c010ce72:	83 c0 1c             	add    $0x1c,%eax
c010ce75:	8b 00                	mov    (%eax),%eax
c010ce77:	83 f8 01             	cmp    $0x1,%eax
c010ce7a:	75 1d                	jne    c010ce99 <INIT_RTL8139+0xca>
            {
                current_dev->portbase = current_pci_dev->base_adress[i].adress;
c010ce7c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010ce7f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ce82:	89 d0                	mov    %edx,%eax
c010ce84:	01 c0                	add    %eax,%eax
c010ce86:	01 d0                	add    %edx,%eax
c010ce88:	c1 e0 02             	shl    $0x2,%eax
c010ce8b:	01 c8                	add    %ecx,%eax
c010ce8d:	83 c0 18             	add    $0x18,%eax
c010ce90:	8b 10                	mov    (%eax),%edx
c010ce92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce95:	89 10                	mov    %edx,(%eax)
                // TODO: require ports from kernel manager
                continue;
c010ce97:	eb 75                	jmp    c010cf0e <INIT_RTL8139+0x13f>
            }
            else if(current_pci_dev->base_adress[i].type == MEMORY)
c010ce99:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010ce9c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ce9f:	89 d0                	mov    %edx,%eax
c010cea1:	01 c0                	add    %eax,%eax
c010cea3:	01 d0                	add    %edx,%eax
c010cea5:	c1 e0 02             	shl    $0x2,%eax
c010cea8:	01 c8                	add    %ecx,%eax
c010ceaa:	83 c0 1c             	add    $0x1c,%eax
c010cead:	8b 00                	mov    (%eax),%eax
c010ceaf:	85 c0                	test   %eax,%eax
c010ceb1:	75 5b                	jne    c010cf0e <INIT_RTL8139+0x13f>
            {
                // TODO: require memory
                current_dev->phys_membase = 0xC00000; // A Random adress because there is no reall alloc function
c010ceb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ceb6:	c7 40 04 00 00 c0 00 	movl   $0xc00000,0x4(%eax)
                current_dev->virt_membase = 0xC0C00000;
c010cebd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cec0:	c7 40 08 00 00 c0 c0 	movl   $0xc0c00000,0x8(%eax)
                pci_writel(current_pci_dev->bus, current_pci_dev->dev, current_pci_dev->func, PCI_BASE + (i*4), current_dev->phys_membase);
c010cec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ceca:	8b 70 04             	mov    0x4(%eax),%esi
c010cecd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ced0:	83 c0 04             	add    $0x4,%eax
c010ced3:	c1 e0 02             	shl    $0x2,%eax
c010ced6:	0f b6 d8             	movzbl %al,%ebx
c010ced9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cedc:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010cee0:	0f b6 c8             	movzbl %al,%ecx
c010cee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cee6:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010ceea:	0f b6 d0             	movzbl %al,%edx
c010ceed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cef0:	0f b6 00             	movzbl (%eax),%eax
c010cef3:	0f b6 c0             	movzbl %al,%eax
c010cef6:	89 74 24 10          	mov    %esi,0x10(%esp)
c010cefa:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010cefe:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010cf02:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cf06:	89 04 24             	mov    %eax,(%esp)
c010cf09:	e8 23 e1 ff ff       	call   c010b031 <pci_writel>
        current_dev->dev = current_pci_dev;
        list_push_front(rtl_dev,(void *) current_dev);


        int i;
        for(i = 0; i < 6; i++)
c010cf0e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010cf12:	83 7d f0 05          	cmpl   $0x5,-0x10(%ebp)
c010cf16:	0f 8e 45 ff ff ff    	jle    c010ce61 <INIT_RTL8139+0x92>
                current_dev->phys_membase = 0xC00000; // A Random adress because there is no reall alloc function
                current_dev->virt_membase = 0xC0C00000;
                pci_writel(current_pci_dev->bus, current_pci_dev->dev, current_pci_dev->func, PCI_BASE + (i*4), current_dev->phys_membase);
            }
        }
        if(current_dev->portbase == 0)
c010cf1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cf1f:	8b 00                	mov    (%eax),%eax
c010cf21:	85 c0                	test   %eax,%eax
c010cf23:	75 0c                	jne    c010cf31 <INIT_RTL8139+0x162>
            printf("invalid device; no port base found!\n");
c010cf25:	c7 04 24 b4 23 11 c0 	movl   $0xc01123b4,(%esp)
c010cf2c:	e8 83 ed ff ff       	call   c010bcb4 <puts>


        rtl8139_reset(current_dev);
c010cf31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cf34:	89 04 24             	mov    %eax,(%esp)
c010cf37:	e8 4e 00 00 00       	call   c010cf8a <rtl8139_reset>

        pci_install_isr(rtl8139_isr, current_pci_dev);
c010cf3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf43:	c7 04 24 54 d0 10 c0 	movl   $0xc010d054,(%esp)
c010cf4a:	e8 82 e2 ff ff       	call   c010b1d1 <pci_install_isr>

        current_pci_dev = pci_search_device(pci_dev_list, VENDOR_ID, DEVICE_ID, rtl_devc);
c010cf4f:	8b 15 34 80 11 c0    	mov    0xc0118034,%edx
c010cf55:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010cf5a:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cf5e:	c7 44 24 08 39 81 00 	movl   $0x8139,0x8(%esp)
c010cf65:	00 
c010cf66:	c7 44 24 04 ec 10 00 	movl   $0x10ec,0x4(%esp)
c010cf6d:	00 
c010cf6e:	89 04 24             	mov    %eax,(%esp)
c010cf71:	e8 8a e1 ff ff       	call   c010b100 <pci_search_device>
c010cf76:	89 45 f4             	mov    %eax,-0xc(%ebp)
void INIT_RTL8139(void)
{
    printf("RTL8139:\n");
    rtl_dev = list_create();
    struct pci_dev *current_pci_dev = pci_search_device(pci_dev_list, VENDOR_ID, DEVICE_ID, rtl_devc);
    while(current_pci_dev != NULL)
c010cf79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf7d:	0f 85 99 fe ff ff    	jne    c010ce1c <INIT_RTL8139+0x4d>
        current_pci_dev = pci_search_device(pci_dev_list, VENDOR_ID, DEVICE_ID, rtl_devc);
    }



}
c010cf83:	83 c4 30             	add    $0x30,%esp
c010cf86:	5b                   	pop    %ebx
c010cf87:	5e                   	pop    %esi
c010cf88:	5d                   	pop    %ebp
c010cf89:	c3                   	ret    

c010cf8a <rtl8139_reset>:

void rtl8139_reset(struct rtl_dev * dev)
{
c010cf8a:	55                   	push   %ebp
c010cf8b:	89 e5                	mov    %esp,%ebp
c010cf8d:	83 ec 0c             	sub    $0xc,%esp
    rtl_outb(dev,REG_COMMAND, RESET_CARD); // perform reset
c010cf90:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010cf97:	00 
c010cf98:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c010cf9f:	00 
c010cfa0:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfa3:	89 04 24             	mov    %eax,(%esp)
c010cfa6:	e8 84 fd ff ff       	call   c010cd2f <rtl_outb>
    while(rtl_inb(dev, REG_COMMAND) & RESET_CARD) {}
c010cfab:	90                   	nop
c010cfac:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c010cfb3:	00 
c010cfb4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfb7:	89 04 24             	mov    %eax,(%esp)
c010cfba:	e8 f1 fd ff ff       	call   c010cdb0 <rtl_inb>
c010cfbf:	0f b6 c0             	movzbl %al,%eax
c010cfc2:	83 e0 10             	and    $0x10,%eax
c010cfc5:	85 c0                	test   %eax,%eax
c010cfc7:	75 e3                	jne    c010cfac <rtl8139_reset+0x22>
    rtl_outb(dev, REG_COMMAND, ENABLE_RECIEVER | ENABLE_TRANSMITTER); // enable reciever and transmitter
c010cfc9:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
c010cfd0:	00 
c010cfd1:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c010cfd8:	00 
c010cfd9:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfdc:	89 04 24             	mov    %eax,(%esp)
c010cfdf:	e8 4b fd ff ff       	call   c010cd2f <rtl_outb>
    rtl_outl(dev, REG_TRANSMIT_CONFIGURATION, 0x03000700);
c010cfe4:	c7 44 24 08 00 07 00 	movl   $0x3000700,0x8(%esp)
c010cfeb:	03 
c010cfec:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c010cff3:	00 
c010cff4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cff7:	89 04 24             	mov    %eax,(%esp)
c010cffa:	e8 8b fd ff ff       	call   c010cd8a <rtl_outl>
    rtl_outl(dev, REG_RECEIVE_CONFIGURATION, 0x0000070a);
c010cfff:	c7 44 24 08 0a 07 00 	movl   $0x70a,0x8(%esp)
c010d006:	00 
c010d007:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010d00e:	00 
c010d00f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d012:	89 04 24             	mov    %eax,(%esp)
c010d015:	e8 70 fd ff ff       	call   c010cd8a <rtl_outl>
    rtl_outl(dev, REG_RECEIVE_BUFFER, dev->phys_membase); // set recieve buffer
c010d01a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d01d:	8b 40 04             	mov    0x4(%eax),%eax
c010d020:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d024:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
c010d02b:	00 
c010d02c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d02f:	89 04 24             	mov    %eax,(%esp)
c010d032:	e8 53 fd ff ff       	call   c010cd8a <rtl_outl>
    rtl_outw(dev, REG_INTERRUPT_MASK, ALL_INTERRUPTS); //Allow all interrupts
c010d037:	c7 44 24 08 ff ff 00 	movl   $0xffff,0x8(%esp)
c010d03e:	00 
c010d03f:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010d046:	00 
c010d047:	8b 45 08             	mov    0x8(%ebp),%eax
c010d04a:	89 04 24             	mov    %eax,(%esp)
c010d04d:	e8 0a fd ff ff       	call   c010cd5c <rtl_outw>
}
c010d052:	c9                   	leave  
c010d053:	c3                   	ret    

c010d054 <rtl8139_isr>:


void rtl8139_isr(struct pci_dev *dev)
{
c010d054:	55                   	push   %ebp
c010d055:	89 e5                	mov    %esp,%ebp
c010d057:	83 ec 18             	sub    $0x18,%esp
    printf("RTL IRQ!\n");
c010d05a:	c7 04 24 d8 23 11 c0 	movl   $0xc01123d8,(%esp)
c010d061:	e8 4e ec ff ff       	call   c010bcb4 <puts>
}
c010d066:	c9                   	leave  
c010d067:	c3                   	ret    

c010d068 <INIT_PAGING>:
 *
 * @param void
 * @return void
 */
void INIT_PAGING(struct multiboot_struct *mb_info)
{
c010d068:	55                   	push   %ebp
c010d069:	89 e5                	mov    %esp,%ebp
c010d06b:	83 ec 18             	sub    $0x18,%esp
    install_exc(0xe, page_fault_handler);
c010d06e:	c7 44 24 04 7c e0 10 	movl   $0xc010e07c,0x4(%esp)
c010d075:	c0 
c010d076:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010d07d:	e8 14 12 00 00       	call   c010e296 <install_exc>
    ARCH_INIT_PAGING(mb_info);
c010d082:	8b 45 08             	mov    0x8(%ebp),%eax
c010d085:	89 04 24             	mov    %eax,(%esp)
c010d088:	e8 aa 07 00 00       	call   c010d837 <ARCH_INIT_PAGING>
}
c010d08d:	c9                   	leave  
c010d08e:	c3                   	ret    

c010d08f <vmm_create_context>:

/**
 * Create & Destroy
 */
void vmm_create_context(vmm_context_t *context)
{
c010d08f:	55                   	push   %ebp
c010d090:	89 e5                	mov    %esp,%ebp
c010d092:	83 ec 18             	sub    $0x18,%esp
    arch_vmm_create_context(&context->arch_context);
c010d095:	8b 45 08             	mov    0x8(%ebp),%eax
c010d098:	89 04 24             	mov    %eax,(%esp)
c010d09b:	e8 6e 09 00 00       	call   c010da0e <arch_vmm_create_context>

}
c010d0a0:	c9                   	leave  
c010d0a1:	c3                   	ret    

c010d0a2 <vmm_destroy_context>:

void vmm_destroy_context(vmm_context_t *context)
{
c010d0a2:	55                   	push   %ebp
c010d0a3:	89 e5                	mov    %esp,%ebp
c010d0a5:	83 ec 18             	sub    $0x18,%esp
    arch_vmm_destroy_context(&context->arch_context);
c010d0a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0ab:	89 04 24             	mov    %eax,(%esp)
c010d0ae:	e8 c1 09 00 00       	call   c010da74 <arch_vmm_destroy_context>
}
c010d0b3:	c9                   	leave  
c010d0b4:	c3                   	ret    

c010d0b5 <vmm_switch_context>:

void vmm_switch_context(vmm_context_t *context)
{
c010d0b5:	55                   	push   %ebp
c010d0b6:	89 e5                	mov    %esp,%ebp
c010d0b8:	83 ec 18             	sub    $0x18,%esp
    if(context != current_context)
c010d0bb:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d0c0:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d0c3:	74 1e                	je     c010d0e3 <vmm_switch_context+0x2e>
    {
        arch_update_context(&context->arch_context);
c010d0c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0c8:	89 04 24             	mov    %eax,(%esp)
c010d0cb:	e8 bf 0a 00 00       	call   c010db8f <arch_update_context>
        arch_switch_context(&context->arch_context);
c010d0d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0d3:	89 04 24             	mov    %eax,(%esp)
c010d0d6:	e8 93 0f 00 00       	call   c010e06e <arch_switch_context>
        current_context = context;
c010d0db:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0de:	a3 38 80 11 c0       	mov    %eax,0xc0118038
    }
}
c010d0e3:	c9                   	leave  
c010d0e4:	c3                   	ret    

c010d0e5 <vmm_map>:

/**
 * Map a physical address to a virtual adress
 */
int vmm_map(vmm_context_t *context, paddr_t pframe, vaddr_t vframe, uint8_t flags)
{
c010d0e5:	55                   	push   %ebp
c010d0e6:	89 e5                	mov    %esp,%ebp
c010d0e8:	83 ec 28             	sub    $0x28,%esp
c010d0eb:	8b 45 14             	mov    0x14(%ebp),%eax
c010d0ee:	88 45 f4             	mov    %al,-0xc(%ebp)
    return arch_map(&context->arch_context, pframe, vframe, flags);
c010d0f1:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c010d0f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0f8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d0fc:	8b 55 10             	mov    0x10(%ebp),%edx
c010d0ff:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d103:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d106:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d10a:	89 04 24             	mov    %eax,(%esp)
c010d10d:	e8 ed 0b 00 00       	call   c010dcff <arch_map>
}
c010d112:	c9                   	leave  
c010d113:	c3                   	ret    

c010d114 <vmm_unmap>:

int vmm_unmap(vmm_context_t *context, vaddr_t frame)
{
c010d114:	55                   	push   %ebp
c010d115:	89 e5                	mov    %esp,%ebp
c010d117:	83 ec 18             	sub    $0x18,%esp
    return arch_unmap(&context->arch_context, frame);
c010d11a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d11d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d120:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d124:	89 04 24             	mov    %eax,(%esp)
c010d127:	e8 fd 0c 00 00       	call   c010de29 <arch_unmap>
}
c010d12c:	c9                   	leave  
c010d12d:	c3                   	ret    

c010d12e <vmm_map_range>:

/**
 * Range
 */
int vmm_map_range(vmm_context_t *context, paddr_t pframe, vaddr_t vframe, int pages, uint8_t flags)
{
c010d12e:	55                   	push   %ebp
c010d12f:	89 e5                	mov    %esp,%ebp
c010d131:	53                   	push   %ebx
c010d132:	83 ec 34             	sub    $0x34,%esp
c010d135:	8b 45 18             	mov    0x18(%ebp),%eax
c010d138:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int p;
    for (p = 0; p < pages; ++p)
c010d13b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d142:	eb 39                	jmp    c010d17d <vmm_map_range+0x4f>
    {
        vmm_map(context, pframe + PAGE_FRAME_ADDR(p), vframe + PAGE_FRAME_ADDR(p), flags);
c010d144:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d148:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d14b:	c1 e2 0c             	shl    $0xc,%edx
c010d14e:	89 d1                	mov    %edx,%ecx
c010d150:	8b 55 10             	mov    0x10(%ebp),%edx
c010d153:	01 d1                	add    %edx,%ecx
c010d155:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d158:	c1 e2 0c             	shl    $0xc,%edx
c010d15b:	89 d3                	mov    %edx,%ebx
c010d15d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d160:	01 da                	add    %ebx,%edx
c010d162:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d166:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010d16a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d16e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d171:	89 04 24             	mov    %eax,(%esp)
c010d174:	e8 6c ff ff ff       	call   c010d0e5 <vmm_map>
 * Range
 */
int vmm_map_range(vmm_context_t *context, paddr_t pframe, vaddr_t vframe, int pages, uint8_t flags)
{
    int p;
    for (p = 0; p < pages; ++p)
c010d179:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d17d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d180:	3b 45 14             	cmp    0x14(%ebp),%eax
c010d183:	7c bf                	jl     c010d144 <vmm_map_range+0x16>
    {
        vmm_map(context, pframe + PAGE_FRAME_ADDR(p), vframe + PAGE_FRAME_ADDR(p), flags);
    }
    return 0;
c010d185:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d18a:	83 c4 34             	add    $0x34,%esp
c010d18d:	5b                   	pop    %ebx
c010d18e:	5d                   	pop    %ebp
c010d18f:	c3                   	ret    

c010d190 <vmm_unmap_range>:

int vmm_unmap_range(vmm_context_t *context, vaddr_t frame, int pages)
{
c010d190:	55                   	push   %ebp
c010d191:	89 e5                	mov    %esp,%ebp
c010d193:	83 ec 28             	sub    $0x28,%esp
    int p;
    for(p = 0; p < pages; p++)
c010d196:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d19d:	eb 20                	jmp    c010d1bf <vmm_unmap_range+0x2f>
    {
        vmm_unmap(context, frame + PAGE_FRAME_ADDR(p));
c010d19f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d1a2:	c1 e0 0c             	shl    $0xc,%eax
c010d1a5:	89 c2                	mov    %eax,%edx
c010d1a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1aa:	01 d0                	add    %edx,%eax
c010d1ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d1b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1b3:	89 04 24             	mov    %eax,(%esp)
c010d1b6:	e8 59 ff ff ff       	call   c010d114 <vmm_unmap>
}

int vmm_unmap_range(vmm_context_t *context, vaddr_t frame, int pages)
{
    int p;
    for(p = 0; p < pages; p++)
c010d1bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d1bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d1c2:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d1c5:	7c d8                	jl     c010d19f <vmm_unmap_range+0xf>
    {
        vmm_unmap(context, frame + PAGE_FRAME_ADDR(p));
    }
    return 0;
c010d1c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d1cc:	c9                   	leave  
c010d1cd:	c3                   	ret    

c010d1ce <vmm_automap_kernel>:

/**
 * Automap
 */
vaddr_t vmm_automap_kernel(vmm_context_t *context, paddr_t pframe, uint8_t flags)
{
c010d1ce:	55                   	push   %ebp
c010d1cf:	89 e5                	mov    %esp,%ebp
c010d1d1:	83 ec 48             	sub    $0x48,%esp
c010d1d4:	8b 45 10             	mov    0x10(%ebp),%eax
c010d1d7:	88 45 e4             	mov    %al,-0x1c(%ebp)
    vaddr_t vframe = arch_vaddr_find(&context->arch_context, 1,
c010d1da:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010d1de:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1e1:	89 54 24 10          	mov    %edx,0x10(%esp)
c010d1e5:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c010d1ec:	ff 
c010d1ed:	c7 44 24 08 00 00 00 	movl   $0xc2000000,0x8(%esp)
c010d1f4:	c2 
c010d1f5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d1fc:	00 
c010d1fd:	89 04 24             	mov    %eax,(%esp)
c010d200:	e8 c4 0c 00 00       	call   c010dec9 <arch_vaddr_find>
c010d205:	89 45 f4             	mov    %eax,-0xc(%ebp)
                                     MEMORY_LAYOUT_RESERVED_AREA_END,
                                     MEMORY_LAYOUT_KERNEL_END, flags);
    vmm_map(context, pframe, vframe, flags | VMM_PRESENT);
c010d208:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d20c:	83 c8 01             	or     $0x1,%eax
c010d20f:	0f b6 c0             	movzbl %al,%eax
c010d212:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d216:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d219:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d21d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d220:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d224:	8b 45 08             	mov    0x8(%ebp),%eax
c010d227:	89 04 24             	mov    %eax,(%esp)
c010d22a:	e8 b6 fe ff ff       	call   c010d0e5 <vmm_map>

    return vframe;
c010d22f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d232:	c9                   	leave  
c010d233:	c3                   	ret    

c010d234 <vmm_automap_kernel_range>:

vaddr_t vmm_automap_kernel_range(vmm_context_t *context, paddr_t pframe, int pages, uint8_t flags)
{
c010d234:	55                   	push   %ebp
c010d235:	89 e5                	mov    %esp,%ebp
c010d237:	83 ec 48             	sub    $0x48,%esp
c010d23a:	8b 45 14             	mov    0x14(%ebp),%eax
c010d23d:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int i;
    vaddr_t vaddr_start = arch_vaddr_find(&context->arch_context, pages, MEMORY_LAYOUT_RESERVED_AREA_END, MEMORY_LAYOUT_KERNEL_END, flags);
c010d240:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010d244:	8b 45 08             	mov    0x8(%ebp),%eax
c010d247:	89 54 24 10          	mov    %edx,0x10(%esp)
c010d24b:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c010d252:	ff 
c010d253:	c7 44 24 08 00 00 00 	movl   $0xc2000000,0x8(%esp)
c010d25a:	c2 
c010d25b:	8b 55 10             	mov    0x10(%ebp),%edx
c010d25e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d262:	89 04 24             	mov    %eax,(%esp)
c010d265:	e8 5f 0c 00 00       	call   c010dec9 <arch_vaddr_find>
c010d26a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for(i = 0; i < pages; i++)
c010d26d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d274:	eb 45                	jmp    c010d2bb <vmm_automap_kernel_range+0x87>
    {
        paddr_t paddr = pframe + i*PAGE_SIZE;
c010d276:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d279:	c1 e0 0c             	shl    $0xc,%eax
c010d27c:	89 c2                	mov    %eax,%edx
c010d27e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d281:	01 d0                	add    %edx,%eax
c010d283:	89 45 ec             	mov    %eax,-0x14(%ebp)
        vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
c010d286:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d289:	c1 e0 0c             	shl    $0xc,%eax
c010d28c:	89 c2                	mov    %eax,%edx
c010d28e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d291:	01 d0                	add    %edx,%eax
c010d293:	89 45 e8             	mov    %eax,-0x18(%ebp)
        vmm_map(context, paddr, vaddr, flags);
c010d296:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d29a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d29e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d2a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d2a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d2a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2af:	89 04 24             	mov    %eax,(%esp)
c010d2b2:	e8 2e fe ff ff       	call   c010d0e5 <vmm_map>

vaddr_t vmm_automap_kernel_range(vmm_context_t *context, paddr_t pframe, int pages, uint8_t flags)
{
    int i;
    vaddr_t vaddr_start = arch_vaddr_find(&context->arch_context, pages, MEMORY_LAYOUT_RESERVED_AREA_END, MEMORY_LAYOUT_KERNEL_END, flags);
    for(i = 0; i < pages; i++)
c010d2b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d2bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d2be:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d2c1:	7c b3                	jl     c010d276 <vmm_automap_kernel_range+0x42>
        paddr_t paddr = pframe + i*PAGE_SIZE;
        vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
        vmm_map(context, paddr, vaddr, flags);
    }

    return vaddr_start;
c010d2c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d2c6:	c9                   	leave  
c010d2c7:	c3                   	ret    

c010d2c8 <vmm_automap_user>:

vaddr_t vmm_automap_user(vmm_context_t *context, paddr_t pframe, uint8_t flags)
{
c010d2c8:	55                   	push   %ebp
c010d2c9:	89 e5                	mov    %esp,%ebp
c010d2cb:	83 ec 48             	sub    $0x48,%esp
c010d2ce:	8b 45 10             	mov    0x10(%ebp),%eax
c010d2d1:	88 45 e4             	mov    %al,-0x1c(%ebp)
    vaddr_t vframe = arch_vaddr_find(&context->arch_context, 1,
c010d2d4:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010d2d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2db:	89 54 24 10          	mov    %edx,0x10(%esp)
c010d2df:	c7 44 24 0c 00 00 00 	movl   $0xc0000000,0xc(%esp)
c010d2e6:	c0 
c010d2e7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d2ee:	00 
c010d2ef:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d2f6:	00 
c010d2f7:	89 04 24             	mov    %eax,(%esp)
c010d2fa:	e8 ca 0b 00 00       	call   c010dec9 <arch_vaddr_find>
c010d2ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
                                     0x0, MEMORY_LAYOUT_KERNEL_START, flags);
    vmm_map(context, pframe, vframe, flags | VMM_PRESENT);
c010d302:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d306:	83 c8 01             	or     $0x1,%eax
c010d309:	0f b6 c0             	movzbl %al,%eax
c010d30c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d310:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d313:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d317:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d31a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d31e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d321:	89 04 24             	mov    %eax,(%esp)
c010d324:	e8 bc fd ff ff       	call   c010d0e5 <vmm_map>

    return vframe;
c010d329:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d32c:	c9                   	leave  
c010d32d:	c3                   	ret    

c010d32e <vmm_automap_user_range>:

vaddr_t vmm_automap_user_range(vmm_context_t *context, paddr_t pframe, int pages, uint8_t flags)
{
c010d32e:	55                   	push   %ebp
c010d32f:	89 e5                	mov    %esp,%ebp
c010d331:	83 ec 48             	sub    $0x48,%esp
c010d334:	8b 45 14             	mov    0x14(%ebp),%eax
c010d337:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int i;
    vaddr_t vaddr_start = arch_vaddr_find(&context->arch_context, pages, 0x0, MEMORY_LAYOUT_KERNEL_START, flags);
c010d33a:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010d33e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d341:	89 54 24 10          	mov    %edx,0x10(%esp)
c010d345:	c7 44 24 0c 00 00 00 	movl   $0xc0000000,0xc(%esp)
c010d34c:	c0 
c010d34d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d354:	00 
c010d355:	8b 55 10             	mov    0x10(%ebp),%edx
c010d358:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d35c:	89 04 24             	mov    %eax,(%esp)
c010d35f:	e8 65 0b 00 00       	call   c010dec9 <arch_vaddr_find>
c010d364:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for(i = 0; i < pages; i++)
c010d367:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d36e:	eb 45                	jmp    c010d3b5 <vmm_automap_user_range+0x87>
    {
        paddr_t paddr = pframe + i*PAGE_SIZE;
c010d370:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d373:	c1 e0 0c             	shl    $0xc,%eax
c010d376:	89 c2                	mov    %eax,%edx
c010d378:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d37b:	01 d0                	add    %edx,%eax
c010d37d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
c010d380:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d383:	c1 e0 0c             	shl    $0xc,%eax
c010d386:	89 c2                	mov    %eax,%edx
c010d388:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d38b:	01 d0                	add    %edx,%eax
c010d38d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        vmm_map(context, paddr, vaddr, flags);
c010d390:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d394:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d398:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d39b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d39f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d3a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3a9:	89 04 24             	mov    %eax,(%esp)
c010d3ac:	e8 34 fd ff ff       	call   c010d0e5 <vmm_map>

vaddr_t vmm_automap_user_range(vmm_context_t *context, paddr_t pframe, int pages, uint8_t flags)
{
    int i;
    vaddr_t vaddr_start = arch_vaddr_find(&context->arch_context, pages, 0x0, MEMORY_LAYOUT_KERNEL_START, flags);
    for(i = 0; i < pages; i++)
c010d3b1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d3b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d3b8:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d3bb:	7c b3                	jl     c010d370 <vmm_automap_user_range+0x42>
        paddr_t paddr = pframe + i*PAGE_SIZE;
        vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
        vmm_map(context, paddr, vaddr, flags);
    }

    return vaddr_start;
c010d3bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d3c0:	c9                   	leave  
c010d3c1:	c3                   	ret    

c010d3c2 <alloc_memory>:

void alloc_memory(struct cpu_state **cpu)
{
c010d3c2:	55                   	push   %ebp
c010d3c3:	89 e5                	mov    %esp,%ebp
c010d3c5:	83 ec 48             	sub    $0x48,%esp
    int pages = (*cpu)->CPU_ARG1;
c010d3c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3cb:	8b 00                	mov    (%eax),%eax
c010d3cd:	8b 40 1c             	mov    0x1c(%eax),%eax
c010d3d0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    uint32_t *dest = (uint32_t *)arch_vaddr_find(&current_context->arch_context, pages, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c010d3d3:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d3d8:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
c010d3df:	00 
c010d3e0:	c7 44 24 0c 00 00 00 	movl   $0xb0000000,0xc(%esp)
c010d3e7:	b0 
c010d3e8:	c7 44 24 08 00 00 00 	movl   $0xa0000000,0x8(%esp)
c010d3ef:	a0 
c010d3f0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d3f3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d3f7:	89 04 24             	mov    %eax,(%esp)
c010d3fa:	e8 ca 0a 00 00       	call   c010dec9 <arch_vaddr_find>
c010d3ff:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int i;
    for(i = 0; i < pages; i++)
c010d402:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d409:	eb 3f                	jmp    c010d44a <alloc_memory+0x88>
    {
        uint32_t *paddr = (uint32_t *)pmm_alloc_page();
c010d40b:	e8 78 21 00 00       	call   c010f588 <pmm_alloc_page>
c010d410:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t *vaddr = dest + i*PAGE_SIZE;
c010d413:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d416:	c1 e0 0e             	shl    $0xe,%eax
c010d419:	89 c2                	mov    %eax,%edx
c010d41b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d41e:	01 d0                	add    %edx,%eax
c010d420:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        vmm_map(current_context, (paddr_t)paddr, (vaddr_t)vaddr, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c010d423:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010d426:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d429:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d42e:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c010d435:	00 
c010d436:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010d43a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d43e:	89 04 24             	mov    %eax,(%esp)
c010d441:	e8 9f fc ff ff       	call   c010d0e5 <vmm_map>
    int pages = (*cpu)->CPU_ARG1;

    uint32_t *dest = (uint32_t *)arch_vaddr_find(&current_context->arch_context, pages, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);

    int i;
    for(i = 0; i < pages; i++)
c010d446:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d44a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d44d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d450:	7c b9                	jl     c010d40b <alloc_memory+0x49>
    {
        uint32_t *paddr = (uint32_t *)pmm_alloc_page();
        uint32_t *vaddr = dest + i*PAGE_SIZE;
        vmm_map(current_context, (paddr_t)paddr, (vaddr_t)vaddr, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
    }
    (*cpu)->CPU_ARG0 = (uint32_t)dest;
c010d452:	8b 45 08             	mov    0x8(%ebp),%eax
c010d455:	8b 00                	mov    (%eax),%eax
c010d457:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d45a:	89 50 28             	mov    %edx,0x28(%eax)
}
c010d45d:	c9                   	leave  
c010d45e:	c3                   	ret    

c010d45f <sys_brk>:


extern struct thread_state* current_thread;

void sys_brk(struct cpu_state **cpu)
{
c010d45f:	55                   	push   %ebp
c010d460:	89 e5                	mov    %esp,%ebp
c010d462:	83 ec 48             	sub    $0x48,%esp
    uint32_t new_bss_top = (*cpu)->CPU_ARG1;
c010d465:	8b 45 08             	mov    0x8(%ebp),%eax
c010d468:	8b 00                	mov    (%eax),%eax
c010d46a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010d46d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t heap_top = current_thread->process->heap_top;
c010d470:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010d475:	8b 40 04             	mov    0x4(%eax),%eax
c010d478:	8b 40 40             	mov    0x40(%eax),%eax
c010d47b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(new_bss_top == 0)
c010d47e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d482:	75 10                	jne    c010d494 <sys_brk+0x35>
    {
        (*cpu)->CPU_ARG0 = heap_top;
c010d484:	8b 45 08             	mov    0x8(%ebp),%eax
c010d487:	8b 00                	mov    (%eax),%eax
c010d489:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d48c:	89 50 28             	mov    %edx,0x28(%eax)
c010d48f:	e9 16 01 00 00       	jmp    c010d5aa <sys_brk+0x14b>
    }
    else if(new_bss_top > current_thread->process->heap_upper_limit || new_bss_top < current_thread->process->heap_lower_limit)
c010d494:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010d499:	8b 40 04             	mov    0x4(%eax),%eax
c010d49c:	8b 40 48             	mov    0x48(%eax),%eax
c010d49f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d4a2:	72 10                	jb     c010d4b4 <sys_brk+0x55>
c010d4a4:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010d4a9:	8b 40 04             	mov    0x4(%eax),%eax
c010d4ac:	8b 40 44             	mov    0x44(%eax),%eax
c010d4af:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d4b2:	76 11                	jbe    c010d4c5 <sys_brk+0x66>
    {
        (*cpu)->CPU_ARG0 = 0;
c010d4b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4b7:	8b 00                	mov    (%eax),%eax
c010d4b9:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c010d4c0:	e9 e5 00 00 00       	jmp    c010d5aa <sys_brk+0x14b>
    }
    else if(new_bss_top > (heap_top|0x00000FFF))
c010d4c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4c8:	0d ff 0f 00 00       	or     $0xfff,%eax
c010d4cd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d4d0:	0f 83 c1 00 00 00    	jae    c010d597 <sys_brk+0x138>
    {
        int req_memory = new_bss_top-((heap_top|0x00000FFF));
c010d4d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4d9:	89 c2                	mov    %eax,%edx
c010d4db:	81 ca ff 0f 00 00    	or     $0xfff,%edx
c010d4e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d4e4:	29 d0                	sub    %edx,%eax
c010d4e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int pages = 1+(req_memory/PAGE_SIZE);
c010d4e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d4ec:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c010d4f2:	85 c0                	test   %eax,%eax
c010d4f4:	0f 48 c2             	cmovs  %edx,%eax
c010d4f7:	c1 f8 0c             	sar    $0xc,%eax
c010d4fa:	83 c0 01             	add    $0x1,%eax
c010d4fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(req_memory%PAGE_SIZE)
c010d500:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d503:	25 ff 0f 00 00       	and    $0xfff,%eax
c010d508:	85 c0                	test   %eax,%eax
c010d50a:	74 04                	je     c010d510 <sys_brk+0xb1>
            pages++;
c010d50c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

        heap_top = arch_vaddr_find(&current_context->arch_context, pages, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c010d510:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d515:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
c010d51c:	00 
c010d51d:	c7 44 24 0c 00 00 00 	movl   $0xb0000000,0xc(%esp)
c010d524:	b0 
c010d525:	c7 44 24 08 00 00 00 	movl   $0xa0000000,0x8(%esp)
c010d52c:	a0 
c010d52d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d530:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d534:	89 04 24             	mov    %eax,(%esp)
c010d537:	e8 8d 09 00 00       	call   c010dec9 <arch_vaddr_find>
c010d53c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        int i;
        for(i = 0; i < pages; i++)
c010d53f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010d546:	eb 3f                	jmp    c010d587 <sys_brk+0x128>
        {
            paddr_t paddr = pmm_alloc_page();
c010d548:	e8 3b 20 00 00       	call   c010f588 <pmm_alloc_page>
c010d54d:	89 45 e0             	mov    %eax,-0x20(%ebp)
            vaddr_t vaddr = heap_top + i*PAGE_SIZE;
c010d550:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d553:	c1 e0 0c             	shl    $0xc,%eax
c010d556:	89 c2                	mov    %eax,%edx
c010d558:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d55b:	01 d0                	add    %edx,%eax
c010d55d:	89 45 dc             	mov    %eax,-0x24(%ebp)
            vmm_map(current_context, paddr, vaddr, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c010d560:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d565:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c010d56c:	00 
c010d56d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010d570:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d574:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d577:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d57b:	89 04 24             	mov    %eax,(%esp)
c010d57e:	e8 62 fb ff ff       	call   c010d0e5 <vmm_map>
        if(req_memory%PAGE_SIZE)
            pages++;

        heap_top = arch_vaddr_find(&current_context->arch_context, pages, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
        int i;
        for(i = 0; i < pages; i++)
c010d583:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010d587:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d58a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d58d:	7c b9                	jl     c010d548 <sys_brk+0xe9>
            paddr_t paddr = pmm_alloc_page();
            vaddr_t vaddr = heap_top + i*PAGE_SIZE;
            vmm_map(current_context, paddr, vaddr, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
        }

        heap_top += req_memory;
c010d58f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d592:	01 45 f4             	add    %eax,-0xc(%ebp)
c010d595:	eb 13                	jmp    c010d5aa <sys_brk+0x14b>
    }
    else if(new_bss_top < (heap_top^0xFFFFF000))
c010d597:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d59a:	35 00 f0 ff ff       	xor    $0xfffff000,%eax
c010d59f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d5a2:	77 06                	ja     c010d5aa <sys_brk+0x14b>
    {
        //todo Free
    }
    else
        heap_top = new_bss_top;
c010d5a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5a7:	89 45 f4             	mov    %eax,-0xc(%ebp)


    current_thread->process->heap_top = heap_top;
c010d5aa:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010d5af:	8b 40 04             	mov    0x4(%eax),%eax
c010d5b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d5b5:	89 50 40             	mov    %edx,0x40(%eax)
    (*cpu)->CPU_ARG0 = heap_top;
c010d5b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5bb:	8b 00                	mov    (%eax),%eax
c010d5bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d5c0:	89 50 28             	mov    %edx,0x28(%eax)
c010d5c3:	c9                   	leave  
c010d5c4:	c3                   	ret    

c010d5c5 <INIT_HEAP>:
#include <string.h>

static alloc_t *first_node = NULL;

void INIT_HEAP(void)
{
c010d5c5:	55                   	push   %ebp
c010d5c6:	89 e5                	mov    %esp,%ebp
    // nothing to do here :)
}
c010d5c8:	5d                   	pop    %ebp
c010d5c9:	c3                   	ret    

c010d5ca <heap_add>:
 * add an inode to the list
 *
 * @param inode node to add
 */
void heap_add(alloc_t *inode)
{
c010d5ca:	55                   	push   %ebp
c010d5cb:	89 e5                	mov    %esp,%ebp
    inode->next = first_node;
c010d5cd:	8b 15 3c 80 11 c0    	mov    0xc011803c,%edx
c010d5d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5d6:	89 50 0c             	mov    %edx,0xc(%eax)
    first_node = inode;
c010d5d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5dc:	a3 3c 80 11 c0       	mov    %eax,0xc011803c
}
c010d5e1:	5d                   	pop    %ebp
c010d5e2:	c3                   	ret    

c010d5e3 <heap_expand>:
 *
 * @param pages number of pages to allocate
 * @return allocation inode
 */
alloc_t *heap_expand(int pages)
{
c010d5e3:	55                   	push   %ebp
c010d5e4:	89 e5                	mov    %esp,%ebp
c010d5e6:	83 ec 48             	sub    $0x48,%esp
#ifdef HEAP_DEBUG
    printf("heap_expand(): add %d pages...\n", pages);
#endif

    // allocate memory
    paddr_t pframe = 0;
c010d5e9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    vaddr_t vframe = arch_vaddr_find(&current_context->arch_context, pages,
c010d5f0:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d5f5:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010d5fc:	00 
c010d5fd:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c010d604:	ff 
c010d605:	c7 44 24 08 00 00 00 	movl   $0xe0000000,0x8(%esp)
c010d60c:	e0 
c010d60d:	8b 55 08             	mov    0x8(%ebp),%edx
c010d610:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d614:	89 04 24             	mov    %eax,(%esp)
c010d617:	e8 ad 08 00 00       	call   c010dec9 <arch_vaddr_find>
c010d61c:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                     MEMORY_LAYOUT_KERNEL_HEAP_START,
                                     MEMORY_LAYOUT_KERNEL_HEAP_END, VMM_WRITABLE);
    vaddr_t vframe_cur = vframe;
c010d61f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d622:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int i;
    for(i = 0; i < pages; i++)
c010d625:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010d62c:	eb 36                	jmp    c010d664 <heap_expand+0x81>
    {
        pframe = pmm_alloc_page();
c010d62e:	e8 55 1f 00 00       	call   c010f588 <pmm_alloc_page>
c010d633:	89 45 ec             	mov    %eax,-0x14(%ebp)
        vmm_map(current_context, pframe, vframe_cur, VMM_WRITABLE);
c010d636:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d63b:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010d642:	00 
c010d643:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d646:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d64a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d64d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d651:	89 04 24             	mov    %eax,(%esp)
c010d654:	e8 8c fa ff ff       	call   c010d0e5 <vmm_map>
        vframe_cur += PAGE_SIZE;
c010d659:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
                                     MEMORY_LAYOUT_KERNEL_HEAP_START,
                                     MEMORY_LAYOUT_KERNEL_HEAP_END, VMM_WRITABLE);
    vaddr_t vframe_cur = vframe;

    int i;
    for(i = 0; i < pages; i++)
c010d660:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010d664:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d667:	3b 45 08             	cmp    0x8(%ebp),%eax
c010d66a:	7c c2                	jl     c010d62e <heap_expand+0x4b>
        vmm_map(current_context, pframe, vframe_cur, VMM_WRITABLE);
        vframe_cur += PAGE_SIZE;
    }

    // create inode
    alloc_t *new_header = (alloc_t *) vframe;
c010d66c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d66f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    new_header->size = pages*PAGE_SIZE - sizeof(alloc_t);
c010d672:	8b 45 08             	mov    0x8(%ebp),%eax
c010d675:	c1 e0 0c             	shl    $0xc,%eax
c010d678:	8d 50 f0             	lea    -0x10(%eax),%edx
c010d67b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d67e:	89 10                	mov    %edx,(%eax)
    new_header->base = vframe + sizeof(alloc_t);
c010d680:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d683:	8d 50 10             	lea    0x10(%eax),%edx
c010d686:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d689:	89 50 04             	mov    %edx,0x4(%eax)
    new_header->status = HEAP_STATUS_FREE;
c010d68c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d68f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

    heap_add(new_header);
c010d696:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d699:	89 04 24             	mov    %eax,(%esp)
c010d69c:	e8 29 ff ff ff       	call   c010d5ca <heap_add>

    return new_header;
c010d6a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c010d6a4:	c9                   	leave  
c010d6a5:	c3                   	ret    

c010d6a6 <malloc>:
 *
 * @param size number of bytes
 * @return pointer to reserved bytes
 */
void *malloc(size_t bytes)
{
c010d6a6:	55                   	push   %ebp
c010d6a7:	89 e5                	mov    %esp,%ebp
c010d6a9:	83 ec 28             	sub    $0x28,%esp
    alloc_t *header = first_node;
c010d6ac:	a1 3c 80 11 c0       	mov    0xc011803c,%eax
c010d6b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //vaddr_t data = 0;         // currently unused, maybe useless (someone check this please)
    int n_size = bytes + sizeof(alloc_t);
c010d6b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6b7:	83 c0 10             	add    $0x10,%eax
c010d6ba:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // go through all inodes...
    while(header != NULL)
c010d6bd:	e9 87 00 00 00       	jmp    c010d749 <malloc+0xa3>
    {
        // fits the size?
        if(header->size >= bytes && header->status == HEAP_STATUS_FREE)
c010d6c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6c5:	8b 00                	mov    (%eax),%eax
c010d6c7:	3b 45 08             	cmp    0x8(%ebp),%eax
c010d6ca:	72 74                	jb     c010d740 <malloc+0x9a>
c010d6cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6cf:	8b 40 08             	mov    0x8(%eax),%eax
c010d6d2:	83 f8 01             	cmp    $0x1,%eax
c010d6d5:	75 69                	jne    c010d740 <malloc+0x9a>
        {
            // mark as used
            header->status = HEAP_STATUS_USED;
c010d6d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6da:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            // if something is left, split it down
            if(header->size > n_size)
c010d6e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6e4:	8b 10                	mov    (%eax),%edx
c010d6e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6e9:	39 c2                	cmp    %eax,%edx
c010d6eb:	76 4b                	jbe    c010d738 <malloc+0x92>
            {
                alloc_t *new_header = (alloc_t *)(header->base + bytes);
c010d6ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6f0:	8b 50 04             	mov    0x4(%eax),%edx
c010d6f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6f6:	01 d0                	add    %edx,%eax
c010d6f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
                new_header->base    = header->base + n_size;
c010d6fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6fe:	8b 50 04             	mov    0x4(%eax),%edx
c010d701:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d704:	01 c2                	add    %eax,%edx
c010d706:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d709:	89 50 04             	mov    %edx,0x4(%eax)
                new_header->size = header->size - n_size;
c010d70c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d70f:	8b 10                	mov    (%eax),%edx
c010d711:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d714:	29 c2                	sub    %eax,%edx
c010d716:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d719:	89 10                	mov    %edx,(%eax)
                new_header->status = HEAP_STATUS_FREE;
c010d71b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d71e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                header->size = bytes;
c010d725:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d728:	8b 55 08             	mov    0x8(%ebp),%edx
c010d72b:	89 10                	mov    %edx,(%eax)

                heap_add(new_header);
c010d72d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d730:	89 04 24             	mov    %eax,(%esp)
c010d733:	e8 92 fe ff ff       	call   c010d5ca <heap_add>
            }

            return (void*) header->base;
c010d738:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d73b:	8b 40 04             	mov    0x4(%eax),%eax
c010d73e:	eb 4b                	jmp    c010d78b <malloc+0xe5>
        }

        header = header->next;
c010d740:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d743:	8b 40 0c             	mov    0xc(%eax),%eax
c010d746:	89 45 f4             	mov    %eax,-0xc(%ebp)
    alloc_t *header = first_node;
    //vaddr_t data = 0;         // currently unused, maybe useless (someone check this please)
    int n_size = bytes + sizeof(alloc_t);

    // go through all inodes...
    while(header != NULL)
c010d749:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d74d:	0f 85 6f ff ff ff    	jne    c010d6c2 <malloc+0x1c>

        header = header->next;
    }

    // if nothing found, create new stuff...
    header = heap_expand(NUM_PAGES(n_size));
c010d753:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d756:	05 ff 0f 00 00       	add    $0xfff,%eax
c010d75b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d760:	c1 e8 0c             	shr    $0xc,%eax
c010d763:	89 04 24             	mov    %eax,(%esp)
c010d766:	e8 78 fe ff ff       	call   c010d5e3 <heap_expand>
c010d76b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(header != NULL)
c010d76e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d772:	74 12                	je     c010d786 <malloc+0xe0>
    {
        header->status = HEAP_STATUS_USED;
c010d774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d777:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        return (void *)header->base;
c010d77e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d781:	8b 40 04             	mov    0x4(%eax),%eax
c010d784:	eb 05                	jmp    c010d78b <malloc+0xe5>
#ifdef HEAP_DEBUG
    printf("malloc(): reserving %d bytes of memory: %p - %p\n", header->size, data, data + header->size);
#endif

    // no more memory :'(
    return NULL;
c010d786:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d78b:	c9                   	leave  
c010d78c:	c3                   	ret    

c010d78d <free>:
 * Free a range of bytes in th heap
 *
 * @param ptr pointer
 */
void free(void *ptr)
{
c010d78d:	55                   	push   %ebp
c010d78e:	89 e5                	mov    %esp,%ebp
c010d790:	83 ec 10             	sub    $0x10,%esp
    // calculate inode adress
    alloc_t *header = (alloc_t*)((uintptr_t)ptr - sizeof(alloc_t));
c010d793:	8b 45 08             	mov    0x8(%ebp),%eax
c010d796:	83 e8 10             	sub    $0x10,%eax
c010d799:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // mark as free
    header->status = HEAP_STATUS_FREE;
c010d79c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d79f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

#ifdef HEAP_DEBUG
    printf("free(): freeing %d bytes of memory: %p - %p\n", header->size, ptr, ptr + header->size);
#endif
}
c010d7a6:	c9                   	leave  
c010d7a7:	c3                   	ret    

c010d7a8 <calloc>:
 * @param size size of one block
 *
 * @return pointer to allocated memory
 */
void *calloc(size_t num, size_t size)
{
c010d7a8:	55                   	push   %ebp
c010d7a9:	89 e5                	mov    %esp,%ebp
c010d7ab:	83 ec 28             	sub    $0x28,%esp
    size_t bytes = num * size;
c010d7ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7b1:	0f af 45 0c          	imul   0xc(%ebp),%eax
c010d7b5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    void *data = malloc(bytes);
c010d7b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7bb:	89 04 24             	mov    %eax,(%esp)
c010d7be:	e8 e3 fe ff ff       	call   c010d6a6 <malloc>
c010d7c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset(data, 0, bytes);
c010d7c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d7cd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d7d4:	00 
c010d7d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7d8:	89 04 24             	mov    %eax,(%esp)
c010d7db:	e8 95 57 ff ff       	call   c0102f75 <memset>

    return data;
c010d7e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d7e3:	c9                   	leave  
c010d7e4:	c3                   	ret    

c010d7e5 <realloc>:
 * @param size new size
 *
 * @return new pointer
 */
void *realloc(void *ptr, size_t size)
{
c010d7e5:	55                   	push   %ebp
c010d7e6:	89 e5                	mov    %esp,%ebp
c010d7e8:	83 ec 28             	sub    $0x28,%esp
    void *dest = malloc(size);
c010d7eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7ee:	89 04 24             	mov    %eax,(%esp)
c010d7f1:	e8 b0 fe ff ff       	call   c010d6a6 <malloc>
c010d7f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    alloc_t *source_alloc = (alloc_t*)((uintptr_t)ptr - sizeof(alloc_t));
c010d7f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7fc:	83 e8 10             	sub    $0x10,%eax
c010d7ff:	89 45 f0             	mov    %eax,-0x10(%ebp)

#ifdef HEAP_DEBUG
    printf("realloc(): copying %d bytes from 0x%x to 0x%x\n", source_alloc->size, ptr, dest);
#endif

    if(source_alloc->size < size)
c010d802:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d805:	8b 00                	mov    (%eax),%eax
c010d807:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d80a:	73 1b                	jae    c010d827 <realloc+0x42>
    {
        memcpy(dest, ptr, source_alloc->size);
c010d80c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d80f:	8b 00                	mov    (%eax),%eax
c010d811:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d815:	8b 45 08             	mov    0x8(%ebp),%eax
c010d818:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d81c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d81f:	89 04 24             	mov    %eax,(%esp)
c010d822:	e8 d8 55 ff ff       	call   c0102dff <memcpy>
    }

    free(ptr);
c010d827:	8b 45 08             	mov    0x8(%ebp),%eax
c010d82a:	89 04 24             	mov    %eax,(%esp)
c010d82d:	e8 5b ff ff ff       	call   c010d78d <free>

    return dest;
c010d832:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d835:	c9                   	leave  
c010d836:	c3                   	ret    

c010d837 <ARCH_INIT_PAGING>:
 *
 * @param void
 * @return void
 */
void ARCH_INIT_PAGING(struct multiboot_struct *mb_info)
{
c010d837:	55                   	push   %ebp
c010d838:	89 e5                	mov    %esp,%ebp
c010d83a:	83 ec 48             	sub    $0x48,%esp
    paddr_t pframe = pmm_alloc_page_limit(0);
c010d83d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010d844:	e8 7c 1d 00 00       	call   c010f5c5 <pmm_alloc_page_limit>
c010d849:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr_t vframe = MEMORY_LAYOUT_PAGING_STRUCTURES_START;
c010d84c:	c7 45 e8 00 00 80 ff 	movl   $0xff800000,-0x18(%ebp)

    kernel_context.arch_context.phys_addr = pframe;
c010d853:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d856:	a3 4c a0 11 c0       	mov    %eax,0xc011a04c
    kernel_context.arch_context.entries = (pde_t *) pframe + MEMORY_LAYOUT_KERNEL_START;
c010d85b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d85e:	a3 48 a0 11 c0       	mov    %eax,0xc011a048
    memset(kernel_context.arch_context.entries, 0, PAGE_SIZE);
c010d863:	a1 48 a0 11 c0       	mov    0xc011a048,%eax
c010d868:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010d86f:	00 
c010d870:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d877:	00 
c010d878:	89 04 24             	mov    %eax,(%esp)
c010d87b:	e8 f5 56 ff ff       	call   c0102f75 <memset>

    kernel_context.arch_context.entries[PDE_INDEX(vframe)] = pframe | VMM_WRITABLE | VMM_PRESENT;
c010d880:	a1 48 a0 11 c0       	mov    0xc011a048,%eax
c010d885:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d888:	c1 ea 16             	shr    $0x16,%edx
c010d88b:	c1 e2 02             	shl    $0x2,%edx
c010d88e:	01 d0                	add    %edx,%eax
c010d890:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d893:	83 ca 03             	or     $0x3,%edx
c010d896:	89 10                	mov    %edx,(%eax)
    vmm_map_range(&kernel_context, 0, MEMORY_LAYOUT_KERNEL_START, MEMORY_LAYOUT_DIRECT_MAPPED/PAGE_SIZE, VMM_WRITABLE);// kernel
c010d898:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010d89f:	00 
c010d8a0:	c7 44 24 0c 00 20 00 	movl   $0x2000,0xc(%esp)
c010d8a7:	00 
c010d8a8:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
c010d8af:	c0 
c010d8b0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d8b7:	00 
c010d8b8:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d8bf:	e8 6a f8 ff ff       	call   c010d12e <vmm_map_range>
    vmm_map(&kernel_context, 0xB8000, 0xC00B8000, VMM_WRITABLE);// videomemory (0xB8000 - 0xBFFFF)
c010d8c4:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010d8cb:	00 
c010d8cc:	c7 44 24 08 00 80 0b 	movl   $0xc00b8000,0x8(%esp)
c010d8d3:	c0 
c010d8d4:	c7 44 24 04 00 80 0b 	movl   $0xb8000,0x4(%esp)
c010d8db:	00 
c010d8dc:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d8e3:	e8 fd f7 ff ff       	call   c010d0e5 <vmm_map>
    // multiboot
    vmm_map(&kernel_context, ((vaddr_t)mb_info & (~0xfff)) - MEMORY_LAYOUT_KERNEL_START, ((paddr_t)mb_info&(~0xfff)), VMM_WRITABLE);
c010d8e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8eb:	89 c2                	mov    %eax,%edx
c010d8ed:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c010d8f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8f6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d8fb:	05 00 00 00 40       	add    $0x40000000,%eax
c010d900:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010d907:	00 
c010d908:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d90c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d910:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d917:	e8 c9 f7 ff ff       	call   c010d0e5 <vmm_map>
    vmm_map(&kernel_context, (mb_info->mods_addr & (~0xfff)) - MEMORY_LAYOUT_KERNEL_START, mb_info->mods_addr & (~0xfff), VMM_WRITABLE);
c010d91c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d91f:	8b 40 18             	mov    0x18(%eax),%eax
c010d922:	89 c2                	mov    %eax,%edx
c010d924:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c010d92a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d92d:	8b 40 18             	mov    0x18(%eax),%eax
c010d930:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d935:	05 00 00 00 40       	add    $0x40000000,%eax
c010d93a:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010d941:	00 
c010d942:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d946:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d94a:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d951:	e8 8f f7 ff ff       	call   c010d0e5 <vmm_map>

    int i;
    uintptr_t addr;
    struct mods_add *modules = (void*) mb_info->mods_addr;
c010d956:	8b 45 08             	mov    0x8(%ebp),%eax
c010d959:	8b 40 18             	mov    0x18(%eax),%eax
c010d95c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    for(i = 0; i < mb_info->mods_count; i++)
c010d95f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d966:	eb 5b                	jmp    c010d9c3 <ARCH_INIT_PAGING+0x18c>
    {
        addr = modules[i].mod_start & (~0xfff);
c010d968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d96b:	89 c2                	mov    %eax,%edx
c010d96d:	c1 e2 04             	shl    $0x4,%edx
c010d970:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d973:	01 d0                	add    %edx,%eax
c010d975:	8b 00                	mov    (%eax),%eax
c010d977:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d97c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while(addr < modules[i].mod_end)
c010d97f:	eb 29                	jmp    c010d9aa <ARCH_INIT_PAGING+0x173>
        {
            vmm_map(&kernel_context, addr, addr, VMM_PRESENT | VMM_WRITABLE);
c010d981:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
c010d988:	00 
c010d989:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d98c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d990:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d993:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d997:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d99e:	e8 42 f7 ff ff       	call   c010d0e5 <vmm_map>
            addr += PAGE_SIZE;
c010d9a3:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
    uintptr_t addr;
    struct mods_add *modules = (void*) mb_info->mods_addr;
    for(i = 0; i < mb_info->mods_count; i++)
    {
        addr = modules[i].mod_start & (~0xfff);
        while(addr < modules[i].mod_end)
c010d9aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9ad:	89 c2                	mov    %eax,%edx
c010d9af:	c1 e2 04             	shl    $0x4,%edx
c010d9b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d9b5:	01 d0                	add    %edx,%eax
c010d9b7:	8b 40 04             	mov    0x4(%eax),%eax
c010d9ba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d9bd:	77 c2                	ja     c010d981 <ARCH_INIT_PAGING+0x14a>
    vmm_map(&kernel_context, (mb_info->mods_addr & (~0xfff)) - MEMORY_LAYOUT_KERNEL_START, mb_info->mods_addr & (~0xfff), VMM_WRITABLE);

    int i;
    uintptr_t addr;
    struct mods_add *modules = (void*) mb_info->mods_addr;
    for(i = 0; i < mb_info->mods_count; i++)
c010d9bf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d9c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d9c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9c9:	8b 40 14             	mov    0x14(%eax),%eax
c010d9cc:	39 c2                	cmp    %eax,%edx
c010d9ce:	72 98                	jb     c010d968 <ARCH_INIT_PAGING+0x131>
            vmm_map(&kernel_context, addr, addr, VMM_PRESENT | VMM_WRITABLE);
            addr += PAGE_SIZE;
        }
    }

    void *pd_vaddr = (void *) vmm_automap_kernel(&kernel_context, pframe, VMM_WRITABLE);
c010d9d0:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010d9d7:	00 
c010d9d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d9db:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d9df:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d9e6:	e8 e3 f7 ff ff       	call   c010d1ce <vmm_automap_kernel>
c010d9eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    kernel_context.arch_context.entries = pd_vaddr;
c010d9ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d9f1:	a3 48 a0 11 c0       	mov    %eax,0xc011a048

    arch_switch_context(&kernel_context.arch_context);
c010d9f6:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d9fd:	e8 6c 06 00 00       	call   c010e06e <arch_switch_context>
    current_context = &kernel_context;
c010da02:	c7 05 38 80 11 c0 48 	movl   $0xc011a048,0xc0118038
c010da09:	a0 11 c0 
}
c010da0c:	c9                   	leave  
c010da0d:	c3                   	ret    

c010da0e <arch_vmm_create_context>:
 *
 * @param void
 * @return new pagedirectory
 */
void arch_vmm_create_context(arch_vmm_context_t *context)
{
c010da0e:	55                   	push   %ebp
c010da0f:	89 e5                	mov    %esp,%ebp
c010da11:	83 ec 28             	sub    $0x28,%esp
    uintptr_t paddr = (uintptr_t) pmm_alloc_page();
c010da14:	e8 6f 1b 00 00       	call   c010f588 <pmm_alloc_page>
c010da19:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t vaddr = vmm_automap_kernel(current_context, paddr, VMM_PRESENT | VMM_WRITABLE);
c010da1c:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010da21:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010da28:	00 
c010da29:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010da2c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010da30:	89 04 24             	mov    %eax,(%esp)
c010da33:	e8 96 f7 ff ff       	call   c010d1ce <vmm_automap_kernel>
c010da38:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset((void*)vaddr, 0, PAGE_SIZE);
c010da3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da3e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010da45:	00 
c010da46:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010da4d:	00 
c010da4e:	89 04 24             	mov    %eax,(%esp)
c010da51:	e8 1f 55 ff ff       	call   c0102f75 <memset>

    context->entries = (pde_t *) vaddr;
c010da56:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010da59:	8b 45 08             	mov    0x8(%ebp),%eax
c010da5c:	89 10                	mov    %edx,(%eax)
    context->phys_addr = paddr;
c010da5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010da61:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010da64:	89 50 04             	mov    %edx,0x4(%eax)

    arch_update_context(context);
c010da67:	8b 45 08             	mov    0x8(%ebp),%eax
c010da6a:	89 04 24             	mov    %eax,(%esp)
c010da6d:	e8 1d 01 00 00       	call   c010db8f <arch_update_context>
}
c010da72:	c9                   	leave  
c010da73:	c3                   	ret    

c010da74 <arch_vmm_destroy_context>:

 * @param pd pagedirectory to destroy
 * @return void
 */
void arch_vmm_destroy_context(arch_vmm_context_t *context)
{
c010da74:	55                   	push   %ebp
c010da75:	89 e5                	mov    %esp,%ebp
c010da77:	83 ec 28             	sub    $0x28,%esp
    int pt;
    for (pt = 0; pt < PD_LENGTH; ++pt)
c010da7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010da81:	eb 31                	jmp    c010dab4 <arch_vmm_destroy_context+0x40>
    {
        if (context->entries[pt] & VMM_PRESENT)
c010da83:	8b 45 08             	mov    0x8(%ebp),%eax
c010da86:	8b 00                	mov    (%eax),%eax
c010da88:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010da8b:	c1 e2 02             	shl    $0x2,%edx
c010da8e:	01 d0                	add    %edx,%eax
c010da90:	8b 00                	mov    (%eax),%eax
c010da92:	83 e0 01             	and    $0x1,%eax
c010da95:	85 c0                	test   %eax,%eax
c010da97:	74 17                	je     c010dab0 <arch_vmm_destroy_context+0x3c>
        {
            pmm_mark_page_as_free((paddr_t)context->entries[pt]);
c010da99:	8b 45 08             	mov    0x8(%ebp),%eax
c010da9c:	8b 00                	mov    (%eax),%eax
c010da9e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010daa1:	c1 e2 02             	shl    $0x2,%edx
c010daa4:	01 d0                	add    %edx,%eax
c010daa6:	8b 00                	mov    (%eax),%eax
c010daa8:	89 04 24             	mov    %eax,(%esp)
c010daab:	e8 a2 17 00 00       	call   c010f252 <pmm_mark_page_as_free>
 * @return void
 */
void arch_vmm_destroy_context(arch_vmm_context_t *context)
{
    int pt;
    for (pt = 0; pt < PD_LENGTH; ++pt)
c010dab0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010dab4:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010dabb:	7e c6                	jle    c010da83 <arch_vmm_destroy_context+0xf>
        if (context->entries[pt] & VMM_PRESENT)
        {
            pmm_mark_page_as_free((paddr_t)context->entries[pt]);
        }
    }
    pmm_mark_page_as_free((paddr_t)context->phys_addr);
c010dabd:	8b 45 08             	mov    0x8(%ebp),%eax
c010dac0:	8b 40 04             	mov    0x4(%eax),%eax
c010dac3:	89 04 24             	mov    %eax,(%esp)
c010dac6:	e8 87 17 00 00       	call   c010f252 <pmm_mark_page_as_free>
}
c010dacb:	c9                   	leave  
c010dacc:	c3                   	ret    

c010dacd <arch_sync_pts>:
 *
 * @param src source
 * @return void
 */
void arch_sync_pts(arch_vmm_context_t *dest, arch_vmm_context_t *src, int index_low, int index_high)
{
c010dacd:	55                   	push   %ebp
c010dace:	89 e5                	mov    %esp,%ebp
c010dad0:	83 ec 10             	sub    $0x10,%esp
    int i;
    for(i = index_low; i < index_high; i++)
c010dad3:	8b 45 10             	mov    0x10(%ebp),%eax
c010dad6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010dad9:	eb 22                	jmp    c010dafd <arch_sync_pts+0x30>
    {
        dest->entries[i] = src->entries[i];
c010dadb:	8b 45 08             	mov    0x8(%ebp),%eax
c010dade:	8b 00                	mov    (%eax),%eax
c010dae0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010dae3:	c1 e2 02             	shl    $0x2,%edx
c010dae6:	01 c2                	add    %eax,%edx
c010dae8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010daeb:	8b 00                	mov    (%eax),%eax
c010daed:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010daf0:	c1 e1 02             	shl    $0x2,%ecx
c010daf3:	01 c8                	add    %ecx,%eax
c010daf5:	8b 00                	mov    (%eax),%eax
c010daf7:	89 02                	mov    %eax,(%edx)
 * @return void
 */
void arch_sync_pts(arch_vmm_context_t *dest, arch_vmm_context_t *src, int index_low, int index_high)
{
    int i;
    for(i = index_low; i < index_high; i++)
c010daf9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010dafd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010db00:	3b 45 14             	cmp    0x14(%ebp),%eax
c010db03:	7c d6                	jl     c010dadb <arch_sync_pts+0xe>
    {
        dest->entries[i] = src->entries[i];
    }
}
c010db05:	c9                   	leave  
c010db06:	c3                   	ret    

c010db07 <arch_fork_context>:

void arch_fork_context(arch_vmm_context_t *src, arch_vmm_context_t *dest)
{
c010db07:	55                   	push   %ebp
c010db08:	89 e5                	mov    %esp,%ebp
c010db0a:	83 ec 28             	sub    $0x28,%esp
    int i;
    for(i = 0; i < 1024; i++)
c010db0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010db14:	eb 6e                	jmp    c010db84 <arch_fork_context+0x7d>
    {
        if(src->entries[i] & VMM_PRESENT)
c010db16:	8b 45 08             	mov    0x8(%ebp),%eax
c010db19:	8b 00                	mov    (%eax),%eax
c010db1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010db1e:	c1 e2 02             	shl    $0x2,%edx
c010db21:	01 d0                	add    %edx,%eax
c010db23:	8b 00                	mov    (%eax),%eax
c010db25:	83 e0 01             	and    $0x1,%eax
c010db28:	85 c0                	test   %eax,%eax
c010db2a:	74 54                	je     c010db80 <arch_fork_context+0x79>
        {
            pt_t *pt_src = (pt_t *)pt_get(src, i, VMM_PRESENT | VMM_WRITABLE);
c010db2c:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010db33:	00 
c010db34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db37:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db3b:	8b 45 08             	mov    0x8(%ebp),%eax
c010db3e:	89 04 24             	mov    %eax,(%esp)
c010db41:	e8 8b 00 00 00       	call   c010dbd1 <pt_get>
c010db46:	89 45 f0             	mov    %eax,-0x10(%ebp)
            pt_t *pt_dest = (pt_t *)pt_create(dest, i, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c010db49:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010db50:	00 
c010db51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db54:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db58:	8b 45 0c             	mov    0xc(%ebp),%eax
c010db5b:	89 04 24             	mov    %eax,(%esp)
c010db5e:	e8 f1 00 00 00       	call   c010dc54 <pt_create>
c010db63:	89 45 ec             	mov    %eax,-0x14(%ebp)
            memcpy(pt_dest, pt_src, 4096);
c010db66:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010db6d:	00 
c010db6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010db71:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010db78:	89 04 24             	mov    %eax,(%esp)
c010db7b:	e8 7f 52 ff ff       	call   c0102dff <memcpy>
}

void arch_fork_context(arch_vmm_context_t *src, arch_vmm_context_t *dest)
{
    int i;
    for(i = 0; i < 1024; i++)
c010db80:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010db84:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010db8b:	7e 89                	jle    c010db16 <arch_fork_context+0xf>
            pt_t *pt_src = (pt_t *)pt_get(src, i, VMM_PRESENT | VMM_WRITABLE);
            pt_t *pt_dest = (pt_t *)pt_create(dest, i, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
            memcpy(pt_dest, pt_src, 4096);
        }
    }
}
c010db8d:	c9                   	leave  
c010db8e:	c3                   	ret    

c010db8f <arch_update_context>:

void arch_update_context(arch_vmm_context_t *context)
{
c010db8f:	55                   	push   %ebp
c010db90:	89 e5                	mov    %esp,%ebp
c010db92:	83 ec 10             	sub    $0x10,%esp
#define START PDE_INDEX(MEMORY_LAYOUT_KERNEL_START)
#define END   PDE_INDEX(MEMORY_LAYOUT_KERNEL_END)
    arch_sync_pts(context, &current_context->arch_context, START, END);
c010db95:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010db9a:	c7 44 24 0c ff 03 00 	movl   $0x3ff,0xc(%esp)
c010dba1:	00 
c010dba2:	c7 44 24 08 00 03 00 	movl   $0x300,0x8(%esp)
c010dba9:	00 
c010dbaa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dbae:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbb1:	89 04 24             	mov    %eax,(%esp)
c010dbb4:	e8 14 ff ff ff       	call   c010dacd <arch_sync_pts>
    context->entries[PDE_INDEX(MEMORY_LAYOUT_PAGING_STRUCTURES_START)] = (uint32_t) context->phys_addr | VMM_PRESENT | VMM_WRITABLE;
c010dbb9:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbbc:	8b 00                	mov    (%eax),%eax
c010dbbe:	8d 90 f8 0f 00 00    	lea    0xff8(%eax),%edx
c010dbc4:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbc7:	8b 40 04             	mov    0x4(%eax),%eax
c010dbca:	83 c8 03             	or     $0x3,%eax
c010dbcd:	89 02                	mov    %eax,(%edx)
}
c010dbcf:	c9                   	leave  
c010dbd0:	c3                   	ret    

c010dbd1 <pt_get>:
 * @param flags flags
 *
 * @return pagetable
 */
pt_t pt_get(arch_vmm_context_t *context, int index, uint8_t flags)
{
c010dbd1:	55                   	push   %ebp
c010dbd2:	89 e5                	mov    %esp,%ebp
c010dbd4:	83 ec 38             	sub    $0x38,%esp
c010dbd7:	8b 45 10             	mov    0x10(%ebp),%eax
c010dbda:	88 45 e4             	mov    %al,-0x1c(%ebp)
    pt_t pt;

    if(current_context != NULL)
c010dbdd:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010dbe2:	85 c0                	test   %eax,%eax
c010dbe4:	74 52                	je     c010dc38 <pt_get+0x67>
    {
        if(context == &current_context->arch_context)
c010dbe6:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010dbeb:	3b 45 08             	cmp    0x8(%ebp),%eax
c010dbee:	75 10                	jne    c010dc00 <pt_get+0x2f>
        {
            pt = (pt_t) PT_VADDR(index);
c010dbf0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dbf3:	05 00 f8 0f 00       	add    $0xff800,%eax
c010dbf8:	c1 e0 0c             	shl    $0xc,%eax
c010dbfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dbfe:	eb 4f                	jmp    c010dc4f <pt_get+0x7e>
        }
        else
        {
            pt = (pt_t) PT_PADDR(index);
c010dc00:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc03:	8b 00                	mov    (%eax),%eax
c010dc05:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dc08:	c1 e2 02             	shl    $0x2,%edx
c010dc0b:	01 d0                	add    %edx,%eax
c010dc0d:	8b 00                	mov    (%eax),%eax
c010dc0f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010dc14:	89 45 f4             	mov    %eax,-0xc(%ebp)
            pt = (pt_t) vmm_automap_kernel(current_context, (paddr_t) pt, flags);
c010dc17:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c010dc1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dc1e:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010dc23:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010dc27:	89 54 24 04          	mov    %edx,0x4(%esp)
c010dc2b:	89 04 24             	mov    %eax,(%esp)
c010dc2e:	e8 9b f5 ff ff       	call   c010d1ce <vmm_automap_kernel>
c010dc33:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dc36:	eb 17                	jmp    c010dc4f <pt_get+0x7e>
        }
    }
    else
    {
        pt = (pt_t) PT_PADDR(index) + MEMORY_LAYOUT_KERNEL_START;
c010dc38:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc3b:	8b 00                	mov    (%eax),%eax
c010dc3d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dc40:	c1 e2 02             	shl    $0x2,%edx
c010dc43:	01 d0                	add    %edx,%eax
c010dc45:	8b 00                	mov    (%eax),%eax
c010dc47:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010dc4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    return pt;
c010dc4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dc52:	c9                   	leave  
c010dc53:	c3                   	ret    

c010dc54 <pt_create>:
 * @param flags flags
 *
 * @return pagetable
 */
pt_t pt_create(arch_vmm_context_t *context, int index, uint8_t flags)
{
c010dc54:	55                   	push   %ebp
c010dc55:	89 e5                	mov    %esp,%ebp
c010dc57:	83 ec 38             	sub    $0x38,%esp
c010dc5a:	8b 45 10             	mov    0x10(%ebp),%eax
c010dc5d:	88 45 e4             	mov    %al,-0x1c(%ebp)
    pt_t pt = (pt_t) pmm_alloc_page_limit(0);
c010dc60:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dc67:	e8 59 19 00 00       	call   c010f5c5 <pmm_alloc_page_limit>
c010dc6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    context->entries[index] = (pde_t) pt | flags | VMM_PRESENT;
c010dc6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc72:	8b 00                	mov    (%eax),%eax
c010dc74:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dc77:	c1 e2 02             	shl    $0x2,%edx
c010dc7a:	01 d0                	add    %edx,%eax
c010dc7c:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c010dc80:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dc83:	09 ca                	or     %ecx,%edx
c010dc85:	83 ca 01             	or     $0x1,%edx
c010dc88:	89 10                	mov    %edx,(%eax)

    pt = pt_get(context, index, flags | VMM_PRESENT);
c010dc8a:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010dc8e:	83 c8 01             	or     $0x1,%eax
c010dc91:	0f b6 c0             	movzbl %al,%eax
c010dc94:	89 44 24 08          	mov    %eax,0x8(%esp)
c010dc98:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dc9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010dca2:	89 04 24             	mov    %eax,(%esp)
c010dca5:	e8 27 ff ff ff       	call   c010dbd1 <pt_get>
c010dcaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memset(pt, 0, 4096);
c010dcad:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010dcb4:	00 
c010dcb5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dcbc:	00 
c010dcbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcc0:	89 04 24             	mov    %eax,(%esp)
c010dcc3:	e8 ad 52 ff ff       	call   c0102f75 <memset>

    return pt;
c010dcc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dccb:	c9                   	leave  
c010dccc:	c3                   	ret    

c010dccd <pt_destroy>:
 * @param index index
 *
 * @return void
 */
void pt_destroy(arch_vmm_context_t *context, int index)
{
c010dccd:	55                   	push   %ebp
c010dcce:	89 e5                	mov    %esp,%ebp
c010dcd0:	83 ec 18             	sub    $0x18,%esp
    pmm_mark_page_as_free((paddr_t)context->entries[index]);
c010dcd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcd6:	8b 00                	mov    (%eax),%eax
c010dcd8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dcdb:	c1 e2 02             	shl    $0x2,%edx
c010dcde:	01 d0                	add    %edx,%eax
c010dce0:	8b 00                	mov    (%eax),%eax
c010dce2:	89 04 24             	mov    %eax,(%esp)
c010dce5:	e8 68 15 00 00       	call   c010f252 <pmm_mark_page_as_free>
    context->entries[index] = 0;
c010dcea:	8b 45 08             	mov    0x8(%ebp),%eax
c010dced:	8b 00                	mov    (%eax),%eax
c010dcef:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dcf2:	c1 e2 02             	shl    $0x2,%edx
c010dcf5:	01 d0                	add    %edx,%eax
c010dcf7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010dcfd:	c9                   	leave  
c010dcfe:	c3                   	ret    

c010dcff <arch_map>:
 * @param flags flags
 *
 * @return success
 */
int arch_map(arch_vmm_context_t *context, paddr_t pframe, vaddr_t vframe, uint8_t flags)
{
c010dcff:	55                   	push   %ebp
c010dd00:	89 e5                	mov    %esp,%ebp
c010dd02:	83 ec 38             	sub    $0x38,%esp
c010dd05:	8b 45 14             	mov    0x14(%ebp),%eax
c010dd08:	88 45 e4             	mov    %al,-0x1c(%ebp)
    if( (pframe & 0xFFF) || (vframe & 0xFFF) )
c010dd0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd0e:	25 ff 0f 00 00       	and    $0xfff,%eax
c010dd13:	85 c0                	test   %eax,%eax
c010dd15:	75 0c                	jne    c010dd23 <arch_map+0x24>
c010dd17:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd1a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010dd1f:	85 c0                	test   %eax,%eax
c010dd21:	74 24                	je     c010dd47 <arch_map+0x48>
    {
        printf("pd_map(): can't map 0x%x to 0x%x.", pframe, vframe);
c010dd23:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd26:	89 44 24 08          	mov    %eax,0x8(%esp)
c010dd2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dd31:	c7 04 24 e4 23 11 c0 	movl   $0xc01123e4,(%esp)
c010dd38:	e8 40 54 ff ff       	call   c010317d <printf>
        return -1;
c010dd3d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010dd42:	e9 e0 00 00 00       	jmp    c010de27 <arch_map+0x128>
    }

    uint32_t pd_index = PDE_INDEX(vframe);
c010dd47:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd4a:	c1 e8 16             	shr    $0x16,%eax
c010dd4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t pt_index = PTE_INDEX(vframe);
c010dd50:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd53:	c1 e8 0c             	shr    $0xc,%eax
c010dd56:	25 ff 03 00 00       	and    $0x3ff,%eax
c010dd5b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pt_t pt = NULL;
c010dd5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    pde_t pde = context->entries[pd_index];
c010dd65:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd68:	8b 00                	mov    (%eax),%eax
c010dd6a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010dd6d:	c1 e2 02             	shl    $0x2,%edx
c010dd70:	01 d0                	add    %edx,%eax
c010dd72:	8b 00                	mov    (%eax),%eax
c010dd74:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (pde & VMM_PRESENT)
c010dd77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd7a:	83 e0 01             	and    $0x1,%eax
c010dd7d:	85 c0                	test   %eax,%eax
c010dd7f:	74 25                	je     c010dda6 <arch_map+0xa7>
    {
        pt = pt_get(context, pd_index, flags | VMM_PRESENT);
c010dd81:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010dd85:	83 c8 01             	or     $0x1,%eax
c010dd88:	0f b6 d0             	movzbl %al,%edx
c010dd8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dd8e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dd92:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dd96:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd99:	89 04 24             	mov    %eax,(%esp)
c010dd9c:	e8 30 fe ff ff       	call   c010dbd1 <pt_get>
c010dda1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dda4:	eb 23                	jmp    c010ddc9 <arch_map+0xca>
    }
    else
    {
        pt = pt_create(context, pd_index, flags | VMM_PRESENT);
c010dda6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010ddaa:	83 c8 01             	or     $0x1,%eax
c010ddad:	0f b6 d0             	movzbl %al,%edx
c010ddb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ddb3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ddb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ddbb:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddbe:	89 04 24             	mov    %eax,(%esp)
c010ddc1:	e8 8e fe ff ff       	call   c010dc54 <pt_create>
c010ddc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    pt[pt_index] = (pte_t)(pframe & ~0xFFF) | VMM_PRESENT | (flags & 0xFFF);
c010ddc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ddcc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ddd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ddd6:	01 d0                	add    %edx,%eax
c010ddd8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dddb:	89 d1                	mov    %edx,%ecx
c010dddd:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c010dde3:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010dde7:	09 ca                	or     %ecx,%edx
c010dde9:	83 ca 01             	or     $0x1,%edx
c010ddec:	89 10                	mov    %edx,(%eax)

    if(current_context != NULL)
c010ddee:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010ddf3:	85 c0                	test   %eax,%eax
c010ddf5:	74 2b                	je     c010de22 <arch_map+0x123>
    {
        if(context == &current_context->arch_context)
c010ddf7:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010ddfc:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ddff:	75 0d                	jne    c010de0e <arch_map+0x10f>
        {
            paging_flush_tlb(vframe);
c010de01:	8b 45 10             	mov    0x10(%ebp),%eax
c010de04:	89 04 24             	mov    %eax,(%esp)
c010de07:	e8 2e 03 00 00       	call   c010e13a <paging_flush_tlb>
c010de0c:	eb 14                	jmp    c010de22 <arch_map+0x123>
        }
        else
        {
            vmm_unmap(current_context, (vaddr_t) pt);
c010de0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010de11:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010de16:	89 54 24 04          	mov    %edx,0x4(%esp)
c010de1a:	89 04 24             	mov    %eax,(%esp)
c010de1d:	e8 f2 f2 ff ff       	call   c010d114 <vmm_unmap>
        }
    }

    return 0;
c010de22:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010de27:	c9                   	leave  
c010de28:	c3                   	ret    

c010de29 <arch_unmap>:
 * @param frame adress to unmap
 *
 * @return void
 */
int arch_unmap(arch_vmm_context_t *context, vaddr_t frame)
{
c010de29:	55                   	push   %ebp
c010de2a:	89 e5                	mov    %esp,%ebp
c010de2c:	83 ec 28             	sub    $0x28,%esp
    pt_t pt = pt_get(context, PDE_INDEX(frame), VMM_WRITABLE);
c010de2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010de32:	c1 e8 16             	shr    $0x16,%eax
c010de35:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010de3c:	00 
c010de3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010de41:	8b 45 08             	mov    0x8(%ebp),%eax
c010de44:	89 04 24             	mov    %eax,(%esp)
c010de47:	e8 85 fd ff ff       	call   c010dbd1 <pt_get>
c010de4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pt[PTE_INDEX(frame)] = 0;
c010de4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010de52:	c1 e8 0c             	shr    $0xc,%eax
c010de55:	25 ff 03 00 00       	and    $0x3ff,%eax
c010de5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010de61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010de64:	01 d0                	add    %edx,%eax
c010de66:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    int pt_emty = 1, i;
c010de6c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    for(i = 0; i < PT_LENGTH; i++)
c010de73:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010de7a:	eb 22                	jmp    c010de9e <arch_unmap+0x75>
    {
        if(pt[i])
c010de7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de7f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010de86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010de89:	01 d0                	add    %edx,%eax
c010de8b:	8b 00                	mov    (%eax),%eax
c010de8d:	85 c0                	test   %eax,%eax
c010de8f:	74 09                	je     c010de9a <arch_unmap+0x71>
        {
            pt_emty = 0;
c010de91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
c010de98:	eb 0d                	jmp    c010dea7 <arch_unmap+0x7e>
{
    pt_t pt = pt_get(context, PDE_INDEX(frame), VMM_WRITABLE);
    pt[PTE_INDEX(frame)] = 0;

    int pt_emty = 1, i;
    for(i = 0; i < PT_LENGTH; i++)
c010de9a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010de9e:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c010dea5:	7e d5                	jle    c010de7c <arch_unmap+0x53>
            pt_emty = 0;
            break;
        }
    }

    if(pt_emty)
c010dea7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010deab:	74 15                	je     c010dec2 <arch_unmap+0x99>
    {
        pt_destroy(context, PDE_INDEX(frame));
c010dead:	8b 45 0c             	mov    0xc(%ebp),%eax
c010deb0:	c1 e8 16             	shr    $0x16,%eax
c010deb3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010deb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010deba:	89 04 24             	mov    %eax,(%esp)
c010debd:	e8 0b fe ff ff       	call   c010dccd <pt_destroy>
    }

    return 0;
c010dec2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dec7:	c9                   	leave  
c010dec8:	c3                   	ret    

c010dec9 <arch_vaddr_find>:
 *
 * @param pd pagedirectory
 * @return virtual adress
 */
vaddr_t arch_vaddr_find(arch_vmm_context_t *context, int num, vaddr_t limit_low, vaddr_t limit_high, int flags)
{
c010dec9:	55                   	push   %ebp
c010deca:	89 e5                	mov    %esp,%ebp
c010decc:	83 ec 48             	sub    $0x48,%esp
	  pages_found += l; \
	  if(pages_found >= num) { \
	    return vaddr; \
	  }

    vaddr_t vaddr = 0;
c010decf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int page = 0;
c010ded6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    int pages_found = 0;
c010dedd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    uint32_t pd_index = PDE_INDEX(limit_low);
c010dee4:	8b 45 10             	mov    0x10(%ebp),%eax
c010dee7:	c1 e8 16             	shr    $0x16,%eax
c010deea:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pt_index = PTE_INDEX(limit_low);
c010deed:	8b 45 10             	mov    0x10(%ebp),%eax
c010def0:	c1 e8 0c             	shr    $0xc,%eax
c010def3:	25 ff 03 00 00       	and    $0x3ff,%eax
c010def8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t pd_index_end = PDE_INDEX(limit_high);
c010defb:	8b 45 14             	mov    0x14(%ebp),%eax
c010defe:	c1 e8 16             	shr    $0x16,%eax
c010df01:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t pt_index_end = PTE_INDEX(limit_high);
c010df04:	8b 45 14             	mov    0x14(%ebp),%eax
c010df07:	c1 e8 0c             	shr    $0xc,%eax
c010df0a:	25 ff 03 00 00       	and    $0x3ff,%eax
c010df0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    pt_t pt;
    while(pd_index <= pd_index_end)
c010df12:	e9 f2 00 00 00       	jmp    c010e009 <arch_vaddr_find+0x140>
    {
        if(context->entries[pd_index] & VMM_PRESENT)
c010df17:	8b 45 08             	mov    0x8(%ebp),%eax
c010df1a:	8b 00                	mov    (%eax),%eax
c010df1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010df1f:	c1 e2 02             	shl    $0x2,%edx
c010df22:	01 d0                	add    %edx,%eax
c010df24:	8b 00                	mov    (%eax),%eax
c010df26:	83 e0 01             	and    $0x1,%eax
c010df29:	85 c0                	test   %eax,%eax
c010df2b:	0f 84 a1 00 00 00    	je     c010dfd2 <arch_vaddr_find+0x109>
        {
            pt = pt_get(context, pd_index, flags);
c010df31:	8b 45 18             	mov    0x18(%ebp),%eax
c010df34:	0f b6 d0             	movzbl %al,%edx
c010df37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010df3a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010df3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010df42:	8b 45 08             	mov    0x8(%ebp),%eax
c010df45:	89 04 24             	mov    %eax,(%esp)
c010df48:	e8 84 fc ff ff       	call   c010dbd1 <pt_get>
c010df4d:	89 45 d8             	mov    %eax,-0x28(%ebp)

            uint32_t pt_end = (pd_index == pd_index_end) ? pt_index_end : PT_LENGTH; // last pd entry
c010df50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010df53:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010df56:	75 05                	jne    c010df5d <arch_vaddr_find+0x94>
c010df58:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010df5b:	eb 05                	jmp    c010df62 <arch_vaddr_find+0x99>
c010df5d:	b8 00 04 00 00       	mov    $0x400,%eax
c010df62:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            for(; pt_index < pt_end; pt_index++)
c010df65:	eb 5a                	jmp    c010dfc1 <arch_vaddr_find+0xf8>
            {
                if(! ((uint32_t)pt[pt_index] & VMM_PRESENT) )
c010df67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010df71:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010df74:	01 d0                	add    %edx,%eax
c010df76:	8b 00                	mov    (%eax),%eax
c010df78:	83 e0 01             	and    $0x1,%eax
c010df7b:	85 c0                	test   %eax,%eax
c010df7d:	75 30                	jne    c010dfaf <arch_vaddr_find+0xe6>
                {
                    PAGES_FOUND(1);
c010df7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010df83:	75 19                	jne    c010df9e <arch_vaddr_find+0xd5>
c010df85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010df88:	89 c2                	mov    %eax,%edx
c010df8a:	c1 e2 0a             	shl    $0xa,%edx
c010df8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df90:	01 d0                	add    %edx,%eax
c010df92:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010df95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010df98:	c1 e0 0c             	shl    $0xc,%eax
c010df9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010df9e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010dfa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dfa5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010dfa8:	7c 13                	jl     c010dfbd <arch_vaddr_find+0xf4>
c010dfaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dfad:	eb 6b                	jmp    c010e01a <arch_vaddr_find+0x151>
                }
                else
                {
                    pages_found = 0;
c010dfaf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
                    vaddr = (uintptr_t)NULL;
c010dfb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if(context->entries[pd_index] & VMM_PRESENT)
        {
            pt = pt_get(context, pd_index, flags);

            uint32_t pt_end = (pd_index == pd_index_end) ? pt_index_end : PT_LENGTH; // last pd entry
            for(; pt_index < pt_end; pt_index++)
c010dfbd:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c010dfc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dfc4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010dfc7:	72 9e                	jb     c010df67 <arch_vaddr_find+0x9e>
                {
                    pages_found = 0;
                    vaddr = (uintptr_t)NULL;
                }
            }
            pt_index = 0;
c010dfc9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010dfd0:	eb 33                	jmp    c010e005 <arch_vaddr_find+0x13c>
        }
        else
        {
            PAGES_FOUND(PT_LENGTH);
c010dfd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dfd6:	75 19                	jne    c010dff1 <arch_vaddr_find+0x128>
c010dfd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dfdb:	89 c2                	mov    %eax,%edx
c010dfdd:	c1 e2 0a             	shl    $0xa,%edx
c010dfe0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dfe3:	01 d0                	add    %edx,%eax
c010dfe5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010dfe8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dfeb:	c1 e0 0c             	shl    $0xc,%eax
c010dfee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dff1:	81 45 f0 00 04 00 00 	addl   $0x400,-0x10(%ebp)
c010dff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dffb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010dffe:	7c 05                	jl     c010e005 <arch_vaddr_find+0x13c>
c010e000:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e003:	eb 15                	jmp    c010e01a <arch_vaddr_find+0x151>
        }
        pd_index++;
c010e005:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    uint32_t pd_index = PDE_INDEX(limit_low);
    uint32_t pt_index = PTE_INDEX(limit_low);
    uint32_t pd_index_end = PDE_INDEX(limit_high);
    uint32_t pt_index_end = PTE_INDEX(limit_high);
    pt_t pt;
    while(pd_index <= pd_index_end)
c010e009:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e00c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010e00f:	0f 86 02 ff ff ff    	jbe    c010df17 <arch_vaddr_find+0x4e>
            PAGES_FOUND(PT_LENGTH);
        }
        pd_index++;
    }

    return 0;
c010e015:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e01a:	c9                   	leave  
c010e01b:	c3                   	ret    

c010e01c <arch_vaddr2paddr>:

paddr_t arch_vaddr2paddr(arch_vmm_context_t *context, vaddr_t vaddr)
{
c010e01c:	55                   	push   %ebp
c010e01d:	89 e5                	mov    %esp,%ebp
c010e01f:	83 ec 28             	sub    $0x28,%esp
    unsigned int pd_index = PDE_INDEX(vaddr);
c010e022:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e025:	c1 e8 16             	shr    $0x16,%eax
c010e028:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned int pt_index = PTE_INDEX(vaddr);
c010e02b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e02e:	c1 e8 0c             	shr    $0xc,%eax
c010e031:	25 ff 03 00 00       	and    $0x3ff,%eax
c010e036:	89 45 f0             	mov    %eax,-0x10(%ebp)

    pt_t *pt = (pt_t *)pt_get(context, pd_index, 0);
c010e039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e03c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010e043:	00 
c010e044:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e048:	8b 45 08             	mov    0x8(%ebp),%eax
c010e04b:	89 04 24             	mov    %eax,(%esp)
c010e04e:	e8 7e fb ff ff       	call   c010dbd1 <pt_get>
c010e053:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return (paddr_t) pt[pt_index] & ~0xfff;
c010e056:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e059:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010e060:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e063:	01 d0                	add    %edx,%eax
c010e065:	8b 00                	mov    (%eax),%eax
c010e067:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
c010e06c:	c9                   	leave  
c010e06d:	c3                   	ret    

c010e06e <arch_switch_context>:
 * @param flags flags
 *
 * @return void
 */
void arch_switch_context(arch_vmm_context_t *context)
{
c010e06e:	55                   	push   %ebp
c010e06f:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %0, %%cr3" : : "r" (context->phys_addr));
c010e071:	8b 45 08             	mov    0x8(%ebp),%eax
c010e074:	8b 40 04             	mov    0x4(%eax),%eax
c010e077:	0f 22 d8             	mov    %eax,%cr3
}
c010e07a:	5d                   	pop    %ebp
c010e07b:	c3                   	ret    

c010e07c <page_fault_handler>:
 *
 * @param cpu current cpu state
 * @return void
 */
void page_fault_handler(struct cpu_state **cpu_p)
{
c010e07c:	55                   	push   %ebp
c010e07d:	89 e5                	mov    %esp,%ebp
c010e07f:	56                   	push   %esi
c010e080:	53                   	push   %ebx
c010e081:	81 ec 30 02 00 00    	sub    $0x230,%esp
    struct cpu_state *cpu = cpu_p[0];
c010e087:	8b 45 08             	mov    0x8(%ebp),%eax
c010e08a:	8b 00                	mov    (%eax),%eax
c010e08c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));
c010e08f:	0f 20 d3             	mov    %cr2,%ebx
c010e092:	89 5d f0             	mov    %ebx,-0x10(%ebp)

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);
c010e095:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010e09a:	8b 40 04             	mov    0x4(%eax),%eax
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
c010e09d:	8b 70 0c             	mov    0xc(%eax),%esi
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);
c010e0a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
c010e0a3:	8b 58 34             	mov    0x34(%eax),%ebx
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);
c010e0a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e0a9:	8b 40 30             	mov    0x30(%eax),%eax
c010e0ac:	83 e0 01             	and    $0x1,%eax
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
c010e0af:	85 c0                	test   %eax,%eax
c010e0b1:	74 07                	je     c010e0ba <page_fault_handler+0x3e>
c010e0b3:	b9 06 24 11 c0       	mov    $0xc0112406,%ecx
c010e0b8:	eb 05                	jmp    c010e0bf <page_fault_handler+0x43>
c010e0ba:	b9 14 24 11 c0       	mov    $0xc0112414,%ecx
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);
c010e0bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e0c2:	8b 40 30             	mov    0x30(%eax),%eax
c010e0c5:	83 e0 02             	and    $0x2,%eax
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
c010e0c8:	85 c0                	test   %eax,%eax
c010e0ca:	74 07                	je     c010e0d3 <page_fault_handler+0x57>
c010e0cc:	ba 22 24 11 c0       	mov    $0xc0112422,%edx
c010e0d1:	eb 05                	jmp    c010e0d8 <page_fault_handler+0x5c>
c010e0d3:	ba 2d 24 11 c0       	mov    $0xc011242d,%edx
c010e0d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e0db:	8b 40 30             	mov    0x30(%eax),%eax
c010e0de:	83 e0 04             	and    $0x4,%eax
c010e0e1:	85 c0                	test   %eax,%eax
c010e0e3:	74 07                	je     c010e0ec <page_fault_handler+0x70>
c010e0e5:	b8 38 24 11 c0       	mov    $0xc0112438,%eax
c010e0ea:	eb 05                	jmp    c010e0f1 <page_fault_handler+0x75>
c010e0ec:	b8 3d 24 11 c0       	mov    $0xc011243d,%eax
c010e0f1:	89 74 24 1c          	mov    %esi,0x1c(%esp)
c010e0f5:	89 5c 24 18          	mov    %ebx,0x18(%esp)
c010e0f9:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c010e0fd:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010e100:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010e104:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010e108:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e10c:	c7 44 24 04 44 24 11 	movl   $0xc0112444,0x4(%esp)
c010e113:	c0 
c010e114:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c010e11a:	89 04 24             	mov    %eax,(%esp)
c010e11d:	e8 c8 50 ff ff       	call   c01031ea <sprintf>
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);

    panic(message);
c010e122:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c010e128:	89 04 24             	mov    %eax,(%esp)
c010e12b:	e8 3f df ff ff       	call   c010c06f <panic>
}
c010e130:	81 c4 30 02 00 00    	add    $0x230,%esp
c010e136:	5b                   	pop    %ebx
c010e137:	5e                   	pop    %esi
c010e138:	5d                   	pop    %ebp
c010e139:	c3                   	ret    

c010e13a <paging_flush_tlb>:

static inline void paging_flush_tlb(vaddr_t addr)
{
c010e13a:	55                   	push   %ebp
c010e13b:	89 e5                	mov    %esp,%ebp
    asm volatile ("invlpg %0" : : "m" (*(char*) addr));
c010e13d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e140:	0f 01 38             	invlpg (%eax)
}
c010e143:	5d                   	pop    %ebp
c010e144:	c3                   	ret    

c010e145 <halt>:
/**
 *  @author Simon Diepold aka. Tdotu <simon.diepold@infinitycoding.de>
 */

void halt(void)
{
c010e145:	55                   	push   %ebp
c010e146:	89 e5                	mov    %esp,%ebp
    while (1)
    {
        asm volatile("cli; hlt");
c010e148:	fa                   	cli    
c010e149:	f4                   	hlt    
    }
c010e14a:	eb fc                	jmp    c010e148 <halt+0x3>

c010e14c <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010e14c:	55                   	push   %ebp
c010e14d:	89 e5                	mov    %esp,%ebp
c010e14f:	83 ec 08             	sub    $0x8,%esp
c010e152:	8b 55 08             	mov    0x8(%ebp),%edx
c010e155:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e158:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010e15c:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010e15f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010e163:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010e167:	ee                   	out    %al,(%dx)
}
c010e168:	c9                   	leave  
c010e169:	c3                   	ret    

c010e16a <lidt>:
 * Load IDT
 * @param nuber of the last defined Descriptor
 * @return void
 **/
void lidt(uint16_t irq)
{
c010e16a:	55                   	push   %ebp
c010e16b:	89 e5                	mov    %esp,%ebp
c010e16d:	83 ec 04             	sub    $0x4,%esp
c010e170:	8b 45 08             	mov    0x8(%ebp),%eax
c010e173:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idtp.limit = (8 * irq)-1;
c010e177:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010e17b:	c1 e0 03             	shl    $0x3,%eax
c010e17e:	83 e8 01             	sub    $0x1,%eax
c010e181:	66 a3 40 88 11 c0    	mov    %ax,0xc0118840
    idtp.base = IDT;
c010e187:	c7 05 42 88 11 c0 40 	movl   $0xc0118040,0xc0118842
c010e18e:	80 11 c0 
    asm volatile("lidt %0" : : "m" (idtp));
c010e191:	0f 01 1d 40 88 11 c0 	lidtl  0xc0118840
}
c010e198:	c9                   	leave  
c010e199:	c3                   	ret    

c010e19a <EOI>:
 * Send End of Interrupt Signal to the PIC
 * @param number of the runnig interrupt
 * @return void
 **/
void EOI(int irq)
{
c010e19a:	55                   	push   %ebp
c010e19b:	89 e5                	mov    %esp,%ebp
c010e19d:	83 ec 08             	sub    $0x8,%esp
    outb(0x20, 0x20);
c010e1a0:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c010e1a7:	00 
c010e1a8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010e1af:	e8 98 ff ff ff       	call   c010e14c <outb>
    if (irq >= 8)
c010e1b4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
c010e1b8:	7e 14                	jle    c010e1ce <EOI+0x34>
    {
        outb(0xA0, 0x20);
c010e1ba:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c010e1c1:	00 
c010e1c2:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c010e1c9:	e8 7e ff ff ff       	call   c010e14c <outb>
    }
}
c010e1ce:	c9                   	leave  
c010e1cf:	c3                   	ret    

c010e1d0 <pic_mask_irqs>:
 * block hardware IRQs
 * @param number of the IRQ which should be blocked
 * @return void
 **/
void pic_mask_irqs(uint16_t mask)
{
c010e1d0:	55                   	push   %ebp
c010e1d1:	89 e5                	mov    %esp,%ebp
c010e1d3:	83 ec 0c             	sub    $0xc,%esp
c010e1d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1d9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    outb(0x21, (uint8_t) mask);
c010e1dd:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010e1e1:	0f b6 c0             	movzbl %al,%eax
c010e1e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e1e8:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e1ef:	e8 58 ff ff ff       	call   c010e14c <outb>
    outb(0xA1, (uint8_t) mask >> 8);
c010e1f4:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010e1f8:	0f b6 c0             	movzbl %al,%eax
c010e1fb:	c1 f8 08             	sar    $0x8,%eax
c010e1fe:	0f b6 c0             	movzbl %al,%eax
c010e201:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e205:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e20c:	e8 3b ff ff ff       	call   c010e14c <outb>
}
c010e211:	c9                   	leave  
c010e212:	c3                   	ret    

c010e213 <Set_IDT_Entry>:
 * @param 2 Baseadress of the ISR function
 * @param 3 Flags
 * @return void
 **/
void Set_IDT_Entry(uint32_t intnr, uint16_t selector,uint32_t Base, uint16_t flags)
{
c010e213:	55                   	push   %ebp
c010e214:	89 e5                	mov    %esp,%ebp
c010e216:	83 ec 08             	sub    $0x8,%esp
c010e219:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e21c:	8b 45 14             	mov    0x14(%ebp),%eax
c010e21f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010e223:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    IDT[intnr].Base_low = (uint16_t)Base;
c010e227:	8b 45 10             	mov    0x10(%ebp),%eax
c010e22a:	89 c2                	mov    %eax,%edx
c010e22c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e22f:	66 89 14 c5 40 80 11 	mov    %dx,-0x3fee7fc0(,%eax,8)
c010e236:	c0 
    IDT[intnr].selector = selector;
c010e237:	8b 45 08             	mov    0x8(%ebp),%eax
c010e23a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010e23e:	66 89 14 c5 42 80 11 	mov    %dx,-0x3fee7fbe(,%eax,8)
c010e245:	c0 
    IDT[intnr].flags = flags;
c010e246:	8b 45 08             	mov    0x8(%ebp),%eax
c010e249:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c010e24d:	66 89 14 c5 44 80 11 	mov    %dx,-0x3fee7fbc(,%eax,8)
c010e254:	c0 
    IDT[intnr].Base_hi = (uint16_t)(Base>>16);
c010e255:	8b 45 10             	mov    0x10(%ebp),%eax
c010e258:	c1 e8 10             	shr    $0x10,%eax
c010e25b:	89 c2                	mov    %eax,%edx
c010e25d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e260:	66 89 14 c5 46 80 11 	mov    %dx,-0x3fee7fba(,%eax,8)
c010e267:	c0 
}
c010e268:	c9                   	leave  
c010e269:	c3                   	ret    

c010e26a <install_irq>:
 * @param 1 pointer to the handler function
 * @return false  -> Handler is already seted-up
 * @return true -> Handler sucessfully installed
 **/
int install_irq(int intr,void *handler)
{
c010e26a:	55                   	push   %ebp
c010e26b:	89 e5                	mov    %esp,%ebp
    if (irq[intr] != NULL)
c010e26d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e270:	8b 04 85 60 88 11 c0 	mov    -0x3fee77a0(,%eax,4),%eax
c010e277:	85 c0                	test   %eax,%eax
c010e279:	74 07                	je     c010e282 <install_irq+0x18>
    {
        return false;
c010e27b:	b8 00 00 00 00       	mov    $0x0,%eax
c010e280:	eb 12                	jmp    c010e294 <install_irq+0x2a>
    }

    irq[intr] = handler;
c010e282:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e285:	8b 45 08             	mov    0x8(%ebp),%eax
c010e288:	89 14 85 60 88 11 c0 	mov    %edx,-0x3fee77a0(,%eax,4)
    return true;
c010e28f:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010e294:	5d                   	pop    %ebp
c010e295:	c3                   	ret    

c010e296 <install_exc>:
 * @param 1 pointer to the handler function
 * @return true  -> Handler is already seted-up
 * @return false -> Handler sucessfully installed
 **/
int install_exc(int excnum, void *handler)
{
c010e296:	55                   	push   %ebp
c010e297:	89 e5                	mov    %esp,%ebp
    if (exc[excnum] != NULL)
c010e299:	8b 45 08             	mov    0x8(%ebp),%eax
c010e29c:	8b 04 85 a0 88 11 c0 	mov    -0x3fee7760(,%eax,4),%eax
c010e2a3:	85 c0                	test   %eax,%eax
c010e2a5:	74 07                	je     c010e2ae <install_exc+0x18>
    {
        return false;
c010e2a7:	b8 00 00 00 00       	mov    $0x0,%eax
c010e2ac:	eb 12                	jmp    c010e2c0 <install_exc+0x2a>
    }

    exc[excnum] = handler;
c010e2ae:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e2b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2b4:	89 14 85 a0 88 11 c0 	mov    %edx,-0x3fee7760(,%eax,4)
    return true;
c010e2bb:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010e2c0:	5d                   	pop    %ebp
c010e2c1:	c3                   	ret    

c010e2c2 <deinstall_irq>:
 * deinstall IRQ handlder
 * @param interrupt number
 * @return void
**/
void deinstall_irq(int intr)
{
c010e2c2:	55                   	push   %ebp
c010e2c3:	89 e5                	mov    %esp,%ebp
    irq[intr] = NULL;
c010e2c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2c8:	c7 04 85 60 88 11 c0 	movl   $0x0,-0x3fee77a0(,%eax,4)
c010e2cf:	00 00 00 00 
}
c010e2d3:	5d                   	pop    %ebp
c010e2d4:	c3                   	ret    

c010e2d5 <deinstall_exc>:
 * deinstall exception handlder
 * @param exception number
 * @return void
**/
void deinstall_exc(int excnum)
{
c010e2d5:	55                   	push   %ebp
c010e2d6:	89 e5                	mov    %esp,%ebp
    exc[excnum] = NULL;
c010e2d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2db:	c7 04 85 a0 88 11 c0 	movl   $0x0,-0x3fee7760(,%eax,4)
c010e2e2:	00 00 00 00 
}
c010e2e6:	5d                   	pop    %ebp
c010e2e7:	c3                   	ret    

c010e2e8 <irq_handler>:
 * General IRQ Handler
 * @param pointer to cpu_state struct of the interrupted Process
 * @return pointer to cpu_state struct of the interrupted Process
 **/
struct cpu_state* irq_handler(struct cpu_state* cpu)
{
c010e2e8:	55                   	push   %ebp
c010e2e9:	89 e5                	mov    %esp,%ebp
c010e2eb:	83 ec 28             	sub    $0x28,%esp
    //Exceptions
    if (cpu->intr < 32)
c010e2ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2f1:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e2f4:	83 f8 1f             	cmp    $0x1f,%eax
c010e2f7:	77 3e                	ja     c010e337 <irq_handler+0x4f>
    {
        if (exc[cpu->intr] != NULL)
c010e2f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2fc:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e2ff:	8b 04 85 a0 88 11 c0 	mov    -0x3fee7760(,%eax,4),%eax
c010e306:	85 c0                	test   %eax,%eax
c010e308:	74 1d                	je     c010e327 <irq_handler+0x3f>
        {
            exc[cpu->intr](&cpu);
c010e30a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e30d:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e310:	8b 04 85 a0 88 11 c0 	mov    -0x3fee7760(,%eax,4),%eax
c010e317:	8d 55 08             	lea    0x8(%ebp),%edx
c010e31a:	89 14 24             	mov    %edx,(%esp)
c010e31d:	ff d0                	call   *%eax
            return cpu;
c010e31f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e322:	e9 cf 00 00 00       	jmp    c010e3f6 <irq_handler+0x10e>
        }
        else
        {
            exc_panic(cpu);
c010e327:	8b 45 08             	mov    0x8(%ebp),%eax
c010e32a:	89 04 24             	mov    %eax,(%esp)
c010e32d:	e8 0c e0 ff ff       	call   c010c33e <exc_panic>
c010e332:	e9 bc 00 00 00       	jmp    c010e3f3 <irq_handler+0x10b>
        }
    }
    //Taskscheduler
    else if(cpu->intr == 32)
c010e337:	8b 45 08             	mov    0x8(%ebp),%eax
c010e33a:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e33d:	83 f8 20             	cmp    $0x20,%eax
c010e340:	75 18                	jne    c010e35a <irq_handler+0x72>
    {
        sync_sys_clock();
c010e342:	e8 47 e2 ff ff       	call   c010c58e <sync_sys_clock>
        cpu = task_schedule(cpu);
c010e347:	8b 45 08             	mov    0x8(%ebp),%eax
c010e34a:	89 04 24             	mov    %eax,(%esp)
c010e34d:	e8 3d 66 ff ff       	call   c010498f <task_schedule>
c010e352:	89 45 08             	mov    %eax,0x8(%ebp)
c010e355:	e9 99 00 00 00       	jmp    c010e3f3 <irq_handler+0x10b>
    }
    //IRQs
    else if (cpu->intr < 46)
c010e35a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e35d:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e360:	83 f8 2d             	cmp    $0x2d,%eax
c010e363:	77 3e                	ja     c010e3a3 <irq_handler+0xbb>
    {
        asm volatile("cli");
c010e365:	fa                   	cli    
        int irqnum = cpu->intr - IRQ_OFFSET;
c010e366:	8b 45 08             	mov    0x8(%ebp),%eax
c010e369:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e36c:	83 e8 20             	sub    $0x20,%eax
c010e36f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (irq[irqnum] != NULL)
c010e372:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e375:	8b 04 85 60 88 11 c0 	mov    -0x3fee77a0(,%eax,4),%eax
c010e37c:	85 c0                	test   %eax,%eax
c010e37e:	74 12                	je     c010e392 <irq_handler+0xaa>
        {
            irq[irqnum](&cpu);
c010e380:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e383:	8b 04 85 60 88 11 c0 	mov    -0x3fee77a0(,%eax,4),%eax
c010e38a:	8d 55 08             	lea    0x8(%ebp),%edx
c010e38d:	89 14 24             	mov    %edx,(%esp)
c010e390:	ff d0                	call   *%eax
        }
        EOI(irqnum);
c010e392:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e395:	89 04 24             	mov    %eax,(%esp)
c010e398:	e8 fd fd ff ff       	call   c010e19a <EOI>
        asm volatile("sti");
c010e39d:	fb                   	sti    
        return cpu;
c010e39e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3a1:	eb 53                	jmp    c010e3f6 <irq_handler+0x10e>
    }
    //universe syscall
    else if(cpu->intr == 0x70)
c010e3a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3a6:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e3a9:	83 f8 70             	cmp    $0x70,%eax
c010e3ac:	75 0d                	jne    c010e3bb <irq_handler+0xd3>
    {
        universe_syscall_handler(&cpu);
c010e3ae:	8d 45 08             	lea    0x8(%ebp),%eax
c010e3b1:	89 04 24             	mov    %eax,(%esp)
c010e3b4:	e8 7b a4 ff ff       	call   c0108834 <universe_syscall_handler>
c010e3b9:	eb 38                	jmp    c010e3f3 <irq_handler+0x10b>
    }
    //linux syscall
    else if(cpu->intr == 0x80)
c010e3bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3be:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e3c1:	3d 80 00 00 00       	cmp    $0x80,%eax
c010e3c6:	75 0d                	jne    c010e3d5 <irq_handler+0xed>
    {
        linux_syscall_handler(&cpu);
c010e3c8:	8d 55 08             	lea    0x8(%ebp),%edx
c010e3cb:	89 14 24             	mov    %edx,(%esp)
c010e3ce:	e8 22 a4 ff ff       	call   c01087f5 <linux_syscall_handler>
c010e3d3:	eb 1e                	jmp    c010e3f3 <irq_handler+0x10b>
    }
    //pci IRQ
    else if(cpu->intr == 50)
c010e3d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3d8:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e3db:	83 f8 32             	cmp    $0x32,%eax
c010e3de:	75 07                	jne    c010e3e7 <irq_handler+0xff>
    {
        pci_irq_handler();
c010e3e0:	e8 f9 ce ff ff       	call   c010b2de <pci_irq_handler>
c010e3e5:	eb 0c                	jmp    c010e3f3 <irq_handler+0x10b>
    }
    //unspecified ISRs
    else
    {
        panic("A unspecified ISR was called.");
c010e3e7:	c7 04 24 e3 25 11 c0 	movl   $0xc01125e3,(%esp)
c010e3ee:	e8 7c dc ff ff       	call   c010c06f <panic>
    }
    return cpu;
c010e3f3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010e3f6:	c9                   	leave  
c010e3f7:	c3                   	ret    

c010e3f8 <remap_pic>:
 * remap IRQs to irqnum 31
 * @param void
 * @return void
 **/
void remap_pic(void)
{
c010e3f8:	55                   	push   %ebp
c010e3f9:	89 e5                	mov    %esp,%ebp
c010e3fb:	83 ec 08             	sub    $0x8,%esp
    outb(0x20, 0x11);
c010e3fe:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010e405:	00 
c010e406:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010e40d:	e8 3a fd ff ff       	call   c010e14c <outb>
    outb(0xA0, 0x11);
c010e412:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010e419:	00 
c010e41a:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c010e421:	e8 26 fd ff ff       	call   c010e14c <outb>
    outb(0x21, 32);
c010e426:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c010e42d:	00 
c010e42e:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e435:	e8 12 fd ff ff       	call   c010e14c <outb>
    outb(0xA1, 32+8);
c010e43a:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
c010e441:	00 
c010e442:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e449:	e8 fe fc ff ff       	call   c010e14c <outb>
    outb(0x21, 0x04);
c010e44e:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
c010e455:	00 
c010e456:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e45d:	e8 ea fc ff ff       	call   c010e14c <outb>
    outb(0xA1, 2);
c010e462:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010e469:	00 
c010e46a:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e471:	e8 d6 fc ff ff       	call   c010e14c <outb>
    outb(0x21, 0x01);
c010e476:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010e47d:	00 
c010e47e:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e485:	e8 c2 fc ff ff       	call   c010e14c <outb>
    outb(0xA1, 0x01);
c010e48a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010e491:	00 
c010e492:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e499:	e8 ae fc ff ff       	call   c010e14c <outb>
    outb(0x21, 0x00);
c010e49e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010e4a5:	00 
c010e4a6:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e4ad:	e8 9a fc ff ff       	call   c010e14c <outb>
    outb(0xA1, 0x00);
c010e4b2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010e4b9:	00 
c010e4ba:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e4c1:	e8 86 fc ff ff       	call   c010e14c <outb>
}
c010e4c6:	c9                   	leave  
c010e4c7:	c3                   	ret    

c010e4c8 <INIT_IDT>:
 * Initialize IDT wit exceptions and basical ISRs
 * @param 0 void
 * @param 1 void
 **/
void INIT_IDT(void)
{
c010e4c8:	55                   	push   %ebp
c010e4c9:	89 e5                	mov    %esp,%ebp
c010e4cb:	83 ec 20             	sub    $0x20,%esp
    remap_pic();
c010e4ce:	e8 25 ff ff ff       	call   c010e3f8 <remap_pic>
    //Exceptions
    int i;
    for(i = 0; i < 256; i++)
c010e4d3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010e4da:	eb 28                	jmp    c010e504 <INIT_IDT+0x3c>
    {
        Set_IDT_Entry(i,0x8,(uint32_t)isr_default,0xEE00);
c010e4dc:	ba 7f 02 11 c0       	mov    $0xc011027f,%edx
c010e4e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e4e4:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e4eb:	00 
c010e4ec:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e4f0:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e4f7:	00 
c010e4f8:	89 04 24             	mov    %eax,(%esp)
c010e4fb:	e8 13 fd ff ff       	call   c010e213 <Set_IDT_Entry>
void INIT_IDT(void)
{
    remap_pic();
    //Exceptions
    int i;
    for(i = 0; i < 256; i++)
c010e500:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010e504:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c010e50b:	7e cf                	jle    c010e4dc <INIT_IDT+0x14>
    {
        Set_IDT_Entry(i,0x8,(uint32_t)isr_default,0xEE00);
    }

    Set_IDT_Entry(0,0x8,(uint32_t)isr_0,0xEE00);
c010e50d:	b8 70 01 11 c0       	mov    $0xc0110170,%eax
c010e512:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e519:	00 
c010e51a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e51e:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e525:	00 
c010e526:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010e52d:	e8 e1 fc ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(1,0x8,(uint32_t)isr_1,0xEE00);
c010e532:	b8 79 01 11 c0       	mov    $0xc0110179,%eax
c010e537:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e53e:	00 
c010e53f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e543:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e54a:	00 
c010e54b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010e552:	e8 bc fc ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(2,0x8,(uint32_t)isr_2,0xEE00);
c010e557:	b8 82 01 11 c0       	mov    $0xc0110182,%eax
c010e55c:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e563:	00 
c010e564:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e568:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e56f:	00 
c010e570:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010e577:	e8 97 fc ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(3,0x8,(uint32_t)isr_3,0xEE00);
c010e57c:	b8 8b 01 11 c0       	mov    $0xc011018b,%eax
c010e581:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e588:	00 
c010e589:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e58d:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e594:	00 
c010e595:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010e59c:	e8 72 fc ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(4,0x8,(uint32_t)isr_4,0xEE00);
c010e5a1:	b8 94 01 11 c0       	mov    $0xc0110194,%eax
c010e5a6:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e5ad:	00 
c010e5ae:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e5b2:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e5b9:	00 
c010e5ba:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010e5c1:	e8 4d fc ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(5,0x8,(uint32_t)isr_5,0xEE00);
c010e5c6:	b8 9d 01 11 c0       	mov    $0xc011019d,%eax
c010e5cb:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e5d2:	00 
c010e5d3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e5d7:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e5de:	00 
c010e5df:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010e5e6:	e8 28 fc ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(6,0x8,(uint32_t)isr_6,0xEE00);
c010e5eb:	b8 a6 01 11 c0       	mov    $0xc01101a6,%eax
c010e5f0:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e5f7:	00 
c010e5f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e5fc:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e603:	00 
c010e604:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010e60b:	e8 03 fc ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(7,0x8,(uint32_t)isr_7,0xEE00);
c010e610:	b8 af 01 11 c0       	mov    $0xc01101af,%eax
c010e615:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e61c:	00 
c010e61d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e621:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e628:	00 
c010e629:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010e630:	e8 de fb ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(8,0x8,(uint32_t)isr_8,0xEE00);
c010e635:	b8 b8 01 11 c0       	mov    $0xc01101b8,%eax
c010e63a:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e641:	00 
c010e642:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e646:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e64d:	00 
c010e64e:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010e655:	e8 b9 fb ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(9,0x8,(uint32_t)isr_9,0xEE00);
c010e65a:	b8 bf 01 11 c0       	mov    $0xc01101bf,%eax
c010e65f:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e666:	00 
c010e667:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e66b:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e672:	00 
c010e673:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010e67a:	e8 94 fb ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(10,0x8,(uint32_t)isr_10,0xEE00);
c010e67f:	b8 c8 01 11 c0       	mov    $0xc01101c8,%eax
c010e684:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e68b:	00 
c010e68c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e690:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e697:	00 
c010e698:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010e69f:	e8 6f fb ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(11,0x8,(uint32_t)isr_11,0xEE00);
c010e6a4:	b8 cf 01 11 c0       	mov    $0xc01101cf,%eax
c010e6a9:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e6b0:	00 
c010e6b1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e6b5:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e6bc:	00 
c010e6bd:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c010e6c4:	e8 4a fb ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(12,0x8,(uint32_t)isr_12,0xEE00);
c010e6c9:	b8 d6 01 11 c0       	mov    $0xc01101d6,%eax
c010e6ce:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e6d5:	00 
c010e6d6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e6da:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e6e1:	00 
c010e6e2:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010e6e9:	e8 25 fb ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(13,0x8,(uint32_t)isr_13,0xEE00);
c010e6ee:	b8 dd 01 11 c0       	mov    $0xc01101dd,%eax
c010e6f3:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e6fa:	00 
c010e6fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e6ff:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e706:	00 
c010e707:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
c010e70e:	e8 00 fb ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(14,0x8,(uint32_t)isr_14,0xEE00);
c010e713:	b8 e4 01 11 c0       	mov    $0xc01101e4,%eax
c010e718:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e71f:	00 
c010e720:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e724:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e72b:	00 
c010e72c:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010e733:	e8 db fa ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(15,0x8,(uint32_t)isr_15,0xEE00);
c010e738:	b8 eb 01 11 c0       	mov    $0xc01101eb,%eax
c010e73d:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e744:	00 
c010e745:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e749:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e750:	00 
c010e751:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010e758:	e8 b6 fa ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(16,0x8,(uint32_t)isr_16,0xEE00);
c010e75d:	b8 f4 01 11 c0       	mov    $0xc01101f4,%eax
c010e762:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e769:	00 
c010e76a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e76e:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e775:	00 
c010e776:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c010e77d:	e8 91 fa ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(17,0x8,(uint32_t)isr_17,0xEE00);
c010e782:	b8 fd 01 11 c0       	mov    $0xc01101fd,%eax
c010e787:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e78e:	00 
c010e78f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e793:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e79a:	00 
c010e79b:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
c010e7a2:	e8 6c fa ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(18,0x8,(uint32_t)isr_18,0xEE00);
c010e7a7:	b8 04 02 11 c0       	mov    $0xc0110204,%eax
c010e7ac:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e7b3:	00 
c010e7b4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e7b8:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e7bf:	00 
c010e7c0:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
c010e7c7:	e8 47 fa ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(19,0x8,(uint32_t)isr_19,0xEE00);
c010e7cc:	b8 0d 02 11 c0       	mov    $0xc011020d,%eax
c010e7d1:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e7d8:	00 
c010e7d9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e7dd:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e7e4:	00 
c010e7e5:	c7 04 24 13 00 00 00 	movl   $0x13,(%esp)
c010e7ec:	e8 22 fa ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(20,0x8,(uint32_t)isr_20,0xEE00);
c010e7f1:	b8 16 02 11 c0       	mov    $0xc0110216,%eax
c010e7f6:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e7fd:	00 
c010e7fe:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e802:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e809:	00 
c010e80a:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c010e811:	e8 fd f9 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(21,0x8,(uint32_t)isr_21,0xEE00);
c010e816:	b8 1f 02 11 c0       	mov    $0xc011021f,%eax
c010e81b:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e822:	00 
c010e823:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e827:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e82e:	00 
c010e82f:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
c010e836:	e8 d8 f9 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(22,0x8,(uint32_t)isr_22,0xEE00);
c010e83b:	b8 28 02 11 c0       	mov    $0xc0110228,%eax
c010e840:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e847:	00 
c010e848:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e84c:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e853:	00 
c010e854:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
c010e85b:	e8 b3 f9 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(23,0x8,(uint32_t)isr_23,0xEE00);
c010e860:	b8 31 02 11 c0       	mov    $0xc0110231,%eax
c010e865:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e86c:	00 
c010e86d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e871:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e878:	00 
c010e879:	c7 04 24 17 00 00 00 	movl   $0x17,(%esp)
c010e880:	e8 8e f9 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(24,0x8,(uint32_t)isr_24,0xEE00);
c010e885:	b8 3a 02 11 c0       	mov    $0xc011023a,%eax
c010e88a:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e891:	00 
c010e892:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e896:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e89d:	00 
c010e89e:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010e8a5:	e8 69 f9 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(25,0x8,(uint32_t)isr_25,0xEE00);
c010e8aa:	b8 43 02 11 c0       	mov    $0xc0110243,%eax
c010e8af:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e8b6:	00 
c010e8b7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e8bb:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e8c2:	00 
c010e8c3:	c7 04 24 19 00 00 00 	movl   $0x19,(%esp)
c010e8ca:	e8 44 f9 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(26,0x8,(uint32_t)isr_26,0xEE00);
c010e8cf:	b8 4c 02 11 c0       	mov    $0xc011024c,%eax
c010e8d4:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e8db:	00 
c010e8dc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e8e0:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e8e7:	00 
c010e8e8:	c7 04 24 1a 00 00 00 	movl   $0x1a,(%esp)
c010e8ef:	e8 1f f9 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(27,0x8,(uint32_t)isr_27,0xEE00);
c010e8f4:	b8 55 02 11 c0       	mov    $0xc0110255,%eax
c010e8f9:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e900:	00 
c010e901:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e905:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e90c:	00 
c010e90d:	c7 04 24 1b 00 00 00 	movl   $0x1b,(%esp)
c010e914:	e8 fa f8 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(28,0x8,(uint32_t)isr_28,0xEE00);
c010e919:	b8 5e 02 11 c0       	mov    $0xc011025e,%eax
c010e91e:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e925:	00 
c010e926:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e92a:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e931:	00 
c010e932:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
c010e939:	e8 d5 f8 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(29,0x8,(uint32_t)isr_29,0xEE00);
c010e93e:	b8 67 02 11 c0       	mov    $0xc0110267,%eax
c010e943:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e94a:	00 
c010e94b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e94f:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e956:	00 
c010e957:	c7 04 24 1d 00 00 00 	movl   $0x1d,(%esp)
c010e95e:	e8 b0 f8 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(30,0x8,(uint32_t)isr_30,0xEE00);
c010e963:	b8 70 02 11 c0       	mov    $0xc0110270,%eax
c010e968:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e96f:	00 
c010e970:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e974:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e97b:	00 
c010e97c:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
c010e983:	e8 8b f8 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(31,0x8,(uint32_t)isr_31,0xEE00);
c010e988:	b8 79 02 11 c0       	mov    $0xc0110279,%eax
c010e98d:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e994:	00 
c010e995:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e999:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e9a0:	00 
c010e9a1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c010e9a8:	e8 66 f8 ff ff       	call   c010e213 <Set_IDT_Entry>
    //IRQs
    Set_IDT_Entry(32,0x8,(uint32_t)isr_32,0xEE00);
c010e9ad:	b8 85 02 11 c0       	mov    $0xc0110285,%eax
c010e9b2:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e9b9:	00 
c010e9ba:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9be:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e9c5:	00 
c010e9c6:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010e9cd:	e8 41 f8 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(33,0x8,(uint32_t)isr_33,0xEE00);
c010e9d2:	b8 8b 02 11 c0       	mov    $0xc011028b,%eax
c010e9d7:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e9de:	00 
c010e9df:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9e3:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e9ea:	00 
c010e9eb:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e9f2:	e8 1c f8 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(34,0x8,(uint32_t)isr_34,0xEE00);
c010e9f7:	b8 91 02 11 c0       	mov    $0xc0110291,%eax
c010e9fc:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea03:	00 
c010ea04:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea08:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea0f:	00 
c010ea10:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
c010ea17:	e8 f7 f7 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(35,0x8,(uint32_t)isr_35,0xEE00);
c010ea1c:	b8 97 02 11 c0       	mov    $0xc0110297,%eax
c010ea21:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea28:	00 
c010ea29:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea2d:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea34:	00 
c010ea35:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
c010ea3c:	e8 d2 f7 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(36,0x8,(uint32_t)isr_36,0xEE00);
c010ea41:	b8 9d 02 11 c0       	mov    $0xc011029d,%eax
c010ea46:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea4d:	00 
c010ea4e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea52:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea59:	00 
c010ea5a:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
c010ea61:	e8 ad f7 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(37,0x8,(uint32_t)isr_37,0xEE00);
c010ea66:	b8 a3 02 11 c0       	mov    $0xc01102a3,%eax
c010ea6b:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea72:	00 
c010ea73:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea77:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea7e:	00 
c010ea7f:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010ea86:	e8 88 f7 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(38,0x8,(uint32_t)isr_38,0xEE00);
c010ea8b:	b8 a9 02 11 c0       	mov    $0xc01102a9,%eax
c010ea90:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea97:	00 
c010ea98:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea9c:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eaa3:	00 
c010eaa4:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
c010eaab:	e8 63 f7 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(39,0x8,(uint32_t)isr_39,0xEE00);
c010eab0:	b8 af 02 11 c0       	mov    $0xc01102af,%eax
c010eab5:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eabc:	00 
c010eabd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eac1:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eac8:	00 
c010eac9:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
c010ead0:	e8 3e f7 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(40,0x8,(uint32_t)isr_40,0xEE00);
c010ead5:	b8 b5 02 11 c0       	mov    $0xc01102b5,%eax
c010eada:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eae1:	00 
c010eae2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eae6:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eaed:	00 
c010eaee:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
c010eaf5:	e8 19 f7 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(41,0x8,(uint32_t)isr_41,0xEE00);
c010eafa:	b8 bb 02 11 c0       	mov    $0xc01102bb,%eax
c010eaff:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb06:	00 
c010eb07:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb0b:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb12:	00 
c010eb13:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
c010eb1a:	e8 f4 f6 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(42,0x8,(uint32_t)isr_42,0xEE00);
c010eb1f:	b8 c1 02 11 c0       	mov    $0xc01102c1,%eax
c010eb24:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb2b:	00 
c010eb2c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb30:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb37:	00 
c010eb38:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
c010eb3f:	e8 cf f6 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(43,0x8,(uint32_t)isr_43,0xEE00);
c010eb44:	b8 c7 02 11 c0       	mov    $0xc01102c7,%eax
c010eb49:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb50:	00 
c010eb51:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb55:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb5c:	00 
c010eb5d:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
c010eb64:	e8 aa f6 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(44,0x8,(uint32_t)isr_44,0xEE00);
c010eb69:	b8 cd 02 11 c0       	mov    $0xc01102cd,%eax
c010eb6e:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb75:	00 
c010eb76:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb7a:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb81:	00 
c010eb82:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c010eb89:	e8 85 f6 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(45,0x8,(uint32_t)isr_45,0xEE00);
c010eb8e:	b8 d3 02 11 c0       	mov    $0xc01102d3,%eax
c010eb93:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb9a:	00 
c010eb9b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb9f:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eba6:	00 
c010eba7:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010ebae:	e8 60 f6 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(46,0x8,(uint32_t)isr_46,0xEE00);
c010ebb3:	b8 d9 02 11 c0       	mov    $0xc01102d9,%eax
c010ebb8:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ebbf:	00 
c010ebc0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ebc4:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ebcb:	00 
c010ebcc:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
c010ebd3:	e8 3b f6 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(47,0x8,(uint32_t)isr_47,0xEE00);
c010ebd8:	b8 df 02 11 c0       	mov    $0xc01102df,%eax
c010ebdd:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ebe4:	00 
c010ebe5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ebe9:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ebf0:	00 
c010ebf1:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
c010ebf8:	e8 16 f6 ff ff       	call   c010e213 <Set_IDT_Entry>

    Set_IDT_Entry(0x70,0x8,(uint32_t)isr_112,0xEE00); //Universe syscall interface
c010ebfd:	b8 e5 02 11 c0       	mov    $0xc01102e5,%eax
c010ec02:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ec09:	00 
c010ec0a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec0e:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ec15:	00 
c010ec16:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010ec1d:	e8 f1 f5 ff ff       	call   c010e213 <Set_IDT_Entry>
    Set_IDT_Entry(0x80,0x8,(uint32_t)isr_128,0xEE00); //Linux syscall interface
c010ec22:	b8 eb 02 11 c0       	mov    $0xc01102eb,%eax
c010ec27:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ec2e:	00 
c010ec2f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec33:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ec3a:	00 
c010ec3b:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010ec42:	e8 cc f5 ff ff       	call   c010e213 <Set_IDT_Entry>
    lidt(129);
c010ec47:	c7 04 24 81 00 00 00 	movl   $0x81,(%esp)
c010ec4e:	e8 17 f5 ff ff       	call   c010e16a <lidt>
}
c010ec53:	c9                   	leave  
c010ec54:	c3                   	ret    

c010ec55 <pd_dump>:
 * @param pointer to the phys. pd frame
 * @return void
 */

void pd_dump(arch_vmm_context_t *context)
{
c010ec55:	55                   	push   %ebp
c010ec56:	89 e5                	mov    %esp,%ebp
c010ec58:	83 ec 48             	sub    $0x48,%esp
    int pdi, pti, phys_base, virt_base, size, sec = 0;
c010ec5b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    uint32_t *pt;
    uint32_t *pd = context->entries;
c010ec62:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec65:	8b 00                	mov    (%eax),%eax
c010ec67:	89 45 dc             	mov    %eax,-0x24(%ebp)
    for( pdi = 0; pdi < PD_LENGTH; pdi++ )
c010ec6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ec71:	e9 27 02 00 00       	jmp    c010ee9d <pd_dump+0x248>
    {
        if(sec && (pd[pdi] & 1) == 0)
c010ec76:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010ec7a:	74 63                	je     c010ecdf <pd_dump+0x8a>
c010ec7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec7f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ec86:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ec89:	01 d0                	add    %edx,%eax
c010ec8b:	8b 00                	mov    (%eax),%eax
c010ec8d:	83 e0 01             	and    $0x1,%eax
c010ec90:	85 c0                	test   %eax,%eax
c010ec92:	75 4b                	jne    c010ecdf <pd_dump+0x8a>
        {
            printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c010ec94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ec97:	89 c2                	mov    %eax,%edx
c010ec99:	c1 e2 0c             	shl    $0xc,%edx
c010ec9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec9f:	01 d0                	add    %edx,%eax
c010eca1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010eca4:	89 d1                	mov    %edx,%ecx
c010eca6:	c1 e1 0c             	shl    $0xc,%ecx
c010eca9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ecac:	01 ca                	add    %ecx,%edx
c010ecae:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ecb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ecb5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ecb9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ecbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ecc0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ecc4:	c7 04 24 04 26 11 c0 	movl   $0xc0112604,(%esp)
c010eccb:	e8 ad 44 ff ff       	call   c010317d <printf>
            sec = 0;
c010ecd0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        }

        while( (pd[pdi] & 1) == 0 )
c010ecd7:	eb 06                	jmp    c010ecdf <pd_dump+0x8a>
        {
            pdi++;
c010ecd9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ecdd:	eb 01                	jmp    c010ece0 <pd_dump+0x8b>
        {
            printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
            sec = 0;
        }

        while( (pd[pdi] & 1) == 0 )
c010ecdf:	90                   	nop
c010ece0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ece3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ecea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010eced:	01 d0                	add    %edx,%eax
c010ecef:	8b 00                	mov    (%eax),%eax
c010ecf1:	83 e0 01             	and    $0x1,%eax
c010ecf4:	85 c0                	test   %eax,%eax
c010ecf6:	74 e1                	je     c010ecd9 <pd_dump+0x84>
        {
            pdi++;
        }

        pt = pt_get(context, pdi, 0);
c010ecf8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ecff:	00 
c010ed00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed03:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed07:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed0a:	89 04 24             	mov    %eax,(%esp)
c010ed0d:	e8 bf ee ff ff       	call   c010dbd1 <pt_get>
c010ed12:	89 45 d8             	mov    %eax,-0x28(%ebp)

        for( pti = 0; pti < PT_LENGTH; pti++ )
c010ed15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010ed1c:	e9 6b 01 00 00       	jmp    c010ee8c <pd_dump+0x237>
        {
            if(sec && (pt[pti] & 1) == 0)
c010ed21:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010ed25:	74 63                	je     c010ed8a <pd_dump+0x135>
c010ed27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed2a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ed31:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ed34:	01 d0                	add    %edx,%eax
c010ed36:	8b 00                	mov    (%eax),%eax
c010ed38:	83 e0 01             	and    $0x1,%eax
c010ed3b:	85 c0                	test   %eax,%eax
c010ed3d:	75 4b                	jne    c010ed8a <pd_dump+0x135>
            {
                printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c010ed3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ed42:	89 c2                	mov    %eax,%edx
c010ed44:	c1 e2 0c             	shl    $0xc,%edx
c010ed47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ed4a:	01 d0                	add    %edx,%eax
c010ed4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ed4f:	89 d1                	mov    %edx,%ecx
c010ed51:	c1 e1 0c             	shl    $0xc,%ecx
c010ed54:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ed57:	01 ca                	add    %ecx,%edx
c010ed59:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ed5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ed60:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ed64:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ed68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed6f:	c7 04 24 04 26 11 c0 	movl   $0xc0112604,(%esp)
c010ed76:	e8 02 44 ff ff       	call   c010317d <printf>
                sec = 0;
c010ed7b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            }

            while( (pt[pti] & 1) == 0 )
c010ed82:	eb 06                	jmp    c010ed8a <pd_dump+0x135>
            {
                pti++;
c010ed84:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010ed88:	eb 01                	jmp    c010ed8b <pd_dump+0x136>
            {
                printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
                sec = 0;
            }

            while( (pt[pti] & 1) == 0 )
c010ed8a:	90                   	nop
c010ed8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed8e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ed95:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ed98:	01 d0                	add    %edx,%eax
c010ed9a:	8b 00                	mov    (%eax),%eax
c010ed9c:	83 e0 01             	and    $0x1,%eax
c010ed9f:	85 c0                	test   %eax,%eax
c010eda1:	74 e1                	je     c010ed84 <pd_dump+0x12f>
            {
                pti++;
            }
            if(sec == 0)
c010eda3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010eda7:	75 3f                	jne    c010ede8 <pd_dump+0x193>
            {
                sec = 1;
c010eda9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
                phys_base = ((pt[pti] | 0xfff) ^ 0xfff);
c010edb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010edba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010edbd:	01 d0                	add    %edx,%eax
c010edbf:	8b 00                	mov    (%eax),%eax
c010edc1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010edc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
                virt_base = (pdi << 22) | (pti << 12);
c010edc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edcc:	89 c2                	mov    %eax,%edx
c010edce:	c1 e2 16             	shl    $0x16,%edx
c010edd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edd4:	c1 e0 0c             	shl    $0xc,%eax
c010edd7:	09 d0                	or     %edx,%eax
c010edd9:	89 45 e8             	mov    %eax,-0x18(%ebp)
                size = 0;
c010eddc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010ede3:	e9 a0 00 00 00       	jmp    c010ee88 <pd_dump+0x233>

            }
            else
            {
                if( (phys_base + (4096 * (size+1) )) == ( (pt[pti] | 0xfff) ^ 0xfff) )
c010ede8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010edeb:	83 c0 01             	add    $0x1,%eax
c010edee:	89 c2                	mov    %eax,%edx
c010edf0:	c1 e2 0c             	shl    $0xc,%edx
c010edf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010edf6:	01 d0                	add    %edx,%eax
c010edf8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010edfb:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
c010ee02:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ee05:	01 ca                	add    %ecx,%edx
c010ee07:	8b 12                	mov    (%edx),%edx
c010ee09:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c010ee0f:	39 d0                	cmp    %edx,%eax
c010ee11:	75 06                	jne    c010ee19 <pd_dump+0x1c4>
                {
                    size++;
c010ee13:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010ee17:	eb 6f                	jmp    c010ee88 <pd_dump+0x233>
                }
                else
                {
                    printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c010ee19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ee1c:	89 c2                	mov    %eax,%edx
c010ee1e:	c1 e2 0c             	shl    $0xc,%edx
c010ee21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ee24:	01 d0                	add    %edx,%eax
c010ee26:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ee29:	89 d1                	mov    %edx,%ecx
c010ee2b:	c1 e1 0c             	shl    $0xc,%ecx
c010ee2e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ee31:	01 ca                	add    %ecx,%edx
c010ee33:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ee37:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ee3a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ee3e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ee42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ee45:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee49:	c7 04 24 04 26 11 c0 	movl   $0xc0112604,(%esp)
c010ee50:	e8 28 43 ff ff       	call   c010317d <printf>
                    phys_base = ((pt[pti] | 0xfff) ^ 0xfff);
c010ee55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee58:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ee5f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ee62:	01 d0                	add    %edx,%eax
c010ee64:	8b 00                	mov    (%eax),%eax
c010ee66:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010ee6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    virt_base = (pdi << 22) | (pti << 12);
c010ee6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee71:	89 c2                	mov    %eax,%edx
c010ee73:	c1 e2 16             	shl    $0x16,%edx
c010ee76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee79:	c1 e0 0c             	shl    $0xc,%eax
c010ee7c:	09 d0                	or     %edx,%eax
c010ee7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    size = 0;
c010ee81:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            pdi++;
        }

        pt = pt_get(context, pdi, 0);

        for( pti = 0; pti < PT_LENGTH; pti++ )
c010ee88:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010ee8c:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c010ee93:	0f 8e 88 fe ff ff    	jle    c010ed21 <pd_dump+0xcc>
void pd_dump(arch_vmm_context_t *context)
{
    int pdi, pti, phys_base, virt_base, size, sec = 0;
    uint32_t *pt;
    uint32_t *pd = context->entries;
    for( pdi = 0; pdi < PD_LENGTH; pdi++ )
c010ee99:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ee9d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010eea4:	0f 8e cc fd ff ff    	jle    c010ec76 <pd_dump+0x21>
            }
        }

    }

    if(sec)
c010eeaa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010eeae:	74 3c                	je     c010eeec <pd_dump+0x297>
    {
        printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c010eeb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010eeb3:	89 c2                	mov    %eax,%edx
c010eeb5:	c1 e2 0c             	shl    $0xc,%edx
c010eeb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eebb:	01 d0                	add    %edx,%eax
c010eebd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010eec0:	89 d1                	mov    %edx,%ecx
c010eec2:	c1 e1 0c             	shl    $0xc,%ecx
c010eec5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010eec8:	01 ca                	add    %ecx,%edx
c010eeca:	89 44 24 10          	mov    %eax,0x10(%esp)
c010eece:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eed1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010eed5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010eed9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eedc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eee0:	c7 04 24 04 26 11 c0 	movl   $0xc0112604,(%esp)
c010eee7:	e8 91 42 ff ff       	call   c010317d <printf>
    }
}
c010eeec:	c9                   	leave  
c010eeed:	c3                   	ret    

c010eeee <pd_dump2>:

void pd_dump2(arch_vmm_context_t *context)
{
c010eeee:	55                   	push   %ebp
c010eeef:	89 e5                	mov    %esp,%ebp
c010eef1:	83 ec 58             	sub    $0x58,%esp

#define START 	virt_begin = (pd_index * 1024 + pt_index) * 4096; \
		phys_begin = paddr; \
		size = 1;

    int pd_index = 0;
c010eef4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int pt_index = 0;
c010eefb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    uint32_t *pd = context->entries;
c010ef02:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef05:	8b 00                	mov    (%eax),%eax
c010ef07:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t *pt = NULL;
c010ef0a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

    uint32_t virt_begin = 0;
c010ef11:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    uint32_t phys_begin = 0;
c010ef18:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    int size = 0;
c010ef1f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    uint32_t entry = 0;
c010ef26:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    uint32_t paddr = 0;
c010ef2d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)

    for(pd_index = 0; pd_index < 1024; pd_index++)
c010ef34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ef3b:	e9 33 02 00 00       	jmp    c010f173 <pd_dump2+0x285>
    {
        if(pd[pd_index] & VMM_PRESENT)
c010ef40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef43:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ef4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ef4d:	01 d0                	add    %edx,%eax
c010ef4f:	8b 00                	mov    (%eax),%eax
c010ef51:	83 e0 01             	and    $0x1,%eax
c010ef54:	85 c0                	test   %eax,%eax
c010ef56:	0f 84 a2 01 00 00    	je     c010f0fe <pd_dump2+0x210>
        {
            pt = pt_get(context, pd_index, VMM_PRESENT);
c010ef5c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010ef63:	00 
c010ef64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef67:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ef6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef6e:	89 04 24             	mov    %eax,(%esp)
c010ef71:	e8 5b ec ff ff       	call   c010dbd1 <pt_get>
c010ef76:	89 45 dc             	mov    %eax,-0x24(%ebp)

            for(pt_index = 0; pt_index < 1024; pt_index++)
c010ef79:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010ef80:	e9 6a 01 00 00       	jmp    c010f0ef <pd_dump2+0x201>
            {
                entry = pt[pt_index];
c010ef85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef88:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ef8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ef92:	01 d0                	add    %edx,%eax
c010ef94:	8b 00                	mov    (%eax),%eax
c010ef96:	89 45 d8             	mov    %eax,-0x28(%ebp)
                if(entry & VMM_PRESENT)
c010ef99:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ef9c:	83 e0 01             	and    $0x1,%eax
c010ef9f:	85 c0                	test   %eax,%eax
c010efa1:	0f 84 d3 00 00 00    	je     c010f07a <pd_dump2+0x18c>
                {
                    paddr = pt[pt_index] & ~0xfff;
c010efa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010efaa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010efb1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010efb4:	01 d0                	add    %edx,%eax
c010efb6:	8b 00                	mov    (%eax),%eax
c010efb8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010efbd:	89 45 d4             	mov    %eax,-0x2c(%ebp)

                    if(size == 0)
c010efc0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010efc4:	75 25                	jne    c010efeb <pd_dump2+0xfd>
                    {
                        START
c010efc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efc9:	89 c2                	mov    %eax,%edx
c010efcb:	c1 e2 0a             	shl    $0xa,%edx
c010efce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010efd1:	01 d0                	add    %edx,%eax
c010efd3:	c1 e0 0c             	shl    $0xc,%eax
c010efd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010efd9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010efdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010efdf:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c010efe6:	e9 00 01 00 00       	jmp    c010f0eb <pd_dump2+0x1fd>
                    }
                    else
                    {
                        if(paddr != phys_begin + size*4096)
c010efeb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010efee:	c1 e0 0c             	shl    $0xc,%eax
c010eff1:	89 c2                	mov    %eax,%edx
c010eff3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eff6:	01 d0                	add    %edx,%eax
c010eff8:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010effb:	74 77                	je     c010f074 <pd_dump2+0x186>
                        {
                            END
c010effd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f001:	0f 8e e4 00 00 00    	jle    c010f0eb <pd_dump2+0x1fd>
c010f007:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c010f00b:	75 1c                	jne    c010f029 <pd_dump2+0x13b>
c010f00d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f010:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f014:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f017:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f01b:	c7 04 24 28 26 11 c0 	movl   $0xc0112628,(%esp)
c010f022:	e8 56 41 ff ff       	call   c010317d <printf>
c010f027:	eb 42                	jmp    c010f06b <pd_dump2+0x17d>
c010f029:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f02c:	83 e8 01             	sub    $0x1,%eax
c010f02f:	c1 e0 0c             	shl    $0xc,%eax
c010f032:	89 c2                	mov    %eax,%edx
c010f034:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f037:	01 d0                	add    %edx,%eax
c010f039:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f03c:	83 ea 01             	sub    $0x1,%edx
c010f03f:	c1 e2 0c             	shl    $0xc,%edx
c010f042:	89 d1                	mov    %edx,%ecx
c010f044:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f047:	01 ca                	add    %ecx,%edx
c010f049:	89 44 24 10          	mov    %eax,0x10(%esp)
c010f04d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f050:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f054:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f058:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f05b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f05f:	c7 04 24 04 26 11 c0 	movl   $0xc0112604,(%esp)
c010f066:	e8 12 41 ff ff       	call   c010317d <printf>
c010f06b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010f072:	eb 77                	jmp    c010f0eb <pd_dump2+0x1fd>
                        }
                        else
                        {
                            size++;
c010f074:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010f078:	eb 71                	jmp    c010f0eb <pd_dump2+0x1fd>
                        }
                    }
                }
                else
                {
                    END
c010f07a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f07e:	7e 6b                	jle    c010f0eb <pd_dump2+0x1fd>
c010f080:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c010f084:	75 1c                	jne    c010f0a2 <pd_dump2+0x1b4>
c010f086:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f089:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f08d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f090:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f094:	c7 04 24 28 26 11 c0 	movl   $0xc0112628,(%esp)
c010f09b:	e8 dd 40 ff ff       	call   c010317d <printf>
c010f0a0:	eb 42                	jmp    c010f0e4 <pd_dump2+0x1f6>
c010f0a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f0a5:	83 e8 01             	sub    $0x1,%eax
c010f0a8:	c1 e0 0c             	shl    $0xc,%eax
c010f0ab:	89 c2                	mov    %eax,%edx
c010f0ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f0b0:	01 d0                	add    %edx,%eax
c010f0b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f0b5:	83 ea 01             	sub    $0x1,%edx
c010f0b8:	c1 e2 0c             	shl    $0xc,%edx
c010f0bb:	89 d1                	mov    %edx,%ecx
c010f0bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f0c0:	01 ca                	add    %ecx,%edx
c010f0c2:	89 44 24 10          	mov    %eax,0x10(%esp)
c010f0c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f0c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f0cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f0d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f0d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f0d8:	c7 04 24 04 26 11 c0 	movl   $0xc0112604,(%esp)
c010f0df:	e8 99 40 ff ff       	call   c010317d <printf>
c010f0e4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    {
        if(pd[pd_index] & VMM_PRESENT)
        {
            pt = pt_get(context, pd_index, VMM_PRESENT);

            for(pt_index = 0; pt_index < 1024; pt_index++)
c010f0eb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010f0ef:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c010f0f6:	0f 8e 89 fe ff ff    	jle    c010ef85 <pd_dump2+0x97>
c010f0fc:	eb 71                	jmp    c010f16f <pd_dump2+0x281>
                }
            }
        }
        else
        {
            END
c010f0fe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f102:	7e 6b                	jle    c010f16f <pd_dump2+0x281>
c010f104:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c010f108:	75 1c                	jne    c010f126 <pd_dump2+0x238>
c010f10a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f10d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f111:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f114:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f118:	c7 04 24 28 26 11 c0 	movl   $0xc0112628,(%esp)
c010f11f:	e8 59 40 ff ff       	call   c010317d <printf>
c010f124:	eb 42                	jmp    c010f168 <pd_dump2+0x27a>
c010f126:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f129:	83 e8 01             	sub    $0x1,%eax
c010f12c:	c1 e0 0c             	shl    $0xc,%eax
c010f12f:	89 c2                	mov    %eax,%edx
c010f131:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f134:	01 d0                	add    %edx,%eax
c010f136:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f139:	83 ea 01             	sub    $0x1,%edx
c010f13c:	c1 e2 0c             	shl    $0xc,%edx
c010f13f:	89 d1                	mov    %edx,%ecx
c010f141:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f144:	01 ca                	add    %ecx,%edx
c010f146:	89 44 24 10          	mov    %eax,0x10(%esp)
c010f14a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f14d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f151:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f155:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f158:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f15c:	c7 04 24 04 26 11 c0 	movl   $0xc0112604,(%esp)
c010f163:	e8 15 40 ff ff       	call   c010317d <printf>
c010f168:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    int size = 0;

    uint32_t entry = 0;
    uint32_t paddr = 0;

    for(pd_index = 0; pd_index < 1024; pd_index++)
c010f16f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f173:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010f17a:	0f 8e c0 fd ff ff    	jle    c010ef40 <pd_dump2+0x52>
        else
        {
            END
        }
    }
}
c010f180:	c9                   	leave  
c010f181:	c3                   	ret    

c010f182 <pmm_count_free_pages>:
/**
 * @brief Returns the number of free pages.
 * @return number of free pages
 */
int pmm_count_free_pages(void)
{
c010f182:	55                   	push   %ebp
c010f183:	89 e5                	mov    %esp,%ebp
c010f185:	56                   	push   %esi
c010f186:	53                   	push   %ebx
c010f187:	83 ec 10             	sub    $0x10,%esp
    int free_pages = 0;
c010f18a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int i, z;

    for (i = 0; i < PMM_MMAP_SIZE; i++)
c010f191:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010f198:	eb 3b                	jmp    c010f1d5 <pmm_count_free_pages+0x53>
    {
        for (z = 0; z < 32; z++)
c010f19a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010f1a1:	eb 28                	jmp    c010f1cb <pmm_count_free_pages+0x49>
        {
            if (pmm_mmap[i] & (1 << z))
c010f1a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1a6:	8b 14 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%edx
c010f1ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1b0:	bb 01 00 00 00       	mov    $0x1,%ebx
c010f1b5:	89 de                	mov    %ebx,%esi
c010f1b7:	89 c1                	mov    %eax,%ecx
c010f1b9:	d3 e6                	shl    %cl,%esi
c010f1bb:	89 f0                	mov    %esi,%eax
c010f1bd:	21 d0                	and    %edx,%eax
c010f1bf:	85 c0                	test   %eax,%eax
c010f1c1:	74 04                	je     c010f1c7 <pmm_count_free_pages+0x45>
            {
                free_pages++;
c010f1c3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    int free_pages = 0;
    int i, z;

    for (i = 0; i < PMM_MMAP_SIZE; i++)
    {
        for (z = 0; z < 32; z++)
c010f1c7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010f1cb:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c010f1cf:	7e d2                	jle    c010f1a3 <pmm_count_free_pages+0x21>
int pmm_count_free_pages(void)
{
    int free_pages = 0;
    int i, z;

    for (i = 0; i < PMM_MMAP_SIZE; i++)
c010f1d1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010f1d5:	81 7d f0 ff 7f 00 00 	cmpl   $0x7fff,-0x10(%ebp)
c010f1dc:	7e bc                	jle    c010f19a <pmm_count_free_pages+0x18>
            {
                free_pages++;
            }
        }
    }
    return free_pages;
c010f1de:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f1e1:	83 c4 10             	add    $0x10,%esp
c010f1e4:	5b                   	pop    %ebx
c010f1e5:	5e                   	pop    %esi
c010f1e6:	5d                   	pop    %ebp
c010f1e7:	c3                   	ret    

c010f1e8 <pmm_check_page>:
 * @brief Checs if the page is already in use or not.
 * @param page the pysical base adress of the page
 * @return 0 = page is already taken; 1 = Page is free
 */
int pmm_check_page(paddr_t page)
{
c010f1e8:	55                   	push   %ebp
c010f1e9:	89 e5                	mov    %esp,%ebp
c010f1eb:	56                   	push   %esi
c010f1ec:	53                   	push   %ebx
    return pmm_mmap[page / PAGE_SIZE / 32] & (1 << ((page / PAGE_SIZE) & 31));
c010f1ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1f0:	c1 e8 11             	shr    $0x11,%eax
c010f1f3:	8b 14 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%edx
c010f1fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1fd:	c1 e8 0c             	shr    $0xc,%eax
c010f200:	83 e0 1f             	and    $0x1f,%eax
c010f203:	bb 01 00 00 00       	mov    $0x1,%ebx
c010f208:	89 de                	mov    %ebx,%esi
c010f20a:	89 c1                	mov    %eax,%ecx
c010f20c:	d3 e6                	shl    %cl,%esi
c010f20e:	89 f0                	mov    %esi,%eax
c010f210:	21 d0                	and    %edx,%eax
}
c010f212:	5b                   	pop    %ebx
c010f213:	5e                   	pop    %esi
c010f214:	5d                   	pop    %ebp
c010f215:	c3                   	ret    

c010f216 <pmm_check_page_range>:
 * @param page the pysical base adress of the page
 * @param range number of pages to be checked
 * @return 0 = page is already taken; 1 = Page is free
 */
int pmm_check_page_range(paddr_t page, size_t range)
{
c010f216:	55                   	push   %ebp
c010f217:	89 e5                	mov    %esp,%ebp
c010f219:	83 ec 14             	sub    $0x14,%esp
    int r = 1;
c010f21c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    size_t i;
    for(i=0; i < range; i++)
c010f223:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010f22a:	eb 19                	jmp    c010f245 <pmm_check_page_range+0x2f>
    {
        r &= pmm_check_page(page);
c010f22c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f22f:	89 04 24             	mov    %eax,(%esp)
c010f232:	e8 b1 ff ff ff       	call   c010f1e8 <pmm_check_page>
c010f237:	21 45 fc             	and    %eax,-0x4(%ebp)
        page += PAGE_SIZE;
c010f23a:	81 45 08 00 10 00 00 	addl   $0x1000,0x8(%ebp)
 */
int pmm_check_page_range(paddr_t page, size_t range)
{
    int r = 1;
    size_t i;
    for(i=0; i < range; i++)
c010f241:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c010f245:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010f248:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f24b:	72 df                	jb     c010f22c <pmm_check_page_range+0x16>
    {
        r &= pmm_check_page(page);
        page += PAGE_SIZE;
    }
    return r;
c010f24d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010f250:	c9                   	leave  
c010f251:	c3                   	ret    

c010f252 <pmm_mark_page_as_free>:
/**
 * @brief Mark page als free.
 * @param page pointer on the begin of the page which should be marked as free.
 */
void pmm_mark_page_as_free(paddr_t page)
{
c010f252:	55                   	push   %ebp
c010f253:	89 e5                	mov    %esp,%ebp
c010f255:	57                   	push   %edi
c010f256:	56                   	push   %esi
c010f257:	53                   	push   %ebx
    //TODO: should that be possible from the entire kernel?
    pmm_mmap[page / PAGE_SIZE / 32] |= 1 << ((page / PAGE_SIZE) & 31);
c010f258:	8b 45 08             	mov    0x8(%ebp),%eax
c010f25b:	c1 e8 11             	shr    $0x11,%eax
c010f25e:	8b 1c 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%ebx
c010f265:	8b 55 08             	mov    0x8(%ebp),%edx
c010f268:	c1 ea 0c             	shr    $0xc,%edx
c010f26b:	83 e2 1f             	and    $0x1f,%edx
c010f26e:	be 01 00 00 00       	mov    $0x1,%esi
c010f273:	89 f7                	mov    %esi,%edi
c010f275:	89 d1                	mov    %edx,%ecx
c010f277:	d3 e7                	shl    %cl,%edi
c010f279:	89 fa                	mov    %edi,%edx
c010f27b:	09 da                	or     %ebx,%edx
c010f27d:	89 14 85 60 a0 11 c0 	mov    %edx,-0x3fee5fa0(,%eax,4)
}
c010f284:	5b                   	pop    %ebx
c010f285:	5e                   	pop    %esi
c010f286:	5f                   	pop    %edi
c010f287:	5d                   	pop    %ebp
c010f288:	c3                   	ret    

c010f289 <pmm_mark_page_range_as_free>:
 * @brief Mark num pages as free.
 * @param page pointer on the begin of the first page.
 * @param num number of the pages which should be marked as free.
 */
void pmm_mark_page_range_as_free(paddr_t page, unsigned int num)
{
c010f289:	55                   	push   %ebp
c010f28a:	89 e5                	mov    %esp,%ebp
c010f28c:	83 ec 28             	sub    $0x28,%esp
    int i;

    if (!num)
c010f28f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f293:	75 0c                	jne    c010f2a1 <pmm_mark_page_range_as_free+0x18>
        panic("PMM: pmm_mark_page_range_as_free(): num is zero");
c010f295:	c7 04 24 3c 26 11 c0 	movl   $0xc011263c,(%esp)
c010f29c:	e8 ce cd ff ff       	call   c010c06f <panic>

    if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
c010f2a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2a4:	89 c2                	mov    %eax,%edx
c010f2a6:	c1 ea 0c             	shr    $0xc,%edx
c010f2a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f2ac:	01 d0                	add    %edx,%eax
c010f2ae:	3d 00 00 10 00       	cmp    $0x100000,%eax
c010f2b3:	76 0c                	jbe    c010f2c1 <pmm_mark_page_range_as_free+0x38>
        panic("PMM: pmm_mark_page_range_as_free(): marking the given\n"
c010f2b5:	c7 04 24 6c 26 11 c0 	movl   $0xc011266c,(%esp)
c010f2bc:	e8 ae cd ff ff       	call   c010c06f <panic>
              "pages as free would cause a buffer overrun");


    for (i = 0; i < num; i++)
c010f2c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f2c8:	eb 19                	jmp    c010f2e3 <pmm_mark_page_range_as_free+0x5a>
    {
        pmm_mark_page_as_free(page + i * PAGE_SIZE);
c010f2ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f2cd:	c1 e0 0c             	shl    $0xc,%eax
c010f2d0:	89 c2                	mov    %eax,%edx
c010f2d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2d5:	01 d0                	add    %edx,%eax
c010f2d7:	89 04 24             	mov    %eax,(%esp)
c010f2da:	e8 73 ff ff ff       	call   c010f252 <pmm_mark_page_as_free>
    if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
        panic("PMM: pmm_mark_page_range_as_free(): marking the given\n"
              "pages as free would cause a buffer overrun");


    for (i = 0; i < num; i++)
c010f2df:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f2e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f2e6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f2e9:	72 df                	jb     c010f2ca <pmm_mark_page_range_as_free+0x41>
    {
        pmm_mark_page_as_free(page + i * PAGE_SIZE);
    }
}
c010f2eb:	c9                   	leave  
c010f2ec:	c3                   	ret    

c010f2ed <pmm_mark_page_as_used>:
/**
 * @brief Mark page as used.
 * @param page pointer on the begin of the first page.
 */
void pmm_mark_page_as_used(paddr_t page)
{
c010f2ed:	55                   	push   %ebp
c010f2ee:	89 e5                	mov    %esp,%ebp
c010f2f0:	57                   	push   %edi
c010f2f1:	56                   	push   %esi
c010f2f2:	53                   	push   %ebx
    pmm_mmap[page / PAGE_SIZE / 32] &= ~(1 << ((page / PAGE_SIZE) & 31));
c010f2f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2f6:	c1 e8 11             	shr    $0x11,%eax
c010f2f9:	8b 1c 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%ebx
c010f300:	8b 55 08             	mov    0x8(%ebp),%edx
c010f303:	c1 ea 0c             	shr    $0xc,%edx
c010f306:	83 e2 1f             	and    $0x1f,%edx
c010f309:	be 01 00 00 00       	mov    $0x1,%esi
c010f30e:	89 f7                	mov    %esi,%edi
c010f310:	89 d1                	mov    %edx,%ecx
c010f312:	d3 e7                	shl    %cl,%edi
c010f314:	89 fa                	mov    %edi,%edx
c010f316:	f7 d2                	not    %edx
c010f318:	21 da                	and    %ebx,%edx
c010f31a:	89 14 85 60 a0 11 c0 	mov    %edx,-0x3fee5fa0(,%eax,4)
}
c010f321:	5b                   	pop    %ebx
c010f322:	5e                   	pop    %esi
c010f323:	5f                   	pop    %edi
c010f324:	5d                   	pop    %ebp
c010f325:	c3                   	ret    

c010f326 <pmm_mark_page_range_as_used>:
 * @brief Mark num pages as used.
 * @param page pointer on the begin of the first page.
 * @param num number of the pages which should be marked as free.
 */
void pmm_mark_page_range_as_used(paddr_t page, unsigned int num)
{
c010f326:	55                   	push   %ebp
c010f327:	89 e5                	mov    %esp,%ebp
c010f329:	83 ec 28             	sub    $0x28,%esp
    int i;

    if (!num)
c010f32c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f330:	75 0c                	jne    c010f33e <pmm_mark_page_range_as_used+0x18>
        panic("PMM: pmm_mark_page_range_as_used(): num is zero");
c010f332:	c7 04 24 d0 26 11 c0 	movl   $0xc01126d0,(%esp)
c010f339:	e8 31 cd ff ff       	call   c010c06f <panic>

    /*
     * PMM is broken, see comment in PMM_INIT
     */
    if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
c010f33e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f341:	89 c2                	mov    %eax,%edx
c010f343:	c1 ea 0c             	shr    $0xc,%edx
c010f346:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f349:	01 d0                	add    %edx,%eax
c010f34b:	3d 00 00 10 00       	cmp    $0x100000,%eax
c010f350:	76 0c                	jbe    c010f35e <pmm_mark_page_range_as_used+0x38>
        panic("PMM: pmm_mark_page_range_as_used(): marking the given\n"
c010f352:	c7 04 24 00 27 11 c0 	movl   $0xc0112700,(%esp)
c010f359:	e8 11 cd ff ff       	call   c010c06f <panic>
              "pages as used would cause a buffer overrun");

    for (i = 0; i < num; i++)
c010f35e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f365:	eb 19                	jmp    c010f380 <pmm_mark_page_range_as_used+0x5a>
    {
        pmm_mark_page_as_used(page + i * PAGE_SIZE);
c010f367:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f36a:	c1 e0 0c             	shl    $0xc,%eax
c010f36d:	89 c2                	mov    %eax,%edx
c010f36f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f372:	01 d0                	add    %edx,%eax
c010f374:	89 04 24             	mov    %eax,(%esp)
c010f377:	e8 71 ff ff ff       	call   c010f2ed <pmm_mark_page_as_used>
     */
    if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
        panic("PMM: pmm_mark_page_range_as_used(): marking the given\n"
              "pages as used would cause a buffer overrun");

    for (i = 0; i < num; i++)
c010f37c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f380:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f383:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f386:	72 df                	jb     c010f367 <pmm_mark_page_range_as_used+0x41>
    {
        pmm_mark_page_as_used(page + i * PAGE_SIZE);
    }
}
c010f388:	c9                   	leave  
c010f389:	c3                   	ret    

c010f38a <pmm_find_free_page>:
 * @brief Search for a free page and returns a pointer on the begin.
 * @param lower_limit minimus size of the page.
 * @return If the search is succesful this method returns a pointer on the begin on this page.
 */
paddr_t pmm_find_free_page(unsigned long lower_limit)
{
c010f38a:	55                   	push   %ebp
c010f38b:	89 e5                	mov    %esp,%ebp
c010f38d:	56                   	push   %esi
c010f38e:	53                   	push   %ebx
c010f38f:	83 ec 20             	sub    $0x20,%esp
    uint32_t i, z;
    paddr_t page = 0;
c010f392:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    i = lower_limit / PAGE_SIZE / 32;
c010f399:	8b 45 08             	mov    0x8(%ebp),%eax
c010f39c:	c1 e8 11             	shr    $0x11,%eax
c010f39f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pmm_mmap[i] & (0xffffffff << (( lower_limit / PAGE_SIZE) % 32)))
c010f3a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3a5:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f3ac:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3af:	c1 ea 0c             	shr    $0xc,%edx
c010f3b2:	83 e2 1f             	and    $0x1f,%edx
c010f3b5:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
c010f3ba:	89 de                	mov    %ebx,%esi
c010f3bc:	89 d1                	mov    %edx,%ecx
c010f3be:	d3 e6                	shl    %cl,%esi
c010f3c0:	89 f2                	mov    %esi,%edx
c010f3c2:	21 d0                	and    %edx,%eax
c010f3c4:	85 c0                	test   %eax,%eax
c010f3c6:	74 45                	je     c010f40d <pmm_find_free_page+0x83>
    {
        z = bit_scan_forward(pmm_mmap[i] & (0xffffffff << ((lower_limit / PAGE_SIZE) % 32)));
c010f3c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3cb:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f3d2:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3d5:	c1 ea 0c             	shr    $0xc,%edx
c010f3d8:	83 e2 1f             	and    $0x1f,%edx
c010f3db:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
c010f3e0:	89 de                	mov    %ebx,%esi
c010f3e2:	89 d1                	mov    %edx,%ecx
c010f3e4:	d3 e6                	shl    %cl,%esi
c010f3e6:	89 f2                	mov    %esi,%edx
c010f3e8:	21 d0                	and    %edx,%eax
c010f3ea:	89 04 24             	mov    %eax,(%esp)
c010f3ed:	e8 1a 2f ff ff       	call   c010230c <bit_scan_forward>
c010f3f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        page = (i * 32 + z) * PAGE_SIZE;
c010f3f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3f8:	89 c2                	mov    %eax,%edx
c010f3fa:	c1 e2 05             	shl    $0x5,%edx
c010f3fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f400:	01 d0                	add    %edx,%eax
c010f402:	c1 e0 0c             	shl    $0xc,%eax
c010f405:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return page;
c010f408:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f40b:	eb 53                	jmp    c010f460 <pmm_find_free_page+0xd6>
    }

    for (i++; i < PMM_MMAP_SIZE; i++)
c010f40d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f411:	eb 3f                	jmp    c010f452 <pmm_find_free_page+0xc8>
    {
        if (pmm_mmap[i])
c010f413:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f416:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f41d:	85 c0                	test   %eax,%eax
c010f41f:	74 2d                	je     c010f44e <pmm_find_free_page+0xc4>
        {
            z = bit_scan_forward(pmm_mmap[i]);
c010f421:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f424:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f42b:	89 04 24             	mov    %eax,(%esp)
c010f42e:	e8 d9 2e ff ff       	call   c010230c <bit_scan_forward>
c010f433:	89 45 ec             	mov    %eax,-0x14(%ebp)
            page = (i * 32 + z) * PAGE_SIZE;
c010f436:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f439:	89 c2                	mov    %eax,%edx
c010f43b:	c1 e2 05             	shl    $0x5,%edx
c010f43e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f441:	01 d0                	add    %edx,%eax
c010f443:	c1 e0 0c             	shl    $0xc,%eax
c010f446:	89 45 f0             	mov    %eax,-0x10(%ebp)
            return page;
c010f449:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f44c:	eb 12                	jmp    c010f460 <pmm_find_free_page+0xd6>
        z = bit_scan_forward(pmm_mmap[i] & (0xffffffff << ((lower_limit / PAGE_SIZE) % 32)));
        page = (i * 32 + z) * PAGE_SIZE;
        return page;
    }

    for (i++; i < PMM_MMAP_SIZE; i++)
c010f44e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f452:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c010f459:	76 b8                	jbe    c010f413 <pmm_find_free_page+0x89>
            return page;
        }
    }

    /* checked in the alloc functions */
    return -1;
c010f45b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010f460:	83 c4 20             	add    $0x20,%esp
c010f463:	5b                   	pop    %ebx
c010f464:	5e                   	pop    %esi
c010f465:	5d                   	pop    %ebp
c010f466:	c3                   	ret    

c010f467 <pmm_find_free_page_range>:
 * @param num Number of pages.
 * @return Pointer on begin of the first page.
 * If succesful this method will return a pointer on the begin of the first free page.
 */
paddr_t pmm_find_free_page_range(unsigned long lower_limit, unsigned int num)
{
c010f467:	55                   	push   %ebp
c010f468:	89 e5                	mov    %esp,%ebp
c010f46a:	56                   	push   %esi
c010f46b:	53                   	push   %ebx
c010f46c:	83 ec 20             	sub    $0x20,%esp
    uint32_t i, z;
    uint32_t found = 0;
c010f46f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    paddr_t page = 0;
c010f476:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

    if (!num)
c010f47d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f481:	75 0c                	jne    c010f48f <pmm_find_free_page_range+0x28>
        panic("PMM: searching 0 pages (find_free_page_range())");
c010f483:	c7 04 24 64 27 11 c0 	movl   $0xc0112764,(%esp)
c010f48a:	e8 e0 cb ff ff       	call   c010c06f <panic>

    for (i = lower_limit / PAGE_SIZE / 32; i < PMM_MMAP_SIZE; i++)
c010f48f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f492:	c1 e8 11             	shr    $0x11,%eax
c010f495:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f498:	e9 d2 00 00 00       	jmp    c010f56f <pmm_find_free_page_range+0x108>
    {
        printf("%i\n", i);
c010f49d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f4a4:	c7 04 24 94 27 11 c0 	movl   $0xc0112794,(%esp)
c010f4ab:	e8 cd 3c ff ff       	call   c010317d <printf>
        if (pmm_mmap[i] == 0)
c010f4b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4b3:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f4ba:	85 c0                	test   %eax,%eax
c010f4bc:	75 0c                	jne    c010f4ca <pmm_find_free_page_range+0x63>
        {
            found = 0;
c010f4be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
            continue;
c010f4c5:	e9 a1 00 00 00       	jmp    c010f56b <pmm_find_free_page_range+0x104>
        }

        if (pmm_mmap[i] == 0xffffffff)
c010f4ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4cd:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f4d4:	83 f8 ff             	cmp    $0xffffffff,%eax
c010f4d7:	75 15                	jne    c010f4ee <pmm_find_free_page_range+0x87>
        {
            if (found == 0)
c010f4d9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f4dd:	75 09                	jne    c010f4e8 <pmm_find_free_page_range+0x81>
            {
                page = (i * 32) * PAGE_SIZE; //
c010f4df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4e2:	c1 e0 11             	shl    $0x11,%eax
c010f4e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            found += 32;
c010f4e8:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010f4ec:	eb 70                	jmp    c010f55e <pmm_find_free_page_range+0xf7>

        }
        else
        {
            printf("bar\n");
c010f4ee:	c7 04 24 98 27 11 c0 	movl   $0xc0112798,(%esp)
c010f4f5:	e8 ba c7 ff ff       	call   c010bcb4 <puts>
            for (z = 0; z < 32; z++)
c010f4fa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010f501:	eb 55                	jmp    c010f558 <pmm_find_free_page_range+0xf1>
            {
                if (pmm_mmap[i] & (1 << z))
c010f503:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f506:	8b 14 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%edx
c010f50d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f510:	bb 01 00 00 00       	mov    $0x1,%ebx
c010f515:	89 de                	mov    %ebx,%esi
c010f517:	89 c1                	mov    %eax,%ecx
c010f519:	d3 e6                	shl    %cl,%esi
c010f51b:	89 f0                	mov    %esi,%eax
c010f51d:	21 d0                	and    %edx,%eax
c010f51f:	85 c0                	test   %eax,%eax
c010f521:	74 2a                	je     c010f54d <pmm_find_free_page_range+0xe6>
                {
                    if (found == 0)
c010f523:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f527:	75 13                	jne    c010f53c <pmm_find_free_page_range+0xd5>
                    {
                        page = (i * 32 + z) * PAGE_SIZE;
c010f529:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f52c:	89 c2                	mov    %eax,%edx
c010f52e:	c1 e2 05             	shl    $0x5,%edx
c010f531:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f534:	01 d0                	add    %edx,%eax
c010f536:	c1 e0 0c             	shl    $0xc,%eax
c010f539:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    }
                    found++;
c010f53c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)

                    if (found >= num)
c010f540:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f543:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f546:	72 0c                	jb     c010f554 <pmm_find_free_page_range+0xed>
                    {
                        return page;
c010f548:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f54b:	eb 34                	jmp    c010f581 <pmm_find_free_page_range+0x11a>
                    }
                }
                else
                {
                    found = 0;
c010f54d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

        }
        else
        {
            printf("bar\n");
            for (z = 0; z < 32; z++)
c010f554:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010f558:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010f55c:	76 a5                	jbe    c010f503 <pmm_find_free_page_range+0x9c>
                    found = 0;
                }
            }
        }

        if (found >= num)
c010f55e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f561:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f564:	72 05                	jb     c010f56b <pmm_find_free_page_range+0x104>
        {
            return page;
c010f566:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f569:	eb 16                	jmp    c010f581 <pmm_find_free_page_range+0x11a>
    paddr_t page = 0;

    if (!num)
        panic("PMM: searching 0 pages (find_free_page_range())");

    for (i = lower_limit / PAGE_SIZE / 32; i < PMM_MMAP_SIZE; i++)
c010f56b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f56f:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c010f576:	0f 86 21 ff ff ff    	jbe    c010f49d <pmm_find_free_page_range+0x36>
        {
            return page;
        }
    }

    return -1; /* checked in the alloc functions */
c010f57c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010f581:	83 c4 20             	add    $0x20,%esp
c010f584:	5b                   	pop    %ebx
c010f585:	5e                   	pop    %esi
c010f586:	5d                   	pop    %ebp
c010f587:	c3                   	ret    

c010f588 <pmm_alloc_page>:
/**
 * @brief Reserve a page and mark this page as used.
 * @return Pointer on the begin of the page.
 */
paddr_t pmm_alloc_page(void)
{
c010f588:	55                   	push   %ebp
c010f589:	89 e5                	mov    %esp,%ebp
c010f58b:	83 ec 28             	sub    $0x28,%esp
    paddr_t page = pmm_find_free_page(PMM_DMA_LIMIT);
c010f58e:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
c010f595:	e8 f0 fd ff ff       	call   c010f38a <pmm_find_free_page>
c010f59a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (page & (PAGE_SIZE - 1))
c010f59d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5a0:	25 ff 0f 00 00       	and    $0xfff,%eax
c010f5a5:	85 c0                	test   %eax,%eax
c010f5a7:	74 0c                	je     c010f5b5 <pmm_alloc_page+0x2d>
    {
        panic("PMM: pmm_alloc_page(): no pages left");
c010f5a9:	c7 04 24 9c 27 11 c0 	movl   $0xc011279c,(%esp)
c010f5b0:	e8 ba ca ff ff       	call   c010c06f <panic>
    }
    pmm_mark_page_as_used(page);
c010f5b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5b8:	89 04 24             	mov    %eax,(%esp)
c010f5bb:	e8 2d fd ff ff       	call   c010f2ed <pmm_mark_page_as_used>

    return page;
c010f5c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f5c3:	c9                   	leave  
c010f5c4:	c3                   	ret    

c010f5c5 <pmm_alloc_page_limit>:
 * @brief Reserve a page not under a entered address
 * @param lower_limit the lower limit
 * @return Pointer on the begin of the allocated page.
 */
paddr_t pmm_alloc_page_limit(paddr_t lower_limit)
{
c010f5c5:	55                   	push   %ebp
c010f5c6:	89 e5                	mov    %esp,%ebp
c010f5c8:	83 ec 28             	sub    $0x28,%esp
    paddr_t page = pmm_find_free_page(lower_limit);
c010f5cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5ce:	89 04 24             	mov    %eax,(%esp)
c010f5d1:	e8 b4 fd ff ff       	call   c010f38a <pmm_find_free_page>
c010f5d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (page & (PAGE_SIZE - 1))
c010f5d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5dc:	25 ff 0f 00 00       	and    $0xfff,%eax
c010f5e1:	85 c0                	test   %eax,%eax
c010f5e3:	74 0c                	je     c010f5f1 <pmm_alloc_page_limit+0x2c>
    {
        panic("PMM: pmm_alloc_page_limit(): no pages left");
c010f5e5:	c7 04 24 c4 27 11 c0 	movl   $0xc01127c4,(%esp)
c010f5ec:	e8 7e ca ff ff       	call   c010c06f <panic>
    }

    pmm_mark_page_as_used(page);
c010f5f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5f4:	89 04 24             	mov    %eax,(%esp)
c010f5f7:	e8 f1 fc ff ff       	call   c010f2ed <pmm_mark_page_as_used>
    return page;
c010f5fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f5ff:	c9                   	leave  
c010f600:	c3                   	ret    

c010f601 <pmm_alloc_dma_page_range>:
 * @brief Reserve num DMA-Pages.
 * @param num the number of pages to be allocated
 * @return Pointer on the begin of the first page.
 */
paddr_t pmm_alloc_dma_page_range(unsigned int num)
{
c010f601:	55                   	push   %ebp
c010f602:	89 e5                	mov    %esp,%ebp
c010f604:	83 ec 28             	sub    $0x28,%esp
    if (!num)
c010f607:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f60b:	75 0c                	jne    c010f619 <pmm_alloc_dma_page_range+0x18>
        panic("PMM: pmm_alloc_dma_page_range(): num zero");
c010f60d:	c7 04 24 f0 27 11 c0 	movl   $0xc01127f0,(%esp)
c010f614:	e8 56 ca ff ff       	call   c010c06f <panic>
    paddr_t page = pmm_find_free_page_range(0, num);
c010f619:	8b 45 08             	mov    0x8(%ebp),%eax
c010f61c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f620:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010f627:	e8 3b fe ff ff       	call   c010f467 <pmm_find_free_page_range>
c010f62c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page & (PAGE_SIZE - 1) || page >= PMM_DMA_LIMIT)
c010f62f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f632:	25 ff 0f 00 00       	and    $0xfff,%eax
c010f637:	85 c0                	test   %eax,%eax
c010f639:	75 09                	jne    c010f644 <pmm_alloc_dma_page_range+0x43>
c010f63b:	81 7d f4 ff ff ff 00 	cmpl   $0xffffff,-0xc(%ebp)
c010f642:	76 0c                	jbe    c010f650 <pmm_alloc_dma_page_range+0x4f>
    {
        panic("PMM: pmm_alloc_dma_page_range(): no DMA memory left");
c010f644:	c7 04 24 1c 28 11 c0 	movl   $0xc011281c,(%esp)
c010f64b:	e8 1f ca ff ff       	call   c010c06f <panic>
    }
    pmm_mark_page_range_as_used(page, num);
c010f650:	8b 45 08             	mov    0x8(%ebp),%eax
c010f653:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f657:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f65a:	89 04 24             	mov    %eax,(%esp)
c010f65d:	e8 c4 fc ff ff       	call   c010f326 <pmm_mark_page_range_as_used>
    return page;
c010f662:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f665:	c9                   	leave  
c010f666:	c3                   	ret    

c010f667 <pmm_alloc_page_range>:
/**
 * @brief Reserve num pages.
 * @return Pointer on the begin of the first page.
 */
paddr_t pmm_alloc_page_range(unsigned int num)
{
c010f667:	55                   	push   %ebp
c010f668:	89 e5                	mov    %esp,%ebp
c010f66a:	83 ec 28             	sub    $0x28,%esp
    if (!num)
c010f66d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f671:	75 0c                	jne    c010f67f <pmm_alloc_page_range+0x18>
        panic("PMM: pmm_alloc_page_range(): num zero");
c010f673:	c7 04 24 50 28 11 c0 	movl   $0xc0112850,(%esp)
c010f67a:	e8 f0 c9 ff ff       	call   c010c06f <panic>
    paddr_t page = pmm_find_free_page_range(PMM_DMA_LIMIT, num);
c010f67f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f682:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f686:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
c010f68d:	e8 d5 fd ff ff       	call   c010f467 <pmm_find_free_page_range>
c010f692:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page & (PAGE_SIZE - 1))
c010f695:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f698:	25 ff 0f 00 00       	and    $0xfff,%eax
c010f69d:	85 c0                	test   %eax,%eax
c010f69f:	74 0c                	je     c010f6ad <pmm_alloc_page_range+0x46>
    {
        panic("PMM: pmm_alloc_page_range(): no memory left");
c010f6a1:	c7 04 24 78 28 11 c0 	movl   $0xc0112878,(%esp)
c010f6a8:	e8 c2 c9 ff ff       	call   c010c06f <panic>
    }
    pmm_mark_page_range_as_used(page, num);
c010f6ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010f6b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f6b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6b7:	89 04 24             	mov    %eax,(%esp)
c010f6ba:	e8 67 fc ff ff       	call   c010f326 <pmm_mark_page_range_as_used>
    return page;
c010f6bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f6c2:	c9                   	leave  
c010f6c3:	c3                   	ret    

c010f6c4 <INIT_PMM>:
 * @brief Initiates the PMM module.
 * @param mb_info the multiboot info struct for module protection
 */

void INIT_PMM(struct multiboot_struct *mb_info)
{
c010f6c4:	55                   	push   %ebp
c010f6c5:	89 e5                	mov    %esp,%ebp
c010f6c7:	83 ec 48             	sub    $0x48,%esp
    int i;
    for (i = 0; i < PMM_MMAP_SIZE; i++)
c010f6ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f6d1:	eb 12                	jmp    c010f6e5 <INIT_PMM+0x21>
    {
        pmm_mmap[i] = 0;
c010f6d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6d6:	c7 04 85 60 a0 11 c0 	movl   $0x0,-0x3fee5fa0(,%eax,4)
c010f6dd:	00 00 00 00 
 */

void INIT_PMM(struct multiboot_struct *mb_info)
{
    int i;
    for (i = 0; i < PMM_MMAP_SIZE; i++)
c010f6e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f6e5:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c010f6ec:	7e e5                	jle    c010f6d3 <INIT_PMM+0xf>
    {
        pmm_mmap[i] = 0;
    }

    mb_info->mmap_addr += MEMORY_LAYOUT_KERNEL_START;
c010f6ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010f6f1:	8b 40 30             	mov    0x30(%eax),%eax
c010f6f4:	8d 90 00 00 00 c0    	lea    -0x40000000(%eax),%edx
c010f6fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010f6fd:	89 50 30             	mov    %edx,0x30(%eax)
    mb_info->mods_addr += MEMORY_LAYOUT_KERNEL_START;
c010f700:	8b 45 08             	mov    0x8(%ebp),%eax
c010f703:	8b 40 18             	mov    0x18(%eax),%eax
c010f706:	8d 90 00 00 00 c0    	lea    -0x40000000(%eax),%edx
c010f70c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f70f:	89 50 18             	mov    %edx,0x18(%eax)

    struct mmap_entry *mmap = (struct mmap_entry *)mb_info->mmap_addr;
c010f712:	8b 45 08             	mov    0x8(%ebp),%eax
c010f715:	8b 40 30             	mov    0x30(%eax),%eax
c010f718:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int len = 0;
c010f71b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for(i = 0; len < mb_info->mmap_length; i++)
c010f722:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f729:	e9 90 00 00 00       	jmp    c010f7be <INIT_PMM+0xfa>
    {
        len += mmap[i].size +4;
c010f72e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f731:	89 d0                	mov    %edx,%eax
c010f733:	01 c0                	add    %eax,%eax
c010f735:	01 d0                	add    %edx,%eax
c010f737:	c1 e0 03             	shl    $0x3,%eax
c010f73a:	89 c2                	mov    %eax,%edx
c010f73c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f73f:	01 d0                	add    %edx,%eax
c010f741:	8b 10                	mov    (%eax),%edx
c010f743:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f746:	01 d0                	add    %edx,%eax
c010f748:	83 c0 04             	add    $0x4,%eax
c010f74b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(mmap[i].Type == 1)
c010f74e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f751:	89 d0                	mov    %edx,%eax
c010f753:	01 c0                	add    %eax,%eax
c010f755:	01 d0                	add    %edx,%eax
c010f757:	c1 e0 03             	shl    $0x3,%eax
c010f75a:	89 c2                	mov    %eax,%edx
c010f75c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f75f:	01 d0                	add    %edx,%eax
c010f761:	8b 40 14             	mov    0x14(%eax),%eax
c010f764:	83 f8 01             	cmp    $0x1,%eax
c010f767:	75 51                	jne    c010f7ba <INIT_PMM+0xf6>
        {
            uintptr_t addr = mmap[i].BaseAddr;
c010f769:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f76c:	89 d0                	mov    %edx,%eax
c010f76e:	01 c0                	add    %eax,%eax
c010f770:	01 d0                	add    %edx,%eax
c010f772:	c1 e0 03             	shl    $0x3,%eax
c010f775:	89 c2                	mov    %eax,%edx
c010f777:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f77a:	01 d0                	add    %edx,%eax
c010f77c:	8b 50 08             	mov    0x8(%eax),%edx
c010f77f:	8b 40 04             	mov    0x4(%eax),%eax
c010f782:	89 45 e8             	mov    %eax,-0x18(%ebp)
            int pages = mmap[i].Length / PAGE_SIZE;
c010f785:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f788:	89 d0                	mov    %edx,%eax
c010f78a:	01 c0                	add    %eax,%eax
c010f78c:	01 d0                	add    %edx,%eax
c010f78e:	c1 e0 03             	shl    $0x3,%eax
c010f791:	89 c2                	mov    %eax,%edx
c010f793:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f796:	01 d0                	add    %edx,%eax
c010f798:	8b 50 10             	mov    0x10(%eax),%edx
c010f79b:	8b 40 0c             	mov    0xc(%eax),%eax
c010f79e:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010f7a2:	c1 ea 0c             	shr    $0xc,%edx
c010f7a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            pmm_mark_page_range_as_free(addr, pages);
c010f7a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f7af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f7b2:	89 04 24             	mov    %eax,(%esp)
c010f7b5:	e8 cf fa ff ff       	call   c010f289 <pmm_mark_page_range_as_free>
    mb_info->mods_addr += MEMORY_LAYOUT_KERNEL_START;

    struct mmap_entry *mmap = (struct mmap_entry *)mb_info->mmap_addr;

    int len = 0;
    for(i = 0; len < mb_info->mmap_length; i++)
c010f7ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f7be:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f7c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f7c4:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f7c7:	39 c2                	cmp    %eax,%edx
c010f7c9:	0f 82 5f ff ff ff    	jb     c010f72e <INIT_PMM+0x6a>
            pmm_mark_page_range_as_free(addr, pages);
        }
    }

    //protect Memory structures
    pmm_mark_page_as_used(0); //IVT+BDA
c010f7cf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010f7d6:	e8 12 fb ff ff       	call   c010f2ed <pmm_mark_page_as_used>

    uint16_t* EBDA_p = (void *)0x040E;
c010f7db:	c7 45 e0 0e 04 00 00 	movl   $0x40e,-0x20(%ebp)
    pmm_mark_page_as_used((paddr_t)EBDA_p[0] << 4); //EBDA
c010f7e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f7e5:	0f b7 00             	movzwl (%eax),%eax
c010f7e8:	0f b7 c0             	movzwl %ax,%eax
c010f7eb:	c1 e0 04             	shl    $0x4,%eax
c010f7ee:	89 04 24             	mov    %eax,(%esp)
c010f7f1:	e8 f7 fa ff ff       	call   c010f2ed <pmm_mark_page_as_used>

    uint16_t* BDA_size = (uint16_t*)0x0413;
c010f7f6:	c7 45 dc 13 04 00 00 	movl   $0x413,-0x24(%ebp)
    pmm_mark_page_as_used((BDA_size[0] / 4) * 1024); //FPS (maybe)
c010f7fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f800:	0f b7 00             	movzwl (%eax),%eax
c010f803:	66 c1 e8 02          	shr    $0x2,%ax
c010f807:	0f b7 c0             	movzwl %ax,%eax
c010f80a:	c1 e0 0a             	shl    $0xa,%eax
c010f80d:	89 04 24             	mov    %eax,(%esp)
c010f810:	e8 d8 fa ff ff       	call   c010f2ed <pmm_mark_page_as_used>
    pmm_mark_page_range_as_used(0xA0000, 96); //0xA0000 - 0xFFFFF ROM-AREA
c010f815:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c010f81c:	00 
c010f81d:	c7 04 24 00 00 0a 00 	movl   $0xa0000,(%esp)
c010f824:	e8 fd fa ff ff       	call   c010f326 <pmm_mark_page_range_as_used>


    //multiboot structures
    struct mods_add *mods = (void*)mb_info->mods_addr;
c010f829:	8b 45 08             	mov    0x8(%ebp),%eax
c010f82c:	8b 40 18             	mov    0x18(%eax),%eax
c010f82f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pmm_mark_page_as_used((paddr_t)mb_info - MEMORY_LAYOUT_KERNEL_START);
c010f832:	8b 45 08             	mov    0x8(%ebp),%eax
c010f835:	05 00 00 00 40       	add    $0x40000000,%eax
c010f83a:	89 04 24             	mov    %eax,(%esp)
c010f83d:	e8 ab fa ff ff       	call   c010f2ed <pmm_mark_page_as_used>
    pmm_mark_page_as_used((paddr_t)mods    - MEMORY_LAYOUT_KERNEL_START);
c010f842:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f845:	05 00 00 00 40       	add    $0x40000000,%eax
c010f84a:	89 04 24             	mov    %eax,(%esp)
c010f84d:	e8 9b fa ff ff       	call   c010f2ed <pmm_mark_page_as_used>

    //multiboot modules
    for (i = 0; i < mb_info->mods_count; i++)
c010f852:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f859:	eb 75                	jmp    c010f8d0 <INIT_PMM+0x20c>
    {
        uint32_t size = mods[i].mod_end - mods[i].mod_start;
c010f85b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f85e:	89 c2                	mov    %eax,%edx
c010f860:	c1 e2 04             	shl    $0x4,%edx
c010f863:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f866:	01 d0                	add    %edx,%eax
c010f868:	8b 50 04             	mov    0x4(%eax),%edx
c010f86b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f86e:	89 c1                	mov    %eax,%ecx
c010f870:	c1 e1 04             	shl    $0x4,%ecx
c010f873:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f876:	01 c8                	add    %ecx,%eax
c010f878:	8b 00                	mov    (%eax),%eax
c010f87a:	89 d1                	mov    %edx,%ecx
c010f87c:	29 c1                	sub    %eax,%ecx
c010f87e:	89 c8                	mov    %ecx,%eax
c010f880:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        int pages = NUM_PAGES(size);
c010f883:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f886:	05 ff 0f 00 00       	add    $0xfff,%eax
c010f88b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010f890:	c1 e8 0c             	shr    $0xc,%eax
c010f893:	89 45 d0             	mov    %eax,-0x30(%ebp)
        pmm_mark_page_range_as_used((paddr_t) mods[i].mod_start, pages);
c010f896:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f899:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f89c:	89 c1                	mov    %eax,%ecx
c010f89e:	c1 e1 04             	shl    $0x4,%ecx
c010f8a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f8a4:	01 c8                	add    %ecx,%eax
c010f8a6:	8b 00                	mov    (%eax),%eax
c010f8a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f8ac:	89 04 24             	mov    %eax,(%esp)
c010f8af:	e8 72 fa ff ff       	call   c010f326 <pmm_mark_page_range_as_used>
        pmm_mark_page_as_used((paddr_t) mods[i].string);
c010f8b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8b7:	89 c2                	mov    %eax,%edx
c010f8b9:	c1 e2 04             	shl    $0x4,%edx
c010f8bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f8bf:	01 d0                	add    %edx,%eax
c010f8c1:	8b 40 08             	mov    0x8(%eax),%eax
c010f8c4:	89 04 24             	mov    %eax,(%esp)
c010f8c7:	e8 21 fa ff ff       	call   c010f2ed <pmm_mark_page_as_used>
    struct mods_add *mods = (void*)mb_info->mods_addr;
    pmm_mark_page_as_used((paddr_t)mb_info - MEMORY_LAYOUT_KERNEL_START);
    pmm_mark_page_as_used((paddr_t)mods    - MEMORY_LAYOUT_KERNEL_START);

    //multiboot modules
    for (i = 0; i < mb_info->mods_count; i++)
c010f8cc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f8d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f8d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8d6:	8b 40 14             	mov    0x14(%eax),%eax
c010f8d9:	39 c2                	cmp    %eax,%edx
c010f8db:	0f 82 7a ff ff ff    	jb     c010f85b <INIT_PMM+0x197>
        int pages = NUM_PAGES(size);
        pmm_mark_page_range_as_used((paddr_t) mods[i].mod_start, pages);
        pmm_mark_page_as_used((paddr_t) mods[i].string);
    }

    if (! (mb_info->flags & 0x1))
c010f8e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8e4:	8b 00                	mov    (%eax),%eax
c010f8e6:	83 e0 01             	and    $0x1,%eax
c010f8e9:	85 c0                	test   %eax,%eax
c010f8eb:	75 0c                	jne    c010f8f9 <INIT_PMM+0x235>
    {
        panic("PMM_INIT: no ram info in multiboot structure");
c010f8ed:	c7 04 24 a4 28 11 c0 	movl   $0xc01128a4,(%esp)
c010f8f4:	e8 76 c7 ff ff       	call   c010c06f <panic>
    }

}
c010f8f9:	c9                   	leave  
c010f8fa:	c3                   	ret    

c010f8fb <cpuid>:
 * @param uint32_t cpuid function number
 * @param pointer to output register structure
 * @return sucess (0=sucess, 1=CPUID is not supported)
 */
static void cpuid(uint32_t function,struct cpuid_regs* output)
{
c010f8fb:	55                   	push   %ebp
c010f8fc:	89 e5                	mov    %esp,%ebp
c010f8fe:	56                   	push   %esi
c010f8ff:	53                   	push   %ebx
c010f900:	83 ec 04             	sub    $0x4,%esp
    asm volatile("cpuid":"=a" (output->eax), "=b"(output->ebx),"=c"(output->ecx),"=d"(output->edx):"a"(function));
c010f903:	8b 45 08             	mov    0x8(%ebp),%eax
c010f906:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f909:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f90c:	0f a2                	cpuid  
c010f90e:	89 c6                	mov    %eax,%esi
c010f910:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f913:	89 30                	mov    %esi,(%eax)
c010f915:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f918:	89 58 04             	mov    %ebx,0x4(%eax)
c010f91b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f91e:	89 48 08             	mov    %ecx,0x8(%eax)
c010f921:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f924:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010f927:	83 c4 04             	add    $0x4,%esp
c010f92a:	5b                   	pop    %ebx
c010f92b:	5e                   	pop    %esi
c010f92c:	5d                   	pop    %ebp
c010f92d:	c3                   	ret    

c010f92e <identify_cpu>:
 * Identify curret CPU
 * @param pointer to 128byte free bytes for cpu_prpoerties struct
 * @return sucess (0=sucess, 1=CPUID is not supported)
 */
int identify_cpu(struct cpu_properties *cpu)
{
c010f92e:	55                   	push   %ebp
c010f92f:	89 e5                	mov    %esp,%ebp
c010f931:	57                   	push   %edi
c010f932:	56                   	push   %esi
c010f933:	53                   	push   %ebx
c010f934:	83 ec 4c             	sub    $0x4c,%esp
    int ref,eflags;
    asm volatile(
c010f937:	9c                   	pushf  
c010f938:	59                   	pop    %ecx
c010f939:	89 c8                	mov    %ecx,%eax
c010f93b:	35 00 00 20 00       	xor    $0x200000,%eax
c010f940:	50                   	push   %eax
c010f941:	9d                   	popf   
c010f942:	9c                   	pushf  
c010f943:	58                   	pop    %eax
c010f944:	89 cb                	mov    %ecx,%ebx
c010f946:	89 c6                	mov    %eax,%esi
c010f948:	89 75 e0             	mov    %esi,-0x20(%ebp)
c010f94b:	89 5d dc             	mov    %ebx,-0x24(%ebp)
        "popfl;"
        "pushfl;"
        "pop %%eax;"
        :"=a"(eflags), "=c"(ref):
    );
    if (eflags == ref)
c010f94e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f951:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010f954:	75 13                	jne    c010f969 <identify_cpu+0x3b>
        //cpuid is not supported
    {
        cpu->cpuid_support = false;
c010f956:	8b 45 08             	mov    0x8(%ebp),%eax
c010f959:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        return 1;
c010f95f:	b8 01 00 00 00       	mov    $0x1,%eax
c010f964:	e9 31 04 00 00       	jmp    c010fd9a <identify_cpu+0x46c>
    }

    //cpuid is supported
    cpu->cpuid_support = true;
c010f969:	8b 45 08             	mov    0x8(%ebp),%eax
c010f96c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    //create struct for processor registers
    struct cpuid_regs reg;
    uint32_t i;

    //call cpuid 0
    cpuid(0, &reg);
c010f972:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010f975:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f979:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010f980:	e8 76 ff ff ff       	call   c010f8fb <cpuid>

    // copy vendor string
    strncpy(cpu->vendor_id    , (char*) &reg.ebx, 4);
c010f985:	8b 45 08             	mov    0x8(%ebp),%eax
c010f988:	83 c0 10             	add    $0x10,%eax
c010f98b:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010f992:	00 
c010f993:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010f996:	83 c2 04             	add    $0x4,%edx
c010f999:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f99d:	89 04 24             	mov    %eax,(%esp)
c010f9a0:	e8 fc 30 ff ff       	call   c0102aa1 <strncpy>
    strncpy(cpu->vendor_id + 4, (char*) &reg.edx, 4);
c010f9a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9a8:	83 c0 14             	add    $0x14,%eax
c010f9ab:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010f9b2:	00 
c010f9b3:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010f9b6:	83 c2 0c             	add    $0xc,%edx
c010f9b9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f9bd:	89 04 24             	mov    %eax,(%esp)
c010f9c0:	e8 dc 30 ff ff       	call   c0102aa1 <strncpy>
    strncpy(cpu->vendor_id + 8, (char*) &reg.ecx, 4);
c010f9c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9c8:	83 c0 18             	add    $0x18,%eax
c010f9cb:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010f9d2:	00 
c010f9d3:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010f9d6:	83 c2 08             	add    $0x8,%edx
c010f9d9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f9dd:	89 04 24             	mov    %eax,(%esp)
c010f9e0:	e8 bc 30 ff ff       	call   c0102aa1 <strncpy>

    // identify manufactory
    for (i = 0; strncmp(cpu->vendor_id, vendorID[i], 12) && i < 15; i++) {}
c010f9e5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010f9ec:	eb 04                	jmp    c010f9f2 <identify_cpu+0xc4>
c010f9ee:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010f9f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f9f5:	8b 04 85 60 34 11 c0 	mov    -0x3feecba0(,%eax,4),%eax
c010f9fc:	8b 55 08             	mov    0x8(%ebp),%edx
c010f9ff:	83 c2 10             	add    $0x10,%edx
c010fa02:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
c010fa09:	00 
c010fa0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa0e:	89 14 24             	mov    %edx,(%esp)
c010fa11:	e8 bd 31 ff ff       	call   c0102bd3 <strncmp>
c010fa16:	85 c0                	test   %eax,%eax
c010fa18:	74 06                	je     c010fa20 <identify_cpu+0xf2>
c010fa1a:	83 7d e4 0e          	cmpl   $0xe,-0x1c(%ebp)
c010fa1e:	76 ce                	jbe    c010f9ee <identify_cpu+0xc0>
    cpu->manufactory = i;
c010fa20:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010fa26:	89 50 04             	mov    %edx,0x4(%eax)

    // save number of basic identify functions
    cpu->max_std_func = reg.eax;
c010fa29:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010fa2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa2f:	89 50 08             	mov    %edx,0x8(%eax)

    // get and save maximum numbers of extendet identify functions
    cpuid(0x80000000, &reg);
c010fa32:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fa35:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa39:	c7 04 24 00 00 00 80 	movl   $0x80000000,(%esp)
c010fa40:	e8 b6 fe ff ff       	call   c010f8fb <cpuid>
    cpu->max_spec_func = reg.eax;
c010fa45:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010fa48:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa4b:	89 50 0c             	mov    %edx,0xc(%eax)


    cpuid(1, &reg);
c010fa4e:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fa51:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa55:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010fa5c:	e8 9a fe ff ff       	call   c010f8fb <cpuid>
    // get CPU model and Family
    cpu->family     = ((reg.eax & 0x0FF00000) >> 16) | ((reg.eax & 0x00000F00) >> 8);
c010fa61:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fa64:	25 00 00 f0 0f       	and    $0xff00000,%eax
c010fa69:	c1 e8 10             	shr    $0x10,%eax
c010fa6c:	89 c2                	mov    %eax,%edx
c010fa6e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fa71:	25 00 0f 00 00       	and    $0xf00,%eax
c010fa76:	c1 e8 08             	shr    $0x8,%eax
c010fa79:	09 c2                	or     %eax,%edx
c010fa7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa7e:	88 50 1d             	mov    %dl,0x1d(%eax)
    cpu->model      = ((reg.eax & 0x000F0000) >> 12) | ((reg.eax & 0x000000F0) >> 4);
c010fa81:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fa84:	25 00 00 0f 00       	and    $0xf0000,%eax
c010fa89:	c1 e8 0c             	shr    $0xc,%eax
c010fa8c:	89 c2                	mov    %eax,%edx
c010fa8e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fa91:	25 f0 00 00 00       	and    $0xf0,%eax
c010fa96:	c1 e8 04             	shr    $0x4,%eax
c010fa99:	09 c2                	or     %eax,%edx
c010fa9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa9e:	88 50 1e             	mov    %dl,0x1e(%eax)
    cpu->stepping   =  reg.eax & 0x0000000F;
c010faa1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010faa4:	89 c2                	mov    %eax,%edx
c010faa6:	83 e2 0f             	and    $0xf,%edx
c010faa9:	8b 45 08             	mov    0x8(%ebp),%eax
c010faac:	88 50 1f             	mov    %dl,0x1f(%eax)
    cpu->type       = (reg.eax & 0x00003000) >> 12;
c010faaf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fab2:	25 00 30 00 00       	and    $0x3000,%eax
c010fab7:	c1 e8 0c             	shr    $0xc,%eax
c010faba:	89 c2                	mov    %eax,%edx
c010fabc:	8b 45 08             	mov    0x8(%ebp),%eax
c010fabf:	88 50 20             	mov    %dl,0x20(%eax)

    cpu->brandID     = (uint8_t) reg.ebx;
c010fac2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fac5:	89 c2                	mov    %eax,%edx
c010fac7:	8b 45 08             	mov    0x8(%ebp),%eax
c010faca:	88 50 21             	mov    %dl,0x21(%eax)
    cpu->clflush     = (uint8_t) (reg.ebx >> 8);
c010facd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fad0:	c1 e8 08             	shr    $0x8,%eax
c010fad3:	89 c2                	mov    %eax,%edx
c010fad5:	8b 45 08             	mov    0x8(%ebp),%eax
c010fad8:	88 50 22             	mov    %dl,0x22(%eax)
    cpu->logic_cores = (uint8_t) (reg.ebx >> 16);
c010fadb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fade:	c1 e8 10             	shr    $0x10,%eax
c010fae1:	89 c2                	mov    %eax,%edx
c010fae3:	8b 45 08             	mov    0x8(%ebp),%eax
c010fae6:	88 50 23             	mov    %dl,0x23(%eax)
    cpu->APIC_ID     = (uint8_t) (reg.ebx >> 24);
c010fae9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010faec:	c1 e8 18             	shr    $0x18,%eax
c010faef:	89 c2                	mov    %eax,%edx
c010faf1:	8b 45 08             	mov    0x8(%ebp),%eax
c010faf4:	88 50 2e             	mov    %dl,0x2e(%eax)



    cpu->flagblock0 = reg.ecx;
c010faf7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010fafa:	8b 45 08             	mov    0x8(%ebp),%eax
c010fafd:	89 50 68             	mov    %edx,0x68(%eax)
    cpu->flagblock1 = reg.edx;
c010fb00:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fb03:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb06:	89 50 6c             	mov    %edx,0x6c(%eax)

    if(cpu->max_spec_func > 0x80000000)
c010fb09:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb0c:	8b 40 0c             	mov    0xc(%eax),%eax
c010fb0f:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c010fb14:	76 39                	jbe    c010fb4f <identify_cpu+0x221>
    {
        cpuid(0x80000001, &reg);
c010fb16:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fb19:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb1d:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c010fb24:	e8 d2 fd ff ff       	call   c010f8fb <cpuid>
        if((( reg.edx & (1 << 29) ) >> 29) && cpu->flagblock1 & PAE )
c010fb29:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fb2c:	25 00 00 00 20       	and    $0x20000000,%eax
c010fb31:	c1 e8 1d             	shr    $0x1d,%eax
c010fb34:	85 c0                	test   %eax,%eax
c010fb36:	74 17                	je     c010fb4f <identify_cpu+0x221>
c010fb38:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb3b:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fb3e:	83 e0 40             	and    $0x40,%eax
c010fb41:	85 c0                	test   %eax,%eax
c010fb43:	74 0a                	je     c010fb4f <identify_cpu+0x221>
        {
            cpu->LM = true;
c010fb45:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb48:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
        }
    }

    if (cpu->flagblock1 & (1 << 30))
c010fb4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb52:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fb55:	25 00 00 00 40       	and    $0x40000000,%eax
c010fb5a:	85 c0                	test   %eax,%eax
c010fb5c:	74 22                	je     c010fb80 <identify_cpu+0x252>
    {
        if(cpu->LM)
c010fb5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb61:	8b 40 24             	mov    0x24(%eax),%eax
c010fb64:	85 c0                	test   %eax,%eax
c010fb66:	74 0c                	je     c010fb74 <identify_cpu+0x246>
            cpu->architecture = IA64;
c010fb68:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb6b:	c7 40 30 00 00 00 40 	movl   $0x40000000,0x30(%eax)
c010fb72:	eb 2c                	jmp    c010fba0 <identify_cpu+0x272>
        else
            cpu->architecture = IA32;
c010fb74:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb77:	c7 40 30 02 00 00 00 	movl   $0x2,0x30(%eax)
c010fb7e:	eb 20                	jmp    c010fba0 <identify_cpu+0x272>
    }
    else
    {
        if(cpu->LM)
c010fb80:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb83:	8b 40 24             	mov    0x24(%eax),%eax
c010fb86:	85 c0                	test   %eax,%eax
c010fb88:	74 0c                	je     c010fb96 <identify_cpu+0x268>
            cpu->architecture = AMD64;
c010fb8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb8d:	c7 40 30 01 00 00 00 	movl   $0x1,0x30(%eax)
c010fb94:	eb 0a                	jmp    c010fba0 <identify_cpu+0x272>
        else
            cpu->architecture = I386;
c010fb96:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb99:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)




    //Detect Dynamic Syscall
    if (cpu->flagblock1 & SEP && cpu->manufactory == 2)
c010fba0:	8b 45 08             	mov    0x8(%ebp),%eax
c010fba3:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fba6:	25 00 08 00 00       	and    $0x800,%eax
c010fbab:	85 c0                	test   %eax,%eax
c010fbad:	74 17                	je     c010fbc6 <identify_cpu+0x298>
c010fbaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbb2:	8b 40 04             	mov    0x4(%eax),%eax
c010fbb5:	83 f8 02             	cmp    $0x2,%eax
c010fbb8:	75 0c                	jne    c010fbc6 <identify_cpu+0x298>
    {
        cpu->dsysc = sysenter;
c010fbba:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbbd:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
c010fbc4:	eb 50                	jmp    c010fc16 <identify_cpu+0x2e8>
    }
    else if (cpu->flagblock1 & SEP && cpu->manufactory < 2 && cpu->max_spec_func > 0x80000000)
c010fbc6:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbc9:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fbcc:	25 00 08 00 00       	and    $0x800,%eax
c010fbd1:	85 c0                	test   %eax,%eax
c010fbd3:	74 41                	je     c010fc16 <identify_cpu+0x2e8>
c010fbd5:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbd8:	8b 40 04             	mov    0x4(%eax),%eax
c010fbdb:	83 f8 01             	cmp    $0x1,%eax
c010fbde:	77 36                	ja     c010fc16 <identify_cpu+0x2e8>
c010fbe0:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbe3:	8b 40 0c             	mov    0xc(%eax),%eax
c010fbe6:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c010fbeb:	76 29                	jbe    c010fc16 <identify_cpu+0x2e8>
    {
        cpuid(0x80000001,&reg);
c010fbed:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fbf0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fbf4:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c010fbfb:	e8 fb fc ff ff       	call   c010f8fb <cpuid>
        if (reg.edx & 0x1000)
c010fc00:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fc03:	25 00 10 00 00       	and    $0x1000,%eax
c010fc08:	85 c0                	test   %eax,%eax
c010fc0a:	74 0a                	je     c010fc16 <identify_cpu+0x2e8>
        {
            cpu->dsysc = syscall;
c010fc0c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc0f:	c7 40 28 02 00 00 00 	movl   $0x2,0x28(%eax)
        }
    }

    //get extended BrandID
    if (cpu->max_spec_func > 0x80000000)
c010fc16:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc19:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc1c:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c010fc21:	76 21                	jbe    c010fc44 <identify_cpu+0x316>
    {
        cpuid(0x80000001, &reg);
c010fc23:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fc26:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc2a:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c010fc31:	e8 c5 fc ff ff       	call   c010f8fb <cpuid>
        cpu->ext_brandID = (uint16_t)reg.ebx;
c010fc36:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fc39:	89 c2                	mov    %eax,%edx
c010fc3b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc3e:	66 89 50 2c          	mov    %dx,0x2c(%eax)
c010fc42:	eb 09                	jmp    c010fc4d <identify_cpu+0x31f>
    }
    else
    {
        cpu->ext_brandID = 0x3e;
c010fc44:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc47:	66 c7 40 2c 3e 00    	movw   $0x3e,0x2c(%eax)
    }


    //Get CPU name/series
    if (cpu->max_spec_func > 0x80000004)   // via Brand String
c010fc4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc50:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc53:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c010fc58:	76 5a                	jbe    c010fcb4 <identify_cpu+0x386>
    {
        for (i=0x80000002; i<=0x80000004; i++)
c010fc5a:	c7 45 e4 02 00 00 80 	movl   $0x80000002,-0x1c(%ebp)
c010fc61:	eb 43                	jmp    c010fca6 <identify_cpu+0x378>
        {
            cpuid(i,&reg);
c010fc63:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fc66:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fc6d:	89 04 24             	mov    %eax,(%esp)
c010fc70:	e8 86 fc ff ff       	call   c010f8fb <cpuid>
            memcpy((cpu->cpu_type+(i-0x80000002)*16),((void*)&reg),16);
c010fc75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fc78:	05 fe ff ff 0f       	add    $0xffffffe,%eax
c010fc7d:	c1 e0 04             	shl    $0x4,%eax
c010fc80:	8d 50 30             	lea    0x30(%eax),%edx
c010fc83:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc86:	01 d0                	add    %edx,%eax
c010fc88:	83 c0 04             	add    $0x4,%eax
c010fc8b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010fc8e:	89 10                	mov    %edx,(%eax)
c010fc90:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fc93:	89 50 04             	mov    %edx,0x4(%eax)
c010fc96:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010fc99:	89 50 08             	mov    %edx,0x8(%eax)
c010fc9c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fc9f:	89 50 0c             	mov    %edx,0xc(%eax)


    //Get CPU name/series
    if (cpu->max_spec_func > 0x80000004)   // via Brand String
    {
        for (i=0x80000002; i<=0x80000004; i++)
c010fca2:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010fca6:	81 7d e4 04 00 00 80 	cmpl   $0x80000004,-0x1c(%ebp)
c010fcad:	76 b4                	jbe    c010fc63 <identify_cpu+0x335>
c010fcaf:	e9 e1 00 00 00       	jmp    c010fd95 <identify_cpu+0x467>
            memcpy((cpu->cpu_type+(i-0x80000002)*16),((void*)&reg),16);
        }

    }

    else if(cpu->family == 6 && cpu->model == 3 && cpu->stepping == 3)
c010fcb4:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcb7:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c010fcbb:	3c 06                	cmp    $0x6,%al
c010fcbd:	75 6d                	jne    c010fd2c <identify_cpu+0x3fe>
c010fcbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcc2:	0f b6 40 1e          	movzbl 0x1e(%eax),%eax
c010fcc6:	3c 03                	cmp    $0x3,%al
c010fcc8:	75 62                	jne    c010fd2c <identify_cpu+0x3fe>
c010fcca:	8b 45 08             	mov    0x8(%ebp),%eax
c010fccd:	0f b6 40 1f          	movzbl 0x1f(%eax),%eax
c010fcd1:	3c 03                	cmp    $0x3,%al
c010fcd3:	75 57                	jne    c010fd2c <identify_cpu+0x3fe>
    {
        strcat(cpu->cpu_type,"Quemu ");
c010fcd5:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcd8:	8d 58 34             	lea    0x34(%eax),%ebx
c010fcdb:	89 d8                	mov    %ebx,%eax
c010fcdd:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
c010fce4:	89 c2                	mov    %eax,%edx
c010fce6:	b8 00 00 00 00       	mov    $0x0,%eax
c010fceb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010fcee:	89 d7                	mov    %edx,%edi
c010fcf0:	f2 ae                	repnz scas %es:(%edi),%al
c010fcf2:	89 c8                	mov    %ecx,%eax
c010fcf4:	f7 d0                	not    %eax
c010fcf6:	83 e8 01             	sub    $0x1,%eax
c010fcf9:	01 d8                	add    %ebx,%eax
c010fcfb:	c7 00 51 75 65 6d    	movl   $0x6d657551,(%eax)
c010fd01:	66 c7 40 04 75 20    	movw   $0x2075,0x4(%eax)
c010fd07:	c6 40 06 00          	movb   $0x0,0x6(%eax)
        strcat(cpu->cpu_type,architecture[cpu->architecture]);
c010fd0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd0e:	8b 40 30             	mov    0x30(%eax),%eax
c010fd11:	8b 04 85 e8 34 11 c0 	mov    -0x3feecb18(,%eax,4),%eax
c010fd18:	8b 55 08             	mov    0x8(%ebp),%edx
c010fd1b:	83 c2 34             	add    $0x34,%edx
c010fd1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd22:	89 14 24             	mov    %edx,(%esp)
c010fd25:	e8 dc 2d ff ff       	call   c0102b06 <strcat>
c010fd2a:	eb 69                	jmp    c010fd95 <identify_cpu+0x467>
    }

    else
    {
        //standart name
        strcpy(cpu->cpu_type,cpu_manufactorys[cpu->manufactory]);
c010fd2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd2f:	8b 40 04             	mov    0x4(%eax),%eax
c010fd32:	8b 04 85 a0 34 11 c0 	mov    -0x3feecb60(,%eax,4),%eax
c010fd39:	8b 55 08             	mov    0x8(%ebp),%edx
c010fd3c:	83 c2 34             	add    $0x34,%edx
c010fd3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd43:	89 14 24             	mov    %edx,(%esp)
c010fd46:	e8 05 2d ff ff       	call   c0102a50 <strcpy>
        strcat(cpu->cpu_type," ");
c010fd4b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd4e:	8d 58 34             	lea    0x34(%eax),%ebx
c010fd51:	89 d8                	mov    %ebx,%eax
c010fd53:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
c010fd5a:	89 c2                	mov    %eax,%edx
c010fd5c:	b8 00 00 00 00       	mov    $0x0,%eax
c010fd61:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010fd64:	89 d7                	mov    %edx,%edi
c010fd66:	f2 ae                	repnz scas %es:(%edi),%al
c010fd68:	89 c8                	mov    %ecx,%eax
c010fd6a:	f7 d0                	not    %eax
c010fd6c:	83 e8 01             	sub    $0x1,%eax
c010fd6f:	01 d8                	add    %ebx,%eax
c010fd71:	66 c7 00 20 00       	movw   $0x20,(%eax)
        strcat(cpu->cpu_type,architecture[cpu->architecture]);
c010fd76:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd79:	8b 40 30             	mov    0x30(%eax),%eax
c010fd7c:	8b 04 85 e8 34 11 c0 	mov    -0x3feecb18(,%eax,4),%eax
c010fd83:	8b 55 08             	mov    0x8(%ebp),%edx
c010fd86:	83 c2 34             	add    $0x34,%edx
c010fd89:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd8d:	89 14 24             	mov    %edx,(%esp)
c010fd90:	e8 71 2d ff ff       	call   c0102b06 <strcat>
    }

    return 0;
c010fd95:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fd9a:	83 c4 4c             	add    $0x4c,%esp
c010fd9d:	5b                   	pop    %ebx
c010fd9e:	5e                   	pop    %esi
c010fd9f:	5f                   	pop    %edi
c010fda0:	5d                   	pop    %ebp
c010fda1:	c3                   	ret    

c010fda2 <CPU_info>:
/*
 * prints CPU Information (not much)
 * @return void
 */
void CPU_info(struct cpu_properties *cpu)
{
c010fda2:	55                   	push   %ebp
c010fda3:	89 e5                	mov    %esp,%ebp
c010fda5:	83 ec 18             	sub    $0x18,%esp
    if (cpu->cpuid_support==true)
c010fda8:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdab:	8b 00                	mov    (%eax),%eax
c010fdad:	83 f8 01             	cmp    $0x1,%eax
c010fdb0:	0f 85 34 01 00 00    	jne    c010feea <CPU_info+0x148>
    {
        printf("CPU Manufactory: %s\n",cpu_manufactorys[cpu->manufactory]);
c010fdb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdb9:	8b 40 04             	mov    0x4(%eax),%eax
c010fdbc:	8b 04 85 a0 34 11 c0 	mov    -0x3feecb60(,%eax,4),%eax
c010fdc3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fdc7:	c7 04 24 19 2a 11 c0 	movl   $0xc0112a19,(%esp)
c010fdce:	e8 aa 33 ff ff       	call   c010317d <printf>
        printf("Architecture: %s\n",architecture[cpu->architecture]);
c010fdd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdd6:	8b 40 30             	mov    0x30(%eax),%eax
c010fdd9:	8b 04 85 e8 34 11 c0 	mov    -0x3feecb18(,%eax,4),%eax
c010fde0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fde4:	c7 04 24 2e 2a 11 c0 	movl   $0xc0112a2e,(%esp)
c010fdeb:	e8 8d 33 ff ff       	call   c010317d <printf>
        printf("CPU Model: %s\n",cpu->cpu_type);
c010fdf0:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdf3:	83 c0 34             	add    $0x34,%eax
c010fdf6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fdfa:	c7 04 24 40 2a 11 c0 	movl   $0xc0112a40,(%esp)
c010fe01:	e8 77 33 ff ff       	call   c010317d <printf>
        printf("Family: %d  Model: %d  Stepping: %d\n",cpu->family,cpu->model,cpu->stepping);
c010fe06:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe09:	0f b6 40 1f          	movzbl 0x1f(%eax),%eax
c010fe0d:	0f b6 c8             	movzbl %al,%ecx
c010fe10:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe13:	0f b6 40 1e          	movzbl 0x1e(%eax),%eax
c010fe17:	0f b6 d0             	movzbl %al,%edx
c010fe1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe1d:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c010fe21:	0f b6 c0             	movzbl %al,%eax
c010fe24:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010fe28:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fe2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe30:	c7 04 24 50 2a 11 c0 	movl   $0xc0112a50,(%esp)
c010fe37:	e8 41 33 ff ff       	call   c010317d <printf>
        printf("Logical CPUs: %d\n",cpu->logic_cores);
c010fe3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe3f:	0f b6 40 23          	movzbl 0x23(%eax),%eax
c010fe43:	0f b6 c0             	movzbl %al,%eax
c010fe46:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe4a:	c7 04 24 75 2a 11 c0 	movl   $0xc0112a75,(%esp)
c010fe51:	e8 27 33 ff ff       	call   c010317d <printf>
        printf("FB0: %#08x  FB1: %#08x\n",cpu->flagblock0, cpu->flagblock1);
c010fe56:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe59:	8b 50 6c             	mov    0x6c(%eax),%edx
c010fe5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe5f:	8b 40 68             	mov    0x68(%eax),%eax
c010fe62:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fe66:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe6a:	c7 04 24 87 2a 11 c0 	movl   $0xc0112a87,(%esp)
c010fe71:	e8 07 33 ff ff       	call   c010317d <printf>
        printf("Dynamic Syscall: %s\n",scall[cpu->dsysc]);
c010fe76:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe79:	8b 40 28             	mov    0x28(%eax),%eax
c010fe7c:	8b 04 85 dc 34 11 c0 	mov    -0x3feecb24(,%eax,4),%eax
c010fe83:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe87:	c7 04 24 9f 2a 11 c0 	movl   $0xc0112a9f,(%esp)
c010fe8e:	e8 ea 32 ff ff       	call   c010317d <printf>

        if(cpu->flagblock1 & CLFLSH)
c010fe93:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe96:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fe99:	25 00 00 08 00       	and    $0x80000,%eax
c010fe9e:	85 c0                	test   %eax,%eax
c010fea0:	74 1d                	je     c010febf <CPU_info+0x11d>
        {
            printf("clflush size: %dB\n",cpu->clflush*8);
c010fea2:	8b 45 08             	mov    0x8(%ebp),%eax
c010fea5:	0f b6 40 22          	movzbl 0x22(%eax),%eax
c010fea9:	0f b6 c0             	movzbl %al,%eax
c010feac:	c1 e0 03             	shl    $0x3,%eax
c010feaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010feb3:	c7 04 24 b4 2a 11 c0 	movl   $0xc0112ab4,(%esp)
c010feba:	e8 be 32 ff ff       	call   c010317d <printf>
        }
        if(cpu->flagblock1 & ACPI)
c010febf:	8b 45 08             	mov    0x8(%ebp),%eax
c010fec2:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fec5:	25 00 00 40 00       	and    $0x400000,%eax
c010feca:	85 c0                	test   %eax,%eax
c010fecc:	74 28                	je     c010fef6 <CPU_info+0x154>
        {
            printf("APIC ID: %d\n", cpu->APIC_ID);
c010fece:	8b 45 08             	mov    0x8(%ebp),%eax
c010fed1:	0f b6 40 2e          	movzbl 0x2e(%eax),%eax
c010fed5:	0f b6 c0             	movzbl %al,%eax
c010fed8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fedc:	c7 04 24 c7 2a 11 c0 	movl   $0xc0112ac7,(%esp)
c010fee3:	e8 95 32 ff ff       	call   c010317d <printf>
c010fee8:	eb 0c                	jmp    c010fef6 <CPU_info+0x154>
    }

    else

    {
        printf("current cpu does not support CPUID\n");
c010feea:	c7 04 24 d4 2a 11 c0 	movl   $0xc0112ad4,(%esp)
c010fef1:	e8 be bd ff ff       	call   c010bcb4 <puts>
    }
}
c010fef6:	c9                   	leave  
c010fef7:	c3                   	ret    

c010fef8 <INIT_CPUID>:
/*
 * Creates structures containing CPU Informations
 * @return void
 */
void INIT_CPUID(void)
{
c010fef8:	55                   	push   %ebp
c010fef9:	89 e5                	mov    %esp,%ebp
c010fefb:	83 ec 18             	sub    $0x18,%esp
    identify_cpu((struct cpu_properties *)&current_CPU);
c010fefe:	c7 04 24 60 a0 13 c0 	movl   $0xc013a060,(%esp)
c010ff05:	e8 24 fa ff ff       	call   c010f92e <identify_cpu>
    CPU_info((struct cpu_properties *)&current_CPU);
c010ff0a:	c7 04 24 60 a0 13 c0 	movl   $0xc013a060,(%esp)
c010ff11:	e8 8c fe ff ff       	call   c010fda2 <CPU_info>
}
c010ff16:	c9                   	leave  
c010ff17:	c3                   	ret    

c010ff18 <lock>:
 */

#include <mutex.h>

void lock(mutex *m)
{
c010ff18:	55                   	push   %ebp
c010ff19:	89 e5                	mov    %esp,%ebp
c010ff1b:	83 ec 18             	sub    $0x18,%esp
    while(!try_lock(m));
c010ff1e:	90                   	nop
c010ff1f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff22:	89 04 24             	mov    %eax,(%esp)
c010ff25:	e8 14 00 00 00       	call   c010ff3e <try_lock>
c010ff2a:	85 c0                	test   %eax,%eax
c010ff2c:	74 f1                	je     c010ff1f <lock+0x7>
}
c010ff2e:	c9                   	leave  
c010ff2f:	c3                   	ret    

c010ff30 <unlock>:

void unlock(mutex *m)
{
c010ff30:	55                   	push   %ebp
c010ff31:	89 e5                	mov    %esp,%ebp
    *m = false;
c010ff33:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010ff3c:	5d                   	pop    %ebp
c010ff3d:	c3                   	ret    

c010ff3e <try_lock>:


bool try_lock(mutex *m)
{
c010ff3e:	55                   	push   %ebp
c010ff3f:	89 e5                	mov    %esp,%ebp
c010ff41:	57                   	push   %edi
c010ff42:	53                   	push   %ebx
c010ff43:	83 ec 14             	sub    $0x14,%esp
    int r;
    asm(
c010ff46:	8b 7d 08             	mov    0x8(%ebp),%edi
c010ff49:	89 7d e4             	mov    %edi,-0x1c(%ebp)
c010ff4c:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010ff4f:	b8 01 00 00 00       	mov    $0x1,%eax
c010ff54:	87 07                	xchg   %eax,(%edi)
c010ff56:	89 c3                	mov    %eax,%ebx
c010ff58:	89 5d f4             	mov    %ebx,-0xc(%ebp)
        "mov $1, %%eax;"
        "xchg %%eax,(%1);"
        : "=a"(r) : "D" (m)
    );
    return !r;
c010ff5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ff5f:	0f 94 c0             	sete   %al
c010ff62:	0f b6 c0             	movzbl %al,%eax
}
c010ff65:	83 c4 14             	add    $0x14,%esp
c010ff68:	5b                   	pop    %ebx
c010ff69:	5f                   	pop    %edi
c010ff6a:	5d                   	pop    %ebp
c010ff6b:	c3                   	ret    

c010ff6c <set_GDT_entry>:
	@param size 	Segment size (Limit)
	@param access 	Access Settings
	@param flags	Flags
 */
void set_GDT_entry(int entry, uint32_t base, uint32_t size, uint8_t access, int8_t flags)
{
c010ff6c:	55                   	push   %ebp
c010ff6d:	89 e5                	mov    %esp,%ebp
c010ff6f:	83 ec 08             	sub    $0x8,%esp
c010ff72:	8b 55 14             	mov    0x14(%ebp),%edx
c010ff75:	8b 45 18             	mov    0x18(%ebp),%eax
c010ff78:	88 55 fc             	mov    %dl,-0x4(%ebp)
c010ff7b:	88 45 f8             	mov    %al,-0x8(%ebp)
    GDT[entry].limit_low = (uint16_t)size;
c010ff7e:	8b 45 10             	mov    0x10(%ebp),%eax
c010ff81:	89 c2                	mov    %eax,%edx
c010ff83:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff86:	66 89 14 c5 20 89 11 	mov    %dx,-0x3fee76e0(,%eax,8)
c010ff8d:	c0 
    GDT[entry].Base_low = (uint16_t)base;
c010ff8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff91:	89 c2                	mov    %eax,%edx
c010ff93:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff96:	66 89 14 c5 22 89 11 	mov    %dx,-0x3fee76de(,%eax,8)
c010ff9d:	c0 
    GDT[entry].Base_middle = (uint8_t)(base >> 16);
c010ff9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffa1:	c1 e8 10             	shr    $0x10,%eax
c010ffa4:	89 c2                	mov    %eax,%edx
c010ffa6:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffa9:	88 14 c5 24 89 11 c0 	mov    %dl,-0x3fee76dc(,%eax,8)
    GDT[entry].Access = access;
c010ffb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffb3:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c010ffb7:	88 14 c5 25 89 11 c0 	mov    %dl,-0x3fee76db(,%eax,8)
    GDT[entry].limit_Flags= (uint8_t)((flags << 4) | (size >> 16));
c010ffbe:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ffc2:	89 c2                	mov    %eax,%edx
c010ffc4:	c1 e2 04             	shl    $0x4,%edx
c010ffc7:	8b 45 10             	mov    0x10(%ebp),%eax
c010ffca:	c1 e8 10             	shr    $0x10,%eax
c010ffcd:	09 c2                	or     %eax,%edx
c010ffcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffd2:	88 14 c5 26 89 11 c0 	mov    %dl,-0x3fee76da(,%eax,8)
    GDT[entry].base_high = (uint8_t)(base >> 24);
c010ffd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffdc:	c1 e8 18             	shr    $0x18,%eax
c010ffdf:	89 c2                	mov    %eax,%edx
c010ffe1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffe4:	88 14 c5 27 89 11 c0 	mov    %dl,-0x3fee76d9(,%eax,8)
}
c010ffeb:	c9                   	leave  
c010ffec:	c3                   	ret    

c010ffed <load_gdt>:
/**
	@brief Load GDT into register
	@param last_entry last entry
 */
void load_gdt(uint16_t last_entry)
{
c010ffed:	55                   	push   %ebp
c010ffee:	89 e5                	mov    %esp,%ebp
c010fff0:	83 ec 04             	sub    $0x4,%esp
c010fff3:	8b 45 08             	mov    0x8(%ebp),%eax
c010fff6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdtp.limit = ((last_entry + 1) * 8) - 1;
c010fffa:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010fffe:	83 c0 01             	add    $0x1,%eax
c0110001:	c1 e0 03             	shl    $0x3,%eax
c0110004:	83 e8 01             	sub    $0x1,%eax
c0110007:	66 a3 58 89 11 c0    	mov    %ax,0xc0118958
    gdtp.base = GDT;
c011000d:	c7 05 5a 89 11 c0 20 	movl   $0xc0118920,0xc011895a
c0110014:	89 11 c0 
    asm volatile("lgdt %0"::"m" (gdtp));
c0110017:	0f 01 15 58 89 11 c0 	lgdtl  0xc0118958
}
c011001e:	c9                   	leave  
c011001f:	c3                   	ret    

c0110020 <INIT_GDT>:

void INIT_GDT(void)
{
c0110020:	55                   	push   %ebp
c0110021:	89 e5                	mov    %esp,%ebp
c0110023:	83 ec 14             	sub    $0x14,%esp
    set_GDT_entry(0,0,0,0,0);
c0110026:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011002d:	00 
c011002e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110035:	00 
c0110036:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011003d:	00 
c011003e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110045:	00 
c0110046:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c011004d:	e8 1a ff ff ff       	call   c010ff6c <set_GDT_entry>
    //Ring 0 Descriptors
    set_GDT_entry(1,0,0xFFFFF,0x9A,0xC);
c0110052:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c0110059:	00 
c011005a:	c7 44 24 0c 9a 00 00 	movl   $0x9a,0xc(%esp)
c0110061:	00 
c0110062:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c0110069:	00 
c011006a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110071:	00 
c0110072:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0110079:	e8 ee fe ff ff       	call   c010ff6c <set_GDT_entry>
    set_GDT_entry(2,0,0xFFFFF,0x92,0xC);
c011007e:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c0110085:	00 
c0110086:	c7 44 24 0c 92 00 00 	movl   $0x92,0xc(%esp)
c011008d:	00 
c011008e:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c0110095:	00 
c0110096:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011009d:	00 
c011009e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01100a5:	e8 c2 fe ff ff       	call   c010ff6c <set_GDT_entry>

    //Ring 3 Descriptors
    set_GDT_entry(3,0,0xFFFFF,0xFA,0xC);
c01100aa:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c01100b1:	00 
c01100b2:	c7 44 24 0c fa 00 00 	movl   $0xfa,0xc(%esp)
c01100b9:	00 
c01100ba:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c01100c1:	00 
c01100c2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01100c9:	00 
c01100ca:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01100d1:	e8 96 fe ff ff       	call   c010ff6c <set_GDT_entry>
    set_GDT_entry(4,0,0xFFFFF,0xF2,0xC);
c01100d6:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c01100dd:	00 
c01100de:	c7 44 24 0c f2 00 00 	movl   $0xf2,0xc(%esp)
c01100e5:	00 
c01100e6:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c01100ed:	00 
c01100ee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01100f5:	00 
c01100f6:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01100fd:	e8 6a fe ff ff       	call   c010ff6c <set_GDT_entry>

    load_gdt(4);
c0110102:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0110109:	e8 df fe ff ff       	call   c010ffed <load_gdt>
    asm volatile(
c011010e:	66 b8 10 00          	mov    $0x10,%ax
c0110112:	8e d8                	mov    %eax,%ds
c0110114:	8e c0                	mov    %eax,%es
c0110116:	8e e0                	mov    %eax,%fs
c0110118:	8e e8                	mov    %eax,%gs
c011011a:	8e d0                	mov    %eax,%ss
c011011c:	ea 23 01 11 c0 08 00 	ljmp   $0x8,$0xc0110123

c0110123 <.1>:
        "mov %ax, %gs;"
        "mov %ax, %ss;"
        "ljmp $0x8, $.1;"
        ".1:;"
    );
}
c0110123:	c9                   	leave  
c0110124:	c3                   	ret    
c0110125:	66 90                	xchg   %ax,%ax
c0110127:	66 90                	xchg   %ax,%ax
c0110129:	66 90                	xchg   %ax,%ax
c011012b:	66 90                	xchg   %ax,%ax
c011012d:	66 90                	xchg   %ax,%ax
c011012f:	90                   	nop

c0110130 <start>:
c0110130:	b9 00 40 11 00       	mov    $0x114000,%ecx
c0110135:	0f 22 d9             	mov    %ecx,%cr3
c0110138:	0f 20 e1             	mov    %cr4,%ecx
c011013b:	83 c9 10             	or     $0x10,%ecx
c011013e:	0f 22 e1             	mov    %ecx,%cr4
c0110141:	0f 20 c1             	mov    %cr0,%ecx
c0110144:	81 c9 00 00 00 80    	or     $0x80000000,%ecx
c011014a:	0f 22 c1             	mov    %ecx,%cr0
c011014d:	8d 0d 55 01 11 c0    	lea    0xc0110155,%ecx
c0110153:	ff e1                	jmp    *%ecx

c0110155 <higherhalf>:
c0110155:	bc 00 a0 11 c0       	mov    $0xc011a000,%esp
c011015a:	81 c3 00 00 00 c0    	add    $0xc0000000,%ebx
c0110160:	6a 00                	push   $0x0
c0110162:	6a 00                	push   $0x0
c0110164:	50                   	push   %eax
c0110165:	53                   	push   %ebx
c0110166:	e8 39 35 ff ff       	call   c01036a4 <init>
c011016b:	eb fe                	jmp    c011016b <higherhalf+0x16>
c011016d:	66 90                	xchg   %ax,%ax
c011016f:	90                   	nop

c0110170 <isr_0>:
c0110170:	6a 00                	push   $0x0
c0110172:	6a 00                	push   $0x0
c0110174:	e9 81 01 00 00       	jmp    c01102fa <isr_save>

c0110179 <isr_1>:
c0110179:	6a 00                	push   $0x0
c011017b:	6a 01                	push   $0x1
c011017d:	e9 78 01 00 00       	jmp    c01102fa <isr_save>

c0110182 <isr_2>:
c0110182:	6a 00                	push   $0x0
c0110184:	6a 02                	push   $0x2
c0110186:	e9 6f 01 00 00       	jmp    c01102fa <isr_save>

c011018b <isr_3>:
c011018b:	6a 00                	push   $0x0
c011018d:	6a 03                	push   $0x3
c011018f:	e9 66 01 00 00       	jmp    c01102fa <isr_save>

c0110194 <isr_4>:
c0110194:	6a 00                	push   $0x0
c0110196:	6a 04                	push   $0x4
c0110198:	e9 5d 01 00 00       	jmp    c01102fa <isr_save>

c011019d <isr_5>:
c011019d:	6a 00                	push   $0x0
c011019f:	6a 05                	push   $0x5
c01101a1:	e9 54 01 00 00       	jmp    c01102fa <isr_save>

c01101a6 <isr_6>:
c01101a6:	6a 00                	push   $0x0
c01101a8:	6a 06                	push   $0x6
c01101aa:	e9 4b 01 00 00       	jmp    c01102fa <isr_save>

c01101af <isr_7>:
c01101af:	6a 00                	push   $0x0
c01101b1:	6a 07                	push   $0x7
c01101b3:	e9 42 01 00 00       	jmp    c01102fa <isr_save>

c01101b8 <isr_8>:
c01101b8:	6a 08                	push   $0x8
c01101ba:	e9 3b 01 00 00       	jmp    c01102fa <isr_save>

c01101bf <isr_9>:
c01101bf:	6a 00                	push   $0x0
c01101c1:	6a 09                	push   $0x9
c01101c3:	e9 32 01 00 00       	jmp    c01102fa <isr_save>

c01101c8 <isr_10>:
c01101c8:	6a 0a                	push   $0xa
c01101ca:	e9 2b 01 00 00       	jmp    c01102fa <isr_save>

c01101cf <isr_11>:
c01101cf:	6a 0b                	push   $0xb
c01101d1:	e9 24 01 00 00       	jmp    c01102fa <isr_save>

c01101d6 <isr_12>:
c01101d6:	6a 0c                	push   $0xc
c01101d8:	e9 1d 01 00 00       	jmp    c01102fa <isr_save>

c01101dd <isr_13>:
c01101dd:	6a 0d                	push   $0xd
c01101df:	e9 16 01 00 00       	jmp    c01102fa <isr_save>

c01101e4 <isr_14>:
c01101e4:	6a 0e                	push   $0xe
c01101e6:	e9 0f 01 00 00       	jmp    c01102fa <isr_save>

c01101eb <isr_15>:
c01101eb:	6a 00                	push   $0x0
c01101ed:	6a 0f                	push   $0xf
c01101ef:	e9 06 01 00 00       	jmp    c01102fa <isr_save>

c01101f4 <isr_16>:
c01101f4:	6a 00                	push   $0x0
c01101f6:	6a 10                	push   $0x10
c01101f8:	e9 fd 00 00 00       	jmp    c01102fa <isr_save>

c01101fd <isr_17>:
c01101fd:	6a 11                	push   $0x11
c01101ff:	e9 f6 00 00 00       	jmp    c01102fa <isr_save>

c0110204 <isr_18>:
c0110204:	6a 00                	push   $0x0
c0110206:	6a 12                	push   $0x12
c0110208:	e9 ed 00 00 00       	jmp    c01102fa <isr_save>

c011020d <isr_19>:
c011020d:	6a 00                	push   $0x0
c011020f:	6a 13                	push   $0x13
c0110211:	e9 e4 00 00 00       	jmp    c01102fa <isr_save>

c0110216 <isr_20>:
c0110216:	6a 00                	push   $0x0
c0110218:	6a 14                	push   $0x14
c011021a:	e9 db 00 00 00       	jmp    c01102fa <isr_save>

c011021f <isr_21>:
c011021f:	6a 00                	push   $0x0
c0110221:	6a 15                	push   $0x15
c0110223:	e9 d2 00 00 00       	jmp    c01102fa <isr_save>

c0110228 <isr_22>:
c0110228:	6a 00                	push   $0x0
c011022a:	6a 16                	push   $0x16
c011022c:	e9 c9 00 00 00       	jmp    c01102fa <isr_save>

c0110231 <isr_23>:
c0110231:	6a 00                	push   $0x0
c0110233:	6a 17                	push   $0x17
c0110235:	e9 c0 00 00 00       	jmp    c01102fa <isr_save>

c011023a <isr_24>:
c011023a:	6a 00                	push   $0x0
c011023c:	6a 18                	push   $0x18
c011023e:	e9 b7 00 00 00       	jmp    c01102fa <isr_save>

c0110243 <isr_25>:
c0110243:	6a 00                	push   $0x0
c0110245:	6a 19                	push   $0x19
c0110247:	e9 ae 00 00 00       	jmp    c01102fa <isr_save>

c011024c <isr_26>:
c011024c:	6a 00                	push   $0x0
c011024e:	6a 1a                	push   $0x1a
c0110250:	e9 a5 00 00 00       	jmp    c01102fa <isr_save>

c0110255 <isr_27>:
c0110255:	6a 00                	push   $0x0
c0110257:	6a 1b                	push   $0x1b
c0110259:	e9 9c 00 00 00       	jmp    c01102fa <isr_save>

c011025e <isr_28>:
c011025e:	6a 00                	push   $0x0
c0110260:	6a 1c                	push   $0x1c
c0110262:	e9 93 00 00 00       	jmp    c01102fa <isr_save>

c0110267 <isr_29>:
c0110267:	6a 00                	push   $0x0
c0110269:	6a 1d                	push   $0x1d
c011026b:	e9 8a 00 00 00       	jmp    c01102fa <isr_save>

c0110270 <isr_30>:
c0110270:	6a 00                	push   $0x0
c0110272:	6a 1e                	push   $0x1e
c0110274:	e9 81 00 00 00       	jmp    c01102fa <isr_save>

c0110279 <isr_31>:
c0110279:	6a 00                	push   $0x0
c011027b:	6a 1f                	push   $0x1f
c011027d:	eb 7b                	jmp    c01102fa <isr_save>

c011027f <isr_default>:
c011027f:	6a ff                	push   $0xffffffff
c0110281:	6a ff                	push   $0xffffffff
c0110283:	eb 75                	jmp    c01102fa <isr_save>

c0110285 <isr_32>:
c0110285:	6a 00                	push   $0x0
c0110287:	6a 20                	push   $0x20
c0110289:	eb 6f                	jmp    c01102fa <isr_save>

c011028b <isr_33>:
c011028b:	6a 00                	push   $0x0
c011028d:	6a 21                	push   $0x21
c011028f:	eb 69                	jmp    c01102fa <isr_save>

c0110291 <isr_34>:
c0110291:	6a 00                	push   $0x0
c0110293:	6a 22                	push   $0x22
c0110295:	eb 63                	jmp    c01102fa <isr_save>

c0110297 <isr_35>:
c0110297:	6a 00                	push   $0x0
c0110299:	6a 23                	push   $0x23
c011029b:	eb 5d                	jmp    c01102fa <isr_save>

c011029d <isr_36>:
c011029d:	6a 00                	push   $0x0
c011029f:	6a 24                	push   $0x24
c01102a1:	eb 57                	jmp    c01102fa <isr_save>

c01102a3 <isr_37>:
c01102a3:	6a 00                	push   $0x0
c01102a5:	6a 25                	push   $0x25
c01102a7:	eb 51                	jmp    c01102fa <isr_save>

c01102a9 <isr_38>:
c01102a9:	6a 00                	push   $0x0
c01102ab:	6a 26                	push   $0x26
c01102ad:	eb 4b                	jmp    c01102fa <isr_save>

c01102af <isr_39>:
c01102af:	6a 00                	push   $0x0
c01102b1:	6a 27                	push   $0x27
c01102b3:	eb 45                	jmp    c01102fa <isr_save>

c01102b5 <isr_40>:
c01102b5:	6a 00                	push   $0x0
c01102b7:	6a 28                	push   $0x28
c01102b9:	eb 3f                	jmp    c01102fa <isr_save>

c01102bb <isr_41>:
c01102bb:	6a 00                	push   $0x0
c01102bd:	6a 29                	push   $0x29
c01102bf:	eb 39                	jmp    c01102fa <isr_save>

c01102c1 <isr_42>:
c01102c1:	6a 00                	push   $0x0
c01102c3:	6a 2a                	push   $0x2a
c01102c5:	eb 33                	jmp    c01102fa <isr_save>

c01102c7 <isr_43>:
c01102c7:	6a 00                	push   $0x0
c01102c9:	6a 2b                	push   $0x2b
c01102cb:	eb 2d                	jmp    c01102fa <isr_save>

c01102cd <isr_44>:
c01102cd:	6a 00                	push   $0x0
c01102cf:	6a 2c                	push   $0x2c
c01102d1:	eb 27                	jmp    c01102fa <isr_save>

c01102d3 <isr_45>:
c01102d3:	6a 00                	push   $0x0
c01102d5:	6a 2d                	push   $0x2d
c01102d7:	eb 21                	jmp    c01102fa <isr_save>

c01102d9 <isr_46>:
c01102d9:	6a 00                	push   $0x0
c01102db:	6a 2e                	push   $0x2e
c01102dd:	eb 1b                	jmp    c01102fa <isr_save>

c01102df <isr_47>:
c01102df:	6a 00                	push   $0x0
c01102e1:	6a 2f                	push   $0x2f
c01102e3:	eb 15                	jmp    c01102fa <isr_save>

c01102e5 <isr_112>:
c01102e5:	6a 00                	push   $0x0
c01102e7:	6a 70                	push   $0x70
c01102e9:	eb 0f                	jmp    c01102fa <isr_save>

c01102eb <isr_128>:
c01102eb:	6a 00                	push   $0x0
c01102ed:	68 80 00 00 00       	push   $0x80
c01102f2:	eb 06                	jmp    c01102fa <isr_save>

c01102f4 <isr_pci>:
c01102f4:	6a 00                	push   $0x0
c01102f6:	6a 32                	push   $0x32
c01102f8:	eb 00                	jmp    c01102fa <isr_save>

c01102fa <isr_save>:
c01102fa:	50                   	push   %eax
c01102fb:	51                   	push   %ecx
c01102fc:	52                   	push   %edx
c01102fd:	53                   	push   %ebx
c01102fe:	55                   	push   %ebp
c01102ff:	56                   	push   %esi
c0110300:	57                   	push   %edi
c0110301:	1e                   	push   %ds
c0110302:	06                   	push   %es
c0110303:	0f a0                	push   %fs
c0110305:	0f a8                	push   %gs
c0110307:	66 ba 10 00          	mov    $0x10,%dx
c011030b:	8e da                	mov    %edx,%ds
c011030d:	8e c2                	mov    %edx,%es
c011030f:	8e e2                	mov    %edx,%fs
c0110311:	8e ea                	mov    %edx,%gs
c0110313:	54                   	push   %esp
c0110314:	e8 cf df ff ff       	call   c010e2e8 <irq_handler>
c0110319:	89 c4                	mov    %eax,%esp
c011031b:	0f a9                	pop    %gs
c011031d:	0f a1                	pop    %fs
c011031f:	07                   	pop    %es
c0110320:	1f                   	pop    %ds
c0110321:	5f                   	pop    %edi
c0110322:	5e                   	pop    %esi
c0110323:	5d                   	pop    %ebp
c0110324:	5b                   	pop    %ebx
c0110325:	5a                   	pop    %edx
c0110326:	59                   	pop    %ecx
c0110327:	58                   	pop    %eax
c0110328:	83 c4 08             	add    $0x8,%esp
c011032b:	cf                   	iret   
