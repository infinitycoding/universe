
kernel32.elf:     file format elf32-i386


Disassembly of section .text:

c0102000 <exp>:

/**
	Exponential-Function
**/
double exp(double x)
{
c0102000:	55                   	push   %ebp
c0102001:	89 e5                	mov    %esp,%ebp
c0102003:	83 ec 48             	sub    $0x48,%esp
c0102006:	8b 45 08             	mov    0x8(%ebp),%eax
c0102009:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010200c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010200f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    double sigma = 0;
c0102012:	d9 ee                	fldz   
c0102014:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 150; i++)
c0102017:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010201e:	eb 4e                	jmp    c010206e <exp+0x6e>
        sigma += powi(x, i ) / factorial(i);
c0102020:	dd 45 e0             	fldl   -0x20(%ebp)
c0102023:	d9 7d de             	fnstcw -0x22(%ebp)
c0102026:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c010202a:	b4 0c                	mov    $0xc,%ah
c010202c:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c0102030:	d9 6d dc             	fldcw  -0x24(%ebp)
c0102033:	db 5d d8             	fistpl -0x28(%ebp)
c0102036:	d9 6d de             	fldcw  -0x22(%ebp)
c0102039:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010203c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010203f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102043:	89 04 24             	mov    %eax,(%esp)
c0102046:	e8 3a 02 00 00       	call   c0102285 <powi>
c010204b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010204e:	db 45 d8             	fildl  -0x28(%ebp)
c0102051:	dd 5d d0             	fstpl  -0x30(%ebp)
c0102054:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102057:	89 04 24             	mov    %eax,(%esp)
c010205a:	e8 68 02 00 00       	call   c01022c7 <factorial>
c010205f:	dc 7d d0             	fdivrl -0x30(%ebp)
c0102062:	dd 45 f0             	fldl   -0x10(%ebp)
c0102065:	de c1                	faddp  %st,%st(1)
c0102067:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double exp(double x)
{
    double sigma = 0;
    int i;
    for (i = 0; i < 150; i++)
c010206a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010206e:	81 7d ec 95 00 00 00 	cmpl   $0x95,-0x14(%ebp)
c0102075:	7e a9                	jle    c0102020 <exp+0x20>
        sigma += powi(x, i ) / factorial(i);
    return sigma;
c0102077:	dd 45 f0             	fldl   -0x10(%ebp)
}
c010207a:	c9                   	leave  
c010207b:	c3                   	ret    

c010207c <ln>:

/**
	Natural logarithm
**/
double ln(double y)
{
c010207c:	55                   	push   %ebp
c010207d:	89 e5                	mov    %esp,%ebp
c010207f:	83 ec 58             	sub    $0x58,%esp
c0102082:	8b 45 08             	mov    0x8(%ebp),%eax
c0102085:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0102088:	8b 45 0c             	mov    0xc(%ebp),%eax
c010208b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    double x = (y - 1) / (y + 1);
c010208e:	dd 45 d0             	fldl   -0x30(%ebp)
c0102091:	d9 e8                	fld1   
c0102093:	de e9                	fsubrp %st,%st(1)
c0102095:	dd 45 d0             	fldl   -0x30(%ebp)
c0102098:	d9 e8                	fld1   
c010209a:	de c1                	faddp  %st,%st(1)
c010209c:	de f9                	fdivrp %st,%st(1)
c010209e:	dd 5d e0             	fstpl  -0x20(%ebp)
    double sigma = 0;
c01020a1:	d9 ee                	fldz   
c01020a3:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 150; i++)
c01020a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01020ad:	eb 55                	jmp    c0102104 <ln+0x88>
        sigma += powi(x, 2*i+1) /(2*i+1);
c01020af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01020b2:	01 c0                	add    %eax,%eax
c01020b4:	8d 50 01             	lea    0x1(%eax),%edx
c01020b7:	dd 45 e0             	fldl   -0x20(%ebp)
c01020ba:	d9 7d ce             	fnstcw -0x32(%ebp)
c01020bd:	0f b7 45 ce          	movzwl -0x32(%ebp),%eax
c01020c1:	b4 0c                	mov    $0xc,%ah
c01020c3:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
c01020c7:	d9 6d cc             	fldcw  -0x34(%ebp)
c01020ca:	db 5d c8             	fistpl -0x38(%ebp)
c01020cd:	d9 6d ce             	fldcw  -0x32(%ebp)
c01020d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01020d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01020d7:	89 04 24             	mov    %eax,(%esp)
c01020da:	e8 a6 01 00 00       	call   c0102285 <powi>
c01020df:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01020e2:	01 d2                	add    %edx,%edx
c01020e4:	83 c2 01             	add    $0x1,%edx
c01020e7:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01020ea:	89 c2                	mov    %eax,%edx
c01020ec:	c1 fa 1f             	sar    $0x1f,%edx
c01020ef:	f7 7d c4             	idivl  -0x3c(%ebp)
c01020f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01020f5:	db 45 c8             	fildl  -0x38(%ebp)
c01020f8:	dd 45 f0             	fldl   -0x10(%ebp)
c01020fb:	de c1                	faddp  %st,%st(1)
c01020fd:	dd 5d f0             	fstpl  -0x10(%ebp)
double ln(double y)
{
    double x = (y - 1) / (y + 1);
    double sigma = 0;
    int i;
    for (i = 0; i < 150; i++)
c0102100:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0102104:	81 7d ec 95 00 00 00 	cmpl   $0x95,-0x14(%ebp)
c010210b:	7e a2                	jle    c01020af <ln+0x33>
        sigma += powi(x, 2*i+1) /(2*i+1);
    return 2*sigma;
c010210d:	dd 45 f0             	fldl   -0x10(%ebp)
c0102110:	d8 c0                	fadd   %st(0),%st
}
c0102112:	c9                   	leave  
c0102113:	c3                   	ret    

c0102114 <pow>:

/**
	Power for real exponents
**/
double pow(double base, double exponent)
{
c0102114:	55                   	push   %ebp
c0102115:	89 e5                	mov    %esp,%ebp
c0102117:	83 ec 28             	sub    $0x28,%esp
c010211a:	8b 45 08             	mov    0x8(%ebp),%eax
c010211d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0102120:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102123:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102126:	8b 45 10             	mov    0x10(%ebp),%eax
c0102129:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010212c:	8b 45 14             	mov    0x14(%ebp),%eax
c010212f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return exp(exponent * ln(base));
c0102132:	dd 45 f0             	fldl   -0x10(%ebp)
c0102135:	dd 1c 24             	fstpl  (%esp)
c0102138:	e8 3f ff ff ff       	call   c010207c <ln>
c010213d:	dc 4d e8             	fmull  -0x18(%ebp)
c0102140:	dd 1c 24             	fstpl  (%esp)
c0102143:	e8 b8 fe ff ff       	call   c0102000 <exp>
}
c0102148:	c9                   	leave  
c0102149:	c3                   	ret    

c010214a <sin>:

/**
	Sine
**/
double sin(double x)
{
c010214a:	55                   	push   %ebp
c010214b:	89 e5                	mov    %esp,%ebp
c010214d:	53                   	push   %ebx
c010214e:	83 ec 44             	sub    $0x44,%esp
c0102151:	8b 45 08             	mov    0x8(%ebp),%eax
c0102154:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0102157:	8b 45 0c             	mov    0xc(%ebp),%eax
c010215a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    double sigma = 0;
c010215d:	d9 ee                	fldz   
c010215f:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 20; i++)
c0102162:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0102169:	eb 70                	jmp    c01021db <sin+0x91>
        sigma += ((powi(-1, i) * powi(x, 2 * i + 1)) / factorial(2 * i + 1));
c010216b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010216e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102172:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
c0102179:	e8 07 01 00 00       	call   c0102285 <powi>
c010217e:	89 c3                	mov    %eax,%ebx
c0102180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102183:	01 c0                	add    %eax,%eax
c0102185:	8d 50 01             	lea    0x1(%eax),%edx
c0102188:	dd 45 e0             	fldl   -0x20(%ebp)
c010218b:	d9 7d de             	fnstcw -0x22(%ebp)
c010218e:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c0102192:	b4 0c                	mov    $0xc,%ah
c0102194:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c0102198:	d9 6d dc             	fldcw  -0x24(%ebp)
c010219b:	db 5d d8             	fistpl -0x28(%ebp)
c010219e:	d9 6d de             	fldcw  -0x22(%ebp)
c01021a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01021a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01021a8:	89 04 24             	mov    %eax,(%esp)
c01021ab:	e8 d5 00 00 00       	call   c0102285 <powi>
c01021b0:	0f af c3             	imul   %ebx,%eax
c01021b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01021b6:	db 45 d8             	fildl  -0x28(%ebp)
c01021b9:	dd 5d d0             	fstpl  -0x30(%ebp)
c01021bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01021bf:	01 c0                	add    %eax,%eax
c01021c1:	83 c0 01             	add    $0x1,%eax
c01021c4:	89 04 24             	mov    %eax,(%esp)
c01021c7:	e8 fb 00 00 00       	call   c01022c7 <factorial>
c01021cc:	dc 7d d0             	fdivrl -0x30(%ebp)
c01021cf:	dd 45 f0             	fldl   -0x10(%ebp)
c01021d2:	de c1                	faddp  %st,%st(1)
c01021d4:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double sin(double x)
{
    double sigma = 0;
    int i;
    for (i = 0; i < 20; i++)
c01021d7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01021db:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c01021df:	7e 8a                	jle    c010216b <sin+0x21>
        sigma += ((powi(-1, i) * powi(x, 2 * i + 1)) / factorial(2 * i + 1));
    return sigma;
c01021e1:	dd 45 f0             	fldl   -0x10(%ebp)
}
c01021e4:	83 c4 44             	add    $0x44,%esp
c01021e7:	5b                   	pop    %ebx
c01021e8:	5d                   	pop    %ebp
c01021e9:	c3                   	ret    

c01021ea <cos>:

/**
	Cosine
**/
double cos(double x)
{
c01021ea:	55                   	push   %ebp
c01021eb:	89 e5                	mov    %esp,%ebp
c01021ed:	53                   	push   %ebx
c01021ee:	83 ec 44             	sub    $0x44,%esp
c01021f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01021f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01021f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01021fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    double sigma = 0;
c01021fd:	d9 ee                	fldz   
c01021ff:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 20; i++)
c0102202:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0102209:	eb 6b                	jmp    c0102276 <cos+0x8c>
        sigma += ((powi(-1, i) * powi(x, 2 * i)) / factorial(2 * i));
c010220b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010220e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102212:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
c0102219:	e8 67 00 00 00       	call   c0102285 <powi>
c010221e:	89 c3                	mov    %eax,%ebx
c0102220:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102223:	8d 14 00             	lea    (%eax,%eax,1),%edx
c0102226:	dd 45 e0             	fldl   -0x20(%ebp)
c0102229:	d9 7d de             	fnstcw -0x22(%ebp)
c010222c:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c0102230:	b4 0c                	mov    $0xc,%ah
c0102232:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c0102236:	d9 6d dc             	fldcw  -0x24(%ebp)
c0102239:	db 5d d8             	fistpl -0x28(%ebp)
c010223c:	d9 6d de             	fldcw  -0x22(%ebp)
c010223f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0102242:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102246:	89 04 24             	mov    %eax,(%esp)
c0102249:	e8 37 00 00 00       	call   c0102285 <powi>
c010224e:	0f af c3             	imul   %ebx,%eax
c0102251:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0102254:	db 45 d8             	fildl  -0x28(%ebp)
c0102257:	dd 5d d0             	fstpl  -0x30(%ebp)
c010225a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010225d:	01 c0                	add    %eax,%eax
c010225f:	89 04 24             	mov    %eax,(%esp)
c0102262:	e8 60 00 00 00       	call   c01022c7 <factorial>
c0102267:	dc 7d d0             	fdivrl -0x30(%ebp)
c010226a:	dd 45 f0             	fldl   -0x10(%ebp)
c010226d:	de c1                	faddp  %st,%st(1)
c010226f:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double cos(double x)
{
    double sigma = 0;
    int i;
    for (i = 0; i < 20; i++)
c0102272:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0102276:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c010227a:	7e 8f                	jle    c010220b <cos+0x21>
        sigma += ((powi(-1, i) * powi(x, 2 * i)) / factorial(2 * i));
    return sigma;
c010227c:	dd 45 f0             	fldl   -0x10(%ebp)
}
c010227f:	83 c4 44             	add    $0x44,%esp
c0102282:	5b                   	pop    %ebx
c0102283:	5d                   	pop    %ebp
c0102284:	c3                   	ret    

c0102285 <powi>:

/**
	Power for integer exponents
**/
int powi(int base, int exponent)
{
c0102285:	55                   	push   %ebp
c0102286:	89 e5                	mov    %esp,%ebp
c0102288:	83 ec 10             	sub    $0x10,%esp
    int result = base;
c010228b:	8b 45 08             	mov    0x8(%ebp),%eax
c010228e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int i;

    if (exponent == 0)
c0102291:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0102295:	75 09                	jne    c01022a0 <powi+0x1b>
    {
        result = 1;
c0102297:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
c010229e:	eb 22                	jmp    c01022c2 <powi+0x3d>
    }
    else
    {
        for (i = 0; i < exponent - 1; ++i)
c01022a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01022a7:	eb 0e                	jmp    c01022b7 <powi+0x32>
        {
            result *= base;
c01022a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022ac:	0f af 45 08          	imul   0x8(%ebp),%eax
c01022b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    {
        result = 1;
    }
    else
    {
        for (i = 0; i < exponent - 1; ++i)
c01022b3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01022b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01022ba:	83 e8 01             	sub    $0x1,%eax
c01022bd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01022c0:	7f e7                	jg     c01022a9 <powi+0x24>
        {
            result *= base;
        }
    }

    return result;
c01022c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01022c5:	c9                   	leave  
c01022c6:	c3                   	ret    

c01022c7 <factorial>:

/**
	Factorial function
**/
double factorial(long n)
{
c01022c7:	55                   	push   %ebp
c01022c8:	89 e5                	mov    %esp,%ebp
c01022ca:	83 ec 10             	sub    $0x10,%esp
    double res = 1;
c01022cd:	d9 e8                	fld1   
c01022cf:	dd 5d f8             	fstpl  -0x8(%ebp)
    int i;
    for (i = 1; i <= n; i++)
c01022d2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01022d9:	eb 0f                	jmp    c01022ea <factorial+0x23>
        res *= i;
c01022db:	db 45 f4             	fildl  -0xc(%ebp)
c01022de:	dd 45 f8             	fldl   -0x8(%ebp)
c01022e1:	de c9                	fmulp  %st,%st(1)
c01022e3:	dd 5d f8             	fstpl  -0x8(%ebp)
**/
double factorial(long n)
{
    double res = 1;
    int i;
    for (i = 1; i <= n; i++)
c01022e6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01022ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01022ed:	3b 45 08             	cmp    0x8(%ebp),%eax
c01022f0:	7e e9                	jle    c01022db <factorial+0x14>
        res *= i;
    return res;
c01022f2:	dd 45 f8             	fldl   -0x8(%ebp)
}
c01022f5:	c9                   	leave  
c01022f6:	c3                   	ret    

c01022f7 <abs>:

/**
	Absolute value
**/
int abs(int x)
{
c01022f7:	55                   	push   %ebp
c01022f8:	89 e5                	mov    %esp,%ebp
    if (x < 0)
c01022fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01022fe:	79 07                	jns    c0102307 <abs+0x10>
    {
        return -x;
c0102300:	8b 45 08             	mov    0x8(%ebp),%eax
c0102303:	f7 d8                	neg    %eax
c0102305:	eb 03                	jmp    c010230a <abs+0x13>
    }
    else
    {
        return x;
c0102307:	8b 45 08             	mov    0x8(%ebp),%eax
    }
}
c010230a:	5d                   	pop    %ebp
c010230b:	c3                   	ret    

c010230c <bit_scan_forward>:

unsigned int bit_scan_forward(unsigned int i)
{
c010230c:	55                   	push   %ebp
c010230d:	89 e5                	mov    %esp,%ebp
c010230f:	53                   	push   %ebx
c0102310:	83 ec 10             	sub    $0x10,%esp
    unsigned int j;

    for (j = 0; j < 32; j++)
c0102313:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010231a:	eb 20                	jmp    c010233c <bit_scan_forward+0x30>
    {
        if (i & (1 << j))
c010231c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010231f:	ba 01 00 00 00       	mov    $0x1,%edx
c0102324:	89 d3                	mov    %edx,%ebx
c0102326:	89 c1                	mov    %eax,%ecx
c0102328:	d3 e3                	shl    %cl,%ebx
c010232a:	89 d8                	mov    %ebx,%eax
c010232c:	23 45 08             	and    0x8(%ebp),%eax
c010232f:	85 c0                	test   %eax,%eax
c0102331:	74 05                	je     c0102338 <bit_scan_forward+0x2c>
        {
            return j;
c0102333:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102336:	eb 0f                	jmp    c0102347 <bit_scan_forward+0x3b>

unsigned int bit_scan_forward(unsigned int i)
{
    unsigned int j;

    for (j = 0; j < 32; j++)
c0102338:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c010233c:	83 7d f8 1f          	cmpl   $0x1f,-0x8(%ebp)
c0102340:	76 da                	jbe    c010231c <bit_scan_forward+0x10>
        if (i & (1 << j))
        {
            return j;
        }
    }
    return -1;
c0102342:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0102347:	83 c4 10             	add    $0x10,%esp
c010234a:	5b                   	pop    %ebx
c010234b:	5d                   	pop    %ebp
c010234c:	c3                   	ret    

c010234d <itoa_ex>:
 *  @param width 	Field width
 *  @return pointer to buffer
 */

char * itoa_ex(unsigned int value, char * str, int base, int flags, int width)
{
c010234d:	55                   	push   %ebp
c010234e:	89 e5                	mov    %esp,%ebp
c0102350:	83 ec 48             	sub    $0x48,%esp
    char *result = str;
c0102353:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102356:	89 45 e8             	mov    %eax,-0x18(%ebp)
    unsigned int size;
    unsigned int len = 0;
c0102359:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    unsigned int temp = 0;
c0102360:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int negative = 0;
c0102367:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    const char *digits = "0123456789ABCDEF";
c010236e:	c7 45 ec 00 10 11 c0 	movl   $0xc0111000,-0x14(%ebp)

    if (flags & SMALL)
c0102375:	8b 45 14             	mov    0x14(%ebp),%eax
c0102378:	83 e0 20             	and    $0x20,%eax
c010237b:	85 c0                	test   %eax,%eax
c010237d:	74 07                	je     c0102386 <itoa_ex+0x39>
    {
        digits = "0123456789abcdef";
c010237f:	c7 45 ec 11 10 11 c0 	movl   $0xc0111011,-0x14(%ebp)
    {
        value = - value;
        ++negative;
    }

    temp = value;
c0102386:	8b 45 08             	mov    0x8(%ebp),%eax
c0102389:	89 45 f0             	mov    %eax,-0x10(%ebp)
    do
    {
        temp /= base;
c010238c:	8b 55 10             	mov    0x10(%ebp),%edx
c010238f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0102392:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102395:	ba 00 00 00 00       	mov    $0x0,%edx
c010239a:	f7 75 d4             	divl   -0x2c(%ebp)
c010239d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ++len;
c01023a0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    }
    while (temp);
c01023a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01023a8:	75 e2                	jne    c010238c <itoa_ex+0x3f>
    size = len;
c01023aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023ad:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if (!(flags & LEFT) && !(flags & ZEROPAD))
c01023b0:	8b 45 14             	mov    0x14(%ebp),%eax
c01023b3:	83 e0 10             	and    $0x10,%eax
c01023b6:	85 c0                	test   %eax,%eax
c01023b8:	75 27                	jne    c01023e1 <itoa_ex+0x94>
c01023ba:	8b 45 14             	mov    0x14(%ebp),%eax
c01023bd:	83 e0 01             	and    $0x1,%eax
c01023c0:	85 c0                	test   %eax,%eax
c01023c2:	75 1d                	jne    c01023e1 <itoa_ex+0x94>
        while (size < width--)
c01023c4:	eb 0a                	jmp    c01023d0 <itoa_ex+0x83>
            *str++ = ' ';
c01023c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01023c9:	c6 00 20             	movb   $0x20,(%eax)
c01023cc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    }
    while (temp);
    size = len;

    if (!(flags & LEFT) && !(flags & ZEROPAD))
        while (size < width--)
c01023d0:	8b 45 18             	mov    0x18(%ebp),%eax
c01023d3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01023d6:	0f 97 c0             	seta   %al
c01023d9:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c01023dd:	84 c0                	test   %al,%al
c01023df:	75 e5                	jne    c01023c6 <itoa_ex+0x79>
            *str++ = ' ';

    if (negative)
c01023e1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01023e5:	74 0c                	je     c01023f3 <itoa_ex+0xa6>
    {
        *str++ = '-';
c01023e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01023ea:	c6 00 2d             	movb   $0x2d,(%eax)
c01023ed:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c01023f1:	eb 14                	jmp    c0102407 <itoa_ex+0xba>
    }
    else if (flags & PLUS)
c01023f3:	8b 45 14             	mov    0x14(%ebp),%eax
c01023f6:	83 e0 04             	and    $0x4,%eax
c01023f9:	85 c0                	test   %eax,%eax
c01023fb:	74 0a                	je     c0102407 <itoa_ex+0xba>
    {
        *str++ = '+';
c01023fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102400:	c6 00 2b             	movb   $0x2b,(%eax)
c0102403:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    }
    if (flags & SPECIAL)
c0102407:	8b 45 14             	mov    0x14(%ebp),%eax
c010240a:	83 e0 40             	and    $0x40,%eax
c010240d:	85 c0                	test   %eax,%eax
c010240f:	74 18                	je     c0102429 <itoa_ex+0xdc>
    {
        *str++ = '0';
c0102411:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102414:	c6 00 30             	movb   $0x30,(%eax)
c0102417:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        *str++ = 'x';
c010241b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010241e:	c6 00 78             	movb   $0x78,(%eax)
c0102421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        width -= 2;
c0102425:	83 6d 18 02          	subl   $0x2,0x18(%ebp)
    }

    if (!(flags & LEFT) && (flags & ZEROPAD))
c0102429:	8b 45 14             	mov    0x14(%ebp),%eax
c010242c:	83 e0 10             	and    $0x10,%eax
c010242f:	85 c0                	test   %eax,%eax
c0102431:	75 27                	jne    c010245a <itoa_ex+0x10d>
c0102433:	8b 45 14             	mov    0x14(%ebp),%eax
c0102436:	83 e0 01             	and    $0x1,%eax
c0102439:	85 c0                	test   %eax,%eax
c010243b:	74 1d                	je     c010245a <itoa_ex+0x10d>
        while (size < width--)
c010243d:	eb 0a                	jmp    c0102449 <itoa_ex+0xfc>
            *str++ = '0';
c010243f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102442:	c6 00 30             	movb   $0x30,(%eax)
c0102445:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        *str++ = 'x';
        width -= 2;
    }

    if (!(flags & LEFT) && (flags & ZEROPAD))
        while (size < width--)
c0102449:	8b 45 18             	mov    0x18(%ebp),%eax
c010244c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010244f:	0f 97 c0             	seta   %al
c0102452:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c0102456:	84 c0                	test   %al,%al
c0102458:	75 e5                	jne    c010243f <itoa_ex+0xf2>
            *str++ = '0';

    do
    {
        int power = powi(base, --len);
c010245a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010245e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102461:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102465:	8b 45 10             	mov    0x10(%ebp),%eax
c0102468:	89 04 24             	mov    %eax,(%esp)
c010246b:	e8 15 fe ff ff       	call   c0102285 <powi>
c0102470:	89 45 dc             	mov    %eax,-0x24(%ebp)
        int digit = value / power;
c0102473:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0102476:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0102479:	8b 45 08             	mov    0x8(%ebp),%eax
c010247c:	ba 00 00 00 00       	mov    $0x0,%edx
c0102481:	f7 75 d4             	divl   -0x2c(%ebp)
c0102484:	89 45 d8             	mov    %eax,-0x28(%ebp)

        *str++ = digits[digit];
c0102487:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010248a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010248d:	01 d0                	add    %edx,%eax
c010248f:	0f b6 10             	movzbl (%eax),%edx
c0102492:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102495:	88 10                	mov    %dl,(%eax)
c0102497:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

        value -= digit * power;
c010249b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010249e:	0f af 45 dc          	imul   -0x24(%ebp),%eax
c01024a2:	29 45 08             	sub    %eax,0x8(%ebp)
    }
    while (len > 0);
c01024a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01024a9:	75 af                	jne    c010245a <itoa_ex+0x10d>

    while (size < width--)
c01024ab:	eb 0a                	jmp    c01024b7 <itoa_ex+0x16a>
        *str++ = ' ';
c01024ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01024b0:	c6 00 20             	movb   $0x20,(%eax)
c01024b3:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

        value -= digit * power;
    }
    while (len > 0);

    while (size < width--)
c01024b7:	8b 45 18             	mov    0x18(%ebp),%eax
c01024ba:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01024bd:	0f 97 c0             	seta   %al
c01024c0:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c01024c4:	84 c0                	test   %al,%al
c01024c6:	75 e5                	jne    c01024ad <itoa_ex+0x160>
        *str++ = ' ';

    *str++ = '\0';
c01024c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01024cb:	c6 00 00             	movb   $0x0,(%eax)
c01024ce:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

    return result;
c01024d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01024d5:	c9                   	leave  
c01024d6:	c3                   	ret    

c01024d7 <itoa>:
 *  @param base     numerical base (10 = decimal, 16 = hexadecimal)
 *  @return pointer to buffer
 */

inline char * itoa(unsigned int value, char * str, int base)
{
c01024d7:	55                   	push   %ebp
c01024d8:	89 e5                	mov    %esp,%ebp
c01024da:	83 ec 28             	sub    $0x28,%esp
    return itoa_ex(value, str, base, 0, 1);
c01024dd:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01024e4:	00 
c01024e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01024ec:	00 
c01024ed:	8b 45 10             	mov    0x10(%ebp),%eax
c01024f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01024f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01024f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fe:	89 04 24             	mov    %eax,(%esp)
c0102501:	e8 47 fe ff ff       	call   c010234d <itoa_ex>
}
c0102506:	c9                   	leave  
c0102507:	c3                   	ret    

c0102508 <atoi>:
 *  @param  str  input string
 *  @return integer value
 */

int atoi(const char *str)
{
c0102508:	55                   	push   %ebp
c0102509:	89 e5                	mov    %esp,%ebp
c010250b:	83 ec 28             	sub    $0x28,%esp
    int result = 0;
c010250e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int length = 0;
c0102515:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    while (isdigit(*str++))
c010251c:	eb 04                	jmp    c0102522 <atoi+0x1a>
        ++length;
c010251e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
int atoi(const char *str)
{
    int result = 0;
    int length = 0;

    while (isdigit(*str++))
c0102522:	8b 45 08             	mov    0x8(%ebp),%eax
c0102525:	0f b6 00             	movzbl (%eax),%eax
c0102528:	0f be c0             	movsbl %al,%eax
c010252b:	83 e8 30             	sub    $0x30,%eax
c010252e:	83 f8 09             	cmp    $0x9,%eax
c0102531:	0f 96 c0             	setbe  %al
c0102534:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0102538:	84 c0                	test   %al,%al
c010253a:	75 e2                	jne    c010251e <atoi+0x16>
        ++length;

    str -= length + 1;
c010253c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010253f:	f7 d0                	not    %eax
c0102541:	01 45 08             	add    %eax,0x8(%ebp)

    while (length > 0)
c0102544:	eb 2d                	jmp    c0102573 <atoi+0x6b>
        result += powi(10, --length) * (*str++ - '0');
c0102546:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
c010254a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010254d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102551:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0102558:	e8 28 fd ff ff       	call   c0102285 <powi>
c010255d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102560:	0f b6 12             	movzbl (%edx),%edx
c0102563:	0f be d2             	movsbl %dl,%edx
c0102566:	83 ea 30             	sub    $0x30,%edx
c0102569:	0f af c2             	imul   %edx,%eax
c010256c:	01 45 f4             	add    %eax,-0xc(%ebp)
c010256f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    while (isdigit(*str++))
        ++length;

    str -= length + 1;

    while (length > 0)
c0102573:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102577:	7f cd                	jg     c0102546 <atoi+0x3e>
        result += powi(10, --length) * (*str++ - '0');

    return result;
c0102579:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010257c:	c9                   	leave  
c010257d:	c3                   	ret    

c010257e <list_create>:
/**
 *  @brief Creates a linked list.
 *  @return new list
 */
list_t *list_create(void)
{
c010257e:	55                   	push   %ebp
c010257f:	89 e5                	mov    %esp,%ebp
c0102581:	83 ec 28             	sub    $0x28,%esp
    list_t *list = (list_t *) malloc(sizeof(list_t));
c0102584:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010258b:	e8 0c b1 00 00       	call   c010d69c <malloc>
c0102590:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct list_node *dummy = (struct list_node *) malloc(sizeof(struct list_node));
c0102593:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010259a:	e8 fd b0 00 00       	call   c010d69c <malloc>
c010259f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list->head = dummy;
c01025a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01025a8:	89 50 04             	mov    %edx,0x4(%eax)
    dummy->next = dummy;
c01025ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01025b1:	89 10                	mov    %edx,(%eax)
    dummy->prev = dummy;
c01025b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01025b9:	89 50 04             	mov    %edx,0x4(%eax)
    dummy->element = (void *) 0;
c01025bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025bf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    unlock(&list->lock);
c01025c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025c9:	89 04 24             	mov    %eax,(%esp)
c01025cc:	e8 a0 d9 00 00       	call   c010ff71 <unlock>
    return list;
c01025d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01025d4:	c9                   	leave  
c01025d5:	c3                   	ret    

c01025d6 <list_destroy>:
/**
 *  @brief Destroys a list.
 *  @param list the list to be destroied
 */
void list_destroy(list_t *list)
{
c01025d6:	55                   	push   %ebp
c01025d7:	89 e5                	mov    %esp,%ebp
c01025d9:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = list->head->next;
c01025dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01025df:	8b 40 04             	mov    0x4(%eax),%eax
c01025e2:	8b 00                	mov    (%eax),%eax
c01025e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct list_node *head = list->head;
c01025e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ea:	8b 40 04             	mov    0x4(%eax),%eax
c01025ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (node != head)
c01025f0:	eb 13                	jmp    c0102605 <list_destroy+0x2f>
    {
        node = node->next;
c01025f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025f5:	8b 00                	mov    (%eax),%eax
c01025f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        free(node);
c01025fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025fd:	89 04 24             	mov    %eax,(%esp)
c0102600:	e8 7e b1 00 00       	call   c010d783 <free>
 */
void list_destroy(list_t *list)
{
    struct list_node *node = list->head->next;
    struct list_node *head = list->head;
    while (node != head)
c0102605:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102608:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010260b:	75 e5                	jne    c01025f2 <list_destroy+0x1c>
    {
        node = node->next;
        free(node);
    }

    free(list);
c010260d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102610:	89 04 24             	mov    %eax,(%esp)
c0102613:	e8 6b b1 00 00       	call   c010d783 <free>
    return;
c0102618:	90                   	nop
}
c0102619:	c9                   	leave  
c010261a:	c3                   	ret    

c010261b <list_splice>:
 *  @param start Start of the element chain
 *  @param end end of the element chain
 *  @param target Target place
 */
void list_splice(struct list_node *start, struct list_node *end, struct list_node *target)
{
c010261b:	55                   	push   %ebp
c010261c:	89 e5                	mov    %esp,%ebp
    start->prev->next = end->next;
c010261e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102621:	8b 40 04             	mov    0x4(%eax),%eax
c0102624:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102627:	8b 12                	mov    (%edx),%edx
c0102629:	89 10                	mov    %edx,(%eax)
    end->next->prev = start->prev;
c010262b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010262e:	8b 00                	mov    (%eax),%eax
c0102630:	8b 55 08             	mov    0x8(%ebp),%edx
c0102633:	8b 52 04             	mov    0x4(%edx),%edx
c0102636:	89 50 04             	mov    %edx,0x4(%eax)
    start->prev = target;
c0102639:	8b 45 08             	mov    0x8(%ebp),%eax
c010263c:	8b 55 10             	mov    0x10(%ebp),%edx
c010263f:	89 50 04             	mov    %edx,0x4(%eax)
    end->next = target->next;
c0102642:	8b 45 10             	mov    0x10(%ebp),%eax
c0102645:	8b 10                	mov    (%eax),%edx
c0102647:	8b 45 0c             	mov    0xc(%ebp),%eax
c010264a:	89 10                	mov    %edx,(%eax)
    target->next->prev = end;
c010264c:	8b 45 10             	mov    0x10(%ebp),%eax
c010264f:	8b 00                	mov    (%eax),%eax
c0102651:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102654:	89 50 04             	mov    %edx,0x4(%eax)
    target->next = start;
c0102657:	8b 45 10             	mov    0x10(%ebp),%eax
c010265a:	8b 55 08             	mov    0x8(%ebp),%edx
c010265d:	89 10                	mov    %edx,(%eax)
    return;
c010265f:	90                   	nop
}
c0102660:	5d                   	pop    %ebp
c0102661:	c3                   	ret    

c0102662 <list_push_back>:


list_t *list_push_back(list_t *list, void *element)
{
c0102662:	55                   	push   %ebp
c0102663:	89 e5                	mov    %esp,%ebp
c0102665:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c0102668:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010266f:	e8 28 b0 00 00       	call   c010d69c <malloc>
c0102674:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c0102677:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010267a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010267d:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c0102680:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102683:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102686:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c0102688:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010268b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010268e:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, list->head->prev);
c0102691:	8b 45 08             	mov    0x8(%ebp),%eax
c0102694:	8b 40 04             	mov    0x4(%eax),%eax
c0102697:	8b 40 04             	mov    0x4(%eax),%eax
c010269a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010269e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026a8:	89 04 24             	mov    %eax,(%esp)
c01026ab:	e8 6b ff ff ff       	call   c010261b <list_splice>
    return list;
c01026b0:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01026b3:	c9                   	leave  
c01026b4:	c3                   	ret    

c01026b5 <list_push_front>:

list_t *list_push_front(list_t *list, void *element)
{
c01026b5:	55                   	push   %ebp
c01026b6:	89 e5                	mov    %esp,%ebp
c01026b8:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c01026bb:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c01026c2:	e8 d5 af 00 00       	call   c010d69c <malloc>
c01026c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c01026ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026cd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01026d0:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c01026d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01026d9:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c01026db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026de:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01026e1:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, list->head);
c01026e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e7:	8b 40 04             	mov    0x4(%eax),%eax
c01026ea:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026f8:	89 04 24             	mov    %eax,(%esp)
c01026fb:	e8 1b ff ff ff       	call   c010261b <list_splice>
    return list;
c0102700:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102703:	c9                   	leave  
c0102704:	c3                   	ret    

c0102705 <list_remove_node>:

void *list_remove_node(struct list_node *node)
{
c0102705:	55                   	push   %ebp
c0102706:	89 e5                	mov    %esp,%ebp
c0102708:	83 ec 28             	sub    $0x28,%esp
    void *element = node->element;
c010270b:	8b 45 08             	mov    0x8(%ebp),%eax
c010270e:	8b 40 08             	mov    0x8(%eax),%eax
c0102711:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->prev->next = node->next;
c0102714:	8b 45 08             	mov    0x8(%ebp),%eax
c0102717:	8b 40 04             	mov    0x4(%eax),%eax
c010271a:	8b 55 08             	mov    0x8(%ebp),%edx
c010271d:	8b 12                	mov    (%edx),%edx
c010271f:	89 10                	mov    %edx,(%eax)
    node->next->prev = node->prev;
c0102721:	8b 45 08             	mov    0x8(%ebp),%eax
c0102724:	8b 00                	mov    (%eax),%eax
c0102726:	8b 55 08             	mov    0x8(%ebp),%edx
c0102729:	8b 52 04             	mov    0x4(%edx),%edx
c010272c:	89 50 04             	mov    %edx,0x4(%eax)
    free(node);
c010272f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102732:	89 04 24             	mov    %eax,(%esp)
c0102735:	e8 49 b0 00 00       	call   c010d783 <free>
    return element;
c010273a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010273d:	c9                   	leave  
c010273e:	c3                   	ret    

c010273f <list_pop_back>:

void *list_pop_back(list_t *list)
{
c010273f:	55                   	push   %ebp
c0102740:	89 e5                	mov    %esp,%ebp
c0102742:	83 ec 28             	sub    $0x28,%esp
    struct list_node *last = list->head->prev;
c0102745:	8b 45 08             	mov    0x8(%ebp),%eax
c0102748:	8b 40 04             	mov    0x4(%eax),%eax
c010274b:	8b 40 04             	mov    0x4(%eax),%eax
c010274e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *element = last->element;
c0102751:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102754:	8b 40 08             	mov    0x8(%eax),%eax
c0102757:	89 45 f0             	mov    %eax,-0x10(%ebp)
    last->prev->next = last->next;
c010275a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010275d:	8b 40 04             	mov    0x4(%eax),%eax
c0102760:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102763:	8b 12                	mov    (%edx),%edx
c0102765:	89 10                	mov    %edx,(%eax)
    last->next->prev = last->prev;
c0102767:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010276a:	8b 00                	mov    (%eax),%eax
c010276c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010276f:	8b 52 04             	mov    0x4(%edx),%edx
c0102772:	89 50 04             	mov    %edx,0x4(%eax)
    free(last);
c0102775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102778:	89 04 24             	mov    %eax,(%esp)
c010277b:	e8 03 b0 00 00       	call   c010d783 <free>
    return element;
c0102780:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0102783:	c9                   	leave  
c0102784:	c3                   	ret    

c0102785 <list_pop_front>:

void *list_pop_front(list_t *list)
{
c0102785:	55                   	push   %ebp
c0102786:	89 e5                	mov    %esp,%ebp
c0102788:	83 ec 28             	sub    $0x28,%esp
    struct list_node *first = list->head->next;
c010278b:	8b 45 08             	mov    0x8(%ebp),%eax
c010278e:	8b 40 04             	mov    0x4(%eax),%eax
c0102791:	8b 00                	mov    (%eax),%eax
c0102793:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *element = first->element;
c0102796:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102799:	8b 40 08             	mov    0x8(%eax),%eax
c010279c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    first->prev->next = first->next;
c010279f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027a2:	8b 40 04             	mov    0x4(%eax),%eax
c01027a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01027a8:	8b 12                	mov    (%edx),%edx
c01027aa:	89 10                	mov    %edx,(%eax)
    first->next->prev = first->prev;
c01027ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027af:	8b 00                	mov    (%eax),%eax
c01027b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01027b4:	8b 52 04             	mov    0x4(%edx),%edx
c01027b7:	89 50 04             	mov    %edx,0x4(%eax)
    free(first);
c01027ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027bd:	89 04 24             	mov    %eax,(%esp)
c01027c0:	e8 be af 00 00       	call   c010d783 <free>
    return element;
c01027c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01027c8:	c9                   	leave  
c01027c9:	c3                   	ret    

c01027ca <list_length>:


int list_length(list_t *list)
{
c01027ca:	55                   	push   %ebp
c01027cb:	89 e5                	mov    %esp,%ebp
c01027cd:	83 ec 10             	sub    $0x10,%esp
    struct list_node *node = list->head->next;
c01027d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01027d3:	8b 40 04             	mov    0x4(%eax),%eax
c01027d6:	8b 00                	mov    (%eax),%eax
c01027d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct list_node *head = list->head;
c01027db:	8b 45 08             	mov    0x8(%ebp),%eax
c01027de:	8b 40 04             	mov    0x4(%eax),%eax
c01027e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t size = 0;
c01027e4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (node != head)
c01027eb:	eb 0c                	jmp    c01027f9 <list_length+0x2f>
    {
        node = node->next;
c01027ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01027f0:	8b 00                	mov    (%eax),%eax
c01027f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
        size++;
c01027f5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
int list_length(list_t *list)
{
    struct list_node *node = list->head->next;
    struct list_node *head = list->head;
    size_t size = 0;
    while (node != head)
c01027f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01027fc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01027ff:	75 ec                	jne    c01027ed <list_length+0x23>
    {
        node = node->next;
        size++;
    }
    return size;
c0102801:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0102804:	c9                   	leave  
c0102805:	c3                   	ret    

c0102806 <list_is_empty>:

bool list_is_empty(list_t *list)
{
c0102806:	55                   	push   %ebp
c0102807:	89 e5                	mov    %esp,%ebp
    return (list->head == list->head->next);
c0102809:	8b 45 08             	mov    0x8(%ebp),%eax
c010280c:	8b 50 04             	mov    0x4(%eax),%edx
c010280f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102812:	8b 40 04             	mov    0x4(%eax),%eax
c0102815:	8b 00                	mov    (%eax),%eax
c0102817:	39 c2                	cmp    %eax,%edx
c0102819:	0f 94 c0             	sete   %al
c010281c:	0f b6 c0             	movzbl %al,%eax
}
c010281f:	5d                   	pop    %ebp
c0102820:	c3                   	ret    

c0102821 <list_lock>:

void list_lock(list_t *list)
{
c0102821:	55                   	push   %ebp
c0102822:	89 e5                	mov    %esp,%ebp
c0102824:	83 ec 18             	sub    $0x18,%esp
    lock(&list->lock);
c0102827:	8b 45 08             	mov    0x8(%ebp),%eax
c010282a:	89 04 24             	mov    %eax,(%esp)
c010282d:	e8 27 d7 00 00       	call   c010ff59 <lock>
}
c0102832:	c9                   	leave  
c0102833:	c3                   	ret    

c0102834 <list_unlock>:

void list_unlock(list_t *list)
{
c0102834:	55                   	push   %ebp
c0102835:	89 e5                	mov    %esp,%ebp
c0102837:	83 ec 18             	sub    $0x18,%esp
    unlock(&list->lock);
c010283a:	8b 45 08             	mov    0x8(%ebp),%eax
c010283d:	89 04 24             	mov    %eax,(%esp)
c0102840:	e8 2c d7 00 00       	call   c010ff71 <unlock>
}
c0102845:	c9                   	leave  
c0102846:	c3                   	ret    

c0102847 <iterator_create>:

// using interators


iterator_t iterator_create(list_t *list)
{
c0102847:	55                   	push   %ebp
c0102848:	89 e5                	mov    %esp,%ebp
c010284a:	83 ec 10             	sub    $0x10,%esp
    iterator_t new_iterator;
    new_iterator.list = list;
c010284d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102850:	89 45 f8             	mov    %eax,-0x8(%ebp)
    new_iterator.current = list->head->next;
c0102853:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102856:	8b 40 04             	mov    0x4(%eax),%eax
c0102859:	8b 00                	mov    (%eax),%eax
c010285b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return new_iterator;
c010285e:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0102861:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102864:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102867:	89 01                	mov    %eax,(%ecx)
c0102869:	89 51 04             	mov    %edx,0x4(%ecx)
}
c010286c:	8b 45 08             	mov    0x8(%ebp),%eax
c010286f:	c9                   	leave  
c0102870:	c2 04 00             	ret    $0x4

c0102873 <list_insert_after>:



void list_insert_after(iterator_t *it, void *element)
{
c0102873:	55                   	push   %ebp
c0102874:	89 e5                	mov    %esp,%ebp
c0102876:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c0102879:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0102880:	e8 17 ae 00 00       	call   c010d69c <malloc>
c0102885:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c0102888:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010288b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010288e:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c0102891:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102894:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102897:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c0102899:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010289c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010289f:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, it->current);
c01028a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01028a5:	8b 40 04             	mov    0x4(%eax),%eax
c01028a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01028ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028af:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028b6:	89 04 24             	mov    %eax,(%esp)
c01028b9:	e8 5d fd ff ff       	call   c010261b <list_splice>
}
c01028be:	c9                   	leave  
c01028bf:	c3                   	ret    

c01028c0 <list_insert_before>:


void list_insert_before(iterator_t *it, void *element)
{
c01028c0:	55                   	push   %ebp
c01028c1:	89 e5                	mov    %esp,%ebp
c01028c3:	83 ec 28             	sub    $0x28,%esp
    struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c01028c6:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c01028cd:	e8 ca ad 00 00       	call   c010d69c <malloc>
c01028d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c01028d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028d8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01028db:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c01028de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01028e4:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c01028e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01028ec:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, it->current->prev);
c01028ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01028f2:	8b 40 04             	mov    0x4(%eax),%eax
c01028f5:	8b 40 04             	mov    0x4(%eax),%eax
c01028f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01028fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102903:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102906:	89 04 24             	mov    %eax,(%esp)
c0102909:	e8 0d fd ff ff       	call   c010261b <list_splice>
}
c010290e:	c9                   	leave  
c010290f:	c3                   	ret    

c0102910 <list_get_current>:


void *list_get_current(iterator_t *it)
{
c0102910:	55                   	push   %ebp
c0102911:	89 e5                	mov    %esp,%ebp
    if(it)
c0102913:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102917:	74 15                	je     c010292e <list_get_current+0x1e>
        if(it->current)
c0102919:	8b 45 08             	mov    0x8(%ebp),%eax
c010291c:	8b 40 04             	mov    0x4(%eax),%eax
c010291f:	85 c0                	test   %eax,%eax
c0102921:	74 0b                	je     c010292e <list_get_current+0x1e>
            return it->current->element;
c0102923:	8b 45 08             	mov    0x8(%ebp),%eax
c0102926:	8b 40 04             	mov    0x4(%eax),%eax
c0102929:	8b 40 08             	mov    0x8(%eax),%eax
c010292c:	eb 05                	jmp    c0102933 <list_get_current+0x23>

    return NULL;
c010292e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102933:	5d                   	pop    %ebp
c0102934:	c3                   	ret    

c0102935 <list_next>:

void list_next(iterator_t *it)
{
c0102935:	55                   	push   %ebp
c0102936:	89 e5                	mov    %esp,%ebp
    it->current = it->current->next;
c0102938:	8b 45 08             	mov    0x8(%ebp),%eax
c010293b:	8b 40 04             	mov    0x4(%eax),%eax
c010293e:	8b 10                	mov    (%eax),%edx
c0102940:	8b 45 08             	mov    0x8(%ebp),%eax
c0102943:	89 50 04             	mov    %edx,0x4(%eax)
}
c0102946:	5d                   	pop    %ebp
c0102947:	c3                   	ret    

c0102948 <list_previous>:

void list_previous(iterator_t *it)
{
c0102948:	55                   	push   %ebp
c0102949:	89 e5                	mov    %esp,%ebp
    it->current = it->current->prev;
c010294b:	8b 45 08             	mov    0x8(%ebp),%eax
c010294e:	8b 40 04             	mov    0x4(%eax),%eax
c0102951:	8b 50 04             	mov    0x4(%eax),%edx
c0102954:	8b 45 08             	mov    0x8(%ebp),%eax
c0102957:	89 50 04             	mov    %edx,0x4(%eax)
}
c010295a:	5d                   	pop    %ebp
c010295b:	c3                   	ret    

c010295c <list_is_last>:

bool list_is_last(iterator_t *it)
{
c010295c:	55                   	push   %ebp
c010295d:	89 e5                	mov    %esp,%ebp
    return (it->current == it->list->head);
c010295f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102962:	8b 50 04             	mov    0x4(%eax),%edx
c0102965:	8b 45 08             	mov    0x8(%ebp),%eax
c0102968:	8b 00                	mov    (%eax),%eax
c010296a:	8b 40 04             	mov    0x4(%eax),%eax
c010296d:	39 c2                	cmp    %eax,%edx
c010296f:	0f 94 c0             	sete   %al
c0102972:	0f b6 c0             	movzbl %al,%eax
}
c0102975:	5d                   	pop    %ebp
c0102976:	c3                   	ret    

c0102977 <list_set_first>:

void list_set_first(iterator_t *it)
{
c0102977:	55                   	push   %ebp
c0102978:	89 e5                	mov    %esp,%ebp
    it->current = it->list->head->next;
c010297a:	8b 45 08             	mov    0x8(%ebp),%eax
c010297d:	8b 00                	mov    (%eax),%eax
c010297f:	8b 40 04             	mov    0x4(%eax),%eax
c0102982:	8b 10                	mov    (%eax),%edx
c0102984:	8b 45 08             	mov    0x8(%ebp),%eax
c0102987:	89 50 04             	mov    %edx,0x4(%eax)
}
c010298a:	5d                   	pop    %ebp
c010298b:	c3                   	ret    

c010298c <list_set_last>:

void list_set_last(iterator_t *it)
{
c010298c:	55                   	push   %ebp
c010298d:	89 e5                	mov    %esp,%ebp
    it->current = it->list->head->prev;
c010298f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102992:	8b 00                	mov    (%eax),%eax
c0102994:	8b 40 04             	mov    0x4(%eax),%eax
c0102997:	8b 50 04             	mov    0x4(%eax),%edx
c010299a:	8b 45 08             	mov    0x8(%ebp),%eax
c010299d:	89 50 04             	mov    %edx,0x4(%eax)
}
c01029a0:	5d                   	pop    %ebp
c01029a1:	c3                   	ret    

c01029a2 <list_remove>:

void *list_remove(iterator_t *it)
{
c01029a2:	55                   	push   %ebp
c01029a3:	89 e5                	mov    %esp,%ebp
c01029a5:	83 ec 28             	sub    $0x28,%esp
    void *element = list_get_current(it);
c01029a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01029ab:	89 04 24             	mov    %eax,(%esp)
c01029ae:	e8 5d ff ff ff       	call   c0102910 <list_get_current>
c01029b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct list_node *node = it->current;
c01029b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01029b9:	8b 40 04             	mov    0x4(%eax),%eax
c01029bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    node->prev->next = node->next;
c01029bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01029c2:	8b 40 04             	mov    0x4(%eax),%eax
c01029c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01029c8:	8b 12                	mov    (%edx),%edx
c01029ca:	89 10                	mov    %edx,(%eax)
    node->next->prev = node->prev;
c01029cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01029cf:	8b 00                	mov    (%eax),%eax
c01029d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01029d4:	8b 52 04             	mov    0x4(%edx),%edx
c01029d7:	89 50 04             	mov    %edx,0x4(%eax)
    it->current = node->next;
c01029da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01029dd:	8b 10                	mov    (%eax),%edx
c01029df:	8b 45 08             	mov    0x8(%ebp),%eax
c01029e2:	89 50 04             	mov    %edx,0x4(%eax)
    free(node);
c01029e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01029e8:	89 04 24             	mov    %eax,(%esp)
c01029eb:	e8 93 ad 00 00       	call   c010d783 <free>
    return element;
c01029f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01029f3:	c9                   	leave  
c01029f4:	c3                   	ret    

c01029f5 <strnlen>:
 * @param s the string
 * @param maxlen the maximal lengh
 * @return string lengh<= maxlen
 */
size_t strnlen(const char *s, size_t maxlen)
{
c01029f5:	55                   	push   %ebp
c01029f6:	89 e5                	mov    %esp,%ebp
c01029f8:	83 ec 10             	sub    $0x10,%esp
    const char *str = s;
c01029fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01029fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*str && maxlen)
c0102a01:	eb 08                	jmp    c0102a0b <strnlen+0x16>
    {
        ++str;
c0102a03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        maxlen--;
c0102a07:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
 * @return string lengh<= maxlen
 */
size_t strnlen(const char *s, size_t maxlen)
{
    const char *str = s;
    while (*str && maxlen)
c0102a0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a0e:	0f b6 00             	movzbl (%eax),%eax
c0102a11:	84 c0                	test   %al,%al
c0102a13:	74 06                	je     c0102a1b <strnlen+0x26>
c0102a15:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0102a19:	75 e8                	jne    c0102a03 <strnlen+0xe>
    {
        ++str;
        maxlen--;
    }

    return str - s;
c0102a1b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102a1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a21:	89 d1                	mov    %edx,%ecx
c0102a23:	29 c1                	sub    %eax,%ecx
c0102a25:	89 c8                	mov    %ecx,%eax
}
c0102a27:	c9                   	leave  
c0102a28:	c3                   	ret    

c0102a29 <strlen>:
 * @breif Returns the string lengh.
 * @param string pointer
 * @return string lengh
 */
size_t strlen(const char *string)
{
c0102a29:	55                   	push   %ebp
c0102a2a:	89 e5                	mov    %esp,%ebp
c0102a2c:	83 ec 10             	sub    $0x10,%esp
    size_t i = 0;
c0102a2f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (string[i])
c0102a36:	eb 04                	jmp    c0102a3c <strlen+0x13>
    {
        i++;
c0102a38:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * @return string lengh
 */
size_t strlen(const char *string)
{
    size_t i = 0;
    while (string[i])
c0102a3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a3f:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a42:	01 d0                	add    %edx,%eax
c0102a44:	0f b6 00             	movzbl (%eax),%eax
c0102a47:	84 c0                	test   %al,%al
c0102a49:	75 ed                	jne    c0102a38 <strlen+0xf>
    {
        i++;
    }

    return i;
c0102a4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0102a4e:	c9                   	leave  
c0102a4f:	c3                   	ret    

c0102a50 <strcpy>:
 * @param dest destination pointer
 * @param src source string
 * @return destination string pointer
 */
char *strcpy(char *dest, const char *src)
{
c0102a50:	55                   	push   %ebp
c0102a51:	89 e5                	mov    %esp,%ebp
c0102a53:	83 ec 10             	sub    $0x10,%esp
    size_t i = 0;
c0102a56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (src[i])
c0102a5d:	eb 19                	jmp    c0102a78 <strcpy+0x28>
    {
        dest[i] = src[i];
c0102a5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a62:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a65:	01 c2                	add    %eax,%edx
c0102a67:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a6a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102a6d:	01 c8                	add    %ecx,%eax
c0102a6f:	0f b6 00             	movzbl (%eax),%eax
c0102a72:	88 02                	mov    %al,(%edx)
        i++;
c0102a74:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * @return destination string pointer
 */
char *strcpy(char *dest, const char *src)
{
    size_t i = 0;
    while (src[i])
c0102a78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a7b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102a7e:	01 d0                	add    %edx,%eax
c0102a80:	0f b6 00             	movzbl (%eax),%eax
c0102a83:	84 c0                	test   %al,%al
c0102a85:	75 d8                	jne    c0102a5f <strcpy+0xf>
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = src[i];
c0102a87:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a8a:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a8d:	01 c2                	add    %eax,%edx
c0102a8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102a92:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102a95:	01 c8                	add    %ecx,%eax
c0102a97:	0f b6 00             	movzbl (%eax),%eax
c0102a9a:	88 02                	mov    %al,(%edx)
    return dest;
c0102a9c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102a9f:	c9                   	leave  
c0102aa0:	c3                   	ret    

c0102aa1 <strncpy>:
 * @param source string
 * @param maximal number of chars
 * @return destination string
 */
char *strncpy(char *dest, const char *src,size_t n)
{
c0102aa1:	55                   	push   %ebp
c0102aa2:	89 e5                	mov    %esp,%ebp
c0102aa4:	83 ec 10             	sub    $0x10,%esp
    size_t i;
    bool eos = false;
c0102aa7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    for (i = 0; i < n; i++)
c0102aae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102ab5:	eb 42                	jmp    c0102af9 <strncpy+0x58>
    {
        if (!eos)
c0102ab7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0102abb:	75 2d                	jne    c0102aea <strncpy+0x49>
        {
            if (src[i] == '\0')
c0102abd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ac0:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102ac3:	01 d0                	add    %edx,%eax
c0102ac5:	0f b6 00             	movzbl (%eax),%eax
c0102ac8:	84 c0                	test   %al,%al
c0102aca:	75 07                	jne    c0102ad3 <strncpy+0x32>
            {
                eos = true;
c0102acc:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
            }
            dest[i] = src[i];
c0102ad3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ad6:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ad9:	01 c2                	add    %eax,%edx
c0102adb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ade:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102ae1:	01 c8                	add    %ecx,%eax
c0102ae3:	0f b6 00             	movzbl (%eax),%eax
c0102ae6:	88 02                	mov    %al,(%edx)
c0102ae8:	eb 0b                	jmp    c0102af5 <strncpy+0x54>
        }
        else
        {
            dest[i] = '\0';
c0102aea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102aed:	8b 55 08             	mov    0x8(%ebp),%edx
c0102af0:	01 d0                	add    %edx,%eax
c0102af2:	c6 00 00             	movb   $0x0,(%eax)
 */
char *strncpy(char *dest, const char *src,size_t n)
{
    size_t i;
    bool eos = false;
    for (i = 0; i < n; i++)
c0102af5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102af9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102afc:	3b 45 10             	cmp    0x10(%ebp),%eax
c0102aff:	72 b6                	jb     c0102ab7 <strncpy+0x16>
        {
            dest[i] = '\0';
        }

    }
    return dest;
c0102b01:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102b04:	c9                   	leave  
c0102b05:	c3                   	ret    

c0102b06 <strcat>:
 * @param dest destination string
 * @param src source string
 * @return destination string
 */
char *strcat(char *dest, const char *src)
{
c0102b06:	55                   	push   %ebp
c0102b07:	89 e5                	mov    %esp,%ebp
c0102b09:	83 ec 18             	sub    $0x18,%esp
    size_t n = strlen(dest);
c0102b0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b0f:	89 04 24             	mov    %eax,(%esp)
c0102b12:	e8 12 ff ff ff       	call   c0102a29 <strlen>
c0102b17:	89 45 fc             	mov    %eax,-0x4(%ebp)
    strcpy((char*)(dest+n),src);
c0102b1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b1d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b20:	01 c2                	add    %eax,%edx
c0102b22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102b25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b29:	89 14 24             	mov    %edx,(%esp)
c0102b2c:	e8 1f ff ff ff       	call   c0102a50 <strcpy>
    return dest;
c0102b31:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102b34:	c9                   	leave  
c0102b35:	c3                   	ret    

c0102b36 <strncat>:
 * @param src source string
 * @param n maximal number of chars
 * @return destination string
 */
char *strncat(char *dest, const char *src, size_t n)
{
c0102b36:	55                   	push   %ebp
c0102b37:	89 e5                	mov    %esp,%ebp
c0102b39:	83 ec 1c             	sub    $0x1c,%esp
    size_t i = strlen(dest);
c0102b3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b3f:	89 04 24             	mov    %eax,(%esp)
c0102b42:	e8 e2 fe ff ff       	call   c0102a29 <strlen>
c0102b47:	89 45 fc             	mov    %eax,-0x4(%ebp)
    strncpy((char*)(dest+i),src,n);
c0102b4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b4d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b50:	01 c2                	add    %eax,%edx
c0102b52:	8b 45 10             	mov    0x10(%ebp),%eax
c0102b55:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102b59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102b5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b60:	89 14 24             	mov    %edx,(%esp)
c0102b63:	e8 39 ff ff ff       	call   c0102aa1 <strncpy>
    return dest;
c0102b68:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102b6b:	c9                   	leave  
c0102b6c:	c3                   	ret    

c0102b6d <strcmp>:
 * @return = 0 strings are similar
 *  > 0 value of the first different char of string0 is bigger
 *  < 0 value of the first different char of string1 is bigger
 */
int strcmp(const char *str0, const char *str1)
{
c0102b6d:	55                   	push   %ebp
c0102b6e:	89 e5                	mov    %esp,%ebp
c0102b70:	83 ec 10             	sub    $0x10,%esp
    size_t i;
    for (i = 0; str0[i] == str1[i] && str0[i] != 0; i++);
c0102b73:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102b7a:	eb 04                	jmp    c0102b80 <strcmp+0x13>
c0102b7c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102b80:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b83:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b86:	01 d0                	add    %edx,%eax
c0102b88:	0f b6 10             	movzbl (%eax),%edx
c0102b8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b8e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102b91:	01 c8                	add    %ecx,%eax
c0102b93:	0f b6 00             	movzbl (%eax),%eax
c0102b96:	38 c2                	cmp    %al,%dl
c0102b98:	75 0f                	jne    c0102ba9 <strcmp+0x3c>
c0102b9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b9d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ba0:	01 d0                	add    %edx,%eax
c0102ba2:	0f b6 00             	movzbl (%eax),%eax
c0102ba5:	84 c0                	test   %al,%al
c0102ba7:	75 d3                	jne    c0102b7c <strcmp+0xf>
    int ret = str0[i] - str1[i];
c0102ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bac:	8b 55 08             	mov    0x8(%ebp),%edx
c0102baf:	01 d0                	add    %edx,%eax
c0102bb1:	0f b6 00             	movzbl (%eax),%eax
c0102bb4:	0f be d0             	movsbl %al,%edx
c0102bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102bbd:	01 c8                	add    %ecx,%eax
c0102bbf:	0f b6 00             	movzbl (%eax),%eax
c0102bc2:	0f be c0             	movsbl %al,%eax
c0102bc5:	89 d1                	mov    %edx,%ecx
c0102bc7:	29 c1                	sub    %eax,%ecx
c0102bc9:	89 c8                	mov    %ecx,%eax
c0102bcb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return ret;
c0102bce:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0102bd1:	c9                   	leave  
c0102bd2:	c3                   	ret    

c0102bd3 <strncmp>:
 * @return = 0 strings are similar
 *  > 0 value of the first different char of string0 is bigger
 *  < 0 value of the first different char of string1 is bigger
 */
int strncmp(const char *str0, const char *str1, size_t n)
{
c0102bd3:	55                   	push   %ebp
c0102bd4:	89 e5                	mov    %esp,%ebp
c0102bd6:	83 ec 10             	sub    $0x10,%esp
    uint32_t i;
    int ret = 0;
c0102bd9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    for (i = 0; str0[i] == str1[i] && str0[i] != 0 && i < n-1; i++);
c0102be0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102be7:	eb 04                	jmp    c0102bed <strncmp+0x1a>
c0102be9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102bed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bf0:	8b 55 08             	mov    0x8(%ebp),%edx
c0102bf3:	01 d0                	add    %edx,%eax
c0102bf5:	0f b6 10             	movzbl (%eax),%edx
c0102bf8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bfb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102bfe:	01 c8                	add    %ecx,%eax
c0102c00:	0f b6 00             	movzbl (%eax),%eax
c0102c03:	38 c2                	cmp    %al,%dl
c0102c05:	75 1a                	jne    c0102c21 <strncmp+0x4e>
c0102c07:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c0a:	8b 55 08             	mov    0x8(%ebp),%edx
c0102c0d:	01 d0                	add    %edx,%eax
c0102c0f:	0f b6 00             	movzbl (%eax),%eax
c0102c12:	84 c0                	test   %al,%al
c0102c14:	74 0b                	je     c0102c21 <strncmp+0x4e>
c0102c16:	8b 45 10             	mov    0x10(%ebp),%eax
c0102c19:	83 e8 01             	sub    $0x1,%eax
c0102c1c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0102c1f:	77 c8                	ja     c0102be9 <strncmp+0x16>
    ret = str0[i] - str1[i];
c0102c21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c24:	8b 55 08             	mov    0x8(%ebp),%edx
c0102c27:	01 d0                	add    %edx,%eax
c0102c29:	0f b6 00             	movzbl (%eax),%eax
c0102c2c:	0f be d0             	movsbl %al,%edx
c0102c2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102c32:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0102c35:	01 c8                	add    %ecx,%eax
c0102c37:	0f b6 00             	movzbl (%eax),%eax
c0102c3a:	0f be c0             	movsbl %al,%eax
c0102c3d:	89 d1                	mov    %edx,%ecx
c0102c3f:	29 c1                	sub    %eax,%ecx
c0102c41:	89 c8                	mov    %ecx,%eax
c0102c43:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return ret;
c0102c46:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0102c49:	c9                   	leave  
c0102c4a:	c3                   	ret    

c0102c4b <strchr>:
 * @param c searched character
 * @return pointer to the first similar char
 * NULL=no char in str is similar to c
 */
char *strchr(const char *str, int c)
{
c0102c4b:	55                   	push   %ebp
c0102c4c:	89 e5                	mov    %esp,%ebp
c0102c4e:	83 ec 10             	sub    $0x10,%esp
    int i = 0;
c0102c51:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (str[i] != (char)c && str[i] != 0)
c0102c58:	eb 04                	jmp    c0102c5e <strchr+0x13>
    {
        i++;
c0102c5a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * NULL=no char in str is similar to c
 */
char *strchr(const char *str, int c)
{
    int i = 0;
    while (str[i] != (char)c && str[i] != 0)
c0102c5e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c64:	01 d0                	add    %edx,%eax
c0102c66:	0f b6 10             	movzbl (%eax),%edx
c0102c69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102c6c:	38 c2                	cmp    %al,%dl
c0102c6e:	74 0f                	je     c0102c7f <strchr+0x34>
c0102c70:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102c73:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c76:	01 d0                	add    %edx,%eax
c0102c78:	0f b6 00             	movzbl (%eax),%eax
c0102c7b:	84 c0                	test   %al,%al
c0102c7d:	75 db                	jne    c0102c5a <strchr+0xf>
    {
        i++;
    }
    if (str[i])
c0102c7f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102c82:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c85:	01 d0                	add    %edx,%eax
c0102c87:	0f b6 00             	movzbl (%eax),%eax
c0102c8a:	84 c0                	test   %al,%al
c0102c8c:	74 0a                	je     c0102c98 <strchr+0x4d>
    {
        return (char*)(str+i);
c0102c8e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c94:	01 d0                	add    %edx,%eax
c0102c96:	eb 05                	jmp    c0102c9d <strchr+0x52>
    }
    return NULL;
c0102c98:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102c9d:	c9                   	leave  
c0102c9e:	c3                   	ret    

c0102c9f <strrchr>:
 * @param c searched character
 * @return pointer to the last similar char
 * NULL=no char in str is similar to c
 */
char *strrchr(const char *str, int c)
{
c0102c9f:	55                   	push   %ebp
c0102ca0:	89 e5                	mov    %esp,%ebp
c0102ca2:	83 ec 10             	sub    $0x10,%esp
    int i = 0;
c0102ca5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char* ret = NULL;
c0102cac:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (str[i] != 0)
c0102cb3:	eb 21                	jmp    c0102cd6 <strrchr+0x37>
    {
        if (str[i] == (char)c)
c0102cb5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102cb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cbb:	01 d0                	add    %edx,%eax
c0102cbd:	0f b6 10             	movzbl (%eax),%edx
c0102cc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102cc3:	38 c2                	cmp    %al,%dl
c0102cc5:	75 0b                	jne    c0102cd2 <strrchr+0x33>
        {
            ret = (char*)(str+i);
c0102cc7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102cca:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ccd:	01 d0                	add    %edx,%eax
c0102ccf:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        i++;
c0102cd2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 */
char *strrchr(const char *str, int c)
{
    int i = 0;
    char* ret = NULL;
    while (str[i] != 0)
c0102cd6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cdc:	01 d0                	add    %edx,%eax
c0102cde:	0f b6 00             	movzbl (%eax),%eax
c0102ce1:	84 c0                	test   %al,%al
c0102ce3:	75 d0                	jne    c0102cb5 <strrchr+0x16>
        {
            ret = (char*)(str+i);
        }
        i++;
    }
    return ret;
c0102ce5:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0102ce8:	c9                   	leave  
c0102ce9:	c3                   	ret    

c0102cea <strtok>:
	char* strpbrk(const char* st0, const char* st1) {}
	char* strstr(const char* st0, const char* st1) {}
	char* strerror(size_t n) {}
*/
char *strtok(char *string, const char *delimiters)
{
c0102cea:	55                   	push   %ebp
c0102ceb:	89 e5                	mov    %esp,%ebp
c0102ced:	83 ec 28             	sub    $0x28,%esp
    static char *s = NULL;
    static int num_del = 0;
    if(string != NULL)
c0102cf0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102cf4:	74 1a                	je     c0102d10 <strtok+0x26>
    {
        s = string;
c0102cf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cf9:	a3 00 80 11 c0       	mov    %eax,0xc0118000
        num_del = strlen(delimiters);
c0102cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102d01:	89 04 24             	mov    %eax,(%esp)
c0102d04:	e8 20 fd ff ff       	call   c0102a29 <strlen>
c0102d09:	a3 04 80 11 c0       	mov    %eax,0xc0118004
c0102d0e:	eb 1b                	jmp    c0102d2b <strtok+0x41>
    }
    else
    {
        if(s == NULL)
c0102d10:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102d15:	85 c0                	test   %eax,%eax
c0102d17:	75 0a                	jne    c0102d23 <strtok+0x39>
        {
            return NULL;
c0102d19:	b8 00 00 00 00       	mov    $0x0,%eax
c0102d1e:	e9 da 00 00 00       	jmp    c0102dfd <strtok+0x113>
        }
        string = s;
c0102d23:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102d28:	89 45 08             	mov    %eax,0x8(%ebp)
    }
    int i, j = 0;
c0102d2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while(*s != '\0')
c0102d32:	e9 86 00 00 00       	jmp    c0102dbd <strtok+0xd3>
    {
        for(i = 0; i < num_del; i++)
c0102d37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102d3e:	eb 62                	jmp    c0102da2 <strtok+0xb8>
        {
            if(*s == delimiters[i])
c0102d40:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102d45:	0f b6 10             	movzbl (%eax),%edx
c0102d48:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102d4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102d4e:	01 c8                	add    %ecx,%eax
c0102d50:	0f b6 00             	movzbl (%eax),%eax
c0102d53:	38 c2                	cmp    %al,%dl
c0102d55:	75 47                	jne    c0102d9e <strtok+0xb4>
            {
                s++;
c0102d57:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102d5c:	83 c0 01             	add    $0x1,%eax
c0102d5f:	a3 00 80 11 c0       	mov    %eax,0xc0118000
                char *ret = (char*) malloc(j+1);
c0102d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102d67:	83 c0 01             	add    $0x1,%eax
c0102d6a:	89 04 24             	mov    %eax,(%esp)
c0102d6d:	e8 2a a9 00 00       	call   c010d69c <malloc>
c0102d72:	89 45 ec             	mov    %eax,-0x14(%ebp)
                memcpy(ret, string, j);
c0102d75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102d78:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102d7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102d83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102d86:	89 04 24             	mov    %eax,(%esp)
c0102d89:	e8 71 00 00 00       	call   c0102dff <memcpy>
                ret[j] = '\0';
c0102d8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0102d91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102d94:	01 d0                	add    %edx,%eax
c0102d96:	c6 00 00             	movb   $0x0,(%eax)
                return ret;
c0102d99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102d9c:	eb 5f                	jmp    c0102dfd <strtok+0x113>
        string = s;
    }
    int i, j = 0;
    while(*s != '\0')
    {
        for(i = 0; i < num_del; i++)
c0102d9e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102da2:	a1 04 80 11 c0       	mov    0xc0118004,%eax
c0102da7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0102daa:	7c 94                	jl     c0102d40 <strtok+0x56>
                memcpy(ret, string, j);
                ret[j] = '\0';
                return ret;
            }
        }
        s++;
c0102dac:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102db1:	83 c0 01             	add    $0x1,%eax
c0102db4:	a3 00 80 11 c0       	mov    %eax,0xc0118000
        j++;
c0102db9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            return NULL;
        }
        string = s;
    }
    int i, j = 0;
    while(*s != '\0')
c0102dbd:	a1 00 80 11 c0       	mov    0xc0118000,%eax
c0102dc2:	0f b6 00             	movzbl (%eax),%eax
c0102dc5:	84 c0                	test   %al,%al
c0102dc7:	0f 85 6a ff ff ff    	jne    c0102d37 <strtok+0x4d>
        }
        s++;
        j++;
    }

    char *ret = (char*) malloc(j+1);
c0102dcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102dd0:	83 c0 01             	add    $0x1,%eax
c0102dd3:	89 04 24             	mov    %eax,(%esp)
c0102dd6:	e8 c1 a8 00 00       	call   c010d69c <malloc>
c0102ddb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    strcpy(ret, string);
c0102dde:	8b 45 08             	mov    0x8(%ebp),%eax
c0102de1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102de5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102de8:	89 04 24             	mov    %eax,(%esp)
c0102deb:	e8 60 fc ff ff       	call   c0102a50 <strcpy>

    s = NULL;
c0102df0:	c7 05 00 80 11 c0 00 	movl   $0x0,0xc0118000
c0102df7:	00 00 00 
    return ret;
c0102dfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0102dfd:	c9                   	leave  
c0102dfe:	c3                   	ret    

c0102dff <memcpy>:
 * @param source source string
 * @param size size of source area
 * @return pointer to destination area
 */
void *memcpy(void *destination, const void *source, size_t size)
{
c0102dff:	55                   	push   %ebp
c0102e00:	89 e5                	mov    %esp,%ebp
c0102e02:	83 ec 10             	sub    $0x10,%esp
    uint8_t *dest = destination;
c0102e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e08:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t *sour = source;
c0102e0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102e0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t i;
    for (i = 0; i < size; i++)
c0102e11:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102e18:	eb 19                	jmp    c0102e33 <memcpy+0x34>
    {
        dest[i] = sour[i];
c0102e1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e1d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102e20:	01 c2                	add    %eax,%edx
c0102e22:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e25:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102e28:	01 c8                	add    %ecx,%eax
c0102e2a:	0f b6 00             	movzbl (%eax),%eax
c0102e2d:	88 02                	mov    %al,(%edx)
void *memcpy(void *destination, const void *source, size_t size)
{
    uint8_t *dest = destination;
    const uint8_t *sour = source;
    size_t i;
    for (i = 0; i < size; i++)
c0102e2f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102e33:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e36:	3b 45 10             	cmp    0x10(%ebp),%eax
c0102e39:	72 df                	jb     c0102e1a <memcpy+0x1b>
    {
        dest[i] = sour[i];
    }
    return destination;
c0102e3b:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102e3e:	c9                   	leave  
c0102e3f:	c3                   	ret    

c0102e40 <memmove>:
 * @param source source area
 * @param num number of bytes to copy
 * @return pointer to destination area
 */
void *memmove(void *destination, const void *source, size_t num)
{
c0102e40:	55                   	push   %ebp
c0102e41:	89 e5                	mov    %esp,%ebp
c0102e43:	83 ec 1c             	sub    $0x1c,%esp
    uint8_t *dest = destination;
c0102e46:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e49:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const uint8_t *src = source;
c0102e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dest > src && src + num > dest && num != 0)
c0102e52:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102e55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0102e58:	76 3a                	jbe    c0102e94 <memmove+0x54>
c0102e5a:	8b 45 10             	mov    0x10(%ebp),%eax
c0102e5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102e60:	01 d0                	add    %edx,%eax
c0102e62:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0102e65:	76 2d                	jbe    c0102e94 <memmove+0x54>
c0102e67:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0102e6b:	74 27                	je     c0102e94 <memmove+0x54>
    {
        size_t i = num;
c0102e6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0102e70:	89 45 fc             	mov    %eax,-0x4(%ebp)
        do
        {
            i--;
c0102e73:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
            dest[i] = src[i];
c0102e77:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e7a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102e7d:	01 c2                	add    %eax,%edx
c0102e7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e82:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102e85:	01 c8                	add    %ecx,%eax
c0102e87:	0f b6 00             	movzbl (%eax),%eax
c0102e8a:	88 02                	mov    %al,(%edx)
        }
        while (i != 0);
c0102e8c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0102e90:	75 e1                	jne    c0102e73 <memmove+0x33>
void *memmove(void *destination, const void *source, size_t num)
{
    uint8_t *dest = destination;
    const uint8_t *src = source;
    if (dest > src && src + num > dest && num != 0)
    {
c0102e92:	eb 19                	jmp    c0102ead <memmove+0x6d>
        while (i != 0);
    }
    else
    {
        // because we know that memcpy copy bytes from left to right.
        memcpy(dest, src, num);
c0102e94:	8b 45 10             	mov    0x10(%ebp),%eax
c0102e97:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102e9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102ea2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102ea5:	89 04 24             	mov    %eax,(%esp)
c0102ea8:	e8 52 ff ff ff       	call   c0102dff <memcpy>
    }
    return destination;
c0102ead:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102eb0:	c9                   	leave  
c0102eb1:	c3                   	ret    

c0102eb2 <memcmp>:
 * @return = 0 areas are similar
 *  > 0 the value of the first different byte of area0 is bigger
 *  < 0 the value of the first different byte of area1 is bigger
 */
int memcmp(const void *mem0, const void *mem1, size_t n)
{
c0102eb2:	55                   	push   %ebp
c0102eb3:	89 e5                	mov    %esp,%ebp
c0102eb5:	83 ec 10             	sub    $0x10,%esp
    const char *st0 = mem0;
c0102eb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ebb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const char *st1 = mem1;
c0102ebe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102ec1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t i;
    for (i = 0; st0[i] == st1[i] && i < n-1; i++);
c0102ec4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102ecb:	eb 04                	jmp    c0102ed1 <memcmp+0x1f>
c0102ecd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102ed1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ed4:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102ed7:	01 d0                	add    %edx,%eax
c0102ed9:	0f b6 10             	movzbl (%eax),%edx
c0102edc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102edf:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102ee2:	01 c8                	add    %ecx,%eax
c0102ee4:	0f b6 00             	movzbl (%eax),%eax
c0102ee7:	38 c2                	cmp    %al,%dl
c0102ee9:	75 0b                	jne    c0102ef6 <memcmp+0x44>
c0102eeb:	8b 45 10             	mov    0x10(%ebp),%eax
c0102eee:	83 e8 01             	sub    $0x1,%eax
c0102ef1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0102ef4:	77 d7                	ja     c0102ecd <memcmp+0x1b>
    return st0[i] - st1[i];
c0102ef6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ef9:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102efc:	01 d0                	add    %edx,%eax
c0102efe:	0f b6 00             	movzbl (%eax),%eax
c0102f01:	0f be d0             	movsbl %al,%edx
c0102f04:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f07:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0102f0a:	01 c8                	add    %ecx,%eax
c0102f0c:	0f b6 00             	movzbl (%eax),%eax
c0102f0f:	0f be c0             	movsbl %al,%eax
c0102f12:	89 d1                	mov    %edx,%ecx
c0102f14:	29 c1                	sub    %eax,%ecx
c0102f16:	89 c8                	mov    %ecx,%eax
}
c0102f18:	c9                   	leave  
c0102f19:	c3                   	ret    

c0102f1a <memchr>:
 * @param n Size of mem.
 * @return Pointer to the fist similar value
 *  or NULL if no value in mem is similar to c.
 */
void *memchr(const void *mem, int c, size_t n)
{
c0102f1a:	55                   	push   %ebp
c0102f1b:	89 e5                	mov    %esp,%ebp
c0102f1d:	83 ec 10             	sub    $0x10,%esp
    size_t i;
    const unsigned char *str = mem;
c0102f20:	8b 45 08             	mov    0x8(%ebp),%eax
c0102f23:	89 45 f8             	mov    %eax,-0x8(%ebp)
    const unsigned char value = (unsigned char) c;
c0102f26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102f29:	88 45 f7             	mov    %al,-0x9(%ebp)
    for (i = 0; str[i] != value && i < n-1; i++);
c0102f2c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102f33:	eb 04                	jmp    c0102f39 <memchr+0x1f>
c0102f35:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102f39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f3c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102f3f:	01 d0                	add    %edx,%eax
c0102f41:	0f b6 00             	movzbl (%eax),%eax
c0102f44:	3a 45 f7             	cmp    -0x9(%ebp),%al
c0102f47:	74 0b                	je     c0102f54 <memchr+0x3a>
c0102f49:	8b 45 10             	mov    0x10(%ebp),%eax
c0102f4c:	83 e8 01             	sub    $0x1,%eax
c0102f4f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0102f52:	77 e1                	ja     c0102f35 <memchr+0x1b>

    if (str[i] == value)
c0102f54:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f57:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102f5a:	01 d0                	add    %edx,%eax
c0102f5c:	0f b6 00             	movzbl (%eax),%eax
c0102f5f:	3a 45 f7             	cmp    -0x9(%ebp),%al
c0102f62:	75 0a                	jne    c0102f6e <memchr+0x54>
    {
        return (void*) (str+i);
c0102f64:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f67:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102f6a:	01 d0                	add    %edx,%eax
c0102f6c:	eb 05                	jmp    c0102f73 <memchr+0x59>
    }
    else
    {
        return NULL;
c0102f6e:	b8 00 00 00 00       	mov    $0x0,%eax
    }
}
c0102f73:	c9                   	leave  
c0102f74:	c3                   	ret    

c0102f75 <memset>:
 * @param c Value to be set. The function will use a unsigned char conversion of this value.
 * @param n size of mem.
 * @return returns <code>mem</code>.
 */
void *memset(void *mem, int c, size_t n)
{
c0102f75:	55                   	push   %ebp
c0102f76:	89 e5                	mov    %esp,%ebp
c0102f78:	83 ec 10             	sub    $0x10,%esp
    unsigned char *str = mem;
c0102f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102f7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t i;
    for (i = 0; i < n; i++)
c0102f81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102f88:	eb 11                	jmp    c0102f9b <memset+0x26>
    {
        str[i] = (unsigned char) c;
c0102f8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f8d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0102f90:	01 c2                	add    %eax,%edx
c0102f92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102f95:	88 02                	mov    %al,(%edx)
 */
void *memset(void *mem, int c, size_t n)
{
    unsigned char *str = mem;
    size_t i;
    for (i = 0; i < n; i++)
c0102f97:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102f9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102f9e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0102fa1:	72 e7                	jb     c0102f8a <memset+0x15>
    {
        str[i] = (unsigned char) c;
    }
    return mem;
c0102fa3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0102fa6:	c9                   	leave  
c0102fa7:	c3                   	ret    

c0102fa8 <isalnum>:
 * @param character c as int
 * @return true  -> c is an alphanumeric character
 * @return false -> c isn't an alphanumeric character
 **/
int isalnum(int c)
{
c0102fa8:	55                   	push   %ebp
c0102fa9:	89 e5                	mov    %esp,%ebp
    if ( (c > 0x40 && c < 0x5B) || (c > 0x60 && c < 0x7B) || (c > 0x2F && c < 0x3A) )
c0102fab:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0102faf:	7e 06                	jle    c0102fb7 <isalnum+0xf>
c0102fb1:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0102fb5:	7e 18                	jle    c0102fcf <isalnum+0x27>
c0102fb7:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c0102fbb:	7e 06                	jle    c0102fc3 <isalnum+0x1b>
c0102fbd:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c0102fc1:	7e 0c                	jle    c0102fcf <isalnum+0x27>
c0102fc3:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102fc7:	7e 0d                	jle    c0102fd6 <isalnum+0x2e>
c0102fc9:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0102fcd:	7f 07                	jg     c0102fd6 <isalnum+0x2e>
    {
        return true;
c0102fcf:	b8 01 00 00 00       	mov    $0x1,%eax
c0102fd4:	eb 05                	jmp    c0102fdb <isalnum+0x33>
    }
    return false;
c0102fd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102fdb:	5d                   	pop    %ebp
c0102fdc:	c3                   	ret    

c0102fdd <isalpha>:
 * @param character c as int
 * @return true  -> c is an alphabetical character
 * @return false -> c isn't an alphabetical character
 **/
int isalpha(int c)
{
c0102fdd:	55                   	push   %ebp
c0102fde:	89 e5                	mov    %esp,%ebp
    if ( (c > 0x40 && c < 0x5B) || (c > 0x60 && c < 0x7B) )
c0102fe0:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0102fe4:	7e 06                	jle    c0102fec <isalpha+0xf>
c0102fe6:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0102fea:	7e 0c                	jle    c0102ff8 <isalpha+0x1b>
c0102fec:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c0102ff0:	7e 0d                	jle    c0102fff <isalpha+0x22>
c0102ff2:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c0102ff6:	7f 07                	jg     c0102fff <isalpha+0x22>
    {
        return true;
c0102ff8:	b8 01 00 00 00       	mov    $0x1,%eax
c0102ffd:	eb 05                	jmp    c0103004 <isalpha+0x27>
    }
    return false;
c0102fff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103004:	5d                   	pop    %ebp
c0103005:	c3                   	ret    

c0103006 <iscntrl>:
 * @param character c as int
 * @return true  -> c is a control Key value
 * @return false -> c isn't a control key value
 **/
int iscntrl(int c)
{
c0103006:	55                   	push   %ebp
c0103007:	89 e5                	mov    %esp,%ebp
    if ( (c >= 0x0 && c > 0x20) || c == 0x7F)
c0103009:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010300d:	78 06                	js     c0103015 <iscntrl+0xf>
c010300f:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c0103013:	7f 06                	jg     c010301b <iscntrl+0x15>
c0103015:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
c0103019:	75 07                	jne    c0103022 <iscntrl+0x1c>
    {
        return true;
c010301b:	b8 01 00 00 00       	mov    $0x1,%eax
c0103020:	eb 05                	jmp    c0103027 <iscntrl+0x21>
    }
    return false;
c0103022:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103027:	5d                   	pop    %ebp
c0103028:	c3                   	ret    

c0103029 <isdigit>:
 * @param character c as int
 * @return true  -> c is a digit
 * @return false -> c isn't an digit
 **/
int isdigit(int c)
{
c0103029:	55                   	push   %ebp
c010302a:	89 e5                	mov    %esp,%ebp
    if (c > 0x2F && c < 0x3A)
c010302c:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0103030:	7e 0d                	jle    c010303f <isdigit+0x16>
c0103032:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0103036:	7f 07                	jg     c010303f <isdigit+0x16>
    {
        return true;
c0103038:	b8 01 00 00 00       	mov    $0x1,%eax
c010303d:	eb 05                	jmp    c0103044 <isdigit+0x1b>
    }
    return false;
c010303f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103044:	5d                   	pop    %ebp
c0103045:	c3                   	ret    

c0103046 <isgraph>:
 * @param character c as int
 * @return true  -> c is a graphical character
 * @return false -> c isn't a graphical character
 **/
int isgraph(int c)
{
c0103046:	55                   	push   %ebp
c0103047:	89 e5                	mov    %esp,%ebp
    if (c > 0x20 && c < 0x7F)
c0103049:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c010304d:	7e 0d                	jle    c010305c <isgraph+0x16>
c010304f:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c0103053:	7f 07                	jg     c010305c <isgraph+0x16>
    {
        return true;
c0103055:	b8 01 00 00 00       	mov    $0x1,%eax
c010305a:	eb 05                	jmp    c0103061 <isgraph+0x1b>
    }
    return false;
c010305c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103061:	5d                   	pop    %ebp
c0103062:	c3                   	ret    

c0103063 <islower>:
 * @param character c as int
 * @return true  -> c is a lower character
 * @return false -> c isn't a lower character
 **/
int islower(int c)
{
c0103063:	55                   	push   %ebp
c0103064:	89 e5                	mov    %esp,%ebp
    if (c > 0x60 && c < 0x7B)
c0103066:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c010306a:	7e 0d                	jle    c0103079 <islower+0x16>
c010306c:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c0103070:	7f 07                	jg     c0103079 <islower+0x16>
    {
        return true;
c0103072:	b8 01 00 00 00       	mov    $0x1,%eax
c0103077:	eb 05                	jmp    c010307e <islower+0x1b>
    }
    return false;
c0103079:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010307e:	5d                   	pop    %ebp
c010307f:	c3                   	ret    

c0103080 <isprint>:
 * @param character c as int
 * @return true  -> c is an printable character
 * @return false -> c isn't an printable character
 **/
int isprint(int c)
{
c0103080:	55                   	push   %ebp
c0103081:	89 e5                	mov    %esp,%ebp
    if (c > 0x1F && c < 0x7F)
c0103083:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0103087:	7e 0d                	jle    c0103096 <isprint+0x16>
c0103089:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c010308d:	7f 07                	jg     c0103096 <isprint+0x16>
    {
        return true;
c010308f:	b8 01 00 00 00       	mov    $0x1,%eax
c0103094:	eb 05                	jmp    c010309b <isprint+0x1b>
    }
    return false;
c0103096:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010309b:	5d                   	pop    %ebp
c010309c:	c3                   	ret    

c010309d <ispunct>:
 * @param character c as int
 * @return true  -> c is a visible character which is not an alphanumerical
 * @return false -> c isn't a visible character which is not an alphanumerical
 **/
int ispunct(int c)
{
c010309d:	55                   	push   %ebp
c010309e:	89 e5                	mov    %esp,%ebp
    if ( (c > 0x20 && c < 0x30) || (c > 0x39 && c < 0x41) || (c > 0x5A && c < 0x61) || (c > 0x7A && c < 0x7F) )
c01030a0:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c01030a4:	7e 06                	jle    c01030ac <ispunct+0xf>
c01030a6:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01030aa:	7e 24                	jle    c01030d0 <ispunct+0x33>
c01030ac:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c01030b0:	7e 06                	jle    c01030b8 <ispunct+0x1b>
c01030b2:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c01030b6:	7e 18                	jle    c01030d0 <ispunct+0x33>
c01030b8:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c01030bc:	7e 06                	jle    c01030c4 <ispunct+0x27>
c01030be:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c01030c2:	7e 0c                	jle    c01030d0 <ispunct+0x33>
c01030c4:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c01030c8:	7e 0d                	jle    c01030d7 <ispunct+0x3a>
c01030ca:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c01030ce:	7f 07                	jg     c01030d7 <ispunct+0x3a>
    {
        return true;
c01030d0:	b8 01 00 00 00       	mov    $0x1,%eax
c01030d5:	eb 05                	jmp    c01030dc <ispunct+0x3f>
    }
    return false;
c01030d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01030dc:	5d                   	pop    %ebp
c01030dd:	c3                   	ret    

c01030de <isspace>:
 * @param character c as int
 * @return true  -> c is a space character
 * @return false -> c isn't a space character
 **/
int isspace(int c)
{
c01030de:	55                   	push   %ebp
c01030df:	89 e5                	mov    %esp,%ebp
    if (c == ' ' || c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v')
c01030e1:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c01030e5:	74 1e                	je     c0103105 <isspace+0x27>
c01030e7:	83 7d 08 0c          	cmpl   $0xc,0x8(%ebp)
c01030eb:	74 18                	je     c0103105 <isspace+0x27>
c01030ed:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c01030f1:	74 12                	je     c0103105 <isspace+0x27>
c01030f3:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
c01030f7:	74 0c                	je     c0103105 <isspace+0x27>
c01030f9:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
c01030fd:	74 06                	je     c0103105 <isspace+0x27>
c01030ff:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
c0103103:	75 07                	jne    c010310c <isspace+0x2e>
    {
        return true;
c0103105:	b8 01 00 00 00       	mov    $0x1,%eax
c010310a:	eb 05                	jmp    c0103111 <isspace+0x33>
    }
    return false;
c010310c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103111:	5d                   	pop    %ebp
c0103112:	c3                   	ret    

c0103113 <isupper>:
 * @param character c as int
 * @return true  -> c is an upper alphabetical character
 * @return false -> c isn't an upper alphabetical character
 **/
int isupper(int c)
{
c0103113:	55                   	push   %ebp
c0103114:	89 e5                	mov    %esp,%ebp
    if (c > 0x40 && c < 0x5B)
c0103116:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c010311a:	7e 0d                	jle    c0103129 <isupper+0x16>
c010311c:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0103120:	7f 07                	jg     c0103129 <isupper+0x16>
    {
        return true;
c0103122:	b8 01 00 00 00       	mov    $0x1,%eax
c0103127:	eb 05                	jmp    c010312e <isupper+0x1b>
    }
    return false;
c0103129:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010312e:	5d                   	pop    %ebp
c010312f:	c3                   	ret    

c0103130 <isxdigit>:
 * @param character c as int
 * @return true  -> c is a hexadecimal digit
 * @return false -> c isn't a hexadecimal digit
 **/
int isxdigit(int c)
{
c0103130:	55                   	push   %ebp
c0103131:	89 e5                	mov    %esp,%ebp
    if ( (c > 0x2F && c < 0x3A) || (c > 0x40 && c < 0x47) || (c > 0x60 && c < 0x67) )
c0103133:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0103137:	7e 06                	jle    c010313f <isxdigit+0xf>
c0103139:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c010313d:	7e 18                	jle    c0103157 <isxdigit+0x27>
c010313f:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0103143:	7e 06                	jle    c010314b <isxdigit+0x1b>
c0103145:	83 7d 08 46          	cmpl   $0x46,0x8(%ebp)
c0103149:	7e 0c                	jle    c0103157 <isxdigit+0x27>
c010314b:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c010314f:	7e 0d                	jle    c010315e <isxdigit+0x2e>
c0103151:	83 7d 08 66          	cmpl   $0x66,0x8(%ebp)
c0103155:	7f 07                	jg     c010315e <isxdigit+0x2e>
    {
        return true;
c0103157:	b8 01 00 00 00       	mov    $0x1,%eax
c010315c:	eb 05                	jmp    c0103163 <isxdigit+0x33>
    }
    return false;
c010315e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103163:	5d                   	pop    %ebp
c0103164:	c3                   	ret    

c0103165 <tolower>:
 * convert upper to lower character
 * @param upper character c as int
 * @return c as lower character as int
 **/
int tolower(int c)
{
c0103165:	55                   	push   %ebp
c0103166:	89 e5                	mov    %esp,%ebp
    c += 0x20;
c0103168:	83 45 08 20          	addl   $0x20,0x8(%ebp)
    return c;
c010316c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010316f:	5d                   	pop    %ebp
c0103170:	c3                   	ret    

c0103171 <toupper>:
 * convert lower to upper character
 * @param lower charcter c as int
 * @return c as upper character as int
 **/
int toupper(int c)
{
c0103171:	55                   	push   %ebp
c0103172:	89 e5                	mov    %esp,%ebp
    c -= 0x20;
c0103174:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    return c;
c0103178:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010317b:	5d                   	pop    %ebp
c010317c:	c3                   	ret    

c010317d <printf>:
#include <ctype.h>
#include <atoi.h>
#include <drivers/video.h>

int printf(const char *fmt, ...)
{
c010317d:	55                   	push   %ebp
c010317e:	89 e5                	mov    %esp,%ebp
c0103180:	81 ec 28 04 00 00    	sub    $0x428,%esp
    int size;
    char buffer[1024];
    memset(buffer, 0, 1024);
c0103186:	c7 44 24 08 00 04 00 	movl   $0x400,0x8(%esp)
c010318d:	00 
c010318e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103195:	00 
c0103196:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c010319c:	89 04 24             	mov    %eax,(%esp)
c010319f:	e8 d1 fd ff ff       	call   c0102f75 <memset>

    va_list args;
    va_start(args, fmt);
c01031a4:	8d 45 0c             	lea    0xc(%ebp),%eax
c01031a7:	89 85 f0 fb ff ff    	mov    %eax,-0x410(%ebp)

    size = vsprintf(buffer, fmt, args);
c01031ad:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
c01031b3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01031b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01031ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01031be:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c01031c4:	89 04 24             	mov    %eax,(%esp)
c01031c7:	e8 4b 00 00 00       	call   c0103217 <vsprintf>
c01031cc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    fputs(buffer, STDOUT);
c01031cf:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01031d6:	00 
c01031d7:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c01031dd:	89 04 24             	mov    %eax,(%esp)
c01031e0:	e8 08 8b 00 00       	call   c010bced <fputs>

    va_end(args);
    return size;
c01031e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01031e8:	c9                   	leave  
c01031e9:	c3                   	ret    

c01031ea <sprintf>:

int sprintf(char *buf, const char *fmt, ...)
{
c01031ea:	55                   	push   %ebp
c01031eb:	89 e5                	mov    %esp,%ebp
c01031ed:	83 ec 28             	sub    $0x28,%esp
    int size;

    va_list args;
    va_start(args, fmt);
c01031f0:	8d 45 10             	lea    0x10(%ebp),%eax
c01031f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    size = vsprintf(buf, fmt, args);
c01031f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01031f9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01031fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103200:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103204:	8b 45 08             	mov    0x8(%ebp),%eax
c0103207:	89 04 24             	mov    %eax,(%esp)
c010320a:	e8 08 00 00 00       	call   c0103217 <vsprintf>
c010320f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    va_end(args);
    return size;
c0103212:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103215:	c9                   	leave  
c0103216:	c3                   	ret    

c0103217 <vsprintf>:

int vsprintf(char *buf, const char *fmt, va_list args)
{
c0103217:	55                   	push   %ebp
c0103218:	89 e5                	mov    %esp,%ebp
c010321a:	83 ec 58             	sub    $0x58,%esp
    char *str = buf;
c010321d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103220:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int precision;
    int qualifier;

    int base;

    for (; *fmt; ++fmt)
c0103223:	e9 1f 04 00 00       	jmp    c0103647 <vsprintf+0x430>
    {
        if (*fmt != '%')
c0103228:	8b 45 0c             	mov    0xc(%ebp),%eax
c010322b:	0f b6 00             	movzbl (%eax),%eax
c010322e:	3c 25                	cmp    $0x25,%al
c0103230:	74 14                	je     c0103246 <vsprintf+0x2f>
        {
            *buf++ = *fmt;
c0103232:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103235:	0f b6 10             	movzbl (%eax),%edx
c0103238:	8b 45 08             	mov    0x8(%ebp),%eax
c010323b:	88 10                	mov    %dl,(%eax)
c010323d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
            continue;
c0103241:	e9 fd 03 00 00       	jmp    c0103643 <vsprintf+0x42c>
        }

        /* flags */
        flags = 0;
c0103246:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
loop:
        ++fmt;
c010324d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        switch (*fmt)
c0103251:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103254:	0f b6 00             	movzbl (%eax),%eax
c0103257:	0f be c0             	movsbl %al,%eax
c010325a:	83 e8 20             	sub    $0x20,%eax
c010325d:	83 f8 10             	cmp    $0x10,%eax
c0103260:	77 27                	ja     c0103289 <vsprintf+0x72>
c0103262:	8b 04 85 28 10 11 c0 	mov    -0x3feeefd8(,%eax,4),%eax
c0103269:	ff e0                	jmp    *%eax
        {
            case '0':
                flags |= ZEROPAD;
c010326b:	83 4d e4 01          	orl    $0x1,-0x1c(%ebp)
                goto loop;
c010326f:	eb dc                	jmp    c010324d <vsprintf+0x36>
            case '+':
                flags |= PLUS;
c0103271:	83 4d e4 04          	orl    $0x4,-0x1c(%ebp)
                goto loop;
c0103275:	eb d6                	jmp    c010324d <vsprintf+0x36>
            case ' ':
                flags |= SPACE;
c0103277:	83 4d e4 08          	orl    $0x8,-0x1c(%ebp)
                goto loop;
c010327b:	eb d0                	jmp    c010324d <vsprintf+0x36>
            case '-':
                flags |= LEFT;
c010327d:	83 4d e4 10          	orl    $0x10,-0x1c(%ebp)
                goto loop;
c0103281:	eb ca                	jmp    c010324d <vsprintf+0x36>
            case '#':
                flags |= SPECIAL;
c0103283:	83 4d e4 40          	orl    $0x40,-0x1c(%ebp)
                goto loop;
c0103287:	eb c4                	jmp    c010324d <vsprintf+0x36>
        }

        /* width */
        width = 1;
c0103289:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
        if (isdigit(*fmt))
c0103290:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103293:	0f b6 00             	movzbl (%eax),%eax
c0103296:	0f be c0             	movsbl %al,%eax
c0103299:	83 e8 30             	sub    $0x30,%eax
c010329c:	83 f8 09             	cmp    $0x9,%eax
c010329f:	77 25                	ja     c01032c6 <vsprintf+0xaf>
        {
            width = atoi(fmt);
c01032a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032a4:	89 04 24             	mov    %eax,(%esp)
c01032a7:	e8 5c f2 ff ff       	call   c0102508 <atoi>
c01032ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
            while (isdigit(*++fmt));
c01032af:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c01032b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032b6:	0f b6 00             	movzbl (%eax),%eax
c01032b9:	0f be c0             	movsbl %al,%eax
c01032bc:	83 e8 30             	sub    $0x30,%eax
c01032bf:	83 f8 09             	cmp    $0x9,%eax
c01032c2:	76 eb                	jbe    c01032af <vsprintf+0x98>
c01032c4:	eb 29                	jmp    c01032ef <vsprintf+0xd8>
        }
        else if (*fmt == '*')
c01032c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032c9:	0f b6 00             	movzbl (%eax),%eax
c01032cc:	3c 2a                	cmp    $0x2a,%al
c01032ce:	75 1f                	jne    c01032ef <vsprintf+0xd8>
        {
            ++fmt;
c01032d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
            width = va_arg(args, int);
c01032d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01032d7:	8d 50 04             	lea    0x4(%eax),%edx
c01032da:	89 55 10             	mov    %edx,0x10(%ebp)
c01032dd:	8b 00                	mov    (%eax),%eax
c01032df:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (width < 0)
c01032e2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01032e6:	79 07                	jns    c01032ef <vsprintf+0xd8>
            {
                width = - width;
c01032e8:	f7 5d e0             	negl   -0x20(%ebp)
                flags |= LEFT;
c01032eb:	83 4d e4 10          	orl    $0x10,-0x1c(%ebp)
            }
        }

        /* precision */
        precision = -1;
c01032ef:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
        if (*fmt == '.')
c01032f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032f9:	0f b6 00             	movzbl (%eax),%eax
c01032fc:	3c 2e                	cmp    $0x2e,%al
c01032fe:	75 63                	jne    c0103363 <vsprintf+0x14c>
        {
            ++fmt;
c0103300:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
            if (isdigit(*fmt))
c0103304:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103307:	0f b6 00             	movzbl (%eax),%eax
c010330a:	0f be c0             	movsbl %al,%eax
c010330d:	83 e8 30             	sub    $0x30,%eax
c0103310:	83 f8 09             	cmp    $0x9,%eax
c0103313:	77 25                	ja     c010333a <vsprintf+0x123>
            {
                precision = atoi(fmt);
c0103315:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103318:	89 04 24             	mov    %eax,(%esp)
c010331b:	e8 e8 f1 ff ff       	call   c0102508 <atoi>
c0103320:	89 45 dc             	mov    %eax,-0x24(%ebp)
                while (isdigit(*++fmt));
c0103323:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0103327:	8b 45 0c             	mov    0xc(%ebp),%eax
c010332a:	0f b6 00             	movzbl (%eax),%eax
c010332d:	0f be c0             	movsbl %al,%eax
c0103330:	83 e8 30             	sub    $0x30,%eax
c0103333:	83 f8 09             	cmp    $0x9,%eax
c0103336:	76 eb                	jbe    c0103323 <vsprintf+0x10c>
c0103338:	eb 1c                	jmp    c0103356 <vsprintf+0x13f>
            }
            else if (*fmt == '*')
c010333a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010333d:	0f b6 00             	movzbl (%eax),%eax
c0103340:	3c 2a                	cmp    $0x2a,%al
c0103342:	75 12                	jne    c0103356 <vsprintf+0x13f>
            {
                ++fmt;
c0103344:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
                precision = va_arg(args, int);
c0103348:	8b 45 10             	mov    0x10(%ebp),%eax
c010334b:	8d 50 04             	lea    0x4(%eax),%edx
c010334e:	89 55 10             	mov    %edx,0x10(%ebp)
c0103351:	8b 00                	mov    (%eax),%eax
c0103353:	89 45 dc             	mov    %eax,-0x24(%ebp)
            }
            if (precision < 0)
c0103356:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010335a:	79 07                	jns    c0103363 <vsprintf+0x14c>
            {
                precision = 0;
c010335c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            }
        }

        /* qualifier */
        qualifier = -1;
c0103363:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
        if (strchr("hlL", *fmt))
c010336a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010336d:	0f b6 00             	movzbl (%eax),%eax
c0103370:	0f be c0             	movsbl %al,%eax
c0103373:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103377:	c7 04 24 24 10 11 c0 	movl   $0xc0111024,(%esp)
c010337e:	e8 c8 f8 ff ff       	call   c0102c4b <strchr>
c0103383:	85 c0                	test   %eax,%eax
c0103385:	74 10                	je     c0103397 <vsprintf+0x180>
        {
            qualifier = *fmt;
c0103387:	8b 45 0c             	mov    0xc(%ebp),%eax
c010338a:	0f b6 00             	movzbl (%eax),%eax
c010338d:	0f be c0             	movsbl %al,%eax
c0103390:	89 45 d8             	mov    %eax,-0x28(%ebp)
            ++fmt;
c0103393:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }

        /* base */
        base = 10;
c0103397:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)

        /* specifier */
        switch (*fmt)
c010339e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01033a1:	0f b6 00             	movzbl (%eax),%eax
c01033a4:	0f be c0             	movsbl %al,%eax
c01033a7:	83 e8 25             	sub    $0x25,%eax
c01033aa:	83 f8 53             	cmp    $0x53,%eax
c01033ad:	0f 87 c1 01 00 00    	ja     c0103574 <vsprintf+0x35d>
c01033b3:	8b 04 85 6c 10 11 c0 	mov    -0x3feeef94(,%eax,4),%eax
c01033ba:	ff e0                	jmp    *%eax
        {
            case 'c':
                len = 1;
c01033bc:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)

                if (!(flags & LEFT))
c01033c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01033c6:	83 e0 10             	and    $0x10,%eax
c01033c9:	85 c0                	test   %eax,%eax
c01033cb:	75 1d                	jne    c01033ea <vsprintf+0x1d3>
                    while (len < width--)
c01033cd:	eb 0a                	jmp    c01033d9 <vsprintf+0x1c2>
                        *buf++ = ' ';
c01033cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01033d2:	c6 00 20             	movb   $0x20,(%eax)
c01033d5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        {
            case 'c':
                len = 1;

                if (!(flags & LEFT))
                    while (len < width--)
c01033d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01033dc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01033df:	0f 9f c0             	setg   %al
c01033e2:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c01033e6:	84 c0                	test   %al,%al
c01033e8:	75 e5                	jne    c01033cf <vsprintf+0x1b8>
                        *buf++ = ' ';

                *buf++ = (unsigned char)va_arg(args, int);
c01033ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01033ed:	8d 50 04             	lea    0x4(%eax),%edx
c01033f0:	89 55 10             	mov    %edx,0x10(%ebp)
c01033f3:	8b 00                	mov    (%eax),%eax
c01033f5:	89 c2                	mov    %eax,%edx
c01033f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01033fa:	88 10                	mov    %dl,(%eax)
c01033fc:	83 45 08 01          	addl   $0x1,0x8(%ebp)

                while (len < width--)
c0103400:	eb 0a                	jmp    c010340c <vsprintf+0x1f5>
                    *buf++ = ' ';
c0103402:	8b 45 08             	mov    0x8(%ebp),%eax
c0103405:	c6 00 20             	movb   $0x20,(%eax)
c0103408:	83 45 08 01          	addl   $0x1,0x8(%ebp)
                    while (len < width--)
                        *buf++ = ' ';

                *buf++ = (unsigned char)va_arg(args, int);

                while (len < width--)
c010340c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010340f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0103412:	0f 9f c0             	setg   %al
c0103415:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c0103419:	84 c0                	test   %al,%al
c010341b:	75 e5                	jne    c0103402 <vsprintf+0x1eb>
                    *buf++ = ' ';
                continue;
c010341d:	e9 21 02 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case 's':
                s = va_arg(args, char *);
c0103422:	8b 45 10             	mov    0x10(%ebp),%eax
c0103425:	8d 50 04             	lea    0x4(%eax),%edx
c0103428:	89 55 10             	mov    %edx,0x10(%ebp)
c010342b:	8b 00                	mov    (%eax),%eax
c010342d:	89 45 f0             	mov    %eax,-0x10(%ebp)
                len = strnlen(s, precision);
c0103430:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103433:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103437:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010343a:	89 04 24             	mov    %eax,(%esp)
c010343d:	e8 b3 f5 ff ff       	call   c01029f5 <strnlen>
c0103442:	89 45 d0             	mov    %eax,-0x30(%ebp)

                if (!(flags & LEFT))
c0103445:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103448:	83 e0 10             	and    $0x10,%eax
c010344b:	85 c0                	test   %eax,%eax
c010344d:	75 1d                	jne    c010346c <vsprintf+0x255>
                    while (len < width--)
c010344f:	eb 0a                	jmp    c010345b <vsprintf+0x244>
                        *buf++ = ' ';
c0103451:	8b 45 08             	mov    0x8(%ebp),%eax
c0103454:	c6 00 20             	movb   $0x20,(%eax)
c0103457:	83 45 08 01          	addl   $0x1,0x8(%ebp)
            case 's':
                s = va_arg(args, char *);
                len = strnlen(s, precision);

                if (!(flags & LEFT))
                    while (len < width--)
c010345b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010345e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0103461:	0f 9f c0             	setg   %al
c0103464:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c0103468:	84 c0                	test   %al,%al
c010346a:	75 e5                	jne    c0103451 <vsprintf+0x23a>
                        *buf++ = ' ';

                for (i = 0; i < len; ++i)
c010346c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103473:	eb 17                	jmp    c010348c <vsprintf+0x275>
                    *buf++ = *s++;
c0103475:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103478:	0f b6 10             	movzbl (%eax),%edx
c010347b:	8b 45 08             	mov    0x8(%ebp),%eax
c010347e:	88 10                	mov    %dl,(%eax)
c0103480:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0103484:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

                if (!(flags & LEFT))
                    while (len < width--)
                        *buf++ = ' ';

                for (i = 0; i < len; ++i)
c0103488:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010348c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010348f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0103492:	7c e1                	jl     c0103475 <vsprintf+0x25e>
                    *buf++ = *s++;

                while (len < width--)
c0103494:	eb 0a                	jmp    c01034a0 <vsprintf+0x289>
                    *buf++ = ' ';
c0103496:	8b 45 08             	mov    0x8(%ebp),%eax
c0103499:	c6 00 20             	movb   $0x20,(%eax)
c010349c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
                        *buf++ = ' ';

                for (i = 0; i < len; ++i)
                    *buf++ = *s++;

                while (len < width--)
c01034a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01034a3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01034a6:	0f 9f c0             	setg   %al
c01034a9:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c01034ad:	84 c0                	test   %al,%al
c01034af:	75 e5                	jne    c0103496 <vsprintf+0x27f>
                    *buf++ = ' ';
                continue;
c01034b1:	e9 8d 01 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case 'p':
                width = 2 * sizeof(void *);
c01034b6:	c7 45 e0 08 00 00 00 	movl   $0x8,-0x20(%ebp)
                flags |= ZEROPAD;
c01034bd:	83 4d e4 01          	orl    $0x1,-0x1c(%ebp)
                flags |= SPECIAL;
c01034c1:	83 4d e4 40          	orl    $0x40,-0x1c(%ebp)
                itoa_ex((unsigned long)va_arg(args, void *), buf, 16, flags, width);
c01034c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01034c8:	8d 50 04             	lea    0x4(%eax),%edx
c01034cb:	89 55 10             	mov    %edx,0x10(%ebp)
c01034ce:	8b 00                	mov    (%eax),%eax
c01034d0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01034d3:	89 54 24 10          	mov    %edx,0x10(%esp)
c01034d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01034da:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01034de:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01034e5:	00 
c01034e6:	8b 55 08             	mov    0x8(%ebp),%edx
c01034e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01034ed:	89 04 24             	mov    %eax,(%esp)
c01034f0:	e8 58 ee ff ff       	call   c010234d <itoa_ex>
                while (*++buf);
c01034f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01034f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01034fc:	0f b6 00             	movzbl (%eax),%eax
c01034ff:	84 c0                	test   %al,%al
c0103501:	75 f2                	jne    c01034f5 <vsprintf+0x2de>
                continue;
c0103503:	e9 3b 01 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case 'n':
                if (qualifier == 'l')
c0103508:	83 7d d8 6c          	cmpl   $0x6c,-0x28(%ebp)
c010350c:	75 20                	jne    c010352e <vsprintf+0x317>
                {
                    long *dest = va_arg(args, long *);
c010350e:	8b 45 10             	mov    0x10(%ebp),%eax
c0103511:	8d 50 04             	lea    0x4(%eax),%edx
c0103514:	89 55 10             	mov    %edx,0x10(%ebp)
c0103517:	8b 00                	mov    (%eax),%eax
c0103519:	89 45 cc             	mov    %eax,-0x34(%ebp)
                    *dest = (buf - str);
c010351c:	8b 55 08             	mov    0x8(%ebp),%edx
c010351f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103522:	29 c2                	sub    %eax,%edx
c0103524:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103527:	89 10                	mov    %edx,(%eax)
                else
                {
                    int *dest = va_arg(args, int *);
                    *dest = (buf - str);
                }
                continue;
c0103529:	e9 15 01 00 00       	jmp    c0103643 <vsprintf+0x42c>
                    long *dest = va_arg(args, long *);
                    *dest = (buf - str);
                }
                else
                {
                    int *dest = va_arg(args, int *);
c010352e:	8b 45 10             	mov    0x10(%ebp),%eax
c0103531:	8d 50 04             	lea    0x4(%eax),%edx
c0103534:	89 55 10             	mov    %edx,0x10(%ebp)
c0103537:	8b 00                	mov    (%eax),%eax
c0103539:	89 45 c8             	mov    %eax,-0x38(%ebp)
                    *dest = (buf - str);
c010353c:	8b 55 08             	mov    0x8(%ebp),%edx
c010353f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103542:	29 c2                	sub    %eax,%edx
c0103544:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103547:	89 10                	mov    %edx,(%eax)
                }
                continue;
c0103549:	e9 f5 00 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case '%':
                *buf++ = '%';
c010354e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103551:	c6 00 25             	movb   $0x25,(%eax)
c0103554:	83 45 08 01          	addl   $0x1,0x8(%ebp)

            /* integers */

            case 'o':
                base = 8;
c0103558:	c7 45 d4 08 00 00 00 	movl   $0x8,-0x2c(%ebp)
                break;
c010355f:	eb 45                	jmp    c01035a6 <vsprintf+0x38f>

            case 'd':
            case 'i':
                flags |= SIGN;
c0103561:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
            case 'u':
                break;
c0103565:	eb 3e                	jmp    c01035a5 <vsprintf+0x38e>

            case 'x':
                flags |= SMALL;
c0103567:	83 4d e4 20          	orl    $0x20,-0x1c(%ebp)
            case 'X':
                base = 16;
c010356b:	c7 45 d4 10 00 00 00 	movl   $0x10,-0x2c(%ebp)
                break;
c0103572:	eb 32                	jmp    c01035a6 <vsprintf+0x38f>

            default:
                *str++ = '%';
c0103574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103577:	c6 00 25             	movb   $0x25,(%eax)
c010357a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
                if (*fmt)
c010357e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103581:	0f b6 00             	movzbl (%eax),%eax
c0103584:	84 c0                	test   %al,%al
c0103586:	74 14                	je     c010359c <vsprintf+0x385>
                {
                    *str++ = *fmt;
c0103588:	8b 45 0c             	mov    0xc(%ebp),%eax
c010358b:	0f b6 10             	movzbl (%eax),%edx
c010358e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103591:	88 10                	mov    %dl,(%eax)
c0103593:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
                }
                else
                {
                    --fmt;
                }
                continue;
c0103597:	e9 a7 00 00 00       	jmp    c0103643 <vsprintf+0x42c>
                {
                    *str++ = *fmt;
                }
                else
                {
                    --fmt;
c010359c:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
                }
                continue;
c01035a0:	e9 9e 00 00 00       	jmp    c0103643 <vsprintf+0x42c>

            case 'd':
            case 'i':
                flags |= SIGN;
            case 'u':
                break;
c01035a5:	90                   	nop
                    --fmt;
                }
                continue;
        }

        if (qualifier == 'l')
c01035a6:	83 7d d8 6c          	cmpl   $0x6c,-0x28(%ebp)
c01035aa:	75 10                	jne    c01035bc <vsprintf+0x3a5>
        {
            num = va_arg(args, unsigned long);
c01035ac:	8b 45 10             	mov    0x10(%ebp),%eax
c01035af:	8d 50 04             	lea    0x4(%eax),%edx
c01035b2:	89 55 10             	mov    %edx,0x10(%ebp)
c01035b5:	8b 00                	mov    (%eax),%eax
c01035b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01035ba:	eb 52                	jmp    c010360e <vsprintf+0x3f7>
        }
        else if (qualifier == 'h')
c01035bc:	83 7d d8 68          	cmpl   $0x68,-0x28(%ebp)
c01035c0:	75 24                	jne    c01035e6 <vsprintf+0x3cf>
        {
            num = (unsigned short)va_arg(args, int);
c01035c2:	8b 45 10             	mov    0x10(%ebp),%eax
c01035c5:	8d 50 04             	lea    0x4(%eax),%edx
c01035c8:	89 55 10             	mov    %edx,0x10(%ebp)
c01035cb:	8b 00                	mov    (%eax),%eax
c01035cd:	0f b7 c0             	movzwl %ax,%eax
c01035d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (flags & SIGN)
c01035d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01035d6:	83 e0 02             	and    $0x2,%eax
c01035d9:	85 c0                	test   %eax,%eax
c01035db:	74 31                	je     c010360e <vsprintf+0x3f7>
            {
                num = (short)num;
c01035dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01035e0:	98                   	cwtl   
c01035e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01035e4:	eb 28                	jmp    c010360e <vsprintf+0x3f7>
            }
        }
        else if (flags & SIGN)
c01035e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01035e9:	83 e0 02             	and    $0x2,%eax
c01035ec:	85 c0                	test   %eax,%eax
c01035ee:	74 10                	je     c0103600 <vsprintf+0x3e9>
        {
            num = va_arg(args, int);
c01035f0:	8b 45 10             	mov    0x10(%ebp),%eax
c01035f3:	8d 50 04             	lea    0x4(%eax),%edx
c01035f6:	89 55 10             	mov    %edx,0x10(%ebp)
c01035f9:	8b 00                	mov    (%eax),%eax
c01035fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01035fe:	eb 0e                	jmp    c010360e <vsprintf+0x3f7>
        }
        else
        {
            num = va_arg(args, unsigned int);
c0103600:	8b 45 10             	mov    0x10(%ebp),%eax
c0103603:	8d 50 04             	lea    0x4(%eax),%edx
c0103606:	89 55 10             	mov    %edx,0x10(%ebp)
c0103609:	8b 00                	mov    (%eax),%eax
c010360b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }

        itoa_ex(num, buf, base, flags, width);
c010360e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103611:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103614:	89 54 24 10          	mov    %edx,0x10(%esp)
c0103618:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010361b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010361f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103622:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103626:	8b 55 08             	mov    0x8(%ebp),%edx
c0103629:	89 54 24 04          	mov    %edx,0x4(%esp)
c010362d:	89 04 24             	mov    %eax,(%esp)
c0103630:	e8 18 ed ff ff       	call   c010234d <itoa_ex>
        while (*++buf);
c0103635:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0103639:	8b 45 08             	mov    0x8(%ebp),%eax
c010363c:	0f b6 00             	movzbl (%eax),%eax
c010363f:	84 c0                	test   %al,%al
c0103641:	75 f2                	jne    c0103635 <vsprintf+0x41e>
    int precision;
    int qualifier;

    int base;

    for (; *fmt; ++fmt)
c0103643:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0103647:	8b 45 0c             	mov    0xc(%ebp),%eax
c010364a:	0f b6 00             	movzbl (%eax),%eax
c010364d:	84 c0                	test   %al,%al
c010364f:	0f 85 d3 fb ff ff    	jne    c0103228 <vsprintf+0x11>

        itoa_ex(num, buf, base, flags, width);
        while (*++buf);
    }

    *buf = '\0';
c0103655:	8b 45 08             	mov    0x8(%ebp),%eax
c0103658:	c6 00 00             	movb   $0x0,(%eax)

    return buf - str;
c010365b:	8b 55 08             	mov    0x8(%ebp),%edx
c010365e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103661:	89 d1                	mov    %edx,%ecx
c0103663:	29 c1                	sub    %eax,%ecx
c0103665:	89 c8                	mov    %ecx,%eax
}
c0103667:	c9                   	leave  
c0103668:	c3                   	ret    

c0103669 <print_logo>:
                 UUUUUUUUU       NNNNNNNN         NNNNNNN IIIIIIIIII           \n\
                                                                               \n\
";

static void print_logo(color_t color)
{
c0103669:	55                   	push   %ebp
c010366a:	89 e5                	mov    %esp,%ebp
c010366c:	83 ec 38             	sub    $0x38,%esp
c010366f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103672:	88 45 e4             	mov    %al,-0x1c(%ebp)
    color_t color_saved = get_color();
c0103675:	e8 1c 87 00 00       	call   c010bd96 <get_color>
c010367a:	88 45 f7             	mov    %al,-0x9(%ebp)

    set_color(color | BLACK << 4);
c010367d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0103681:	89 04 24             	mov    %eax,(%esp)
c0103684:	e8 f6 86 00 00       	call   c010bd7f <set_color>

    puts(__logo);
c0103689:	a1 00 30 11 c0       	mov    0xc0113000,%eax
c010368e:	89 04 24             	mov    %eax,(%esp)
c0103691:	e8 14 86 00 00       	call   c010bcaa <puts>

    set_color(color_saved);
c0103696:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010369a:	89 04 24             	mov    %eax,(%esp)
c010369d:	e8 dd 86 00 00       	call   c010bd7f <set_color>
}
c01036a2:	c9                   	leave  
c01036a3:	c3                   	ret    

c01036a4 <init>:
* @return 0
*/
extern struct process_state *kernel_state;
extern list_t *running_threads;
int init (struct multiboot_struct *mb_info, uint32_t magic_number)
{
c01036a4:	55                   	push   %ebp
c01036a5:	89 e5                	mov    %esp,%ebp
c01036a7:	83 ec 68             	sub    $0x68,%esp
    clear_screen();
c01036aa:	e8 72 86 00 00       	call   c010bd21 <clear_screen>
    if (magic_number != 0x2BADB002)
c01036af:	81 7d 0c 02 b0 ad 2b 	cmpl   $0x2badb002,0xc(%ebp)
c01036b6:	74 0c                	je     c01036c4 <init+0x20>
    {
        panic("Incompatible Bootloader");
c01036b8:	c7 04 24 5d 17 11 c0 	movl   $0xc011175d,(%esp)
c01036bf:	e8 a1 89 00 00       	call   c010c065 <panic>
    }
    set_color(WHITE | BLACK << 4);
c01036c4:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c01036cb:	e8 af 86 00 00       	call   c010bd7f <set_color>
    //Init Kernelmodules
    INIT_PMM(mb_info);
c01036d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01036d3:	89 04 24             	mov    %eax,(%esp)
c01036d6:	e8 2a c0 00 00       	call   c010f705 <INIT_PMM>
    INIT_GDT();
c01036db:	e8 81 c9 00 00       	call   c0110061 <INIT_GDT>
    INIT_IDT();
c01036e0:	e8 24 ae 00 00       	call   c010e509 <INIT_IDT>
    INIT_PAGING(mb_info);
c01036e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01036e8:	89 04 24             	mov    %eax,(%esp)
c01036eb:	e8 6e 99 00 00       	call   c010d05e <INIT_PAGING>
    INIT_HEAP();
c01036f0:	e8 c6 9e 00 00       	call   c010d5bb <INIT_HEAP>
    INIT_VFS();
c01036f5:	e8 79 1a 00 00       	call   c0105173 <INIT_VFS>
    INIT_TRIGGER();
c01036fa:	e8 68 69 00 00       	call   c010a067 <INIT_TRIGGER>
    INIT_CLOCK(600);
c01036ff:	c7 04 24 58 02 00 00 	movl   $0x258,(%esp)
c0103706:	e8 93 8d 00 00       	call   c010c49e <INIT_CLOCK>
    INIT_SCHEDULER();
c010370b:	e8 3a 11 00 00       	call   c010484a <INIT_SCHEDULER>
    asm volatile("sti");
c0103710:	fb                   	sti    

    //print Logo and loading message
    clear_screen();
c0103711:	e8 0b 86 00 00       	call   c010bd21 <clear_screen>
    print_logo(YELLOW);
c0103716:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010371d:	e8 47 ff ff ff       	call   c0103669 <print_logo>
    puts("Universe wird gestartet...\n");
c0103722:	c7 04 24 75 17 11 c0 	movl   $0xc0111775,(%esp)
c0103729:	e8 7c 85 00 00       	call   c010bcaa <puts>
    // count free memory and display it
    /*uint32_t pages = pmm_count_free_pages();
    printf("%u freie Speicherseiten (%u MB)\n", pages, pages >> 8);*/
    //print current time
    struct time t;
    update_time(&t);
c010372e:	8d 45 c1             	lea    -0x3f(%ebp),%eax
c0103731:	89 04 24             	mov    %eax,(%esp)
c0103734:	e8 8f 8e 00 00       	call   c010c5c8 <update_time>
    print_time(&t); //crashes on a real computer and on virtual box
c0103739:	8d 45 c1             	lea    -0x3f(%ebp),%eax
c010373c:	89 04 24             	mov    %eax,(%esp)
c010373f:	e8 d7 74 00 00       	call   c010ac1b <print_time>
    printf("\n");
c0103744:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010374b:	e8 fb 83 00 00       	call   c010bb4b <putchar>
    printf("Timestamp:%d\n\n",unix_time(&t));
c0103750:	8d 45 c1             	lea    -0x3f(%ebp),%eax
c0103753:	89 04 24             	mov    %eax,(%esp)
c0103756:	e8 4a 73 00 00       	call   c010aaa5 <unix_time>
c010375b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010375f:	c7 04 24 91 17 11 c0 	movl   $0xc0111791,(%esp)
c0103766:	e8 12 fa ff ff       	call   c010317d <printf>
    INIT_CPUID();
c010376b:	e8 c9 c7 00 00       	call   c010ff39 <INIT_CPUID>
    printf("\n");
c0103770:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0103777:	e8 cf 83 00 00       	call   c010bb4b <putchar>
    INIT_PCI();
c010377c:	e8 a3 7c 00 00       	call   c010b424 <INIT_PCI>


    int i;
    struct mods_add* modules = (struct mods_add*) mb_info->mods_addr;
c0103781:	8b 45 08             	mov    0x8(%ebp),%eax
c0103784:	8b 40 18             	mov    0x18(%eax),%eax
c0103787:	89 45 f0             	mov    %eax,-0x10(%ebp)

    void *phys = (void*)((int)modules[0].string & (int)~0xfff);
c010378a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010378d:	8b 40 08             	mov    0x8(%eax),%eax
c0103790:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103795:	89 45 ec             	mov    %eax,-0x14(%ebp)
    void *virt = (void*) vmm_automap_kernel(current_context, (paddr_t)phys, VMM_WRITABLE);
c0103798:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010379b:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c01037a0:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01037a7:	00 
c01037a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01037ac:	89 04 24             	mov    %eax,(%esp)
c01037af:	e8 10 9a 00 00       	call   c010d1c4 <vmm_automap_kernel>
c01037b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for(i = 0; i < mb_info->mods_count; i++)
c01037b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01037be:	eb 3a                	jmp    c01037fa <init+0x156>
    {
        int diff = (int)modules[i].string - (int)phys;
c01037c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c3:	89 c2                	mov    %eax,%edx
c01037c5:	c1 e2 04             	shl    $0x4,%edx
c01037c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037cb:	01 d0                	add    %edx,%eax
c01037cd:	8b 40 08             	mov    0x8(%eax),%eax
c01037d0:	89 c2                	mov    %eax,%edx
c01037d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d5:	89 d1                	mov    %edx,%ecx
c01037d7:	29 c1                	sub    %eax,%ecx
c01037d9:	89 c8                	mov    %ecx,%eax
c01037db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        modules[i].string = virt + diff;
c01037de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037e1:	89 c2                	mov    %eax,%edx
c01037e3:	c1 e2 04             	shl    $0x4,%edx
c01037e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037e9:	01 d0                	add    %edx,%eax
c01037eb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01037ee:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01037f1:	01 ca                	add    %ecx,%edx
c01037f3:	89 50 08             	mov    %edx,0x8(%eax)
    int i;
    struct mods_add* modules = (struct mods_add*) mb_info->mods_addr;

    void *phys = (void*)((int)modules[0].string & (int)~0xfff);
    void *virt = (void*) vmm_automap_kernel(current_context, (paddr_t)phys, VMM_WRITABLE);
    for(i = 0; i < mb_info->mods_count; i++)
c01037f6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01037fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01037fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103800:	8b 40 14             	mov    0x14(%eax),%eax
c0103803:	39 c2                	cmp    %eax,%edx
c0103805:	72 b9                	jb     c01037c0 <init+0x11c>
    {
        int diff = (int)modules[i].string - (int)phys;
        modules[i].string = virt + diff;
    }

    struct mapping_statistics stats = map_all(mb_info);
c0103807:	8d 45 b4             	lea    -0x4c(%ebp),%eax
c010380a:	8b 55 08             	mov    0x8(%ebp),%edx
c010380d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103811:	89 04 24             	mov    %eax,(%esp)
c0103814:	e8 6b 38 00 00       	call   c0107084 <map_all>
c0103819:	83 ec 04             	sub    $0x4,%esp
    printf("%d modules total, %d successfully loaded, %d failed\n", stats.total, stats.load_success, stats.load_failed);
c010381c:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010381f:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103822:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103825:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0103829:	89 54 24 08          	mov    %edx,0x8(%esp)
c010382d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103831:	c7 04 24 a0 17 11 c0 	movl   $0xc01117a0,(%esp)
c0103838:	e8 40 f9 ff ff       	call   c010317d <printf>
    
       vfs_inode_t *pfnode = vfs_lookup_path("/drivers/system.pf");
c010383d:	c7 04 24 d5 17 11 c0 	movl   $0xc01117d5,(%esp)
c0103844:	e8 6c 20 00 00       	call   c01058b5 <vfs_lookup_path>
c0103849:	89 45 e0             	mov    %eax,-0x20(%ebp)

        if(pfnode != NULL)
c010384c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0103850:	0f 84 93 00 00 00    	je     c01038e9 <init+0x245>
        {
            int argc = 2;
c0103856:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%ebp)
            void *argv[2];
            char *pf = (char *)malloc(pfnode->length+1);
c010385d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103860:	8b 40 08             	mov    0x8(%eax),%eax
c0103863:	83 c0 01             	add    $0x1,%eax
c0103866:	89 04 24             	mov    %eax,(%esp)
c0103869:	e8 2e 9e 00 00       	call   c010d69c <malloc>
c010386e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    		vfs_read(pfnode, 0, pf, pfnode->length);
c0103871:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103874:	8b 40 08             	mov    0x8(%eax),%eax
c0103877:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010387b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010387e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103882:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103889:	00 
c010388a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010388d:	89 04 24             	mov    %eax,(%esp)
c0103890:	e8 45 1d 00 00       	call   c01055da <vfs_read>
    		pf[pfnode->length+1] = '\0';
c0103895:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103898:	8b 40 08             	mov    0x8(%eax),%eax
c010389b:	8d 50 01             	lea    0x1(%eax),%edx
c010389e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038a1:	01 d0                	add    %edx,%eax
c01038a3:	c6 00 00             	movb   $0x0,(%eax)
            list_t *pipelines = pfp(pf);
c01038a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038a9:	89 04 24             	mov    %eax,(%esp)
c01038ac:	e8 f9 5b 00 00       	call   c01094aa <pfp>
c01038b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            struct section *sec = list_pop_front(pipelines);
c01038b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01038b7:	89 04 24             	mov    %eax,(%esp)
c01038ba:	e8 c6 ee ff ff       	call   c0102785 <list_pop_front>
c01038bf:	89 45 d0             	mov    %eax,-0x30(%ebp)

            argv[1] = mb_info;
c01038c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01038c5:	89 45 b0             	mov    %eax,-0x50(%ebp)
            argv[0] = sec;
c01038c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01038cb:	89 45 ac             	mov    %eax,-0x54(%ebp)
            kernel_thread_create((uintptr_t)INIT_HYPERVISOR,argc,argv);
c01038ce:	b8 6d 8e 10 c0       	mov    $0xc0108e6d,%eax
c01038d3:	8d 55 ac             	lea    -0x54(%ebp),%edx
c01038d6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01038da:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01038dd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01038e1:	89 04 24             	mov    %eax,(%esp)
c01038e4:	e8 d0 12 00 00       	call   c0104bb9 <kernel_thread_create>
        }
    
    vfs_inode_t *testnode = vfs_lookup_path("/ultrashell.elf");
c01038e9:	c7 04 24 e8 17 11 c0 	movl   $0xc01117e8,(%esp)
c01038f0:	e8 c0 1f 00 00       	call   c01058b5 <vfs_lookup_path>
c01038f5:	89 45 cc             	mov    %eax,-0x34(%ebp)

    if(testnode == NULL)
c01038f8:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01038fc:	75 0e                	jne    c010390c <init+0x268>
    {
        printf("ultrashell.elf not in vfs\n");
c01038fe:	c7 04 24 f8 17 11 c0 	movl   $0xc01117f8,(%esp)
c0103905:	e8 a0 83 00 00       	call   c010bcaa <puts>
c010390a:	eb 23                	jmp    c010392f <init+0x28b>
    }
    else
    {
        load_elf_from_file(testnode, 0, 0, 0);
c010390c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0103913:	00 
c0103914:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010391b:	00 
c010391c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103923:	00 
c0103924:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103927:	89 04 24             	mov    %eax,(%esp)
c010392a:	e8 07 00 00 00       	call   c0103936 <load_elf_from_file>
    }


    return 0;
c010392f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103934:	c9                   	leave  
c0103935:	c3                   	ret    

c0103936 <load_elf_from_file>:
#include <sched/thread.h>
#include <printf.h>
#include <string.h>

struct process_state *load_elf_from_file(vfs_inode_t *inode, uid_t uid, gid_t gid, struct pipeset *s)
{
c0103936:	55                   	push   %ebp
c0103937:	89 e5                	mov    %esp,%ebp
c0103939:	83 ec 38             	sub    $0x38,%esp
    void *image = malloc(inode->length);
c010393c:	8b 45 08             	mov    0x8(%ebp),%eax
c010393f:	8b 40 08             	mov    0x8(%eax),%eax
c0103942:	89 04 24             	mov    %eax,(%esp)
c0103945:	e8 52 9d 00 00       	call   c010d69c <malloc>
c010394a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vfs_read(inode, 0, image, inode->length);
c010394d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103950:	8b 40 08             	mov    0x8(%eax),%eax
c0103953:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103957:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010395a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010395e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103965:	00 
c0103966:	8b 45 08             	mov    0x8(%ebp),%eax
c0103969:	89 04 24             	mov    %eax,(%esp)
c010396c:	e8 69 1c 00 00       	call   c01055da <vfs_read>
    struct process_state *state = load_elf(image, inode->name, uid, gid, s);
c0103971:	8b 45 08             	mov    0x8(%ebp),%eax
c0103974:	8b 00                	mov    (%eax),%eax
c0103976:	8b 55 14             	mov    0x14(%ebp),%edx
c0103979:	89 54 24 10          	mov    %edx,0x10(%esp)
c010397d:	8b 55 10             	mov    0x10(%ebp),%edx
c0103980:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0103984:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103987:	89 54 24 08          	mov    %edx,0x8(%esp)
c010398b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010398f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103992:	89 04 24             	mov    %eax,(%esp)
c0103995:	e8 13 00 00 00       	call   c01039ad <load_elf>
c010399a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    free(image);
c010399d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039a0:	89 04 24             	mov    %eax,(%esp)
c01039a3:	e8 db 9d 00 00       	call   c010d783 <free>

    return state;
c01039a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01039ab:	c9                   	leave  
c01039ac:	c3                   	ret    

c01039ad <load_elf>:

struct process_state *load_elf(void *image, char *name, uid_t uid, gid_t gid, struct pipeset *s)
{
c01039ad:	55                   	push   %ebp
c01039ae:	89 e5                	mov    %esp,%ebp
c01039b0:	83 ec 38             	sub    $0x38,%esp
    struct process_state *proc = process_create(name, "Hallo", PROCESS_ACTIVE, NULL, uid, gid, s);
c01039b3:	8b 45 18             	mov    0x18(%ebp),%eax
c01039b6:	89 44 24 18          	mov    %eax,0x18(%esp)
c01039ba:	8b 45 14             	mov    0x14(%ebp),%eax
c01039bd:	89 44 24 14          	mov    %eax,0x14(%esp)
c01039c1:	8b 45 10             	mov    0x10(%ebp),%eax
c01039c4:	89 44 24 10          	mov    %eax,0x10(%esp)
c01039c8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01039cf:	00 
c01039d0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01039d7:	00 
c01039d8:	c7 44 24 04 12 18 11 	movl   $0xc0111812,0x4(%esp)
c01039df:	c0 
c01039e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039e3:	89 04 24             	mov    %eax,(%esp)
c01039e6:	e8 5d 03 00 00       	call   c0103d48 <process_create>
c01039eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    load_elf_thread(image, proc, 0, 0);
c01039ee:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01039f5:	00 
c01039f6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01039fd:	00 
c01039fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a01:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a05:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a08:	89 04 24             	mov    %eax,(%esp)
c0103a0b:	e8 73 00 00 00       	call   c0103a83 <load_elf_thread>

    return proc;
c0103a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103a13:	c9                   	leave  
c0103a14:	c3                   	ret    

c0103a15 <load_elf_thread_from_file>:

struct process_state *load_elf_thread_from_file(vfs_inode_t *inode, struct process_state *proc, int argc, void **argv)
{
c0103a15:	55                   	push   %ebp
c0103a16:	89 e5                	mov    %esp,%ebp
c0103a18:	83 ec 28             	sub    $0x28,%esp
    void *image = malloc(inode->length);
c0103a1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a1e:	8b 40 08             	mov    0x8(%eax),%eax
c0103a21:	89 04 24             	mov    %eax,(%esp)
c0103a24:	e8 73 9c 00 00       	call   c010d69c <malloc>
c0103a29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vfs_read(inode, 0, image, inode->length);
c0103a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a2f:	8b 40 08             	mov    0x8(%eax),%eax
c0103a32:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a39:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103a3d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a44:	00 
c0103a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a48:	89 04 24             	mov    %eax,(%esp)
c0103a4b:	e8 8a 1b 00 00       	call   c01055da <vfs_read>
    struct process_state *state = load_elf_thread(image, proc, argc, argv);
c0103a50:	8b 45 14             	mov    0x14(%ebp),%eax
c0103a53:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0103a57:	8b 45 10             	mov    0x10(%ebp),%eax
c0103a5a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103a5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a61:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a68:	89 04 24             	mov    %eax,(%esp)
c0103a6b:	e8 13 00 00 00       	call   c0103a83 <load_elf_thread>
c0103a70:	89 45 f0             	mov    %eax,-0x10(%ebp)
    free(image);
c0103a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a76:	89 04 24             	mov    %eax,(%esp)
c0103a79:	e8 05 9d 00 00       	call   c010d783 <free>

    return state;
c0103a7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0103a81:	c9                   	leave  
c0103a82:	c3                   	ret    

c0103a83 <load_elf_thread>:

struct process_state *load_elf_thread(void *image, struct process_state *proc, int argc, void **argv)
{
c0103a83:	55                   	push   %ebp
c0103a84:	89 e5                	mov    %esp,%ebp
c0103a86:	83 ec 58             	sub    $0x58,%esp
    struct elf_header *header = image;
c0103a89:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct elf_program_header *ph;

    if(!(header->ident[EI_MAG0] == ELF_MAG0 &&
c0103a8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a92:	0f b6 00             	movzbl (%eax),%eax
c0103a95:	3c 7f                	cmp    $0x7f,%al
c0103a97:	75 21                	jne    c0103aba <load_elf_thread+0x37>
            header->ident[EI_MAG1] == ELF_MAG1 &&
c0103a99:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a9c:	0f b6 40 01          	movzbl 0x1(%eax),%eax
struct process_state *load_elf_thread(void *image, struct process_state *proc, int argc, void **argv)
{
    struct elf_header *header = image;
    struct elf_program_header *ph;

    if(!(header->ident[EI_MAG0] == ELF_MAG0 &&
c0103aa0:	3c 45                	cmp    $0x45,%al
c0103aa2:	75 16                	jne    c0103aba <load_elf_thread+0x37>
            header->ident[EI_MAG1] == ELF_MAG1 &&
            header->ident[EI_MAG2] == ELF_MAG2 &&
c0103aa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103aa7:	0f b6 40 02          	movzbl 0x2(%eax),%eax
{
    struct elf_header *header = image;
    struct elf_program_header *ph;

    if(!(header->ident[EI_MAG0] == ELF_MAG0 &&
            header->ident[EI_MAG1] == ELF_MAG1 &&
c0103aab:	3c 4c                	cmp    $0x4c,%al
c0103aad:	75 0b                	jne    c0103aba <load_elf_thread+0x37>
            header->ident[EI_MAG2] == ELF_MAG2 &&
            header->ident[EI_MAG3] == ELF_MAG3))
c0103aaf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ab2:	0f b6 40 03          	movzbl 0x3(%eax),%eax
struct process_state *load_elf_thread(void *image, struct process_state *proc, int argc, void **argv)
{
    struct elf_header *header = image;
    struct elf_program_header *ph;

    if(!(header->ident[EI_MAG0] == ELF_MAG0 &&
c0103ab6:	3c 46                	cmp    $0x46,%al
c0103ab8:	74 16                	je     c0103ad0 <load_elf_thread+0x4d>
            header->ident[EI_MAG1] == ELF_MAG1 &&
            header->ident[EI_MAG2] == ELF_MAG2 &&
            header->ident[EI_MAG3] == ELF_MAG3))
    {
        printf("Invalid ELF-Magic!\n");
c0103aba:	c7 04 24 18 18 11 c0 	movl   $0xc0111818,(%esp)
c0103ac1:	e8 e4 81 00 00       	call   c010bcaa <puts>
        return NULL;
c0103ac6:	b8 00 00 00 00       	mov    $0x0,%eax
c0103acb:	e9 c6 01 00 00       	jmp    c0103c96 <load_elf_thread+0x213>
    }

    int i,j;
    ph = (struct elf_program_header*) (image + header->ph_offset);
c0103ad0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ad3:	8b 50 1c             	mov    0x1c(%eax),%edx
c0103ad6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ad9:	01 d0                	add    %edx,%eax
c0103adb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
	vmm_context_t context;
	vmm_create_context(&context);
c0103ade:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0103ae1:	89 04 24             	mov    %eax,(%esp)
c0103ae4:	e8 9c 95 00 00       	call   c010d085 <vmm_create_context>

    for(i = 0; i < header->ph_entry_count; i++, ph++)
c0103ae9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103af0:	e9 49 01 00 00       	jmp    c0103c3e <load_elf_thread+0x1bb>
    {
        if(ph->type == EPT_LOAD)
c0103af5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103af8:	8b 00                	mov    (%eax),%eax
c0103afa:	83 f8 01             	cmp    $0x1,%eax
c0103afd:	0f 85 33 01 00 00    	jne    c0103c36 <load_elf_thread+0x1b3>
        {
            int pages = NUM_PAGES(ph->mem_size);
c0103b03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b06:	8b 40 14             	mov    0x14(%eax),%eax
c0103b09:	05 ff 0f 00 00       	add    $0xfff,%eax
c0103b0e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103b13:	c1 e8 0c             	shr    $0xc,%eax
c0103b16:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            uintptr_t dest_start = (uintptr_t) arch_vaddr_find((arch_vmm_context_t*)current_context, pages,
c0103b19:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0103b1e:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0103b25:	00 
c0103b26:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c0103b2d:	ff 
c0103b2e:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
c0103b35:	c0 
c0103b36:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103b39:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103b3d:	89 04 24             	mov    %eax,(%esp)
c0103b40:	e8 c5 a3 00 00       	call   c010df0a <arch_vaddr_find>
c0103b45:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                   MEMORY_LAYOUT_KERNEL_START, MEMORY_LAYOUT_KERNEL_END, VMM_WRITABLE);

			// map pages
            for(j = 0; j < pages; j++)
c0103b48:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103b4f:	eb 71                	jmp    c0103bc2 <load_elf_thread+0x13f>
            {
                paddr_t paddr = (uintptr_t) pmm_alloc_page();
c0103b51:	e8 73 ba 00 00       	call   c010f5c9 <pmm_alloc_page>
c0103b56:	89 45 dc             	mov    %eax,-0x24(%ebp)
                vaddr_t vaddr = (uintptr_t) ph->virt_addr + j*PAGE_SIZE;
c0103b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b5c:	8b 50 08             	mov    0x8(%eax),%edx
c0103b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b62:	c1 e0 0c             	shl    $0xc,%eax
c0103b65:	01 d0                	add    %edx,%eax
c0103b67:	89 45 d8             	mov    %eax,-0x28(%ebp)
                uintptr_t dest = (uintptr_t) dest_start + j*PAGE_SIZE;
c0103b6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b6d:	c1 e0 0c             	shl    $0xc,%eax
c0103b70:	89 c2                	mov    %eax,%edx
c0103b72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103b75:	01 d0                	add    %edx,%eax
c0103b77:	89 45 d4             	mov    %eax,-0x2c(%ebp)

                vmm_map(&context, paddr, vaddr, VMM_WRITABLE | VMM_USER);
c0103b7a:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0103b81:	00 
c0103b82:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103b85:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103b89:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103b8c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103b90:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0103b93:	89 04 24             	mov    %eax,(%esp)
c0103b96:	e8 40 95 00 00       	call   c010d0db <vmm_map>
                vmm_map(current_context, paddr, dest, VMM_WRITABLE);
c0103b9b:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0103ba0:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0103ba7:	00 
c0103ba8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103bab:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103baf:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103bb2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103bb6:	89 04 24             	mov    %eax,(%esp)
c0103bb9:	e8 1d 95 00 00       	call   c010d0db <vmm_map>
            int pages = NUM_PAGES(ph->mem_size);
            uintptr_t dest_start = (uintptr_t) arch_vaddr_find((arch_vmm_context_t*)current_context, pages,
                                   MEMORY_LAYOUT_KERNEL_START, MEMORY_LAYOUT_KERNEL_END, VMM_WRITABLE);

			// map pages
            for(j = 0; j < pages; j++)
c0103bbe:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0103bc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bc5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0103bc8:	7c 87                	jl     c0103b51 <load_elf_thread+0xce>
                vmm_map(&context, paddr, vaddr, VMM_WRITABLE | VMM_USER);
                vmm_map(current_context, paddr, dest, VMM_WRITABLE);
            }

			// copy data
			memcpy((void*) dest_start, image + ph->offset, ph->file_size);
c0103bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bcd:	8b 50 10             	mov    0x10(%eax),%edx
c0103bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bd3:	8b 48 04             	mov    0x4(%eax),%ecx
c0103bd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd9:	01 c1                	add    %eax,%ecx
c0103bdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103bde:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103be2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0103be6:	89 04 24             	mov    %eax,(%esp)
c0103be9:	e8 11 f2 ff ff       	call   c0102dff <memcpy>

			// clear rest
            memset((void*)dest_start + ph->file_size, 0, ph->mem_size - ph->file_size);
c0103bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bf1:	8b 50 14             	mov    0x14(%eax),%edx
c0103bf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bf7:	8b 40 10             	mov    0x10(%eax),%eax
c0103bfa:	29 c2                	sub    %eax,%edx
c0103bfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bff:	8b 48 10             	mov    0x10(%eax),%ecx
c0103c02:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c05:	01 c8                	add    %ecx,%eax
c0103c07:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c0b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103c12:	00 
c0103c13:	89 04 24             	mov    %eax,(%esp)
c0103c16:	e8 5a f3 ff ff       	call   c0102f75 <memset>

            vmm_unmap_range(current_context, dest_start, pages);
c0103c1b:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0103c20:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103c23:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c27:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103c2a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103c2e:	89 04 24             	mov    %eax,(%esp)
c0103c31:	e8 50 95 00 00       	call   c010d186 <vmm_unmap_range>
    ph = (struct elf_program_header*) (image + header->ph_offset);
    
	vmm_context_t context;
	vmm_create_context(&context);

    for(i = 0; i < header->ph_entry_count; i++, ph++)
c0103c36:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103c3a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103c3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c41:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0103c45:	0f b7 c0             	movzwl %ax,%eax
c0103c48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103c4b:	0f 8f a4 fe ff ff    	jg     c0103af5 <load_elf_thread+0x72>

            vmm_unmap_range(current_context, dest_start, pages);
        }
    }

	thread_create(proc, 3, header->entry, NULL, argc,(void **) argv, NULL, &context);
c0103c51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c54:	8b 40 18             	mov    0x18(%eax),%eax
c0103c57:	8d 55 cc             	lea    -0x34(%ebp),%edx
c0103c5a:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c0103c5e:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0103c65:	00 
c0103c66:	8b 55 14             	mov    0x14(%ebp),%edx
c0103c69:	89 54 24 14          	mov    %edx,0x14(%esp)
c0103c6d:	8b 55 10             	mov    0x10(%ebp),%edx
c0103c70:	89 54 24 10          	mov    %edx,0x10(%esp)
c0103c74:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0103c7b:	00 
c0103c7c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0103c80:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0103c87:	00 
c0103c88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103c8b:	89 04 24             	mov    %eax,(%esp)
c0103c8e:	e8 76 0f 00 00       	call   c0104c09 <thread_create>

    return proc;
c0103c93:	8b 45 0c             	mov    0xc(%ebp),%eax
}
c0103c96:	c9                   	leave  
c0103c97:	c3                   	ret    

c0103c98 <min>:
 * @param a     inputvalue
 * @param b     inputvalue
 * @return the smallest inputvalue
 */
inline int min(int a, int b)
{
c0103c98:	55                   	push   %ebp
c0103c99:	89 e5                	mov    %esp,%ebp
    return (a < b) ? a : b;
c0103c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c9e:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0103ca1:	0f 4e 45 0c          	cmovle 0xc(%ebp),%eax
}
c0103ca5:	5d                   	pop    %ebp
c0103ca6:	c3                   	ret    

c0103ca7 <dump_thread_list>:
/**
 * @breif Prints a thread-list.
 * @param The thread list
 */
void dump_thread_list(list_t *threads)
{
c0103ca7:	55                   	push   %ebp
c0103ca8:	89 e5                	mov    %esp,%ebp
c0103caa:	83 ec 28             	sub    $0x28,%esp
    iterator_t it = iterator_create(threads);
c0103cad:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0103cb0:	8b 55 08             	mov    0x8(%ebp),%edx
c0103cb3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103cb7:	89 04 24             	mov    %eax,(%esp)
c0103cba:	e8 88 eb ff ff       	call   c0102847 <iterator_create>
c0103cbf:	83 ec 04             	sub    $0x4,%esp
    printf("-----%d-----\n", list_length(threads));
c0103cc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cc5:	89 04 24             	mov    %eax,(%esp)
c0103cc8:	e8 fd ea ff ff       	call   c01027ca <list_length>
c0103ccd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103cd1:	c7 04 24 2b 18 11 c0 	movl   $0xc011182b,(%esp)
c0103cd8:	e8 a0 f4 ff ff       	call   c010317d <printf>
    while(!list_is_empty(threads) && !list_is_last(&it))
c0103cdd:	eb 49                	jmp    c0103d28 <dump_thread_list+0x81>
    {
        struct thread_state *t = list_get_current(&it);
c0103cdf:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0103ce2:	89 04 24             	mov    %eax,(%esp)
c0103ce5:	e8 26 ec ff ff       	call   c0102910 <list_get_current>
c0103cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
        printf("PID: %d  TID: %d  FLAG: %08x\n",t->process->pid, t->tid, t->flags);
c0103ced:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cf0:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0103cf4:	0f b7 c8             	movzwl %ax,%ecx
c0103cf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cfa:	8b 50 20             	mov    0x20(%eax),%edx
c0103cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d00:	8b 40 04             	mov    0x4(%eax),%eax
c0103d03:	8b 00                	mov    (%eax),%eax
c0103d05:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0103d09:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103d0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103d11:	c7 04 24 39 18 11 c0 	movl   $0xc0111839,(%esp)
c0103d18:	e8 60 f4 ff ff       	call   c010317d <printf>
        list_next(&it);
c0103d1d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0103d20:	89 04 24             	mov    %eax,(%esp)
c0103d23:	e8 0d ec ff ff       	call   c0102935 <list_next>
 */
void dump_thread_list(list_t *threads)
{
    iterator_t it = iterator_create(threads);
    printf("-----%d-----\n", list_length(threads));
    while(!list_is_empty(threads) && !list_is_last(&it))
c0103d28:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d2b:	89 04 24             	mov    %eax,(%esp)
c0103d2e:	e8 d3 ea ff ff       	call   c0102806 <list_is_empty>
c0103d33:	85 c0                	test   %eax,%eax
c0103d35:	75 0f                	jne    c0103d46 <dump_thread_list+0x9f>
c0103d37:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0103d3a:	89 04 24             	mov    %eax,(%esp)
c0103d3d:	e8 1a ec ff ff       	call   c010295c <list_is_last>
c0103d42:	85 c0                	test   %eax,%eax
c0103d44:	74 99                	je     c0103cdf <dump_thread_list+0x38>
    {
        struct thread_state *t = list_get_current(&it);
        printf("PID: %d  TID: %d  FLAG: %08x\n",t->process->pid, t->tid, t->flags);
        list_next(&it);
    }
}
c0103d46:	c9                   	leave  
c0103d47:	c3                   	ret    

c0103d48 <process_create>:
 * @param flags     process flags (activ, freezed, zombies)
 * @param parent    pointer to the parent process struct (NULL: Kernel Init = parent)
 * @return          The new process-state
 */
struct process_state *process_create(const char *name, const char *desc, uint16_t flags,struct process_state *parent, uid_t uid, gid_t gid,struct pipeset *set)
{
c0103d48:	55                   	push   %ebp
c0103d49:	89 e5                	mov    %esp,%ebp
c0103d4b:	83 ec 58             	sub    $0x58,%esp
c0103d4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0103d51:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    struct process_state *state = malloc(sizeof(struct process_state));
c0103d55:	c7 04 24 4c 00 00 00 	movl   $0x4c,(%esp)
c0103d5c:	e8 3b 99 00 00       	call   c010d69c <malloc>
c0103d61:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int string_len = min(strlen(name), 255);
c0103d64:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d67:	89 04 24             	mov    %eax,(%esp)
c0103d6a:	e8 ba ec ff ff       	call   c0102a29 <strlen>
c0103d6f:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c0103d76:	00 
c0103d77:	89 04 24             	mov    %eax,(%esp)
c0103d7a:	e8 19 ff ff ff       	call   c0103c98 <min>
c0103d7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    state->name = (char *) malloc(string_len + 1);
c0103d82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d85:	83 c0 01             	add    $0x1,%eax
c0103d88:	89 04 24             	mov    %eax,(%esp)
c0103d8b:	e8 0c 99 00 00       	call   c010d69c <malloc>
c0103d90:	89 c2                	mov    %eax,%edx
c0103d92:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103d95:	89 50 0c             	mov    %edx,0xc(%eax)
    strncpy(state->name, name, string_len);
c0103d98:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103d9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103d9e:	8b 40 0c             	mov    0xc(%eax),%eax
c0103da1:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103da5:	8b 55 08             	mov    0x8(%ebp),%edx
c0103da8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103dac:	89 04 24             	mov    %eax,(%esp)
c0103daf:	e8 ed ec ff ff       	call   c0102aa1 <strncpy>
    state->name[string_len + 1] = 0;
c0103db4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103db7:	8b 40 0c             	mov    0xc(%eax),%eax
c0103dba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103dbd:	83 c2 01             	add    $0x1,%edx
c0103dc0:	01 d0                	add    %edx,%eax
c0103dc2:	c6 00 00             	movb   $0x0,(%eax)
    string_len = min(strlen(desc), 255);
c0103dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103dc8:	89 04 24             	mov    %eax,(%esp)
c0103dcb:	e8 59 ec ff ff       	call   c0102a29 <strlen>
c0103dd0:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c0103dd7:	00 
c0103dd8:	89 04 24             	mov    %eax,(%esp)
c0103ddb:	e8 b8 fe ff ff       	call   c0103c98 <min>
c0103de0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    state->desc = (char *) malloc(string_len + 1);
c0103de3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103de6:	83 c0 01             	add    $0x1,%eax
c0103de9:	89 04 24             	mov    %eax,(%esp)
c0103dec:	e8 ab 98 00 00       	call   c010d69c <malloc>
c0103df1:	89 c2                	mov    %eax,%edx
c0103df3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103df6:	89 50 10             	mov    %edx,0x10(%eax)
    strncpy(state->desc, desc, string_len);
c0103df9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103dfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103dff:	8b 40 10             	mov    0x10(%eax),%eax
c0103e02:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103e06:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103e09:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103e0d:	89 04 24             	mov    %eax,(%esp)
c0103e10:	e8 8c ec ff ff       	call   c0102aa1 <strncpy>
    state->desc[string_len + 1] = 0;
c0103e15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e18:	8b 40 10             	mov    0x10(%eax),%eax
c0103e1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103e1e:	83 c2 01             	add    $0x1,%edx
c0103e21:	01 d0                	add    %edx,%eax
c0103e23:	c6 00 00             	movb   $0x0,(%eax)
    state->flags = flags;
c0103e26:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e29:	0f b7 55 c4          	movzwl -0x3c(%ebp),%edx
c0103e2d:	66 89 50 3c          	mov    %dx,0x3c(%eax)
    state->files = list_create();
c0103e31:	e8 48 e7 ff ff       	call   c010257e <list_create>
c0103e36:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103e39:	89 42 1c             	mov    %eax,0x1c(%edx)
    state->env = list_create();
c0103e3c:	e8 3d e7 ff ff       	call   c010257e <list_create>
c0103e41:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103e44:	89 42 24             	mov    %eax,0x24(%edx)
    state->heap_top = 0;
c0103e47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e4a:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
    state->heap_lower_limit = 0;
c0103e51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e54:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    state->heap_upper_limit = 0;
c0103e5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e5e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
    if(parent != NULL)
c0103e65:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0103e69:	74 0e                	je     c0103e79 <process_create+0x131>
    {
        state->cwd = parent->cwd;
c0103e6b:	8b 45 14             	mov    0x14(%ebp),%eax
c0103e6e:	8b 50 18             	mov    0x18(%eax),%edx
c0103e71:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e74:	89 50 18             	mov    %edx,0x18(%eax)
c0103e77:	eb 0c                	jmp    c0103e85 <process_create+0x13d>
    }
    else
    {
        state->cwd = root;
c0103e79:	8b 15 10 80 11 c0    	mov    0xc0118010,%edx
c0103e7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e82:	89 50 18             	mov    %edx,0x18(%eax)
    }

    state->children = list_create();    // he crashes here...
c0103e85:	e8 f4 e6 ff ff       	call   c010257e <list_create>
c0103e8a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103e8d:	89 42 38             	mov    %eax,0x38(%edx)
    state->zombie_tids = list_create();
c0103e90:	e8 e9 e6 ff ff       	call   c010257e <list_create>
c0103e95:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103e98:	89 42 34             	mov    %eax,0x34(%edx)
    state->threads = list_create();
c0103e9b:	e8 de e6 ff ff       	call   c010257e <list_create>
c0103ea0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103ea3:	89 42 28             	mov    %eax,0x28(%edx)
    state->ports = list_create();
c0103ea6:	e8 d3 e6 ff ff       	call   c010257e <list_create>
c0103eab:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103eae:	89 42 20             	mov    %eax,0x20(%edx)
    state->tid_counter = 1;
c0103eb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103eb4:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
    state->uid = uid;
c0103ebb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ebe:	8b 55 18             	mov    0x18(%ebp),%edx
c0103ec1:	89 50 04             	mov    %edx,0x4(%eax)
    state->gid = gid;
c0103ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ec7:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0103eca:	89 50 08             	mov    %edx,0x8(%eax)

    if (parent == NULL)
c0103ecd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0103ed1:	75 0e                	jne    c0103ee1 <process_create+0x199>
        state->parent = kernel_state;
c0103ed3:	8b 15 08 a0 11 c0    	mov    0xc011a008,%edx
c0103ed9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103edc:	89 50 14             	mov    %edx,0x14(%eax)
c0103edf:	eb 09                	jmp    c0103eea <process_create+0x1a2>
    else
        state->parent = parent;
c0103ee1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ee4:	8b 55 14             	mov    0x14(%ebp),%edx
c0103ee7:	89 50 14             	mov    %edx,0x14(%eax)

    if (list_is_empty(zombie_list))
c0103eea:	a1 0c 80 11 c0       	mov    0xc011800c,%eax
c0103eef:	89 04 24             	mov    %eax,(%esp)
c0103ef2:	e8 0f e9 ff ff       	call   c0102806 <list_is_empty>
c0103ef7:	85 c0                	test   %eax,%eax
c0103ef9:	74 14                	je     c0103f0f <process_create+0x1c7>
    {
        state->pid = pid_counter++;
c0103efb:	a1 04 30 11 c0       	mov    0xc0113004,%eax
c0103f00:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103f03:	89 02                	mov    %eax,(%edx)
c0103f05:	83 c0 01             	add    $0x1,%eax
c0103f08:	a3 04 30 11 c0       	mov    %eax,0xc0113004
c0103f0d:	eb 14                	jmp    c0103f23 <process_create+0x1db>
    }
    else
    {
        state->pid = (pid_t) list_pop_front(zombie_list);
c0103f0f:	a1 0c 80 11 c0       	mov    0xc011800c,%eax
c0103f14:	89 04 24             	mov    %eax,(%esp)
c0103f17:	e8 69 e8 ff ff       	call   c0102785 <list_pop_front>
c0103f1c:	89 c2                	mov    %eax,%edx
c0103f1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f21:	89 10                	mov    %edx,(%eax)
    }


    list_lock(process_list);
c0103f23:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c0103f28:	89 04 24             	mov    %eax,(%esp)
c0103f2b:	e8 f1 e8 ff ff       	call   c0102821 <list_lock>
    if(state->pid != 1)
c0103f30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f33:	8b 00                	mov    (%eax),%eax
c0103f35:	83 f8 01             	cmp    $0x1,%eax
c0103f38:	74 39                	je     c0103f73 <process_create+0x22b>
    {
        struct child *new_child = malloc(sizeof(struct child));
c0103f3a:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0103f41:	e8 56 97 00 00       	call   c010d69c <malloc>
c0103f46:	89 45 e0             	mov    %eax,-0x20(%ebp)
        new_child->process = state;
c0103f49:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103f4c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103f4f:	89 50 04             	mov    %edx,0x4(%eax)
        new_child->status = 0;
c0103f52:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103f55:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        list_push_front(state->parent->children, new_child);
c0103f5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f5e:	8b 40 14             	mov    0x14(%eax),%eax
c0103f61:	8b 40 38             	mov    0x38(%eax),%eax
c0103f64:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103f67:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103f6b:	89 04 24             	mov    %eax,(%esp)
c0103f6e:	e8 42 e7 ff ff       	call   c01026b5 <list_push_front>
    }

    list_push_front(process_list, state);
c0103f73:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c0103f78:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103f7b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103f7f:	89 04 24             	mov    %eax,(%esp)
c0103f82:	e8 2e e7 ff ff       	call   c01026b5 <list_push_front>
    list_unlock(process_list);
c0103f87:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c0103f8c:	89 04 24             	mov    %eax,(%esp)
c0103f8f:	e8 a0 e8 ff ff       	call   c0102834 <list_unlock>

    /* create stream files*/
    vfs_inode_t *stdin;
    vfs_inode_t *stdout;
    vfs_inode_t *stderr;
    if(!set)
c0103f94:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0103f98:	75 41                	jne    c0103fdb <process_create+0x293>
    {
        stdin = vfs_create_pipe(uid, gid);
c0103f9a:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0103f9d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103fa1:	8b 45 18             	mov    0x18(%ebp),%eax
c0103fa4:	89 04 24             	mov    %eax,(%esp)
c0103fa7:	e8 90 13 00 00       	call   c010533c <vfs_create_pipe>
c0103fac:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stdout = vfs_create_pipe(uid, gid);
c0103faf:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0103fb2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103fb6:	8b 45 18             	mov    0x18(%ebp),%eax
c0103fb9:	89 04 24             	mov    %eax,(%esp)
c0103fbc:	e8 7b 13 00 00       	call   c010533c <vfs_create_pipe>
c0103fc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stderr = vfs_create_pipe(uid, gid);
c0103fc4:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0103fc7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103fcb:	8b 45 18             	mov    0x18(%ebp),%eax
c0103fce:	89 04 24             	mov    %eax,(%esp)
c0103fd1:	e8 66 13 00 00       	call   c010533c <vfs_create_pipe>
c0103fd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103fd9:	eb 1a                	jmp    c0103ff5 <process_create+0x2ad>
    }
    else
    {
        stdin = set->stdin;
c0103fdb:	8b 45 20             	mov    0x20(%ebp),%eax
c0103fde:	8b 00                	mov    (%eax),%eax
c0103fe0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stdout = set->stdout;
c0103fe3:	8b 45 20             	mov    0x20(%ebp),%eax
c0103fe6:	8b 40 04             	mov    0x4(%eax),%eax
c0103fe9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stderr = set->stderr;
c0103fec:	8b 45 20             	mov    0x20(%ebp),%eax
c0103fef:	8b 40 08             	mov    0x8(%eax),%eax
c0103ff2:	89 45 ec             	mov    %eax,-0x14(%ebp)


    /*extern vfs_inode_t *kbd_inode;
    kbd_inode = stdin;*/

    struct fd *desc0 = malloc(sizeof(struct fd));
c0103ff5:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0103ffc:	e8 9b 96 00 00       	call   c010d69c <malloc>
c0104001:	89 45 dc             	mov    %eax,-0x24(%ebp)
    desc0->id = 0;
c0104004:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104007:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    desc0->mode = 0x7ff;
c010400d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104010:	c7 40 08 ff 07 00 00 	movl   $0x7ff,0x8(%eax)
    desc0->flags = O_RDONLY;
c0104017:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010401a:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
    desc0->read_pos = 0;
c0104021:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104024:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc0->write_pos = 0;
c010402b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010402e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc0->inode = stdin;
c0104035:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104038:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010403b:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(state->files, desc0);
c010403e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104041:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104044:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104047:	89 54 24 04          	mov    %edx,0x4(%esp)
c010404b:	89 04 24             	mov    %eax,(%esp)
c010404e:	e8 0f e6 ff ff       	call   c0102662 <list_push_back>

    struct fd *desc1 = malloc(sizeof(struct fd));
c0104053:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010405a:	e8 3d 96 00 00       	call   c010d69c <malloc>
c010405f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    desc1->id = 1;
c0104062:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104065:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    desc1->mode = 0x7ff;
c010406b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010406e:	c7 40 08 ff 07 00 00 	movl   $0x7ff,0x8(%eax)
    desc1->flags = O_WRONLY;
c0104075:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104078:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
    desc1->read_pos = 0;
c010407f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104082:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc1->write_pos = 0;
c0104089:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010408c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc1->inode = stdout;
c0104093:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104096:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104099:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(state->files, desc1);
c010409c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010409f:	8b 40 1c             	mov    0x1c(%eax),%eax
c01040a2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01040a5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01040a9:	89 04 24             	mov    %eax,(%esp)
c01040ac:	e8 b1 e5 ff ff       	call   c0102662 <list_push_back>

    struct fd *desc2 = malloc(sizeof(struct fd));
c01040b1:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c01040b8:	e8 df 95 00 00       	call   c010d69c <malloc>
c01040bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    desc2->id = 2;
c01040c0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040c3:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    desc2->mode = 0x7ff;
c01040c9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040cc:	c7 40 08 ff 07 00 00 	movl   $0x7ff,0x8(%eax)
    desc2->flags = O_WRONLY;
c01040d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040d6:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
    desc2->read_pos = 0;
c01040dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040e0:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc2->write_pos = 0;
c01040e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040ea:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc2->inode = stderr;
c01040f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01040f7:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(state->files, desc2);
c01040fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040fd:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104100:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104103:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104107:	89 04 24             	mov    %eax,(%esp)
c010410a:	e8 53 e5 ff ff       	call   c0102662 <list_push_back>


    return state;
c010410f:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0104112:	c9                   	leave  
c0104113:	c3                   	ret    

c0104114 <process_kill>:
/**
 * @brief kills a process
 * @param process pointer to the process state
 */
void process_kill(struct process_state *process)
{
c0104114:	55                   	push   %ebp
c0104115:	89 e5                	mov    %esp,%ebp
c0104117:	83 ec 38             	sub    $0x38,%esp
    asm volatile("cli");
c010411a:	fa                   	cli    
    send_killed_process(process);
c010411b:	8b 45 08             	mov    0x8(%ebp),%eax
c010411e:	89 04 24             	mov    %eax,(%esp)
c0104121:	e8 8f 67 00 00       	call   c010a8b5 <send_killed_process>

    while(!list_is_empty(process->threads))
c0104126:	eb 51                	jmp    c0104179 <process_kill+0x65>
    {
        struct thread_state *thread = list_pop_front(process->threads);
c0104128:	8b 45 08             	mov    0x8(%ebp),%eax
c010412b:	8b 40 28             	mov    0x28(%eax),%eax
c010412e:	89 04 24             	mov    %eax,(%esp)
c0104131:	e8 4f e6 ff ff       	call   c0102785 <list_pop_front>
c0104136:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(thread == current_thread)
c0104139:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010413e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0104141:	75 2b                	jne    c010416e <process_kill+0x5a>
        {
            current_thread->flags |= THREAD_ZOMBIE;
c0104143:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104148:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c010414e:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c0104152:	83 ca 08             	or     $0x8,%edx
c0104155:	66 89 50 14          	mov    %dx,0x14(%eax)
            process->flags |= PROCESS_ZOMBIE;
c0104159:	8b 45 08             	mov    0x8(%ebp),%eax
c010415c:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0104160:	89 c2                	mov    %eax,%edx
c0104162:	83 ca 04             	or     $0x4,%edx
c0104165:	8b 45 08             	mov    0x8(%ebp),%eax
c0104168:	66 89 50 3c          	mov    %dx,0x3c(%eax)
c010416c:	eb 0b                	jmp    c0104179 <process_kill+0x65>
        }
        else
            thread_kill_sub(thread);
c010416e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104171:	89 04 24             	mov    %eax,(%esp)
c0104174:	e8 f0 0d 00 00       	call   c0104f69 <thread_kill_sub>
void process_kill(struct process_state *process)
{
    asm volatile("cli");
    send_killed_process(process);

    while(!list_is_empty(process->threads))
c0104179:	8b 45 08             	mov    0x8(%ebp),%eax
c010417c:	8b 40 28             	mov    0x28(%eax),%eax
c010417f:	89 04 24             	mov    %eax,(%esp)
c0104182:	e8 7f e6 ff ff       	call   c0102806 <list_is_empty>
c0104187:	85 c0                	test   %eax,%eax
c0104189:	74 9d                	je     c0104128 <process_kill+0x14>
        }
        else
            thread_kill_sub(thread);
    }

    list_lock(process->children);
c010418b:	8b 45 08             	mov    0x8(%ebp),%eax
c010418e:	8b 40 38             	mov    0x38(%eax),%eax
c0104191:	89 04 24             	mov    %eax,(%esp)
c0104194:	e8 88 e6 ff ff       	call   c0102821 <list_lock>
    while(!list_is_empty(process->children))
c0104199:	eb 34                	jmp    c01041cf <process_kill+0xbb>
    {
        struct child *current_child = list_pop_front(process->children);
c010419b:	8b 45 08             	mov    0x8(%ebp),%eax
c010419e:	8b 40 38             	mov    0x38(%eax),%eax
c01041a1:	89 04 24             	mov    %eax,(%esp)
c01041a4:	e8 dc e5 ff ff       	call   c0102785 <list_pop_front>
c01041a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(current_child->process)
c01041ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041af:	8b 40 04             	mov    0x4(%eax),%eax
c01041b2:	85 c0                	test   %eax,%eax
c01041b4:	74 0e                	je     c01041c4 <process_kill+0xb0>
            process_kill(current_child->process);
c01041b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041b9:	8b 40 04             	mov    0x4(%eax),%eax
c01041bc:	89 04 24             	mov    %eax,(%esp)
c01041bf:	e8 50 ff ff ff       	call   c0104114 <process_kill>
        free(current_child);
c01041c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041c7:	89 04 24             	mov    %eax,(%esp)
c01041ca:	e8 b4 95 00 00       	call   c010d783 <free>
        else
            thread_kill_sub(thread);
    }

    list_lock(process->children);
    while(!list_is_empty(process->children))
c01041cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01041d2:	8b 40 38             	mov    0x38(%eax),%eax
c01041d5:	89 04 24             	mov    %eax,(%esp)
c01041d8:	e8 29 e6 ff ff       	call   c0102806 <list_is_empty>
c01041dd:	85 c0                	test   %eax,%eax
c01041df:	74 ba                	je     c010419b <process_kill+0x87>
        struct child *current_child = list_pop_front(process->children);
        if(current_child->process)
            process_kill(current_child->process);
        free(current_child);
    }
    free(process->children);
c01041e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01041e4:	8b 40 38             	mov    0x38(%eax),%eax
c01041e7:	89 04 24             	mov    %eax,(%esp)
c01041ea:	e8 94 95 00 00       	call   c010d783 <free>

    list_lock(process->parent->children);
c01041ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01041f2:	8b 40 14             	mov    0x14(%eax),%eax
c01041f5:	8b 40 38             	mov    0x38(%eax),%eax
c01041f8:	89 04 24             	mov    %eax,(%esp)
c01041fb:	e8 21 e6 ff ff       	call   c0102821 <list_lock>
    iterator_t parents_children_it = iterator_create(process->parent->children);
c0104200:	8b 45 08             	mov    0x8(%ebp),%eax
c0104203:	8b 40 14             	mov    0x14(%eax),%eax
c0104206:	8b 50 38             	mov    0x38(%eax),%edx
c0104209:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010420c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104210:	89 04 24             	mov    %eax,(%esp)
c0104213:	e8 2f e6 ff ff       	call   c0102847 <iterator_create>
c0104218:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_empty(process->parent->children) && !list_is_last(&parents_children_it))
c010421b:	eb 30                	jmp    c010424d <process_kill+0x139>
    {
        struct child *current_child = list_get_current(&parents_children_it);
c010421d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0104220:	89 04 24             	mov    %eax,(%esp)
c0104223:	e8 e8 e6 ff ff       	call   c0102910 <list_get_current>
c0104228:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if(current_child->process == process)
c010422b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010422e:	8b 40 04             	mov    0x4(%eax),%eax
c0104231:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104234:	75 0c                	jne    c0104242 <process_kill+0x12e>
        {
            current_child->process = 0;
c0104236:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104239:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
c0104240:	eb 2f                	jmp    c0104271 <process_kill+0x15d>
        }
        list_next(&parents_children_it);
c0104242:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0104245:	89 04 24             	mov    %eax,(%esp)
c0104248:	e8 e8 e6 ff ff       	call   c0102935 <list_next>
    free(process->children);

    list_lock(process->parent->children);
    iterator_t parents_children_it = iterator_create(process->parent->children);

    while(!list_is_empty(process->parent->children) && !list_is_last(&parents_children_it))
c010424d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104250:	8b 40 14             	mov    0x14(%eax),%eax
c0104253:	8b 40 38             	mov    0x38(%eax),%eax
c0104256:	89 04 24             	mov    %eax,(%esp)
c0104259:	e8 a8 e5 ff ff       	call   c0102806 <list_is_empty>
c010425e:	85 c0                	test   %eax,%eax
c0104260:	75 0f                	jne    c0104271 <process_kill+0x15d>
c0104262:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0104265:	89 04 24             	mov    %eax,(%esp)
c0104268:	e8 ef e6 ff ff       	call   c010295c <list_is_last>
c010426d:	85 c0                	test   %eax,%eax
c010426f:	74 ac                	je     c010421d <process_kill+0x109>
            current_child->process = 0;
            break;
        }
        list_next(&parents_children_it);
    }
    list_unlock(process->parent->children);
c0104271:	8b 45 08             	mov    0x8(%ebp),%eax
c0104274:	8b 40 14             	mov    0x14(%eax),%eax
c0104277:	8b 40 38             	mov    0x38(%eax),%eax
c010427a:	89 04 24             	mov    %eax,(%esp)
c010427d:	e8 b2 e5 ff ff       	call   c0102834 <list_unlock>

    list_destroy(process->ports);
c0104282:	8b 45 08             	mov    0x8(%ebp),%eax
c0104285:	8b 40 20             	mov    0x20(%eax),%eax
c0104288:	89 04 24             	mov    %eax,(%esp)
c010428b:	e8 46 e3 ff ff       	call   c01025d6 <list_destroy>
    list_destroy(process->zombie_tids);
c0104290:	8b 45 08             	mov    0x8(%ebp),%eax
c0104293:	8b 40 34             	mov    0x34(%eax),%eax
c0104296:	89 04 24             	mov    %eax,(%esp)
c0104299:	e8 38 e3 ff ff       	call   c01025d6 <list_destroy>

    list_lock(process_list);
c010429e:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c01042a3:	89 04 24             	mov    %eax,(%esp)
c01042a6:	e8 76 e5 ff ff       	call   c0102821 <list_lock>
    iterator_t process_it = iterator_create(process_list);
c01042ab:	8b 15 08 80 11 c0    	mov    0xc0118008,%edx
c01042b1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01042b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01042b8:	89 04 24             	mov    %eax,(%esp)
c01042bb:	e8 87 e5 ff ff       	call   c0102847 <iterator_create>
c01042c0:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_empty(process_list) &&!list_is_last(&process_it))
c01042c3:	eb 28                	jmp    c01042ed <process_kill+0x1d9>
    {
        if(((struct process_state *)list_get_current(&process_it)) == process)
c01042c5:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01042c8:	89 04 24             	mov    %eax,(%esp)
c01042cb:	e8 40 e6 ff ff       	call   c0102910 <list_get_current>
c01042d0:	3b 45 08             	cmp    0x8(%ebp),%eax
c01042d3:	75 0d                	jne    c01042e2 <process_kill+0x1ce>
        {
            list_remove(&process_it);
c01042d5:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01042d8:	89 04 24             	mov    %eax,(%esp)
c01042db:	e8 c2 e6 ff ff       	call   c01029a2 <list_remove>
            break;
c01042e0:	eb 2b                	jmp    c010430d <process_kill+0x1f9>
        }
        list_next(&process_it);
c01042e2:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01042e5:	89 04 24             	mov    %eax,(%esp)
c01042e8:	e8 48 e6 ff ff       	call   c0102935 <list_next>
    list_destroy(process->zombie_tids);

    list_lock(process_list);
    iterator_t process_it = iterator_create(process_list);

    while(!list_is_empty(process_list) &&!list_is_last(&process_it))
c01042ed:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c01042f2:	89 04 24             	mov    %eax,(%esp)
c01042f5:	e8 0c e5 ff ff       	call   c0102806 <list_is_empty>
c01042fa:	85 c0                	test   %eax,%eax
c01042fc:	75 0f                	jne    c010430d <process_kill+0x1f9>
c01042fe:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0104301:	89 04 24             	mov    %eax,(%esp)
c0104304:	e8 53 e6 ff ff       	call   c010295c <list_is_last>
c0104309:	85 c0                	test   %eax,%eax
c010430b:	74 b8                	je     c01042c5 <process_kill+0x1b1>
            list_remove(&process_it);
            break;
        }
        list_next(&process_it);
    }
    list_unlock(process_list);
c010430d:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c0104312:	89 04 24             	mov    %eax,(%esp)
c0104315:	e8 1a e5 ff ff       	call   c0102834 <list_unlock>

    free(process->name);
c010431a:	8b 45 08             	mov    0x8(%ebp),%eax
c010431d:	8b 40 0c             	mov    0xc(%eax),%eax
c0104320:	89 04 24             	mov    %eax,(%esp)
c0104323:	e8 5b 94 00 00       	call   c010d783 <free>
    free(process->desc);
c0104328:	8b 45 08             	mov    0x8(%ebp),%eax
c010432b:	8b 40 10             	mov    0x10(%eax),%eax
c010432e:	89 04 24             	mov    %eax,(%esp)
c0104331:	e8 4d 94 00 00       	call   c010d783 <free>

    if(!(process->flags & PROCESS_ZOMBIE) )
c0104336:	8b 45 08             	mov    0x8(%ebp),%eax
c0104339:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010433d:	0f b7 c0             	movzwl %ax,%eax
c0104340:	83 e0 04             	and    $0x4,%eax
c0104343:	85 c0                	test   %eax,%eax
c0104345:	75 0b                	jne    c0104352 <process_kill+0x23e>
    {
        free(process);
c0104347:	8b 45 08             	mov    0x8(%ebp),%eax
c010434a:	89 04 24             	mov    %eax,(%esp)
c010434d:	e8 31 94 00 00       	call   c010d783 <free>
    }
    asm volatile("sti");
c0104352:	fb                   	sti    
}
c0104353:	c9                   	leave  
c0104354:	c3                   	ret    

c0104355 <process_find>:
 * @brief finds a process by ID
 * @param pid Process ID
 * @return process state pointer or NULL if the process does not exist
 */
struct process_state *process_find(pid_t pid)
{
c0104355:	55                   	push   %ebp
c0104356:	89 e5                	mov    %esp,%ebp
c0104358:	83 ec 28             	sub    $0x28,%esp
    iterator_t process_it = iterator_create(process_list);
c010435b:	8b 15 08 80 11 c0    	mov    0xc0118008,%edx
c0104361:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0104364:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104368:	89 04 24             	mov    %eax,(%esp)
c010436b:	e8 d7 e4 ff ff       	call   c0102847 <iterator_create>
c0104370:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(process_list) && !list_is_last(&process_it))
c0104373:	eb 2a                	jmp    c010439f <process_find+0x4a>
    {
        if(((struct process_state *)list_get_current(&process_it))->pid == pid)
c0104375:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0104378:	89 04 24             	mov    %eax,(%esp)
c010437b:	e8 90 e5 ff ff       	call   c0102910 <list_get_current>
c0104380:	8b 00                	mov    (%eax),%eax
c0104382:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104385:	75 0d                	jne    c0104394 <process_find+0x3f>
        {
            return (struct process_state *)list_get_current(&process_it);
c0104387:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010438a:	89 04 24             	mov    %eax,(%esp)
c010438d:	e8 7e e5 ff ff       	call   c0102910 <list_get_current>
c0104392:	eb 30                	jmp    c01043c4 <process_find+0x6f>
        }
        list_next(&process_it);
c0104394:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0104397:	89 04 24             	mov    %eax,(%esp)
c010439a:	e8 96 e5 ff ff       	call   c0102935 <list_next>
 * @return process state pointer or NULL if the process does not exist
 */
struct process_state *process_find(pid_t pid)
{
    iterator_t process_it = iterator_create(process_list);
    while(!list_is_empty(process_list) && !list_is_last(&process_it))
c010439f:	a1 08 80 11 c0       	mov    0xc0118008,%eax
c01043a4:	89 04 24             	mov    %eax,(%esp)
c01043a7:	e8 5a e4 ff ff       	call   c0102806 <list_is_empty>
c01043ac:	85 c0                	test   %eax,%eax
c01043ae:	75 0f                	jne    c01043bf <process_find+0x6a>
c01043b0:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01043b3:	89 04 24             	mov    %eax,(%esp)
c01043b6:	e8 a1 e5 ff ff       	call   c010295c <list_is_last>
c01043bb:	85 c0                	test   %eax,%eax
c01043bd:	74 b6                	je     c0104375 <process_find+0x20>
        {
            return (struct process_state *)list_get_current(&process_it);
        }
        list_next(&process_it);
    }
    return 0;
c01043bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01043c4:	c9                   	leave  
c01043c5:	c3                   	ret    

c01043c6 <sys_exit>:
/**
 * @brief terminates the current process (linux function for the API)
 * @param cpu registers of the corrent process
 */
void sys_exit(struct cpu_state **cpu)
{
c01043c6:	55                   	push   %ebp
c01043c7:	89 e5                	mov    %esp,%ebp
c01043c9:	83 ec 28             	sub    $0x28,%esp
    iterator_t parents_children_it = iterator_create(current_thread->process->parent->children);
c01043cc:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01043d1:	8b 40 04             	mov    0x4(%eax),%eax
c01043d4:	8b 40 14             	mov    0x14(%eax),%eax
c01043d7:	8b 50 38             	mov    0x38(%eax),%edx
c01043da:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01043dd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01043e1:	89 04 24             	mov    %eax,(%esp)
c01043e4:	e8 5e e4 ff ff       	call   c0102847 <iterator_create>
c01043e9:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_empty(current_thread->process->parent->children) && !list_is_last(&parents_children_it))
c01043ec:	eb 3c                	jmp    c010442a <sys_exit+0x64>
    {
        struct child *current_child = list_get_current(&parents_children_it);
c01043ee:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01043f1:	89 04 24             	mov    %eax,(%esp)
c01043f4:	e8 17 e5 ff ff       	call   c0102910 <list_get_current>
c01043f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(current_child->process == current_thread->process)
c01043fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01043ff:	8b 50 04             	mov    0x4(%eax),%edx
c0104402:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104407:	8b 40 04             	mov    0x4(%eax),%eax
c010440a:	39 c2                	cmp    %eax,%edx
c010440c:	75 11                	jne    c010441f <sys_exit+0x59>
        {
            current_child->status = (*cpu)->CPU_ARG1;
c010440e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104411:	8b 00                	mov    (%eax),%eax
c0104413:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104416:	89 c2                	mov    %eax,%edx
c0104418:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010441b:	89 10                	mov    %edx,(%eax)
            break;
c010441d:	eb 34                	jmp    c0104453 <sys_exit+0x8d>
        }
        list_next(&parents_children_it);
c010441f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0104422:	89 04 24             	mov    %eax,(%esp)
c0104425:	e8 0b e5 ff ff       	call   c0102935 <list_next>
 */
void sys_exit(struct cpu_state **cpu)
{
    iterator_t parents_children_it = iterator_create(current_thread->process->parent->children);

    while(!list_is_empty(current_thread->process->parent->children) && !list_is_last(&parents_children_it))
c010442a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010442f:	8b 40 04             	mov    0x4(%eax),%eax
c0104432:	8b 40 14             	mov    0x14(%eax),%eax
c0104435:	8b 40 38             	mov    0x38(%eax),%eax
c0104438:	89 04 24             	mov    %eax,(%esp)
c010443b:	e8 c6 e3 ff ff       	call   c0102806 <list_is_empty>
c0104440:	85 c0                	test   %eax,%eax
c0104442:	75 0f                	jne    c0104453 <sys_exit+0x8d>
c0104444:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0104447:	89 04 24             	mov    %eax,(%esp)
c010444a:	e8 0d e5 ff ff       	call   c010295c <list_is_last>
c010444f:	85 c0                	test   %eax,%eax
c0104451:	74 9b                	je     c01043ee <sys_exit+0x28>
            break;
        }
        list_next(&parents_children_it);
    }

    process_kill(current_thread->process);
c0104453:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104458:	8b 40 04             	mov    0x4(%eax),%eax
c010445b:	89 04 24             	mov    %eax,(%esp)
c010445e:	e8 b1 fc ff ff       	call   c0104114 <process_kill>
    *cpu = task_schedule(*cpu);
c0104463:	8b 45 08             	mov    0x8(%ebp),%eax
c0104466:	8b 00                	mov    (%eax),%eax
c0104468:	89 04 24             	mov    %eax,(%esp)
c010446b:	e8 15 05 00 00       	call   c0104985 <task_schedule>
c0104470:	8b 55 08             	mov    0x8(%ebp),%edx
c0104473:	89 02                	mov    %eax,(%edx)
}
c0104475:	c9                   	leave  
c0104476:	c3                   	ret    

c0104477 <sys_fork>:
/**
 * @brief creates a new child process (linux function for the API)
 * @param cpu registers of the current process
 */
void sys_fork(struct cpu_state **cpu)
{
c0104477:	55                   	push   %ebp
c0104478:	89 e5                	mov    %esp,%ebp
c010447a:	57                   	push   %edi
c010447b:	56                   	push   %esi
c010447c:	53                   	push   %ebx
c010447d:	83 ec 5c             	sub    $0x5c,%esp
    vmm_context_t context;
    vmm_create_context(&context);
c0104480:	8d 45 bc             	lea    -0x44(%ebp),%eax
c0104483:	89 04 24             	mov    %eax,(%esp)
c0104486:	e8 fa 8b 00 00       	call   c010d085 <vmm_create_context>
    arch_fork_context(&current_thread->context.arch_context, &context.arch_context);
c010448b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104490:	8d 50 08             	lea    0x8(%eax),%edx
c0104493:	8d 45 bc             	lea    -0x44(%ebp),%eax
c0104496:	89 44 24 04          	mov    %eax,0x4(%esp)
c010449a:	89 14 24             	mov    %edx,(%esp)
c010449d:	e8 a6 96 00 00       	call   c010db48 <arch_fork_context>
    struct process_state *new_process = process_create(current_thread->process->name ,current_thread->process->desc ,current_thread->process->flags ,current_thread->process, current_thread->process->uid, current_thread->process->gid, NULL);
c01044a2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044a7:	8b 40 04             	mov    0x4(%eax),%eax
c01044aa:	8b 78 08             	mov    0x8(%eax),%edi
c01044ad:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044b2:	8b 40 04             	mov    0x4(%eax),%eax
c01044b5:	8b 70 04             	mov    0x4(%eax),%esi
c01044b8:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044bd:	8b 58 04             	mov    0x4(%eax),%ebx
c01044c0:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044c5:	8b 40 04             	mov    0x4(%eax),%eax
c01044c8:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01044cc:	0f b7 c8             	movzwl %ax,%ecx
c01044cf:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044d4:	8b 40 04             	mov    0x4(%eax),%eax
c01044d7:	8b 50 10             	mov    0x10(%eax),%edx
c01044da:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01044df:	8b 40 04             	mov    0x4(%eax),%eax
c01044e2:	8b 40 0c             	mov    0xc(%eax),%eax
c01044e5:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c01044ec:	00 
c01044ed:	89 7c 24 14          	mov    %edi,0x14(%esp)
c01044f1:	89 74 24 10          	mov    %esi,0x10(%esp)
c01044f5:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01044f9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01044fd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104501:	89 04 24             	mov    %eax,(%esp)
c0104504:	e8 3f f8 ff ff       	call   c0103d48 <process_create>
c0104509:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct thread_state *new_thread = thread_create(new_process, !(current_thread->flags & THREAD_KERNELMODE), 0, *cpu, 0, NULL, NULL, &context);
c010450c:	8b 45 08             	mov    0x8(%ebp),%eax
c010450f:	8b 10                	mov    (%eax),%edx
c0104511:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104516:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010451a:	0f b7 c0             	movzwl %ax,%eax
c010451d:	83 e0 04             	and    $0x4,%eax
c0104520:	85 c0                	test   %eax,%eax
c0104522:	0f 94 c0             	sete   %al
c0104525:	0f b6 c0             	movzbl %al,%eax
c0104528:	8d 4d bc             	lea    -0x44(%ebp),%ecx
c010452b:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
c010452f:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0104536:	00 
c0104537:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c010453e:	00 
c010453f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0104546:	00 
c0104547:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010454b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104552:	00 
c0104553:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104557:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010455a:	89 04 24             	mov    %eax,(%esp)
c010455d:	e8 a7 06 00 00       	call   c0104c09 <thread_create>
c0104562:	89 45 dc             	mov    %eax,-0x24(%ebp)

    void *stack_src = (void *)(MEMORY_LAYOUT_STACK_TOP - THREAD_STACK_SIZE);
c0104565:	c7 45 d8 00 f0 ff bf 	movl   $0xbffff000,-0x28(%ebp)
    paddr_t pframe = pmm_alloc_page();
c010456c:	e8 58 b0 00 00       	call   c010f5c9 <pmm_alloc_page>
c0104571:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    vmm_map(&new_thread->context, pframe, MEMORY_LAYOUT_STACK_TOP-0x1000, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c0104574:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104577:	8d 50 08             	lea    0x8(%eax),%edx
c010457a:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c0104581:	00 
c0104582:	c7 44 24 08 00 f0 ff 	movl   $0xbffff000,0x8(%esp)
c0104589:	bf 
c010458a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010458d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104591:	89 14 24             	mov    %edx,(%esp)
c0104594:	e8 42 8b 00 00       	call   c010d0db <vmm_map>
    void *stack = (void *)vmm_automap_kernel(current_context, pframe, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c0104599:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010459e:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c01045a5:	00 
c01045a6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01045a9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01045ad:	89 04 24             	mov    %eax,(%esp)
c01045b0:	e8 0f 8c 00 00       	call   c010d1c4 <vmm_automap_kernel>
c01045b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
    memcpy(stack, stack_src, THREAD_STACK_SIZE);
c01045b8:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01045bf:	00 
c01045c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01045c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01045c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01045ca:	89 04 24             	mov    %eax,(%esp)
c01045cd:	e8 2d e8 ff ff       	call   c0102dff <memcpy>

    struct list_node *node = current_thread->process->files->head->next;
c01045d2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01045d7:	8b 40 04             	mov    0x4(%eax),%eax
c01045da:	8b 40 1c             	mov    0x1c(%eax),%eax
c01045dd:	8b 40 04             	mov    0x4(%eax),%eax
c01045e0:	8b 00                	mov    (%eax),%eax
c01045e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    struct list_node *head = current_thread->process->files->head;
c01045e5:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01045ea:	8b 40 04             	mov    0x4(%eax),%eax
c01045ed:	8b 40 1c             	mov    0x1c(%eax),%eax
c01045f0:	8b 40 04             	mov    0x4(%eax),%eax
c01045f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
    while(node != head)
c01045f6:	eb 4f                	jmp    c0104647 <sys_fork+0x1d0>
    {
        struct fd *dest = malloc(sizeof(struct fd));
c01045f8:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c01045ff:	e8 98 90 00 00       	call   c010d69c <malloc>
c0104604:	89 45 c8             	mov    %eax,-0x38(%ebp)
        struct fd *src  = (struct fd*) node->element;
c0104607:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010460a:	8b 40 08             	mov    0x8(%eax),%eax
c010460d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        memcpy(dest, src, sizeof(struct fd));
c0104610:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
c0104617:	00 
c0104618:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010461b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010461f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104622:	89 04 24             	mov    %eax,(%esp)
c0104625:	e8 d5 e7 ff ff       	call   c0102dff <memcpy>
        list_push_back(new_process->files, dest);
c010462a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010462d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104630:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104633:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104637:	89 04 24             	mov    %eax,(%esp)
c010463a:	e8 23 e0 ff ff       	call   c0102662 <list_push_back>

        node = node->next;
c010463f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104642:	8b 00                	mov    (%eax),%eax
c0104644:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    void *stack = (void *)vmm_automap_kernel(current_context, pframe, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
    memcpy(stack, stack_src, THREAD_STACK_SIZE);

    struct list_node *node = current_thread->process->files->head->next;
    struct list_node *head = current_thread->process->files->head;
    while(node != head)
c0104647:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010464a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010464d:	75 a9                	jne    c01045f8 <sys_fork+0x181>
        list_push_back(new_process->files, dest);

        node = node->next;
    }

    new_thread->state->CPU_ARG0 = 0;
c010464f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104652:	8b 00                	mov    (%eax),%eax
c0104654:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    current_thread->state->CPU_ARG0 = new_process->pid;
c010465b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104660:	8b 00                	mov    (%eax),%eax
c0104662:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104665:	8b 12                	mov    (%edx),%edx
c0104667:	89 50 28             	mov    %edx,0x28(%eax)
}
c010466a:	83 c4 5c             	add    $0x5c,%esp
c010466d:	5b                   	pop    %ebx
c010466e:	5e                   	pop    %esi
c010466f:	5f                   	pop    %edi
c0104670:	5d                   	pop    %ebp
c0104671:	c3                   	ret    

c0104672 <sys_waitpid>:
 *  @param cpu registers of the current process
 *  Not completed
 */

void sys_waitpid(struct cpu_state **cpu)
{
c0104672:	55                   	push   %ebp
c0104673:	89 e5                	mov    %esp,%ebp
c0104675:	83 ec 28             	sub    $0x28,%esp
    list_set_first(&thread_iterator);
c0104678:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c010467f:	e8 f3 e2 ff ff       	call   c0102977 <list_set_first>
    while(list_get_current(&thread_iterator) != current_thread)
c0104684:	eb 0c                	jmp    c0104692 <sys_waitpid+0x20>
    {
        list_next(&thread_iterator);
c0104686:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c010468d:	e8 a3 e2 ff ff       	call   c0102935 <list_next>
 */

void sys_waitpid(struct cpu_state **cpu)
{
    list_set_first(&thread_iterator);
    while(list_get_current(&thread_iterator) != current_thread)
c0104692:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104699:	e8 72 e2 ff ff       	call   c0102910 <list_get_current>
c010469e:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01046a4:	39 d0                	cmp    %edx,%eax
c01046a6:	75 de                	jne    c0104686 <sys_waitpid+0x14>
    {
        list_next(&thread_iterator);
    }
    list_remove(&thread_iterator);
c01046a8:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c01046af:	e8 ee e2 ff ff       	call   c01029a2 <list_remove>
    current_thread->ticks = 0;
c01046b4:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01046b9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    current_thread->flags |= THREAD_WAITPID;
c01046c0:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01046c5:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01046cb:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c01046cf:	83 ca 10             	or     $0x10,%edx
c01046d2:	66 89 50 14          	mov    %dx,0x14(%eax)
    current_thread->waitpid = (*cpu)->CPU_ARG1;
c01046d6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01046db:	8b 55 08             	mov    0x8(%ebp),%edx
c01046de:	8b 12                	mov    (%edx),%edx
c01046e0:	8b 52 1c             	mov    0x1c(%edx),%edx
c01046e3:	89 50 18             	mov    %edx,0x18(%eax)
    add_trigger(WAIT_PID, current_thread->waitpid, false, (void *)current_thread,NULL);
c01046e6:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01046ec:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01046f1:	8b 40 18             	mov    0x18(%eax),%eax
c01046f4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01046fb:	00 
c01046fc:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0104700:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104707:	00 
c0104708:	89 44 24 04          	mov    %eax,0x4(%esp)
c010470c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0104713:	e8 cc 5f 00 00       	call   c010a6e4 <add_trigger>
    *cpu = task_schedule(*cpu);
c0104718:	8b 45 08             	mov    0x8(%ebp),%eax
c010471b:	8b 00                	mov    (%eax),%eax
c010471d:	89 04 24             	mov    %eax,(%esp)
c0104720:	e8 60 02 00 00       	call   c0104985 <task_schedule>
c0104725:	8b 55 08             	mov    0x8(%ebp),%edx
c0104728:	89 02                	mov    %eax,(%edx)
}
c010472a:	c9                   	leave  
c010472b:	c3                   	ret    

c010472c <sys_getpid>:

void sys_getpid(struct cpu_state **cpu)
{
c010472c:	55                   	push   %ebp
c010472d:	89 e5                	mov    %esp,%ebp
    (*cpu)->CPU_ARG0 = current_thread->process->pid;
c010472f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104732:	8b 00                	mov    (%eax),%eax
c0104734:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c010473a:	8b 52 04             	mov    0x4(%edx),%edx
c010473d:	8b 12                	mov    (%edx),%edx
c010473f:	89 50 28             	mov    %edx,0x28(%eax)
}
c0104742:	5d                   	pop    %ebp
c0104743:	c3                   	ret    

c0104744 <sys_execve>:
 * executes a programm
 * @param cpu registers of the current process
 * todo: the function is still a litte bit slow and envp is not taken over from the new process.
 */
void sys_execve(struct cpu_state **cpu)
{
c0104744:	55                   	push   %ebp
c0104745:	89 e5                	mov    %esp,%ebp
c0104747:	83 ec 38             	sub    $0x38,%esp
    char *filename = (char*) (*cpu)->CPU_ARG1;
c010474a:	8b 45 08             	mov    0x8(%ebp),%eax
c010474d:	8b 00                	mov    (%eax),%eax
c010474f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104752:	89 45 f4             	mov    %eax,-0xc(%ebp)
     char **argv = (char**) (*cpu)->CPU_ARG2;
c0104755:	8b 45 08             	mov    0x8(%ebp),%eax
c0104758:	8b 00                	mov    (%eax),%eax
c010475a:	8b 40 24             	mov    0x24(%eax),%eax
c010475d:	89 45 f0             	mov    %eax,-0x10(%ebp)
     //char **envp = (char**) (*cpu)->CPU_ARG3;

     vfs_inode_t *filenode = vfs_lookup_path(filename);
c0104760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104763:	89 04 24             	mov    %eax,(%esp)
c0104766:	e8 4a 11 00 00       	call   c01058b5 <vfs_lookup_path>
c010476b:	89 45 ec             	mov    %eax,-0x14(%ebp)
     printf(filename);
c010476e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104771:	89 04 24             	mov    %eax,(%esp)
c0104774:	e8 04 ea ff ff       	call   c010317d <printf>
     if(filenode == NULL)
c0104779:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010477d:	75 11                	jne    c0104790 <sys_execve+0x4c>
     {
        (*cpu)->CPU_ARG0 = _FAILURE;
c010477f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104782:	8b 00                	mov    (%eax),%eax
c0104784:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
         return;
c010478b:	e9 b8 00 00 00       	jmp    c0104848 <sys_execve+0x104>
     }

     struct process_state *process = current_thread->process;
c0104790:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104795:	8b 40 04             	mov    0x4(%eax),%eax
c0104798:	89 45 e8             	mov    %eax,-0x18(%ebp)

     while(!list_is_empty(process->threads))
c010479b:	eb 51                	jmp    c01047ee <sys_execve+0xaa>
     {
         struct thread_state *thread = list_pop_front(process->threads);
c010479d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047a0:	8b 40 28             	mov    0x28(%eax),%eax
c01047a3:	89 04 24             	mov    %eax,(%esp)
c01047a6:	e8 da df ff ff       	call   c0102785 <list_pop_front>
c01047ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
         if(thread == current_thread)
c01047ae:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01047b3:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01047b6:	75 2b                	jne    c01047e3 <sys_execve+0x9f>
         {
             current_thread->flags |= THREAD_ZOMBIE;
c01047b8:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01047bd:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01047c3:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c01047c7:	83 ca 08             	or     $0x8,%edx
c01047ca:	66 89 50 14          	mov    %dx,0x14(%eax)
             process->flags |= PROCESS_ZOMBIE;
c01047ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047d1:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01047d5:	89 c2                	mov    %eax,%edx
c01047d7:	83 ca 04             	or     $0x4,%edx
c01047da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047dd:	66 89 50 3c          	mov    %dx,0x3c(%eax)
c01047e1:	eb 0b                	jmp    c01047ee <sys_execve+0xaa>
         }
         else
             thread_kill_sub(thread);
c01047e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01047e6:	89 04 24             	mov    %eax,(%esp)
c01047e9:	e8 7b 07 00 00       	call   c0104f69 <thread_kill_sub>
         return;
     }

     struct process_state *process = current_thread->process;

     while(!list_is_empty(process->threads))
c01047ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047f1:	8b 40 28             	mov    0x28(%eax),%eax
c01047f4:	89 04 24             	mov    %eax,(%esp)
c01047f7:	e8 0a e0 ff ff       	call   c0102806 <list_is_empty>
c01047fc:	85 c0                	test   %eax,%eax
c01047fe:	74 9d                	je     c010479d <sys_execve+0x59>
         }
         else
             thread_kill_sub(thread);
     }

     list_destroy(process->ports);
c0104800:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104803:	8b 40 20             	mov    0x20(%eax),%eax
c0104806:	89 04 24             	mov    %eax,(%esp)
c0104809:	e8 c8 dd ff ff       	call   c01025d6 <list_destroy>
     list_destroy(process->zombie_tids);
c010480e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104811:	8b 40 34             	mov    0x34(%eax),%eax
c0104814:	89 04 24             	mov    %eax,(%esp)
c0104817:	e8 ba dd ff ff       	call   c01025d6 <list_destroy>
     process->zombie_tids = list_create();
c010481c:	e8 5d dd ff ff       	call   c010257e <list_create>
c0104821:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104824:	89 42 34             	mov    %eax,0x34(%edx)

     // run the new process
     load_elf_thread_from_file(filenode, process, 0,(void**) argv);
c0104827:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010482a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010482e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104835:	00 
c0104836:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104839:	89 44 24 04          	mov    %eax,0x4(%esp)
c010483d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104840:	89 04 24             	mov    %eax,(%esp)
c0104843:	e8 cd f1 ff ff       	call   c0103a15 <load_elf_thread_from_file>
}
c0104848:	c9                   	leave  
c0104849:	c3                   	ret    

c010484a <INIT_SCHEDULER>:

/**
 * Initiate the scheduler module
 */
void INIT_SCHEDULER(void)
{
c010484a:	55                   	push   %ebp
c010484b:	89 e5                	mov    %esp,%ebp
c010484d:	83 ec 38             	sub    $0x38,%esp
    set_GDT_entry(5, (uint32_t) &tss, sizeof(tss), 0x89, 0x8); //qemu does not support TSS-Desc on position 7... wiered hardware stuff
c0104850:	b8 20 30 11 c0       	mov    $0xc0113020,%eax
c0104855:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%esp)
c010485c:	00 
c010485d:	c7 44 24 0c 89 00 00 	movl   $0x89,0xc(%esp)
c0104864:	00 
c0104865:	c7 44 24 08 68 00 00 	movl   $0x68,0x8(%esp)
c010486c:	00 
c010486d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104871:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104878:	e8 30 b7 00 00       	call   c010ffad <set_GDT_entry>
    load_gdt(5);
c010487d:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104884:	e8 a5 b7 00 00       	call   c011002e <load_gdt>

    asm volatile("ltr %%ax" : : "a" (5 << 3));
c0104889:	b8 28 00 00 00       	mov    $0x28,%eax
c010488e:	0f 00 d8             	ltr    %ax



    kernelstack = malloc(KERNEL_STACK_SIZE) + KERNEL_STACK_SIZE;
c0104891:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0104898:	e8 ff 8d 00 00       	call   c010d69c <malloc>
c010489d:	05 00 10 00 00       	add    $0x1000,%eax
c01048a2:	a3 04 a0 11 c0       	mov    %eax,0xc011a004
    tss.esp0 = (uint32_t)kernelstack;
c01048a7:	a1 04 a0 11 c0       	mov    0xc011a004,%eax
c01048ac:	a3 24 30 11 c0       	mov    %eax,0xc0113024

    running_threads = list_create();
c01048b1:	e8 c8 dc ff ff       	call   c010257e <list_create>
c01048b6:	a3 10 a0 11 c0       	mov    %eax,0xc011a010
    thread_iterator = iterator_create(running_threads);
c01048bb:	8b 15 10 a0 11 c0    	mov    0xc011a010,%edx
c01048c1:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01048c4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01048c8:	89 04 24             	mov    %eax,(%esp)
c01048cb:	e8 77 df ff ff       	call   c0102847 <iterator_create>
c01048d0:	83 ec 04             	sub    $0x4,%esp
c01048d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01048d9:	a3 14 a0 11 c0       	mov    %eax,0xc011a014
c01048de:	89 15 18 a0 11 c0    	mov    %edx,0xc011a018
    process_list = list_create();
c01048e4:	e8 95 dc ff ff       	call   c010257e <list_create>
c01048e9:	a3 08 80 11 c0       	mov    %eax,0xc0118008
    zombie_list = list_create();
c01048ee:	e8 8b dc ff ff       	call   c010257e <list_create>
c01048f3:	a3 0c 80 11 c0       	mov    %eax,0xc011800c
    kernel_state = process_create("Kernel INIT", "initiate system", PROCESS_ACTIVE, NULL, 0, 0, NULL);
c01048f8:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c01048ff:	00 
c0104900:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0104907:	00 
c0104908:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010490f:	00 
c0104910:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104917:	00 
c0104918:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010491f:	00 
c0104920:	c7 44 24 04 57 18 11 	movl   $0xc0111857,0x4(%esp)
c0104927:	c0 
c0104928:	c7 04 24 67 18 11 c0 	movl   $0xc0111867,(%esp)
c010492f:	e8 14 f4 ff ff       	call   c0103d48 <process_create>
c0104934:	a3 08 a0 11 c0       	mov    %eax,0xc011a008
    current_thread = thread_create(kernel_state, KERNELMODE, 0, NULL, 0, 0,0, NULL);
c0104939:	a1 08 a0 11 c0       	mov    0xc011a008,%eax
c010493e:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
c0104945:	00 
c0104946:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c010494d:	00 
c010494e:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0104955:	00 
c0104956:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010495d:	00 
c010495e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104965:	00 
c0104966:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010496d:	00 
c010496e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104975:	00 
c0104976:	89 04 24             	mov    %eax,(%esp)
c0104979:	e8 8b 02 00 00       	call   c0104c09 <thread_create>
c010497e:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
}
c0104983:	c9                   	leave  
c0104984:	c3                   	ret    

c0104985 <task_schedule>:
/**
 * performs context switches
 * @param process pointer to the process state
 */
struct cpu_state *task_schedule(struct cpu_state *cpu)
{
c0104985:	55                   	push   %ebp
c0104986:	89 e5                	mov    %esp,%ebp
c0104988:	83 ec 18             	sub    $0x18,%esp
    if((current_thread->flags & THREAD_KERNELMODE))
c010498b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104990:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104994:	0f b7 c0             	movzwl %ax,%eax
c0104997:	83 e0 04             	and    $0x4,%eax
c010499a:	85 c0                	test   %eax,%eax
c010499c:	74 0c                	je     c01049aa <task_schedule+0x25>
    {
        current_thread->state = cpu;
c010499e:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01049a3:	8b 55 08             	mov    0x8(%ebp),%edx
c01049a6:	89 10                	mov    %edx,(%eax)
c01049a8:	eb 1e                	jmp    c01049c8 <task_schedule+0x43>
    }
    else
    {
        memcpy(current_thread->state, cpu, sizeof(struct cpu_state));
c01049aa:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01049af:	8b 00                	mov    (%eax),%eax
c01049b1:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c01049b8:	00 
c01049b9:	8b 55 08             	mov    0x8(%ebp),%edx
c01049bc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01049c0:	89 04 24             	mov    %eax,(%esp)
c01049c3:	e8 37 e4 ff ff       	call   c0102dff <memcpy>
    }

    if(current_thread->flags & THREAD_ZOMBIE)
c01049c8:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01049cd:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c01049d1:	0f b7 c0             	movzwl %ax,%eax
c01049d4:	83 e0 08             	and    $0x8,%eax
c01049d7:	85 c0                	test   %eax,%eax
c01049d9:	0f 84 8f 00 00 00    	je     c0104a6e <task_schedule+0xe9>
    {
//        dump_thread_list(running_threads);
        thread_kill_sub(current_thread);
c01049df:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01049e4:	89 04 24             	mov    %eax,(%esp)
c01049e7:	e8 7d 05 00 00       	call   c0104f69 <thread_kill_sub>
        if(list_is_empty(running_threads))
c01049ec:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c01049f1:	89 04 24             	mov    %eax,(%esp)
c01049f4:	e8 0d de ff ff       	call   c0102806 <list_is_empty>
c01049f9:	85 c0                	test   %eax,%eax
c01049fb:	74 21                	je     c0104a1e <task_schedule+0x99>
        {
            asm volatile("sti");
c01049fd:	fb                   	sti    
            while(list_is_empty(running_threads))
c01049fe:	eb 0c                	jmp    c0104a0c <task_schedule+0x87>
            {
                printf("halted!\n");
c0104a00:	c7 04 24 73 18 11 c0 	movl   $0xc0111873,(%esp)
c0104a07:	e8 9e 72 00 00       	call   c010bcaa <puts>
//        dump_thread_list(running_threads);
        thread_kill_sub(current_thread);
        if(list_is_empty(running_threads))
        {
            asm volatile("sti");
            while(list_is_empty(running_threads))
c0104a0c:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c0104a11:	89 04 24             	mov    %eax,(%esp)
c0104a14:	e8 ed dd ff ff       	call   c0102806 <list_is_empty>
c0104a19:	85 c0                	test   %eax,%eax
c0104a1b:	75 e3                	jne    c0104a00 <task_schedule+0x7b>
            {
                printf("halted!\n");
            }
            asm volatile("cli");
c0104a1d:	fa                   	cli    
        }

        list_set_first(&thread_iterator);
c0104a1e:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104a25:	e8 4d df ff ff       	call   c0102977 <list_set_first>
        current_thread = list_get_current(&thread_iterator);
c0104a2a:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104a31:	e8 da de ff ff       	call   c0102910 <list_get_current>
c0104a36:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
        vmm_switch_context(&current_thread->context);
c0104a3b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104a40:	83 c0 08             	add    $0x8,%eax
c0104a43:	89 04 24             	mov    %eax,(%esp)
c0104a46:	e8 60 86 00 00       	call   c010d0ab <vmm_switch_context>
        memcpy(cpu, current_thread->state, sizeof(struct cpu_state));
c0104a4b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104a50:	8b 00                	mov    (%eax),%eax
c0104a52:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c0104a59:	00 
c0104a5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a61:	89 04 24             	mov    %eax,(%esp)
c0104a64:	e8 96 e3 ff ff       	call   c0102dff <memcpy>
c0104a69:	e9 ba 00 00 00       	jmp    c0104b28 <task_schedule+0x1a3>
//       dump_thread_list(running_threads);
    }
    else if(current_thread->ticks == 0)
c0104a6e:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104a73:	8b 40 10             	mov    0x10(%eax),%eax
c0104a76:	85 c0                	test   %eax,%eax
c0104a78:	0f 85 9c 00 00 00    	jne    c0104b1a <task_schedule+0x195>
    {
        current_thread->ticks = 10;
c0104a7e:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104a83:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
        list_next(&thread_iterator);
c0104a8a:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104a91:	e8 9f de ff ff       	call   c0102935 <list_next>
        if(list_is_last(&thread_iterator))
c0104a96:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104a9d:	e8 ba de ff ff       	call   c010295c <list_is_last>
c0104aa2:	85 c0                	test   %eax,%eax
c0104aa4:	74 0c                	je     c0104ab2 <task_schedule+0x12d>
            list_set_first(&thread_iterator);
c0104aa6:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104aad:	e8 c5 de ff ff       	call   c0102977 <list_set_first>
        current_thread = list_get_current(&thread_iterator);
c0104ab2:	c7 04 24 14 a0 11 c0 	movl   $0xc011a014,(%esp)
c0104ab9:	e8 52 de ff ff       	call   c0102910 <list_get_current>
c0104abe:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
        vmm_switch_context(&current_thread->context);
c0104ac3:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104ac8:	83 c0 08             	add    $0x8,%eax
c0104acb:	89 04 24             	mov    %eax,(%esp)
c0104ace:	e8 d8 85 00 00       	call   c010d0ab <vmm_switch_context>

        if(current_thread->flags & THREAD_KERNELMODE)
c0104ad3:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104ad8:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104adc:	0f b7 c0             	movzwl %ax,%eax
c0104adf:	83 e0 04             	and    $0x4,%eax
c0104ae2:	85 c0                	test   %eax,%eax
c0104ae4:	74 0c                	je     c0104af2 <task_schedule+0x16d>
        {
            cpu = current_thread->state;
c0104ae6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104aeb:	8b 00                	mov    (%eax),%eax
c0104aed:	89 45 08             	mov    %eax,0x8(%ebp)
c0104af0:	eb 36                	jmp    c0104b28 <task_schedule+0x1a3>
        }
        else
        {
            cpu = (struct cpu_state *)kernelstack;
c0104af2:	a1 04 a0 11 c0       	mov    0xc011a004,%eax
c0104af7:	89 45 08             	mov    %eax,0x8(%ebp)
            memcpy(cpu, current_thread->state, sizeof(struct cpu_state));
c0104afa:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104aff:	8b 00                	mov    (%eax),%eax
c0104b01:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c0104b08:	00 
c0104b09:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b10:	89 04 24             	mov    %eax,(%esp)
c0104b13:	e8 e7 e2 ff ff       	call   c0102dff <memcpy>
c0104b18:	eb 0e                	jmp    c0104b28 <task_schedule+0x1a3>
        }
    }
    else
    {
        current_thread->ticks--;
c0104b1a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104b1f:	8b 50 10             	mov    0x10(%eax),%edx
c0104b22:	83 ea 01             	sub    $0x1,%edx
c0104b25:	89 50 10             	mov    %edx,0x10(%eax)
    }
    EOI(0);
c0104b28:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0104b2f:	e8 a7 96 00 00       	call   c010e1db <EOI>
    return cpu;
c0104b34:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0104b37:	c9                   	leave  
c0104b38:	c3                   	ret    

c0104b39 <thread_sync_context>:
extern list_t *running_threads;
extern struct thread_state* current_thread;
extern struct process_state *kernel_state;

void thread_sync_context(struct thread_state *thread)
{
c0104b39:	55                   	push   %ebp
c0104b3a:	89 e5                	mov    %esp,%ebp
c0104b3c:	83 ec 28             	sub    $0x28,%esp
    struct thread_state *main_thread = thread->process->main_thread;
c0104b3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b42:	8b 40 04             	mov    0x4(%eax),%eax
c0104b45:	8b 40 30             	mov    0x30(%eax),%eax
c0104b48:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(thread != main_thread && main_thread != NULL && thread != NULL)
c0104b4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b51:	74 3a                	je     c0104b8d <thread_sync_context+0x54>
c0104b53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b57:	74 34                	je     c0104b8d <thread_sync_context+0x54>
c0104b59:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b5d:	74 2e                	je     c0104b8d <thread_sync_context+0x54>
    {
        int end = PDE_INDEX(0xB0000000);
c0104b5f:	c7 45 f0 c0 02 00 00 	movl   $0x2c0,-0x10(%ebp)
        arch_sync_pts(&thread->context.arch_context, &main_thread->context.arch_context, 0, end);
c0104b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b69:	8d 48 08             	lea    0x8(%eax),%ecx
c0104b6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b6f:	8d 50 08             	lea    0x8(%eax),%edx
c0104b72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b75:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104b79:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104b80:	00 
c0104b81:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104b85:	89 14 24             	mov    %edx,(%esp)
c0104b88:	e8 36 8f 00 00       	call   c010dac3 <arch_sync_pts>
    }
}
c0104b8d:	c9                   	leave  
c0104b8e:	c3                   	ret    

c0104b8f <kernel_thread_exit>:

void kernel_thread_exit(void)
{
c0104b8f:	55                   	push   %ebp
c0104b90:	89 e5                	mov    %esp,%ebp
c0104b92:	83 ec 18             	sub    $0x18,%esp
    current_thread->flags |= THREAD_ZOMBIE;
c0104b95:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104b9a:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c0104ba0:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c0104ba4:	83 ca 08             	or     $0x8,%edx
c0104ba7:	66 89 50 14          	mov    %dx,0x14(%eax)
    printf("death row\n");
c0104bab:	c7 04 24 7b 18 11 c0 	movl   $0xc011187b,(%esp)
c0104bb2:	e8 f3 70 00 00       	call   c010bcaa <puts>
    while(1) {}
c0104bb7:	eb fe                	jmp    c0104bb7 <kernel_thread_exit+0x28>

c0104bb9 <kernel_thread_create>:
}



struct thread_state *kernel_thread_create(uintptr_t eip, int argc, void **argv)
{
c0104bb9:	55                   	push   %ebp
c0104bba:	89 e5                	mov    %esp,%ebp
c0104bbc:	83 ec 38             	sub    $0x38,%esp
    struct thread_state *new_thread = thread_create(kernel_state, KERNELMODE, (uint32_t) eip, NULL, argc, argv, NULL, NULL);
c0104bbf:	a1 08 a0 11 c0       	mov    0xc011a008,%eax
c0104bc4:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
c0104bcb:	00 
c0104bcc:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0104bd3:	00 
c0104bd4:	8b 55 10             	mov    0x10(%ebp),%edx
c0104bd7:	89 54 24 14          	mov    %edx,0x14(%esp)
c0104bdb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104bde:	89 54 24 10          	mov    %edx,0x10(%esp)
c0104be2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104be9:	00 
c0104bea:	8b 55 08             	mov    0x8(%ebp),%edx
c0104bed:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104bf1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104bf8:	00 
c0104bf9:	89 04 24             	mov    %eax,(%esp)
c0104bfc:	e8 08 00 00 00       	call   c0104c09 <thread_create>
c0104c01:	89 45 f4             	mov    %eax,-0xc(%ebp)

    return new_thread;
c0104c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104c07:	c9                   	leave  
c0104c08:	c3                   	ret    

c0104c09 <thread_create>:


struct thread_state *thread_create(struct process_state *process, privilege_t prev, uint32_t eip, struct cpu_state *state, int argc, void **argv, void *return_address, vmm_context_t *context)
{
c0104c09:	55                   	push   %ebp
c0104c0a:	89 e5                	mov    %esp,%ebp
c0104c0c:	53                   	push   %ebx
c0104c0d:	83 ec 44             	sub    $0x44,%esp
    struct thread_state *new_thread = malloc(sizeof(struct thread_state));
c0104c10:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
c0104c17:	e8 80 8a 00 00       	call   c010d69c <malloc>
c0104c1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    new_thread->flags = THREAD_ACTIV;
c0104c1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c22:	66 c7 40 14 01 00    	movw   $0x1,0x14(%eax)
    new_thread->process = process;
c0104c28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c2b:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c2e:	89 50 04             	mov    %edx,0x4(%eax)

    
    vmm_create_context(&new_thread->context);
c0104c31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c34:	83 c0 08             	add    $0x8,%eax
c0104c37:	89 04 24             	mov    %eax,(%esp)
c0104c3a:	e8 46 84 00 00       	call   c010d085 <vmm_create_context>
    
    if(context != NULL)
c0104c3f:	83 7d 24 00          	cmpl   $0x0,0x24(%ebp)
c0104c43:	74 1d                	je     c0104c62 <thread_create+0x59>
        memcpy(&new_thread->context.arch_context, &context->arch_context, sizeof(arch_vmm_context_t));
c0104c45:	8b 45 24             	mov    0x24(%ebp),%eax
c0104c48:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c4b:	83 c2 08             	add    $0x8,%edx
c0104c4e:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
c0104c55:	00 
c0104c56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c5a:	89 14 24             	mov    %edx,(%esp)
c0104c5d:	e8 9d e1 ff ff       	call   c0102dff <memcpy>

    thread_sync_context(new_thread);
c0104c62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c65:	89 04 24             	mov    %eax,(%esp)
c0104c68:	e8 cc fe ff ff       	call   c0104b39 <thread_sync_context>
    new_thread->ticks = 10;
c0104c6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c70:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
    new_thread->return_value = 0;
c0104c77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c7a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

    void *kernel_stack = malloc(0x1000);
c0104c81:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0104c88:	e8 0f 8a 00 00       	call   c010d69c <malloc>
c0104c8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct cpu_state *new_state = kernel_stack + (0x1000 - sizeof(struct cpu_state))-12;
c0104c90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c93:	05 ac 0f 00 00       	add    $0xfac,%eax
c0104c98:	89 45 e8             	mov    %eax,-0x18(%ebp)
    new_thread->state = new_state;
c0104c9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104ca1:	89 10                	mov    %edx,(%eax)

    if(return_address == NULL)
c0104ca3:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0104ca7:	75 07                	jne    c0104cb0 <thread_create+0xa7>
        return_address = &kernel_thread_exit;
c0104ca9:	c7 45 20 8f 4b 10 c0 	movl   $0xc0104b8f,0x20(%ebp)

    if(process->main_thread == NULL)
c0104cb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cb3:	8b 40 30             	mov    0x30(%eax),%eax
c0104cb6:	85 c0                	test   %eax,%eax
c0104cb8:	75 09                	jne    c0104cc3 <thread_create+0xba>
    {
        process->main_thread = new_thread;
c0104cba:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cbd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104cc0:	89 50 30             	mov    %edx,0x30(%eax)
    }

    if(state != NULL)
c0104cc3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104cc7:	74 1c                	je     c0104ce5 <thread_create+0xdc>
    {
        memcpy(new_state, state, sizeof(struct cpu_state));
c0104cc9:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c0104cd0:	00 
c0104cd1:	8b 45 14             	mov    0x14(%ebp),%eax
c0104cd4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104cd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104cdb:	89 04 24             	mov    %eax,(%esp)
c0104cde:	e8 1c e1 ff ff       	call   c0102dff <memcpy>
c0104ce3:	eb 2e                	jmp    c0104d13 <thread_create+0x10a>
    }
    else
    {
        memset(new_state, 0, sizeof(struct cpu_state));
c0104ce5:	c7 44 24 08 48 00 00 	movl   $0x48,0x8(%esp)
c0104cec:	00 
c0104ced:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104cf4:	00 
c0104cf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104cf8:	89 04 24             	mov    %eax,(%esp)
c0104cfb:	e8 75 e2 ff ff       	call   c0102f75 <memset>
        new_state->eip = eip;
c0104d00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d03:	8b 55 10             	mov    0x10(%ebp),%edx
c0104d06:	89 50 34             	mov    %edx,0x34(%eax)
        new_state->eflags = 0x202;
c0104d09:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d0c:	c7 40 3c 02 02 00 00 	movl   $0x202,0x3c(%eax)
    }

    uint32_t *stack;
    if(prev == KERNELMODE)
c0104d13:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104d17:	75 78                	jne    c0104d91 <thread_create+0x188>
    {
        new_thread->flags |= THREAD_KERNELMODE;
c0104d19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d1c:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104d20:	89 c2                	mov    %eax,%edx
c0104d22:	83 ca 04             	or     $0x4,%edx
c0104d25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d28:	66 89 50 14          	mov    %dx,0x14(%eax)
        new_state->cs = 0x08;
c0104d2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d2f:	c7 40 38 08 00 00 00 	movl   $0x8,0x38(%eax)
        new_state->ds = 0x10;
c0104d36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d39:	c7 40 0c 10 00 00 00 	movl   $0x10,0xc(%eax)
        new_state->es = 0x10;
c0104d40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d43:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
        new_state->fs = 0x10;
c0104d4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d4d:	c7 40 04 10 00 00 00 	movl   $0x10,0x4(%eax)
        new_state->gs = 0x10;
c0104d54:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104d57:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
        stack = kernel_stack + 0x1000-8;
c0104d5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d60:	05 f8 0f 00 00       	add    $0xff8,%eax
c0104d65:	89 45 f4             	mov    %eax,-0xc(%ebp)
        *--stack = (uint32_t) argv;
c0104d68:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104d6c:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0104d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d72:	89 10                	mov    %edx,(%eax)
        *--stack = argc;
c0104d74:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104d78:	8b 55 18             	mov    0x18(%ebp),%edx
c0104d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d7e:	89 10                	mov    %edx,(%eax)
        *--stack = (uint32_t) return_address;
c0104d80:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104d84:	8b 55 20             	mov    0x20(%ebp),%edx
c0104d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8a:	89 10                	mov    %edx,(%eax)
c0104d8c:	e9 b1 00 00 00       	jmp    c0104e42 <thread_create+0x239>
    }
    else
    {
        if(!state)
c0104d91:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104d95:	0f 85 93 00 00 00    	jne    c0104e2e <thread_create+0x225>
        {
            paddr_t pframe = pmm_alloc_page();
c0104d9b:	e8 29 a8 00 00       	call   c010f5c9 <pmm_alloc_page>
c0104da0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vmm_map(&new_thread->context, pframe, MEMORY_LAYOUT_STACK_TOP-0x1000, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c0104da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104da6:	8d 50 08             	lea    0x8(%eax),%edx
c0104da9:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c0104db0:	00 
c0104db1:	c7 44 24 08 00 f0 ff 	movl   $0xbffff000,0x8(%esp)
c0104db8:	bf 
c0104db9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104dbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104dc0:	89 14 24             	mov    %edx,(%esp)
c0104dc3:	e8 13 83 00 00       	call   c010d0db <vmm_map>
            new_state->esp = (uint32_t) MEMORY_LAYOUT_STACK_TOP - 12;
c0104dc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104dcb:	c7 40 40 f4 ff ff bf 	movl   $0xbffffff4,0x40(%eax)

            stack = (uint32_t *) (vmm_automap_kernel(current_context, pframe, VMM_PRESENT | VMM_WRITABLE | VMM_USER) + 0x1000);
c0104dd2:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0104dd7:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c0104dde:	00 
c0104ddf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104de2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104de6:	89 04 24             	mov    %eax,(%esp)
c0104de9:	e8 d6 83 00 00       	call   c010d1c4 <vmm_automap_kernel>
c0104dee:	05 00 10 00 00       	add    $0x1000,%eax
c0104df3:	89 45 f4             	mov    %eax,-0xc(%ebp)
            *--stack = (uint32_t) argv;
c0104df6:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104dfa:	8b 55 1c             	mov    0x1c(%ebp),%edx
c0104dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e00:	89 10                	mov    %edx,(%eax)
            *--stack = argc;
c0104e02:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104e06:	8b 55 18             	mov    0x18(%ebp),%edx
c0104e09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e0c:	89 10                	mov    %edx,(%eax)
            *--stack = (uint32_t) return_address;
c0104e0e:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
c0104e12:	8b 55 20             	mov    0x20(%ebp),%edx
c0104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e18:	89 10                	mov    %edx,(%eax)
            vmm_unmap(current_context, (vaddr_t) stack);
c0104e1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104e1d:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c0104e22:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e26:	89 04 24             	mov    %eax,(%esp)
c0104e29:	e8 dc 82 00 00       	call   c010d10a <vmm_unmap>
        }

        new_state->cs = 0x1b;
c0104e2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104e31:	c7 40 38 1b 00 00 00 	movl   $0x1b,0x38(%eax)
        new_state->ss = 0x23;
c0104e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104e3b:	c7 40 44 23 00 00 00 	movl   $0x23,0x44(%eax)
    }

    if(process->heap_top == 0)
c0104e42:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e45:	8b 40 40             	mov    0x40(%eax),%eax
c0104e48:	85 c0                	test   %eax,%eax
c0104e4a:	75 78                	jne    c0104ec4 <thread_create+0x2bb>
    {
        process->heap_top = arch_vaddr_find(&new_thread->context.arch_context, 1, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c0104e4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e4f:	83 c0 08             	add    $0x8,%eax
c0104e52:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
c0104e59:	00 
c0104e5a:	c7 44 24 0c 00 00 00 	movl   $0xb0000000,0xc(%esp)
c0104e61:	b0 
c0104e62:	c7 44 24 08 00 00 00 	movl   $0xa0000000,0x8(%esp)
c0104e69:	a0 
c0104e6a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104e71:	00 
c0104e72:	89 04 24             	mov    %eax,(%esp)
c0104e75:	e8 90 90 00 00       	call   c010df0a <arch_vaddr_find>
c0104e7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e7d:	89 42 40             	mov    %eax,0x40(%edx)
        vmm_map(&new_thread->context, pmm_alloc_page(), process->heap_top, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c0104e80:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e83:	8b 58 40             	mov    0x40(%eax),%ebx
c0104e86:	e8 3e a7 00 00       	call   c010f5c9 <pmm_alloc_page>
c0104e8b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e8e:	83 c2 08             	add    $0x8,%edx
c0104e91:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c0104e98:	00 
c0104e99:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0104e9d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104ea1:	89 14 24             	mov    %edx,(%esp)
c0104ea4:	e8 32 82 00 00       	call   c010d0db <vmm_map>
        process->heap_lower_limit = process->heap_top;
c0104ea9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eac:	8b 50 40             	mov    0x40(%eax),%edx
c0104eaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eb2:	89 50 44             	mov    %edx,0x44(%eax)
        process->heap_upper_limit = (uint32_t) stack-0x1000;
c0104eb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eb8:	8d 90 00 f0 ff ff    	lea    -0x1000(%eax),%edx
c0104ebe:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ec1:	89 50 48             	mov    %edx,0x48(%eax)

    }

    if(list_is_empty(process->zombie_tids))
c0104ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ec7:	8b 40 34             	mov    0x34(%eax),%eax
c0104eca:	89 04 24             	mov    %eax,(%esp)
c0104ecd:	e8 34 d9 ff ff       	call   c0102806 <list_is_empty>
c0104ed2:	85 c0                	test   %eax,%eax
c0104ed4:	74 17                	je     c0104eed <thread_create+0x2e4>
        new_thread->tid = process->tid_counter++;
c0104ed6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed9:	8b 40 2c             	mov    0x2c(%eax),%eax
c0104edc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104edf:	89 42 20             	mov    %eax,0x20(%edx)
c0104ee2:	8d 50 01             	lea    0x1(%eax),%edx
c0104ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee8:	89 50 2c             	mov    %edx,0x2c(%eax)
c0104eeb:	eb 16                	jmp    c0104f03 <thread_create+0x2fa>
    else
        new_thread->tid = (tid_t) list_pop_back(process->zombie_tids);
c0104eed:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef0:	8b 40 34             	mov    0x34(%eax),%eax
c0104ef3:	89 04 24             	mov    %eax,(%esp)
c0104ef6:	e8 44 d8 ff ff       	call   c010273f <list_pop_back>
c0104efb:	89 c2                	mov    %eax,%edx
c0104efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f00:	89 50 20             	mov    %edx,0x20(%eax)

    list_push_front(process->threads,new_thread);
c0104f03:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f06:	8b 40 28             	mov    0x28(%eax),%eax
c0104f09:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f0c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104f10:	89 04 24             	mov    %eax,(%esp)
c0104f13:	e8 9d d7 ff ff       	call   c01026b5 <list_push_front>

    list_push_front(running_threads, new_thread);
c0104f18:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c0104f1d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f20:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104f24:	89 04 24             	mov    %eax,(%esp)
c0104f27:	e8 89 d7 ff ff       	call   c01026b5 <list_push_front>


    return new_thread;
c0104f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0104f2f:	83 c4 44             	add    $0x44,%esp
c0104f32:	5b                   	pop    %ebx
c0104f33:	5d                   	pop    %ebp
c0104f34:	c3                   	ret    

c0104f35 <thread_kill>:

void thread_kill(struct thread_state *thread)
{
c0104f35:	55                   	push   %ebp
c0104f36:	89 e5                	mov    %esp,%ebp
c0104f38:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c0104f3b:	fa                   	cli    
    if(current_thread == thread)
c0104f3c:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0104f41:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104f44:	75 15                	jne    c0104f5b <thread_kill+0x26>
        thread->flags |= THREAD_ZOMBIE;
c0104f46:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f49:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104f4d:	89 c2                	mov    %eax,%edx
c0104f4f:	83 ca 08             	or     $0x8,%edx
c0104f52:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f55:	66 89 50 14          	mov    %dx,0x14(%eax)
c0104f59:	eb 0b                	jmp    c0104f66 <thread_kill+0x31>
    else
    {
        thread_kill_sub(thread);
c0104f5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f5e:	89 04 24             	mov    %eax,(%esp)
c0104f61:	e8 03 00 00 00       	call   c0104f69 <thread_kill_sub>
    }
    asm volatile("sti");
c0104f66:	fb                   	sti    
}
c0104f67:	c9                   	leave  
c0104f68:	c3                   	ret    

c0104f69 <thread_kill_sub>:

void thread_kill_sub(struct thread_state *thread)
{
c0104f69:	55                   	push   %ebp
c0104f6a:	89 e5                	mov    %esp,%ebp
c0104f6c:	83 ec 38             	sub    $0x38,%esp
    if(thread->flags & THREAD_ACTIV || thread->flags & THREAD_ZOMBIE)
c0104f6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f72:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104f76:	0f b7 c0             	movzwl %ax,%eax
c0104f79:	83 e0 01             	and    $0x1,%eax
c0104f7c:	85 c0                	test   %eax,%eax
c0104f7e:	75 11                	jne    c0104f91 <thread_kill_sub+0x28>
c0104f80:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f83:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104f87:	0f b7 c0             	movzwl %ax,%eax
c0104f8a:	83 e0 08             	and    $0x8,%eax
c0104f8d:	85 c0                	test   %eax,%eax
c0104f8f:	74 57                	je     c0104fe8 <thread_kill_sub+0x7f>
    {
        iterator_t running_thread_it = iterator_create(running_threads);
c0104f91:	8b 15 10 a0 11 c0    	mov    0xc011a010,%edx
c0104f97:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104f9a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104f9e:	89 04 24             	mov    %eax,(%esp)
c0104fa1:	e8 a1 d8 ff ff       	call   c0102847 <iterator_create>
c0104fa6:	83 ec 04             	sub    $0x4,%esp
        while(!list_is_last(&running_thread_it))
c0104fa9:	eb 2e                	jmp    c0104fd9 <thread_kill_sub+0x70>
        {
            struct thread_state *t = list_get_current(&running_thread_it);
c0104fab:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fae:	89 04 24             	mov    %eax,(%esp)
c0104fb1:	e8 5a d9 ff ff       	call   c0102910 <list_get_current>
c0104fb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if(t == thread)
c0104fb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fbc:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104fbf:	75 0d                	jne    c0104fce <thread_kill_sub+0x65>
            {
                list_remove(&running_thread_it);
c0104fc1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fc4:	89 04 24             	mov    %eax,(%esp)
c0104fc7:	e8 d6 d9 ff ff       	call   c01029a2 <list_remove>
                break;
c0104fcc:	eb 1a                	jmp    c0104fe8 <thread_kill_sub+0x7f>
            }
            list_next(&running_thread_it);
c0104fce:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fd1:	89 04 24             	mov    %eax,(%esp)
c0104fd4:	e8 5c d9 ff ff       	call   c0102935 <list_next>
void thread_kill_sub(struct thread_state *thread)
{
    if(thread->flags & THREAD_ACTIV || thread->flags & THREAD_ZOMBIE)
    {
        iterator_t running_thread_it = iterator_create(running_threads);
        while(!list_is_last(&running_thread_it))
c0104fd9:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0104fdc:	89 04 24             	mov    %eax,(%esp)
c0104fdf:	e8 78 d9 ff ff       	call   c010295c <list_is_last>
c0104fe4:	85 c0                	test   %eax,%eax
c0104fe6:	74 c3                	je     c0104fab <thread_kill_sub+0x42>
            list_next(&running_thread_it);
        }
    }

    // only delete the cpu state of usermode threads. Freeing the kernel cpu-state can cause pagefaults
    if(! (thread->flags & THREAD_KERNELMODE))
c0104fe8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104feb:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c0104fef:	0f b7 c0             	movzwl %ax,%eax
c0104ff2:	83 e0 04             	and    $0x4,%eax
c0104ff5:	85 c0                	test   %eax,%eax
c0104ff7:	75 1b                	jne    c0105014 <thread_kill_sub+0xab>
    {
        free(thread->state);
c0104ff9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ffc:	8b 00                	mov    (%eax),%eax
c0104ffe:	89 04 24             	mov    %eax,(%esp)
c0105001:	e8 7d 87 00 00       	call   c010d783 <free>
        arch_vmm_destroy_context(&thread->context.arch_context);
c0105006:	8b 45 08             	mov    0x8(%ebp),%eax
c0105009:	83 c0 08             	add    $0x8,%eax
c010500c:	89 04 24             	mov    %eax,(%esp)
c010500f:	e8 56 8a 00 00       	call   c010da6a <arch_vmm_destroy_context>
    }

    if(thread->process->flags & PROCESS_ZOMBIE)
c0105014:	8b 45 08             	mov    0x8(%ebp),%eax
c0105017:	8b 40 04             	mov    0x4(%eax),%eax
c010501a:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010501e:	0f b7 c0             	movzwl %ax,%eax
c0105021:	83 e0 04             	and    $0x4,%eax
c0105024:	85 c0                	test   %eax,%eax
c0105026:	0f 84 a8 00 00 00    	je     c01050d4 <thread_kill_sub+0x16b>
    {
        list_push_front(thread->process->zombie_tids,(void *) thread->tid);
c010502c:	8b 45 08             	mov    0x8(%ebp),%eax
c010502f:	8b 40 20             	mov    0x20(%eax),%eax
c0105032:	89 c2                	mov    %eax,%edx
c0105034:	8b 45 08             	mov    0x8(%ebp),%eax
c0105037:	8b 40 04             	mov    0x4(%eax),%eax
c010503a:	8b 40 34             	mov    0x34(%eax),%eax
c010503d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105041:	89 04 24             	mov    %eax,(%esp)
c0105044:	e8 6c d6 ff ff       	call   c01026b5 <list_push_front>
        iterator_t thread_it = iterator_create(thread->process->threads);
c0105049:	8b 45 08             	mov    0x8(%ebp),%eax
c010504c:	8b 40 04             	mov    0x4(%eax),%eax
c010504f:	8b 50 28             	mov    0x28(%eax),%edx
c0105052:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0105055:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105059:	89 04 24             	mov    %eax,(%esp)
c010505c:	e8 e6 d7 ff ff       	call   c0102847 <iterator_create>
c0105061:	83 ec 04             	sub    $0x4,%esp
        while(!list_is_last(&thread_it))
c0105064:	eb 51                	jmp    c01050b7 <thread_kill_sub+0x14e>
        {
            struct thread_state *t = list_get_current(&thread_it);
c0105066:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0105069:	89 04 24             	mov    %eax,(%esp)
c010506c:	e8 9f d8 ff ff       	call   c0102910 <list_get_current>
c0105071:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(t == thread)
c0105074:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105077:	3b 45 08             	cmp    0x8(%ebp),%eax
c010507a:	75 30                	jne    c01050ac <thread_kill_sub+0x143>
            {
                list_remove(&thread_it);
c010507c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010507f:	89 04 24             	mov    %eax,(%esp)
c0105082:	e8 1b d9 ff ff       	call   c01029a2 <list_remove>
                if(list_is_empty(thread->process->threads))
c0105087:	8b 45 08             	mov    0x8(%ebp),%eax
c010508a:	8b 40 04             	mov    0x4(%eax),%eax
c010508d:	8b 40 28             	mov    0x28(%eax),%eax
c0105090:	89 04 24             	mov    %eax,(%esp)
c0105093:	e8 6e d7 ff ff       	call   c0102806 <list_is_empty>
c0105098:	85 c0                	test   %eax,%eax
c010509a:	74 2c                	je     c01050c8 <thread_kill_sub+0x15f>
                    process_kill(thread->process);
c010509c:	8b 45 08             	mov    0x8(%ebp),%eax
c010509f:	8b 40 04             	mov    0x4(%eax),%eax
c01050a2:	89 04 24             	mov    %eax,(%esp)
c01050a5:	e8 6a f0 ff ff       	call   c0104114 <process_kill>
                break;
c01050aa:	eb 1c                	jmp    c01050c8 <thread_kill_sub+0x15f>
            }
            list_next(&thread_it);
c01050ac:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01050af:	89 04 24             	mov    %eax,(%esp)
c01050b2:	e8 7e d8 ff ff       	call   c0102935 <list_next>

    if(thread->process->flags & PROCESS_ZOMBIE)
    {
        list_push_front(thread->process->zombie_tids,(void *) thread->tid);
        iterator_t thread_it = iterator_create(thread->process->threads);
        while(!list_is_last(&thread_it))
c01050b7:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01050ba:	89 04 24             	mov    %eax,(%esp)
c01050bd:	e8 9a d8 ff ff       	call   c010295c <list_is_last>
c01050c2:	85 c0                	test   %eax,%eax
c01050c4:	74 a0                	je     c0105066 <thread_kill_sub+0xfd>
c01050c6:	eb 01                	jmp    c01050c9 <thread_kill_sub+0x160>
            if(t == thread)
            {
                list_remove(&thread_it);
                if(list_is_empty(thread->process->threads))
                    process_kill(thread->process);
                break;
c01050c8:	90                   	nop
            }
            list_next(&thread_it);
        }
        free(thread);
c01050c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01050cc:	89 04 24             	mov    %eax,(%esp)
c01050cf:	e8 af 86 00 00       	call   c010d783 <free>
    }
}
c01050d4:	c9                   	leave  
c01050d5:	c3                   	ret    

c01050d6 <thread_exit>:

void thread_exit(struct cpu_state **cpu)
{
c01050d6:	55                   	push   %ebp
c01050d7:	89 e5                	mov    %esp,%ebp
c01050d9:	83 ec 18             	sub    $0x18,%esp
    current_thread->flags |= THREAD_ZOMBIE;
c01050dc:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01050e1:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01050e7:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c01050eb:	83 ca 08             	or     $0x8,%edx
c01050ee:	66 89 50 14          	mov    %dx,0x14(%eax)
    *cpu = task_schedule(*cpu);
c01050f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01050f5:	8b 00                	mov    (%eax),%eax
c01050f7:	89 04 24             	mov    %eax,(%esp)
c01050fa:	e8 86 f8 ff ff       	call   c0104985 <task_schedule>
c01050ff:	8b 55 08             	mov    0x8(%ebp),%edx
c0105102:	89 02                	mov    %eax,(%edx)
}
c0105104:	c9                   	leave  
c0105105:	c3                   	ret    

c0105106 <launch_thread>:

void launch_thread(struct cpu_state **cpu)
{
c0105106:	55                   	push   %ebp
c0105107:	89 e5                	mov    %esp,%ebp
c0105109:	56                   	push   %esi
c010510a:	53                   	push   %ebx
c010510b:	83 ec 20             	sub    $0x20,%esp
    thread_create(current_thread->process, USERMODE, (*cpu)->CPU_ARG1, NULL, (*cpu)->CPU_ARG2, (void**)(*cpu)->CPU_ARG3, (void*)(*cpu)->CPU_ARG4, NULL);
c010510e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105111:	8b 00                	mov    (%eax),%eax
c0105113:	8b 40 14             	mov    0x14(%eax),%eax
c0105116:	89 c6                	mov    %eax,%esi
c0105118:	8b 45 08             	mov    0x8(%ebp),%eax
c010511b:	8b 00                	mov    (%eax),%eax
c010511d:	8b 40 20             	mov    0x20(%eax),%eax
c0105120:	89 c3                	mov    %eax,%ebx
c0105122:	8b 45 08             	mov    0x8(%ebp),%eax
c0105125:	8b 00                	mov    (%eax),%eax
c0105127:	8b 40 24             	mov    0x24(%eax),%eax
c010512a:	89 c1                	mov    %eax,%ecx
c010512c:	8b 45 08             	mov    0x8(%ebp),%eax
c010512f:	8b 00                	mov    (%eax),%eax
c0105131:	8b 50 1c             	mov    0x1c(%eax),%edx
c0105134:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105139:	8b 40 04             	mov    0x4(%eax),%eax
c010513c:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
c0105143:	00 
c0105144:	89 74 24 18          	mov    %esi,0x18(%esp)
c0105148:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c010514c:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0105150:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105157:	00 
c0105158:	89 54 24 08          	mov    %edx,0x8(%esp)
c010515c:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0105163:	00 
c0105164:	89 04 24             	mov    %eax,(%esp)
c0105167:	e8 9d fa ff ff       	call   c0104c09 <thread_create>
}
c010516c:	83 c4 20             	add    $0x20,%esp
c010516f:	5b                   	pop    %ebx
c0105170:	5e                   	pop    %esi
c0105171:	5d                   	pop    %ebp
c0105172:	c3                   	ret    

c0105173 <INIT_VFS>:
 *
 * @param void
 * @return void
 */
void INIT_VFS(void)
{
c0105173:	55                   	push   %ebp
c0105174:	89 e5                	mov    %esp,%ebp
c0105176:	83 ec 38             	sub    $0x38,%esp
    root = vfs_create_inode(NULL, S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH, NULL, 0, 0);
c0105179:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0105180:	00 
c0105181:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105188:	00 
c0105189:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105190:	00 
c0105191:	c7 44 24 04 c0 5b 00 	movl   $0x5bc0,0x4(%esp)
c0105198:	00 
c0105199:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01051a0:	e8 5a 00 00 00       	call   c01051ff <vfs_create_inode>
c01051a5:	a3 10 80 11 c0       	mov    %eax,0xc0118010

    vfs_inode_t *foo = vfs_create_inode("foo.txt", S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH, root, 0, 0);
c01051aa:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c01051af:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01051b6:	00 
c01051b7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01051be:	00 
c01051bf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01051c3:	c7 44 24 04 c0 5b 00 	movl   $0x5bc0,0x4(%esp)
c01051ca:	00 
c01051cb:	c7 04 24 85 18 11 c0 	movl   $0xc0111885,(%esp)
c01051d2:	e8 28 00 00 00       	call   c01051ff <vfs_create_inode>
c01051d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vfs_write(foo, 0, "Hallo Welt!\n", 13);
c01051da:	c7 44 24 0c 0d 00 00 	movl   $0xd,0xc(%esp)
c01051e1:	00 
c01051e2:	c7 44 24 08 8d 18 11 	movl   $0xc011188d,0x8(%esp)
c01051e9:	c0 
c01051ea:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01051f1:	00 
c01051f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051f5:	89 04 24             	mov    %eax,(%esp)
c01051f8:	e8 d0 01 00 00       	call   c01053cd <vfs_write>
}
c01051fd:	c9                   	leave  
c01051fe:	c3                   	ret    

c01051ff <vfs_create_inode>:
 *               if parent is NULL, the parent for the node is root.
 *
 * @return pointer to the new node
 */
vfs_inode_t* vfs_create_inode(char *name, mode_t mode, vfs_inode_t *parent, uid_t uid, gid_t gid)
{
c01051ff:	55                   	push   %ebp
c0105200:	89 e5                	mov    %esp,%ebp
c0105202:	53                   	push   %ebx
c0105203:	83 ec 24             	sub    $0x24,%esp
    vfs_inode_t *inode = malloc(sizeof(vfs_inode_t));
c0105206:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010520d:	e8 8a 84 00 00       	call   c010d69c <malloc>
c0105212:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(name != NULL)
c0105215:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105219:	74 31                	je     c010524c <vfs_create_inode+0x4d>
    {
        inode->name = (char*) malloc(strlen(name)+1);
c010521b:	8b 45 08             	mov    0x8(%ebp),%eax
c010521e:	89 04 24             	mov    %eax,(%esp)
c0105221:	e8 03 d8 ff ff       	call   c0102a29 <strlen>
c0105226:	83 c0 01             	add    $0x1,%eax
c0105229:	89 04 24             	mov    %eax,(%esp)
c010522c:	e8 6b 84 00 00       	call   c010d69c <malloc>
c0105231:	89 c2                	mov    %eax,%edx
c0105233:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105236:	89 10                	mov    %edx,(%eax)
        strcpy(inode->name, name);
c0105238:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010523b:	8b 00                	mov    (%eax),%eax
c010523d:	8b 55 08             	mov    0x8(%ebp),%edx
c0105240:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105244:	89 04 24             	mov    %eax,(%esp)
c0105247:	e8 04 d8 ff ff       	call   c0102a50 <strcpy>
    }

    inode->length = 0;
c010524c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010524f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    inode->type = VFS_REGULAR;
c0105256:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105259:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if(parent != NULL)
c0105260:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105264:	74 3b                	je     c01052a1 <vfs_create_inode+0xa2>
    {
        inode->parent = parent;
c0105266:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105269:	8b 55 10             	mov    0x10(%ebp),%edx
c010526c:	89 50 3c             	mov    %edx,0x3c(%eax)
        vfs_dentry_t *entry = vfs_create_dir_entry(inode);
c010526f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105272:	89 04 24             	mov    %eax,(%esp)
c0105275:	e8 25 01 00 00       	call   c010539f <vfs_create_dir_entry>
c010527a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        vfs_write(parent, parent->length, entry, sizeof(vfs_dentry_t));
c010527d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105280:	8b 40 08             	mov    0x8(%eax),%eax
c0105283:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010528a:	00 
c010528b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010528e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105292:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105296:	8b 45 10             	mov    0x10(%ebp),%eax
c0105299:	89 04 24             	mov    %eax,(%esp)
c010529c:	e8 2c 01 00 00       	call   c01053cd <vfs_write>
    }

    inode->stat.st_mode = mode;
c01052a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052a4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01052a7:	89 50 0c             	mov    %edx,0xc(%eax)
    inode->stat.st_ino = nodes++;
c01052aa:	a1 14 80 11 c0       	mov    0xc0118014,%eax
c01052af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01052b2:	89 42 10             	mov    %eax,0x10(%edx)
c01052b5:	83 c0 01             	add    $0x1,%eax
c01052b8:	a3 14 80 11 c0       	mov    %eax,0xc0118014
    inode->stat.st_uid = uid;
c01052bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052c0:	8b 55 14             	mov    0x14(%ebp),%edx
c01052c3:	89 50 18             	mov    %edx,0x18(%eax)
    inode->stat.st_gid = gid;
c01052c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052c9:	8b 55 18             	mov    0x18(%ebp),%edx
c01052cc:	89 50 1c             	mov    %edx,0x1c(%eax)
    update_time((struct time*)&inode->stat.st_atime);
c01052cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052d2:	83 c0 24             	add    $0x24,%eax
c01052d5:	89 04 24             	mov    %eax,(%esp)
c01052d8:	e8 eb 72 00 00       	call   c010c5c8 <update_time>
    update_time((struct time*)&inode->stat.st_mtime);
c01052dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052e0:	83 c0 28             	add    $0x28,%eax
c01052e3:	89 04 24             	mov    %eax,(%esp)
c01052e6:	e8 dd 72 00 00       	call   c010c5c8 <update_time>

    inode->buffer = (vfs_buffer_info_t*) malloc(sizeof(vfs_buffer_info_t));
c01052eb:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c01052f2:	e8 a5 83 00 00       	call   c010d69c <malloc>
c01052f7:	89 c2                	mov    %eax,%edx
c01052f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052fc:	89 50 38             	mov    %edx,0x38(%eax)
    inode->buffer->num_readers = 1;
c01052ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105302:	8b 40 38             	mov    0x38(%eax),%eax
c0105305:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    inode->buffer->num_writers = 1;
c010530b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010530e:	8b 40 38             	mov    0x38(%eax),%eax
c0105311:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    inode->buffer->num_blocks = 0;
c0105318:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010531b:	8b 40 38             	mov    0x38(%eax),%eax
c010531e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    inode->buffer->blocks = list_create();
c0105325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105328:	8b 58 38             	mov    0x38(%eax),%ebx
c010532b:	e8 4e d2 ff ff       	call   c010257e <list_create>
c0105330:	89 43 10             	mov    %eax,0x10(%ebx)

    return inode;
c0105333:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105336:	83 c4 24             	add    $0x24,%esp
c0105339:	5b                   	pop    %ebx
c010533a:	5d                   	pop    %ebp
c010533b:	c3                   	ret    

c010533c <vfs_create_pipe>:

vfs_inode_t *vfs_create_pipe(uid_t uid, gid_t gid)
{
c010533c:	55                   	push   %ebp
c010533d:	89 e5                	mov    %esp,%ebp
c010533f:	53                   	push   %ebx
c0105340:	83 ec 34             	sub    $0x34,%esp
    vfs_inode_t *inode = vfs_create_inode("pipe", S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH, NULL, uid, gid);
c0105343:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105346:	89 44 24 10          	mov    %eax,0x10(%esp)
c010534a:	8b 45 08             	mov    0x8(%ebp),%eax
c010534d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105351:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105358:	00 
c0105359:	c7 44 24 04 c0 36 00 	movl   $0x36c0,0x4(%esp)
c0105360:	00 
c0105361:	c7 04 24 9a 18 11 c0 	movl   $0xc011189a,(%esp)
c0105368:	e8 92 fe ff ff       	call   c01051ff <vfs_create_inode>
c010536d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    inode->buffer->event_id = get_new_event_ID();
c0105370:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105373:	8b 58 38             	mov    0x38(%eax),%ebx
c0105376:	e8 d0 52 00 00       	call   c010a64b <get_new_event_ID>
c010537b:	89 43 08             	mov    %eax,0x8(%ebx)
    inode->buffer->handlers = list_create();
c010537e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105381:	8b 58 38             	mov    0x38(%eax),%ebx
c0105384:	e8 f5 d1 ff ff       	call   c010257e <list_create>
c0105389:	89 43 0c             	mov    %eax,0xc(%ebx)

    inode->type = VFS_PIPE;
c010538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010538f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)

    return inode;
c0105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105399:	83 c4 34             	add    $0x34,%esp
c010539c:	5b                   	pop    %ebx
c010539d:	5d                   	pop    %ebp
c010539e:	c3                   	ret    

c010539f <vfs_create_dir_entry>:
 *
 * @param entry_inode the node that will be entried
 * @return the new directory entry
 */
vfs_dentry_t* vfs_create_dir_entry(vfs_inode_t *entry_inode)
{
c010539f:	55                   	push   %ebp
c01053a0:	89 e5                	mov    %esp,%ebp
c01053a2:	83 ec 28             	sub    $0x28,%esp
    vfs_dentry_t *dir_ent = malloc(sizeof(vfs_dentry_t));
c01053a5:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01053ac:	e8 eb 82 00 00       	call   c010d69c <malloc>
c01053b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    dir_ent->ino = entry_inode->stat.st_ino;
c01053b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01053b7:	8b 50 10             	mov    0x10(%eax),%edx
c01053ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053bd:	89 10                	mov    %edx,(%eax)
    dir_ent->inode = entry_inode;
c01053bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053c2:	8b 55 08             	mov    0x8(%ebp),%edx
c01053c5:	89 50 04             	mov    %edx,0x4(%eax)

    return dir_ent;
c01053c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01053cb:	c9                   	leave  
c01053cc:	c3                   	ret    

c01053cd <vfs_write>:
 * @param bytes number of bytes to write
 *
 * @return number of written bytes
 */
int vfs_write(vfs_inode_t *inode, int off, void *buffer, int bytes)
{
c01053cd:	55                   	push   %ebp
c01053ce:	89 e5                	mov    %esp,%ebp
c01053d0:	83 ec 48             	sub    $0x48,%esp
    GET_INODE(inode);
c01053d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01053d6:	8b 40 04             	mov    0x4(%eax),%eax
c01053d9:	83 f8 03             	cmp    $0x3,%eax
c01053dc:	75 09                	jne    c01053e7 <vfs_write+0x1a>
c01053de:	8b 45 08             	mov    0x8(%ebp),%eax
c01053e1:	8b 40 38             	mov    0x38(%eax),%eax
c01053e4:	89 45 08             	mov    %eax,0x8(%ebp)

    // calculate block indices
    int block_id = off / PAGE_SIZE;
c01053e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053ea:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c01053f0:	85 c0                	test   %eax,%eax
c01053f2:	0f 48 c2             	cmovs  %edx,%eax
c01053f5:	c1 f8 0c             	sar    $0xc,%eax
c01053f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int block_off= off % PAGE_SIZE;
c01053fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053fe:	89 c2                	mov    %eax,%edx
c0105400:	c1 fa 1f             	sar    $0x1f,%edx
c0105403:	c1 ea 14             	shr    $0x14,%edx
c0105406:	01 d0                	add    %edx,%eax
c0105408:	25 ff 0f 00 00       	and    $0xfff,%eax
c010540d:	29 d0                	sub    %edx,%eax
c010540f:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // search first block
    vfs_buffer_info_t *info = inode->buffer;
c0105412:	8b 45 08             	mov    0x8(%ebp),%eax
c0105415:	8b 40 38             	mov    0x38(%eax),%eax
c0105418:	89 45 dc             	mov    %eax,-0x24(%ebp)
    vfs_buffer_block_t *block = NULL;
c010541b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    iterator_t it = iterator_create(info->blocks);
c0105422:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105425:	8b 50 10             	mov    0x10(%eax),%edx
c0105428:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010542b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010542f:	89 04 24             	mov    %eax,(%esp)
c0105432:	e8 10 d4 ff ff       	call   c0102847 <iterator_create>
c0105437:	83 ec 04             	sub    $0x4,%esp

    int i,found = 0;
c010543a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    for(i = 0; i < info->num_blocks; i++)
c0105441:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105448:	eb 2e                	jmp    c0105478 <vfs_write+0xab>
    {
        block = (vfs_buffer_block_t*) it.current->element;
c010544a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010544d:	8b 40 08             	mov    0x8(%eax),%eax
c0105450:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(block->block_id == block_id)
c0105453:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105456:	8b 50 04             	mov    0x4(%eax),%edx
c0105459:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010545c:	39 c2                	cmp    %eax,%edx
c010545e:	75 09                	jne    c0105469 <vfs_write+0x9c>
        {
            found = 1;
c0105460:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
            break;
c0105467:	eb 1a                	jmp    c0105483 <vfs_write+0xb6>
        }

        list_next(&it);
c0105469:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010546c:	89 04 24             	mov    %eax,(%esp)
c010546f:	e8 c1 d4 ff ff       	call   c0102935 <list_next>
    vfs_buffer_info_t *info = inode->buffer;
    vfs_buffer_block_t *block = NULL;
    iterator_t it = iterator_create(info->blocks);

    int i,found = 0;
    for(i = 0; i < info->num_blocks; i++)
c0105474:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105478:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010547b:	8b 40 14             	mov    0x14(%eax),%eax
c010547e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0105481:	7f c7                	jg     c010544a <vfs_write+0x7d>
        }

        list_next(&it);
    }

    uint8_t *data = (uint8_t*) buffer;
c0105483:	8b 45 10             	mov    0x10(%ebp),%eax
c0105486:	89 45 d8             	mov    %eax,-0x28(%ebp)
    int index = block_off;
c0105489:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010548c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // go through all bytes...
    for(i = 0; i < bytes; i++)
c010548f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105496:	e9 cd 00 00 00       	jmp    c0105568 <vfs_write+0x19b>
    {
        // if the block ends, go to the next
        if(index >= VFS_BLOCK_SIZE)
c010549b:	81 7d e4 ff 0f 00 00 	cmpl   $0xfff,-0x1c(%ebp)
c01054a2:	7e 3a                	jle    c01054de <vfs_write+0x111>
        {
            block_id++;
c01054a4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            if(block_id >= info->num_blocks)
c01054a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01054ab:	8b 40 14             	mov    0x14(%eax),%eax
c01054ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01054b1:	7f 09                	jg     c01054bc <vfs_write+0xef>
            {
                found = 0;
c01054b3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01054ba:	eb 22                	jmp    c01054de <vfs_write+0x111>
            }
            else
            {
                list_next(&it);
c01054bc:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01054bf:	89 04 24             	mov    %eax,(%esp)
c01054c2:	e8 6e d4 ff ff       	call   c0102935 <list_next>
                block = (vfs_buffer_block_t*) it.current->element;
c01054c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01054ca:	8b 40 08             	mov    0x8(%eax),%eax
c01054cd:	89 45 f0             	mov    %eax,-0x10(%ebp)

                found = 1;
c01054d0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
                index = 0;
c01054d7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            }
        }

        // if nothing found, create a new block
        if(! found)
c01054de:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01054e2:	75 65                	jne    c0105549 <vfs_write+0x17c>
        {
            block = malloc(sizeof(vfs_buffer_block_t));
c01054e4:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01054eb:	e8 ac 81 00 00       	call   c010d69c <malloc>
c01054f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
            block->base = malloc(VFS_BLOCK_SIZE);
c01054f3:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01054fa:	e8 9d 81 00 00       	call   c010d69c <malloc>
c01054ff:	89 c2                	mov    %eax,%edx
c0105501:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105504:	89 10                	mov    %edx,(%eax)
            block->block_id = info->num_blocks++;
c0105506:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105509:	8b 40 14             	mov    0x14(%eax),%eax
c010550c:	89 c1                	mov    %eax,%ecx
c010550e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105511:	89 4a 04             	mov    %ecx,0x4(%edx)
c0105514:	8d 50 01             	lea    0x1(%eax),%edx
c0105517:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010551a:	89 50 14             	mov    %edx,0x14(%eax)
            list_push_back(info->blocks, block);
c010551d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105520:	8b 40 10             	mov    0x10(%eax),%eax
c0105523:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105526:	89 54 24 04          	mov    %edx,0x4(%esp)
c010552a:	89 04 24             	mov    %eax,(%esp)
c010552d:	e8 30 d1 ff ff       	call   c0102662 <list_push_back>

            block_id = block->block_id;
c0105532:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105535:	8b 40 04             	mov    0x4(%eax),%eax
c0105538:	89 45 f4             	mov    %eax,-0xc(%ebp)

            found = 1;
c010553b:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
            index = 0;
c0105542:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }

        // copy data
        block->base[index++] = data[i];
c0105549:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010554c:	8b 10                	mov    (%eax),%edx
c010554e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105551:	01 c2                	add    %eax,%edx
c0105553:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0105556:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105559:	01 c8                	add    %ecx,%eax
c010555b:	0f b6 00             	movzbl (%eax),%eax
c010555e:	88 02                	mov    %al,(%edx)
c0105560:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)

    uint8_t *data = (uint8_t*) buffer;
    int index = block_off;

    // go through all bytes...
    for(i = 0; i < bytes; i++)
c0105564:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105568:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010556b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010556e:	0f 8c 27 ff ff ff    	jl     c010549b <vfs_write+0xce>
        // copy data
        block->base[index++] = data[i];
    }

    // increase length
    if( (off + bytes) >  inode->length)
c0105574:	8b 45 14             	mov    0x14(%ebp),%eax
c0105577:	8b 55 0c             	mov    0xc(%ebp),%edx
c010557a:	01 d0                	add    %edx,%eax
c010557c:	89 c2                	mov    %eax,%edx
c010557e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105581:	8b 40 08             	mov    0x8(%eax),%eax
c0105584:	39 c2                	cmp    %eax,%edx
c0105586:	76 1e                	jbe    c01055a6 <vfs_write+0x1d9>
    {
        inode->length = off + bytes;
c0105588:	8b 45 14             	mov    0x14(%ebp),%eax
c010558b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010558e:	01 d0                	add    %edx,%eax
c0105590:	89 c2                	mov    %eax,%edx
c0105592:	8b 45 08             	mov    0x8(%ebp),%eax
c0105595:	89 50 08             	mov    %edx,0x8(%eax)
        inode->stat.st_size = inode->length;
c0105598:	8b 45 08             	mov    0x8(%ebp),%eax
c010559b:	8b 40 08             	mov    0x8(%eax),%eax
c010559e:	89 c2                	mov    %eax,%edx
c01055a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01055a3:	89 50 20             	mov    %edx,0x20(%eax)
    }

    // pipes send an event signal
    if(inode->type == VFS_PIPE)
c01055a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01055a9:	8b 40 04             	mov    0x4(%eax),%eax
c01055ac:	83 f8 01             	cmp    $0x1,%eax
c01055af:	75 24                	jne    c01055d5 <vfs_write+0x208>
    {
        send_event(info->event_id);
c01055b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01055b4:	8b 40 08             	mov    0x8(%eax),%eax
c01055b7:	89 04 24             	mov    %eax,(%esp)
c01055ba:	e8 eb 4e 00 00       	call   c010a4aa <send_event>
        info->event_id = get_new_event_ID();
c01055bf:	e8 87 50 00 00       	call   c010a64b <get_new_event_ID>
c01055c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01055c7:	89 42 08             	mov    %eax,0x8(%edx)
        launch_pipe_handlers(info);
c01055ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01055cd:	89 04 24             	mov    %eax,(%esp)
c01055d0:	e8 da 16 00 00       	call   c0106caf <launch_pipe_handlers>
    }

    return bytes;
c01055d5:	8b 45 14             	mov    0x14(%ebp),%eax
}
c01055d8:	c9                   	leave  
c01055d9:	c3                   	ret    

c01055da <vfs_read>:
 * @param offset the offset from the node
 *
 * @return number of bytes
 */
int vfs_read(vfs_inode_t *inode, int offset, void *buffer, int bytes)
{
c01055da:	55                   	push   %ebp
c01055db:	89 e5                	mov    %esp,%ebp
c01055dd:	83 ec 48             	sub    $0x48,%esp
    GET_INODE(inode);
c01055e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01055e3:	8b 40 04             	mov    0x4(%eax),%eax
c01055e6:	83 f8 03             	cmp    $0x3,%eax
c01055e9:	75 09                	jne    c01055f4 <vfs_read+0x1a>
c01055eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01055ee:	8b 40 38             	mov    0x38(%eax),%eax
c01055f1:	89 45 08             	mov    %eax,0x8(%ebp)

    if(inode->length >= (offset+bytes))
c01055f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01055f7:	8b 50 08             	mov    0x8(%eax),%edx
c01055fa:	8b 45 14             	mov    0x14(%ebp),%eax
c01055fd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0105600:	01 c8                	add    %ecx,%eax
c0105602:	39 c2                	cmp    %eax,%edx
c0105604:	0f 82 06 01 00 00    	jb     c0105710 <vfs_read+0x136>
    {
        int block_id = offset / PAGE_SIZE;
c010560a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010560d:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0105613:	85 c0                	test   %eax,%eax
c0105615:	0f 48 c2             	cmovs  %edx,%eax
c0105618:	c1 f8 0c             	sar    $0xc,%eax
c010561b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        int block_off= offset % PAGE_SIZE;
c010561e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105621:	89 c2                	mov    %eax,%edx
c0105623:	c1 fa 1f             	sar    $0x1f,%edx
c0105626:	c1 ea 14             	shr    $0x14,%edx
c0105629:	01 d0                	add    %edx,%eax
c010562b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105630:	29 d0                	sub    %edx,%eax
c0105632:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // search first block
        vfs_buffer_info_t *info = inode->buffer;
c0105635:	8b 45 08             	mov    0x8(%ebp),%eax
c0105638:	8b 40 38             	mov    0x38(%eax),%eax
c010563b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        vfs_buffer_block_t *block = NULL;
c010563e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
        iterator_t it = iterator_create(info->blocks);
c0105645:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105648:	8b 50 10             	mov    0x10(%eax),%edx
c010564b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010564e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105652:	89 04 24             	mov    %eax,(%esp)
c0105655:	e8 ed d1 ff ff       	call   c0102847 <iterator_create>
c010565a:	83 ec 04             	sub    $0x4,%esp

        int i;
        for(i = 0; i < info->num_blocks; i++)
c010565d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105664:	eb 25                	jmp    c010568b <vfs_read+0xb1>
        {
            block = (vfs_buffer_block_t*) it.current->element;
c0105666:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105669:	8b 40 08             	mov    0x8(%eax),%eax
c010566c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(block->block_id == block_id)
c010566f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105672:	8b 50 04             	mov    0x4(%eax),%edx
c0105675:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105678:	39 c2                	cmp    %eax,%edx
c010567a:	74 1c                	je     c0105698 <vfs_read+0xbe>
            {
                break;
            }

            list_next(&it);
c010567c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010567f:	89 04 24             	mov    %eax,(%esp)
c0105682:	e8 ae d2 ff ff       	call   c0102935 <list_next>
        vfs_buffer_info_t *info = inode->buffer;
        vfs_buffer_block_t *block = NULL;
        iterator_t it = iterator_create(info->blocks);

        int i;
        for(i = 0; i < info->num_blocks; i++)
c0105687:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010568b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010568e:	8b 40 14             	mov    0x14(%eax),%eax
c0105691:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0105694:	7f d0                	jg     c0105666 <vfs_read+0x8c>
c0105696:	eb 01                	jmp    c0105699 <vfs_read+0xbf>
        {
            block = (vfs_buffer_block_t*) it.current->element;
            if(block->block_id == block_id)
            {
                break;
c0105698:	90                   	nop
            }

            list_next(&it);
        }

        uint8_t *data = (uint8_t*) buffer;
c0105699:	8b 45 10             	mov    0x10(%ebp),%eax
c010569c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        int index = block_off;
c010569f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056a2:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // go through all bytes...
        for(i = 0; i < bytes; i++)
c01056a5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01056ac:	eb 52                	jmp    c0105700 <vfs_read+0x126>
        {
            // if the block ends, go to the next
            if(index >= VFS_BLOCK_SIZE)
c01056ae:	81 7d e8 ff 0f 00 00 	cmpl   $0xfff,-0x18(%ebp)
c01056b5:	7e 2a                	jle    c01056e1 <vfs_read+0x107>
            {
                block_id++;
c01056b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
                if(block_id >= info->num_blocks)
c01056bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01056be:	8b 40 14             	mov    0x14(%eax),%eax
c01056c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01056c4:	7e 44                	jle    c010570a <vfs_read+0x130>
                {
                    break;
                }
                else
                {
                    list_next(&it);
c01056c6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01056c9:	89 04 24             	mov    %eax,(%esp)
c01056cc:	e8 64 d2 ff ff       	call   c0102935 <list_next>
                    block = (vfs_buffer_block_t*) it.current->element;
c01056d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01056d4:	8b 40 08             	mov    0x8(%eax),%eax
c01056d7:	89 45 f0             	mov    %eax,-0x10(%ebp)

                    index = 0;
c01056da:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
                }
            }

            // copy data
            data[i] = block->base[index++];
c01056e1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01056e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01056e7:	01 c2                	add    %eax,%edx
c01056e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056ec:	8b 08                	mov    (%eax),%ecx
c01056ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056f1:	01 c8                	add    %ecx,%eax
c01056f3:	0f b6 00             	movzbl (%eax),%eax
c01056f6:	88 02                	mov    %al,(%edx)
c01056f8:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)

        uint8_t *data = (uint8_t*) buffer;
        int index = block_off;

        // go through all bytes...
        for(i = 0; i < bytes; i++)
c01056fc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105700:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105703:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105706:	7c a6                	jl     c01056ae <vfs_read+0xd4>
c0105708:	eb 01                	jmp    c010570b <vfs_read+0x131>
            if(index >= VFS_BLOCK_SIZE)
            {
                block_id++;
                if(block_id >= info->num_blocks)
                {
                    break;
c010570a:	90                   	nop

            // copy data
            data[i] = block->base[index++];
        }

        return i;
c010570b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010570e:	eb 05                	jmp    c0105715 <vfs_read+0x13b>
    }

    return -1;
c0105710:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0105715:	c9                   	leave  
c0105716:	c3                   	ret    

c0105717 <vfs_stat>:
 * @param buffer buffer
 *
 * @return _SUCCESS
 */
int vfs_stat(vfs_inode_t *node, struct stat *buffer)
{
c0105717:	55                   	push   %ebp
c0105718:	89 e5                	mov    %esp,%ebp
c010571a:	83 ec 10             	sub    $0x10,%esp
    uint8_t *node_stat = (uint8_t*) &node->stat;
c010571d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105720:	83 c0 0c             	add    $0xc,%eax
c0105723:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *buf = (uint8_t*) buffer;
c0105726:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105729:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int i = 0;
c010572c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (i++ < sizeof(struct stat))
c0105733:	eb 13                	jmp    c0105748 <vfs_stat+0x31>
    {
        *buf++ = *node_stat++;
c0105735:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105738:	0f b6 10             	movzbl (%eax),%edx
c010573b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010573e:	88 10                	mov    %dl,(%eax)
c0105740:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0105744:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
int vfs_stat(vfs_inode_t *node, struct stat *buffer)
{
    uint8_t *node_stat = (uint8_t*) &node->stat;
    uint8_t *buf = (uint8_t*) buffer;
    int i = 0;
    while (i++ < sizeof(struct stat))
c0105748:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010574b:	83 f8 2b             	cmp    $0x2b,%eax
c010574e:	0f 96 c0             	setbe  %al
c0105751:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105755:	84 c0                	test   %al,%al
c0105757:	75 dc                	jne    c0105735 <vfs_stat+0x1e>
    {
        *buf++ = *node_stat++;
    }

    return 0;
c0105759:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010575e:	c9                   	leave  
c010575f:	c3                   	ret    

c0105760 <vfs_access>:
 * @param modus access to check
 *
 * @return
 */
int vfs_access(vfs_inode_t *node, mode_t modus, uid_t uid, gid_t gid)
{
c0105760:	55                   	push   %ebp
c0105761:	89 e5                	mov    %esp,%ebp
    if (node->stat.st_uid == uid)
c0105763:	8b 45 08             	mov    0x8(%ebp),%eax
c0105766:	8b 40 18             	mov    0x18(%eax),%eax
c0105769:	3b 45 10             	cmp    0x10(%ebp),%eax
c010576c:	75 6f                	jne    c01057dd <vfs_access+0x7d>
    {
        if ((modus & R_OK) &&
c010576e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105771:	83 e0 01             	and    $0x1,%eax
c0105774:	85 c0                	test   %eax,%eax
c0105776:	74 17                	je     c010578f <vfs_access+0x2f>
                !(node->stat.st_mode & S_IRUSR))
c0105778:	8b 45 08             	mov    0x8(%ebp),%eax
c010577b:	8b 40 0c             	mov    0xc(%eax),%eax
c010577e:	83 e0 40             	and    $0x40,%eax
 */
int vfs_access(vfs_inode_t *node, mode_t modus, uid_t uid, gid_t gid)
{
    if (node->stat.st_uid == uid)
    {
        if ((modus & R_OK) &&
c0105781:	85 c0                	test   %eax,%eax
c0105783:	75 0a                	jne    c010578f <vfs_access+0x2f>
                !(node->stat.st_mode & S_IRUSR))
            return -1;
c0105785:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010578a:	e9 24 01 00 00       	jmp    c01058b3 <vfs_access+0x153>
        if ((modus & W_OK) &&
c010578f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105792:	83 e0 02             	and    $0x2,%eax
c0105795:	85 c0                	test   %eax,%eax
c0105797:	74 19                	je     c01057b2 <vfs_access+0x52>
                !(node->stat.st_mode & S_IWUSR))
c0105799:	8b 45 08             	mov    0x8(%ebp),%eax
c010579c:	8b 40 0c             	mov    0xc(%eax),%eax
c010579f:	25 80 00 00 00       	and    $0x80,%eax
    if (node->stat.st_uid == uid)
    {
        if ((modus & R_OK) &&
                !(node->stat.st_mode & S_IRUSR))
            return -1;
        if ((modus & W_OK) &&
c01057a4:	85 c0                	test   %eax,%eax
c01057a6:	75 0a                	jne    c01057b2 <vfs_access+0x52>
                !(node->stat.st_mode & S_IWUSR))
            return -1;
c01057a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01057ad:	e9 01 01 00 00       	jmp    c01058b3 <vfs_access+0x153>
        if ((modus & X_OK) &&
c01057b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057b5:	83 e0 04             	and    $0x4,%eax
c01057b8:	85 c0                	test   %eax,%eax
c01057ba:	0f 84 ee 00 00 00    	je     c01058ae <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXUSR))
c01057c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01057c3:	8b 40 0c             	mov    0xc(%eax),%eax
c01057c6:	25 00 01 00 00       	and    $0x100,%eax
                !(node->stat.st_mode & S_IRUSR))
            return -1;
        if ((modus & W_OK) &&
                !(node->stat.st_mode & S_IWUSR))
            return -1;
        if ((modus & X_OK) &&
c01057cb:	85 c0                	test   %eax,%eax
c01057cd:	0f 85 db 00 00 00    	jne    c01058ae <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXUSR))
            return -1;
c01057d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01057d8:	e9 d6 00 00 00       	jmp    c01058b3 <vfs_access+0x153>
    }
    else if (node->stat.st_gid == gid)
c01057dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01057e0:	8b 40 1c             	mov    0x1c(%eax),%eax
c01057e3:	3b 45 14             	cmp    0x14(%ebp),%eax
c01057e6:	75 66                	jne    c010584e <vfs_access+0xee>
    {
        if ((modus & R_OK) &&
c01057e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057eb:	83 e0 01             	and    $0x1,%eax
c01057ee:	85 c0                	test   %eax,%eax
c01057f0:	74 19                	je     c010580b <vfs_access+0xab>
                !(node->stat.st_mode & S_IRGRP))
c01057f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01057f5:	8b 40 0c             	mov    0xc(%eax),%eax
c01057f8:	25 00 02 00 00       	and    $0x200,%eax
                !(node->stat.st_mode & S_IXUSR))
            return -1;
    }
    else if (node->stat.st_gid == gid)
    {
        if ((modus & R_OK) &&
c01057fd:	85 c0                	test   %eax,%eax
c01057ff:	75 0a                	jne    c010580b <vfs_access+0xab>
                !(node->stat.st_mode & S_IRGRP))
            return -1;
c0105801:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0105806:	e9 a8 00 00 00       	jmp    c01058b3 <vfs_access+0x153>
        if ((modus & W_OK) &&
c010580b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010580e:	83 e0 02             	and    $0x2,%eax
c0105811:	85 c0                	test   %eax,%eax
c0105813:	74 19                	je     c010582e <vfs_access+0xce>
                !(node->stat.st_mode & S_IWGRP))
c0105815:	8b 45 08             	mov    0x8(%ebp),%eax
c0105818:	8b 40 0c             	mov    0xc(%eax),%eax
c010581b:	25 00 04 00 00       	and    $0x400,%eax
    else if (node->stat.st_gid == gid)
    {
        if ((modus & R_OK) &&
                !(node->stat.st_mode & S_IRGRP))
            return -1;
        if ((modus & W_OK) &&
c0105820:	85 c0                	test   %eax,%eax
c0105822:	75 0a                	jne    c010582e <vfs_access+0xce>
                !(node->stat.st_mode & S_IWGRP))
            return -1;
c0105824:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0105829:	e9 85 00 00 00       	jmp    c01058b3 <vfs_access+0x153>
        if ((modus & X_OK) &&
c010582e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105831:	83 e0 04             	and    $0x4,%eax
c0105834:	85 c0                	test   %eax,%eax
c0105836:	74 76                	je     c01058ae <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXGRP))
c0105838:	8b 45 08             	mov    0x8(%ebp),%eax
c010583b:	8b 40 0c             	mov    0xc(%eax),%eax
c010583e:	25 00 08 00 00       	and    $0x800,%eax
                !(node->stat.st_mode & S_IRGRP))
            return -1;
        if ((modus & W_OK) &&
                !(node->stat.st_mode & S_IWGRP))
            return -1;
        if ((modus & X_OK) &&
c0105843:	85 c0                	test   %eax,%eax
c0105845:	75 67                	jne    c01058ae <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXGRP))
            return -1;
c0105847:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010584c:	eb 65                	jmp    c01058b3 <vfs_access+0x153>
    }
    else
    {
        if ((modus & R_OK) &&
c010584e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105851:	83 e0 01             	and    $0x1,%eax
c0105854:	85 c0                	test   %eax,%eax
c0105856:	74 16                	je     c010586e <vfs_access+0x10e>
                !(node->stat.st_mode & S_IROTH))
c0105858:	8b 45 08             	mov    0x8(%ebp),%eax
c010585b:	8b 40 0c             	mov    0xc(%eax),%eax
c010585e:	25 00 10 00 00       	and    $0x1000,%eax
                !(node->stat.st_mode & S_IXGRP))
            return -1;
    }
    else
    {
        if ((modus & R_OK) &&
c0105863:	85 c0                	test   %eax,%eax
c0105865:	75 07                	jne    c010586e <vfs_access+0x10e>
                !(node->stat.st_mode & S_IROTH))
            return -1;
c0105867:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010586c:	eb 45                	jmp    c01058b3 <vfs_access+0x153>
        if ((modus & W_OK) &&
c010586e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105871:	83 e0 02             	and    $0x2,%eax
c0105874:	85 c0                	test   %eax,%eax
c0105876:	74 16                	je     c010588e <vfs_access+0x12e>
                !(node->stat.st_mode & S_IWOTH))
c0105878:	8b 45 08             	mov    0x8(%ebp),%eax
c010587b:	8b 40 0c             	mov    0xc(%eax),%eax
c010587e:	25 00 20 00 00       	and    $0x2000,%eax
    else
    {
        if ((modus & R_OK) &&
                !(node->stat.st_mode & S_IROTH))
            return -1;
        if ((modus & W_OK) &&
c0105883:	85 c0                	test   %eax,%eax
c0105885:	75 07                	jne    c010588e <vfs_access+0x12e>
                !(node->stat.st_mode & S_IWOTH))
            return -1;
c0105887:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010588c:	eb 25                	jmp    c01058b3 <vfs_access+0x153>
        if ((modus & X_OK) &&
c010588e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105891:	83 e0 04             	and    $0x4,%eax
c0105894:	85 c0                	test   %eax,%eax
c0105896:	74 16                	je     c01058ae <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXOTH))
c0105898:	8b 45 08             	mov    0x8(%ebp),%eax
c010589b:	8b 40 0c             	mov    0xc(%eax),%eax
c010589e:	25 00 40 00 00       	and    $0x4000,%eax
                !(node->stat.st_mode & S_IROTH))
            return -1;
        if ((modus & W_OK) &&
                !(node->stat.st_mode & S_IWOTH))
            return -1;
        if ((modus & X_OK) &&
c01058a3:	85 c0                	test   %eax,%eax
c01058a5:	75 07                	jne    c01058ae <vfs_access+0x14e>
                !(node->stat.st_mode & S_IXOTH))
            return -1;
c01058a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01058ac:	eb 05                	jmp    c01058b3 <vfs_access+0x153>
    }

    return 0;
c01058ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01058b3:	5d                   	pop    %ebp
c01058b4:	c3                   	ret    

c01058b5 <vfs_lookup_path>:
 *
 * @param path
 * @return inode
 */
vfs_inode_t *vfs_lookup_path(char *path)
{
c01058b5:	55                   	push   %ebp
c01058b6:	89 e5                	mov    %esp,%ebp
c01058b8:	83 ec 48             	sub    $0x48,%esp
    vfs_inode_t *parent = root;
c01058bb:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c01058c0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(path[0] != '/')
c01058c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01058c6:	0f b6 00             	movzbl (%eax),%eax
c01058c9:	3c 2f                	cmp    $0x2f,%al
c01058cb:	74 10                	je     c01058dd <vfs_lookup_path+0x28>
    {
        parent = current_thread->process->cwd;
c01058cd:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01058d2:	8b 40 04             	mov    0x4(%eax),%eax
c01058d5:	8b 40 18             	mov    0x18(%eax),%eax
c01058d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058db:	eb 04                	jmp    c01058e1 <vfs_lookup_path+0x2c>
    }
    else
    {
        path++;
c01058dd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    }

    if(path[0] == '\0')
c01058e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01058e4:	0f b6 00             	movzbl (%eax),%eax
c01058e7:	84 c0                	test   %al,%al
c01058e9:	75 08                	jne    c01058f3 <vfs_lookup_path+0x3e>
        return parent;
c01058eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058ee:	e9 f1 00 00 00       	jmp    c01059e4 <vfs_lookup_path+0x12f>

    int len = strlen(path);
c01058f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01058f6:	89 04 24             	mov    %eax,(%esp)
c01058f9:	e8 2b d1 ff ff       	call   c0102a29 <strlen>
c01058fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(path[len-1] == '/')
c0105901:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105904:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105907:	8b 45 08             	mov    0x8(%ebp),%eax
c010590a:	01 d0                	add    %edx,%eax
c010590c:	0f b6 00             	movzbl (%eax),%eax
c010590f:	3c 2f                	cmp    $0x2f,%al
c0105911:	75 0e                	jne    c0105921 <vfs_lookup_path+0x6c>
    {
        path[len-1] = '\0';
c0105913:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105916:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105919:	8b 45 08             	mov    0x8(%ebp),%eax
c010591c:	01 d0                	add    %edx,%eax
c010591e:	c6 00 00             	movb   $0x0,(%eax)
    }

    char delimiter[] = "/";
c0105921:	66 c7 45 de 2f 00    	movw   $0x2f,-0x22(%ebp)
    char *str = (char*) strtok(path, delimiter);
c0105927:	8d 45 de             	lea    -0x22(%ebp),%eax
c010592a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010592e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105931:	89 04 24             	mov    %eax,(%esp)
c0105934:	e8 b1 d3 ff ff       	call   c0102cea <strtok>
c0105939:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while(str != NULL)
c010593c:	e9 96 00 00 00       	jmp    c01059d7 <vfs_lookup_path+0x122>
    {
        int num = parent->length / sizeof(vfs_dentry_t);
c0105941:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105944:	8b 40 08             	mov    0x8(%eax),%eax
c0105947:	c1 e8 03             	shr    $0x3,%eax
c010594a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        int found = 0;
c010594d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
        int i;
        for(i = 0; i < num; i++)
c0105954:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010595b:	eb 4f                	jmp    c01059ac <vfs_lookup_path+0xf7>
        {
            vfs_dentry_t entry;
            vfs_read(parent, i*sizeof(vfs_dentry_t), &entry, sizeof(vfs_dentry_t));
c010595d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105960:	c1 e0 03             	shl    $0x3,%eax
c0105963:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010596a:	00 
c010596b:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c010596e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105972:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105976:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105979:	89 04 24             	mov    %eax,(%esp)
c010597c:	e8 59 fc ff ff       	call   c01055da <vfs_read>
            if(strcmp(str, entry.inode->name) == 0)
c0105981:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105984:	8b 00                	mov    (%eax),%eax
c0105986:	89 44 24 04          	mov    %eax,0x4(%esp)
c010598a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010598d:	89 04 24             	mov    %eax,(%esp)
c0105990:	e8 d8 d1 ff ff       	call   c0102b6d <strcmp>
c0105995:	85 c0                	test   %eax,%eax
c0105997:	75 0f                	jne    c01059a8 <vfs_lookup_path+0xf3>
            {
                parent = entry.inode;
c0105999:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010599c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                found = 1;
c010599f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c01059a6:	eb 0c                	jmp    c01059b4 <vfs_lookup_path+0xff>
    while(str != NULL)
    {
        int num = parent->length / sizeof(vfs_dentry_t);
        int found = 0;
        int i;
        for(i = 0; i < num; i++)
c01059a8:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c01059ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059af:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01059b2:	7c a9                	jl     c010595d <vfs_lookup_path+0xa8>
                found = 1;
                break;
            }
        }

        if(!found)
c01059b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01059b8:	75 07                	jne    c01059c1 <vfs_lookup_path+0x10c>
        {
            return NULL;
c01059ba:	b8 00 00 00 00       	mov    $0x0,%eax
c01059bf:	eb 23                	jmp    c01059e4 <vfs_lookup_path+0x12f>
        }
        else
        {
            str = strtok(NULL, delimiter);
c01059c1:	8d 45 de             	lea    -0x22(%ebp),%eax
c01059c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059c8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01059cf:	e8 16 d3 ff ff       	call   c0102cea <strtok>
c01059d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        path[len-1] = '\0';
    }

    char delimiter[] = "/";
    char *str = (char*) strtok(path, delimiter);
    while(str != NULL)
c01059d7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01059db:	0f 85 60 ff ff ff    	jne    c0105941 <vfs_lookup_path+0x8c>
        {
            str = strtok(NULL, delimiter);
        }
    }

    return parent;
c01059e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01059e4:	c9                   	leave  
c01059e5:	c3                   	ret    

c01059e6 <vfs_create_path>:
 * @param uid
 * @param gid
 * @return inode
 */
vfs_inode_t *vfs_create_path(char *path, mode_t mode, uid_t uid, gid_t gid)
{
c01059e6:	55                   	push   %ebp
c01059e7:	89 e5                	mov    %esp,%ebp
c01059e9:	83 ec 58             	sub    $0x58,%esp
    vfs_inode_t *parent = root;
c01059ec:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c01059f1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(path[0] != '/')
c01059f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01059f7:	0f b6 00             	movzbl (%eax),%eax
c01059fa:	3c 2f                	cmp    $0x2f,%al
c01059fc:	74 10                	je     c0105a0e <vfs_create_path+0x28>
    {
        parent = current_thread->process->cwd;
c01059fe:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105a03:	8b 40 04             	mov    0x4(%eax),%eax
c0105a06:	8b 40 18             	mov    0x18(%eax),%eax
c0105a09:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105a0c:	eb 04                	jmp    c0105a12 <vfs_create_path+0x2c>
    }
    else
    {
        path++;
c0105a0e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    }

    if(path[0] == '\0')
c0105a12:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a15:	0f b6 00             	movzbl (%eax),%eax
c0105a18:	84 c0                	test   %al,%al
c0105a1a:	75 08                	jne    c0105a24 <vfs_create_path+0x3e>
        return parent;
c0105a1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a1f:	e9 58 01 00 00       	jmp    c0105b7c <vfs_create_path+0x196>

    int len = strlen(path);
c0105a24:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a27:	89 04 24             	mov    %eax,(%esp)
c0105a2a:	e8 fa cf ff ff       	call   c0102a29 <strlen>
c0105a2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(path[len-1] == '/')
c0105a32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a35:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105a38:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a3b:	01 d0                	add    %edx,%eax
c0105a3d:	0f b6 00             	movzbl (%eax),%eax
c0105a40:	3c 2f                	cmp    $0x2f,%al
c0105a42:	75 0e                	jne    c0105a52 <vfs_create_path+0x6c>
    {
        path[len-1] = '\0';
c0105a44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a47:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a4d:	01 d0                	add    %edx,%eax
c0105a4f:	c6 00 00             	movb   $0x0,(%eax)
    }

    char delimiter[] = "/";
c0105a52:	66 c7 45 d6 2f 00    	movw   $0x2f,-0x2a(%ebp)
    char *str = (char*) strtok(path, delimiter);
c0105a58:	8d 45 d6             	lea    -0x2a(%ebp),%eax
c0105a5b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a62:	89 04 24             	mov    %eax,(%esp)
c0105a65:	e8 80 d2 ff ff       	call   c0102cea <strtok>
c0105a6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while(str != NULL)
c0105a6d:	e9 fd 00 00 00       	jmp    c0105b6f <vfs_create_path+0x189>
    {
        int num = parent->length / sizeof(vfs_dentry_t);
c0105a72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a75:	8b 40 08             	mov    0x8(%eax),%eax
c0105a78:	c1 e8 03             	shr    $0x3,%eax
c0105a7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        int found = 0;
c0105a7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
        int i;
        for(i = 0; i < num; i++)
c0105a85:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105a8c:	eb 4f                	jmp    c0105add <vfs_create_path+0xf7>
        {
            vfs_dentry_t entry;
            vfs_read(parent, i*sizeof(vfs_dentry_t), &entry, sizeof(vfs_dentry_t));
c0105a8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a91:	c1 e0 03             	shl    $0x3,%eax
c0105a94:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0105a9b:	00 
c0105a9c:	8d 55 cc             	lea    -0x34(%ebp),%edx
c0105a9f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105aa3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aaa:	89 04 24             	mov    %eax,(%esp)
c0105aad:	e8 28 fb ff ff       	call   c01055da <vfs_read>
            if(strcmp(str, entry.inode->name) == 0)
c0105ab2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105ab5:	8b 00                	mov    (%eax),%eax
c0105ab7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105abb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105abe:	89 04 24             	mov    %eax,(%esp)
c0105ac1:	e8 a7 d0 ff ff       	call   c0102b6d <strcmp>
c0105ac6:	85 c0                	test   %eax,%eax
c0105ac8:	75 0f                	jne    c0105ad9 <vfs_create_path+0xf3>
            {
                parent = entry.inode;
c0105aca:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105acd:	89 45 f4             	mov    %eax,-0xc(%ebp)
                found = 1;
c0105ad0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0105ad7:	eb 0c                	jmp    c0105ae5 <vfs_create_path+0xff>
    while(str != NULL)
    {
        int num = parent->length / sizeof(vfs_dentry_t);
        int found = 0;
        int i;
        for(i = 0; i < num; i++)
c0105ad9:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0105add:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ae0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105ae3:	7c a9                	jl     c0105a8e <vfs_create_path+0xa8>
                found = 1;
                break;
            }
        }

        char *new_str = strtok(NULL, delimiter);
c0105ae5:	8d 45 d6             	lea    -0x2a(%ebp),%eax
c0105ae8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105aec:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0105af3:	e8 f2 d1 ff ff       	call   c0102cea <strtok>
c0105af8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if(!found)
c0105afb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105aff:	75 68                	jne    c0105b69 <vfs_create_path+0x183>
        {
            int n_mode = mode;
c0105b01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b04:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if(new_str != NULL)
c0105b07:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105b0b:	74 04                	je     c0105b11 <vfs_create_path+0x12b>
            {
                mode |= S_IFDIR;
c0105b0d:	83 4d 0c 05          	orl    $0x5,0xc(%ebp)
            }

            if(vfs_access(parent, W_OK, uid, gid) == 0)
c0105b11:	8b 45 14             	mov    0x14(%ebp),%eax
c0105b14:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105b18:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b1b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b1f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0105b26:	00 
c0105b27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b2a:	89 04 24             	mov    %eax,(%esp)
c0105b2d:	e8 2e fc ff ff       	call   c0105760 <vfs_access>
c0105b32:	85 c0                	test   %eax,%eax
c0105b34:	75 2c                	jne    c0105b62 <vfs_create_path+0x17c>
            {
                parent = vfs_create_inode(str, n_mode, parent, uid, gid);
c0105b36:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105b39:	8b 55 14             	mov    0x14(%ebp),%edx
c0105b3c:	89 54 24 10          	mov    %edx,0x10(%esp)
c0105b40:	8b 55 10             	mov    0x10(%ebp),%edx
c0105b43:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105b47:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105b4a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105b4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b55:	89 04 24             	mov    %eax,(%esp)
c0105b58:	e8 a2 f6 ff ff       	call   c01051ff <vfs_create_inode>
c0105b5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105b60:	eb 07                	jmp    c0105b69 <vfs_create_path+0x183>
            }
            else
            {
                return NULL;
c0105b62:	b8 00 00 00 00       	mov    $0x0,%eax
c0105b67:	eb 13                	jmp    c0105b7c <vfs_create_path+0x196>
            }
        }
        str = new_str;
c0105b69:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        path[len-1] = '\0';
    }

    char delimiter[] = "/";
    char *str = (char*) strtok(path, delimiter);
    while(str != NULL)
c0105b6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105b73:	0f 85 f9 fe ff ff    	jne    c0105a72 <vfs_create_path+0x8c>
            }
        }
        str = new_str;
    }

    return parent;
c0105b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105b7c:	c9                   	leave  
c0105b7d:	c3                   	ret    

c0105b7e <vfs_debug_output_all>:

#ifdef VFS_DEBUG
void vfs_debug_output_all()
{
c0105b7e:	55                   	push   %ebp
c0105b7f:	89 e5                	mov    %esp,%ebp
c0105b81:	83 ec 18             	sub    $0x18,%esp
    vfs_debug_output(root);
c0105b84:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0105b89:	89 04 24             	mov    %eax,(%esp)
c0105b8c:	e8 02 00 00 00       	call   c0105b93 <vfs_debug_output>
}
c0105b91:	c9                   	leave  
c0105b92:	c3                   	ret    

c0105b93 <vfs_debug_output>:

void vfs_debug_output(vfs_inode_t *start)
{
c0105b93:	55                   	push   %ebp
c0105b94:	89 e5                	mov    %esp,%ebp
c0105b96:	83 ec 28             	sub    $0x28,%esp
    vfs_inode_t *current;

    int num = start->length / sizeof(vfs_dentry_t);
c0105b99:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b9c:	8b 40 08             	mov    0x8(%eax),%eax
c0105b9f:	c1 e8 03             	shr    $0x3,%eax
c0105ba2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vfs_dentry_t *entries = malloc(start->length);
c0105ba5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ba8:	8b 40 08             	mov    0x8(%eax),%eax
c0105bab:	89 04 24             	mov    %eax,(%esp)
c0105bae:	e8 e9 7a 00 00       	call   c010d69c <malloc>
c0105bb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vfs_read(start, 0, entries, start->length);
c0105bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bb9:	8b 40 08             	mov    0x8(%eax),%eax
c0105bbc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105bc0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105bc3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105bc7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105bce:	00 
c0105bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bd2:	89 04 24             	mov    %eax,(%esp)
c0105bd5:	e8 00 fa ff ff       	call   c01055da <vfs_read>

    int i;
    for(i = 0; i < num; i++)
c0105bda:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0105be1:	e9 87 00 00 00       	jmp    c0105c6d <vfs_debug_output+0xda>
    {
        if(S_ISDIR(entries[i].inode->stat))
c0105be6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105be9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105bf0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105bf3:	01 d0                	add    %edx,%eax
c0105bf5:	8b 40 04             	mov    0x4(%eax),%eax
c0105bf8:	8b 40 0c             	mov    0xc(%eax),%eax
c0105bfb:	83 e0 05             	and    $0x5,%eax
c0105bfe:	85 c0                	test   %eax,%eax
c0105c00:	74 1c                	je     c0105c1e <vfs_debug_output+0x8b>
        {
            vfs_debug_output(entries[i].inode);
c0105c02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c05:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105c0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c0f:	01 d0                	add    %edx,%eax
c0105c11:	8b 40 04             	mov    0x4(%eax),%eax
c0105c14:	89 04 24             	mov    %eax,(%esp)
c0105c17:	e8 77 ff ff ff       	call   c0105b93 <vfs_debug_output>
c0105c1c:	eb 4b                	jmp    c0105c69 <vfs_debug_output+0xd6>
        }
        else
        {
            current = entries[i].inode;
c0105c1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c21:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105c28:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c2b:	01 d0                	add    %edx,%eax
c0105c2d:	8b 40 04             	mov    0x4(%eax),%eax
c0105c30:	89 45 f4             	mov    %eax,-0xc(%ebp)

            while(current != root)
c0105c33:	eb 1e                	jmp    c0105c53 <vfs_debug_output+0xc0>
            {
                printf("%s in ", current->name);
c0105c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c38:	8b 00                	mov    (%eax),%eax
c0105c3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c3e:	c7 04 24 9f 18 11 c0 	movl   $0xc011189f,(%esp)
c0105c45:	e8 33 d5 ff ff       	call   c010317d <printf>
                current = current->parent;
c0105c4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c4d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0105c50:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else
        {
            current = entries[i].inode;

            while(current != root)
c0105c53:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0105c58:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0105c5b:	75 d8                	jne    c0105c35 <vfs_debug_output+0xa2>
            {
                printf("%s in ", current->name);
                current = current->parent;
            }

            printf("root\n");
c0105c5d:	c7 04 24 a6 18 11 c0 	movl   $0xc01118a6,(%esp)
c0105c64:	e8 41 60 00 00       	call   c010bcaa <puts>
    int num = start->length / sizeof(vfs_dentry_t);
    vfs_dentry_t *entries = malloc(start->length);
    vfs_read(start, 0, entries, start->length);

    int i;
    for(i = 0; i < num; i++)
c0105c69:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0105c6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c70:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0105c73:	0f 8c 6d ff ff ff    	jl     c0105be6 <vfs_debug_output+0x53>

            printf("root\n");
        }
    }

    free(entries);
c0105c79:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c7c:	89 04 24             	mov    %eax,(%esp)
c0105c7f:	e8 ff 7a 00 00       	call   c010d783 <free>
}
c0105c84:	c9                   	leave  
c0105c85:	c3                   	ret    

c0105c86 <get_fd>:
#endif

// Systemcalls

struct fd *get_fd(int fd)
{
c0105c86:	55                   	push   %ebp
c0105c87:	89 e5                	mov    %esp,%ebp
c0105c89:	83 ec 10             	sub    $0x10,%esp
    struct fd *desc = NULL;
c0105c8c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    struct list_node *node = current_thread->process->files->head->next;
c0105c93:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105c98:	8b 40 04             	mov    0x4(%eax),%eax
c0105c9b:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105c9e:	8b 40 04             	mov    0x4(%eax),%eax
c0105ca1:	8b 00                	mov    (%eax),%eax
c0105ca3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while(node != current_thread->process->files->head)
c0105ca6:	eb 22                	jmp    c0105cca <get_fd+0x44>
    {
        desc = node->element;
c0105ca8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105cab:	8b 40 08             	mov    0x8(%eax),%eax
c0105cae:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if(desc->id == fd)
c0105cb1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105cb4:	8b 10                	mov    (%eax),%edx
c0105cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cb9:	39 c2                	cmp    %eax,%edx
c0105cbb:	75 05                	jne    c0105cc2 <get_fd+0x3c>
        {
            return desc;
c0105cbd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105cc0:	eb 20                	jmp    c0105ce2 <get_fd+0x5c>
        }
        else
        {
            node = node->next;
c0105cc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105cc5:	8b 00                	mov    (%eax),%eax
c0105cc7:	89 45 fc             	mov    %eax,-0x4(%ebp)

struct fd *get_fd(int fd)
{
    struct fd *desc = NULL;
    struct list_node *node = current_thread->process->files->head->next;
    while(node != current_thread->process->files->head)
c0105cca:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105ccf:	8b 40 04             	mov    0x4(%eax),%eax
c0105cd2:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105cd5:	8b 40 04             	mov    0x4(%eax),%eax
c0105cd8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0105cdb:	75 cb                	jne    c0105ca8 <get_fd+0x22>
        {
            node = node->next;
        }
    }

    return NULL;
c0105cdd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ce2:	c9                   	leave  
c0105ce3:	c3                   	ret    

c0105ce4 <sys_open>:

void sys_open(struct cpu_state **cpu)
{
c0105ce4:	55                   	push   %ebp
c0105ce5:	89 e5                	mov    %esp,%ebp
c0105ce7:	83 ec 38             	sub    $0x38,%esp
    char *path = (char *) (*cpu)->CPU_ARG1;
c0105cea:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ced:	8b 00                	mov    (%eax),%eax
c0105cef:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105cf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int oflags = (*cpu)->CPU_ARG2;
c0105cf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cf8:	8b 00                	mov    (%eax),%eax
c0105cfa:	8b 40 24             	mov    0x24(%eax),%eax
c0105cfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    mode_t mode = (*cpu)->CPU_ARG3;
c0105d00:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d03:	8b 00                	mov    (%eax),%eax
c0105d05:	8b 40 20             	mov    0x20(%eax),%eax
c0105d08:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vfs_inode_t *inode = vfs_lookup_path(path);
c0105d0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d0e:	89 04 24             	mov    %eax,(%esp)
c0105d11:	e8 9f fb ff ff       	call   c01058b5 <vfs_lookup_path>
c0105d16:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if(inode == NULL)
c0105d19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d1d:	75 65                	jne    c0105d84 <sys_open+0xa0>
    {
        if(oflags & O_CREAT)   // create inode
c0105d1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d22:	83 e0 20             	and    $0x20,%eax
c0105d25:	85 c0                	test   %eax,%eax
c0105d27:	74 4a                	je     c0105d73 <sys_open+0x8f>
        {
            inode = vfs_create_path(path, mode, current_thread->process->uid, current_thread->process->gid);
c0105d29:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105d2e:	8b 40 04             	mov    0x4(%eax),%eax
c0105d31:	8b 50 08             	mov    0x8(%eax),%edx
c0105d34:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105d39:	8b 40 04             	mov    0x4(%eax),%eax
c0105d3c:	8b 40 04             	mov    0x4(%eax),%eax
c0105d3f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105d43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d51:	89 04 24             	mov    %eax,(%esp)
c0105d54:	e8 8d fc ff ff       	call   c01059e6 <vfs_create_path>
c0105d59:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if(inode == NULL)
c0105d5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d60:	75 3d                	jne    c0105d9f <sys_open+0xbb>
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0105d62:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d65:	8b 00                	mov    (%eax),%eax
c0105d67:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
                return;
c0105d6e:	e9 68 01 00 00       	jmp    c0105edb <sys_open+0x1f7>
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _FAILURE;
c0105d73:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d76:	8b 00                	mov    (%eax),%eax
c0105d78:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            return;
c0105d7f:	e9 57 01 00 00       	jmp    c0105edb <sys_open+0x1f7>
        }
    }
    else
    {
        if(oflags & O_EXCL)
c0105d84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d87:	83 e0 40             	and    $0x40,%eax
c0105d8a:	85 c0                	test   %eax,%eax
c0105d8c:	74 11                	je     c0105d9f <sys_open+0xbb>
        {
            (*cpu)->CPU_ARG0 = _FAILURE;
c0105d8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d91:	8b 00                	mov    (%eax),%eax
c0105d93:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            return;
c0105d9a:	e9 3c 01 00 00       	jmp    c0105edb <sys_open+0x1f7>
        }
    }

    if(vfs_access(inode, R_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c0105d9f:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105da4:	8b 40 04             	mov    0x4(%eax),%eax
c0105da7:	8b 50 08             	mov    0x8(%eax),%edx
c0105daa:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105daf:	8b 40 04             	mov    0x4(%eax),%eax
c0105db2:	8b 40 04             	mov    0x4(%eax),%eax
c0105db5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105db9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105dbd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105dc4:	00 
c0105dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105dc8:	89 04 24             	mov    %eax,(%esp)
c0105dcb:	e8 90 f9 ff ff       	call   c0105760 <vfs_access>
c0105dd0:	85 c0                	test   %eax,%eax
c0105dd2:	0f 85 f7 00 00 00    	jne    c0105ecf <sys_open+0x1eb>
    {
        if(oflags & O_TRUNC)
c0105dd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ddb:	83 e0 10             	and    $0x10,%eax
c0105dde:	85 c0                	test   %eax,%eax
c0105de0:	74 46                	je     c0105e28 <sys_open+0x144>
        {
            if(vfs_access(inode, W_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c0105de2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105de7:	8b 40 04             	mov    0x4(%eax),%eax
c0105dea:	8b 50 08             	mov    0x8(%eax),%edx
c0105ded:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105df2:	8b 40 04             	mov    0x4(%eax),%eax
c0105df5:	8b 40 04             	mov    0x4(%eax),%eax
c0105df8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0105dfc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e00:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0105e07:	00 
c0105e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e0b:	89 04 24             	mov    %eax,(%esp)
c0105e0e:	e8 4d f9 ff ff       	call   c0105760 <vfs_access>
c0105e13:	85 c0                	test   %eax,%eax
c0105e15:	74 11                	je     c0105e28 <sys_open+0x144>
            {
                // TODO: clear file
            }
            else
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0105e17:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e1a:	8b 00                	mov    (%eax),%eax
c0105e1c:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
                return;
c0105e23:	e9 b3 00 00 00       	jmp    c0105edb <sys_open+0x1f7>
            }
        }

        struct fd *desc = malloc(sizeof(struct fd));
c0105e28:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0105e2f:	e8 68 78 00 00       	call   c010d69c <malloc>
c0105e34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        desc->id = list_length(current_thread->process->files);
c0105e37:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105e3c:	8b 40 04             	mov    0x4(%eax),%eax
c0105e3f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105e42:	89 04 24             	mov    %eax,(%esp)
c0105e45:	e8 80 c9 ff ff       	call   c01027ca <list_length>
c0105e4a:	89 c2                	mov    %eax,%edx
c0105e4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e4f:	89 10                	mov    %edx,(%eax)
        desc->mode = mode;
c0105e51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e54:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105e57:	89 50 08             	mov    %edx,0x8(%eax)
        desc->flags = oflags;
c0105e5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e5d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105e60:	89 50 0c             	mov    %edx,0xc(%eax)
        desc->read_pos = 0;
c0105e63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e66:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        desc->write_pos = 0;
c0105e6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e70:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        desc->inode = inode;
c0105e77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105e7d:	89 50 04             	mov    %edx,0x4(%eax)

        if(oflags & O_APPEND)
c0105e80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e83:	83 e0 08             	and    $0x8,%eax
c0105e86:	85 c0                	test   %eax,%eax
c0105e88:	74 1c                	je     c0105ea6 <sys_open+0x1c2>
        {
            desc->read_pos = inode->length;
c0105e8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e8d:	8b 40 08             	mov    0x8(%eax),%eax
c0105e90:	89 c2                	mov    %eax,%edx
c0105e92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e95:	89 50 10             	mov    %edx,0x10(%eax)
            desc->write_pos = inode->length;
c0105e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e9b:	8b 40 08             	mov    0x8(%eax),%eax
c0105e9e:	89 c2                	mov    %eax,%edx
c0105ea0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ea3:	89 50 14             	mov    %edx,0x14(%eax)
        }

        list_push_back(current_thread->process->files, desc);
c0105ea6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105eab:	8b 40 04             	mov    0x4(%eax),%eax
c0105eae:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105eb1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105eb4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105eb8:	89 04 24             	mov    %eax,(%esp)
c0105ebb:	e8 a2 c7 ff ff       	call   c0102662 <list_push_back>

        (*cpu)->CPU_ARG0 = desc->id;
c0105ec0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ec3:	8b 00                	mov    (%eax),%eax
c0105ec5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105ec8:	8b 12                	mov    (%edx),%edx
c0105eca:	89 50 28             	mov    %edx,0x28(%eax)
c0105ecd:	eb 0c                	jmp    c0105edb <sys_open+0x1f7>
    }
    else
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0105ecf:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ed2:	8b 00                	mov    (%eax),%eax
c0105ed4:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    }
}
c0105edb:	c9                   	leave  
c0105edc:	c3                   	ret    

c0105edd <sys_pipe>:

void sys_pipe(struct cpu_state **cpu)
{
c0105edd:	55                   	push   %ebp
c0105ede:	89 e5                	mov    %esp,%ebp
c0105ee0:	53                   	push   %ebx
c0105ee1:	83 ec 24             	sub    $0x24,%esp
    int *id = (int *) (*cpu)->CPU_ARG1;
c0105ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ee7:	8b 00                	mov    (%eax),%eax
c0105ee9:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105eec:	89 45 f4             	mov    %eax,-0xc(%ebp)

    vfs_inode_t *inode = vfs_create_pipe(current_thread->process->uid, current_thread->process->gid);
c0105eef:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105ef4:	8b 40 04             	mov    0x4(%eax),%eax
c0105ef7:	8b 50 08             	mov    0x8(%eax),%edx
c0105efa:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105eff:	8b 40 04             	mov    0x4(%eax),%eax
c0105f02:	8b 40 04             	mov    0x4(%eax),%eax
c0105f05:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105f09:	89 04 24             	mov    %eax,(%esp)
c0105f0c:	e8 2b f4 ff ff       	call   c010533c <vfs_create_pipe>
c0105f11:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // create read channel
    struct fd *desc0 = malloc(sizeof(struct fd));
c0105f14:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0105f1b:	e8 7c 77 00 00       	call   c010d69c <malloc>
c0105f20:	89 45 ec             	mov    %eax,-0x14(%ebp)
    desc0->id = id[0] = list_length(current_thread->process->files);
c0105f23:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105f28:	8b 40 04             	mov    0x4(%eax),%eax
c0105f2b:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105f2e:	89 04 24             	mov    %eax,(%esp)
c0105f31:	e8 94 c8 ff ff       	call   c01027ca <list_length>
c0105f36:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105f39:	89 02                	mov    %eax,(%edx)
c0105f3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f3e:	8b 00                	mov    (%eax),%eax
c0105f40:	89 c2                	mov    %eax,%edx
c0105f42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f45:	89 10                	mov    %edx,(%eax)
    desc0->mode = O_APPEND;
c0105f47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f4a:	c7 40 08 08 00 00 00 	movl   $0x8,0x8(%eax)
    desc0->flags = O_RDONLY;
c0105f51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f54:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
    desc0->read_pos = 0;
c0105f5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f5e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc0->write_pos = 0;
c0105f65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f68:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc0->inode = inode;
c0105f6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f72:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105f75:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(current_thread->process->files, desc0);
c0105f78:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105f7d:	8b 40 04             	mov    0x4(%eax),%eax
c0105f80:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105f83:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105f86:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105f8a:	89 04 24             	mov    %eax,(%esp)
c0105f8d:	e8 d0 c6 ff ff       	call   c0102662 <list_push_back>

    // create write channel
    struct fd *desc1 = malloc(sizeof(struct fd));
c0105f92:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0105f99:	e8 fe 76 00 00       	call   c010d69c <malloc>
c0105f9e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    desc1->id = id[1] = list_length(current_thread->process->files);
c0105fa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fa4:	8d 58 04             	lea    0x4(%eax),%ebx
c0105fa7:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105fac:	8b 40 04             	mov    0x4(%eax),%eax
c0105faf:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105fb2:	89 04 24             	mov    %eax,(%esp)
c0105fb5:	e8 10 c8 ff ff       	call   c01027ca <list_length>
c0105fba:	89 03                	mov    %eax,(%ebx)
c0105fbc:	8b 03                	mov    (%ebx),%eax
c0105fbe:	89 c2                	mov    %eax,%edx
c0105fc0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fc3:	89 10                	mov    %edx,(%eax)
    desc1->mode = O_APPEND;
c0105fc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fc8:	c7 40 08 08 00 00 00 	movl   $0x8,0x8(%eax)
    desc1->flags = O_WRONLY;
c0105fcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fd2:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
    desc1->read_pos = 0;
c0105fd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fdc:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    desc1->write_pos = 0;
c0105fe3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fe6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    desc1->inode = inode;
c0105fed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ff0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105ff3:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_back(current_thread->process->files, desc1);
c0105ff6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0105ffb:	8b 40 04             	mov    0x4(%eax),%eax
c0105ffe:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106001:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106004:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106008:	89 04 24             	mov    %eax,(%esp)
c010600b:	e8 52 c6 ff ff       	call   c0102662 <list_push_back>

    //printf("kernel: piieeepe %d %d\n", desc0->id, desc1->id);

    if(desc0 != NULL && desc1 != NULL && inode != NULL)
c0106010:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106014:	74 1a                	je     c0106030 <sys_pipe+0x153>
c0106016:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010601a:	74 14                	je     c0106030 <sys_pipe+0x153>
c010601c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106020:	74 0e                	je     c0106030 <sys_pipe+0x153>
    {
        (*cpu)->CPU_ARG0 = _SUCCESS;
c0106022:	8b 45 08             	mov    0x8(%ebp),%eax
c0106025:	8b 00                	mov    (%eax),%eax
c0106027:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c010602e:	eb 0c                	jmp    c010603c <sys_pipe+0x15f>
    }
    else
    {
        //	printf("feehler\n");
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106030:	8b 45 08             	mov    0x8(%ebp),%eax
c0106033:	8b 00                	mov    (%eax),%eax
c0106035:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c010603c:	83 c4 24             	add    $0x24,%esp
c010603f:	5b                   	pop    %ebx
c0106040:	5d                   	pop    %ebp
c0106041:	c3                   	ret    

c0106042 <sys_mknod>:

void sys_mknod(struct cpu_state **cpu)
{
c0106042:	55                   	push   %ebp
c0106043:	89 e5                	mov    %esp,%ebp
c0106045:	53                   	push   %ebx
c0106046:	83 ec 24             	sub    $0x24,%esp
    char *path = (char *) (*cpu)->CPU_ARG1;
c0106049:	8b 45 08             	mov    0x8(%ebp),%eax
c010604c:	8b 00                	mov    (%eax),%eax
c010604e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106051:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int mode =(int) (*cpu)->CPU_ARG2;
c0106054:	8b 45 08             	mov    0x8(%ebp),%eax
c0106057:	8b 00                	mov    (%eax),%eax
c0106059:	8b 40 24             	mov    0x24(%eax),%eax
c010605c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //int dev = (int)(*cpu)->CPU_ARG3; // unused

    vfs_inode_t *inode = vfs_create_path(path, mode, current_thread->process->uid, current_thread->process->gid);
c010605f:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106064:	8b 40 04             	mov    0x4(%eax),%eax
c0106067:	8b 48 08             	mov    0x8(%eax),%ecx
c010606a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010606f:	8b 40 04             	mov    0x4(%eax),%eax
c0106072:	8b 50 04             	mov    0x4(%eax),%edx
c0106075:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106078:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010607c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106080:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106084:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106087:	89 04 24             	mov    %eax,(%esp)
c010608a:	e8 57 f9 ff ff       	call   c01059e6 <vfs_create_path>
c010608f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(inode != NULL)
c0106092:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106096:	74 41                	je     c01060d9 <sys_mknod+0x97>
    {
        if(S_ISFIFO(inode->stat))
c0106098:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010609b:	8b 40 0c             	mov    0xc(%eax),%eax
c010609e:	83 e0 03             	and    $0x3,%eax
c01060a1:	85 c0                	test   %eax,%eax
c01060a3:	74 26                	je     c01060cb <sys_mknod+0x89>
        {
            inode->buffer->event_id = get_new_event_ID();
c01060a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060a8:	8b 58 38             	mov    0x38(%eax),%ebx
c01060ab:	e8 9b 45 00 00       	call   c010a64b <get_new_event_ID>
c01060b0:	89 43 08             	mov    %eax,0x8(%ebx)
            inode->buffer->handlers = list_create();
c01060b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060b6:	8b 58 38             	mov    0x38(%eax),%ebx
c01060b9:	e8 c0 c4 ff ff       	call   c010257e <list_create>
c01060be:	89 43 0c             	mov    %eax,0xc(%ebx)
            inode->type = VFS_PIPE;
c01060c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060c4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        }

        (*cpu)->CPU_ARG0 = _SUCCESS;
c01060cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01060ce:	8b 00                	mov    (%eax),%eax
c01060d0:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c01060d7:	eb 0c                	jmp    c01060e5 <sys_mknod+0xa3>
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c01060d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01060dc:	8b 00                	mov    (%eax),%eax
c01060de:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c01060e5:	83 c4 24             	add    $0x24,%esp
c01060e8:	5b                   	pop    %ebx
c01060e9:	5d                   	pop    %ebp
c01060ea:	c3                   	ret    

c01060eb <sys_close>:

void sys_close(struct cpu_state **cpu)
{
c01060eb:	55                   	push   %ebp
c01060ec:	89 e5                	mov    %esp,%ebp
c01060ee:	83 ec 28             	sub    $0x28,%esp
    int fd = (*cpu)->CPU_ARG1;
c01060f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01060f4:	8b 00                	mov    (%eax),%eax
c01060f6:	8b 40 1c             	mov    0x1c(%eax),%eax
c01060f9:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct list_node *node = current_thread->process->files->head->next;
c01060fc:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106101:	8b 40 04             	mov    0x4(%eax),%eax
c0106104:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106107:	8b 40 04             	mov    0x4(%eax),%eax
c010610a:	8b 00                	mov    (%eax),%eax
c010610c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int i;
    for(i = 0; i < list_length(current_thread->process->files); i++)
c010610f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0106116:	eb 3a                	jmp    c0106152 <sys_close+0x67>
    {
        struct fd *desc = node->element;
c0106118:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010611b:	8b 40 08             	mov    0x8(%eax),%eax
c010611e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(desc->id == fd)
c0106121:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106124:	8b 10                	mov    (%eax),%edx
c0106126:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106129:	39 c2                	cmp    %eax,%edx
c010612b:	75 19                	jne    c0106146 <sys_close+0x5b>
        {
            list_remove_node(node);
c010612d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106130:	89 04 24             	mov    %eax,(%esp)
c0106133:	e8 cd c5 ff ff       	call   c0102705 <list_remove_node>
            (*cpu)->CPU_ARG0 = _SUCCESS;
c0106138:	8b 45 08             	mov    0x8(%ebp),%eax
c010613b:	8b 00                	mov    (%eax),%eax
c010613d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
            return;
c0106144:	eb 30                	jmp    c0106176 <sys_close+0x8b>
        }
        else
        {
            node = node->next;
c0106146:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106149:	8b 00                	mov    (%eax),%eax
c010614b:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
    int fd = (*cpu)->CPU_ARG1;

    struct list_node *node = current_thread->process->files->head->next;
    int i;
    for(i = 0; i < list_length(current_thread->process->files); i++)
c010614e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0106152:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106157:	8b 40 04             	mov    0x4(%eax),%eax
c010615a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010615d:	89 04 24             	mov    %eax,(%esp)
c0106160:	e8 65 c6 ff ff       	call   c01027ca <list_length>
c0106165:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106168:	7f ae                	jg     c0106118 <sys_close+0x2d>
        {
            node = node->next;
        }
    }

    (*cpu)->CPU_ARG0 = _FAILURE;
c010616a:	8b 45 08             	mov    0x8(%ebp),%eax
c010616d:	8b 00                	mov    (%eax),%eax
c010616f:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
}
c0106176:	c9                   	leave  
c0106177:	c3                   	ret    

c0106178 <sys_read>:

void sys_read(struct cpu_state **cpu)
{
c0106178:	55                   	push   %ebp
c0106179:	89 e5                	mov    %esp,%ebp
c010617b:	83 ec 48             	sub    $0x48,%esp
    int fd = (*cpu)->CPU_ARG1;
c010617e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106181:	8b 00                	mov    (%eax),%eax
c0106183:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106186:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *buf = (void*) (*cpu)->CPU_ARG2;
c0106189:	8b 45 08             	mov    0x8(%ebp),%eax
c010618c:	8b 00                	mov    (%eax),%eax
c010618e:	8b 40 24             	mov    0x24(%eax),%eax
c0106191:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (*cpu)->CPU_ARG3;
c0106194:	8b 45 08             	mov    0x8(%ebp),%eax
c0106197:	8b 00                	mov    (%eax),%eax
c0106199:	8b 40 20             	mov    0x20(%eax),%eax
c010619c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct fd *desc = get_fd(fd);
c010619f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061a2:	89 04 24             	mov    %eax,(%esp)
c01061a5:	e8 dc fa ff ff       	call   c0105c86 <get_fd>
c01061aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(desc != NULL)
c01061ad:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01061b1:	0f 84 63 01 00 00    	je     c010631a <sys_read+0x1a2>
    {
        if(desc->flags & O_RDONLY ||
c01061b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061ba:	8b 40 0c             	mov    0xc(%eax),%eax
c01061bd:	83 e0 01             	and    $0x1,%eax
c01061c0:	85 c0                	test   %eax,%eax
c01061c2:	75 11                	jne    c01061d5 <sys_read+0x5d>
                desc->flags & O_RDWR)
c01061c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061c7:	8b 40 0c             	mov    0xc(%eax),%eax
c01061ca:	83 e0 04             	and    $0x4,%eax
    size_t len = (*cpu)->CPU_ARG3;

    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
c01061cd:	85 c0                	test   %eax,%eax
c01061cf:	0f 84 37 01 00 00    	je     c010630c <sys_read+0x194>
                desc->flags & O_RDWR)
        {
            vfs_inode_t *inode = desc->inode;
c01061d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061d8:	8b 40 04             	mov    0x4(%eax),%eax
c01061db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vfs_buffer_info_t *info = inode->buffer;
c01061de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061e1:	8b 40 38             	mov    0x38(%eax),%eax
c01061e4:	89 45 e0             	mov    %eax,-0x20(%ebp)

            if(vfs_access(inode, R_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c01061e7:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01061ec:	8b 40 04             	mov    0x4(%eax),%eax
c01061ef:	8b 50 08             	mov    0x8(%eax),%edx
c01061f2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01061f7:	8b 40 04             	mov    0x4(%eax),%eax
c01061fa:	8b 40 04             	mov    0x4(%eax),%eax
c01061fd:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106201:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106205:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010620c:	00 
c010620d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106210:	89 04 24             	mov    %eax,(%esp)
c0106213:	e8 48 f5 ff ff       	call   c0105760 <vfs_access>
c0106218:	85 c0                	test   %eax,%eax
c010621a:	0f 85 dd 00 00 00    	jne    c01062fd <sys_read+0x185>
            {
                int ret = vfs_read(inode, desc->read_pos, buf, len);
c0106220:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106223:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106226:	8b 40 10             	mov    0x10(%eax),%eax
c0106229:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010622d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106230:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106234:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106238:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010623b:	89 04 24             	mov    %eax,(%esp)
c010623e:	e8 97 f3 ff ff       	call   c01055da <vfs_read>
c0106243:	89 45 dc             	mov    %eax,-0x24(%ebp)
                if(ret == len)
c0106246:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106249:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010624c:	75 45                	jne    c0106293 <sys_read+0x11b>
                {
                    desc->read_pos += len;
c010624e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106251:	8b 40 10             	mov    0x10(%eax),%eax
c0106254:	89 c2                	mov    %eax,%edx
c0106256:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106259:	01 d0                	add    %edx,%eax
c010625b:	89 c2                	mov    %eax,%edx
c010625d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106260:	89 50 10             	mov    %edx,0x10(%eax)
                    if(inode->type != VFS_PIPE)
c0106263:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106266:	8b 40 04             	mov    0x4(%eax),%eax
c0106269:	83 f8 01             	cmp    $0x1,%eax
c010626c:	74 15                	je     c0106283 <sys_read+0x10b>
                    {
                        desc->write_pos += len;
c010626e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106271:	8b 40 14             	mov    0x14(%eax),%eax
c0106274:	89 c2                	mov    %eax,%edx
c0106276:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106279:	01 d0                	add    %edx,%eax
c010627b:	89 c2                	mov    %eax,%edx
c010627d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106280:	89 50 14             	mov    %edx,0x14(%eax)
                    }

                    (*cpu)->CPU_ARG0 = len;
c0106283:	8b 45 08             	mov    0x8(%ebp),%eax
c0106286:	8b 00                	mov    (%eax),%eax
c0106288:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010628b:	89 50 28             	mov    %edx,0x28(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
                desc->flags & O_RDWR)
        {
c010628e:	e9 93 00 00 00       	jmp    c0106326 <sys_read+0x1ae>
                        desc->write_pos += len;
                    }

                    (*cpu)->CPU_ARG0 = len;
                }
                else if(inode->type == VFS_PIPE)
c0106293:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106296:	8b 40 04             	mov    0x4(%eax),%eax
c0106299:	83 f8 01             	cmp    $0x1,%eax
c010629c:	75 51                	jne    c01062ef <sys_read+0x177>
                {
                    add_trigger(WAIT_EVENT, info->event_id, 0, current_thread, sys_read);
c010629e:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c01062a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01062a7:	8b 40 08             	mov    0x8(%eax),%eax
c01062aa:	c7 44 24 10 78 61 10 	movl   $0xc0106178,0x10(%esp)
c01062b1:	c0 
c01062b2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01062b6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062bd:	00 
c01062be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01062c2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01062c9:	e8 16 44 00 00       	call   c010a6e4 <add_trigger>
                    suspend_thread(current_thread);
c01062ce:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01062d3:	89 04 24             	mov    %eax,(%esp)
c01062d6:	e8 a8 3d 00 00       	call   c010a083 <suspend_thread>
                    *cpu = (struct cpu_state *)task_schedule(*cpu);
c01062db:	8b 45 08             	mov    0x8(%ebp),%eax
c01062de:	8b 00                	mov    (%eax),%eax
c01062e0:	89 04 24             	mov    %eax,(%esp)
c01062e3:	e8 9d e6 ff ff       	call   c0104985 <task_schedule>
c01062e8:	8b 55 08             	mov    0x8(%ebp),%edx
c01062eb:	89 02                	mov    %eax,(%edx)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
                desc->flags & O_RDWR)
        {
c01062ed:	eb 37                	jmp    c0106326 <sys_read+0x1ae>
                    suspend_thread(current_thread);
                    *cpu = (struct cpu_state *)task_schedule(*cpu);
                }
                else
                {
                    (*cpu)->CPU_ARG0 = _FAILURE;
c01062ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01062f2:	8b 00                	mov    (%eax),%eax
c01062f4:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
                desc->flags & O_RDWR)
        {
c01062fb:	eb 29                	jmp    c0106326 <sys_read+0x1ae>
                    (*cpu)->CPU_ARG0 = _FAILURE;
                }
            }
            else
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c01062fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106300:	8b 00                	mov    (%eax),%eax
c0106302:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_RDONLY ||
                desc->flags & O_RDWR)
        {
c0106309:	90                   	nop
c010630a:	eb 1a                	jmp    c0106326 <sys_read+0x1ae>
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c010630c:	8b 45 08             	mov    0x8(%ebp),%eax
c010630f:	8b 00                	mov    (%eax),%eax
c0106311:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c0106318:	eb 0c                	jmp    c0106326 <sys_read+0x1ae>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c010631a:	8b 45 08             	mov    0x8(%ebp),%eax
c010631d:	8b 00                	mov    (%eax),%eax
c010631f:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c0106326:	c9                   	leave  
c0106327:	c3                   	ret    

c0106328 <sys_write>:

void sys_write(struct cpu_state **cpu)
{
c0106328:	55                   	push   %ebp
c0106329:	89 e5                	mov    %esp,%ebp
c010632b:	83 ec 38             	sub    $0x38,%esp
    int fd = (*cpu)->CPU_ARG1;
c010632e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106331:	8b 00                	mov    (%eax),%eax
c0106333:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106336:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char *buf = (void*) (*cpu)->CPU_ARG2;
c0106339:	8b 45 08             	mov    0x8(%ebp),%eax
c010633c:	8b 00                	mov    (%eax),%eax
c010633e:	8b 40 24             	mov    0x24(%eax),%eax
c0106341:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t len = (*cpu)->CPU_ARG3;
c0106344:	8b 45 08             	mov    0x8(%ebp),%eax
c0106347:	8b 00                	mov    (%eax),%eax
c0106349:	8b 40 20             	mov    0x20(%eax),%eax
c010634c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if(fd == 2)   // TODO FIXME
c010634f:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
c0106353:	75 3c                	jne    c0106391 <sys_write+0x69>
    {
        int i;
        for(i = 0; i < len; i++)
c0106355:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010635c:	eb 1a                	jmp    c0106378 <sys_write+0x50>
        {
            printf("%c", buf[i]);
c010635e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106361:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106364:	01 d0                	add    %edx,%eax
c0106366:	0f b6 00             	movzbl (%eax),%eax
c0106369:	0f be c0             	movsbl %al,%eax
c010636c:	89 04 24             	mov    %eax,(%esp)
c010636f:	e8 d7 57 00 00       	call   c010bb4b <putchar>
    size_t len = (*cpu)->CPU_ARG3;

    if(fd == 2)   // TODO FIXME
    {
        int i;
        for(i = 0; i < len; i++)
c0106374:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106378:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010637b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010637e:	72 de                	jb     c010635e <sys_write+0x36>
        {
            printf("%c", buf[i]);
        }
        (*cpu)->CPU_ARG0 = _SUCCESS;
c0106380:	8b 45 08             	mov    0x8(%ebp),%eax
c0106383:	8b 00                	mov    (%eax),%eax
c0106385:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        return;
c010638c:	e9 0e 01 00 00       	jmp    c010649f <sys_write+0x177>
    }

    struct fd *desc = get_fd(fd);
c0106391:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106394:	89 04 24             	mov    %eax,(%esp)
c0106397:	e8 ea f8 ff ff       	call   c0105c86 <get_fd>
c010639c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if(desc != NULL)
c010639f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01063a3:	0f 84 e7 00 00 00    	je     c0106490 <sys_write+0x168>
    {
        if(desc->flags & O_WRONLY ||
c01063a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063ac:	8b 40 0c             	mov    0xc(%eax),%eax
c01063af:	83 e0 02             	and    $0x2,%eax
c01063b2:	85 c0                	test   %eax,%eax
c01063b4:	75 11                	jne    c01063c7 <sys_write+0x9f>
                desc->flags & O_RDWR)
c01063b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063b9:	8b 40 0c             	mov    0xc(%eax),%eax
c01063bc:	83 e0 04             	and    $0x4,%eax
    }

    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_WRONLY ||
c01063bf:	85 c0                	test   %eax,%eax
c01063c1:	0f 84 bb 00 00 00    	je     c0106482 <sys_write+0x15a>
                desc->flags & O_RDWR)
        {
            vfs_inode_t *inode = desc->inode;
c01063c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063ca:	8b 40 04             	mov    0x4(%eax),%eax
c01063cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if(vfs_access(inode, W_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c01063d0:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01063d5:	8b 40 04             	mov    0x4(%eax),%eax
c01063d8:	8b 50 08             	mov    0x8(%eax),%edx
c01063db:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01063e0:	8b 40 04             	mov    0x4(%eax),%eax
c01063e3:	8b 40 04             	mov    0x4(%eax),%eax
c01063e6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01063ea:	89 44 24 08          	mov    %eax,0x8(%esp)
c01063ee:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01063f5:	00 
c01063f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01063f9:	89 04 24             	mov    %eax,(%esp)
c01063fc:	e8 5f f3 ff ff       	call   c0105760 <vfs_access>
c0106401:	85 c0                	test   %eax,%eax
c0106403:	75 6e                	jne    c0106473 <sys_write+0x14b>
            {
//               		printf("CALLINGVFS_WRITE()\n");
                int ret = vfs_write(inode, desc->write_pos, buf, len);
c0106405:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106408:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010640b:	8b 40 14             	mov    0x14(%eax),%eax
c010640e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106412:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106415:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106419:	89 44 24 04          	mov    %eax,0x4(%esp)
c010641d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106420:	89 04 24             	mov    %eax,(%esp)
c0106423:	e8 a5 ef ff ff       	call   c01053cd <vfs_write>
c0106428:	89 45 dc             	mov    %eax,-0x24(%ebp)
                (*cpu)->CPU_ARG0 = ret;
c010642b:	8b 45 08             	mov    0x8(%ebp),%eax
c010642e:	8b 00                	mov    (%eax),%eax
c0106430:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106433:	89 50 28             	mov    %edx,0x28(%eax)
                if(ret > 0)
c0106436:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010643a:	7e 62                	jle    c010649e <sys_write+0x176>
                {
                    desc->write_pos += len;
c010643c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010643f:	8b 40 14             	mov    0x14(%eax),%eax
c0106442:	89 c2                	mov    %eax,%edx
c0106444:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106447:	01 d0                	add    %edx,%eax
c0106449:	89 c2                	mov    %eax,%edx
c010644b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010644e:	89 50 14             	mov    %edx,0x14(%eax)
                    if(inode->type != VFS_PIPE)
c0106451:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106454:	8b 40 04             	mov    0x4(%eax),%eax
c0106457:	83 f8 01             	cmp    $0x1,%eax
c010645a:	74 42                	je     c010649e <sys_write+0x176>
                    {
                        desc->read_pos += len;
c010645c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010645f:	8b 40 10             	mov    0x10(%eax),%eax
c0106462:	89 c2                	mov    %eax,%edx
c0106464:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106467:	01 d0                	add    %edx,%eax
c0106469:	89 c2                	mov    %eax,%edx
c010646b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010646e:	89 50 10             	mov    %edx,0x10(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_WRONLY ||
                desc->flags & O_RDWR)
        {
c0106471:	eb 2b                	jmp    c010649e <sys_write+0x176>
                    }
                }
            }
            else
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106473:	8b 45 08             	mov    0x8(%ebp),%eax
c0106476:	8b 00                	mov    (%eax),%eax
c0106478:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_WRONLY ||
                desc->flags & O_RDWR)
        {
c010647f:	90                   	nop
c0106480:	eb 1c                	jmp    c010649e <sys_write+0x176>
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106482:	8b 45 08             	mov    0x8(%ebp),%eax
c0106485:	8b 00                	mov    (%eax),%eax
c0106487:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c010648e:	eb 0f                	jmp    c010649f <sys_write+0x177>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106490:	8b 45 08             	mov    0x8(%ebp),%eax
c0106493:	8b 00                	mov    (%eax),%eax
c0106495:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
c010649c:	eb 01                	jmp    c010649f <sys_write+0x177>
    struct fd *desc = get_fd(fd);
    if(desc != NULL)
    {
        if(desc->flags & O_WRONLY ||
                desc->flags & O_RDWR)
        {
c010649e:	90                   	nop
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
    }
}
c010649f:	c9                   	leave  
c01064a0:	c3                   	ret    

c01064a1 <sys_create>:

void sys_create(struct cpu_state **cpu)
{
c01064a1:	55                   	push   %ebp
c01064a2:	89 e5                	mov    %esp,%ebp
c01064a4:	83 ec 48             	sub    $0x48,%esp
    char *name = (char *)(*cpu)->CPU_ARG1;
c01064a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01064aa:	8b 00                	mov    (%eax),%eax
c01064ac:	8b 40 1c             	mov    0x1c(%eax),%eax
c01064af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int mode = (*cpu)->CPU_ARG2;
c01064b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01064b5:	8b 00                	mov    (%eax),%eax
c01064b7:	8b 40 24             	mov    0x24(%eax),%eax
c01064ba:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // FIXME: only works in root
    vfs_inode_t *parent = root; // FIXME TODO
c01064bd:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c01064c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(parent != NULL)
c01064c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01064c9:	0f 84 1b 01 00 00    	je     c01065ea <sys_create+0x149>
    {
        if(vfs_access(parent, W_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c01064cf:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01064d4:	8b 40 04             	mov    0x4(%eax),%eax
c01064d7:	8b 50 08             	mov    0x8(%eax),%edx
c01064da:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01064df:	8b 40 04             	mov    0x4(%eax),%eax
c01064e2:	8b 40 04             	mov    0x4(%eax),%eax
c01064e5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01064e9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01064ed:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01064f4:	00 
c01064f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01064f8:	89 04 24             	mov    %eax,(%esp)
c01064fb:	e8 60 f2 ff ff       	call   c0105760 <vfs_access>
c0106500:	85 c0                	test   %eax,%eax
c0106502:	0f 85 d4 00 00 00    	jne    c01065dc <sys_create+0x13b>
        {
            vfs_inode_t *inode = vfs_create_inode(name, mode, parent, current_thread->process->uid, current_thread->process->gid);
c0106508:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010650d:	8b 40 04             	mov    0x4(%eax),%eax
c0106510:	8b 48 08             	mov    0x8(%eax),%ecx
c0106513:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106518:	8b 40 04             	mov    0x4(%eax),%eax
c010651b:	8b 50 04             	mov    0x4(%eax),%edx
c010651e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106521:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106525:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106529:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010652c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106530:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106537:	89 04 24             	mov    %eax,(%esp)
c010653a:	e8 c0 ec ff ff       	call   c01051ff <vfs_create_inode>
c010653f:	89 45 e8             	mov    %eax,-0x18(%ebp)

            if(inode != NULL)
c0106542:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106546:	0f 84 82 00 00 00    	je     c01065ce <sys_create+0x12d>
            {
                struct fd *desc = malloc(sizeof(struct fd));
c010654c:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0106553:	e8 44 71 00 00       	call   c010d69c <malloc>
c0106558:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                desc->id = list_length(current_thread->process->files);
c010655b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106560:	8b 40 04             	mov    0x4(%eax),%eax
c0106563:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106566:	89 04 24             	mov    %eax,(%esp)
c0106569:	e8 5c c2 ff ff       	call   c01027ca <list_length>
c010656e:	89 c2                	mov    %eax,%edx
c0106570:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106573:	89 10                	mov    %edx,(%eax)
                desc->mode = mode;
c0106575:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106578:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010657b:	89 50 08             	mov    %edx,0x8(%eax)
                desc->flags = O_RDWR;
c010657e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106581:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
                desc->read_pos = 0;
c0106588:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010658b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
                desc->write_pos = 0;
c0106592:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106595:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
                desc->inode = inode;
c010659c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010659f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01065a2:	89 50 04             	mov    %edx,0x4(%eax)

                list_push_back(current_thread->process->files, desc);
c01065a5:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01065aa:	8b 40 04             	mov    0x4(%eax),%eax
c01065ad:	8b 40 1c             	mov    0x1c(%eax),%eax
c01065b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065b3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01065b7:	89 04 24             	mov    %eax,(%esp)
c01065ba:	e8 a3 c0 ff ff       	call   c0102662 <list_push_back>

                (*cpu)->CPU_ARG0 = desc->id;
c01065bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01065c2:	8b 00                	mov    (%eax),%eax
c01065c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065c7:	8b 12                	mov    (%edx),%edx
c01065c9:	89 50 28             	mov    %edx,0x28(%eax)
c01065cc:	eb 28                	jmp    c01065f6 <sys_create+0x155>
            }
            else
            {
                (*cpu)->CPU_ARG0 = _FAILURE;
c01065ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01065d1:	8b 00                	mov    (%eax),%eax
c01065d3:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
c01065da:	eb 1a                	jmp    c01065f6 <sys_create+0x155>
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c01065dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01065df:	8b 00                	mov    (%eax),%eax
c01065e1:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c01065e8:	eb 0c                	jmp    c01065f6 <sys_create+0x155>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c01065ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01065ed:	8b 00                	mov    (%eax),%eax
c01065ef:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c01065f6:	c9                   	leave  
c01065f7:	c3                   	ret    

c01065f8 <sys_link>:

void sys_link(struct cpu_state **cpu)
{
c01065f8:	55                   	push   %ebp
c01065f9:	89 e5                	mov    %esp,%ebp
c01065fb:	83 ec 48             	sub    $0x48,%esp
    char *src_path = (char *)(*cpu)->CPU_ARG1;
c01065fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0106601:	8b 00                	mov    (%eax),%eax
c0106603:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106606:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *dest_path = (char *)(*cpu)->CPU_ARG2;
c0106609:	8b 45 08             	mov    0x8(%ebp),%eax
c010660c:	8b 00                	mov    (%eax),%eax
c010660e:	8b 40 24             	mov    0x24(%eax),%eax
c0106611:	89 45 f0             	mov    %eax,-0x10(%ebp)

    vfs_inode_t *src_inode = vfs_lookup_path(src_path);
c0106614:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106617:	89 04 24             	mov    %eax,(%esp)
c010661a:	e8 96 f2 ff ff       	call   c01058b5 <vfs_lookup_path>
c010661f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // FIXME: only works in root
    vfs_inode_t *dest_parent = root; // FIXME TODO
c0106622:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106627:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if(src_inode != NULL && dest_parent != NULL)
c010662a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010662e:	0f 84 0a 01 00 00    	je     c010673e <sys_link+0x146>
c0106634:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106638:	0f 84 00 01 00 00    	je     c010673e <sys_link+0x146>
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
c010663e:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106643:	8b 40 04             	mov    0x4(%eax),%eax
c0106646:	8b 40 08             	mov    0x8(%eax),%eax
c0106649:	85 c0                	test   %eax,%eax
c010664b:	0f 94 c0             	sete   %al
c010664e:	0f b6 d0             	movzbl %al,%edx
c0106651:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106656:	8b 40 04             	mov    0x4(%eax),%eax
c0106659:	8b 40 04             	mov    0x4(%eax),%eax
c010665c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106660:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106664:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010666b:	00 
c010666c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010666f:	89 04 24             	mov    %eax,(%esp)
c0106672:	e8 e9 f0 ff ff       	call   c0105760 <vfs_access>
c0106677:	85 c0                	test   %eax,%eax
c0106679:	0f 84 af 00 00 00    	je     c010672e <sys_link+0x136>
                vfs_access(dest_parent, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
c010667f:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106684:	8b 40 04             	mov    0x4(%eax),%eax
c0106687:	8b 40 08             	mov    0x8(%eax),%eax
c010668a:	85 c0                	test   %eax,%eax
c010668c:	0f 94 c0             	sete   %al
c010668f:	0f b6 d0             	movzbl %al,%edx
c0106692:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106697:	8b 40 04             	mov    0x4(%eax),%eax
c010669a:	8b 40 04             	mov    0x4(%eax),%eax
c010669d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01066a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01066a5:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01066ac:	00 
c01066ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01066b0:	89 04 24             	mov    %eax,(%esp)
c01066b3:	e8 a8 f0 ff ff       	call   c0105760 <vfs_access>
    // FIXME: only works in root
    vfs_inode_t *dest_parent = root; // FIXME TODO

    if(src_inode != NULL && dest_parent != NULL)
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
c01066b8:	85 c0                	test   %eax,%eax
c01066ba:	74 72                	je     c010672e <sys_link+0x136>
                vfs_access(dest_parent, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
        {
            vfs_inode_t *dest_inode = vfs_create_inode(dest_path, src_inode->stat.st_mode, dest_parent, current_thread->process->uid, current_thread->process->gid);
c01066bc:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01066c1:	8b 40 04             	mov    0x4(%eax),%eax
c01066c4:	8b 48 08             	mov    0x8(%eax),%ecx
c01066c7:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01066cc:	8b 40 04             	mov    0x4(%eax),%eax
c01066cf:	8b 50 04             	mov    0x4(%eax),%edx
c01066d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066d5:	8b 40 0c             	mov    0xc(%eax),%eax
c01066d8:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01066dc:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01066e0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01066e3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01066e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01066eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066ee:	89 04 24             	mov    %eax,(%esp)
c01066f1:	e8 09 eb ff ff       	call   c01051ff <vfs_create_inode>
c01066f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            if(dest_inode != NULL)
c01066f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01066fd:	74 21                	je     c0106720 <sys_link+0x128>
            {
                dest_inode->type = VFS_LINK;
c01066ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106702:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%eax)
                dest_inode->buffer = (void *)dest_inode;
c0106709:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010670c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010670f:	89 50 38             	mov    %edx,0x38(%eax)

                (*cpu)->CPU_ARG0 = _SUCCESS;
c0106712:	8b 45 08             	mov    0x8(%ebp),%eax
c0106715:	8b 00                	mov    (%eax),%eax
c0106717:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)

    if(src_inode != NULL && dest_parent != NULL)
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
                vfs_access(dest_parent, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
        {
c010671e:	eb 1c                	jmp    c010673c <sys_link+0x144>

                (*cpu)->CPU_ARG0 = _SUCCESS;
            }
            else
            {
                (*cpu)->CPU_ARG0 = _FAILURE;
c0106720:	8b 45 08             	mov    0x8(%ebp),%eax
c0106723:	8b 00                	mov    (%eax),%eax
c0106725:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)

    if(src_inode != NULL && dest_parent != NULL)
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
                vfs_access(dest_parent, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
        {
c010672c:	eb 0e                	jmp    c010673c <sys_link+0x144>
                (*cpu)->CPU_ARG0 = _FAILURE;
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c010672e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106731:	8b 00                	mov    (%eax),%eax
c0106733:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    // FIXME: only works in root
    vfs_inode_t *dest_parent = root; // FIXME TODO

    if(src_inode != NULL && dest_parent != NULL)
    {
        if(vfs_access(src_inode, R_OK, current_thread->process->uid, current_thread->process->gid == 0) &&
c010673a:	eb 0e                	jmp    c010674a <sys_link+0x152>
c010673c:	eb 0c                	jmp    c010674a <sys_link+0x152>
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c010673e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106741:	8b 00                	mov    (%eax),%eax
c0106743:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c010674a:	c9                   	leave  
c010674b:	c3                   	ret    

c010674c <sys_unlink>:

void sys_unlink(struct cpu_state **cpu)
{
c010674c:	55                   	push   %ebp
c010674d:	89 e5                	mov    %esp,%ebp
c010674f:	83 ec 28             	sub    $0x28,%esp
    char *path = (char *)(*cpu)->CPU_ARG1;
c0106752:	8b 45 08             	mov    0x8(%ebp),%eax
c0106755:	8b 00                	mov    (%eax),%eax
c0106757:	8b 40 1c             	mov    0x1c(%eax),%eax
c010675a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    vfs_inode_t *link = vfs_lookup_path(path);
c010675d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106760:	89 04 24             	mov    %eax,(%esp)
c0106763:	e8 4d f1 ff ff       	call   c01058b5 <vfs_lookup_path>
c0106768:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(link != NULL)
c010676b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010676f:	74 78                	je     c01067e9 <sys_unlink+0x9d>
    {
        if(vfs_access(link, W_OK, current_thread->process->uid, current_thread->process->gid == 0))
c0106771:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106776:	8b 40 04             	mov    0x4(%eax),%eax
c0106779:	8b 40 08             	mov    0x8(%eax),%eax
c010677c:	85 c0                	test   %eax,%eax
c010677e:	0f 94 c0             	sete   %al
c0106781:	0f b6 d0             	movzbl %al,%edx
c0106784:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106789:	8b 40 04             	mov    0x4(%eax),%eax
c010678c:	8b 40 04             	mov    0x4(%eax),%eax
c010678f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106793:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106797:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010679e:	00 
c010679f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067a2:	89 04 24             	mov    %eax,(%esp)
c01067a5:	e8 b6 ef ff ff       	call   c0105760 <vfs_access>
c01067aa:	85 c0                	test   %eax,%eax
c01067ac:	74 2d                	je     c01067db <sys_unlink+0x8f>
        {
            link->buffer = NULL;
c01067ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067b1:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
            link->type = VFS_REGULAR;
c01067b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067bb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            free(link);
c01067c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067c5:	89 04 24             	mov    %eax,(%esp)
c01067c8:	e8 b6 6f 00 00       	call   c010d783 <free>
            (*cpu)->CPU_ARG0 = _SUCCESS;
c01067cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01067d0:	8b 00                	mov    (%eax),%eax
c01067d2:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c01067d9:	eb 1a                	jmp    c01067f5 <sys_unlink+0xa9>
        }
        else
        {
            (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c01067db:	8b 45 08             	mov    0x8(%ebp),%eax
c01067de:	8b 00                	mov    (%eax),%eax
c01067e0:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c01067e7:	eb 0c                	jmp    c01067f5 <sys_unlink+0xa9>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c01067e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01067ec:	8b 00                	mov    (%eax),%eax
c01067ee:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c01067f5:	c9                   	leave  
c01067f6:	c3                   	ret    

c01067f7 <sys_chdir>:

void sys_chdir(struct cpu_state **cpu)
{
c01067f7:	55                   	push   %ebp
c01067f8:	89 e5                	mov    %esp,%ebp
c01067fa:	83 ec 28             	sub    $0x28,%esp
    char *path = (char *)(*cpu)->CPU_ARG1;
c01067fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106800:	8b 00                	mov    (%eax),%eax
c0106802:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106805:	89 45 f4             	mov    %eax,-0xc(%ebp)

    vfs_inode_t *nwd = vfs_lookup_path(path);
c0106808:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010680b:	89 04 24             	mov    %eax,(%esp)
c010680e:	e8 a2 f0 ff ff       	call   c01058b5 <vfs_lookup_path>
c0106813:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(nwd != NULL)
c0106816:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010681a:	0f 84 82 00 00 00    	je     c01068a2 <sys_chdir+0xab>
    {
        if(S_ISDIR(nwd->stat))
c0106820:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106823:	8b 40 0c             	mov    0xc(%eax),%eax
c0106826:	83 e0 05             	and    $0x5,%eax
c0106829:	85 c0                	test   %eax,%eax
c010682b:	74 67                	je     c0106894 <sys_chdir+0x9d>
        {
            if(vfs_access(nwd, R_OK, current_thread->process->uid, current_thread->process->gid == 0))
c010682d:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106832:	8b 40 04             	mov    0x4(%eax),%eax
c0106835:	8b 40 08             	mov    0x8(%eax),%eax
c0106838:	85 c0                	test   %eax,%eax
c010683a:	0f 94 c0             	sete   %al
c010683d:	0f b6 d0             	movzbl %al,%edx
c0106840:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106845:	8b 40 04             	mov    0x4(%eax),%eax
c0106848:	8b 40 04             	mov    0x4(%eax),%eax
c010684b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010684f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106853:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010685a:	00 
c010685b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010685e:	89 04 24             	mov    %eax,(%esp)
c0106861:	e8 fa ee ff ff       	call   c0105760 <vfs_access>
c0106866:	85 c0                	test   %eax,%eax
c0106868:	74 1c                	je     c0106886 <sys_chdir+0x8f>
            {
                current_thread->process->cwd = nwd;
c010686a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010686f:	8b 40 04             	mov    0x4(%eax),%eax
c0106872:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106875:	89 50 18             	mov    %edx,0x18(%eax)
                (*cpu)->CPU_ARG0 = _SUCCESS;
c0106878:	8b 45 08             	mov    0x8(%ebp),%eax
c010687b:	8b 00                	mov    (%eax),%eax
c010687d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c0106884:	eb 28                	jmp    c01068ae <sys_chdir+0xb7>
            }
            else
            {
                (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106886:	8b 45 08             	mov    0x8(%ebp),%eax
c0106889:	8b 00                	mov    (%eax),%eax
c010688b:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
c0106892:	eb 1a                	jmp    c01068ae <sys_chdir+0xb7>
            }
        }
        else
        {
            (*cpu)->CPU_ARG0 = _FAILURE;
c0106894:	8b 45 08             	mov    0x8(%ebp),%eax
c0106897:	8b 00                	mov    (%eax),%eax
c0106899:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
c01068a0:	eb 0c                	jmp    c01068ae <sys_chdir+0xb7>
        }
    }
    else
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c01068a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01068a5:	8b 00                	mov    (%eax),%eax
c01068a7:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    }
}
c01068ae:	c9                   	leave  
c01068af:	c3                   	ret    

c01068b0 <sys_getdents>:

void sys_getdents(struct cpu_state **cpu)
{
c01068b0:	55                   	push   %ebp
c01068b1:	89 e5                	mov    %esp,%ebp
c01068b3:	83 ec 38             	sub    $0x38,%esp
    static int pos = 0;
    static int old_fd = -1;
    int fd = (*cpu)->CPU_ARG1;
c01068b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01068b9:	8b 00                	mov    (%eax),%eax
c01068bb:	8b 40 1c             	mov    0x1c(%eax),%eax
c01068be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //int count = (*cpu)->CPU_ARG2;		// count is currently unused, so i commented it out

    vfs_inode_t *parent = get_fd(fd)->inode;
c01068c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068c4:	89 04 24             	mov    %eax,(%esp)
c01068c7:	e8 ba f3 ff ff       	call   c0105c86 <get_fd>
c01068cc:	8b 40 04             	mov    0x4(%eax),%eax
c01068cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(vfs_access(parent, R_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c01068d2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01068d7:	8b 40 04             	mov    0x4(%eax),%eax
c01068da:	8b 50 08             	mov    0x8(%eax),%edx
c01068dd:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c01068e2:	8b 40 04             	mov    0x4(%eax),%eax
c01068e5:	8b 40 04             	mov    0x4(%eax),%eax
c01068e8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01068ec:	89 44 24 08          	mov    %eax,0x8(%esp)
c01068f0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01068f7:	00 
c01068f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068fb:	89 04 24             	mov    %eax,(%esp)
c01068fe:	e8 5d ee ff ff       	call   c0105760 <vfs_access>
c0106903:	85 c0                	test   %eax,%eax
c0106905:	0f 85 02 01 00 00    	jne    c0106a0d <sys_getdents+0x15d>
    {
        dirent_t *dentry = (dirent_t *)(*cpu)->CPU_ARG2;
c010690b:	8b 45 08             	mov    0x8(%ebp),%eax
c010690e:	8b 00                	mov    (%eax),%eax
c0106910:	8b 40 24             	mov    0x24(%eax),%eax
c0106913:	89 45 ec             	mov    %eax,-0x14(%ebp)

        vfs_dentry_t *entries = malloc(parent->length);
c0106916:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106919:	8b 40 08             	mov    0x8(%eax),%eax
c010691c:	89 04 24             	mov    %eax,(%esp)
c010691f:	e8 78 6d 00 00       	call   c010d69c <malloc>
c0106924:	89 45 e8             	mov    %eax,-0x18(%ebp)
        vfs_read(parent, 0, entries, parent->length);
c0106927:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010692a:	8b 40 08             	mov    0x8(%eax),%eax
c010692d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106931:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106934:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106938:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010693f:	00 
c0106940:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106943:	89 04 24             	mov    %eax,(%esp)
c0106946:	e8 8f ec ff ff       	call   c01055da <vfs_read>
        int num = parent->length / sizeof(vfs_dentry_t);
c010694b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010694e:	8b 40 08             	mov    0x8(%eax),%eax
c0106951:	c1 e8 03             	shr    $0x3,%eax
c0106954:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if(pos < num && (fd == old_fd || old_fd == -1))
c0106957:	a1 18 80 11 c0       	mov    0xc0118018,%eax
c010695c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010695f:	0f 8d 88 00 00 00    	jge    c01069ed <sys_getdents+0x13d>
c0106965:	a1 88 30 11 c0       	mov    0xc0113088,%eax
c010696a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010696d:	74 0a                	je     c0106979 <sys_getdents+0xc9>
c010696f:	a1 88 30 11 c0       	mov    0xc0113088,%eax
c0106974:	83 f8 ff             	cmp    $0xffffffff,%eax
c0106977:	75 74                	jne    c01069ed <sys_getdents+0x13d>
        {
            vfs_inode_t *ino = entries[pos++].inode;
c0106979:	a1 18 80 11 c0       	mov    0xc0118018,%eax
c010697e:	89 c2                	mov    %eax,%edx
c0106980:	8d 0c d5 00 00 00 00 	lea    0x0(,%edx,8),%ecx
c0106987:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010698a:	01 ca                	add    %ecx,%edx
c010698c:	8b 52 04             	mov    0x4(%edx),%edx
c010698f:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0106992:	83 c0 01             	add    $0x1,%eax
c0106995:	a3 18 80 11 c0       	mov    %eax,0xc0118018

            strcpy(dentry->name, ino->name);
c010699a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010699d:	8b 00                	mov    (%eax),%eax
c010699f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01069a2:	83 c2 04             	add    $0x4,%edx
c01069a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01069a9:	89 14 24             	mov    %edx,(%esp)
c01069ac:	e8 9f c0 ff ff       	call   c0102a50 <strcpy>
            memcpy(&dentry->stat, &ino->stat, sizeof(struct stat));
c01069b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069b4:	8d 50 0c             	lea    0xc(%eax),%edx
c01069b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069ba:	05 04 01 00 00       	add    $0x104,%eax
c01069bf:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c01069c6:	00 
c01069c7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069cb:	89 04 24             	mov    %eax,(%esp)
c01069ce:	e8 2c c4 ff ff       	call   c0102dff <memcpy>
            dentry->id = ino->stat.st_ino;
c01069d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069d6:	8b 40 10             	mov    0x10(%eax),%eax
c01069d9:	89 c2                	mov    %eax,%edx
c01069db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069de:	89 10                	mov    %edx,(%eax)
            (*cpu)->CPU_ARG0 = (uint32_t) dentry;
c01069e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01069e3:	8b 00                	mov    (%eax),%eax
c01069e5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01069e8:	89 50 28             	mov    %edx,0x28(%eax)
        vfs_dentry_t *entries = malloc(parent->length);
        vfs_read(parent, 0, entries, parent->length);
        int num = parent->length / sizeof(vfs_dentry_t);

        if(pos < num && (fd == old_fd || old_fd == -1))
        {
c01069eb:	eb 16                	jmp    c0106a03 <sys_getdents+0x153>
            dentry->id = ino->stat.st_ino;
            (*cpu)->CPU_ARG0 = (uint32_t) dentry;
        }
        else
        {
            pos = 0;
c01069ed:	c7 05 18 80 11 c0 00 	movl   $0x0,0xc0118018
c01069f4:	00 00 00 
            (*cpu)->CPU_ARG0 = (uint32_t) NULL;
c01069f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01069fa:	8b 00                	mov    (%eax),%eax
c01069fc:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        }

        old_fd = fd;
c0106a03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a06:	a3 88 30 11 c0       	mov    %eax,0xc0113088
c0106a0b:	eb 0c                	jmp    c0106a19 <sys_getdents+0x169>
    }
    else
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106a0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a10:	8b 00                	mov    (%eax),%eax
c0106a12:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    }
}
c0106a19:	c9                   	leave  
c0106a1a:	c3                   	ret    

c0106a1b <sys_seek>:

void sys_seek(struct cpu_state **cpu)
{
c0106a1b:	55                   	push   %ebp
c0106a1c:	89 e5                	mov    %esp,%ebp
c0106a1e:	83 ec 14             	sub    $0x14,%esp
    int fd = (*cpu)->CPU_ARG1;
c0106a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a24:	8b 00                	mov    (%eax),%eax
c0106a26:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106a29:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int off = (*cpu)->CPU_ARG2;
c0106a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a2f:	8b 00                	mov    (%eax),%eax
c0106a31:	8b 40 24             	mov    0x24(%eax),%eax
c0106a34:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int whence = (*cpu)->CPU_ARG3;
c0106a37:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a3a:	8b 00                	mov    (%eax),%eax
c0106a3c:	8b 40 20             	mov    0x20(%eax),%eax
c0106a3f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    struct fd *file = get_fd(fd);
c0106a42:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106a45:	89 04 24             	mov    %eax,(%esp)
c0106a48:	e8 39 f2 ff ff       	call   c0105c86 <get_fd>
c0106a4d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    file->flags |= O_APPEND;
c0106a50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a53:	8b 40 0c             	mov    0xc(%eax),%eax
c0106a56:	89 c2                	mov    %eax,%edx
c0106a58:	83 ca 08             	or     $0x8,%edx
c0106a5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a5e:	89 50 0c             	mov    %edx,0xc(%eax)
    switch(whence)
c0106a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a64:	83 f8 02             	cmp    $0x2,%eax
c0106a67:	74 1e                	je     c0106a87 <sys_seek+0x6c>
c0106a69:	83 f8 03             	cmp    $0x3,%eax
c0106a6c:	74 3d                	je     c0106aab <sys_seek+0x90>
c0106a6e:	83 f8 01             	cmp    $0x1,%eax
c0106a71:	75 6e                	jne    c0106ae1 <sys_seek+0xc6>
    {
        case SEEK_SET: // absolute
            file->read_pos = off;
c0106a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a76:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0106a79:	89 50 10             	mov    %edx,0x10(%eax)
            file->write_pos = off;
c0106a7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a7f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0106a82:	89 50 14             	mov    %edx,0x14(%eax)
            break;
c0106a85:	eb 68                	jmp    c0106aef <sys_seek+0xd4>
        case SEEK_CUR: // relative from current position
            file->read_pos += off;
c0106a87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a8a:	8b 50 10             	mov    0x10(%eax),%edx
c0106a8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106a90:	01 c2                	add    %eax,%edx
c0106a92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a95:	89 50 10             	mov    %edx,0x10(%eax)
            file->write_pos += off;
c0106a98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a9b:	8b 50 14             	mov    0x14(%eax),%edx
c0106a9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106aa1:	01 c2                	add    %eax,%edx
c0106aa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aa6:	89 50 14             	mov    %edx,0x14(%eax)
            break;
c0106aa9:	eb 44                	jmp    c0106aef <sys_seek+0xd4>
        case SEEK_END: // relative from end
            file->read_pos = file->inode->length - off;
c0106aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aae:	8b 40 04             	mov    0x4(%eax),%eax
c0106ab1:	8b 50 08             	mov    0x8(%eax),%edx
c0106ab4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106ab7:	89 d1                	mov    %edx,%ecx
c0106ab9:	29 c1                	sub    %eax,%ecx
c0106abb:	89 c8                	mov    %ecx,%eax
c0106abd:	89 c2                	mov    %eax,%edx
c0106abf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ac2:	89 50 10             	mov    %edx,0x10(%eax)
            file->write_pos = file->inode->length - off;
c0106ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ac8:	8b 40 04             	mov    0x4(%eax),%eax
c0106acb:	8b 50 08             	mov    0x8(%eax),%edx
c0106ace:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106ad1:	89 d1                	mov    %edx,%ecx
c0106ad3:	29 c1                	sub    %eax,%ecx
c0106ad5:	89 c8                	mov    %ecx,%eax
c0106ad7:	89 c2                	mov    %eax,%edx
c0106ad9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106adc:	89 50 14             	mov    %edx,0x14(%eax)
            break;
c0106adf:	eb 0e                	jmp    c0106aef <sys_seek+0xd4>
        default: // ???
            (*cpu)->CPU_ARG0 = _FAILURE;
c0106ae1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ae4:	8b 00                	mov    (%eax),%eax
c0106ae6:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            return;
c0106aed:	eb 0e                	jmp    c0106afd <sys_seek+0xe2>
    }

    (*cpu)->CPU_ARG0 = file->read_pos;
c0106aef:	8b 45 08             	mov    0x8(%ebp),%eax
c0106af2:	8b 00                	mov    (%eax),%eax
c0106af4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106af7:	8b 52 10             	mov    0x10(%edx),%edx
c0106afa:	89 50 28             	mov    %edx,0x28(%eax)
}
c0106afd:	c9                   	leave  
c0106afe:	c3                   	ret    

c0106aff <sys_mkdir>:

void sys_mkdir(struct cpu_state **cpu)
{
c0106aff:	55                   	push   %ebp
c0106b00:	89 e5                	mov    %esp,%ebp
c0106b02:	83 ec 28             	sub    $0x28,%esp
    char *path = (char *)(*cpu)->CPU_ARG1;
c0106b05:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b08:	8b 00                	mov    (%eax),%eax
c0106b0a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106b0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int mode = (int)(*cpu)->CPU_ARG2;
c0106b10:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b13:	8b 00                	mov    (%eax),%eax
c0106b15:	8b 40 24             	mov    0x24(%eax),%eax
c0106b18:	89 45 f0             	mov    %eax,-0x10(%ebp)

    vfs_create_path(path, mode, current_thread->process->uid, current_thread->process->gid);
c0106b1b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106b20:	8b 40 04             	mov    0x4(%eax),%eax
c0106b23:	8b 48 08             	mov    0x8(%eax),%ecx
c0106b26:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106b2b:	8b 40 04             	mov    0x4(%eax),%eax
c0106b2e:	8b 50 04             	mov    0x4(%eax),%edx
c0106b31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b34:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0106b38:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106b3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106b40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b43:	89 04 24             	mov    %eax,(%esp)
c0106b46:	e8 9b ee ff ff       	call   c01059e6 <vfs_create_path>

    (*cpu)->CPU_ARG0 = 0;
c0106b4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b4e:	8b 00                	mov    (%eax),%eax
c0106b50:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)

    return;
c0106b57:	90                   	nop
}
c0106b58:	c9                   	leave  
c0106b59:	c3                   	ret    

c0106b5a <sys_getcwd>:

void sys_getcwd(struct cpu_state **cpu)
{
c0106b5a:	55                   	push   %ebp
c0106b5b:	89 e5                	mov    %esp,%ebp
c0106b5d:	53                   	push   %ebx
c0106b5e:	83 ec 34             	sub    $0x34,%esp
    char *buffer = (char *)(*cpu)->CPU_ARG1;
c0106b61:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b64:	8b 00                	mov    (%eax),%eax
c0106b66:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106b69:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int buffersize = (int)(*cpu)->CPU_ARG2;
c0106b6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b6f:	8b 00                	mov    (%eax),%eax
c0106b71:	8b 40 24             	mov    0x24(%eax),%eax
c0106b74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int currentend = 0;
c0106b77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int cwdsize = 1;				// the final size of the final '\0'
c0106b7e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

    vfs_inode_t *inode = current_thread->process->cwd;
c0106b85:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106b8a:	8b 40 04             	mov    0x4(%eax),%eax
c0106b8d:	8b 40 18             	mov    0x18(%eax),%eax
c0106b90:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(inode == root)
c0106b93:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106b98:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106b9b:	75 2a                	jne    c0106bc7 <sys_getcwd+0x6d>
        cwdsize++;
c0106b9d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

    while(inode != root)
c0106ba1:	eb 24                	jmp    c0106bc7 <sys_getcwd+0x6d>
    {
        cwdsize += strlen(inode->name);		// add the lenght of the directory name
c0106ba3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ba6:	8b 00                	mov    (%eax),%eax
c0106ba8:	89 04 24             	mov    %eax,(%esp)
c0106bab:	e8 79 be ff ff       	call   c0102a29 <strlen>
c0106bb0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106bb3:	01 d0                	add    %edx,%eax
c0106bb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cwdsize++;				// add the length of the '/' between the directorys
c0106bb8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
        inode = inode->parent;			// next directory
c0106bbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106bbf:	8b 40 3c             	mov    0x3c(%eax),%eax
c0106bc2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106bc5:	eb 01                	jmp    c0106bc8 <sys_getcwd+0x6e>
    vfs_inode_t *inode = current_thread->process->cwd;

    if(inode == root)
        cwdsize++;

    while(inode != root)
c0106bc7:	90                   	nop
c0106bc8:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106bcd:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106bd0:	75 d1                	jne    c0106ba3 <sys_getcwd+0x49>
        cwdsize += strlen(inode->name);		// add the lenght of the directory name
        cwdsize++;				// add the length of the '/' between the directorys
        inode = inode->parent;			// next directory
    }

    if(buffer == NULL)
c0106bd2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106bd6:	75 11                	jne    c0106be9 <sys_getcwd+0x8f>
    {
        (*cpu)->CPU_ARG0 = 0;
c0106bd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bdb:	8b 00                	mov    (%eax),%eax
c0106bdd:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        return;
c0106be4:	e9 c0 00 00 00       	jmp    c0106ca9 <sys_getcwd+0x14f>
    }

    if(buffersize < cwdsize)
c0106be9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106bec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106bef:	7d 11                	jge    c0106c02 <sys_getcwd+0xa8>
    {
        (*cpu)->CPU_ARG0 = 0;
c0106bf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bf4:	8b 00                	mov    (%eax),%eax
c0106bf6:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
        return;
c0106bfd:	e9 a7 00 00 00       	jmp    c0106ca9 <sys_getcwd+0x14f>
    }

    currentend = cwdsize - 1;		// because first element is buffer[0] (instead of buffer[1])
c0106c02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c05:	83 e8 01             	sub    $0x1,%eax
c0106c08:	89 45 f4             	mov    %eax,-0xc(%ebp)
    buffer[currentend--] = '\0';
c0106c0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c11:	01 d0                	add    %edx,%eax
c0106c13:	c6 00 00             	movb   $0x0,(%eax)
c0106c16:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
    inode = current_thread->process->cwd;
c0106c1a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106c1f:	8b 40 04             	mov    0x4(%eax),%eax
c0106c22:	8b 40 18             	mov    0x18(%eax),%eax
c0106c25:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if(inode == root)
c0106c28:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106c2d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106c30:	75 60                	jne    c0106c92 <sys_getcwd+0x138>
        buffer[currentend] = '/';
c0106c32:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106c35:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c38:	01 d0                	add    %edx,%eax
c0106c3a:	c6 00 2f             	movb   $0x2f,(%eax)

    while(inode != root)
c0106c3d:	eb 53                	jmp    c0106c92 <sys_getcwd+0x138>
    {
        currentend -= (strlen(inode->name) - 1);
c0106c3f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0106c42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c45:	8b 00                	mov    (%eax),%eax
c0106c47:	89 04 24             	mov    %eax,(%esp)
c0106c4a:	e8 da bd ff ff       	call   c0102a29 <strlen>
c0106c4f:	89 da                	mov    %ebx,%edx
c0106c51:	29 c2                	sub    %eax,%edx
c0106c53:	89 d0                	mov    %edx,%eax
c0106c55:	83 c0 01             	add    $0x1,%eax
c0106c58:	89 45 f4             	mov    %eax,-0xc(%ebp)
        strcpy(&buffer[currentend--], inode->name);
c0106c5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c5e:	8b 00                	mov    (%eax),%eax
c0106c60:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0106c63:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106c66:	01 ca                	add    %ecx,%edx
c0106c68:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106c6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106c70:	89 14 24             	mov    %edx,(%esp)
c0106c73:	e8 d8 bd ff ff       	call   c0102a50 <strcpy>
        buffer[currentend--] = '/';
c0106c78:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106c7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c7e:	01 d0                	add    %edx,%eax
c0106c80:	c6 00 2f             	movb   $0x2f,(%eax)
c0106c83:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
        inode = inode->parent;
c0106c87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c8a:	8b 40 3c             	mov    0x3c(%eax),%eax
c0106c8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106c90:	eb 01                	jmp    c0106c93 <sys_getcwd+0x139>
    inode = current_thread->process->cwd;

    if(inode == root)
        buffer[currentend] = '/';

    while(inode != root)
c0106c92:	90                   	nop
c0106c93:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c0106c98:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106c9b:	75 a2                	jne    c0106c3f <sys_getcwd+0xe5>
        strcpy(&buffer[currentend--], inode->name);
        buffer[currentend--] = '/';
        inode = inode->parent;
    }

    (*cpu)->CPU_ARG0 =(unsigned int) buffer;
c0106c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ca0:	8b 00                	mov    (%eax),%eax
c0106ca2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106ca5:	89 50 28             	mov    %edx,0x28(%eax)
    return;
c0106ca8:	90                   	nop
}
c0106ca9:	83 c4 34             	add    $0x34,%esp
c0106cac:	5b                   	pop    %ebx
c0106cad:	5d                   	pop    %ebp
c0106cae:	c3                   	ret    

c0106caf <launch_pipe_handlers>:

void launch_pipe_handlers(vfs_buffer_info_t *pipe)
{
c0106caf:	55                   	push   %ebp
c0106cb0:	89 e5                	mov    %esp,%ebp
c0106cb2:	53                   	push   %ebx
c0106cb3:	83 ec 34             	sub    $0x34,%esp
    struct list_node *node = pipe->handlers->head->next;
c0106cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cb9:	8b 40 0c             	mov    0xc(%eax),%eax
c0106cbc:	8b 40 04             	mov    0x4(%eax),%eax
c0106cbf:	8b 00                	mov    (%eax),%eax
c0106cc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct list_node *head = pipe->handlers->head;
c0106cc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cc7:	8b 40 0c             	mov    0xc(%eax),%eax
c0106cca:	8b 40 04             	mov    0x4(%eax),%eax
c0106ccd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    while(node != head)
c0106cd0:	eb 5e                	jmp    c0106d30 <launch_pipe_handlers+0x81>
    {
        vfs_pipe_trigger_t *trigger = (vfs_pipe_trigger_t*) node->element;
c0106cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cd5:	8b 40 08             	mov    0x8(%eax),%eax
c0106cd8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        thread_create(current_thread->process, USERMODE, trigger->eip, NULL, trigger->argc, trigger->argv, NULL, NULL);
c0106cdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106cde:	8b 58 08             	mov    0x8(%eax),%ebx
c0106ce1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ce4:	8b 48 04             	mov    0x4(%eax),%ecx
c0106ce7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106cea:	8b 10                	mov    (%eax),%edx
c0106cec:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106cf1:	8b 40 04             	mov    0x4(%eax),%eax
c0106cf4:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
c0106cfb:	00 
c0106cfc:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0106d03:	00 
c0106d04:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c0106d08:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d0c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106d13:	00 
c0106d14:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106d18:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0106d1f:	00 
c0106d20:	89 04 24             	mov    %eax,(%esp)
c0106d23:	e8 e1 de ff ff       	call   c0104c09 <thread_create>

        node = node->next;
c0106d28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d2b:	8b 00                	mov    (%eax),%eax
c0106d2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
void launch_pipe_handlers(vfs_buffer_info_t *pipe)
{
    struct list_node *node = pipe->handlers->head->next;
    struct list_node *head = pipe->handlers->head;

    while(node != head)
c0106d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d33:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106d36:	75 9a                	jne    c0106cd2 <launch_pipe_handlers+0x23>
        vfs_pipe_trigger_t *trigger = (vfs_pipe_trigger_t*) node->element;
        thread_create(current_thread->process, USERMODE, trigger->eip, NULL, trigger->argc, trigger->argv, NULL, NULL);

        node = node->next;
    }
}
c0106d38:	83 c4 34             	add    $0x34,%esp
c0106d3b:	5b                   	pop    %ebx
c0106d3c:	5d                   	pop    %ebp
c0106d3d:	c3                   	ret    

c0106d3e <set_pipe_trigger>:

void set_pipe_trigger(struct cpu_state **cpu)
{
c0106d3e:	55                   	push   %ebp
c0106d3f:	89 e5                	mov    %esp,%ebp
c0106d41:	83 ec 28             	sub    $0x28,%esp
    int fd = (*cpu)->CPU_ARG1;
c0106d44:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d47:	8b 00                	mov    (%eax),%eax
c0106d49:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106d4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vfs_inode_t *inode = get_fd(fd)->inode;
c0106d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d52:	89 04 24             	mov    %eax,(%esp)
c0106d55:	e8 2c ef ff ff       	call   c0105c86 <get_fd>
c0106d5a:	8b 40 04             	mov    0x4(%eax),%eax
c0106d5d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(vfs_access(inode, R_OK, current_thread->process->uid, current_thread->process->gid) == 0)
c0106d60:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106d65:	8b 40 04             	mov    0x4(%eax),%eax
c0106d68:	8b 50 08             	mov    0x8(%eax),%edx
c0106d6b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106d70:	8b 40 04             	mov    0x4(%eax),%eax
c0106d73:	8b 40 04             	mov    0x4(%eax),%eax
c0106d76:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d7a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d7e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106d85:	00 
c0106d86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d89:	89 04 24             	mov    %eax,(%esp)
c0106d8c:	e8 cf e9 ff ff       	call   c0105760 <vfs_access>
c0106d91:	85 c0                	test   %eax,%eax
c0106d93:	75 68                	jne    c0106dfd <set_pipe_trigger+0xbf>
    {
        vfs_buffer_info_t *pipe = inode->buffer;
c0106d95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d98:	8b 40 38             	mov    0x38(%eax),%eax
c0106d9b:	89 45 ec             	mov    %eax,-0x14(%ebp)

        vfs_pipe_trigger_t *trigger = malloc(sizeof(vfs_pipe_trigger_t));
c0106d9e:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0106da5:	e8 f2 68 00 00       	call   c010d69c <malloc>
c0106daa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        trigger->eip = (*cpu)->CPU_ARG2;
c0106dad:	8b 45 08             	mov    0x8(%ebp),%eax
c0106db0:	8b 00                	mov    (%eax),%eax
c0106db2:	8b 50 24             	mov    0x24(%eax),%edx
c0106db5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106db8:	89 10                	mov    %edx,(%eax)
        trigger->argc = (*cpu)->CPU_ARG3;
c0106dba:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dbd:	8b 00                	mov    (%eax),%eax
c0106dbf:	8b 40 20             	mov    0x20(%eax),%eax
c0106dc2:	89 c2                	mov    %eax,%edx
c0106dc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106dc7:	89 50 04             	mov    %edx,0x4(%eax)
        trigger->argv = (void **)(*cpu)->CPU_ARG4;
c0106dca:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dcd:	8b 00                	mov    (%eax),%eax
c0106dcf:	8b 40 14             	mov    0x14(%eax),%eax
c0106dd2:	89 c2                	mov    %eax,%edx
c0106dd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106dd7:	89 50 08             	mov    %edx,0x8(%eax)
        list_push_back(pipe->handlers, (void*) trigger);
c0106dda:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ddd:	8b 40 0c             	mov    0xc(%eax),%eax
c0106de0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106de3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106de7:	89 04 24             	mov    %eax,(%esp)
c0106dea:	e8 73 b8 ff ff       	call   c0102662 <list_push_back>

        (*cpu)->CPU_ARG0 = _SUCCESS;
c0106def:	8b 45 08             	mov    0x8(%ebp),%eax
c0106df2:	8b 00                	mov    (%eax),%eax
c0106df4:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c0106dfb:	eb 0c                	jmp    c0106e09 <set_pipe_trigger+0xcb>
    }
    else
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106dfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e00:	8b 00                	mov    (%eax),%eax
c0106e02:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
    }
}
c0106e09:	c9                   	leave  
c0106e0a:	c3                   	ret    

c0106e0b <sys_stat>:


void sys_stat(struct cpu_state **cpu)
{
c0106e0b:	55                   	push   %ebp
c0106e0c:	89 e5                	mov    %esp,%ebp
c0106e0e:	53                   	push   %ebx
c0106e0f:	83 ec 24             	sub    $0x24,%esp
    if((*cpu)->CPU_ARG1 == 0 || (*cpu)->CPU_ARG2 == 0)
c0106e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e15:	8b 00                	mov    (%eax),%eax
c0106e17:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106e1a:	85 c0                	test   %eax,%eax
c0106e1c:	74 0c                	je     c0106e2a <sys_stat+0x1f>
c0106e1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e21:	8b 00                	mov    (%eax),%eax
c0106e23:	8b 40 24             	mov    0x24(%eax),%eax
c0106e26:	85 c0                	test   %eax,%eax
c0106e28:	75 0e                	jne    c0106e38 <sys_stat+0x2d>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106e2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e2d:	8b 00                	mov    (%eax),%eax
c0106e2f:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106e36:	eb 46                	jmp    c0106e7e <sys_stat+0x73>
    }

    vfs_inode_t *node = vfs_lookup_path((char*)(*cpu)->CPU_ARG1);
c0106e38:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e3b:	8b 00                	mov    (%eax),%eax
c0106e3d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106e40:	89 04 24             	mov    %eax,(%esp)
c0106e43:	e8 6d ea ff ff       	call   c01058b5 <vfs_lookup_path>
c0106e48:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(node == NULL)
c0106e4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e4f:	75 0e                	jne    c0106e5f <sys_stat+0x54>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106e51:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e54:	8b 00                	mov    (%eax),%eax
c0106e56:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106e5d:	eb 1f                	jmp    c0106e7e <sys_stat+0x73>
    }

    (*cpu)->CPU_ARG0 = vfs_stat(node,(struct stat *)(*cpu)->CPU_ARG2);
c0106e5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e62:	8b 18                	mov    (%eax),%ebx
c0106e64:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e67:	8b 00                	mov    (%eax),%eax
c0106e69:	8b 40 24             	mov    0x24(%eax),%eax
c0106e6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e73:	89 04 24             	mov    %eax,(%esp)
c0106e76:	e8 9c e8 ff ff       	call   c0105717 <vfs_stat>
c0106e7b:	89 43 28             	mov    %eax,0x28(%ebx)
}
c0106e7e:	83 c4 24             	add    $0x24,%esp
c0106e81:	5b                   	pop    %ebx
c0106e82:	5d                   	pop    %ebp
c0106e83:	c3                   	ret    

c0106e84 <sys_fstat>:


void sys_fstat(struct cpu_state **cpu)
{
c0106e84:	55                   	push   %ebp
c0106e85:	89 e5                	mov    %esp,%ebp
c0106e87:	53                   	push   %ebx
c0106e88:	83 ec 24             	sub    $0x24,%esp
    if((*cpu)->CPU_ARG1 == 0)
c0106e8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e8e:	8b 00                	mov    (%eax),%eax
c0106e90:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106e93:	85 c0                	test   %eax,%eax
c0106e95:	75 11                	jne    c0106ea8 <sys_fstat+0x24>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106e97:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e9a:	8b 00                	mov    (%eax),%eax
c0106e9c:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
c0106ea3:	e9 a1 00 00 00       	jmp    c0106f49 <sys_fstat+0xc5>
        return;
    }

    iterator_t file_it = iterator_create(current_thread->process->files);
c0106ea8:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106ead:	8b 40 04             	mov    0x4(%eax),%eax
c0106eb0:	8b 50 1c             	mov    0x1c(%eax),%edx
c0106eb3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0106eb6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106eba:	89 04 24             	mov    %eax,(%esp)
c0106ebd:	e8 85 b9 ff ff       	call   c0102847 <iterator_create>
c0106ec2:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(current_thread->process->files) && !list_is_last(&file_it))
c0106ec5:	eb 50                	jmp    c0106f17 <sys_fstat+0x93>
    {
        struct fd *file = list_get_current(&file_it);
c0106ec7:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0106eca:	89 04 24             	mov    %eax,(%esp)
c0106ecd:	e8 3e ba ff ff       	call   c0102910 <list_get_current>
c0106ed2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(file->id == (*cpu)->CPU_ARG1)
c0106ed5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ed8:	8b 10                	mov    (%eax),%edx
c0106eda:	8b 45 08             	mov    0x8(%ebp),%eax
c0106edd:	8b 00                	mov    (%eax),%eax
c0106edf:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106ee2:	39 c2                	cmp    %eax,%edx
c0106ee4:	75 26                	jne    c0106f0c <sys_fstat+0x88>
        {
            (*cpu)->CPU_ARG0 = vfs_stat(file->inode, (struct stat *)(*cpu)->CPU_ARG2);
c0106ee6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ee9:	8b 18                	mov    (%eax),%ebx
c0106eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eee:	8b 00                	mov    (%eax),%eax
c0106ef0:	8b 40 24             	mov    0x24(%eax),%eax
c0106ef3:	89 c2                	mov    %eax,%edx
c0106ef5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ef8:	8b 40 04             	mov    0x4(%eax),%eax
c0106efb:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106eff:	89 04 24             	mov    %eax,(%esp)
c0106f02:	e8 10 e8 ff ff       	call   c0105717 <vfs_stat>
c0106f07:	89 43 28             	mov    %eax,0x28(%ebx)
c0106f0a:	eb 3d                	jmp    c0106f49 <sys_fstat+0xc5>
            return;
        }
        list_next(&file_it);
c0106f0c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0106f0f:	89 04 24             	mov    %eax,(%esp)
c0106f12:	e8 1e ba ff ff       	call   c0102935 <list_next>
        (*cpu)->CPU_ARG0 = _FAILURE;
        return;
    }

    iterator_t file_it = iterator_create(current_thread->process->files);
    while(!list_is_empty(current_thread->process->files) && !list_is_last(&file_it))
c0106f17:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106f1c:	8b 40 04             	mov    0x4(%eax),%eax
c0106f1f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f22:	89 04 24             	mov    %eax,(%esp)
c0106f25:	e8 dc b8 ff ff       	call   c0102806 <list_is_empty>
c0106f2a:	85 c0                	test   %eax,%eax
c0106f2c:	75 0f                	jne    c0106f3d <sys_fstat+0xb9>
c0106f2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0106f31:	89 04 24             	mov    %eax,(%esp)
c0106f34:	e8 23 ba ff ff       	call   c010295c <list_is_last>
c0106f39:	85 c0                	test   %eax,%eax
c0106f3b:	74 8a                	je     c0106ec7 <sys_fstat+0x43>
            return;
        }
        list_next(&file_it);
    }

    (*cpu)->CPU_ARG0 = _FAILURE;
c0106f3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f40:	8b 00                	mov    (%eax),%eax
c0106f42:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
}
c0106f49:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106f4c:	c9                   	leave  
c0106f4d:	c3                   	ret    

c0106f4e <sys_chmod>:

void sys_chmod(struct cpu_state **cpu)
{
c0106f4e:	55                   	push   %ebp
c0106f4f:	89 e5                	mov    %esp,%ebp
c0106f51:	83 ec 28             	sub    $0x28,%esp
    // Check if path is not NULL
    char *file = (char *)(*cpu)->CPU_ARG1;
c0106f54:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f57:	8b 00                	mov    (%eax),%eax
c0106f59:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(file == NULL)
c0106f5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106f63:	75 0e                	jne    c0106f73 <sys_chmod+0x25>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f68:	8b 00                	mov    (%eax),%eax
c0106f6a:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106f71:	eb 5f                	jmp    c0106fd2 <sys_chmod+0x84>
    }
    // Lookup path
    vfs_inode_t *node = vfs_lookup_path(file);
c0106f73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f76:	89 04 24             	mov    %eax,(%esp)
c0106f79:	e8 37 e9 ff ff       	call   c01058b5 <vfs_lookup_path>
c0106f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(node == NULL)
c0106f81:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f85:	75 0e                	jne    c0106f95 <sys_chmod+0x47>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106f87:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f8a:	8b 00                	mov    (%eax),%eax
c0106f8c:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106f93:	eb 3d                	jmp    c0106fd2 <sys_chmod+0x84>
    }
    // Check permissions
    if(node->stat.st_uid != current_thread->process->uid)
c0106f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f98:	8b 50 18             	mov    0x18(%eax),%edx
c0106f9b:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0106fa0:	8b 40 04             	mov    0x4(%eax),%eax
c0106fa3:	8b 40 04             	mov    0x4(%eax),%eax
c0106fa6:	39 c2                	cmp    %eax,%edx
c0106fa8:	74 0e                	je     c0106fb8 <sys_chmod+0x6a>
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0106faa:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fad:	8b 00                	mov    (%eax),%eax
c0106faf:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
        return;
c0106fb6:	eb 1a                	jmp    c0106fd2 <sys_chmod+0x84>
    }
    // change mode
    node->stat.st_mode = (*cpu)->CPU_ARG2;
c0106fb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fbb:	8b 00                	mov    (%eax),%eax
c0106fbd:	8b 50 24             	mov    0x24(%eax),%edx
c0106fc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106fc3:	89 50 0c             	mov    %edx,0xc(%eax)
    (*cpu)->CPU_ARG0 = _SUCCESS;
c0106fc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fc9:	8b 00                	mov    (%eax),%eax
c0106fcb:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
}
c0106fd2:	c9                   	leave  
c0106fd3:	c3                   	ret    

c0106fd4 <sys_lchown>:


void sys_lchown(struct cpu_state **cpu)
{
c0106fd4:	55                   	push   %ebp
c0106fd5:	89 e5                	mov    %esp,%ebp
c0106fd7:	83 ec 28             	sub    $0x28,%esp
    char *file = (char *)(*cpu)->CPU_ARG1;
c0106fda:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fdd:	8b 00                	mov    (%eax),%eax
c0106fdf:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106fe2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(file == NULL)
c0106fe5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106fe9:	75 11                	jne    c0106ffc <sys_lchown+0x28>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0106feb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fee:	8b 00                	mov    (%eax),%eax
c0106ff0:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0106ff7:	e9 86 00 00 00       	jmp    c0107082 <sys_lchown+0xae>
    }
    // Lookup path
    vfs_inode_t *node = vfs_lookup_path(file);
c0106ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fff:	89 04 24             	mov    %eax,(%esp)
c0107002:	e8 ae e8 ff ff       	call   c01058b5 <vfs_lookup_path>
c0107007:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(node == NULL)
c010700a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010700e:	75 0e                	jne    c010701e <sys_lchown+0x4a>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c0107010:	8b 45 08             	mov    0x8(%ebp),%eax
c0107013:	8b 00                	mov    (%eax),%eax
c0107015:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c010701c:	eb 64                	jmp    c0107082 <sys_lchown+0xae>
    }
    // Check permissions
    if(node->stat.st_uid != current_thread->process->uid)
c010701e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107021:	8b 50 18             	mov    0x18(%eax),%edx
c0107024:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0107029:	8b 40 04             	mov    0x4(%eax),%eax
c010702c:	8b 40 04             	mov    0x4(%eax),%eax
c010702f:	39 c2                	cmp    %eax,%edx
c0107031:	74 0e                	je     c0107041 <sys_lchown+0x6d>
    {
        (*cpu)->CPU_ARG0 = _NO_PERMISSION;
c0107033:	8b 45 08             	mov    0x8(%ebp),%eax
c0107036:	8b 00                	mov    (%eax),%eax
c0107038:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
        return;
c010703f:	eb 41                	jmp    c0107082 <sys_lchown+0xae>
    }

    // do to follow link
    if(node->type == VFS_LINK)
c0107041:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107044:	8b 40 04             	mov    0x4(%eax),%eax
c0107047:	83 f8 03             	cmp    $0x3,%eax
c010704a:	75 0e                	jne    c010705a <sys_lchown+0x86>
    {
        (*cpu)->CPU_ARG0 = _FAILURE;
c010704c:	8b 45 08             	mov    0x8(%ebp),%eax
c010704f:	8b 00                	mov    (%eax),%eax
c0107051:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0107058:	eb 28                	jmp    c0107082 <sys_lchown+0xae>
    }

    node->stat.st_uid = (uid_t) (*cpu)->CPU_ARG2;
c010705a:	8b 45 08             	mov    0x8(%ebp),%eax
c010705d:	8b 00                	mov    (%eax),%eax
c010705f:	8b 50 24             	mov    0x24(%eax),%edx
c0107062:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107065:	89 50 18             	mov    %edx,0x18(%eax)
    node->stat.st_gid = (gid_t) (*cpu)->CPU_ARG3;
c0107068:	8b 45 08             	mov    0x8(%ebp),%eax
c010706b:	8b 00                	mov    (%eax),%eax
c010706d:	8b 50 20             	mov    0x20(%eax),%edx
c0107070:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107073:	89 50 1c             	mov    %edx,0x1c(%eax)
    (*cpu)->CPU_ARG0 = _SUCCESS;
c0107076:	8b 45 08             	mov    0x8(%ebp),%eax
c0107079:	8b 00                	mov    (%eax),%eax
c010707b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c0107082:	c9                   	leave  
c0107083:	c3                   	ret    

c0107084 <map_all>:
 * @brief maps all multiboot modules into the vfs
 * @param mb_info the multiboot struct with the modules in it
 * @return how many modules got mapped and how many failed
 */
struct mapping_statistics map_all(struct multiboot_struct *mb_info)
{
c0107084:	55                   	push   %ebp
c0107085:	89 e5                	mov    %esp,%ebp
c0107087:	83 ec 28             	sub    $0x28,%esp
    struct mapping_statistics s;
    memset(&s, 0, sizeof(struct mapping_statistics));
c010708a:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
c0107091:	00 
c0107092:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107099:	00 
c010709a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010709d:	89 04 24             	mov    %eax,(%esp)
c01070a0:	e8 d0 be ff ff       	call   c0102f75 <memset>
    struct mods_add *modules = (struct mods_add*) mb_info->mods_addr;
c01070a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070a8:	8b 40 18             	mov    0x18(%eax),%eax
c01070ab:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for(s.total = 0; s.total < mb_info->mods_count; s.total++)
c01070ae:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01070b5:	eb 36                	jmp    c01070ed <map_all+0x69>
    {
        if(map_module(&modules[s.total]) == success)
c01070b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070ba:	89 c2                	mov    %eax,%edx
c01070bc:	c1 e2 04             	shl    $0x4,%edx
c01070bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070c2:	01 d0                	add    %edx,%eax
c01070c4:	89 04 24             	mov    %eax,(%esp)
c01070c7:	e8 4b 00 00 00       	call   c0107117 <map_module>
c01070cc:	85 c0                	test   %eax,%eax
c01070ce:	75 0b                	jne    c01070db <map_all+0x57>
            s.load_success++;
c01070d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070d3:	83 c0 01             	add    $0x1,%eax
c01070d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01070d9:	eb 09                	jmp    c01070e4 <map_all+0x60>
        else
            s.load_failed++;
c01070db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070de:	83 c0 01             	add    $0x1,%eax
c01070e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
{
    struct mapping_statistics s;
    memset(&s, 0, sizeof(struct mapping_statistics));
    struct mods_add *modules = (struct mods_add*) mb_info->mods_addr;

    for(s.total = 0; s.total < mb_info->mods_count; s.total++)
c01070e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070e7:	83 c0 01             	add    $0x1,%eax
c01070ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01070ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070f0:	89 c2                	mov    %eax,%edx
c01070f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070f5:	8b 40 14             	mov    0x14(%eax),%eax
c01070f8:	39 c2                	cmp    %eax,%edx
c01070fa:	72 bb                	jb     c01070b7 <map_all+0x33>
            s.load_success++;
        else
            s.load_failed++;
    }

    return s;
c01070fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01070ff:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107102:	89 10                	mov    %edx,(%eax)
c0107104:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107107:	89 50 04             	mov    %edx,0x4(%eax)
c010710a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010710d:	89 50 08             	mov    %edx,0x8(%eax)
}
c0107110:	8b 45 08             	mov    0x8(%ebp),%eax
c0107113:	c9                   	leave  
c0107114:	c2 04 00             	ret    $0x4

c0107117 <map_module>:
 * @brief maps one module into the vfs
 * @param module the information i need to map this module
 * @return success or failture
 */
success_t map_module(struct mods_add *module)
{
c0107117:	55                   	push   %ebp
c0107118:	89 e5                	mov    %esp,%ebp
c010711a:	83 ec 48             	sub    $0x48,%esp
    if(module == NULL)  // i don't think this will ever happen, but you have what you have
c010711d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107121:	75 0a                	jne    c010712d <map_module+0x16>
        return failed;
c0107123:	b8 01 00 00 00       	mov    $0x1,%eax
c0107128:	e9 3d 01 00 00       	jmp    c010726a <map_module+0x153>

    char *path = NULL;  // later i will need path and name
c010712d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    char *name = NULL;
c0107134:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

    if(split_module_string(module->string, &path, &name) == failed)     // if i can't split the module string there is no reason for executing further
c010713b:	8b 45 08             	mov    0x8(%ebp),%eax
c010713e:	8b 40 08             	mov    0x8(%eax),%eax
c0107141:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0107144:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107148:	8d 55 e0             	lea    -0x20(%ebp),%edx
c010714b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010714f:	89 04 24             	mov    %eax,(%esp)
c0107152:	e8 15 01 00 00       	call   c010726c <split_module_string>
c0107157:	83 f8 01             	cmp    $0x1,%eax
c010715a:	75 0a                	jne    c0107166 <map_module+0x4f>
        return failed;
c010715c:	b8 01 00 00 00       	mov    $0x1,%eax
c0107161:	e9 04 01 00 00       	jmp    c010726a <map_module+0x153>

//    printf("%s%s\n", path, name);

    vfs_inode_t *node = vfs_create_path(path, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH | S_IFDIR, 0, 0); // i need a node to place the module in
c0107166:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107169:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107170:	00 
c0107171:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107178:	00 
c0107179:	c7 44 24 04 c5 12 00 	movl   $0x12c5,0x4(%esp)
c0107180:	00 
c0107181:	89 04 24             	mov    %eax,(%esp)
c0107184:	e8 5d e8 ff ff       	call   c01059e6 <vfs_create_path>
c0107189:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int size = module->mod_end - module->mod_start;     // basic stuff
c010718c:	8b 45 08             	mov    0x8(%ebp),%eax
c010718f:	8b 50 04             	mov    0x4(%eax),%edx
c0107192:	8b 45 08             	mov    0x8(%ebp),%eax
c0107195:	8b 00                	mov    (%eax),%eax
c0107197:	89 d1                	mov    %edx,%ecx
c0107199:	29 c1                	sub    %eax,%ecx
c010719b:	89 c8                	mov    %ecx,%eax
c010719d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(size < 0)        // should never happen, but you never know
c01071a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01071a4:	79 20                	jns    c01071c6 <map_module+0xaf>
    {
        free(path);     // i have to free the allocated memory (to avoid memory leaks)
c01071a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01071a9:	89 04 24             	mov    %eax,(%esp)
c01071ac:	e8 d2 65 00 00       	call   c010d783 <free>
        free(name);
c01071b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01071b4:	89 04 24             	mov    %eax,(%esp)
c01071b7:	e8 c7 65 00 00       	call   c010d783 <free>
        return failed;
c01071bc:	b8 01 00 00 00       	mov    $0x1,%eax
c01071c1:	e9 a4 00 00 00       	jmp    c010726a <map_module+0x153>
    }

    int pages = NUM_PAGES(size);
c01071c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071c9:	05 ff 0f 00 00       	add    $0xfff,%eax
c01071ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01071d3:	c1 e8 0c             	shr    $0xc,%eax
c01071d6:	89 45 ec             	mov    %eax,-0x14(%ebp)

    vaddr_t virtaddr = vmm_automap_kernel_range(current_context, module->mod_start, pages, VMM_WRITABLE);   // something about physical and virtual memory and kernel and user space... ask someone else
c01071d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01071dc:	8b 10                	mov    (%eax),%edx
c01071de:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c01071e3:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01071ea:	00 
c01071eb:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01071ee:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01071f2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01071f6:	89 04 24             	mov    %eax,(%esp)
c01071f9:	e8 2c 60 00 00       	call   c010d22a <vmm_automap_kernel_range>
c01071fe:	89 45 e8             	mov    %eax,-0x18(%ebp)

    vfs_inode_t *file = vfs_create_inode(name,  S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH, node, 0, 0);   // create the module in the vfs
c0107201:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107204:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010720b:	00 
c010720c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107213:	00 
c0107214:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107217:	89 54 24 08          	mov    %edx,0x8(%esp)
c010721b:	c7 44 24 04 c0 5b 00 	movl   $0x5bc0,0x4(%esp)
c0107222:	00 
c0107223:	89 04 24             	mov    %eax,(%esp)
c0107226:	e8 d4 df ff ff       	call   c01051ff <vfs_create_inode>
c010722b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    vfs_write(file, 0, (void*)virtaddr, size);
c010722e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107231:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107234:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0107238:	89 44 24 08          	mov    %eax,0x8(%esp)
c010723c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107243:	00 
c0107244:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107247:	89 04 24             	mov    %eax,(%esp)
c010724a:	e8 7e e1 ff ff       	call   c01053cd <vfs_write>

    free(path);     // "we don't waste memory" (tdotu)
c010724f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107252:	89 04 24             	mov    %eax,(%esp)
c0107255:	e8 29 65 00 00       	call   c010d783 <free>
    free(name);
c010725a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010725d:	89 04 24             	mov    %eax,(%esp)
c0107260:	e8 1e 65 00 00       	call   c010d783 <free>

    return success; // be happy
c0107265:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010726a:	c9                   	leave  
c010726b:	c3                   	ret    

c010726c <split_module_string>:
 * @param path_buffer the adress of the char pointer in which the path should be placed
 * @param name_buffer the adress of the char pointer in which the name should be placed
 * @return success or failture
 */
success_t split_module_string(char *string, char **path_buffer, char **name_buffer)
{
c010726c:	55                   	push   %ebp
c010726d:	89 e5                	mov    %esp,%ebp
c010726f:	83 ec 28             	sub    $0x28,%esp
    if(string == NULL || path_buffer == NULL || name_buffer == NULL)    // i don't think this will ever happen, but you have what you have
c0107272:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107276:	74 0c                	je     c0107284 <split_module_string+0x18>
c0107278:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010727c:	74 06                	je     c0107284 <split_module_string+0x18>
c010727e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107282:	75 0a                	jne    c010728e <split_module_string+0x22>
        return failed;
c0107284:	b8 01 00 00 00       	mov    $0x1,%eax
c0107289:	e9 6f 01 00 00       	jmp    c01073fd <split_module_string+0x191>

    int i, j;

    for(i = 0, j = 0; string[i] != '\0'; i++)       // in this loop i count the number of slashes in a string
c010728e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107295:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010729c:	eb 17                	jmp    c01072b5 <split_module_string+0x49>
        if(string[i] == '/')
c010729e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01072a4:	01 d0                	add    %edx,%eax
c01072a6:	0f b6 00             	movzbl (%eax),%eax
c01072a9:	3c 2f                	cmp    $0x2f,%al
c01072ab:	75 04                	jne    c01072b1 <split_module_string+0x45>
            j++;
c01072ad:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    if(string == NULL || path_buffer == NULL || name_buffer == NULL)    // i don't think this will ever happen, but you have what you have
        return failed;

    int i, j;

    for(i = 0, j = 0; string[i] != '\0'; i++)       // in this loop i count the number of slashes in a string
c01072b1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01072bb:	01 d0                	add    %edx,%eax
c01072bd:	0f b6 00             	movzbl (%eax),%eax
c01072c0:	84 c0                	test   %al,%al
c01072c2:	75 da                	jne    c010729e <split_module_string+0x32>
        if(string[i] == '/')
            j++;

    if(j == 0)  // illegal path
c01072c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01072c8:	75 0a                	jne    c01072d4 <split_module_string+0x68>
        return failed;
c01072ca:	b8 01 00 00 00       	mov    $0x1,%eax
c01072cf:	e9 29 01 00 00       	jmp    c01073fd <split_module_string+0x191>

    for(i = 0; j > 0; i++)                          // in this loop i count the number of characters from the beginning to the final slash
c01072d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01072db:	eb 17                	jmp    c01072f4 <split_module_string+0x88>
        if(string[i] == '/')
c01072dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01072e3:	01 d0                	add    %edx,%eax
c01072e5:	0f b6 00             	movzbl (%eax),%eax
c01072e8:	3c 2f                	cmp    $0x2f,%al
c01072ea:	75 04                	jne    c01072f0 <split_module_string+0x84>
            j--;
c01072ec:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            j++;

    if(j == 0)  // illegal path
        return failed;

    for(i = 0; j > 0; i++)                          // in this loop i count the number of characters from the beginning to the final slash
c01072f0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01072f8:	7f e3                	jg     c01072dd <split_module_string+0x71>
        if(string[i] == '/')
            j--;

    (*path_buffer) = (char *)malloc(sizeof(char) * (i + 1));    // the length of the path is the number of characters to the final slash plus one for zero-termination
c01072fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072fd:	83 c0 01             	add    $0x1,%eax
c0107300:	89 04 24             	mov    %eax,(%esp)
c0107303:	e8 94 63 00 00       	call   c010d69c <malloc>
c0107308:	89 c2                	mov    %eax,%edx
c010730a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010730d:	89 10                	mov    %edx,(%eax)

    if((*path_buffer) == NULL)  // if malloc fails (virtually impossible)
c010730f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107312:	8b 00                	mov    (%eax),%eax
c0107314:	85 c0                	test   %eax,%eax
c0107316:	75 0a                	jne    c0107322 <split_module_string+0xb6>
        return failed;
c0107318:	b8 01 00 00 00       	mov    $0x1,%eax
c010731d:	e9 db 00 00 00       	jmp    c01073fd <split_module_string+0x191>

    memset((*path_buffer), '\0', sizeof(char) * (i + 1));
c0107322:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107325:	83 c0 01             	add    $0x1,%eax
c0107328:	89 c2                	mov    %eax,%edx
c010732a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010732d:	8b 00                	mov    (%eax),%eax
c010732f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107333:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010733a:	00 
c010733b:	89 04 24             	mov    %eax,(%esp)
c010733e:	e8 32 bc ff ff       	call   c0102f75 <memset>

    (*name_buffer) = (char *)malloc(sizeof(char) * ((strlen(string) - i) + 1));     // the length of the name is the number of characters after the final slash plus one for zero-termination
c0107343:	8b 45 08             	mov    0x8(%ebp),%eax
c0107346:	89 04 24             	mov    %eax,(%esp)
c0107349:	e8 db b6 ff ff       	call   c0102a29 <strlen>
c010734e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107351:	29 d0                	sub    %edx,%eax
c0107353:	83 c0 01             	add    $0x1,%eax
c0107356:	89 04 24             	mov    %eax,(%esp)
c0107359:	e8 3e 63 00 00       	call   c010d69c <malloc>
c010735e:	89 c2                	mov    %eax,%edx
c0107360:	8b 45 10             	mov    0x10(%ebp),%eax
c0107363:	89 10                	mov    %edx,(%eax)

    if((*name_buffer) == NULL)  // if malloc fails (virtually impossible)
c0107365:	8b 45 10             	mov    0x10(%ebp),%eax
c0107368:	8b 00                	mov    (%eax),%eax
c010736a:	85 c0                	test   %eax,%eax
c010736c:	75 14                	jne    c0107382 <split_module_string+0x116>
    {
        free(*path_buffer);     // i have to free the successfully allocated memory (to avoid memory leaks)
c010736e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107371:	8b 00                	mov    (%eax),%eax
c0107373:	89 04 24             	mov    %eax,(%esp)
c0107376:	e8 08 64 00 00       	call   c010d783 <free>
        return failed;
c010737b:	b8 01 00 00 00       	mov    $0x1,%eax
c0107380:	eb 7b                	jmp    c01073fd <split_module_string+0x191>
    }

    memset((*name_buffer), '\0', sizeof(char) * ((strlen(string) - i) + 1));
c0107382:	8b 45 08             	mov    0x8(%ebp),%eax
c0107385:	89 04 24             	mov    %eax,(%esp)
c0107388:	e8 9c b6 ff ff       	call   c0102a29 <strlen>
c010738d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107390:	29 d0                	sub    %edx,%eax
c0107392:	8d 50 01             	lea    0x1(%eax),%edx
c0107395:	8b 45 10             	mov    0x10(%ebp),%eax
c0107398:	8b 00                	mov    (%eax),%eax
c010739a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010739e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01073a5:	00 
c01073a6:	89 04 24             	mov    %eax,(%esp)
c01073a9:	e8 c7 bb ff ff       	call   c0102f75 <memset>

    strncpy((*path_buffer), string, i);                         // copy the two parts of the string in the two other strings
c01073ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01073b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01073b4:	8b 00                	mov    (%eax),%eax
c01073b6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01073ba:	8b 55 08             	mov    0x8(%ebp),%edx
c01073bd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01073c1:	89 04 24             	mov    %eax,(%esp)
c01073c4:	e8 d8 b6 ff ff       	call   c0102aa1 <strncpy>
    strncpy((*name_buffer), &string[i], strlen(string) - i);
c01073c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01073cc:	89 04 24             	mov    %eax,(%esp)
c01073cf:	e8 55 b6 ff ff       	call   c0102a29 <strlen>
c01073d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01073d7:	89 c1                	mov    %eax,%ecx
c01073d9:	29 d1                	sub    %edx,%ecx
c01073db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01073de:	8b 45 08             	mov    0x8(%ebp),%eax
c01073e1:	01 c2                	add    %eax,%edx
c01073e3:	8b 45 10             	mov    0x10(%ebp),%eax
c01073e6:	8b 00                	mov    (%eax),%eax
c01073e8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01073ec:	89 54 24 04          	mov    %edx,0x4(%esp)
c01073f0:	89 04 24             	mov    %eax,(%esp)
c01073f3:	e8 a9 b6 ff ff       	call   c0102aa1 <strncpy>

    return success;
c01073f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01073fd:	c9                   	leave  
c01073fe:	c3                   	ret    

c01073ff <USER_INIT>:

list_t *users;		// user list
list_t *groups;		// group list

void USER_INIT(void)
{
c01073ff:	55                   	push   %ebp
c0107400:	89 e5                	mov    %esp,%ebp
c0107402:	53                   	push   %ebx
c0107403:	83 ec 14             	sub    $0x14,%esp
    users = list_create();
c0107406:	e8 73 b1 ff ff       	call   c010257e <list_create>
c010740b:	a3 20 a0 11 c0       	mov    %eax,0xc011a020
    groups = list_create();
c0107410:	e8 69 b1 ff ff       	call   c010257e <list_create>
c0107415:	a3 1c a0 11 c0       	mov    %eax,0xc011a01c

    add_group("root", 0);
c010741a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107421:	00 
c0107422:	c7 04 24 ab 18 11 c0 	movl   $0xc01118ab,(%esp)
c0107429:	e8 97 04 00 00       	call   c01078c5 <add_group>
    add_user("root","","/",0);
c010742e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107435:	00 
c0107436:	c7 44 24 08 b0 18 11 	movl   $0xc01118b0,0x8(%esp)
c010743d:	c0 
c010743e:	c7 44 24 04 b2 18 11 	movl   $0xc01118b2,0x4(%esp)
c0107445:	c0 
c0107446:	c7 04 24 ab 18 11 c0 	movl   $0xc01118ab,(%esp)
c010744d:	e8 2c 00 00 00       	call   c010747e <add_user>
    add_user_to_group(get_user_by_id(0), get_group_by_id(0));
c0107452:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0107459:	e8 72 06 00 00       	call   c0107ad0 <get_group_by_id>
c010745e:	89 c3                	mov    %eax,%ebx
c0107460:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0107467:	e8 30 03 00 00       	call   c010779c <get_user_by_id>
c010746c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0107470:	89 04 24             	mov    %eax,(%esp)
c0107473:	e8 75 07 00 00       	call   c0107bed <add_user_to_group>
}
c0107478:	83 c4 14             	add    $0x14,%esp
c010747b:	5b                   	pop    %ebx
c010747c:	5d                   	pop    %ebp
c010747d:	c3                   	ret    

c010747e <add_user>:

int add_user(const char *uname, const char *upasswd, const char *uhome, uid_t uid)
{
c010747e:	55                   	push   %ebp
c010747f:	89 e5                	mov    %esp,%ebp
c0107481:	83 ec 38             	sub    $0x38,%esp
    if(uname == NULL || uname[0] == '\0')
c0107484:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107488:	74 0a                	je     c0107494 <add_user+0x16>
c010748a:	8b 45 08             	mov    0x8(%ebp),%eax
c010748d:	0f b6 00             	movzbl (%eax),%eax
c0107490:	84 c0                	test   %al,%al
c0107492:	75 0a                	jne    c010749e <add_user+0x20>
        return FAILTURE;
c0107494:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0107499:	e9 ad 01 00 00       	jmp    c010764b <add_user+0x1cd>

    if(user_id_exists(uid))
c010749e:	8b 45 14             	mov    0x14(%ebp),%eax
c01074a1:	89 04 24             	mov    %eax,(%esp)
c01074a4:	e8 38 09 00 00       	call   c0107de1 <user_id_exists>
c01074a9:	85 c0                	test   %eax,%eax
c01074ab:	74 0a                	je     c01074b7 <add_user+0x39>
        return FAILTURE;
c01074ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01074b2:	e9 94 01 00 00       	jmp    c010764b <add_user+0x1cd>

    if(user_name_exists(uname))
c01074b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01074ba:	89 04 24             	mov    %eax,(%esp)
c01074bd:	e8 30 0a 00 00       	call   c0107ef2 <user_name_exists>
c01074c2:	85 c0                	test   %eax,%eax
c01074c4:	74 0a                	je     c01074d0 <add_user+0x52>
        return FAILTURE;
c01074c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01074cb:	e9 7b 01 00 00       	jmp    c010764b <add_user+0x1cd>

    user_t *new_user = (user_t *)malloc(sizeof(user_t));
c01074d0:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c01074d7:	e8 c0 61 00 00       	call   c010d69c <malloc>
c01074dc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    new_user->name = (char *)malloc(sizeof(char) * strlen(uname));
c01074df:	8b 45 08             	mov    0x8(%ebp),%eax
c01074e2:	89 04 24             	mov    %eax,(%esp)
c01074e5:	e8 3f b5 ff ff       	call   c0102a29 <strlen>
c01074ea:	89 04 24             	mov    %eax,(%esp)
c01074ed:	e8 aa 61 00 00       	call   c010d69c <malloc>
c01074f2:	89 c2                	mov    %eax,%edx
c01074f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074f7:	89 10                	mov    %edx,(%eax)
    strcpy(new_user->name, uname);
c01074f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074fc:	8b 00                	mov    (%eax),%eax
c01074fe:	8b 55 08             	mov    0x8(%ebp),%edx
c0107501:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107505:	89 04 24             	mov    %eax,(%esp)
c0107508:	e8 43 b5 ff ff       	call   c0102a50 <strcpy>

    if(upasswd == NULL)
c010750d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107511:	75 0c                	jne    c010751f <add_user+0xa1>
        new_user->passwd = NULL;
c0107513:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107516:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
c010751d:	eb 30                	jmp    c010754f <add_user+0xd1>
    else
    {
        new_user->passwd = (char *)malloc(sizeof(char) * strlen(upasswd));
c010751f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107522:	89 04 24             	mov    %eax,(%esp)
c0107525:	e8 ff b4 ff ff       	call   c0102a29 <strlen>
c010752a:	89 04 24             	mov    %eax,(%esp)
c010752d:	e8 6a 61 00 00       	call   c010d69c <malloc>
c0107532:	89 c2                	mov    %eax,%edx
c0107534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107537:	89 50 04             	mov    %edx,0x4(%eax)
        strcpy(new_user->passwd, upasswd);
c010753a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010753d:	8b 40 04             	mov    0x4(%eax),%eax
c0107540:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107543:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107547:	89 04 24             	mov    %eax,(%esp)
c010754a:	e8 01 b5 ff ff       	call   c0102a50 <strcpy>
    }

    if(uhome != NULL)
c010754f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107553:	74 32                	je     c0107587 <add_user+0x109>
    {
        new_user->home = (char *)malloc(sizeof(char) * strlen(uhome));
c0107555:	8b 45 10             	mov    0x10(%ebp),%eax
c0107558:	89 04 24             	mov    %eax,(%esp)
c010755b:	e8 c9 b4 ff ff       	call   c0102a29 <strlen>
c0107560:	89 04 24             	mov    %eax,(%esp)
c0107563:	e8 34 61 00 00       	call   c010d69c <malloc>
c0107568:	89 c2                	mov    %eax,%edx
c010756a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010756d:	89 50 08             	mov    %edx,0x8(%eax)
        strcpy(new_user->home, uhome);
c0107570:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107573:	8b 40 08             	mov    0x8(%eax),%eax
c0107576:	8b 55 10             	mov    0x10(%ebp),%edx
c0107579:	89 54 24 04          	mov    %edx,0x4(%esp)
c010757d:	89 04 24             	mov    %eax,(%esp)
c0107580:	e8 cb b4 ff ff       	call   c0102a50 <strcpy>
c0107585:	eb 7d                	jmp    c0107604 <add_user+0x186>
    }
    else
    {
        new_user->home = (char *)malloc(sizeof(char) * (strlen("/home/") + strlen(uname)));
c0107587:	8b 45 08             	mov    0x8(%ebp),%eax
c010758a:	89 04 24             	mov    %eax,(%esp)
c010758d:	e8 97 b4 ff ff       	call   c0102a29 <strlen>
c0107592:	83 c0 06             	add    $0x6,%eax
c0107595:	89 04 24             	mov    %eax,(%esp)
c0107598:	e8 ff 60 00 00       	call   c010d69c <malloc>
c010759d:	89 c2                	mov    %eax,%edx
c010759f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075a2:	89 50 08             	mov    %edx,0x8(%eax)
        strcpy(new_user->home, "/home/");
c01075a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075a8:	8b 40 08             	mov    0x8(%eax),%eax
c01075ab:	c7 00 2f 68 6f 6d    	movl   $0x6d6f682f,(%eax)
c01075b1:	66 c7 40 04 65 2f    	movw   $0x2f65,0x4(%eax)
c01075b7:	c6 40 06 00          	movb   $0x0,0x6(%eax)
        strcat(new_user->home, uname);
c01075bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075be:	8b 40 08             	mov    0x8(%eax),%eax
c01075c1:	8b 55 08             	mov    0x8(%ebp),%edx
c01075c4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01075c8:	89 04 24             	mov    %eax,(%esp)
c01075cb:	e8 36 b5 ff ff       	call   c0102b06 <strcat>
        vfs_create_inode(new_user->name, S_IRUSR | S_IWUSR, vfs_lookup_path("/home/"), uid, 0);
c01075d0:	c7 04 24 b3 18 11 c0 	movl   $0xc01118b3,(%esp)
c01075d7:	e8 d9 e2 ff ff       	call   c01058b5 <vfs_lookup_path>
c01075dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01075df:	8b 12                	mov    (%edx),%edx
c01075e1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01075e8:	00 
c01075e9:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01075ec:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01075f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01075f4:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01075fb:	00 
c01075fc:	89 14 24             	mov    %edx,(%esp)
c01075ff:	e8 fb db ff ff       	call   c01051ff <vfs_create_inode>
    }

    new_user->id = uid;
c0107604:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107607:	8b 55 14             	mov    0x14(%ebp),%edx
c010760a:	89 50 0c             	mov    %edx,0xc(%eax)
    new_user->grps = list_create();
c010760d:	e8 6c af ff ff       	call   c010257e <list_create>
c0107612:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107615:	89 42 10             	mov    %eax,0x10(%edx)
    list_lock(users);
c0107618:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010761d:	89 04 24             	mov    %eax,(%esp)
c0107620:	e8 fc b1 ff ff       	call   c0102821 <list_lock>
    list_push_back(users, new_user);
c0107625:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010762a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010762d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107631:	89 04 24             	mov    %eax,(%esp)
c0107634:	e8 29 b0 ff ff       	call   c0102662 <list_push_back>
    list_unlock(users);
c0107639:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010763e:	89 04 24             	mov    %eax,(%esp)
c0107641:	e8 ee b1 ff ff       	call   c0102834 <list_unlock>

    return SUCCESS;
c0107646:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010764b:	c9                   	leave  
c010764c:	c3                   	ret    

c010764d <remove_user>:

int remove_user(user_t *user)
{
c010764d:	55                   	push   %ebp
c010764e:	89 e5                	mov    %esp,%ebp
c0107650:	83 ec 38             	sub    $0x38,%esp
    iterator_t user_itr = iterator_create(users);
c0107653:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c0107659:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010765c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107660:	89 04 24             	mov    %eax,(%esp)
c0107663:	e8 df b1 ff ff       	call   c0102847 <iterator_create>
c0107668:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c010766b:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107670:	89 04 24             	mov    %eax,(%esp)
c0107673:	e8 a9 b1 ff ff       	call   c0102821 <list_lock>
    while(!list_is_last(&user_itr))
c0107678:	e9 f8 00 00 00       	jmp    c0107775 <remove_user+0x128>
    {
        if(((user_t *)list_get_current(&user_itr)) == user)
c010767d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107680:	89 04 24             	mov    %eax,(%esp)
c0107683:	e8 88 b2 ff ff       	call   c0102910 <list_get_current>
c0107688:	3b 45 08             	cmp    0x8(%ebp),%eax
c010768b:	0f 85 d9 00 00 00    	jne    c010776a <remove_user+0x11d>
        {
            user_t *usr = ((user_t *)list_get_current(&user_itr));
c0107691:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107694:	89 04 24             	mov    %eax,(%esp)
c0107697:	e8 74 b2 ff ff       	call   c0102910 <list_get_current>
c010769c:	89 45 f4             	mov    %eax,-0xc(%ebp)

            iterator_t grps_itr = iterator_create(usr->grps);
c010769f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076a2:	8b 50 10             	mov    0x10(%eax),%edx
c01076a5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01076ac:	89 04 24             	mov    %eax,(%esp)
c01076af:	e8 93 b1 ff ff       	call   c0102847 <iterator_create>
c01076b4:	83 ec 04             	sub    $0x4,%esp
            list_lock(usr->grps);
c01076b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076ba:	8b 40 10             	mov    0x10(%eax),%eax
c01076bd:	89 04 24             	mov    %eax,(%esp)
c01076c0:	e8 5c b1 ff ff       	call   c0102821 <list_lock>
            while(!list_is_last(&grps_itr))
c01076c5:	eb 25                	jmp    c01076ec <remove_user+0x9f>
            {
                remove_user_from_group_lockfree(usr, (group_t *)list_get_current(&grps_itr));
c01076c7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076ca:	89 04 24             	mov    %eax,(%esp)
c01076cd:	e8 3e b2 ff ff       	call   c0102910 <list_get_current>
c01076d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01076d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076d9:	89 04 24             	mov    %eax,(%esp)
c01076dc:	e8 ca 05 00 00       	call   c0107cab <remove_user_from_group_lockfree>

                list_next(&grps_itr);
c01076e1:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076e4:	89 04 24             	mov    %eax,(%esp)
c01076e7:	e8 49 b2 ff ff       	call   c0102935 <list_next>
        {
            user_t *usr = ((user_t *)list_get_current(&user_itr));

            iterator_t grps_itr = iterator_create(usr->grps);
            list_lock(usr->grps);
            while(!list_is_last(&grps_itr))
c01076ec:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01076ef:	89 04 24             	mov    %eax,(%esp)
c01076f2:	e8 65 b2 ff ff       	call   c010295c <list_is_last>
c01076f7:	85 c0                	test   %eax,%eax
c01076f9:	74 cc                	je     c01076c7 <remove_user+0x7a>
            {
                remove_user_from_group_lockfree(usr, (group_t *)list_get_current(&grps_itr));

                list_next(&grps_itr);
            }
            list_unlock(usr->grps);
c01076fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076fe:	8b 40 10             	mov    0x10(%eax),%eax
c0107701:	89 04 24             	mov    %eax,(%esp)
c0107704:	e8 2b b1 ff ff       	call   c0102834 <list_unlock>

            free(usr->name);
c0107709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010770c:	8b 00                	mov    (%eax),%eax
c010770e:	89 04 24             	mov    %eax,(%esp)
c0107711:	e8 6d 60 00 00       	call   c010d783 <free>
            free(usr->passwd);
c0107716:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107719:	8b 40 04             	mov    0x4(%eax),%eax
c010771c:	89 04 24             	mov    %eax,(%esp)
c010771f:	e8 5f 60 00 00       	call   c010d783 <free>
            free(usr->home);
c0107724:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107727:	8b 40 08             	mov    0x8(%eax),%eax
c010772a:	89 04 24             	mov    %eax,(%esp)
c010772d:	e8 51 60 00 00       	call   c010d783 <free>
            list_destroy(usr->grps);
c0107732:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107735:	8b 40 10             	mov    0x10(%eax),%eax
c0107738:	89 04 24             	mov    %eax,(%esp)
c010773b:	e8 96 ae ff ff       	call   c01025d6 <list_destroy>
            free(usr);
c0107740:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107743:	89 04 24             	mov    %eax,(%esp)
c0107746:	e8 38 60 00 00       	call   c010d783 <free>

            list_remove(&user_itr);
c010774b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010774e:	89 04 24             	mov    %eax,(%esp)
c0107751:	e8 4c b2 ff ff       	call   c01029a2 <list_remove>
            list_unlock(users);
c0107756:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010775b:	89 04 24             	mov    %eax,(%esp)
c010775e:	e8 d1 b0 ff ff       	call   c0102834 <list_unlock>
            return SUCCESS;
c0107763:	b8 00 00 00 00       	mov    $0x0,%eax
c0107768:	eb 30                	jmp    c010779a <remove_user+0x14d>
        }

        list_next(&user_itr);
c010776a:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010776d:	89 04 24             	mov    %eax,(%esp)
c0107770:	e8 c0 b1 ff ff       	call   c0102935 <list_next>

int remove_user(user_t *user)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);
    while(!list_is_last(&user_itr))
c0107775:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107778:	89 04 24             	mov    %eax,(%esp)
c010777b:	e8 dc b1 ff ff       	call   c010295c <list_is_last>
c0107780:	85 c0                	test   %eax,%eax
c0107782:	0f 84 f5 fe ff ff    	je     c010767d <remove_user+0x30>
        }

        list_next(&user_itr);
    }

    list_unlock(users);
c0107788:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010778d:	89 04 24             	mov    %eax,(%esp)
c0107790:	e8 9f b0 ff ff       	call   c0102834 <list_unlock>
    return FAILTURE;
c0107795:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010779a:	c9                   	leave  
c010779b:	c3                   	ret    

c010779c <get_user_by_id>:

user_t *get_user_by_id(uid_t id)
{
c010779c:	55                   	push   %ebp
c010779d:	89 e5                	mov    %esp,%ebp
c010779f:	83 ec 28             	sub    $0x28,%esp
    iterator_t user_itr = iterator_create(users);
c01077a2:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c01077a8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01077ab:	89 54 24 04          	mov    %edx,0x4(%esp)
c01077af:	89 04 24             	mov    %eax,(%esp)
c01077b2:	e8 90 b0 ff ff       	call   c0102847 <iterator_create>
c01077b7:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c01077ba:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c01077bf:	89 04 24             	mov    %eax,(%esp)
c01077c2:	e8 5a b0 ff ff       	call   c0102821 <list_lock>
    while(!list_is_last(&user_itr))
c01077c7:	eb 3e                	jmp    c0107807 <get_user_by_id+0x6b>
    {
        if(((user_t *)list_get_current(&user_itr))->id == id)
c01077c9:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01077cc:	89 04 24             	mov    %eax,(%esp)
c01077cf:	e8 3c b1 ff ff       	call   c0102910 <list_get_current>
c01077d4:	8b 40 0c             	mov    0xc(%eax),%eax
c01077d7:	3b 45 08             	cmp    0x8(%ebp),%eax
c01077da:	75 20                	jne    c01077fc <get_user_by_id+0x60>
        {
            user_t *target = (user_t *)list_get_current(&user_itr);
c01077dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01077df:	89 04 24             	mov    %eax,(%esp)
c01077e2:	e8 29 b1 ff ff       	call   c0102910 <list_get_current>
c01077e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
            list_unlock(users);
c01077ea:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c01077ef:	89 04 24             	mov    %eax,(%esp)
c01077f2:	e8 3d b0 ff ff       	call   c0102834 <list_unlock>
            return target;
c01077f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077fa:	eb 2c                	jmp    c0107828 <get_user_by_id+0x8c>
        }

        list_next(&user_itr);
c01077fc:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01077ff:	89 04 24             	mov    %eax,(%esp)
c0107802:	e8 2e b1 ff ff       	call   c0102935 <list_next>

user_t *get_user_by_id(uid_t id)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);
    while(!list_is_last(&user_itr))
c0107807:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010780a:	89 04 24             	mov    %eax,(%esp)
c010780d:	e8 4a b1 ff ff       	call   c010295c <list_is_last>
c0107812:	85 c0                	test   %eax,%eax
c0107814:	74 b3                	je     c01077c9 <get_user_by_id+0x2d>
            return target;
        }

        list_next(&user_itr);
    }
    list_unlock(users);
c0107816:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010781b:	89 04 24             	mov    %eax,(%esp)
c010781e:	e8 11 b0 ff ff       	call   c0102834 <list_unlock>
    return NULL;
c0107823:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107828:	c9                   	leave  
c0107829:	c3                   	ret    

c010782a <get_user_by_name>:

user_t *get_user_by_name(const char *uname)
{
c010782a:	55                   	push   %ebp
c010782b:	89 e5                	mov    %esp,%ebp
c010782d:	83 ec 28             	sub    $0x28,%esp
    iterator_t user_itr = iterator_create(users);
c0107830:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c0107836:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107839:	89 54 24 04          	mov    %edx,0x4(%esp)
c010783d:	89 04 24             	mov    %eax,(%esp)
c0107840:	e8 02 b0 ff ff       	call   c0102847 <iterator_create>
c0107845:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c0107848:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010784d:	89 04 24             	mov    %eax,(%esp)
c0107850:	e8 cc af ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&user_itr))
c0107855:	eb 4b                	jmp    c01078a2 <get_user_by_name+0x78>
    {
        if(strcmp(((user_t *)list_get_current(&user_itr))->name, uname) == 0)
c0107857:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010785a:	89 04 24             	mov    %eax,(%esp)
c010785d:	e8 ae b0 ff ff       	call   c0102910 <list_get_current>
c0107862:	8b 00                	mov    (%eax),%eax
c0107864:	8b 55 08             	mov    0x8(%ebp),%edx
c0107867:	89 54 24 04          	mov    %edx,0x4(%esp)
c010786b:	89 04 24             	mov    %eax,(%esp)
c010786e:	e8 fa b2 ff ff       	call   c0102b6d <strcmp>
c0107873:	85 c0                	test   %eax,%eax
c0107875:	75 20                	jne    c0107897 <get_user_by_name+0x6d>
        {
            user_t *target = (user_t *)list_get_current(&user_itr);
c0107877:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010787a:	89 04 24             	mov    %eax,(%esp)
c010787d:	e8 8e b0 ff ff       	call   c0102910 <list_get_current>
c0107882:	89 45 f4             	mov    %eax,-0xc(%ebp)
            list_unlock(users);
c0107885:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c010788a:	89 04 24             	mov    %eax,(%esp)
c010788d:	e8 a2 af ff ff       	call   c0102834 <list_unlock>
            return target;
c0107892:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107895:	eb 2c                	jmp    c01078c3 <get_user_by_name+0x99>
        }

        list_next(&user_itr);
c0107897:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010789a:	89 04 24             	mov    %eax,(%esp)
c010789d:	e8 93 b0 ff ff       	call   c0102935 <list_next>
user_t *get_user_by_name(const char *uname)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);

    while(!list_is_last(&user_itr))
c01078a2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01078a5:	89 04 24             	mov    %eax,(%esp)
c01078a8:	e8 af b0 ff ff       	call   c010295c <list_is_last>
c01078ad:	85 c0                	test   %eax,%eax
c01078af:	74 a6                	je     c0107857 <get_user_by_name+0x2d>
        }

        list_next(&user_itr);
    }

    list_unlock(users);
c01078b1:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c01078b6:	89 04 24             	mov    %eax,(%esp)
c01078b9:	e8 76 af ff ff       	call   c0102834 <list_unlock>
    return NULL;
c01078be:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01078c3:	c9                   	leave  
c01078c4:	c3                   	ret    

c01078c5 <add_group>:

int add_group(const char *groupname, gid_t gid)
{
c01078c5:	55                   	push   %ebp
c01078c6:	89 e5                	mov    %esp,%ebp
c01078c8:	83 ec 28             	sub    $0x28,%esp
    if(groupname == NULL || groupname[0] == '\0')
c01078cb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01078cf:	74 0a                	je     c01078db <add_group+0x16>
c01078d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01078d4:	0f b6 00             	movzbl (%eax),%eax
c01078d7:	84 c0                	test   %al,%al
c01078d9:	75 0a                	jne    c01078e5 <add_group+0x20>
        return FAILTURE;
c01078db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01078e0:	e9 b6 00 00 00       	jmp    c010799b <add_group+0xd6>

    if(group_id_exists(gid))
c01078e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078e8:	89 04 24             	mov    %eax,(%esp)
c01078eb:	e8 6f 04 00 00       	call   c0107d5f <group_id_exists>
c01078f0:	85 c0                	test   %eax,%eax
c01078f2:	74 0a                	je     c01078fe <add_group+0x39>
        return FAILTURE;
c01078f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01078f9:	e9 9d 00 00 00       	jmp    c010799b <add_group+0xd6>

    if(group_name_exists(groupname))
c01078fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0107901:	89 04 24             	mov    %eax,(%esp)
c0107904:	e8 5a 05 00 00       	call   c0107e63 <group_name_exists>
c0107909:	85 c0                	test   %eax,%eax
c010790b:	74 0a                	je     c0107917 <add_group+0x52>
        return FAILTURE;
c010790d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0107912:	e9 84 00 00 00       	jmp    c010799b <add_group+0xd6>

    group_t *new_group = (group_t *)malloc(sizeof(group_t));
c0107917:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010791e:	e8 79 5d 00 00       	call   c010d69c <malloc>
c0107923:	89 45 f4             	mov    %eax,-0xc(%ebp)

    new_group->name = (char *)malloc(sizeof(char) * strlen(groupname));
c0107926:	8b 45 08             	mov    0x8(%ebp),%eax
c0107929:	89 04 24             	mov    %eax,(%esp)
c010792c:	e8 f8 b0 ff ff       	call   c0102a29 <strlen>
c0107931:	89 04 24             	mov    %eax,(%esp)
c0107934:	e8 63 5d 00 00       	call   c010d69c <malloc>
c0107939:	89 c2                	mov    %eax,%edx
c010793b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010793e:	89 10                	mov    %edx,(%eax)
    strcpy(new_group->name, groupname);
c0107940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107943:	8b 00                	mov    (%eax),%eax
c0107945:	8b 55 08             	mov    0x8(%ebp),%edx
c0107948:	89 54 24 04          	mov    %edx,0x4(%esp)
c010794c:	89 04 24             	mov    %eax,(%esp)
c010794f:	e8 fc b0 ff ff       	call   c0102a50 <strcpy>

    new_group->id = gid;
c0107954:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107957:	8b 55 0c             	mov    0xc(%ebp),%edx
c010795a:	89 50 04             	mov    %edx,0x4(%eax)
    new_group->users = list_create();
c010795d:	e8 1c ac ff ff       	call   c010257e <list_create>
c0107962:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107965:	89 42 08             	mov    %eax,0x8(%edx)
    list_lock(groups);
c0107968:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c010796d:	89 04 24             	mov    %eax,(%esp)
c0107970:	e8 ac ae ff ff       	call   c0102821 <list_lock>
    list_push_back(groups, new_group);
c0107975:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c010797a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010797d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107981:	89 04 24             	mov    %eax,(%esp)
c0107984:	e8 d9 ac ff ff       	call   c0102662 <list_push_back>
    list_unlock(groups);
c0107989:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c010798e:	89 04 24             	mov    %eax,(%esp)
c0107991:	e8 9e ae ff ff       	call   c0102834 <list_unlock>

    return SUCCESS;
c0107996:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010799b:	c9                   	leave  
c010799c:	c3                   	ret    

c010799d <remove_group>:

int remove_group(group_t *group)
{
c010799d:	55                   	push   %ebp
c010799e:	89 e5                	mov    %esp,%ebp
c01079a0:	83 ec 38             	sub    $0x38,%esp
    iterator_t grps_itr = iterator_create(groups);
c01079a3:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c01079a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01079ac:	89 54 24 04          	mov    %edx,0x4(%esp)
c01079b0:	89 04 24             	mov    %eax,(%esp)
c01079b3:	e8 8f ae ff ff       	call   c0102847 <iterator_create>
c01079b8:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c01079bb:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c01079c0:	89 04 24             	mov    %eax,(%esp)
c01079c3:	e8 59 ae ff ff       	call   c0102821 <list_lock>
    while(!list_is_last(&grps_itr))
c01079c8:	e9 dc 00 00 00       	jmp    c0107aa9 <remove_group+0x10c>
    {
        if(((group_t *)list_get_current(&grps_itr)) == group)
c01079cd:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01079d0:	89 04 24             	mov    %eax,(%esp)
c01079d3:	e8 38 af ff ff       	call   c0102910 <list_get_current>
c01079d8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01079db:	0f 85 bd 00 00 00    	jne    c0107a9e <remove_group+0x101>
        {
            group_t *grp = ((group_t *)list_get_current(&grps_itr));
c01079e1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01079e4:	89 04 24             	mov    %eax,(%esp)
c01079e7:	e8 24 af ff ff       	call   c0102910 <list_get_current>
c01079ec:	89 45 f4             	mov    %eax,-0xc(%ebp)

            iterator_t user_itr = iterator_create(grp->users);
c01079ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079f2:	8b 50 08             	mov    0x8(%eax),%edx
c01079f5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01079f8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01079fc:	89 04 24             	mov    %eax,(%esp)
c01079ff:	e8 43 ae ff ff       	call   c0102847 <iterator_create>
c0107a04:	83 ec 04             	sub    $0x4,%esp
            list_lock(grp->users);
c0107a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a0a:	8b 40 08             	mov    0x8(%eax),%eax
c0107a0d:	89 04 24             	mov    %eax,(%esp)
c0107a10:	e8 0c ae ff ff       	call   c0102821 <list_lock>
            while(!list_is_last(&user_itr))
c0107a15:	eb 25                	jmp    c0107a3c <remove_group+0x9f>
            {
                remove_user_from_group_lockfree((user_t *)list_get_current(&user_itr), grp);
c0107a17:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0107a1a:	89 04 24             	mov    %eax,(%esp)
c0107a1d:	e8 ee ae ff ff       	call   c0102910 <list_get_current>
c0107a22:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107a25:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107a29:	89 04 24             	mov    %eax,(%esp)
c0107a2c:	e8 7a 02 00 00       	call   c0107cab <remove_user_from_group_lockfree>

                list_next(&user_itr);
c0107a31:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0107a34:	89 04 24             	mov    %eax,(%esp)
c0107a37:	e8 f9 ae ff ff       	call   c0102935 <list_next>
        {
            group_t *grp = ((group_t *)list_get_current(&grps_itr));

            iterator_t user_itr = iterator_create(grp->users);
            list_lock(grp->users);
            while(!list_is_last(&user_itr))
c0107a3c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0107a3f:	89 04 24             	mov    %eax,(%esp)
c0107a42:	e8 15 af ff ff       	call   c010295c <list_is_last>
c0107a47:	85 c0                	test   %eax,%eax
c0107a49:	74 cc                	je     c0107a17 <remove_group+0x7a>
            {
                remove_user_from_group_lockfree((user_t *)list_get_current(&user_itr), grp);

                list_next(&user_itr);
            }
            list_unlock(grp->users);
c0107a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a4e:	8b 40 08             	mov    0x8(%eax),%eax
c0107a51:	89 04 24             	mov    %eax,(%esp)
c0107a54:	e8 db ad ff ff       	call   c0102834 <list_unlock>

            free(grp->name);
c0107a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a5c:	8b 00                	mov    (%eax),%eax
c0107a5e:	89 04 24             	mov    %eax,(%esp)
c0107a61:	e8 1d 5d 00 00       	call   c010d783 <free>
            list_destroy(grp->users);
c0107a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a69:	8b 40 08             	mov    0x8(%eax),%eax
c0107a6c:	89 04 24             	mov    %eax,(%esp)
c0107a6f:	e8 62 ab ff ff       	call   c01025d6 <list_destroy>
            free(grp);
c0107a74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a77:	89 04 24             	mov    %eax,(%esp)
c0107a7a:	e8 04 5d 00 00       	call   c010d783 <free>

            list_remove(&grps_itr);
c0107a7f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107a82:	89 04 24             	mov    %eax,(%esp)
c0107a85:	e8 18 af ff ff       	call   c01029a2 <list_remove>
            list_unlock(groups);
c0107a8a:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107a8f:	89 04 24             	mov    %eax,(%esp)
c0107a92:	e8 9d ad ff ff       	call   c0102834 <list_unlock>
            return SUCCESS;
c0107a97:	b8 00 00 00 00       	mov    $0x0,%eax
c0107a9c:	eb 30                	jmp    c0107ace <remove_group+0x131>
        }

        list_next(&grps_itr);
c0107a9e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107aa1:	89 04 24             	mov    %eax,(%esp)
c0107aa4:	e8 8c ae ff ff       	call   c0102935 <list_next>

int remove_group(group_t *group)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);
    while(!list_is_last(&grps_itr))
c0107aa9:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0107aac:	89 04 24             	mov    %eax,(%esp)
c0107aaf:	e8 a8 ae ff ff       	call   c010295c <list_is_last>
c0107ab4:	85 c0                	test   %eax,%eax
c0107ab6:	0f 84 11 ff ff ff    	je     c01079cd <remove_group+0x30>
            return SUCCESS;
        }

        list_next(&grps_itr);
    }
    list_unlock(groups);
c0107abc:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107ac1:	89 04 24             	mov    %eax,(%esp)
c0107ac4:	e8 6b ad ff ff       	call   c0102834 <list_unlock>
    return FAILTURE;
c0107ac9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0107ace:	c9                   	leave  
c0107acf:	c3                   	ret    

c0107ad0 <get_group_by_id>:

group_t *get_group_by_id(gid_t id)
{
c0107ad0:	55                   	push   %ebp
c0107ad1:	89 e5                	mov    %esp,%ebp
c0107ad3:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(groups);
c0107ad6:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c0107adc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107adf:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107ae3:	89 04 24             	mov    %eax,(%esp)
c0107ae6:	e8 5c ad ff ff       	call   c0102847 <iterator_create>
c0107aeb:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c0107aee:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107af3:	89 04 24             	mov    %eax,(%esp)
c0107af6:	e8 26 ad ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&grps_itr))
c0107afb:	eb 38                	jmp    c0107b35 <get_group_by_id+0x65>
    {
        if(((group_t *)list_get_current(&grps_itr))->id == id)
c0107afd:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b00:	89 04 24             	mov    %eax,(%esp)
c0107b03:	e8 08 ae ff ff       	call   c0102910 <list_get_current>
c0107b08:	8b 40 04             	mov    0x4(%eax),%eax
c0107b0b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107b0e:	75 1a                	jne    c0107b2a <get_group_by_id+0x5a>
        {
            list_unlock(groups);
c0107b10:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107b15:	89 04 24             	mov    %eax,(%esp)
c0107b18:	e8 17 ad ff ff       	call   c0102834 <list_unlock>
            return ((group_t *)list_get_current(&grps_itr));
c0107b1d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b20:	89 04 24             	mov    %eax,(%esp)
c0107b23:	e8 e8 ad ff ff       	call   c0102910 <list_get_current>
c0107b28:	eb 2c                	jmp    c0107b56 <get_group_by_id+0x86>
        }

        list_next(&grps_itr);
c0107b2a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b2d:	89 04 24             	mov    %eax,(%esp)
c0107b30:	e8 00 ae ff ff       	call   c0102935 <list_next>
group_t *get_group_by_id(gid_t id)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);

    while(!list_is_last(&grps_itr))
c0107b35:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b38:	89 04 24             	mov    %eax,(%esp)
c0107b3b:	e8 1c ae ff ff       	call   c010295c <list_is_last>
c0107b40:	85 c0                	test   %eax,%eax
c0107b42:	74 b9                	je     c0107afd <get_group_by_id+0x2d>
        }

        list_next(&grps_itr);
    }

    list_unlock(groups);
c0107b44:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107b49:	89 04 24             	mov    %eax,(%esp)
c0107b4c:	e8 e3 ac ff ff       	call   c0102834 <list_unlock>

    return NULL;
c0107b51:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b56:	c9                   	leave  
c0107b57:	c3                   	ret    

c0107b58 <get_group_by_name>:

group_t *get_group_by_name(const char *gname)
{
c0107b58:	55                   	push   %ebp
c0107b59:	89 e5                	mov    %esp,%ebp
c0107b5b:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(groups);
c0107b5e:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c0107b64:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b67:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107b6b:	89 04 24             	mov    %eax,(%esp)
c0107b6e:	e8 d4 ac ff ff       	call   c0102847 <iterator_create>
c0107b73:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c0107b76:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107b7b:	89 04 24             	mov    %eax,(%esp)
c0107b7e:	e8 9e ac ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&grps_itr))
c0107b83:	eb 45                	jmp    c0107bca <get_group_by_name+0x72>
    {
        if(strcmp(((group_t *)list_get_current(&grps_itr))->name, gname) == 0)
c0107b85:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107b88:	89 04 24             	mov    %eax,(%esp)
c0107b8b:	e8 80 ad ff ff       	call   c0102910 <list_get_current>
c0107b90:	8b 00                	mov    (%eax),%eax
c0107b92:	8b 55 08             	mov    0x8(%ebp),%edx
c0107b95:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107b99:	89 04 24             	mov    %eax,(%esp)
c0107b9c:	e8 cc af ff ff       	call   c0102b6d <strcmp>
c0107ba1:	85 c0                	test   %eax,%eax
c0107ba3:	75 1a                	jne    c0107bbf <get_group_by_name+0x67>
        {
            list_unlock(groups);
c0107ba5:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107baa:	89 04 24             	mov    %eax,(%esp)
c0107bad:	e8 82 ac ff ff       	call   c0102834 <list_unlock>
            return ((group_t *)list_get_current(&grps_itr));
c0107bb2:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107bb5:	89 04 24             	mov    %eax,(%esp)
c0107bb8:	e8 53 ad ff ff       	call   c0102910 <list_get_current>
c0107bbd:	eb 2c                	jmp    c0107beb <get_group_by_name+0x93>
        }

        list_next(&grps_itr);
c0107bbf:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107bc2:	89 04 24             	mov    %eax,(%esp)
c0107bc5:	e8 6b ad ff ff       	call   c0102935 <list_next>
group_t *get_group_by_name(const char *gname)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);

    while(!list_is_last(&grps_itr))
c0107bca:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107bcd:	89 04 24             	mov    %eax,(%esp)
c0107bd0:	e8 87 ad ff ff       	call   c010295c <list_is_last>
c0107bd5:	85 c0                	test   %eax,%eax
c0107bd7:	74 ac                	je     c0107b85 <get_group_by_name+0x2d>
        }

        list_next(&grps_itr);
    }

    list_unlock(groups);
c0107bd9:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107bde:	89 04 24             	mov    %eax,(%esp)
c0107be1:	e8 4e ac ff ff       	call   c0102834 <list_unlock>

    return NULL;
c0107be6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107beb:	c9                   	leave  
c0107bec:	c3                   	ret    

c0107bed <add_user_to_group>:

int add_user_to_group(user_t *user, group_t *group)
{
c0107bed:	55                   	push   %ebp
c0107bee:	89 e5                	mov    %esp,%ebp
c0107bf0:	83 ec 18             	sub    $0x18,%esp
    if(user == NULL || group == NULL)
c0107bf3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107bf7:	74 06                	je     c0107bff <add_user_to_group+0x12>
c0107bf9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107bfd:	75 07                	jne    c0107c06 <add_user_to_group+0x19>
        return FAILTURE;
c0107bff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0107c04:	eb 67                	jmp    c0107c6d <add_user_to_group+0x80>

    list_lock(user->grps);
c0107c06:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c09:	8b 40 10             	mov    0x10(%eax),%eax
c0107c0c:	89 04 24             	mov    %eax,(%esp)
c0107c0f:	e8 0d ac ff ff       	call   c0102821 <list_lock>
    list_push_back(user->grps, group);
c0107c14:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c17:	8b 40 10             	mov    0x10(%eax),%eax
c0107c1a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107c1d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107c21:	89 04 24             	mov    %eax,(%esp)
c0107c24:	e8 39 aa ff ff       	call   c0102662 <list_push_back>
    list_unlock(user->grps);
c0107c29:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c2c:	8b 40 10             	mov    0x10(%eax),%eax
c0107c2f:	89 04 24             	mov    %eax,(%esp)
c0107c32:	e8 fd ab ff ff       	call   c0102834 <list_unlock>

    list_lock(group->users);
c0107c37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c3a:	8b 40 08             	mov    0x8(%eax),%eax
c0107c3d:	89 04 24             	mov    %eax,(%esp)
c0107c40:	e8 dc ab ff ff       	call   c0102821 <list_lock>
    list_push_back(group->users, user);
c0107c45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c48:	8b 40 08             	mov    0x8(%eax),%eax
c0107c4b:	8b 55 08             	mov    0x8(%ebp),%edx
c0107c4e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107c52:	89 04 24             	mov    %eax,(%esp)
c0107c55:	e8 08 aa ff ff       	call   c0102662 <list_push_back>
    list_unlock(group->users);
c0107c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c5d:	8b 40 08             	mov    0x8(%eax),%eax
c0107c60:	89 04 24             	mov    %eax,(%esp)
c0107c63:	e8 cc ab ff ff       	call   c0102834 <list_unlock>

    return SUCCESS;
c0107c68:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c6d:	c9                   	leave  
c0107c6e:	c3                   	ret    

c0107c6f <remove_user_from_group>:

int remove_user_from_group(user_t *user, group_t *group)
{
c0107c6f:	55                   	push   %ebp
c0107c70:	89 e5                	mov    %esp,%ebp
c0107c72:	83 ec 28             	sub    $0x28,%esp
    list_lock(group->users);
c0107c75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c78:	8b 40 08             	mov    0x8(%eax),%eax
c0107c7b:	89 04 24             	mov    %eax,(%esp)
c0107c7e:	e8 9e ab ff ff       	call   c0102821 <list_lock>
    int result = remove_user_from_group_lockfree(user, group);
c0107c83:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c86:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107c8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c8d:	89 04 24             	mov    %eax,(%esp)
c0107c90:	e8 16 00 00 00       	call   c0107cab <remove_user_from_group_lockfree>
c0107c95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_unlock(group->users);
c0107c98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c9b:	8b 40 08             	mov    0x8(%eax),%eax
c0107c9e:	89 04 24             	mov    %eax,(%esp)
c0107ca1:	e8 8e ab ff ff       	call   c0102834 <list_unlock>

    return result;
c0107ca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107ca9:	c9                   	leave  
c0107caa:	c3                   	ret    

c0107cab <remove_user_from_group_lockfree>:

int remove_user_from_group_lockfree(user_t *user, group_t *group)
{
c0107cab:	55                   	push   %ebp
c0107cac:	89 e5                	mov    %esp,%ebp
c0107cae:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(user->grps);
c0107cb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107cb4:	8b 50 10             	mov    0x10(%eax),%edx
c0107cb7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107cba:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107cbe:	89 04 24             	mov    %eax,(%esp)
c0107cc1:	e8 81 ab ff ff       	call   c0102847 <iterator_create>
c0107cc6:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_last(&grps_itr))
c0107cc9:	eb 28                	jmp    c0107cf3 <remove_user_from_group_lockfree+0x48>
    {
        if((group_t *)list_get_current(&grps_itr) == group)
c0107ccb:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107cce:	89 04 24             	mov    %eax,(%esp)
c0107cd1:	e8 3a ac ff ff       	call   c0102910 <list_get_current>
c0107cd6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107cd9:	75 0d                	jne    c0107ce8 <remove_user_from_group_lockfree+0x3d>
        {
            list_remove(&grps_itr);
c0107cdb:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107cde:	89 04 24             	mov    %eax,(%esp)
c0107ce1:	e8 bc ac ff ff       	call   c01029a2 <list_remove>
            break;
c0107ce6:	eb 1a                	jmp    c0107d02 <remove_user_from_group_lockfree+0x57>
        }

        list_next(&grps_itr);
c0107ce8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107ceb:	89 04 24             	mov    %eax,(%esp)
c0107cee:	e8 42 ac ff ff       	call   c0102935 <list_next>

int remove_user_from_group_lockfree(user_t *user, group_t *group)
{
    iterator_t grps_itr = iterator_create(user->grps);

    while(!list_is_last(&grps_itr))
c0107cf3:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107cf6:	89 04 24             	mov    %eax,(%esp)
c0107cf9:	e8 5e ac ff ff       	call   c010295c <list_is_last>
c0107cfe:	85 c0                	test   %eax,%eax
c0107d00:	74 c9                	je     c0107ccb <remove_user_from_group_lockfree+0x20>
        }

        list_next(&grps_itr);
    }

    iterator_t user_itr = iterator_create(group->users);
c0107d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d05:	8b 50 08             	mov    0x8(%eax),%edx
c0107d08:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d0b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107d0f:	89 04 24             	mov    %eax,(%esp)
c0107d12:	e8 30 ab ff ff       	call   c0102847 <iterator_create>
c0107d17:	83 ec 04             	sub    $0x4,%esp

    while(!list_is_last(&user_itr))
c0107d1a:	eb 2d                	jmp    c0107d49 <remove_user_from_group_lockfree+0x9e>
    {
        if((user_t *)list_get_current(&user_itr) == user)
c0107d1c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d1f:	89 04 24             	mov    %eax,(%esp)
c0107d22:	e8 e9 ab ff ff       	call   c0102910 <list_get_current>
c0107d27:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107d2a:	75 12                	jne    c0107d3e <remove_user_from_group_lockfree+0x93>
        {
            list_remove(&user_itr);
c0107d2c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d2f:	89 04 24             	mov    %eax,(%esp)
c0107d32:	e8 6b ac ff ff       	call   c01029a2 <list_remove>
            return SUCCESS;
c0107d37:	b8 00 00 00 00       	mov    $0x0,%eax
c0107d3c:	eb 1f                	jmp    c0107d5d <remove_user_from_group_lockfree+0xb2>
        }

        list_next(&user_itr);
c0107d3e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d41:	89 04 24             	mov    %eax,(%esp)
c0107d44:	e8 ec ab ff ff       	call   c0102935 <list_next>
        list_next(&grps_itr);
    }

    iterator_t user_itr = iterator_create(group->users);

    while(!list_is_last(&user_itr))
c0107d49:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0107d4c:	89 04 24             	mov    %eax,(%esp)
c0107d4f:	e8 08 ac ff ff       	call   c010295c <list_is_last>
c0107d54:	85 c0                	test   %eax,%eax
c0107d56:	74 c4                	je     c0107d1c <remove_user_from_group_lockfree+0x71>
        }

        list_next(&user_itr);
    }

    return FAILTURE;
c0107d58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0107d5d:	c9                   	leave  
c0107d5e:	c3                   	ret    

c0107d5f <group_id_exists>:

int group_id_exists(gid_t id)
{
c0107d5f:	55                   	push   %ebp
c0107d60:	89 e5                	mov    %esp,%ebp
c0107d62:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(groups);
c0107d65:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c0107d6b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107d6e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107d72:	89 04 24             	mov    %eax,(%esp)
c0107d75:	e8 cd aa ff ff       	call   c0102847 <iterator_create>
c0107d7a:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c0107d7d:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107d82:	89 04 24             	mov    %eax,(%esp)
c0107d85:	e8 97 aa ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&grps_itr))
c0107d8a:	eb 32                	jmp    c0107dbe <group_id_exists+0x5f>
    {
        if(((group_t *)list_get_current(&grps_itr))->id == id)
c0107d8c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107d8f:	89 04 24             	mov    %eax,(%esp)
c0107d92:	e8 79 ab ff ff       	call   c0102910 <list_get_current>
c0107d97:	8b 40 04             	mov    0x4(%eax),%eax
c0107d9a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107d9d:	75 14                	jne    c0107db3 <group_id_exists+0x54>
        {
            list_unlock(groups);
c0107d9f:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107da4:	89 04 24             	mov    %eax,(%esp)
c0107da7:	e8 88 aa ff ff       	call   c0102834 <list_unlock>
            return YES;
c0107dac:	b8 01 00 00 00       	mov    $0x1,%eax
c0107db1:	eb 2c                	jmp    c0107ddf <group_id_exists+0x80>
        }

        list_next(&grps_itr);
c0107db3:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107db6:	89 04 24             	mov    %eax,(%esp)
c0107db9:	e8 77 ab ff ff       	call   c0102935 <list_next>
int group_id_exists(gid_t id)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);

    while(!list_is_last(&grps_itr))
c0107dbe:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107dc1:	89 04 24             	mov    %eax,(%esp)
c0107dc4:	e8 93 ab ff ff       	call   c010295c <list_is_last>
c0107dc9:	85 c0                	test   %eax,%eax
c0107dcb:	74 bf                	je     c0107d8c <group_id_exists+0x2d>
        }

        list_next(&grps_itr);
    }

    list_unlock(groups);
c0107dcd:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107dd2:	89 04 24             	mov    %eax,(%esp)
c0107dd5:	e8 5a aa ff ff       	call   c0102834 <list_unlock>

    return NO;
c0107dda:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ddf:	c9                   	leave  
c0107de0:	c3                   	ret    

c0107de1 <user_id_exists>:

int user_id_exists(uid_t id)
{
c0107de1:	55                   	push   %ebp
c0107de2:	89 e5                	mov    %esp,%ebp
c0107de4:	83 ec 28             	sub    $0x28,%esp
    iterator_t user_itr = iterator_create(users);
c0107de7:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c0107ded:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107df0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107df4:	89 04 24             	mov    %eax,(%esp)
c0107df7:	e8 4b aa ff ff       	call   c0102847 <iterator_create>
c0107dfc:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c0107dff:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107e04:	89 04 24             	mov    %eax,(%esp)
c0107e07:	e8 15 aa ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&user_itr))
c0107e0c:	eb 32                	jmp    c0107e40 <user_id_exists+0x5f>
    {
        if(((user_t *)list_get_current(&user_itr))->id == id)
c0107e0e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e11:	89 04 24             	mov    %eax,(%esp)
c0107e14:	e8 f7 aa ff ff       	call   c0102910 <list_get_current>
c0107e19:	8b 40 0c             	mov    0xc(%eax),%eax
c0107e1c:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107e1f:	75 14                	jne    c0107e35 <user_id_exists+0x54>
        {
            list_unlock(users);
c0107e21:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107e26:	89 04 24             	mov    %eax,(%esp)
c0107e29:	e8 06 aa ff ff       	call   c0102834 <list_unlock>
            return YES;
c0107e2e:	b8 01 00 00 00       	mov    $0x1,%eax
c0107e33:	eb 2c                	jmp    c0107e61 <user_id_exists+0x80>
        }

        list_next(&user_itr);
c0107e35:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e38:	89 04 24             	mov    %eax,(%esp)
c0107e3b:	e8 f5 aa ff ff       	call   c0102935 <list_next>
int user_id_exists(uid_t id)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);

    while(!list_is_last(&user_itr))
c0107e40:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e43:	89 04 24             	mov    %eax,(%esp)
c0107e46:	e8 11 ab ff ff       	call   c010295c <list_is_last>
c0107e4b:	85 c0                	test   %eax,%eax
c0107e4d:	74 bf                	je     c0107e0e <user_id_exists+0x2d>
        }

        list_next(&user_itr);
    }

    list_unlock(users);
c0107e4f:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107e54:	89 04 24             	mov    %eax,(%esp)
c0107e57:	e8 d8 a9 ff ff       	call   c0102834 <list_unlock>

    return NO;
c0107e5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e61:	c9                   	leave  
c0107e62:	c3                   	ret    

c0107e63 <group_name_exists>:

int group_name_exists(const char *name)
{
c0107e63:	55                   	push   %ebp
c0107e64:	89 e5                	mov    %esp,%ebp
c0107e66:	83 ec 28             	sub    $0x28,%esp
    iterator_t grps_itr = iterator_create(groups);
c0107e69:	8b 15 1c a0 11 c0    	mov    0xc011a01c,%edx
c0107e6f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e72:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107e76:	89 04 24             	mov    %eax,(%esp)
c0107e79:	e8 c9 a9 ff ff       	call   c0102847 <iterator_create>
c0107e7e:	83 ec 04             	sub    $0x4,%esp
    list_lock(groups);
c0107e81:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107e86:	89 04 24             	mov    %eax,(%esp)
c0107e89:	e8 93 a9 ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&grps_itr))
c0107e8e:	eb 3f                	jmp    c0107ecf <group_name_exists+0x6c>
    {
        if(strcmp(((group_t *)list_get_current(&grps_itr))->name, name) == 0)
c0107e90:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107e93:	89 04 24             	mov    %eax,(%esp)
c0107e96:	e8 75 aa ff ff       	call   c0102910 <list_get_current>
c0107e9b:	8b 00                	mov    (%eax),%eax
c0107e9d:	8b 55 08             	mov    0x8(%ebp),%edx
c0107ea0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107ea4:	89 04 24             	mov    %eax,(%esp)
c0107ea7:	e8 c1 ac ff ff       	call   c0102b6d <strcmp>
c0107eac:	85 c0                	test   %eax,%eax
c0107eae:	75 14                	jne    c0107ec4 <group_name_exists+0x61>
        {
            list_unlock(groups);
c0107eb0:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107eb5:	89 04 24             	mov    %eax,(%esp)
c0107eb8:	e8 77 a9 ff ff       	call   c0102834 <list_unlock>
            return YES;
c0107ebd:	b8 01 00 00 00       	mov    $0x1,%eax
c0107ec2:	eb 2c                	jmp    c0107ef0 <group_name_exists+0x8d>
        }

        list_next(&grps_itr);
c0107ec4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107ec7:	89 04 24             	mov    %eax,(%esp)
c0107eca:	e8 66 aa ff ff       	call   c0102935 <list_next>
int group_name_exists(const char *name)
{
    iterator_t grps_itr = iterator_create(groups);
    list_lock(groups);

    while(!list_is_last(&grps_itr))
c0107ecf:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107ed2:	89 04 24             	mov    %eax,(%esp)
c0107ed5:	e8 82 aa ff ff       	call   c010295c <list_is_last>
c0107eda:	85 c0                	test   %eax,%eax
c0107edc:	74 b2                	je     c0107e90 <group_name_exists+0x2d>
        }

        list_next(&grps_itr);
    }

    list_unlock(groups);
c0107ede:	a1 1c a0 11 c0       	mov    0xc011a01c,%eax
c0107ee3:	89 04 24             	mov    %eax,(%esp)
c0107ee6:	e8 49 a9 ff ff       	call   c0102834 <list_unlock>

    return NO;
c0107eeb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ef0:	c9                   	leave  
c0107ef1:	c3                   	ret    

c0107ef2 <user_name_exists>:

int user_name_exists(const char *name)
{
c0107ef2:	55                   	push   %ebp
c0107ef3:	89 e5                	mov    %esp,%ebp
c0107ef5:	83 ec 28             	sub    $0x28,%esp
    iterator_t user_itr = iterator_create(users);
c0107ef8:	8b 15 20 a0 11 c0    	mov    0xc011a020,%edx
c0107efe:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107f01:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107f05:	89 04 24             	mov    %eax,(%esp)
c0107f08:	e8 3a a9 ff ff       	call   c0102847 <iterator_create>
c0107f0d:	83 ec 04             	sub    $0x4,%esp
    list_lock(users);
c0107f10:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107f15:	89 04 24             	mov    %eax,(%esp)
c0107f18:	e8 04 a9 ff ff       	call   c0102821 <list_lock>

    while(!list_is_last(&user_itr))
c0107f1d:	eb 3f                	jmp    c0107f5e <user_name_exists+0x6c>
    {
        if(strcmp(((user_t *)list_get_current(&user_itr))->name, name) == 0)
c0107f1f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107f22:	89 04 24             	mov    %eax,(%esp)
c0107f25:	e8 e6 a9 ff ff       	call   c0102910 <list_get_current>
c0107f2a:	8b 00                	mov    (%eax),%eax
c0107f2c:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f2f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107f33:	89 04 24             	mov    %eax,(%esp)
c0107f36:	e8 32 ac ff ff       	call   c0102b6d <strcmp>
c0107f3b:	85 c0                	test   %eax,%eax
c0107f3d:	75 14                	jne    c0107f53 <user_name_exists+0x61>
        {
            list_unlock(users);
c0107f3f:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107f44:	89 04 24             	mov    %eax,(%esp)
c0107f47:	e8 e8 a8 ff ff       	call   c0102834 <list_unlock>
            return YES;
c0107f4c:	b8 01 00 00 00       	mov    $0x1,%eax
c0107f51:	eb 2c                	jmp    c0107f7f <user_name_exists+0x8d>
        }

        list_next(&user_itr);
c0107f53:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107f56:	89 04 24             	mov    %eax,(%esp)
c0107f59:	e8 d7 a9 ff ff       	call   c0102935 <list_next>
int user_name_exists(const char *name)
{
    iterator_t user_itr = iterator_create(users);
    list_lock(users);

    while(!list_is_last(&user_itr))
c0107f5e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0107f61:	89 04 24             	mov    %eax,(%esp)
c0107f64:	e8 f3 a9 ff ff       	call   c010295c <list_is_last>
c0107f69:	85 c0                	test   %eax,%eax
c0107f6b:	74 b2                	je     c0107f1f <user_name_exists+0x2d>
        }

        list_next(&user_itr);
    }

    list_unlock(users);
c0107f6d:	a1 20 a0 11 c0       	mov    0xc011a020,%eax
c0107f72:	89 04 24             	mov    %eax,(%esp)
c0107f75:	e8 ba a8 ff ff       	call   c0102834 <list_unlock>

    return NO;
c0107f7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f7f:	c9                   	leave  
c0107f80:	c3                   	ret    

c0107f81 <sys_getuid>:


void sys_getuid(struct cpu_state **cpu)
{
c0107f81:	55                   	push   %ebp
c0107f82:	89 e5                	mov    %esp,%ebp
    (*cpu)->CPU_ARG0 = current_thread->process->uid;
c0107f84:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f87:	8b 00                	mov    (%eax),%eax
c0107f89:	8b 15 0c a0 11 c0    	mov    0xc011a00c,%edx
c0107f8f:	8b 52 04             	mov    0x4(%edx),%edx
c0107f92:	8b 52 04             	mov    0x4(%edx),%edx
c0107f95:	89 50 28             	mov    %edx,0x28(%eax)
}
c0107f98:	5d                   	pop    %ebp
c0107f99:	c3                   	ret    

c0107f9a <sys_setuid>:

void sys_setuid(struct cpu_state **cpu)
{
c0107f9a:	55                   	push   %ebp
c0107f9b:	89 e5                	mov    %esp,%ebp
c0107f9d:	83 ec 28             	sub    $0x28,%esp
    if(user_id_exists((*cpu)->CPU_ARG1))
c0107fa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fa3:	8b 00                	mov    (%eax),%eax
c0107fa5:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107fa8:	89 04 24             	mov    %eax,(%esp)
c0107fab:	e8 31 fe ff ff       	call   c0107de1 <user_id_exists>
c0107fb0:	85 c0                	test   %eax,%eax
c0107fb2:	74 0e                	je     c0107fc2 <sys_setuid+0x28>
    {
        (*cpu)->CPU_ARG0 = -1;
c0107fb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fb7:	8b 00                	mov    (%eax),%eax
c0107fb9:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
        return;
c0107fc0:	eb 30                	jmp    c0107ff2 <sys_setuid+0x58>
    }

    user_t *user = get_user_by_id(current_thread->process->uid);
c0107fc2:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c0107fc7:	8b 40 04             	mov    0x4(%eax),%eax
c0107fca:	8b 40 04             	mov    0x4(%eax),%eax
c0107fcd:	89 04 24             	mov    %eax,(%esp)
c0107fd0:	e8 c7 f7 ff ff       	call   c010779c <get_user_by_id>
c0107fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    user->id = (*cpu)->CPU_ARG1;
c0107fd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fdb:	8b 00                	mov    (%eax),%eax
c0107fdd:	8b 50 1c             	mov    0x1c(%eax),%edx
c0107fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fe3:	89 50 0c             	mov    %edx,0xc(%eax)
    //todo: change the uids of each process and file in the home durectory
    (*cpu)->CPU_ARG0 = 1;
c0107fe6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fe9:	8b 00                	mov    (%eax),%eax
c0107feb:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
c0107ff2:	c9                   	leave  
c0107ff3:	c3                   	ret    

c0107ff4 <test_vfs>:
#define COUNT 10001
#define STEP (int)((float)COUNT/(float)10)
extern vfs_inode_t *root;

bool test_vfs()
{
c0107ff4:	55                   	push   %ebp
c0107ff5:	89 e5                	mov    %esp,%ebp
c0107ff7:	53                   	push   %ebx
c0107ff8:	81 ec 44 01 00 00    	sub    $0x144,%esp
    int i,j;
    char name[256];
    vfs_inode_t **inodes = malloc(sizeof(vfs_inode_t*) * COUNT);
c0107ffe:	c7 04 24 44 9c 00 00 	movl   $0x9c44,(%esp)
c0108005:	e8 92 56 00 00       	call   c010d69c <malloc>
c010800a:	89 45 e8             	mov    %eax,-0x18(%ebp)

    printf("creating %d inodes...\n", COUNT);
c010800d:	c7 44 24 04 11 27 00 	movl   $0x2711,0x4(%esp)
c0108014:	00 
c0108015:	c7 04 24 ba 18 11 c0 	movl   $0xc01118ba,(%esp)
c010801c:	e8 5c b1 ff ff       	call   c010317d <printf>
    for(i = 0; i < COUNT; i++)
c0108021:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108028:	e9 98 00 00 00       	jmp    c01080c5 <test_vfs+0xd1>
    {
        sprintf(name, "test_inode%d", i);
c010802d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108030:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108034:	c7 44 24 04 d1 18 11 	movl   $0xc01118d1,0x4(%esp)
c010803b:	c0 
c010803c:	8d 85 df fe ff ff    	lea    -0x121(%ebp),%eax
c0108042:	89 04 24             	mov    %eax,(%esp)
c0108045:	e8 a0 b1 ff ff       	call   c01031ea <sprintf>
        inodes[i] = vfs_create_inode(name, S_IRUSR | S_IWUSR, root, 0, 0);
c010804a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010804d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108054:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108057:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010805a:	a1 10 80 11 c0       	mov    0xc0118010,%eax
c010805f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0108066:	00 
c0108067:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010806e:	00 
c010806f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108073:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c010807a:	00 
c010807b:	8d 85 df fe ff ff    	lea    -0x121(%ebp),%eax
c0108081:	89 04 24             	mov    %eax,(%esp)
c0108084:	e8 76 d1 ff ff       	call   c01051ff <vfs_create_inode>
c0108089:	89 03                	mov    %eax,(%ebx)

        if((i % STEP) == 0)
c010808b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010808e:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c0108093:	89 c8                	mov    %ecx,%eax
c0108095:	f7 ea                	imul   %edx
c0108097:	c1 fa 06             	sar    $0x6,%edx
c010809a:	89 c8                	mov    %ecx,%eax
c010809c:	c1 f8 1f             	sar    $0x1f,%eax
c010809f:	89 d3                	mov    %edx,%ebx
c01080a1:	29 c3                	sub    %eax,%ebx
c01080a3:	89 d8                	mov    %ebx,%eax
c01080a5:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c01080ab:	89 ca                	mov    %ecx,%edx
c01080ad:	29 c2                	sub    %eax,%edx
c01080af:	89 d0                	mov    %edx,%eax
c01080b1:	85 c0                	test   %eax,%eax
c01080b3:	75 0c                	jne    c01080c1 <test_vfs+0xcd>
        {
            printf("=");
c01080b5:	c7 04 24 3d 00 00 00 	movl   $0x3d,(%esp)
c01080bc:	e8 8a 3a 00 00       	call   c010bb4b <putchar>
    int i,j;
    char name[256];
    vfs_inode_t **inodes = malloc(sizeof(vfs_inode_t*) * COUNT);

    printf("creating %d inodes...\n", COUNT);
    for(i = 0; i < COUNT; i++)
c01080c1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01080c5:	81 7d f4 10 27 00 00 	cmpl   $0x2710,-0xc(%ebp)
c01080cc:	0f 8e 5b ff ff ff    	jle    c010802d <test_vfs+0x39>
        if((i % STEP) == 0)
        {
            printf("=");
        }
    }
    printf("\n");
c01080d2:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01080d9:	e8 6d 3a 00 00       	call   c010bb4b <putchar>

    printf("writing a lot in them...\n");
c01080de:	c7 04 24 de 18 11 c0 	movl   $0xc01118de,(%esp)
c01080e5:	e8 c0 3b 00 00       	call   c010bcaa <puts>
    for(i = 0; i < COUNT; i++)
c01080ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01080f1:	e9 d4 00 00 00       	jmp    c01081ca <test_vfs+0x1d6>
    {
        char *buffer = malloc(10000);
c01080f6:	c7 04 24 10 27 00 00 	movl   $0x2710,(%esp)
c01080fd:	e8 9a 55 00 00       	call   c010d69c <malloc>
c0108102:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for(j = 0; j < 10000; j++)
c0108105:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010810c:	eb 3e                	jmp    c010814c <test_vfs+0x158>
        {
            buffer[j] = 'a' + j%25;
c010810e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108111:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108114:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c0108117:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010811a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010811f:	89 c8                	mov    %ecx,%eax
c0108121:	f7 ea                	imul   %edx
c0108123:	c1 fa 03             	sar    $0x3,%edx
c0108126:	89 c8                	mov    %ecx,%eax
c0108128:	c1 f8 1f             	sar    $0x1f,%eax
c010812b:	29 c2                	sub    %eax,%edx
c010812d:	89 d0                	mov    %edx,%eax
c010812f:	c1 e0 02             	shl    $0x2,%eax
c0108132:	01 d0                	add    %edx,%eax
c0108134:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010813b:	01 d0                	add    %edx,%eax
c010813d:	89 ca                	mov    %ecx,%edx
c010813f:	29 c2                	sub    %eax,%edx
c0108141:	89 d0                	mov    %edx,%eax
c0108143:	83 c0 61             	add    $0x61,%eax
c0108146:	88 03                	mov    %al,(%ebx)

    printf("writing a lot in them...\n");
    for(i = 0; i < COUNT; i++)
    {
        char *buffer = malloc(10000);
        for(j = 0; j < 10000; j++)
c0108148:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010814c:	81 7d f0 0f 27 00 00 	cmpl   $0x270f,-0x10(%ebp)
c0108153:	7e b9                	jle    c010810e <test_vfs+0x11a>
        {
            buffer[j] = 'a' + j%25;
        }

        vfs_write(inodes[i], 0, buffer, 10000);
c0108155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108158:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010815f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108162:	01 d0                	add    %edx,%eax
c0108164:	8b 00                	mov    (%eax),%eax
c0108166:	c7 44 24 0c 10 27 00 	movl   $0x2710,0xc(%esp)
c010816d:	00 
c010816e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108171:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108175:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010817c:	00 
c010817d:	89 04 24             	mov    %eax,(%esp)
c0108180:	e8 48 d2 ff ff       	call   c01053cd <vfs_write>

        free(buffer);
c0108185:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108188:	89 04 24             	mov    %eax,(%esp)
c010818b:	e8 f3 55 00 00       	call   c010d783 <free>

        if((i % STEP) == 0)
c0108190:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0108193:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c0108198:	89 c8                	mov    %ecx,%eax
c010819a:	f7 ea                	imul   %edx
c010819c:	c1 fa 06             	sar    $0x6,%edx
c010819f:	89 c8                	mov    %ecx,%eax
c01081a1:	c1 f8 1f             	sar    $0x1f,%eax
c01081a4:	89 d3                	mov    %edx,%ebx
c01081a6:	29 c3                	sub    %eax,%ebx
c01081a8:	89 d8                	mov    %ebx,%eax
c01081aa:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c01081b0:	89 ca                	mov    %ecx,%edx
c01081b2:	29 c2                	sub    %eax,%edx
c01081b4:	89 d0                	mov    %edx,%eax
c01081b6:	85 c0                	test   %eax,%eax
c01081b8:	75 0c                	jne    c01081c6 <test_vfs+0x1d2>
        {
            printf("=");
c01081ba:	c7 04 24 3d 00 00 00 	movl   $0x3d,(%esp)
c01081c1:	e8 85 39 00 00       	call   c010bb4b <putchar>
        }
    }
    printf("\n");

    printf("writing a lot in them...\n");
    for(i = 0; i < COUNT; i++)
c01081c6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01081ca:	81 7d f4 10 27 00 00 	cmpl   $0x2710,-0xc(%ebp)
c01081d1:	0f 8e 1f ff ff ff    	jle    c01080f6 <test_vfs+0x102>
        if((i % STEP) == 0)
        {
            printf("=");
        }
    }
    printf("\n");
c01081d7:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01081de:	e8 68 39 00 00       	call   c010bb4b <putchar>

    printf("read them out and check!\n");
c01081e3:	c7 04 24 f7 18 11 c0 	movl   $0xc01118f7,(%esp)
c01081ea:	e8 bb 3a 00 00       	call   c010bcaa <puts>
    int fails=0;
c01081ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for(i = 0; i < COUNT; i++)
c01081f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01081fd:	e9 f5 00 00 00       	jmp    c01082f7 <test_vfs+0x303>
    {
        char *buffer = malloc(10000);
c0108202:	c7 04 24 10 27 00 00 	movl   $0x2710,(%esp)
c0108209:	e8 8e 54 00 00       	call   c010d69c <malloc>
c010820e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        vfs_read(inodes[i], 0, buffer, 10000);
c0108211:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108214:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010821b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010821e:	01 d0                	add    %edx,%eax
c0108220:	8b 00                	mov    (%eax),%eax
c0108222:	c7 44 24 0c 10 27 00 	movl   $0x2710,0xc(%esp)
c0108229:	00 
c010822a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010822d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108231:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108238:	00 
c0108239:	89 04 24             	mov    %eax,(%esp)
c010823c:	e8 99 d3 ff ff       	call   c01055da <vfs_read>

        for(j = 0; j < 10000; j++)
c0108241:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0108248:	eb 5f                	jmp    c01082a9 <test_vfs+0x2b5>
        {
            char testchar = 'a' + j%25;
c010824a:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010824d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c0108252:	89 c8                	mov    %ecx,%eax
c0108254:	f7 ea                	imul   %edx
c0108256:	c1 fa 03             	sar    $0x3,%edx
c0108259:	89 c8                	mov    %ecx,%eax
c010825b:	c1 f8 1f             	sar    $0x1f,%eax
c010825e:	29 c2                	sub    %eax,%edx
c0108260:	89 d0                	mov    %edx,%eax
c0108262:	c1 e0 02             	shl    $0x2,%eax
c0108265:	01 d0                	add    %edx,%eax
c0108267:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010826e:	01 d0                	add    %edx,%eax
c0108270:	89 ca                	mov    %ecx,%edx
c0108272:	29 c2                	sub    %eax,%edx
c0108274:	89 d0                	mov    %edx,%eax
c0108276:	83 c0 61             	add    $0x61,%eax
c0108279:	88 45 df             	mov    %al,-0x21(%ebp)
            if(buffer[j] != testchar)
c010827c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010827f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108282:	01 d0                	add    %edx,%eax
c0108284:	0f b6 00             	movzbl (%eax),%eax
c0108287:	3a 45 df             	cmp    -0x21(%ebp),%al
c010828a:	74 19                	je     c01082a5 <test_vfs+0x2b1>
            {
                printf("failed at %d\n", j);
c010828c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010828f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108293:	c7 04 24 10 19 11 c0 	movl   $0xc0111910,(%esp)
c010829a:	e8 de ae ff ff       	call   c010317d <printf>
                fails ++;
c010829f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
                break;
c01082a3:	eb 0d                	jmp    c01082b2 <test_vfs+0x2be>
    for(i = 0; i < COUNT; i++)
    {
        char *buffer = malloc(10000);
        vfs_read(inodes[i], 0, buffer, 10000);

        for(j = 0; j < 10000; j++)
c01082a5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01082a9:	81 7d f0 0f 27 00 00 	cmpl   $0x270f,-0x10(%ebp)
c01082b0:	7e 98                	jle    c010824a <test_vfs+0x256>
                fails ++;
                break;
            }
        }

        free(buffer);
c01082b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01082b5:	89 04 24             	mov    %eax,(%esp)
c01082b8:	e8 c6 54 00 00       	call   c010d783 <free>

        if((i % STEP) == 0)
c01082bd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01082c0:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
c01082c5:	89 c8                	mov    %ecx,%eax
c01082c7:	f7 ea                	imul   %edx
c01082c9:	c1 fa 06             	sar    $0x6,%edx
c01082cc:	89 c8                	mov    %ecx,%eax
c01082ce:	c1 f8 1f             	sar    $0x1f,%eax
c01082d1:	89 d3                	mov    %edx,%ebx
c01082d3:	29 c3                	sub    %eax,%ebx
c01082d5:	89 d8                	mov    %ebx,%eax
c01082d7:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
c01082dd:	89 ca                	mov    %ecx,%edx
c01082df:	29 c2                	sub    %eax,%edx
c01082e1:	89 d0                	mov    %edx,%eax
c01082e3:	85 c0                	test   %eax,%eax
c01082e5:	75 0c                	jne    c01082f3 <test_vfs+0x2ff>
        {
            printf("=");
c01082e7:	c7 04 24 3d 00 00 00 	movl   $0x3d,(%esp)
c01082ee:	e8 58 38 00 00       	call   c010bb4b <putchar>
    }
    printf("\n");

    printf("read them out and check!\n");
    int fails=0;
    for(i = 0; i < COUNT; i++)
c01082f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01082f7:	81 7d f4 10 27 00 00 	cmpl   $0x2710,-0xc(%ebp)
c01082fe:	0f 8e fe fe ff ff    	jle    c0108202 <test_vfs+0x20e>
        if((i % STEP) == 0)
        {
            printf("=");
        }
    }
    printf("\n");
c0108304:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010830b:	e8 3b 38 00 00       	call   c010bb4b <putchar>

    printf("%d of %d inodes failed\n", fails, COUNT);
c0108310:	c7 44 24 08 11 27 00 	movl   $0x2711,0x8(%esp)
c0108317:	00 
c0108318:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010831b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010831f:	c7 04 24 1e 19 11 c0 	movl   $0xc011191e,(%esp)
c0108326:	e8 52 ae ff ff       	call   c010317d <printf>

    free(inodes);
c010832b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010832e:	89 04 24             	mov    %eax,(%esp)
c0108331:	e8 4d 54 00 00       	call   c010d783 <free>
    if(fails)
c0108336:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010833a:	74 07                	je     c0108343 <test_vfs+0x34f>
        return false;
c010833c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108341:	eb 05                	jmp    c0108348 <test_vfs+0x354>
    return true;
c0108343:	b8 01 00 00 00       	mov    $0x1,%eax
c0108348:	81 c4 44 01 00 00    	add    $0x144,%esp
c010834e:	5b                   	pop    %ebx
c010834f:	5d                   	pop    %ebp
c0108350:	c3                   	ret    

c0108351 <test_heap>:

#include <mm/heap.h>
#include <printf.h>

bool test_heap()
{
c0108351:	55                   	push   %ebp
c0108352:	89 e5                	mov    %esp,%ebp
c0108354:	83 ec 28             	sub    $0x28,%esp
    int i;
    printf("allocating array a with 5000 integers...\n");
c0108357:	c7 04 24 38 19 11 c0 	movl   $0xc0111938,(%esp)
c010835e:	e8 47 39 00 00       	call   c010bcaa <puts>
    int *a = malloc(sizeof(int) * 5000);
c0108363:	c7 04 24 20 4e 00 00 	movl   $0x4e20,(%esp)
c010836a:	e8 2d 53 00 00       	call   c010d69c <malloc>
c010836f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    printf("a is at 0x%p\nwriting to a...", a);
c0108372:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108375:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108379:	c7 04 24 61 19 11 c0 	movl   $0xc0111961,(%esp)
c0108380:	e8 f8 ad ff ff       	call   c010317d <printf>

    for(i = 0; i < 5000; i++) a[i] = i;
c0108385:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010838c:	eb 18                	jmp    c01083a6 <test_heap+0x55>
c010838e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108391:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108398:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010839b:	01 c2                	add    %eax,%edx
c010839d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083a0:	89 02                	mov    %eax,(%edx)
c01083a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01083a6:	81 7d f4 87 13 00 00 	cmpl   $0x1387,-0xc(%ebp)
c01083ad:	7e df                	jle    c010838e <test_heap+0x3d>

    printf("allocating array b with 25000 integers...\n");
c01083af:	c7 04 24 80 19 11 c0 	movl   $0xc0111980,(%esp)
c01083b6:	e8 ef 38 00 00       	call   c010bcaa <puts>
    int *b = malloc(sizeof(int) * 25000);
c01083bb:	c7 04 24 a0 86 01 00 	movl   $0x186a0,(%esp)
c01083c2:	e8 d5 52 00 00       	call   c010d69c <malloc>
c01083c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    printf("b is at 0x%p\nwriting to b...\n", b);
c01083ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083d1:	c7 04 24 aa 19 11 c0 	movl   $0xc01119aa,(%esp)
c01083d8:	e8 a0 ad ff ff       	call   c010317d <printf>
    for(i = 0; i < 25000; i++) b[i] = 25000-i;
c01083dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01083e4:	eb 1d                	jmp    c0108403 <test_heap+0xb2>
c01083e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01083f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083f3:	01 c2                	add    %eax,%edx
c01083f5:	b8 a8 61 00 00       	mov    $0x61a8,%eax
c01083fa:	2b 45 f4             	sub    -0xc(%ebp),%eax
c01083fd:	89 02                	mov    %eax,(%edx)
c01083ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108403:	81 7d f4 a7 61 00 00 	cmpl   $0x61a7,-0xc(%ebp)
c010840a:	7e da                	jle    c01083e6 <test_heap+0x95>

    printf("reallocating array a with 25000...\n");
c010840c:	c7 04 24 c8 19 11 c0 	movl   $0xc01119c8,(%esp)
c0108413:	e8 92 38 00 00       	call   c010bcaa <puts>
    a = realloc(a, sizeof(int) * 25000);
c0108418:	c7 44 24 04 a0 86 01 	movl   $0x186a0,0x4(%esp)
c010841f:	00 
c0108420:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108423:	89 04 24             	mov    %eax,(%esp)
c0108426:	e8 b0 53 00 00       	call   c010d7db <realloc>
c010842b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    printf("copying array b to array a...\n");
c010842e:	c7 04 24 eb 19 11 c0 	movl   $0xc01119eb,(%esp)
c0108435:	e8 70 38 00 00       	call   c010bcaa <puts>
    for(i = 0; i < 25000; i++) a[i] = b[i];
c010843a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108441:	eb 26                	jmp    c0108469 <test_heap+0x118>
c0108443:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108446:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010844d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108450:	01 c2                	add    %eax,%edx
c0108452:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108455:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c010845c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010845f:	01 c8                	add    %ecx,%eax
c0108461:	8b 00                	mov    (%eax),%eax
c0108463:	89 02                	mov    %eax,(%edx)
c0108465:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108469:	81 7d f4 a7 61 00 00 	cmpl   $0x61a7,-0xc(%ebp)
c0108470:	7e d1                	jle    c0108443 <test_heap+0xf2>

    printf("freeing b\n");
c0108472:	c7 04 24 09 1a 11 c0 	movl   $0xc0111a09,(%esp)
c0108479:	e8 2c 38 00 00       	call   c010bcaa <puts>
    free(b);
c010847e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108481:	89 04 24             	mov    %eax,(%esp)
c0108484:	e8 fa 52 00 00       	call   c010d783 <free>

    for(i = 0; i < 2500; i++) ;//printf("test : %d, %d\n", i, a[i]);
c0108489:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108490:	eb 04                	jmp    c0108496 <test_heap+0x145>
c0108492:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108496:	81 7d f4 c3 09 00 00 	cmpl   $0x9c3,-0xc(%ebp)
c010849d:	7e f3                	jle    c0108492 <test_heap+0x141>

    printf("freeing a\n");
c010849f:	c7 04 24 13 1a 11 c0 	movl   $0xc0111a13,(%esp)
c01084a6:	e8 ff 37 00 00       	call   c010bcaa <puts>
    free(a);
c01084ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084ae:	89 04 24             	mov    %eax,(%esp)
c01084b1:	e8 cd 52 00 00       	call   c010d783 <free>

    return true;
c01084b6:	b8 01 00 00 00       	mov    $0x1,%eax
c01084bb:	c9                   	leave  
c01084bc:	c3                   	ret    

c01084bd <test_list_create_destroy>:
 * @brief tests the create/destroy functions of the list module
 * @return 0 if success
 * @return 1 if failture
 */
int test_list_create_destroy()
{
c01084bd:	55                   	push   %ebp
c01084be:	89 e5                	mov    %esp,%ebp
c01084c0:	81 ec b8 01 00 00    	sub    $0x1b8,%esp
    list_t *firstList = NULL;
c01084c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    if((firstList = list_create()) == NULL)
c01084cd:	e8 ac a0 ff ff       	call   c010257e <list_create>
c01084d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01084d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01084d9:	75 16                	jne    c01084f1 <test_list_create_destroy+0x34>
    {
        printf("create/delete one list: failture\n");
c01084db:	c7 04 24 20 1a 11 c0 	movl   $0xc0111a20,(%esp)
c01084e2:	e8 c3 37 00 00       	call   c010bcaa <puts>
        return 1;
c01084e7:	b8 01 00 00 00       	mov    $0x1,%eax
c01084ec:	e9 80 00 00 00       	jmp    c0108571 <test_list_create_destroy+0xb4>
    }

    list_destroy(firstList);
c01084f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084f4:	89 04 24             	mov    %eax,(%esp)
c01084f7:	e8 da a0 ff ff       	call   c01025d6 <list_destroy>

    list_t *nextLists[CREATE_TEST_NUMBER];
    int i;

    for(i = 0; i < CREATE_TEST_NUMBER; i++)
c01084fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108503:	eb 3c                	jmp    c0108541 <test_list_create_destroy+0x84>
    {
        if((nextLists[i] = list_create()) == NULL)
c0108505:	e8 74 a0 ff ff       	call   c010257e <list_create>
c010850a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010850d:	89 84 95 60 fe ff ff 	mov    %eax,-0x1a0(%ebp,%edx,4)
c0108514:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108517:	8b 84 85 60 fe ff ff 	mov    -0x1a0(%ebp,%eax,4),%eax
c010851e:	85 c0                	test   %eax,%eax
c0108520:	75 1b                	jne    c010853d <test_list_create_destroy+0x80>
        {
            printf("create/delete %d lists: failture\n", CREATE_TEST_NUMBER);
c0108522:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0108529:	00 
c010852a:	c7 04 24 44 1a 11 c0 	movl   $0xc0111a44,(%esp)
c0108531:	e8 47 ac ff ff       	call   c010317d <printf>
            return 1;
c0108536:	b8 01 00 00 00       	mov    $0x1,%eax
c010853b:	eb 34                	jmp    c0108571 <test_list_create_destroy+0xb4>
    list_destroy(firstList);

    list_t *nextLists[CREATE_TEST_NUMBER];
    int i;

    for(i = 0; i < CREATE_TEST_NUMBER; i++)
c010853d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108541:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108545:	7e be                	jle    c0108505 <test_list_create_destroy+0x48>
            printf("create/delete %d lists: failture\n", CREATE_TEST_NUMBER);
            return 1;
        }
    }

    for(i = 0; i < CREATE_TEST_NUMBER; i++)
c0108547:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010854e:	eb 16                	jmp    c0108566 <test_list_create_destroy+0xa9>
        list_destroy(nextLists[i]);
c0108550:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108553:	8b 84 85 60 fe ff ff 	mov    -0x1a0(%ebp,%eax,4),%eax
c010855a:	89 04 24             	mov    %eax,(%esp)
c010855d:	e8 74 a0 ff ff       	call   c01025d6 <list_destroy>
            printf("create/delete %d lists: failture\n", CREATE_TEST_NUMBER);
            return 1;
        }
    }

    for(i = 0; i < CREATE_TEST_NUMBER; i++)
c0108562:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108566:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010856a:	7e e4                	jle    c0108550 <test_list_create_destroy+0x93>
        list_destroy(nextLists[i]);

    return 0;
c010856c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108571:	c9                   	leave  
c0108572:	c3                   	ret    

c0108573 <test_list_push_pop>:
 * @brief tests the push/pop functions of the list module
 * @return 0 if success
 * @return 1 if failture
 */
int test_list_push_pop()
{
c0108573:	55                   	push   %ebp
c0108574:	89 e5                	mov    %esp,%ebp
c0108576:	83 ec 48             	sub    $0x48,%esp
    list_t *testList = list_create();
c0108579:	e8 00 a0 ff ff       	call   c010257e <list_create>
c010857e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int a = 12345;
c0108581:	c7 45 e0 39 30 00 00 	movl   $0x3039,-0x20(%ebp)
    int b = 98765;
c0108588:	c7 45 dc cd 81 01 00 	movl   $0x181cd,-0x24(%ebp)
    int c = 54321;
c010858f:	c7 45 d8 31 d4 00 00 	movl   $0xd431,-0x28(%ebp)
    int d = 56789;
c0108596:	c7 45 d4 d5 dd 00 00 	movl   $0xddd5,-0x2c(%ebp)
    int *resa, *resb, *resc, *resd;

    list_push_front(testList, &b);
c010859d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01085a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085a7:	89 04 24             	mov    %eax,(%esp)
c01085aa:	e8 06 a1 ff ff       	call   c01026b5 <list_push_front>
    list_push_front(testList, &a);
c01085af:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01085b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085b9:	89 04 24             	mov    %eax,(%esp)
c01085bc:	e8 f4 a0 ff ff       	call   c01026b5 <list_push_front>
    list_push_back(testList, &c);
c01085c1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01085c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085cb:	89 04 24             	mov    %eax,(%esp)
c01085ce:	e8 8f a0 ff ff       	call   c0102662 <list_push_back>
    list_push_back(testList, &d);
c01085d3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01085d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085dd:	89 04 24             	mov    %eax,(%esp)
c01085e0:	e8 7d a0 ff ff       	call   c0102662 <list_push_back>

    resa = list_pop_front(testList);
c01085e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085e8:	89 04 24             	mov    %eax,(%esp)
c01085eb:	e8 95 a1 ff ff       	call   c0102785 <list_pop_front>
c01085f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    resb = list_pop_front(testList);
c01085f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085f6:	89 04 24             	mov    %eax,(%esp)
c01085f9:	e8 87 a1 ff ff       	call   c0102785 <list_pop_front>
c01085fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
    resd = list_pop_back(testList);
c0108601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108604:	89 04 24             	mov    %eax,(%esp)
c0108607:	e8 33 a1 ff ff       	call   c010273f <list_pop_back>
c010860c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    resc = list_pop_back(testList);
c010860f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108612:	89 04 24             	mov    %eax,(%esp)
c0108615:	e8 25 a1 ff ff       	call   c010273f <list_pop_back>
c010861a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if(*resa != a || *resb != b || *resc != c || *resd != d)
c010861d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108620:	8b 10                	mov    (%eax),%edx
c0108622:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108625:	39 c2                	cmp    %eax,%edx
c0108627:	75 24                	jne    c010864d <test_list_push_pop+0xda>
c0108629:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010862c:	8b 10                	mov    (%eax),%edx
c010862e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108631:	39 c2                	cmp    %eax,%edx
c0108633:	75 18                	jne    c010864d <test_list_push_pop+0xda>
c0108635:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108638:	8b 10                	mov    (%eax),%edx
c010863a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010863d:	39 c2                	cmp    %eax,%edx
c010863f:	75 0c                	jne    c010864d <test_list_push_pop+0xda>
c0108641:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108644:	8b 10                	mov    (%eax),%edx
c0108646:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108649:	39 c2                	cmp    %eax,%edx
c010864b:	74 13                	je     c0108660 <test_list_push_pop+0xed>
    {
        printf("list push and pop front and back: failture\n");
c010864d:	c7 04 24 68 1a 11 c0 	movl   $0xc0111a68,(%esp)
c0108654:	e8 51 36 00 00       	call   c010bcaa <puts>
        return 1;
c0108659:	b8 01 00 00 00       	mov    $0x1,%eax
c010865e:	eb 10                	jmp    c0108670 <test_list_push_pop+0xfd>
    }

    list_destroy(testList);
c0108660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108663:	89 04 24             	mov    %eax,(%esp)
c0108666:	e8 6b 9f ff ff       	call   c01025d6 <list_destroy>

    return 0;
c010866b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108670:	c9                   	leave  
c0108671:	c3                   	ret    

c0108672 <test_list_is_empty>:
 * @brief tests the is_empty function of the list module
 * @return 0 if success
 * @return 1 if failture
 */
int test_list_is_empty()
{
c0108672:	55                   	push   %ebp
c0108673:	89 e5                	mov    %esp,%ebp
c0108675:	83 ec 28             	sub    $0x28,%esp
    list_t *testList = list_create();
c0108678:	e8 01 9f ff ff       	call   c010257e <list_create>
c010867d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(!list_is_empty(testList))
c0108680:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108683:	89 04 24             	mov    %eax,(%esp)
c0108686:	e8 7b a1 ff ff       	call   c0102806 <list_is_empty>
c010868b:	85 c0                	test   %eax,%eax
c010868d:	75 13                	jne    c01086a2 <test_list_is_empty+0x30>
    {
        printf("list is empty: failture\n");
c010868f:	c7 04 24 93 1a 11 c0 	movl   $0xc0111a93,(%esp)
c0108696:	e8 0f 36 00 00       	call   c010bcaa <puts>
        return 1;
c010869b:	b8 01 00 00 00       	mov    $0x1,%eax
c01086a0:	eb 75                	jmp    c0108717 <test_list_is_empty+0xa5>
    }

    int i;

    for(i = 0; i < FILL_TEST_NUMBER; i++)
c01086a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01086a9:	eb 16                	jmp    c01086c1 <test_list_is_empty+0x4f>
        list_push_front(testList, testList);
c01086ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086b5:	89 04 24             	mov    %eax,(%esp)
c01086b8:	e8 f8 9f ff ff       	call   c01026b5 <list_push_front>
        return 1;
    }

    int i;

    for(i = 0; i < FILL_TEST_NUMBER; i++)
c01086bd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01086c1:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c01086c5:	7e e4                	jle    c01086ab <test_list_is_empty+0x39>
        list_push_front(testList, testList);

    for(i = 0; i < FILL_TEST_NUMBER; i++)
c01086c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01086ce:	eb 0f                	jmp    c01086df <test_list_is_empty+0x6d>
        list_pop_front(testList);
c01086d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086d3:	89 04 24             	mov    %eax,(%esp)
c01086d6:	e8 aa a0 ff ff       	call   c0102785 <list_pop_front>
    int i;

    for(i = 0; i < FILL_TEST_NUMBER; i++)
        list_push_front(testList, testList);

    for(i = 0; i < FILL_TEST_NUMBER; i++)
c01086db:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01086df:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
c01086e3:	7e eb                	jle    c01086d0 <test_list_is_empty+0x5e>
        list_pop_front(testList);

    if(!list_is_empty(testList))
c01086e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086e8:	89 04 24             	mov    %eax,(%esp)
c01086eb:	e8 16 a1 ff ff       	call   c0102806 <list_is_empty>
c01086f0:	85 c0                	test   %eax,%eax
c01086f2:	75 13                	jne    c0108707 <test_list_is_empty+0x95>
    {
        printf("list is empty: failture\n");
c01086f4:	c7 04 24 93 1a 11 c0 	movl   $0xc0111a93,(%esp)
c01086fb:	e8 aa 35 00 00       	call   c010bcaa <puts>
        return 1;
c0108700:	b8 01 00 00 00       	mov    $0x1,%eax
c0108705:	eb 10                	jmp    c0108717 <test_list_is_empty+0xa5>
    }

    list_destroy(testList);
c0108707:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010870a:	89 04 24             	mov    %eax,(%esp)
c010870d:	e8 c4 9e ff ff       	call   c01025d6 <list_destroy>

    return 0;
c0108712:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108717:	c9                   	leave  
c0108718:	c3                   	ret    

c0108719 <test_list_length>:
* @brief tests the length function of the list module
* @return 0 if success
* @return 1 if failture
*/
int test_list_length()
{
c0108719:	55                   	push   %ebp
c010871a:	89 e5                	mov    %esp,%ebp
c010871c:	83 ec 28             	sub    $0x28,%esp
    list_t *testList = list_create();
c010871f:	e8 5a 9e ff ff       	call   c010257e <list_create>
c0108724:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i;

    for(i = 0; i < SIZE_TEST_NUMBER; i++)
c0108727:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010872e:	eb 16                	jmp    c0108746 <test_list_length+0x2d>
        list_push_front(testList, testList);
c0108730:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108733:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108737:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010873a:	89 04 24             	mov    %eax,(%esp)
c010873d:	e8 73 9f ff ff       	call   c01026b5 <list_push_front>
{
    list_t *testList = list_create();

    int i;

    for(i = 0; i < SIZE_TEST_NUMBER; i++)
c0108742:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108746:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010874a:	7e e4                	jle    c0108730 <test_list_length+0x17>
        list_push_front(testList, testList);

    if(list_length(testList) != SIZE_TEST_NUMBER)
c010874c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010874f:	89 04 24             	mov    %eax,(%esp)
c0108752:	e8 73 a0 ff ff       	call   c01027ca <list_length>
c0108757:	83 f8 64             	cmp    $0x64,%eax
c010875a:	74 13                	je     c010876f <test_list_length+0x56>
    {
        printf("list length: failture\n");
c010875c:	c7 04 24 ab 1a 11 c0 	movl   $0xc0111aab,(%esp)
c0108763:	e8 42 35 00 00       	call   c010bcaa <puts>
        return 1;
c0108768:	b8 01 00 00 00       	mov    $0x1,%eax
c010876d:	eb 10                	jmp    c010877f <test_list_length+0x66>
    }

    list_destroy(testList);
c010876f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108772:	89 04 24             	mov    %eax,(%esp)
c0108775:	e8 5c 9e ff ff       	call   c01025d6 <list_destroy>

    return 0;
c010877a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010877f:	c9                   	leave  
c0108780:	c3                   	ret    

c0108781 <test_list>:
 * @brief tests the list module
 * @return 0 if success
 * @return 1 if failture
 */
int test_list()
{
c0108781:	55                   	push   %ebp
c0108782:	89 e5                	mov    %esp,%ebp
c0108784:	83 ec 18             	sub    $0x18,%esp
    if(test_list_create_destroy())
c0108787:	e8 31 fd ff ff       	call   c01084bd <test_list_create_destroy>
c010878c:	85 c0                	test   %eax,%eax
c010878e:	74 07                	je     c0108797 <test_list+0x16>
        return 1;
c0108790:	b8 01 00 00 00       	mov    $0x1,%eax
c0108795:	eb 41                	jmp    c01087d8 <test_list+0x57>

    if(test_list_push_pop())
c0108797:	e8 d7 fd ff ff       	call   c0108573 <test_list_push_pop>
c010879c:	85 c0                	test   %eax,%eax
c010879e:	74 07                	je     c01087a7 <test_list+0x26>
        return 1;
c01087a0:	b8 01 00 00 00       	mov    $0x1,%eax
c01087a5:	eb 31                	jmp    c01087d8 <test_list+0x57>

    if(test_list_is_empty())
c01087a7:	e8 c6 fe ff ff       	call   c0108672 <test_list_is_empty>
c01087ac:	85 c0                	test   %eax,%eax
c01087ae:	74 07                	je     c01087b7 <test_list+0x36>
        return 1;
c01087b0:	b8 01 00 00 00       	mov    $0x1,%eax
c01087b5:	eb 21                	jmp    c01087d8 <test_list+0x57>

    if(test_list_length())
c01087b7:	e8 5d ff ff ff       	call   c0108719 <test_list_length>
c01087bc:	85 c0                	test   %eax,%eax
c01087be:	74 07                	je     c01087c7 <test_list+0x46>
        return 1;
c01087c0:	b8 01 00 00 00       	mov    $0x1,%eax
c01087c5:	eb 11                	jmp    c01087d8 <test_list+0x57>

    printf("list test: all successful\n");
c01087c7:	c7 04 24 c1 1a 11 c0 	movl   $0xc0111ac1,(%esp)
c01087ce:	e8 d7 34 00 00       	call   c010bcaa <puts>

    return 0;
c01087d3:	b8 00 00 00 00       	mov    $0x0,%eax
c01087d8:	c9                   	leave  
c01087d9:	c3                   	ret    

c01087da <identify_os>:
extern struct process_state *kernel_state;



void identify_os(struct cpu_state **cpu)
{
c01087da:	55                   	push   %ebp
c01087db:	89 e5                	mov    %esp,%ebp
    (*cpu)->CPU_ARG0 = 'u' | ('n' << 8) | ('i' << 16) | (OS_VERSION << 24);
c01087dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01087e0:	8b 00                	mov    (%eax),%eax
c01087e2:	c7 40 28 75 6e 69 01 	movl   $0x1696e75,0x28(%eax)
};
c01087e9:	5d                   	pop    %ebp
c01087ea:	c3                   	ret    

c01087eb <linux_syscall_handler>:
    sys_getdents, NULL, NULL, NULL,
    /*FIXME: getcwd kommt weiter hinten (183)*/ sys_getcwd
};

void linux_syscall_handler(struct cpu_state **cpu)
{
c01087eb:	55                   	push   %ebp
c01087ec:	89 e5                	mov    %esp,%ebp
c01087ee:	83 ec 18             	sub    $0x18,%esp
    if( (*cpu)->CPU_ARG0 < DEFINED_LINUX_FUNCTIONS)
c01087f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01087f4:	8b 00                	mov    (%eax),%eax
c01087f6:	8b 40 28             	mov    0x28(%eax),%eax
c01087f9:	83 f8 3b             	cmp    $0x3b,%eax
c01087fc:	77 2a                	ja     c0108828 <linux_syscall_handler+0x3d>
    {
        if(linux_functions[(*cpu)->CPU_ARG0] != NULL)
c01087fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0108801:	8b 00                	mov    (%eax),%eax
c0108803:	8b 40 28             	mov    0x28(%eax),%eax
c0108806:	8b 04 85 a0 30 11 c0 	mov    -0x3feecf60(,%eax,4),%eax
c010880d:	85 c0                	test   %eax,%eax
c010880f:	74 17                	je     c0108828 <linux_syscall_handler+0x3d>
            linux_functions[(*cpu)->CPU_ARG0](cpu);
c0108811:	8b 45 08             	mov    0x8(%ebp),%eax
c0108814:	8b 00                	mov    (%eax),%eax
c0108816:	8b 40 28             	mov    0x28(%eax),%eax
c0108819:	8b 04 85 a0 30 11 c0 	mov    -0x3feecf60(,%eax,4),%eax
c0108820:	8b 55 08             	mov    0x8(%ebp),%edx
c0108823:	89 14 24             	mov    %edx,(%esp)
c0108826:	ff d0                	call   *%eax
    }
}
c0108828:	c9                   	leave  
c0108829:	c3                   	ret    

c010882a <universe_syscall_handler>:
    thread_exit,launch_thread,alloc_memory,identify_os,set_pipe_trigger
};


void universe_syscall_handler(struct cpu_state **cpu)
{
c010882a:	55                   	push   %ebp
c010882b:	89 e5                	mov    %esp,%ebp
c010882d:	83 ec 18             	sub    $0x18,%esp
    if( (*cpu)->CPU_ARG0 < DEFINED_UNIVERSE_FUNCTIONS)
c0108830:	8b 45 08             	mov    0x8(%ebp),%eax
c0108833:	8b 00                	mov    (%eax),%eax
c0108835:	8b 40 28             	mov    0x28(%eax),%eax
c0108838:	83 f8 04             	cmp    $0x4,%eax
c010883b:	77 2a                	ja     c0108867 <universe_syscall_handler+0x3d>
    {
        if(universe_functions[(*cpu)->CPU_ARG0] != NULL)
c010883d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108840:	8b 00                	mov    (%eax),%eax
c0108842:	8b 40 28             	mov    0x28(%eax),%eax
c0108845:	8b 04 85 7c 31 11 c0 	mov    -0x3feece84(,%eax,4),%eax
c010884c:	85 c0                	test   %eax,%eax
c010884e:	74 17                	je     c0108867 <universe_syscall_handler+0x3d>
            universe_functions[(*cpu)->CPU_ARG0](cpu);
c0108850:	8b 45 08             	mov    0x8(%ebp),%eax
c0108853:	8b 00                	mov    (%eax),%eax
c0108855:	8b 40 28             	mov    0x28(%eax),%eax
c0108858:	8b 04 85 7c 31 11 c0 	mov    -0x3feece84(,%eax,4),%eax
c010885f:	8b 55 08             	mov    0x8(%ebp),%edx
c0108862:	89 14 24             	mov    %edx,(%esp)
c0108865:	ff d0                	call   *%eax
    }
}
c0108867:	c9                   	leave  
c0108868:	c3                   	ret    

c0108869 <new_pckmgr>:
#include <udrcp/udrcp.h>



pckmgr *new_pckmgr(vfs_inode_t *in, vfs_inode_t *out, vfs_inode_t *err)
{
c0108869:	55                   	push   %ebp
c010886a:	89 e5                	mov    %esp,%ebp
c010886c:	83 ec 28             	sub    $0x28,%esp
    pckmgr *mgr = malloc(sizeof(pckmgr));
c010886f:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
c0108876:	e8 21 4e 00 00       	call   c010d69c <malloc>
c010887b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    mgr->counter = 0;
c010887e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108881:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    mgr->used_ids = list_create();
c0108887:	e8 f2 9c ff ff       	call   c010257e <list_create>
c010888c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010888f:	89 42 04             	mov    %eax,0x4(%edx)
    mgr->pset.stdin = in;
c0108892:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108895:	8b 55 08             	mov    0x8(%ebp),%edx
c0108898:	89 50 08             	mov    %edx,0x8(%eax)
    mgr->pset.stdout = out;
c010889b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010889e:	8b 55 0c             	mov    0xc(%ebp),%edx
c01088a1:	89 50 0c             	mov    %edx,0xc(%eax)
    mgr->pset.stderr = err;
c01088a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088a7:	8b 55 10             	mov    0x10(%ebp),%edx
c01088aa:	89 50 10             	mov    %edx,0x10(%eax)
    mgr->recieved_pcks = list_create();
c01088ad:	e8 cc 9c ff ff       	call   c010257e <list_create>
c01088b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01088b5:	89 42 1c             	mov    %eax,0x1c(%edx)
    mgr->stdout_seeker = out->length;
c01088b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01088bb:	8b 40 08             	mov    0x8(%eax),%eax
c01088be:	89 c2                	mov    %eax,%edx
c01088c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088c3:	89 50 14             	mov    %edx,0x14(%eax)
    mgr->stderr_seeker = err->length;
c01088c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01088c9:	8b 40 08             	mov    0x8(%eax),%eax
c01088cc:	89 c2                	mov    %eax,%edx
c01088ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088d1:	89 50 18             	mov    %edx,0x18(%eax)
    return mgr;
c01088d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01088d7:	c9                   	leave  
c01088d8:	c3                   	ret    

c01088d9 <reset_conn>:

void reset_conn(pckmgr *mgr)
{
c01088d9:	55                   	push   %ebp
c01088da:	89 e5                	mov    %esp,%ebp
c01088dc:	83 ec 18             	sub    $0x18,%esp
    mgr->counter = 0;
c01088df:	8b 45 08             	mov    0x8(%ebp),%eax
c01088e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    while(!list_is_empty(mgr->used_ids))
c01088e8:	eb 0e                	jmp    c01088f8 <reset_conn+0x1f>
        list_pop_front(mgr->used_ids);
c01088ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01088ed:	8b 40 04             	mov    0x4(%eax),%eax
c01088f0:	89 04 24             	mov    %eax,(%esp)
c01088f3:	e8 8d 9e ff ff       	call   c0102785 <list_pop_front>
}

void reset_conn(pckmgr *mgr)
{
    mgr->counter = 0;
    while(!list_is_empty(mgr->used_ids))
c01088f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01088fb:	8b 40 04             	mov    0x4(%eax),%eax
c01088fe:	89 04 24             	mov    %eax,(%esp)
c0108901:	e8 00 9f ff ff       	call   c0102806 <list_is_empty>
c0108906:	85 c0                	test   %eax,%eax
c0108908:	74 e0                	je     c01088ea <reset_conn+0x11>
        list_pop_front(mgr->used_ids);
    while(!list_is_empty(mgr->recieved_pcks))
c010890a:	eb 0e                	jmp    c010891a <reset_conn+0x41>
        list_pop_front(mgr->recieved_pcks);
c010890c:	8b 45 08             	mov    0x8(%ebp),%eax
c010890f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108912:	89 04 24             	mov    %eax,(%esp)
c0108915:	e8 6b 9e ff ff       	call   c0102785 <list_pop_front>
void reset_conn(pckmgr *mgr)
{
    mgr->counter = 0;
    while(!list_is_empty(mgr->used_ids))
        list_pop_front(mgr->used_ids);
    while(!list_is_empty(mgr->recieved_pcks))
c010891a:	8b 45 08             	mov    0x8(%ebp),%eax
c010891d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108920:	89 04 24             	mov    %eax,(%esp)
c0108923:	e8 de 9e ff ff       	call   c0102806 <list_is_empty>
c0108928:	85 c0                	test   %eax,%eax
c010892a:	74 e0                	je     c010890c <reset_conn+0x33>
        list_pop_front(mgr->recieved_pcks);
}
c010892c:	c9                   	leave  
c010892d:	c3                   	ret    

c010892e <gen_pckid>:


pckid_t gen_pckid(pckmgr *mgr)
{
c010892e:	55                   	push   %ebp
c010892f:	89 e5                	mov    %esp,%ebp
c0108931:	83 ec 28             	sub    $0x28,%esp
    iterator_t used_id_it = iterator_create(mgr->used_ids);
c0108934:	8b 45 08             	mov    0x8(%ebp),%eax
c0108937:	8b 50 04             	mov    0x4(%eax),%edx
c010893a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010893d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108941:	89 04 24             	mov    %eax,(%esp)
c0108944:	e8 fe 9e ff ff       	call   c0102847 <iterator_create>
c0108949:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(mgr->used_ids) && !list_is_last(&used_id_it))
c010894c:	eb 50                	jmp    c010899e <gen_pckid+0x70>
    {
        if((pckid_t)list_get_current(&used_id_it) == mgr->counter )
c010894e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108951:	89 04 24             	mov    %eax,(%esp)
c0108954:	e8 b7 9f ff ff       	call   c0102910 <list_get_current>
c0108959:	89 c2                	mov    %eax,%edx
c010895b:	8b 45 08             	mov    0x8(%ebp),%eax
c010895e:	8b 00                	mov    (%eax),%eax
c0108960:	39 c2                	cmp    %eax,%edx
c0108962:	75 2f                	jne    c0108993 <gen_pckid+0x65>
        {
            if(mgr->counter == MAX_ID)
c0108964:	8b 45 08             	mov    0x8(%ebp),%eax
c0108967:	8b 00                	mov    (%eax),%eax
c0108969:	83 f8 ff             	cmp    $0xffffffff,%eax
c010896c:	75 0b                	jne    c0108979 <gen_pckid+0x4b>
                mgr->counter = 0;
c010896e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108971:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0108977:	eb 0d                	jmp    c0108986 <gen_pckid+0x58>
            else
                mgr->counter++;
c0108979:	8b 45 08             	mov    0x8(%ebp),%eax
c010897c:	8b 00                	mov    (%eax),%eax
c010897e:	8d 50 01             	lea    0x1(%eax),%edx
c0108981:	8b 45 08             	mov    0x8(%ebp),%eax
c0108984:	89 10                	mov    %edx,(%eax)

            list_set_first(&used_id_it);
c0108986:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108989:	89 04 24             	mov    %eax,(%esp)
c010898c:	e8 e6 9f ff ff       	call   c0102977 <list_set_first>
c0108991:	eb 0b                	jmp    c010899e <gen_pckid+0x70>
        }
        else
            list_next(&used_id_it);
c0108993:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108996:	89 04 24             	mov    %eax,(%esp)
c0108999:	e8 97 9f ff ff       	call   c0102935 <list_next>


pckid_t gen_pckid(pckmgr *mgr)
{
    iterator_t used_id_it = iterator_create(mgr->used_ids);
    while(!list_is_empty(mgr->used_ids) && !list_is_last(&used_id_it))
c010899e:	8b 45 08             	mov    0x8(%ebp),%eax
c01089a1:	8b 40 04             	mov    0x4(%eax),%eax
c01089a4:	89 04 24             	mov    %eax,(%esp)
c01089a7:	e8 5a 9e ff ff       	call   c0102806 <list_is_empty>
c01089ac:	85 c0                	test   %eax,%eax
c01089ae:	75 0f                	jne    c01089bf <gen_pckid+0x91>
c01089b0:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01089b3:	89 04 24             	mov    %eax,(%esp)
c01089b6:	e8 a1 9f ff ff       	call   c010295c <list_is_last>
c01089bb:	85 c0                	test   %eax,%eax
c01089bd:	74 8f                	je     c010894e <gen_pckid+0x20>
            list_set_first(&used_id_it);
        }
        else
            list_next(&used_id_it);
    }
    list_push_front(mgr->used_ids,(void*)mgr->counter);
c01089bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01089c2:	8b 00                	mov    (%eax),%eax
c01089c4:	89 c2                	mov    %eax,%edx
c01089c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01089c9:	8b 40 04             	mov    0x4(%eax),%eax
c01089cc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01089d0:	89 04 24             	mov    %eax,(%esp)
c01089d3:	e8 dd 9c ff ff       	call   c01026b5 <list_push_front>
    return mgr->counter++;
c01089d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01089db:	8b 00                	mov    (%eax),%eax
c01089dd:	89 c2                	mov    %eax,%edx
c01089df:	8d 48 01             	lea    0x1(%eax),%ecx
c01089e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01089e5:	89 08                	mov    %ecx,(%eax)
c01089e7:	89 d0                	mov    %edx,%eax
}
c01089e9:	c9                   	leave  
c01089ea:	c3                   	ret    

c01089eb <free_pckid>:


bool free_pckid(pckmgr *mgr, pckid_t id)
{
c01089eb:	55                   	push   %ebp
c01089ec:	89 e5                	mov    %esp,%ebp
c01089ee:	83 ec 28             	sub    $0x28,%esp
    iterator_t used_id_it = iterator_create(mgr->used_ids);
c01089f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01089f4:	8b 50 04             	mov    0x4(%eax),%edx
c01089f7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01089fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01089fe:	89 04 24             	mov    %eax,(%esp)
c0108a01:	e8 41 9e ff ff       	call   c0102847 <iterator_create>
c0108a06:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(mgr->used_ids) && !list_is_last(&used_id_it))
c0108a09:	eb 2d                	jmp    c0108a38 <free_pckid+0x4d>
    {
        if((pckid_t)list_get_current(&used_id_it) == id )
c0108a0b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a0e:	89 04 24             	mov    %eax,(%esp)
c0108a11:	e8 fa 9e ff ff       	call   c0102910 <list_get_current>
c0108a16:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108a19:	75 12                	jne    c0108a2d <free_pckid+0x42>
        {
            list_remove(&used_id_it);
c0108a1b:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a1e:	89 04 24             	mov    %eax,(%esp)
c0108a21:	e8 7c 9f ff ff       	call   c01029a2 <list_remove>
            return true;
c0108a26:	b8 01 00 00 00       	mov    $0x1,%eax
c0108a2b:	eb 31                	jmp    c0108a5e <free_pckid+0x73>
        }
        else
            list_next(&used_id_it);
c0108a2d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a30:	89 04 24             	mov    %eax,(%esp)
c0108a33:	e8 fd 9e ff ff       	call   c0102935 <list_next>


bool free_pckid(pckmgr *mgr, pckid_t id)
{
    iterator_t used_id_it = iterator_create(mgr->used_ids);
    while(!list_is_empty(mgr->used_ids) && !list_is_last(&used_id_it))
c0108a38:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a3b:	8b 40 04             	mov    0x4(%eax),%eax
c0108a3e:	89 04 24             	mov    %eax,(%esp)
c0108a41:	e8 c0 9d ff ff       	call   c0102806 <list_is_empty>
c0108a46:	85 c0                	test   %eax,%eax
c0108a48:	75 0f                	jne    c0108a59 <free_pckid+0x6e>
c0108a4a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0108a4d:	89 04 24             	mov    %eax,(%esp)
c0108a50:	e8 07 9f ff ff       	call   c010295c <list_is_last>
c0108a55:	85 c0                	test   %eax,%eax
c0108a57:	74 b2                	je     c0108a0b <free_pckid+0x20>
        }
        else
            list_next(&used_id_it);
    }

    return false;
c0108a59:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108a5e:	c9                   	leave  
c0108a5f:	c3                   	ret    

c0108a60 <send_package>:

pckid_t send_package(pckmgr *mgr, pcktype_t type, size_t size, void *data)
{
c0108a60:	55                   	push   %ebp
c0108a61:	89 e5                	mov    %esp,%ebp
c0108a63:	83 ec 28             	sub    $0x28,%esp
    pckhead_t *header = malloc(sizeof(pckhead_t));
c0108a66:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0108a6d:	e8 2a 4c 00 00       	call   c010d69c <malloc>
c0108a72:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pckid_t id = gen_pckid(mgr);
c0108a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a78:	89 04 24             	mov    %eax,(%esp)
c0108a7b:	e8 ae fe ff ff       	call   c010892e <gen_pckid>
c0108a80:	89 45 f0             	mov    %eax,-0x10(%ebp)
    header->id = id;
c0108a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a86:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108a89:	89 10                	mov    %edx,(%eax)
    header->size = size+sizeof(pckhead_t);
c0108a8b:	8b 45 10             	mov    0x10(%ebp),%eax
c0108a8e:	8d 50 0c             	lea    0xc(%eax),%edx
c0108a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a94:	89 50 04             	mov    %edx,0x4(%eax)
    header->type = type;
c0108a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a9a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108a9d:	89 50 08             	mov    %edx,0x8(%eax)
    vfs_write(mgr->pset.stdin,mgr->pset.stdin->length,header,sizeof(pckhead_t));
c0108aa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108aa3:	8b 40 08             	mov    0x8(%eax),%eax
c0108aa6:	8b 40 08             	mov    0x8(%eax),%eax
c0108aa9:	89 c2                	mov    %eax,%edx
c0108aab:	8b 45 08             	mov    0x8(%ebp),%eax
c0108aae:	8b 40 08             	mov    0x8(%eax),%eax
c0108ab1:	c7 44 24 0c 0c 00 00 	movl   $0xc,0xc(%esp)
c0108ab8:	00 
c0108ab9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0108abc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108ac0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ac4:	89 04 24             	mov    %eax,(%esp)
c0108ac7:	e8 01 c9 ff ff       	call   c01053cd <vfs_write>
    if(size)
c0108acc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108ad0:	74 2b                	je     c0108afd <send_package+0x9d>
        vfs_write(mgr->pset.stdin,mgr->pset.stdin->length,data,size);
c0108ad2:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108ad5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ad8:	8b 40 08             	mov    0x8(%eax),%eax
c0108adb:	8b 40 08             	mov    0x8(%eax),%eax
c0108ade:	89 c2                	mov    %eax,%edx
c0108ae0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ae3:	8b 40 08             	mov    0x8(%eax),%eax
c0108ae6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108aea:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0108aed:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108af1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108af5:	89 04 24             	mov    %eax,(%esp)
c0108af8:	e8 d0 c8 ff ff       	call   c01053cd <vfs_write>
    free(header);
c0108afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b00:	89 04 24             	mov    %eax,(%esp)
c0108b03:	e8 7b 4c 00 00       	call   c010d783 <free>
    return id;
c0108b08:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0108b0b:	c9                   	leave  
c0108b0c:	c3                   	ret    

c0108b0d <respond>:


void respond(pckmgr *mgr,pckid_t id,pcktype_t type, size_t size, void *data)
{
c0108b0d:	55                   	push   %ebp
c0108b0e:	89 e5                	mov    %esp,%ebp
c0108b10:	83 ec 28             	sub    $0x28,%esp
    pckhead_t *header = malloc(sizeof(pckhead_t));
c0108b13:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0108b1a:	e8 7d 4b 00 00       	call   c010d69c <malloc>
c0108b1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    header->id = id;
c0108b22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b25:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108b28:	89 10                	mov    %edx,(%eax)
    header->size = size+12;
c0108b2a:	8b 45 14             	mov    0x14(%ebp),%eax
c0108b2d:	8d 50 0c             	lea    0xc(%eax),%edx
c0108b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b33:	89 50 04             	mov    %edx,0x4(%eax)
    header->type = type;
c0108b36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b39:	8b 55 10             	mov    0x10(%ebp),%edx
c0108b3c:	89 50 08             	mov    %edx,0x8(%eax)
    vfs_write(mgr->pset.stdin,mgr->pset.stdin->length,header,sizeof(pckhead_t));
c0108b3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b42:	8b 40 08             	mov    0x8(%eax),%eax
c0108b45:	8b 40 08             	mov    0x8(%eax),%eax
c0108b48:	89 c2                	mov    %eax,%edx
c0108b4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b4d:	8b 40 08             	mov    0x8(%eax),%eax
c0108b50:	c7 44 24 0c 0c 00 00 	movl   $0xc,0xc(%esp)
c0108b57:	00 
c0108b58:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0108b5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108b5f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108b63:	89 04 24             	mov    %eax,(%esp)
c0108b66:	e8 62 c8 ff ff       	call   c01053cd <vfs_write>
    if(size)
c0108b6b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108b6f:	74 2b                	je     c0108b9c <respond+0x8f>
        vfs_write(mgr->pset.stdin,mgr->pset.stdin->length,data,size);
c0108b71:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0108b74:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b77:	8b 40 08             	mov    0x8(%eax),%eax
c0108b7a:	8b 40 08             	mov    0x8(%eax),%eax
c0108b7d:	89 c2                	mov    %eax,%edx
c0108b7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b82:	8b 40 08             	mov    0x8(%eax),%eax
c0108b85:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108b89:	8b 4d 18             	mov    0x18(%ebp),%ecx
c0108b8c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108b90:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108b94:	89 04 24             	mov    %eax,(%esp)
c0108b97:	e8 31 c8 ff ff       	call   c01053cd <vfs_write>
    free(header);
c0108b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b9f:	89 04 24             	mov    %eax,(%esp)
c0108ba2:	e8 dc 4b 00 00       	call   c010d783 <free>
}
c0108ba7:	c9                   	leave  
c0108ba8:	c3                   	ret    

c0108ba9 <poll_next>:

pck_t *poll_next(pckmgr *mgr)
{
c0108ba9:	55                   	push   %ebp
c0108baa:	89 e5                	mov    %esp,%ebp
c0108bac:	53                   	push   %ebx
c0108bad:	83 ec 24             	sub    $0x24,%esp
    pck_t *pck = malloc(sizeof(pck_t));
c0108bb0:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0108bb7:	e8 e0 4a 00 00       	call   c010d69c <malloc>
c0108bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while((mgr->pset.stdout->length - mgr->stdout_seeker) < sizeof(pckhead_t));
c0108bbf:	90                   	nop
c0108bc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bc3:	8b 40 0c             	mov    0xc(%eax),%eax
c0108bc6:	8b 50 08             	mov    0x8(%eax),%edx
c0108bc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bcc:	8b 40 14             	mov    0x14(%eax),%eax
c0108bcf:	89 d1                	mov    %edx,%ecx
c0108bd1:	29 c1                	sub    %eax,%ecx
c0108bd3:	89 c8                	mov    %ecx,%eax
c0108bd5:	83 f8 0b             	cmp    $0xb,%eax
c0108bd8:	76 e6                	jbe    c0108bc0 <poll_next+0x17>
    vfs_read(mgr->pset.stdout,mgr->stdout_seeker,pck, sizeof(pckhead_t));
c0108bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bdd:	8b 50 14             	mov    0x14(%eax),%edx
c0108be0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108be3:	8b 40 0c             	mov    0xc(%eax),%eax
c0108be6:	c7 44 24 0c 0c 00 00 	movl   $0xc,0xc(%esp)
c0108bed:	00 
c0108bee:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0108bf1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108bf5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108bf9:	89 04 24             	mov    %eax,(%esp)
c0108bfc:	e8 d9 c9 ff ff       	call   c01055da <vfs_read>
    mgr->stdout_seeker += sizeof(pckhead_t);
c0108c01:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c04:	8b 40 14             	mov    0x14(%eax),%eax
c0108c07:	83 c0 0c             	add    $0xc,%eax
c0108c0a:	89 c2                	mov    %eax,%edx
c0108c0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c0f:	89 50 14             	mov    %edx,0x14(%eax)
    if(pck->size > 12)
c0108c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c15:	8b 40 04             	mov    0x4(%eax),%eax
c0108c18:	83 f8 0c             	cmp    $0xc,%eax
c0108c1b:	76 74                	jbe    c0108c91 <poll_next+0xe8>
    {
        int data_size = pck->size-12;
c0108c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c20:	8b 40 04             	mov    0x4(%eax),%eax
c0108c23:	83 e8 0c             	sub    $0xc,%eax
c0108c26:	89 45 f0             	mov    %eax,-0x10(%ebp)
        pck->data = malloc(data_size);
c0108c29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c2c:	89 04 24             	mov    %eax,(%esp)
c0108c2f:	e8 68 4a 00 00       	call   c010d69c <malloc>
c0108c34:	89 c2                	mov    %eax,%edx
c0108c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c39:	89 50 0c             	mov    %edx,0xc(%eax)
        while((mgr->pset.stdout->length - mgr->stdout_seeker) < data_size);
c0108c3c:	90                   	nop
c0108c3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c40:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c43:	8b 50 08             	mov    0x8(%eax),%edx
c0108c46:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c49:	8b 40 14             	mov    0x14(%eax),%eax
c0108c4c:	29 c2                	sub    %eax,%edx
c0108c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c51:	39 c2                	cmp    %eax,%edx
c0108c53:	72 e8                	jb     c0108c3d <poll_next+0x94>
        vfs_read(mgr->pset.stdout,mgr->stdout_seeker, pck->data,data_size);
c0108c55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c58:	8b 48 0c             	mov    0xc(%eax),%ecx
c0108c5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c5e:	8b 50 14             	mov    0x14(%eax),%edx
c0108c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c64:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c67:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0108c6a:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108c6e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108c72:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108c76:	89 04 24             	mov    %eax,(%esp)
c0108c79:	e8 5c c9 ff ff       	call   c01055da <vfs_read>
        mgr->stdout_seeker += data_size;
c0108c7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c81:	8b 50 14             	mov    0x14(%eax),%edx
c0108c84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c87:	01 c2                	add    %eax,%edx
c0108c89:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c8c:	89 50 14             	mov    %edx,0x14(%eax)
c0108c8f:	eb 0a                	jmp    c0108c9b <poll_next+0xf2>
    }
    else
        pck->data = NULL;
c0108c91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c94:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    return pck;
c0108c9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108c9e:	83 c4 24             	add    $0x24,%esp
c0108ca1:	5b                   	pop    %ebx
c0108ca2:	5d                   	pop    %ebp
c0108ca3:	c3                   	ret    

c0108ca4 <poll_queue>:

void poll_queue(pckmgr *mgr)
{
c0108ca4:	55                   	push   %ebp
c0108ca5:	89 e5                	mov    %esp,%ebp
c0108ca7:	83 ec 18             	sub    $0x18,%esp
    list_push_front(mgr->recieved_pcks,poll_next(mgr));
c0108caa:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cad:	89 04 24             	mov    %eax,(%esp)
c0108cb0:	e8 f4 fe ff ff       	call   c0108ba9 <poll_next>
c0108cb5:	8b 55 08             	mov    0x8(%ebp),%edx
c0108cb8:	8b 52 1c             	mov    0x1c(%edx),%edx
c0108cbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cbf:	89 14 24             	mov    %edx,(%esp)
c0108cc2:	e8 ee 99 ff ff       	call   c01026b5 <list_push_front>
}
c0108cc7:	c9                   	leave  
c0108cc8:	c3                   	ret    

c0108cc9 <fetch_queue>:

pck_t *fetch_queue(pckmgr *mgr,pckid_t id)
{
c0108cc9:	55                   	push   %ebp
c0108cca:	89 e5                	mov    %esp,%ebp
c0108ccc:	83 ec 28             	sub    $0x28,%esp
    iterator_t recieved_pck_it = iterator_create(mgr->recieved_pcks);
c0108ccf:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cd2:	8b 50 1c             	mov    0x1c(%eax),%edx
c0108cd5:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108cd8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108cdc:	89 04 24             	mov    %eax,(%esp)
c0108cdf:	e8 63 9b ff ff       	call   c0102847 <iterator_create>
c0108ce4:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&recieved_pck_it) && !list_is_empty(mgr->recieved_pcks))
c0108ce7:	eb 33                	jmp    c0108d1c <fetch_queue+0x53>
    {
        pck_t *current = list_get_current(&recieved_pck_it);
c0108ce9:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108cec:	89 04 24             	mov    %eax,(%esp)
c0108cef:	e8 1c 9c ff ff       	call   c0102910 <list_get_current>
c0108cf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(current->id == id)
c0108cf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cfa:	8b 00                	mov    (%eax),%eax
c0108cfc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108cff:	75 10                	jne    c0108d11 <fetch_queue+0x48>
        {
            list_remove(&recieved_pck_it);
c0108d01:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108d04:	89 04 24             	mov    %eax,(%esp)
c0108d07:	e8 96 9c ff ff       	call   c01029a2 <list_remove>
            return current;
c0108d0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d0f:	eb 31                	jmp    c0108d42 <fetch_queue+0x79>
        }
        list_next(&recieved_pck_it);
c0108d11:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108d14:	89 04 24             	mov    %eax,(%esp)
c0108d17:	e8 19 9c ff ff       	call   c0102935 <list_next>
}

pck_t *fetch_queue(pckmgr *mgr,pckid_t id)
{
    iterator_t recieved_pck_it = iterator_create(mgr->recieved_pcks);
    while(!list_is_last(&recieved_pck_it) && !list_is_empty(mgr->recieved_pcks))
c0108d1c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108d1f:	89 04 24             	mov    %eax,(%esp)
c0108d22:	e8 35 9c ff ff       	call   c010295c <list_is_last>
c0108d27:	85 c0                	test   %eax,%eax
c0108d29:	75 12                	jne    c0108d3d <fetch_queue+0x74>
c0108d2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d2e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108d31:	89 04 24             	mov    %eax,(%esp)
c0108d34:	e8 cd 9a ff ff       	call   c0102806 <list_is_empty>
c0108d39:	85 c0                	test   %eax,%eax
c0108d3b:	74 ac                	je     c0108ce9 <fetch_queue+0x20>
            list_remove(&recieved_pck_it);
            return current;
        }
        list_next(&recieved_pck_it);
    }
    return NULL;
c0108d3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108d42:	c9                   	leave  
c0108d43:	c3                   	ret    

c0108d44 <pck_poll>:


pck_t *pck_poll(pckmgr *mgr, pckid_t id)
{
c0108d44:	55                   	push   %ebp
c0108d45:	89 e5                	mov    %esp,%ebp
c0108d47:	83 ec 28             	sub    $0x28,%esp
    pck_t *pck = fetch_queue(mgr,id);
c0108d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108d4d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d51:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d54:	89 04 24             	mov    %eax,(%esp)
c0108d57:	e8 6d ff ff ff       	call   c0108cc9 <fetch_queue>
c0108d5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(pck)
c0108d5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108d63:	74 05                	je     c0108d6a <pck_poll+0x26>
        return pck;
c0108d65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d68:	eb 40                	jmp    c0108daa <pck_poll+0x66>

    pck = poll_next(mgr);
c0108d6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d6d:	89 04 24             	mov    %eax,(%esp)
c0108d70:	e8 34 fe ff ff       	call   c0108ba9 <poll_next>
c0108d75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(pck->id != id)
c0108d78:	eb 23                	jmp    c0108d9d <pck_poll+0x59>
    {
        list_push_front(mgr->recieved_pcks,pck);
c0108d7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d7d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108d80:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d83:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108d87:	89 04 24             	mov    %eax,(%esp)
c0108d8a:	e8 26 99 ff ff       	call   c01026b5 <list_push_front>
        pck = poll_next(mgr);
c0108d8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d92:	89 04 24             	mov    %eax,(%esp)
c0108d95:	e8 0f fe ff ff       	call   c0108ba9 <poll_next>
c0108d9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pck_t *pck = fetch_queue(mgr,id);
    if(pck)
        return pck;

    pck = poll_next(mgr);
    while(pck->id != id)
c0108d9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108da0:	8b 00                	mov    (%eax),%eax
c0108da2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108da5:	75 d3                	jne    c0108d7a <pck_poll+0x36>
    {
        list_push_front(mgr->recieved_pcks,pck);
        pck = poll_next(mgr);
    }
    return pck;
c0108da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108daa:	c9                   	leave  
c0108dab:	c3                   	ret    

c0108dac <fetch_pipe>:



pck_t *fetch_pipe(pckmgr *mgr)
{
c0108dac:	55                   	push   %ebp
c0108dad:	89 e5                	mov    %esp,%ebp
c0108daf:	83 ec 18             	sub    $0x18,%esp
    if((mgr->pset.stdout->length - mgr->stdout_seeker) < sizeof(pckhead_t))
c0108db2:	8b 45 08             	mov    0x8(%ebp),%eax
c0108db5:	8b 40 0c             	mov    0xc(%eax),%eax
c0108db8:	8b 50 08             	mov    0x8(%eax),%edx
c0108dbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dbe:	8b 40 14             	mov    0x14(%eax),%eax
c0108dc1:	89 d1                	mov    %edx,%ecx
c0108dc3:	29 c1                	sub    %eax,%ecx
c0108dc5:	89 c8                	mov    %ecx,%eax
c0108dc7:	83 f8 0b             	cmp    $0xb,%eax
c0108dca:	77 07                	ja     c0108dd3 <fetch_pipe+0x27>
        return NULL;
c0108dcc:	b8 00 00 00 00       	mov    $0x0,%eax
c0108dd1:	eb 0b                	jmp    c0108dde <fetch_pipe+0x32>
    return poll_next(mgr);
c0108dd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dd6:	89 04 24             	mov    %eax,(%esp)
c0108dd9:	e8 cb fd ff ff       	call   c0108ba9 <poll_next>
}
c0108dde:	c9                   	leave  
c0108ddf:	c3                   	ret    

c0108de0 <subsystem_isr>:

list_t *subdrivers;
list_t *interrupts;

void subsystem_isr(int irq)
{
c0108de0:	55                   	push   %ebp
c0108de1:	89 e5                	mov    %esp,%ebp
c0108de3:	83 ec 28             	sub    $0x28,%esp
    iterator_t int_it = iterator_create(interrupts);
c0108de6:	8b 15 24 a0 11 c0    	mov    0xc011a024,%edx
c0108dec:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108def:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108df3:	89 04 24             	mov    %eax,(%esp)
c0108df6:	e8 4c 9a ff ff       	call   c0102847 <iterator_create>
c0108dfb:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&int_it) && !list_is_empty(interrupts))
c0108dfe:	eb 4b                	jmp    c0108e4b <subsystem_isr+0x6b>
    {
        struct int_relation *rel = list_get_current(&int_it);
c0108e00:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108e03:	89 04 24             	mov    %eax,(%esp)
c0108e06:	e8 05 9b ff ff       	call   c0102910 <list_get_current>
c0108e0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(rel->intnr == irq)
c0108e0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e11:	8b 10                	mov    (%eax),%edx
c0108e13:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e16:	39 c2                	cmp    %eax,%edx
c0108e18:	75 26                	jne    c0108e40 <subsystem_isr+0x60>
            send_package(rel->drv, INTSIG, 0, NULL);
c0108e1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e1d:	8b 40 04             	mov    0x4(%eax),%eax
c0108e20:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0108e27:	00 
c0108e28:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108e2f:	00 
c0108e30:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0108e37:	00 
c0108e38:	89 04 24             	mov    %eax,(%esp)
c0108e3b:	e8 20 fc ff ff       	call   c0108a60 <send_package>
        list_next(&int_it);
c0108e40:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108e43:	89 04 24             	mov    %eax,(%esp)
c0108e46:	e8 ea 9a ff ff       	call   c0102935 <list_next>
list_t *interrupts;

void subsystem_isr(int irq)
{
    iterator_t int_it = iterator_create(interrupts);
    while(!list_is_last(&int_it) && !list_is_empty(interrupts))
c0108e4b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0108e4e:	89 04 24             	mov    %eax,(%esp)
c0108e51:	e8 06 9b ff ff       	call   c010295c <list_is_last>
c0108e56:	85 c0                	test   %eax,%eax
c0108e58:	75 11                	jne    c0108e6b <subsystem_isr+0x8b>
c0108e5a:	a1 24 a0 11 c0       	mov    0xc011a024,%eax
c0108e5f:	89 04 24             	mov    %eax,(%esp)
c0108e62:	e8 9f 99 ff ff       	call   c0102806 <list_is_empty>
c0108e67:	85 c0                	test   %eax,%eax
c0108e69:	74 95                	je     c0108e00 <subsystem_isr+0x20>
        struct int_relation *rel = list_get_current(&int_it);
        if(rel->intnr == irq)
            send_package(rel->drv, INTSIG, 0, NULL);
        list_next(&int_it);
    }
}
c0108e6b:	c9                   	leave  
c0108e6c:	c3                   	ret    

c0108e6d <INIT_HYPERVISOR>:

void INIT_HYPERVISOR(int argc, void **argv)
{
c0108e6d:	55                   	push   %ebp
c0108e6e:	89 e5                	mov    %esp,%ebp
c0108e70:	56                   	push   %esi
c0108e71:	53                   	push   %ebx
c0108e72:	83 ec 60             	sub    $0x60,%esp
    subdrivers = list_create();
c0108e75:	e8 04 97 ff ff       	call   c010257e <list_create>
c0108e7a:	a3 28 a0 11 c0       	mov    %eax,0xc011a028
    interrupts = list_create();
c0108e7f:	e8 fa 96 ff ff       	call   c010257e <list_create>
c0108e84:	a3 24 a0 11 c0       	mov    %eax,0xc011a024
    //struct multiboot_struct *mb_info =  argv[1];      // currently unused
    struct section *current_section = argv[0];
c0108e89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108e8c:	8b 00                	mov    (%eax),%eax
c0108e8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pckmgr *pman;
    printf("hypervisor subsystems:\n");
c0108e91:	c7 04 24 dc 1a 11 c0 	movl   $0xc0111adc,(%esp)
c0108e98:	e8 0d 2e 00 00       	call   c010bcaa <puts>
    iterator_t i = iterator_create(current_section->subtree);
c0108e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ea0:	8b 50 08             	mov    0x8(%eax),%edx
c0108ea3:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0108ea6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108eaa:	89 04 24             	mov    %eax,(%esp)
c0108ead:	e8 95 99 ff ff       	call   c0102847 <iterator_create>
c0108eb2:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&i))
c0108eb5:	e9 05 01 00 00       	jmp    c0108fbf <INIT_HYPERVISOR+0x152>
    {
        char *path = ((struct pnode *)list_get_current(&i))->file;
c0108eba:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0108ebd:	89 04 24             	mov    %eax,(%esp)
c0108ec0:	e8 4b 9a ff ff       	call   c0102910 <list_get_current>
c0108ec5:	8b 00                	mov    (%eax),%eax
c0108ec7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        vfs_inode_t *driver_inode = vfs_lookup_path(path);
c0108eca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ecd:	89 04 24             	mov    %eax,(%esp)
c0108ed0:	e8 e0 c9 ff ff       	call   c01058b5 <vfs_lookup_path>
c0108ed5:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if(driver_inode != NULL)
c0108ed8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108edc:	0f 84 d2 00 00 00    	je     c0108fb4 <INIT_HYPERVISOR+0x147>
        {
            printf("load %s\n", path);
c0108ee2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ee5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ee9:	c7 04 24 f3 1a 11 c0 	movl   $0xc0111af3,(%esp)
c0108ef0:	e8 88 a2 ff ff       	call   c010317d <printf>
            pman = new_pckmgr(vfs_create_pipe(0, 0), vfs_create_pipe(0, 0), vfs_create_pipe(0, 0));
c0108ef5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108efc:	00 
c0108efd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108f04:	e8 33 c4 ff ff       	call   c010533c <vfs_create_pipe>
c0108f09:	89 c6                	mov    %eax,%esi
c0108f0b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108f12:	00 
c0108f13:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108f1a:	e8 1d c4 ff ff       	call   c010533c <vfs_create_pipe>
c0108f1f:	89 c3                	mov    %eax,%ebx
c0108f21:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108f28:	00 
c0108f29:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108f30:	e8 07 c4 ff ff       	call   c010533c <vfs_create_pipe>
c0108f35:	89 74 24 08          	mov    %esi,0x8(%esp)
c0108f39:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0108f3d:	89 04 24             	mov    %eax,(%esp)
c0108f40:	e8 24 f9 ff ff       	call   c0108869 <new_pckmgr>
c0108f45:	89 45 e8             	mov    %eax,-0x18(%ebp)

            struct driver *new_driver = malloc(sizeof(struct driver));
c0108f48:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0108f4f:	e8 48 47 00 00       	call   c010d69c <malloc>
c0108f54:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            new_driver->pman = pman;
c0108f57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f5a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108f5d:	89 50 0c             	mov    %edx,0xc(%eax)
            new_driver->process = load_elf_from_file(driver_inode, 0, 0, &pman->pset);
c0108f60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f63:	83 c0 08             	add    $0x8,%eax
c0108f66:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0108f6a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108f71:	00 
c0108f72:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108f79:	00 
c0108f7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f7d:	89 04 24             	mov    %eax,(%esp)
c0108f80:	e8 b1 a9 ff ff       	call   c0103936 <load_elf_from_file>
c0108f85:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f88:	89 02                	mov    %eax,(%edx)
            new_driver->ports = list_create();
c0108f8a:	e8 ef 95 ff ff       	call   c010257e <list_create>
c0108f8f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f92:	89 42 08             	mov    %eax,0x8(%edx)
            new_driver->memory = list_create();
c0108f95:	e8 e4 95 ff ff       	call   c010257e <list_create>
c0108f9a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f9d:	89 42 04             	mov    %eax,0x4(%edx)
            list_push_front(subdrivers,new_driver);
c0108fa0:	a1 28 a0 11 c0       	mov    0xc011a028,%eax
c0108fa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108fa8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fac:	89 04 24             	mov    %eax,(%esp)
c0108faf:	e8 01 97 ff ff       	call   c01026b5 <list_push_front>
        }
        list_next(&i);
c0108fb4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0108fb7:	89 04 24             	mov    %eax,(%esp)
c0108fba:	e8 76 99 ff ff       	call   c0102935 <list_next>
    //struct multiboot_struct *mb_info =  argv[1];      // currently unused
    struct section *current_section = argv[0];
    pckmgr *pman;
    printf("hypervisor subsystems:\n");
    iterator_t i = iterator_create(current_section->subtree);
    while(!list_is_last(&i))
c0108fbf:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0108fc2:	89 04 24             	mov    %eax,(%esp)
c0108fc5:	e8 92 99 ff ff       	call   c010295c <list_is_last>
c0108fca:	85 c0                	test   %eax,%eax
c0108fcc:	0f 84 e8 fe ff ff    	je     c0108eba <INIT_HYPERVISOR+0x4d>
            new_driver->memory = list_create();
            list_push_front(subdrivers,new_driver);
        }
        list_next(&i);
    }
    printf("\n");
c0108fd2:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0108fd9:	e8 6d 2b 00 00       	call   c010bb4b <putchar>
    //Poll packages
    if(list_is_empty(subdrivers))
c0108fde:	a1 28 a0 11 c0       	mov    0xc011a028,%eax
c0108fe3:	89 04 24             	mov    %eax,(%esp)
c0108fe6:	e8 1b 98 ff ff       	call   c0102806 <list_is_empty>
c0108feb:	85 c0                	test   %eax,%eax
c0108fed:	74 0e                	je     c0108ffd <INIT_HYPERVISOR+0x190>
    {
        printf("could not load any subsystem!\n");
c0108fef:	c7 04 24 fc 1a 11 c0 	movl   $0xc0111afc,(%esp)
c0108ff6:	e8 af 2c 00 00       	call   c010bcaa <puts>
        while(1);
c0108ffb:	eb fe                	jmp    c0108ffb <INIT_HYPERVISOR+0x18e>
    }

    iterator_t subdriver_it = iterator_create(subdrivers);
c0108ffd:	8b 15 28 a0 11 c0    	mov    0xc011a028,%edx
c0109003:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0109006:	89 54 24 04          	mov    %edx,0x4(%esp)
c010900a:	89 04 24             	mov    %eax,(%esp)
c010900d:	e8 35 98 ff ff       	call   c0102847 <iterator_create>
c0109012:	83 ec 04             	sub    $0x4,%esp
c0109015:	eb 01                	jmp    c0109018 <INIT_HYPERVISOR+0x1ab>
                break;

        };


    }
c0109017:	90                   	nop

    /** NOTE: current implementation is based on polling. Switch to pipetrigger as fast as possible**/

    while(1)
    {
        struct driver *current_driver = list_get_current(&subdriver_it);
c0109018:	8d 45 c8             	lea    -0x38(%ebp),%eax
c010901b:	89 04 24             	mov    %eax,(%esp)
c010901e:	e8 ed 98 ff ff       	call   c0102910 <list_get_current>
c0109023:	89 45 e0             	mov    %eax,-0x20(%ebp)
        pman = current_driver->pman;
c0109026:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109029:	8b 40 0c             	mov    0xc(%eax),%eax
c010902c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        pck_t *pck = fetch_pipe(pman);
c010902f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109032:	89 04 24             	mov    %eax,(%esp)
c0109035:	e8 72 fd ff ff       	call   c0108dac <fetch_pipe>
c010903a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if(!pck)
c010903d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109041:	75 27                	jne    c010906a <INIT_HYPERVISOR+0x1fd>
        {
            list_next(&subdriver_it);
c0109043:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0109046:	89 04 24             	mov    %eax,(%esp)
c0109049:	e8 e7 98 ff ff       	call   c0102935 <list_next>
            if(list_is_last(&subdriver_it))
c010904e:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0109051:	89 04 24             	mov    %eax,(%esp)
c0109054:	e8 03 99 ff ff       	call   c010295c <list_is_last>
c0109059:	85 c0                	test   %eax,%eax
c010905b:	74 ba                	je     c0109017 <INIT_HYPERVISOR+0x1aa>
                list_set_first(&subdriver_it);
c010905d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0109060:	89 04 24             	mov    %eax,(%esp)
c0109063:	e8 0f 99 ff ff       	call   c0102977 <list_set_first>
                break;

        };


    }
c0109068:	eb ad                	jmp    c0109017 <INIT_HYPERVISOR+0x1aa>
        }

        //printf("host: recieved package %d    size:%d    type:%x\n",pck->id,pck->size,pck->type);
        struct int_relation *r;
        int ret;
        switch(pck->type)
c010906a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010906d:	8b 40 08             	mov    0x8(%eax),%eax
c0109070:	83 f8 07             	cmp    $0x7,%eax
c0109073:	0f 87 5c 01 00 00    	ja     c01091d5 <INIT_HYPERVISOR+0x368>
c0109079:	8b 04 85 8c 1b 11 c0 	mov    -0x3feee474(,%eax,4),%eax
c0109080:	ff e0                	jmp    *%eax

            case PING:
#ifdef DEBUG
                printf("host: recieved ping -> sending pong\n");
#endif
                respond(pman,pck->id,PONG,UHOST_DEFAULT_ASYNCHRON_SIZE,UHOST_DEFAULT_ASYNCHRON);
c0109082:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109085:	8b 00                	mov    (%eax),%eax
c0109087:	c7 44 24 10 1a 1b 11 	movl   $0xc0111b1a,0x10(%esp)
c010908e:	c0 
c010908f:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c0109096:	00 
c0109097:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010909e:	00 
c010909f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090a6:	89 04 24             	mov    %eax,(%esp)
c01090a9:	e8 5f fa ff ff       	call   c0108b0d <respond>
                break;
c01090ae:	e9 4f 01 00 00       	jmp    c0109202 <INIT_HYPERVISOR+0x395>

            case PORT_ALLOC:
#ifdef DEBUG
                printf("host: allocationg Port 0x%x\n",*((unsigned int*)pck->data));
#endif
                handle_port_alloc(current_driver, pck);
c01090b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01090bd:	89 04 24             	mov    %eax,(%esp)
c01090c0:	e8 5d 02 00 00       	call   c0109322 <handle_port_alloc>
                break;
c01090c5:	e9 38 01 00 00       	jmp    c0109202 <INIT_HYPERVISOR+0x395>

            case INT_REQ:
#ifdef DEBUG
                printf("host: setting up interrupt signal 0x%x\n",*((unsigned int*)pck->data));
#endif // DEBUG
                r = malloc(sizeof(struct int_relation));
c01090ca:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01090d1:	e8 c6 45 00 00       	call   c010d69c <malloc>
c01090d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
                r->intnr = *((unsigned int*)pck->data);
c01090d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090dc:	8b 40 0c             	mov    0xc(%eax),%eax
c01090df:	8b 10                	mov    (%eax),%edx
c01090e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01090e4:	89 10                	mov    %edx,(%eax)
                r->drv = pman;
c01090e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01090e9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01090ec:	89 50 04             	mov    %edx,0x4(%eax)
                list_push_front(interrupts,r);
c01090ef:	a1 24 a0 11 c0       	mov    0xc011a024,%eax
c01090f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01090f7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01090fb:	89 04 24             	mov    %eax,(%esp)
c01090fe:	e8 b2 95 ff ff       	call   c01026b5 <list_push_front>
                if(add_int_trigger(r->intnr, NULL,subsystem_isr))
c0109103:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109106:	8b 00                	mov    (%eax),%eax
c0109108:	c7 44 24 08 e0 8d 10 	movl   $0xc0108de0,0x8(%esp)
c010910f:	c0 
c0109110:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109117:	00 
c0109118:	89 04 24             	mov    %eax,(%esp)
c010911b:	e8 1b 16 00 00       	call   c010a73b <add_int_trigger>
c0109120:	85 c0                	test   %eax,%eax
c0109122:	74 3d                	je     c0109161 <INIT_HYPERVISOR+0x2f4>
                {
                    printf("sucess!\n");
c0109124:	c7 04 24 1f 1b 11 c0 	movl   $0xc0111b1f,(%esp)
c010912b:	e8 7a 2b 00 00       	call   c010bcaa <puts>
                    respond(pman,pck->id,SUCCESS,0,NULL);
c0109130:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109133:	8b 00                	mov    (%eax),%eax
c0109135:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010913c:	00 
c010913d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109144:	00 
c0109145:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010914c:	00 
c010914d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109151:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109154:	89 04 24             	mov    %eax,(%esp)
c0109157:	e8 b1 f9 ff ff       	call   c0108b0d <respond>
                {
                    printf("could not allocate interrupt\n");
                    ret = -1;
                    respond(pman,pck->id,ERROR,sizeof(unsigned int),&ret);
                }
                break;
c010915c:	e9 a1 00 00 00       	jmp    c0109202 <INIT_HYPERVISOR+0x395>
                    printf("sucess!\n");
                    respond(pman,pck->id,SUCCESS,0,NULL);
                }
                else
                {
                    printf("could not allocate interrupt\n");
c0109161:	c7 04 24 27 1b 11 c0 	movl   $0xc0111b27,(%esp)
c0109168:	e8 3d 2b 00 00       	call   c010bcaa <puts>
                    ret = -1;
c010916d:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
                    respond(pman,pck->id,ERROR,sizeof(unsigned int),&ret);
c0109174:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109177:	8b 00                	mov    (%eax),%eax
c0109179:	8d 55 c4             	lea    -0x3c(%ebp),%edx
c010917c:	89 54 24 10          	mov    %edx,0x10(%esp)
c0109180:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c0109187:	00 
c0109188:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010918f:	00 
c0109190:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109194:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109197:	89 04 24             	mov    %eax,(%esp)
c010919a:	e8 6e f9 ff ff       	call   c0108b0d <respond>
                }
                break;
c010919f:	eb 61                	jmp    c0109202 <INIT_HYPERVISOR+0x395>

            case PMA_ALLOC:
#ifdef DEBUG
                printf("PMA-Alloc\n");
#endif
                handle_pma_alloc(current_driver, pck);
c01091a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01091ab:	89 04 24             	mov    %eax,(%esp)
c01091ae:	e8 54 00 00 00       	call   c0109207 <handle_pma_alloc>

                break;
c01091b3:	eb 4d                	jmp    c0109202 <INIT_HYPERVISOR+0x395>

            case PMA_FREE:
                printf("PMA-Free\n");
c01091b5:	c7 04 24 44 1b 11 c0 	movl   $0xc0111b44,(%esp)
c01091bc:	e8 e9 2a 00 00       	call   c010bcaa <puts>
                handle_pma_free(current_driver, pck);
c01091c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01091cb:	89 04 24             	mov    %eax,(%esp)
c01091ce:	e8 4a 01 00 00       	call   c010931d <handle_pma_free>
                break;
c01091d3:	eb 2d                	jmp    c0109202 <INIT_HYPERVISOR+0x395>



            default:
                printf("host: recieved unknown package %d    size:%d    type:%x\n",pck->id,pck->size,pck->type);
c01091d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091d8:	8b 48 08             	mov    0x8(%eax),%ecx
c01091db:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091de:	8b 50 04             	mov    0x4(%eax),%edx
c01091e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091e4:	8b 00                	mov    (%eax),%eax
c01091e6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01091ea:	89 54 24 08          	mov    %edx,0x8(%esp)
c01091ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091f2:	c7 04 24 50 1b 11 c0 	movl   $0xc0111b50,(%esp)
c01091f9:	e8 7f 9f ff ff       	call   c010317d <printf>
                break;
c01091fe:	90                   	nop
c01091ff:	eb 01                	jmp    c0109202 <INIT_HYPERVISOR+0x395>
        {
            case RESET_CON:
#ifdef DEBUG
                printf("host: connection reset\n");
#endif
                break;
c0109201:	90                   	nop
                break;

        };


    }
c0109202:	e9 10 fe ff ff       	jmp    c0109017 <INIT_HYPERVISOR+0x1aa>

c0109207 <handle_pma_alloc>:
 * @brief Handles a PMA_ALLOC request
 * @param drv pointer to the driver struct
 * @param req pointer to the request package
 */
void handle_pma_alloc(struct driver *drv, pck_t *req)
{
c0109207:	55                   	push   %ebp
c0109208:	89 e5                	mov    %esp,%ebp
c010920a:	53                   	push   %ebx
c010920b:	83 ec 44             	sub    $0x44,%esp
    struct pma_request *pma_req = (struct pma_request*) req->data;
c010920e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109211:	8b 40 0c             	mov    0xc(%eax),%eax
c0109214:	89 45 f0             	mov    %eax,-0x10(%ebp)
    paddr_t phys_base;

    switch(pma_req->type)
c0109217:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010921a:	8b 00                	mov    (%eax),%eax
c010921c:	83 f8 02             	cmp    $0x2,%eax
c010921f:	74 20                	je     c0109241 <handle_pma_alloc+0x3a>
c0109221:	83 f8 03             	cmp    $0x3,%eax
c0109224:	74 26                	je     c010924c <handle_pma_alloc+0x45>
c0109226:	83 f8 01             	cmp    $0x1,%eax
c0109229:	75 34                	jne    c010925f <handle_pma_alloc+0x58>
    {
        case PMA_ALLOC_RANDOM:
            phys_base = pmm_alloc_page_range(pma_req->size/PAGE_SIZE);
c010922b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010922e:	8b 40 04             	mov    0x4(%eax),%eax
c0109231:	c1 e8 0c             	shr    $0xc,%eax
c0109234:	89 04 24             	mov    %eax,(%esp)
c0109237:	e8 6c 64 00 00       	call   c010f6a8 <pmm_alloc_page_range>
c010923c:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c010923f:	eb 52                	jmp    c0109293 <handle_pma_alloc+0x8c>
             {
                 respond(drv->pman, req->id, ERROR, 0, NULL);
                 return;
             }*/

            phys_base = pma_req->phys_base;
c0109241:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109244:	8b 40 08             	mov    0x8(%eax),%eax
c0109247:	89 45 f4             	mov    %eax,-0xc(%ebp)
            //pmm_mark_page_range_as_used(phys_base, pma_req->size/PAGE_SIZE);
            break;
c010924a:	eb 47                	jmp    c0109293 <handle_pma_alloc+0x8c>

        case PMA_ALLOC_LOWER:
            phys_base = pmm_alloc_page_limit(pma_req->phys_base);
c010924c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010924f:	8b 40 08             	mov    0x8(%eax),%eax
c0109252:	89 04 24             	mov    %eax,(%esp)
c0109255:	e8 ac 63 00 00       	call   c010f606 <pmm_alloc_page_limit>
c010925a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c010925d:	eb 34                	jmp    c0109293 <handle_pma_alloc+0x8c>

        default:
            respond(drv->pman, req->id, ERROR, 0, NULL);
c010925f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109262:	8b 10                	mov    (%eax),%edx
c0109264:	8b 45 08             	mov    0x8(%ebp),%eax
c0109267:	8b 40 0c             	mov    0xc(%eax),%eax
c010926a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0109271:	00 
c0109272:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109279:	00 
c010927a:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0109281:	00 
c0109282:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109286:	89 04 24             	mov    %eax,(%esp)
c0109289:	e8 7f f8 ff ff       	call   c0108b0d <respond>
c010928e:	e9 85 00 00 00       	jmp    c0109318 <handle_pma_alloc+0x111>
            return;
            break;
    }


    iterator_t i = iterator_create(drv->process->threads);
c0109293:	8b 45 08             	mov    0x8(%ebp),%eax
c0109296:	8b 00                	mov    (%eax),%eax
c0109298:	8b 50 28             	mov    0x28(%eax),%edx
c010929b:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010929e:	89 54 24 04          	mov    %edx,0x4(%esp)
c01092a2:	89 04 24             	mov    %eax,(%esp)
c01092a5:	e8 9d 95 ff ff       	call   c0102847 <iterator_create>
c01092aa:	83 ec 04             	sub    $0x4,%esp
    struct pma_response resp;
    resp.mem_base = vmm_automap_user_range( &((struct thread_state*)list_get_current(&i))->context, phys_base, pma_req->size/PAGE_SIZE, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c01092ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092b0:	8b 40 04             	mov    0x4(%eax),%eax
c01092b3:	c1 e8 0c             	shr    $0xc,%eax
c01092b6:	89 c3                	mov    %eax,%ebx
c01092b8:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01092bb:	89 04 24             	mov    %eax,(%esp)
c01092be:	e8 4d 96 ff ff       	call   c0102910 <list_get_current>
c01092c3:	8d 50 08             	lea    0x8(%eax),%edx
c01092c6:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c01092cd:	00 
c01092ce:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01092d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092d9:	89 14 24             	mov    %edx,(%esp)
c01092dc:	e8 43 40 00 00       	call   c010d324 <vmm_automap_user_range>
c01092e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    resp.phys_base = phys_base;
c01092e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    respond(drv->pman, req->id, SUCCESS, sizeof(struct pma_response), &resp);
c01092ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01092ed:	8b 10                	mov    (%eax),%edx
c01092ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01092f2:	8b 40 0c             	mov    0xc(%eax),%eax
c01092f5:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c01092f8:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01092fc:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0109303:	00 
c0109304:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010930b:	00 
c010930c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109310:	89 04 24             	mov    %eax,(%esp)
c0109313:	e8 f5 f7 ff ff       	call   c0108b0d <respond>
}
c0109318:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010931b:	c9                   	leave  
c010931c:	c3                   	ret    

c010931d <handle_pma_free>:
 * @brief Handles a PMA_FREE request
 * @param drv pointer to the driver struct
 * @param req pointer to the request package
 */
void handle_pma_free(struct driver *drv, pck_t *req)
{
c010931d:	55                   	push   %ebp
c010931e:	89 e5                	mov    %esp,%ebp
    /*TODO: free in HW resource list or free the page in PMM*/

c0109320:	5d                   	pop    %ebp
c0109321:	c3                   	ret    

c0109322 <handle_port_alloc>:
 * @brief handles PORT_ALLOC call
 * @param drv pointer to the driver struct
 * @param req pointer to the request package
 */
void handle_port_alloc(struct driver *drv, pck_t *req)
{
c0109322:	55                   	push   %ebp
c0109323:	89 e5                	mov    %esp,%ebp
c0109325:	83 ec 38             	sub    $0x38,%esp
    //validate package
    if(req->size != sizeof(portpck_t)+12)
c0109328:	8b 45 0c             	mov    0xc(%ebp),%eax
c010932b:	8b 40 04             	mov    0x4(%eax),%eax
c010932e:	83 f8 10             	cmp    $0x10,%eax
c0109331:	74 5a                	je     c010938d <handle_port_alloc+0x6b>
    {
        printf("invalid package! %d  %d\n",req->size,(int)sizeof(portpck_t));
c0109333:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109336:	8b 40 04             	mov    0x4(%eax),%eax
c0109339:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0109340:	00 
c0109341:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109345:	c7 04 24 ac 1b 11 c0 	movl   $0xc0111bac,(%esp)
c010934c:	e8 2c 9e ff ff       	call   c010317d <printf>
        respond(drv->pman, req->id, INVALID_REQUEST, 0, 0);
c0109351:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109354:	8b 10                	mov    (%eax),%edx
c0109356:	8b 45 08             	mov    0x8(%ebp),%eax
c0109359:	8b 40 0c             	mov    0xc(%eax),%eax
c010935c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0109363:	00 
c0109364:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010936b:	00 
c010936c:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0109373:	00 
c0109374:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109378:	89 04 24             	mov    %eax,(%esp)
c010937b:	e8 8d f7 ff ff       	call   c0108b0d <respond>
        free(req);
c0109380:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109383:	89 04 24             	mov    %eax,(%esp)
c0109386:	e8 f8 43 00 00       	call   c010d783 <free>
c010938b:	eb 4d                	jmp    c01093da <handle_port_alloc+0xb8>
        return;
    }

    list_push_front(drv->ports,req->data);
c010938d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109390:	8b 50 0c             	mov    0xc(%eax),%edx
c0109393:	8b 45 08             	mov    0x8(%ebp),%eax
c0109396:	8b 40 08             	mov    0x8(%eax),%eax
c0109399:	89 54 24 04          	mov    %edx,0x4(%esp)
c010939d:	89 04 24             	mov    %eax,(%esp)
c01093a0:	e8 10 93 ff ff       	call   c01026b5 <list_push_front>

    //todo: check if the port is already taken
    port_type p = hw_port;
c01093a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    respond(drv->pman, req->id, SUCCESS, sizeof(port_type), &p);
c01093ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093af:	8b 10                	mov    (%eax),%edx
c01093b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01093b4:	8b 40 0c             	mov    0xc(%eax),%eax
c01093b7:	8d 4d f4             	lea    -0xc(%ebp),%ecx
c01093ba:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01093be:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c01093c5:	00 
c01093c6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01093cd:	00 
c01093ce:	89 54 24 04          	mov    %edx,0x4(%esp)
c01093d2:	89 04 24             	mov    %eax,(%esp)
c01093d5:	e8 33 f7 ff ff       	call   c0108b0d <respond>
}
c01093da:	c9                   	leave  
c01093db:	c3                   	ret    

c01093dc <handle_port_free>:
 * @brief handles PORT_FREE call
 * @param drv pointer to the driver struct
 * @param req pointer to the request package
 */
void handle_port_free(struct driver *drv, pck_t *req)
{
c01093dc:	55                   	push   %ebp
c01093dd:	89 e5                	mov    %esp,%ebp
c01093df:	83 ec 38             	sub    $0x38,%esp
    iterator_t i = iterator_create(drv->ports);
c01093e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e5:	8b 50 08             	mov    0x8(%eax),%edx
c01093e8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01093eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01093ef:	89 04 24             	mov    %eax,(%esp)
c01093f2:	e8 50 94 ff ff       	call   c0102847 <iterator_create>
c01093f7:	83 ec 04             	sub    $0x4,%esp
    portpck_t *free_port = (portpck_t*) req->data;
c01093fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093fd:	8b 40 0c             	mov    0xc(%eax),%eax
c0109400:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(!list_is_last(&i))
c0109403:	eb 65                	jmp    c010946a <handle_port_free+0x8e>
    {
        if(((portpck_t*)list_get_current(&i))->port == free_port->port)
c0109405:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109408:	89 04 24             	mov    %eax,(%esp)
c010940b:	e8 00 95 ff ff       	call   c0102910 <list_get_current>
c0109410:	8b 10                	mov    (%eax),%edx
c0109412:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109415:	8b 00                	mov    (%eax),%eax
c0109417:	39 c2                	cmp    %eax,%edx
c0109419:	75 44                	jne    c010945f <handle_port_free+0x83>
        {
            free(list_remove(&i));
c010941b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010941e:	89 04 24             	mov    %eax,(%esp)
c0109421:	e8 7c 95 ff ff       	call   c01029a2 <list_remove>
c0109426:	89 04 24             	mov    %eax,(%esp)
c0109429:	e8 55 43 00 00       	call   c010d783 <free>
            respond(drv->pman, req->id, SUCCESS, 0, 0);
c010942e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109431:	8b 10                	mov    (%eax),%edx
c0109433:	8b 45 08             	mov    0x8(%ebp),%eax
c0109436:	8b 40 0c             	mov    0xc(%eax),%eax
c0109439:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0109440:	00 
c0109441:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109448:	00 
c0109449:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0109450:	00 
c0109451:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109455:	89 04 24             	mov    %eax,(%esp)
c0109458:	e8 b0 f6 ff ff       	call   c0108b0d <respond>
c010945d:	eb 49                	jmp    c01094a8 <handle_port_free+0xcc>
            return;
        }
        list_next(&i);
c010945f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109462:	89 04 24             	mov    %eax,(%esp)
c0109465:	e8 cb 94 ff ff       	call   c0102935 <list_next>
 */
void handle_port_free(struct driver *drv, pck_t *req)
{
    iterator_t i = iterator_create(drv->ports);
    portpck_t *free_port = (portpck_t*) req->data;
    while(!list_is_last(&i))
c010946a:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010946d:	89 04 24             	mov    %eax,(%esp)
c0109470:	e8 e7 94 ff ff       	call   c010295c <list_is_last>
c0109475:	85 c0                	test   %eax,%eax
c0109477:	74 8c                	je     c0109405 <handle_port_free+0x29>
            return;
        }
        list_next(&i);
    }

    respond(drv->pman, req->id, ERROR, 0, 0);
c0109479:	8b 45 0c             	mov    0xc(%ebp),%eax
c010947c:	8b 10                	mov    (%eax),%edx
c010947e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109481:	8b 40 0c             	mov    0xc(%eax),%eax
c0109484:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010948b:	00 
c010948c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109493:	00 
c0109494:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010949b:	00 
c010949c:	89 54 24 04          	mov    %edx,0x4(%esp)
c01094a0:	89 04 24             	mov    %eax,(%esp)
c01094a3:	e8 65 f6 ff ff       	call   c0108b0d <respond>
}
c01094a8:	c9                   	leave  
c01094a9:	c3                   	ret    

c01094aa <pfp>:
 * @brief parsers a pipeline file
 * @param pipelines the pipeline file as a ascii string
 * @return a list of the sections
 */
list_t *pfp(char *pipelines)
{
c01094aa:	55                   	push   %ebp
c01094ab:	89 e5                	mov    %esp,%ebp
c01094ad:	83 ec 38             	sub    $0x38,%esp
    bool valid = validate_pf(pipelines);
c01094b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01094b3:	89 04 24             	mov    %eax,(%esp)
c01094b6:	e8 82 00 00 00       	call   c010953d <validate_pf>
c01094bb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if(valid == true)
c01094be:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
c01094c2:	75 72                	jne    c0109536 <pfp+0x8c>
    {
        list_t *pipes = list_create();
c01094c4:	e8 b5 90 ff ff       	call   c010257e <list_create>
c01094c9:	89 45 ec             	mov    %eax,-0x14(%ebp)

        int sections_nr = count_sections(pipelines);
c01094cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01094cf:	89 04 24             	mov    %eax,(%esp)
c01094d2:	e8 70 00 00 00       	call   c0109547 <count_sections>
c01094d7:	89 45 e8             	mov    %eax,-0x18(%ebp)

        if(sections_nr == 0)
c01094da:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01094de:	75 07                	jne    c01094e7 <pfp+0x3d>
            return NULL;
c01094e0:	b8 00 00 00 00       	mov    $0x0,%eax
c01094e5:	eb 54                	jmp    c010953b <pfp+0x91>

        int i = 0;
c01094e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        int current_position = 0;
c01094ee:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

        for(i = 0; i < sections_nr; i++)
c01094f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01094fc:	eb 2b                	jmp    c0109529 <pfp+0x7f>
        {
            struct section *current_section = parser_section(pipelines, &current_position);
c01094fe:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0109501:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109505:	8b 45 08             	mov    0x8(%ebp),%eax
c0109508:	89 04 24             	mov    %eax,(%esp)
c010950b:	e8 bb 00 00 00       	call   c01095cb <parser_section>
c0109510:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            list_push_back(pipes, current_section);
c0109513:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109516:	89 44 24 04          	mov    %eax,0x4(%esp)
c010951a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010951d:	89 04 24             	mov    %eax,(%esp)
c0109520:	e8 3d 91 ff ff       	call   c0102662 <list_push_back>
            return NULL;

        int i = 0;
        int current_position = 0;

        for(i = 0; i < sections_nr; i++)
c0109525:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109529:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010952c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010952f:	7c cd                	jl     c01094fe <pfp+0x54>
        {
            struct section *current_section = parser_section(pipelines, &current_position);
            list_push_back(pipes, current_section);
        }

        return pipes;
c0109531:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109534:	eb 05                	jmp    c010953b <pfp+0x91>
    }
    else
    {
        return NULL;
c0109536:	b8 00 00 00 00       	mov    $0x0,%eax
    }
}
c010953b:	c9                   	leave  
c010953c:	c3                   	ret    

c010953d <validate_pf>:
 * @param pipelines the pipeline file as a ascii string
 * @return true if the pipeline file is valid
 * @return false if the pipeline file is invalid
 */
bool validate_pf(char *pipelines)
{
c010953d:	55                   	push   %ebp
c010953e:	89 e5                	mov    %esp,%ebp
    // TODO

    return true;
c0109540:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0109545:	5d                   	pop    %ebp
c0109546:	c3                   	ret    

c0109547 <count_sections>:
 * @brief counts the number of sections in a pipeline file
 * @param pipelines the pipeline file as a ascii string
 * @return the number of sections
 */
int count_sections(char *pipelines)
{
c0109547:	55                   	push   %ebp
c0109548:	89 e5                	mov    %esp,%ebp
c010954a:	83 ec 28             	sub    $0x28,%esp
    int i = 0;
c010954d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int nr = 0;
c0109554:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    for(i = 0; pipelines[i + STRING_SECTION_LEN] != '\0'; i++)
c010955b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109562:	eb 50                	jmp    c01095b4 <count_sections+0x6d>
    {
        if(pipelines[i] == '#')
c0109564:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109567:	8b 45 08             	mov    0x8(%ebp),%eax
c010956a:	01 d0                	add    %edx,%eax
c010956c:	0f b6 00             	movzbl (%eax),%eax
c010956f:	3c 23                	cmp    $0x23,%al
c0109571:	75 15                	jne    c0109588 <count_sections+0x41>
            for(; pipelines[i] != '\n'; i++);
c0109573:	eb 04                	jmp    c0109579 <count_sections+0x32>
c0109575:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109579:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010957c:	8b 45 08             	mov    0x8(%ebp),%eax
c010957f:	01 d0                	add    %edx,%eax
c0109581:	0f b6 00             	movzbl (%eax),%eax
c0109584:	3c 0a                	cmp    $0xa,%al
c0109586:	75 ed                	jne    c0109575 <count_sections+0x2e>

        if(!strncmp(&pipelines[i], "section", STRING_SECTION_LEN))
c0109588:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010958b:	8b 45 08             	mov    0x8(%ebp),%eax
c010958e:	01 d0                	add    %edx,%eax
c0109590:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c0109597:	00 
c0109598:	c7 44 24 04 c5 1b 11 	movl   $0xc0111bc5,0x4(%esp)
c010959f:	c0 
c01095a0:	89 04 24             	mov    %eax,(%esp)
c01095a3:	e8 2b 96 ff ff       	call   c0102bd3 <strncmp>
c01095a8:	85 c0                	test   %eax,%eax
c01095aa:	75 04                	jne    c01095b0 <count_sections+0x69>
            nr++;
c01095ac:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
int count_sections(char *pipelines)
{
    int i = 0;
    int nr = 0;

    for(i = 0; pipelines[i + STRING_SECTION_LEN] != '\0'; i++)
c01095b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01095b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095b7:	8d 50 06             	lea    0x6(%eax),%edx
c01095ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01095bd:	01 d0                	add    %edx,%eax
c01095bf:	0f b6 00             	movzbl (%eax),%eax
c01095c2:	84 c0                	test   %al,%al
c01095c4:	75 9e                	jne    c0109564 <count_sections+0x1d>
        if(!strncmp(&pipelines[i], "section", STRING_SECTION_LEN))
            nr++;
    }


    return nr;
c01095c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01095c9:	c9                   	leave  
c01095ca:	c3                   	ret    

c01095cb <parser_section>:
 * @brief parsers a section of a pipeline file
 * @param pipelines the pipeline file as a ascii string
 * @param section_pos the position in the string where the section starts
 */
struct section *parser_section(char *pipelines, int *section_pos)
{
c01095cb:	55                   	push   %ebp
c01095cc:	89 e5                	mov    %esp,%ebp
c01095ce:	83 ec 28             	sub    $0x28,%esp
    find_next_section(pipelines, section_pos);
c01095d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01095db:	89 04 24             	mov    %eax,(%esp)
c01095de:	e8 b8 01 00 00       	call   c010979b <find_next_section>

    (*section_pos) += 7;
c01095e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095e6:	8b 00                	mov    (%eax),%eax
c01095e8:	8d 50 07             	lea    0x7(%eax),%edx
c01095eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095ee:	89 10                	mov    %edx,(%eax)

    skip_whitespaces(pipelines, section_pos);
c01095f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01095fa:	89 04 24             	mov    %eax,(%esp)
c01095fd:	e8 cb 02 00 00       	call   c01098cd <skip_whitespaces>

    int section_name_length = count_sectionname_length(pipelines, section_pos);
c0109602:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109605:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109609:	8b 45 08             	mov    0x8(%ebp),%eax
c010960c:	89 04 24             	mov    %eax,(%esp)
c010960f:	e8 f3 02 00 00       	call   c0109907 <count_sectionname_length>
c0109614:	89 45 f4             	mov    %eax,-0xc(%ebp)

    struct section *this = (struct section *)malloc(sizeof(struct section));
c0109617:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010961e:	e8 79 40 00 00       	call   c010d69c <malloc>
c0109623:	89 45 f0             	mov    %eax,-0x10(%ebp)
    this->name = (char *)malloc(sizeof(char) * (section_name_length + 1));
c0109626:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109629:	83 c0 01             	add    $0x1,%eax
c010962c:	89 04 24             	mov    %eax,(%esp)
c010962f:	e8 68 40 00 00       	call   c010d69c <malloc>
c0109634:	89 c2                	mov    %eax,%edx
c0109636:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109639:	89 50 04             	mov    %edx,0x4(%eax)
    memset(this->name, '\0',sizeof(char) * (section_name_length + 1));
c010963c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010963f:	83 c0 01             	add    $0x1,%eax
c0109642:	89 c2                	mov    %eax,%edx
c0109644:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109647:	8b 40 04             	mov    0x4(%eax),%eax
c010964a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010964e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109655:	00 
c0109656:	89 04 24             	mov    %eax,(%esp)
c0109659:	e8 17 99 ff ff       	call   c0102f75 <memset>
    strncpy(this->name, &pipelines[(*section_pos)], section_name_length);
c010965e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109661:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109664:	8b 00                	mov    (%eax),%eax
c0109666:	89 c1                	mov    %eax,%ecx
c0109668:	8b 45 08             	mov    0x8(%ebp),%eax
c010966b:	01 c1                	add    %eax,%ecx
c010966d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109670:	8b 40 04             	mov    0x4(%eax),%eax
c0109673:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109677:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010967b:	89 04 24             	mov    %eax,(%esp)
c010967e:	e8 1e 94 ff ff       	call   c0102aa1 <strncpy>
    (*section_pos) += section_name_length;
c0109683:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109686:	8b 10                	mov    (%eax),%edx
c0109688:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010968b:	01 c2                	add    %eax,%edx
c010968d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109690:	89 10                	mov    %edx,(%eax)
    this->type = get_section_type(pipelines, section_pos);
c0109692:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109695:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109699:	8b 45 08             	mov    0x8(%ebp),%eax
c010969c:	89 04 24             	mov    %eax,(%esp)
c010969f:	e8 a8 02 00 00       	call   c010994c <get_section_type>
c01096a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01096a7:	89 02                	mov    %eax,(%edx)
    skip_until_colon(pipelines, section_pos);
c01096a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01096b3:	89 04 24             	mov    %eax,(%esp)
c01096b6:	e8 e8 03 00 00       	call   c0109aa3 <skip_until_colon>
    int section_end = find_end_of_section(pipelines, section_pos);
c01096bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c5:	89 04 24             	mov    %eax,(%esp)
c01096c8:	e8 5e 01 00 00       	call   c010982b <find_end_of_section>
c01096cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    this->subtree = list_create();
c01096d0:	e8 a9 8e ff ff       	call   c010257e <list_create>
c01096d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01096d8:	89 42 08             	mov    %eax,0x8(%edx)

    for(; (*section_pos) < section_end; (*section_pos)++)
c01096db:	e9 a8 00 00 00       	jmp    c0109788 <parser_section+0x1bd>
    {
        if(pipelines[(*section_pos)] == '#')
c01096e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096e3:	8b 00                	mov    (%eax),%eax
c01096e5:	89 c2                	mov    %eax,%edx
c01096e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ea:	01 d0                	add    %edx,%eax
c01096ec:	0f b6 00             	movzbl (%eax),%eax
c01096ef:	3c 23                	cmp    $0x23,%al
c01096f1:	75 41                	jne    c0109734 <parser_section+0x169>
        {
            while(pipelines[(*section_pos)] != '\n' && pipelines[(*section_pos)] != '\0' && (*section_pos) <= section_end)
c01096f3:	eb 0d                	jmp    c0109702 <parser_section+0x137>
                (*section_pos)++;
c01096f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096f8:	8b 00                	mov    (%eax),%eax
c01096fa:	8d 50 01             	lea    0x1(%eax),%edx
c01096fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109700:	89 10                	mov    %edx,(%eax)

    for(; (*section_pos) < section_end; (*section_pos)++)
    {
        if(pipelines[(*section_pos)] == '#')
        {
            while(pipelines[(*section_pos)] != '\n' && pipelines[(*section_pos)] != '\0' && (*section_pos) <= section_end)
c0109702:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109705:	8b 00                	mov    (%eax),%eax
c0109707:	89 c2                	mov    %eax,%edx
c0109709:	8b 45 08             	mov    0x8(%ebp),%eax
c010970c:	01 d0                	add    %edx,%eax
c010970e:	0f b6 00             	movzbl (%eax),%eax
c0109711:	3c 0a                	cmp    $0xa,%al
c0109713:	74 66                	je     c010977b <parser_section+0x1b0>
c0109715:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109718:	8b 00                	mov    (%eax),%eax
c010971a:	89 c2                	mov    %eax,%edx
c010971c:	8b 45 08             	mov    0x8(%ebp),%eax
c010971f:	01 d0                	add    %edx,%eax
c0109721:	0f b6 00             	movzbl (%eax),%eax
c0109724:	84 c0                	test   %al,%al
c0109726:	74 53                	je     c010977b <parser_section+0x1b0>
c0109728:	8b 45 0c             	mov    0xc(%ebp),%eax
c010972b:	8b 00                	mov    (%eax),%eax
c010972d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109730:	7e c3                	jle    c01096f5 <parser_section+0x12a>
c0109732:	eb 47                	jmp    c010977b <parser_section+0x1b0>
                (*section_pos)++;
        }
        else if(pipelines[(*section_pos)] == '<')
c0109734:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109737:	8b 00                	mov    (%eax),%eax
c0109739:	89 c2                	mov    %eax,%edx
c010973b:	8b 45 08             	mov    0x8(%ebp),%eax
c010973e:	01 d0                	add    %edx,%eax
c0109740:	0f b6 00             	movzbl (%eax),%eax
c0109743:	3c 3c                	cmp    $0x3c,%al
c0109745:	75 34                	jne    c010977b <parser_section+0x1b0>
        {
            struct pnode *node = parser_pnode(pipelines, section_pos, this->subtree);
c0109747:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010974a:	8b 40 08             	mov    0x8(%eax),%eax
c010974d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109751:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109754:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109758:	8b 45 08             	mov    0x8(%ebp),%eax
c010975b:	89 04 24             	mov    %eax,(%esp)
c010975e:	e8 7f 03 00 00       	call   c0109ae2 <parser_pnode>
c0109763:	89 45 e8             	mov    %eax,-0x18(%ebp)

            list_push_front(this->subtree, node);
c0109766:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109769:	8b 40 08             	mov    0x8(%eax),%eax
c010976c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010976f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109773:	89 04 24             	mov    %eax,(%esp)
c0109776:	e8 3a 8f ff ff       	call   c01026b5 <list_push_front>
    this->type = get_section_type(pipelines, section_pos);
    skip_until_colon(pipelines, section_pos);
    int section_end = find_end_of_section(pipelines, section_pos);
    this->subtree = list_create();

    for(; (*section_pos) < section_end; (*section_pos)++)
c010977b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010977e:	8b 00                	mov    (%eax),%eax
c0109780:	8d 50 01             	lea    0x1(%eax),%edx
c0109783:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109786:	89 10                	mov    %edx,(%eax)
c0109788:	8b 45 0c             	mov    0xc(%ebp),%eax
c010978b:	8b 00                	mov    (%eax),%eax
c010978d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109790:	0f 8c 4a ff ff ff    	jl     c01096e0 <parser_section+0x115>

            list_push_front(this->subtree, node);
        }
    }

    return this;
c0109796:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109799:	c9                   	leave  
c010979a:	c3                   	ret    

c010979b <find_next_section>:
 * @param pipelines the pipeline file as a ascii string
 * @param search_begin the point in the string where i should start searching
 * @return the position of the next section
 */
int find_next_section(char *pipelines, int *search_begin)
{
c010979b:	55                   	push   %ebp
c010979c:	89 e5                	mov    %esp,%ebp
c010979e:	83 ec 18             	sub    $0x18,%esp
    for(; pipelines[(*search_begin) + STRING_SECTION_LEN] != '\0'; (*search_begin)++)
c01097a1:	eb 6a                	jmp    c010980d <find_next_section+0x72>
    {
        if(pipelines[(*search_begin)] == '#')
c01097a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097a6:	8b 00                	mov    (%eax),%eax
c01097a8:	89 c2                	mov    %eax,%edx
c01097aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ad:	01 d0                	add    %edx,%eax
c01097af:	0f b6 00             	movzbl (%eax),%eax
c01097b2:	3c 23                	cmp    $0x23,%al
c01097b4:	75 22                	jne    c01097d8 <find_next_section+0x3d>
            for(; pipelines[(*search_begin)] != '\n'; (*search_begin)++);
c01097b6:	eb 0d                	jmp    c01097c5 <find_next_section+0x2a>
c01097b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097bb:	8b 00                	mov    (%eax),%eax
c01097bd:	8d 50 01             	lea    0x1(%eax),%edx
c01097c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097c3:	89 10                	mov    %edx,(%eax)
c01097c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097c8:	8b 00                	mov    (%eax),%eax
c01097ca:	89 c2                	mov    %eax,%edx
c01097cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01097cf:	01 d0                	add    %edx,%eax
c01097d1:	0f b6 00             	movzbl (%eax),%eax
c01097d4:	3c 0a                	cmp    $0xa,%al
c01097d6:	75 e0                	jne    c01097b8 <find_next_section+0x1d>

        if(strncmp(&pipelines[(*search_begin)], "section", STRING_SECTION_LEN) == 0)
c01097d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097db:	8b 00                	mov    (%eax),%eax
c01097dd:	89 c2                	mov    %eax,%edx
c01097df:	8b 45 08             	mov    0x8(%ebp),%eax
c01097e2:	01 d0                	add    %edx,%eax
c01097e4:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c01097eb:	00 
c01097ec:	c7 44 24 04 c5 1b 11 	movl   $0xc0111bc5,0x4(%esp)
c01097f3:	c0 
c01097f4:	89 04 24             	mov    %eax,(%esp)
c01097f7:	e8 d7 93 ff ff       	call   c0102bd3 <strncmp>
c01097fc:	85 c0                	test   %eax,%eax
c01097fe:	74 23                	je     c0109823 <find_next_section+0x88>
 * @param search_begin the point in the string where i should start searching
 * @return the position of the next section
 */
int find_next_section(char *pipelines, int *search_begin)
{
    for(; pipelines[(*search_begin) + STRING_SECTION_LEN] != '\0'; (*search_begin)++)
c0109800:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109803:	8b 00                	mov    (%eax),%eax
c0109805:	8d 50 01             	lea    0x1(%eax),%edx
c0109808:	8b 45 0c             	mov    0xc(%ebp),%eax
c010980b:	89 10                	mov    %edx,(%eax)
c010980d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109810:	8b 00                	mov    (%eax),%eax
c0109812:	8d 50 06             	lea    0x6(%eax),%edx
c0109815:	8b 45 08             	mov    0x8(%ebp),%eax
c0109818:	01 d0                	add    %edx,%eax
c010981a:	0f b6 00             	movzbl (%eax),%eax
c010981d:	84 c0                	test   %al,%al
c010981f:	75 82                	jne    c01097a3 <find_next_section+0x8>
c0109821:	eb 01                	jmp    c0109824 <find_next_section+0x89>
    {
        if(pipelines[(*search_begin)] == '#')
            for(; pipelines[(*search_begin)] != '\n'; (*search_begin)++);

        if(strncmp(&pipelines[(*search_begin)], "section", STRING_SECTION_LEN) == 0)
            break;
c0109823:	90                   	nop
    }


    return (*search_begin);
c0109824:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109827:	8b 00                	mov    (%eax),%eax
}
c0109829:	c9                   	leave  
c010982a:	c3                   	ret    

c010982b <find_end_of_section>:
 * @param pipelines the pipeline file as a ascii string
 * @param search_begin the point in the string where i should start searching
 * @return the point of the end of the current section
 */
int find_end_of_section(char *pipelines, int *search_begin)
{
c010982b:	55                   	push   %ebp
c010982c:	89 e5                	mov    %esp,%ebp
c010982e:	83 ec 28             	sub    $0x28,%esp
    int i;

    for(i = (*search_begin); pipelines[i + STRING_SECTION_LEN] != '\0'; i++)
c0109831:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109834:	8b 00                	mov    (%eax),%eax
c0109836:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109839:	eb 4c                	jmp    c0109887 <find_end_of_section+0x5c>
    {
        if(pipelines[i] == '#')
c010983b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010983e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109841:	01 d0                	add    %edx,%eax
c0109843:	0f b6 00             	movzbl (%eax),%eax
c0109846:	3c 23                	cmp    $0x23,%al
c0109848:	75 15                	jne    c010985f <find_end_of_section+0x34>
            for(; pipelines[i] != '\n'; i++);
c010984a:	eb 04                	jmp    c0109850 <find_end_of_section+0x25>
c010984c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109850:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109853:	8b 45 08             	mov    0x8(%ebp),%eax
c0109856:	01 d0                	add    %edx,%eax
c0109858:	0f b6 00             	movzbl (%eax),%eax
c010985b:	3c 0a                	cmp    $0xa,%al
c010985d:	75 ed                	jne    c010984c <find_end_of_section+0x21>

        if(strncmp(&pipelines[i], "section", STRING_SECTION_LEN) == 0)
c010985f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109862:	8b 45 08             	mov    0x8(%ebp),%eax
c0109865:	01 d0                	add    %edx,%eax
c0109867:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c010986e:	00 
c010986f:	c7 44 24 04 c5 1b 11 	movl   $0xc0111bc5,0x4(%esp)
c0109876:	c0 
c0109877:	89 04 24             	mov    %eax,(%esp)
c010987a:	e8 54 93 ff ff       	call   c0102bd3 <strncmp>
c010987f:	85 c0                	test   %eax,%eax
c0109881:	74 18                	je     c010989b <find_end_of_section+0x70>
 */
int find_end_of_section(char *pipelines, int *search_begin)
{
    int i;

    for(i = (*search_begin); pipelines[i + STRING_SECTION_LEN] != '\0'; i++)
c0109883:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109887:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010988a:	8d 50 06             	lea    0x6(%eax),%edx
c010988d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109890:	01 d0                	add    %edx,%eax
c0109892:	0f b6 00             	movzbl (%eax),%eax
c0109895:	84 c0                	test   %al,%al
c0109897:	75 a2                	jne    c010983b <find_end_of_section+0x10>
c0109899:	eb 01                	jmp    c010989c <find_end_of_section+0x71>
    {
        if(pipelines[i] == '#')
            for(; pipelines[i] != '\n'; i++);

        if(strncmp(&pipelines[i], "section", STRING_SECTION_LEN) == 0)
            break;
c010989b:	90                   	nop
    }

    return i;
c010989c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010989f:	c9                   	leave  
c01098a0:	c3                   	ret    

c01098a1 <is_whitespace>:
 * @brief checks if a character is a whitespace
 * @param character the character
 * @return true or false
 */
bool is_whitespace(char character)
{
c01098a1:	55                   	push   %ebp
c01098a2:	89 e5                	mov    %esp,%ebp
c01098a4:	83 ec 04             	sub    $0x4,%esp
c01098a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01098aa:	88 45 fc             	mov    %al,-0x4(%ebp)
    return ((character == ' ' || character == '\t' || character == '\n') ? true : false);
c01098ad:	80 7d fc 20          	cmpb   $0x20,-0x4(%ebp)
c01098b1:	74 0c                	je     c01098bf <is_whitespace+0x1e>
c01098b3:	80 7d fc 09          	cmpb   $0x9,-0x4(%ebp)
c01098b7:	74 06                	je     c01098bf <is_whitespace+0x1e>
c01098b9:	80 7d fc 0a          	cmpb   $0xa,-0x4(%ebp)
c01098bd:	75 07                	jne    c01098c6 <is_whitespace+0x25>
c01098bf:	b8 01 00 00 00       	mov    $0x1,%eax
c01098c4:	eb 05                	jmp    c01098cb <is_whitespace+0x2a>
c01098c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01098cb:	c9                   	leave  
c01098cc:	c3                   	ret    

c01098cd <skip_whitespaces>:
 * @param pipelines the string
 * @param start the current position in the string
 * @return the new position in the string
 */
int skip_whitespaces(char *pipelines, int *start)
{
c01098cd:	55                   	push   %ebp
c01098ce:	89 e5                	mov    %esp,%ebp
c01098d0:	83 ec 04             	sub    $0x4,%esp
    for(; is_whitespace(pipelines[(*start)]); (*start)++);
c01098d3:	eb 0d                	jmp    c01098e2 <skip_whitespaces+0x15>
c01098d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098d8:	8b 00                	mov    (%eax),%eax
c01098da:	8d 50 01             	lea    0x1(%eax),%edx
c01098dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098e0:	89 10                	mov    %edx,(%eax)
c01098e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098e5:	8b 00                	mov    (%eax),%eax
c01098e7:	89 c2                	mov    %eax,%edx
c01098e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ec:	01 d0                	add    %edx,%eax
c01098ee:	0f b6 00             	movzbl (%eax),%eax
c01098f1:	0f be c0             	movsbl %al,%eax
c01098f4:	89 04 24             	mov    %eax,(%esp)
c01098f7:	e8 a5 ff ff ff       	call   c01098a1 <is_whitespace>
c01098fc:	85 c0                	test   %eax,%eax
c01098fe:	75 d5                	jne    c01098d5 <skip_whitespaces+0x8>

    return (*start);
c0109900:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109903:	8b 00                	mov    (%eax),%eax
}
c0109905:	c9                   	leave  
c0109906:	c3                   	ret    

c0109907 <count_sectionname_length>:
 * @param pipelines the string in which the section name is
 * @param start the position of the section name
 * @return the length of the sections name
 */
int count_sectionname_length(char *pipelines, int *start)
{
c0109907:	55                   	push   %ebp
c0109908:	89 e5                	mov    %esp,%ebp
c010990a:	83 ec 14             	sub    $0x14,%esp
    int i = (*start);
c010990d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109910:	8b 00                	mov    (%eax),%eax
c0109912:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int nr = 0;
c0109915:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    for(nr = 0; !is_whitespace(pipelines[i]); i++)
c010991c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0109923:	eb 08                	jmp    c010992d <count_sectionname_length+0x26>
        nr++;
c0109925:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
int count_sectionname_length(char *pipelines, int *start)
{
    int i = (*start);
    int nr = 0;

    for(nr = 0; !is_whitespace(pipelines[i]); i++)
c0109929:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010992d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109930:	8b 45 08             	mov    0x8(%ebp),%eax
c0109933:	01 d0                	add    %edx,%eax
c0109935:	0f b6 00             	movzbl (%eax),%eax
c0109938:	0f be c0             	movsbl %al,%eax
c010993b:	89 04 24             	mov    %eax,(%esp)
c010993e:	e8 5e ff ff ff       	call   c01098a1 <is_whitespace>
c0109943:	85 c0                	test   %eax,%eax
c0109945:	74 de                	je     c0109925 <count_sectionname_length+0x1e>
        nr++;

    return nr;
c0109947:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010994a:	c9                   	leave  
c010994b:	c3                   	ret    

c010994c <get_section_type>:
 * @param pipelines the string in which i should look up the section type
 * @param start the position of the section type definition
 * @return the type of the section
 */
ptype get_section_type(char *pipelines, int *start)
{
c010994c:	55                   	push   %ebp
c010994d:	89 e5                	mov    %esp,%ebp
c010994f:	83 ec 28             	sub    $0x28,%esp
    ptype t = NOTHING;
c0109952:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    if(check_section_type_given(pipelines, start) == false)
c0109959:	8b 45 0c             	mov    0xc(%ebp),%eax
c010995c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109960:	8b 45 08             	mov    0x8(%ebp),%eax
c0109963:	89 04 24             	mov    %eax,(%esp)
c0109966:	e8 be 00 00 00       	call   c0109a29 <check_section_type_given>
c010996b:	85 c0                	test   %eax,%eax
c010996d:	75 0a                	jne    c0109979 <get_section_type+0x2d>
        return UNDEFINED;
c010996f:	b8 20 00 00 00       	mov    $0x20,%eax
c0109974:	e9 ae 00 00 00       	jmp    c0109a27 <get_section_type+0xdb>

    skip_whitespaces(pipelines, start);
c0109979:	8b 45 0c             	mov    0xc(%ebp),%eax
c010997c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109980:	8b 45 08             	mov    0x8(%ebp),%eax
c0109983:	89 04 24             	mov    %eax,(%esp)
c0109986:	e8 42 ff ff ff       	call   c01098cd <skip_whitespaces>
    (*start)++;
c010998b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010998e:	8b 00                	mov    (%eax),%eax
c0109990:	8d 50 01             	lea    0x1(%eax),%edx
c0109993:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109996:	89 10                	mov    %edx,(%eax)

    if(strncmp(&pipelines[(*start)], "replace", STRING_REPLACE_LEN) == 0)
c0109998:	8b 45 0c             	mov    0xc(%ebp),%eax
c010999b:	8b 00                	mov    (%eax),%eax
c010999d:	89 c2                	mov    %eax,%edx
c010999f:	8b 45 08             	mov    0x8(%ebp),%eax
c01099a2:	01 d0                	add    %edx,%eax
c01099a4:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c01099ab:	00 
c01099ac:	c7 44 24 04 cd 1b 11 	movl   $0xc0111bcd,0x4(%esp)
c01099b3:	c0 
c01099b4:	89 04 24             	mov    %eax,(%esp)
c01099b7:	e8 17 92 ff ff       	call   c0102bd3 <strncmp>
c01099bc:	85 c0                	test   %eax,%eax
c01099be:	75 13                	jne    c01099d3 <get_section_type+0x87>
    {
        t |= REPLACE;
c01099c0:	83 4d f4 08          	orl    $0x8,-0xc(%ebp)
        (*start) += (STRING_REPLACE_LEN + 1);
c01099c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099c7:	8b 00                	mov    (%eax),%eax
c01099c9:	8d 50 07             	lea    0x7(%eax),%edx
c01099cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099cf:	89 10                	mov    %edx,(%eax)
c01099d1:	eb 51                	jmp    c0109a24 <get_section_type+0xd8>
    }
    else if(strncmp(&pipelines[(*start)], "append", STRING_APPEND_LEN) == 0)
c01099d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099d6:	8b 00                	mov    (%eax),%eax
c01099d8:	89 c2                	mov    %eax,%edx
c01099da:	8b 45 08             	mov    0x8(%ebp),%eax
c01099dd:	01 d0                	add    %edx,%eax
c01099df:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
c01099e6:	00 
c01099e7:	c7 44 24 04 d5 1b 11 	movl   $0xc0111bd5,0x4(%esp)
c01099ee:	c0 
c01099ef:	89 04 24             	mov    %eax,(%esp)
c01099f2:	e8 dc 91 ff ff       	call   c0102bd3 <strncmp>
c01099f7:	85 c0                	test   %eax,%eax
c01099f9:	75 13                	jne    c0109a0e <get_section_type+0xc2>
    {
        t |= APPEND;
c01099fb:	83 4d f4 10          	orl    $0x10,-0xc(%ebp)
        (*start) += (STRING_APPEND_LEN + 1);
c01099ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a02:	8b 00                	mov    (%eax),%eax
c0109a04:	8d 50 06             	lea    0x6(%eax),%edx
c0109a07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a0a:	89 10                	mov    %edx,(%eax)
c0109a0c:	eb 16                	jmp    c0109a24 <get_section_type+0xd8>
    }
    else
    {
        t |= FAILTURE;
c0109a0e:	83 4d f4 40          	orl    $0x40,-0xc(%ebp)
        skip_until_whitespace(pipelines, start);
c0109a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a1c:	89 04 24             	mov    %eax,(%esp)
c0109a1f:	e8 45 00 00 00       	call   c0109a69 <skip_until_whitespace>
    }

    return t;
c0109a24:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109a27:	c9                   	leave  
c0109a28:	c3                   	ret    

c0109a29 <check_section_type_given>:
 * @param pipelines the string in which the section type could be
 * @param start the position where i should look for a section type
 * @return true or false
 */
bool check_section_type_given(char *pipelines, int *start)
{
c0109a29:	55                   	push   %ebp
c0109a2a:	89 e5                	mov    %esp,%ebp
c0109a2c:	83 ec 10             	sub    $0x10,%esp
    int i = (*start);
c0109a2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a32:	8b 00                	mov    (%eax),%eax
c0109a34:	89 45 fc             	mov    %eax,-0x4(%ebp)

    for(; pipelines[i] != ':'; i++)
c0109a37:	eb 1a                	jmp    c0109a53 <check_section_type_given+0x2a>
        if(pipelines[i] == '(')
c0109a39:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a3f:	01 d0                	add    %edx,%eax
c0109a41:	0f b6 00             	movzbl (%eax),%eax
c0109a44:	3c 28                	cmp    $0x28,%al
c0109a46:	75 07                	jne    c0109a4f <check_section_type_given+0x26>
            return true;
c0109a48:	b8 01 00 00 00       	mov    $0x1,%eax
c0109a4d:	eb 18                	jmp    c0109a67 <check_section_type_given+0x3e>
 */
bool check_section_type_given(char *pipelines, int *start)
{
    int i = (*start);

    for(; pipelines[i] != ':'; i++)
c0109a4f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109a53:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a56:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a59:	01 d0                	add    %edx,%eax
c0109a5b:	0f b6 00             	movzbl (%eax),%eax
c0109a5e:	3c 3a                	cmp    $0x3a,%al
c0109a60:	75 d7                	jne    c0109a39 <check_section_type_given+0x10>
        if(pipelines[i] == '(')
            return true;

    return false;
c0109a62:	b8 00 00 00 00       	mov    $0x0,%eax

}
c0109a67:	c9                   	leave  
c0109a68:	c3                   	ret    

c0109a69 <skip_until_whitespace>:
 * @param pipelines the string
 * @param start the current position
 * @return the position after skipping the characters
 */
int skip_until_whitespace(char *pipelines, int *start)
{
c0109a69:	55                   	push   %ebp
c0109a6a:	89 e5                	mov    %esp,%ebp
c0109a6c:	83 ec 04             	sub    $0x4,%esp
    for(; !is_whitespace(pipelines[(*start)]); (*start)++);
c0109a6f:	eb 0d                	jmp    c0109a7e <skip_until_whitespace+0x15>
c0109a71:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a74:	8b 00                	mov    (%eax),%eax
c0109a76:	8d 50 01             	lea    0x1(%eax),%edx
c0109a79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a7c:	89 10                	mov    %edx,(%eax)
c0109a7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a81:	8b 00                	mov    (%eax),%eax
c0109a83:	89 c2                	mov    %eax,%edx
c0109a85:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a88:	01 d0                	add    %edx,%eax
c0109a8a:	0f b6 00             	movzbl (%eax),%eax
c0109a8d:	0f be c0             	movsbl %al,%eax
c0109a90:	89 04 24             	mov    %eax,(%esp)
c0109a93:	e8 09 fe ff ff       	call   c01098a1 <is_whitespace>
c0109a98:	85 c0                	test   %eax,%eax
c0109a9a:	74 d5                	je     c0109a71 <skip_until_whitespace+0x8>

    return (*start);
c0109a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a9f:	8b 00                	mov    (%eax),%eax
}
c0109aa1:	c9                   	leave  
c0109aa2:	c3                   	ret    

c0109aa3 <skip_until_colon>:
 * @param pipelines the string
 * @param start the current position
 * @return the position after skipping the characters
 */
int skip_until_colon(char *pipelines, int *start)
{
c0109aa3:	55                   	push   %ebp
c0109aa4:	89 e5                	mov    %esp,%ebp
    for(; pipelines[(*start)] != ':' && pipelines[(*start)] != '\0'; (*start)++);
c0109aa6:	eb 0d                	jmp    c0109ab5 <skip_until_colon+0x12>
c0109aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109aab:	8b 00                	mov    (%eax),%eax
c0109aad:	8d 50 01             	lea    0x1(%eax),%edx
c0109ab0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ab3:	89 10                	mov    %edx,(%eax)
c0109ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ab8:	8b 00                	mov    (%eax),%eax
c0109aba:	89 c2                	mov    %eax,%edx
c0109abc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109abf:	01 d0                	add    %edx,%eax
c0109ac1:	0f b6 00             	movzbl (%eax),%eax
c0109ac4:	3c 3a                	cmp    $0x3a,%al
c0109ac6:	74 13                	je     c0109adb <skip_until_colon+0x38>
c0109ac8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109acb:	8b 00                	mov    (%eax),%eax
c0109acd:	89 c2                	mov    %eax,%edx
c0109acf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ad2:	01 d0                	add    %edx,%eax
c0109ad4:	0f b6 00             	movzbl (%eax),%eax
c0109ad7:	84 c0                	test   %al,%al
c0109ad9:	75 cd                	jne    c0109aa8 <skip_until_colon+0x5>

    return (*start);
c0109adb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ade:	8b 00                	mov    (%eax),%eax
}
c0109ae0:	5d                   	pop    %ebp
c0109ae1:	c3                   	ret    

c0109ae2 <parser_pnode>:
 * @param start the position of the pnode
 * @param other a list of all pnodes until here (for services)
 * @return a pointer to the pnode struct
 */
struct pnode *parser_pnode(char *pipelines, int *start, list_t *other)
{
c0109ae2:	55                   	push   %ebp
c0109ae3:	89 e5                	mov    %esp,%ebp
c0109ae5:	83 ec 38             	sub    $0x38,%esp
    struct pnode *node = (struct pnode *)malloc(sizeof(struct pnode));
c0109ae8:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0109aef:	e8 a8 3b 00 00       	call   c010d69c <malloc>
c0109af4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int pnode_end = find_pnode_end(pipelines, start);
c0109af7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109afa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109afe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b01:	89 04 24             	mov    %eax,(%esp)
c0109b04:	e8 76 02 00 00       	call   c0109d7f <find_pnode_end>
c0109b09:	89 45 ec             	mov    %eax,-0x14(%ebp)
    node->type = get_ptype(pipelines, (*start), pnode_end);
c0109b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b0f:	8b 00                	mov    (%eax),%eax
c0109b11:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109b14:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109b18:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b1f:	89 04 24             	mov    %eax,(%esp)
c0109b22:	e8 59 03 00 00       	call   c0109e80 <get_ptype>
c0109b27:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b2a:	89 42 04             	mov    %eax,0x4(%edx)
    node->file = get_pnode_filename(pipelines, (*start), pnode_end);
c0109b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b30:	8b 00                	mov    (%eax),%eax
c0109b32:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109b35:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109b39:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b40:	89 04 24             	mov    %eax,(%esp)
c0109b43:	e8 8c 03 00 00       	call   c0109ed4 <get_pnode_filename>
c0109b48:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b4b:	89 02                	mov    %eax,(%edx)
    node->subtree = list_create();
c0109b4d:	e8 2c 8a ff ff       	call   c010257e <list_create>
c0109b52:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b55:	89 42 0c             	mov    %eax,0xc(%edx)

    (*start) = pnode_end;
c0109b58:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b5b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109b5e:	89 10                	mov    %edx,(%eax)

    for(; pipelines[(*start)] != ';'; (*start)++)
c0109b60:	e9 fe 01 00 00       	jmp    c0109d63 <parser_pnode+0x281>
    {
        if(pipelines[(*start)] == '|')
c0109b65:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b68:	8b 00                	mov    (%eax),%eax
c0109b6a:	89 c2                	mov    %eax,%edx
c0109b6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b6f:	01 d0                	add    %edx,%eax
c0109b71:	0f b6 00             	movzbl (%eax),%eax
c0109b74:	3c 7c                	cmp    $0x7c,%al
c0109b76:	0f 85 ee 00 00 00    	jne    c0109c6a <parser_pnode+0x188>
        {
            for(; pipelines[(*start)] != '<' && pipelines[(*start)] != '['; (*start)++);
c0109b7c:	eb 0d                	jmp    c0109b8b <parser_pnode+0xa9>
c0109b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b81:	8b 00                	mov    (%eax),%eax
c0109b83:	8d 50 01             	lea    0x1(%eax),%edx
c0109b86:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b89:	89 10                	mov    %edx,(%eax)
c0109b8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b8e:	8b 00                	mov    (%eax),%eax
c0109b90:	89 c2                	mov    %eax,%edx
c0109b92:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b95:	01 d0                	add    %edx,%eax
c0109b97:	0f b6 00             	movzbl (%eax),%eax
c0109b9a:	3c 3c                	cmp    $0x3c,%al
c0109b9c:	74 13                	je     c0109bb1 <parser_pnode+0xcf>
c0109b9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ba1:	8b 00                	mov    (%eax),%eax
c0109ba3:	89 c2                	mov    %eax,%edx
c0109ba5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ba8:	01 d0                	add    %edx,%eax
c0109baa:	0f b6 00             	movzbl (%eax),%eax
c0109bad:	3c 5b                	cmp    $0x5b,%al
c0109baf:	75 cd                	jne    c0109b7e <parser_pnode+0x9c>

            if(pipelines[(*start)] == '<')
c0109bb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bb4:	8b 00                	mov    (%eax),%eax
c0109bb6:	89 c2                	mov    %eax,%edx
c0109bb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bbb:	01 d0                	add    %edx,%eax
c0109bbd:	0f b6 00             	movzbl (%eax),%eax
c0109bc0:	3c 3c                	cmp    $0x3c,%al
c0109bc2:	0f 85 89 00 00 00    	jne    c0109c51 <parser_pnode+0x16f>
            {
                struct pnode *subnode = parser_pnode(pipelines, start, other);
c0109bc8:	8b 45 10             	mov    0x10(%ebp),%eax
c0109bcb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109bcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109bd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd9:	89 04 24             	mov    %eax,(%esp)
c0109bdc:	e8 01 ff ff ff       	call   c0109ae2 <parser_pnode>
c0109be1:	89 45 e8             	mov    %eax,-0x18(%ebp)
                list_push_front(node->subtree, subnode);
c0109be4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109be7:	8b 40 0c             	mov    0xc(%eax),%eax
c0109bea:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109bed:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109bf1:	89 04 24             	mov    %eax,(%esp)
c0109bf4:	e8 bc 8a ff ff       	call   c01026b5 <list_push_front>
c0109bf9:	e9 58 01 00 00       	jmp    c0109d56 <parser_pnode+0x274>
            }
            else
            {
                for(; pipelines[(*start)] != ']'; (*start)++)
                {
                    if(pipelines[(*start)] == '<')
c0109bfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c01:	8b 00                	mov    (%eax),%eax
c0109c03:	89 c2                	mov    %eax,%edx
c0109c05:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c08:	01 d0                	add    %edx,%eax
c0109c0a:	0f b6 00             	movzbl (%eax),%eax
c0109c0d:	3c 3c                	cmp    $0x3c,%al
c0109c0f:	75 31                	jne    c0109c42 <parser_pnode+0x160>
                    {
                        struct pnode *subnode = parser_pnode(pipelines, start, other);
c0109c11:	8b 45 10             	mov    0x10(%ebp),%eax
c0109c14:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c22:	89 04 24             	mov    %eax,(%esp)
c0109c25:	e8 b8 fe ff ff       	call   c0109ae2 <parser_pnode>
c0109c2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                        list_push_front(node->subtree, subnode);
c0109c2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c30:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109c36:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109c3a:	89 04 24             	mov    %eax,(%esp)
c0109c3d:	e8 73 8a ff ff       	call   c01026b5 <list_push_front>

                //if(pipelines[(*start)] == ';')
            }
            else
            {
                for(; pipelines[(*start)] != ']'; (*start)++)
c0109c42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c45:	8b 00                	mov    (%eax),%eax
c0109c47:	8d 50 01             	lea    0x1(%eax),%edx
c0109c4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c4d:	89 10                	mov    %edx,(%eax)
c0109c4f:	eb 01                	jmp    c0109c52 <parser_pnode+0x170>
c0109c51:	90                   	nop
c0109c52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c55:	8b 00                	mov    (%eax),%eax
c0109c57:	89 c2                	mov    %eax,%edx
c0109c59:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c5c:	01 d0                	add    %edx,%eax
c0109c5e:	0f b6 00             	movzbl (%eax),%eax
c0109c61:	3c 5d                	cmp    $0x5d,%al
c0109c63:	75 99                	jne    c0109bfe <parser_pnode+0x11c>
c0109c65:	e9 ec 00 00 00       	jmp    c0109d56 <parser_pnode+0x274>
                        list_push_front(node->subtree, subnode);
                    }
                }
            }
        }
        else if(pipelines[(*start)] == '~')
c0109c6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c6d:	8b 00                	mov    (%eax),%eax
c0109c6f:	89 c2                	mov    %eax,%edx
c0109c71:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c74:	01 d0                	add    %edx,%eax
c0109c76:	0f b6 00             	movzbl (%eax),%eax
c0109c79:	3c 7e                	cmp    $0x7e,%al
c0109c7b:	0f 85 d5 00 00 00    	jne    c0109d56 <parser_pnode+0x274>
        {
            for(; pipelines[(*start)] != '<' && pipelines[(*start)] != '{'; (*start)++);
c0109c81:	eb 0d                	jmp    c0109c90 <parser_pnode+0x1ae>
c0109c83:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c86:	8b 00                	mov    (%eax),%eax
c0109c88:	8d 50 01             	lea    0x1(%eax),%edx
c0109c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c8e:	89 10                	mov    %edx,(%eax)
c0109c90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c93:	8b 00                	mov    (%eax),%eax
c0109c95:	89 c2                	mov    %eax,%edx
c0109c97:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c9a:	01 d0                	add    %edx,%eax
c0109c9c:	0f b6 00             	movzbl (%eax),%eax
c0109c9f:	3c 3c                	cmp    $0x3c,%al
c0109ca1:	74 13                	je     c0109cb6 <parser_pnode+0x1d4>
c0109ca3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ca6:	8b 00                	mov    (%eax),%eax
c0109ca8:	89 c2                	mov    %eax,%edx
c0109caa:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cad:	01 d0                	add    %edx,%eax
c0109caf:	0f b6 00             	movzbl (%eax),%eax
c0109cb2:	3c 7b                	cmp    $0x7b,%al
c0109cb4:	75 cd                	jne    c0109c83 <parser_pnode+0x1a1>

            if(pipelines[(*start)] == '<')
c0109cb6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cb9:	8b 00                	mov    (%eax),%eax
c0109cbb:	89 c2                	mov    %eax,%edx
c0109cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cc0:	01 d0                	add    %edx,%eax
c0109cc2:	0f b6 00             	movzbl (%eax),%eax
c0109cc5:	3c 3c                	cmp    $0x3c,%al
c0109cc7:	75 27                	jne    c0109cf0 <parser_pnode+0x20e>
            {
                struct pnode *subnode = parser_pnode(pipelines, start, other);
c0109cc9:	8b 45 10             	mov    0x10(%ebp),%eax
c0109ccc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cd3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109cd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cda:	89 04 24             	mov    %eax,(%esp)
c0109cdd:	e8 00 fe ff ff       	call   c0109ae2 <parser_pnode>
c0109ce2:	89 45 e0             	mov    %eax,-0x20(%ebp)
                node->fallback = subnode;
c0109ce5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ce8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109ceb:	89 50 08             	mov    %edx,0x8(%eax)
c0109cee:	eb 66                	jmp    c0109d56 <parser_pnode+0x274>
            }
            else
            {
                struct pnode *currentnode = node;
c0109cf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cf3:	89 45 f4             	mov    %eax,-0xc(%ebp)

                for(; pipelines[(*start)] != '}'; (*start)++)
c0109cf6:	eb 4b                	jmp    c0109d43 <parser_pnode+0x261>
                {
                    if(pipelines[(*start)] == '<')
c0109cf8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cfb:	8b 00                	mov    (%eax),%eax
c0109cfd:	89 c2                	mov    %eax,%edx
c0109cff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d02:	01 d0                	add    %edx,%eax
c0109d04:	0f b6 00             	movzbl (%eax),%eax
c0109d07:	3c 3c                	cmp    $0x3c,%al
c0109d09:	75 2b                	jne    c0109d36 <parser_pnode+0x254>
                    {
                        struct pnode *subnode = parser_pnode(pipelines, start, other);
c0109d0b:	8b 45 10             	mov    0x10(%ebp),%eax
c0109d0e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109d12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d19:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d1c:	89 04 24             	mov    %eax,(%esp)
c0109d1f:	e8 be fd ff ff       	call   c0109ae2 <parser_pnode>
c0109d24:	89 45 dc             	mov    %eax,-0x24(%ebp)
                        currentnode->fallback = subnode;
c0109d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d2a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109d2d:	89 50 08             	mov    %edx,0x8(%eax)
                        currentnode = subnode;
c0109d30:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109d33:	89 45 f4             	mov    %eax,-0xc(%ebp)
            }
            else
            {
                struct pnode *currentnode = node;

                for(; pipelines[(*start)] != '}'; (*start)++)
c0109d36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d39:	8b 00                	mov    (%eax),%eax
c0109d3b:	8d 50 01             	lea    0x1(%eax),%edx
c0109d3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d41:	89 10                	mov    %edx,(%eax)
c0109d43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d46:	8b 00                	mov    (%eax),%eax
c0109d48:	89 c2                	mov    %eax,%edx
c0109d4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d4d:	01 d0                	add    %edx,%eax
c0109d4f:	0f b6 00             	movzbl (%eax),%eax
c0109d52:	3c 7d                	cmp    $0x7d,%al
c0109d54:	75 a2                	jne    c0109cf8 <parser_pnode+0x216>
    node->file = get_pnode_filename(pipelines, (*start), pnode_end);
    node->subtree = list_create();

    (*start) = pnode_end;

    for(; pipelines[(*start)] != ';'; (*start)++)
c0109d56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d59:	8b 00                	mov    (%eax),%eax
c0109d5b:	8d 50 01             	lea    0x1(%eax),%edx
c0109d5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d61:	89 10                	mov    %edx,(%eax)
c0109d63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d66:	8b 00                	mov    (%eax),%eax
c0109d68:	89 c2                	mov    %eax,%edx
c0109d6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d6d:	01 d0                	add    %edx,%eax
c0109d6f:	0f b6 00             	movzbl (%eax),%eax
c0109d72:	3c 3b                	cmp    $0x3b,%al
c0109d74:	0f 85 eb fd ff ff    	jne    c0109b65 <parser_pnode+0x83>
                }
            }
        }
    }

    return node;
c0109d7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109d7d:	c9                   	leave  
c0109d7e:	c3                   	ret    

c0109d7f <find_pnode_end>:
 * @param pipelines the string in which the pnode is located
 * @param start the current position
 * @return the end of the pnode
 */
int find_pnode_end(char *pipelines, int *start)
{
c0109d7f:	55                   	push   %ebp
c0109d80:	89 e5                	mov    %esp,%ebp
c0109d82:	83 ec 10             	sub    $0x10,%esp
    int i;

    for(i = (*start); pipelines[i] != '\0'; i++)
c0109d85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d88:	8b 00                	mov    (%eax),%eax
c0109d8a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109d8d:	eb 49                	jmp    c0109dd8 <find_pnode_end+0x59>
    {
        if(pipelines[i] == '#')
c0109d8f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109d92:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d95:	01 d0                	add    %edx,%eax
c0109d97:	0f b6 00             	movzbl (%eax),%eax
c0109d9a:	3c 23                	cmp    $0x23,%al
c0109d9c:	75 15                	jne    c0109db3 <find_pnode_end+0x34>
            for(; pipelines[i] != '\n'; i++);
c0109d9e:	eb 04                	jmp    c0109da4 <find_pnode_end+0x25>
c0109da0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109da4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109da7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109daa:	01 d0                	add    %edx,%eax
c0109dac:	0f b6 00             	movzbl (%eax),%eax
c0109daf:	3c 0a                	cmp    $0xa,%al
c0109db1:	75 ed                	jne    c0109da0 <find_pnode_end+0x21>

        if(pipelines[i-1] != '-' && pipelines[i] == '>')
c0109db3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109db6:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109db9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dbc:	01 d0                	add    %edx,%eax
c0109dbe:	0f b6 00             	movzbl (%eax),%eax
c0109dc1:	3c 2d                	cmp    $0x2d,%al
c0109dc3:	74 0f                	je     c0109dd4 <find_pnode_end+0x55>
c0109dc5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109dc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dcb:	01 d0                	add    %edx,%eax
c0109dcd:	0f b6 00             	movzbl (%eax),%eax
c0109dd0:	3c 3e                	cmp    $0x3e,%al
c0109dd2:	74 15                	je     c0109de9 <find_pnode_end+0x6a>
 */
int find_pnode_end(char *pipelines, int *start)
{
    int i;

    for(i = (*start); pipelines[i] != '\0'; i++)
c0109dd4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109dd8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109ddb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dde:	01 d0                	add    %edx,%eax
c0109de0:	0f b6 00             	movzbl (%eax),%eax
c0109de3:	84 c0                	test   %al,%al
c0109de5:	75 a8                	jne    c0109d8f <find_pnode_end+0x10>
c0109de7:	eb 01                	jmp    c0109dea <find_pnode_end+0x6b>
    {
        if(pipelines[i] == '#')
            for(; pipelines[i] != '\n'; i++);

        if(pipelines[i-1] != '-' && pipelines[i] == '>')
            break;
c0109de9:	90                   	nop
    }

    return i;
c0109dea:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0109ded:	c9                   	leave  
c0109dee:	c3                   	ret    

c0109def <is_service>:
 * @param start the start of the pnode
 * @param end the end of the pnode
 * @return true or false
 */
bool is_service(char *pipelines, int start, int end)
{
c0109def:	55                   	push   %ebp
c0109df0:	89 e5                	mov    %esp,%ebp
c0109df2:	83 ec 28             	sub    $0x28,%esp
    int i;

    for(i = start; i < (end - STRING_SERVICE_LEN); i++)
c0109df5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109dfb:	eb 2f                	jmp    c0109e2c <is_service+0x3d>
        if(strncmp(&pipelines[i], "service", STRING_SERVICE_LEN) == 0)
c0109dfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e03:	01 d0                	add    %edx,%eax
c0109e05:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c0109e0c:	00 
c0109e0d:	c7 44 24 04 dc 1b 11 	movl   $0xc0111bdc,0x4(%esp)
c0109e14:	c0 
c0109e15:	89 04 24             	mov    %eax,(%esp)
c0109e18:	e8 b6 8d ff ff       	call   c0102bd3 <strncmp>
c0109e1d:	85 c0                	test   %eax,%eax
c0109e1f:	75 07                	jne    c0109e28 <is_service+0x39>
            return true;
c0109e21:	b8 01 00 00 00       	mov    $0x1,%eax
c0109e26:	eb 14                	jmp    c0109e3c <is_service+0x4d>
 */
bool is_service(char *pipelines, int start, int end)
{
    int i;

    for(i = start; i < (end - STRING_SERVICE_LEN); i++)
c0109e28:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109e2c:	8b 45 10             	mov    0x10(%ebp),%eax
c0109e2f:	83 e8 06             	sub    $0x6,%eax
c0109e32:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109e35:	7f c6                	jg     c0109dfd <is_service+0xe>
        if(strncmp(&pipelines[i], "service", STRING_SERVICE_LEN) == 0)
            return true;

    return false;
c0109e37:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e3c:	c9                   	leave  
c0109e3d:	c3                   	ret    

c0109e3e <is_kernelroot>:
 * @param start the start of the pnode
 * @param end the end of the pnode
 * @return true or false
 */
bool is_kernelroot(char *pipelines, int start, int end)
{
c0109e3e:	55                   	push   %ebp
c0109e3f:	89 e5                	mov    %esp,%ebp
c0109e41:	83 ec 10             	sub    $0x10,%esp
    int i;

    for(i = start; i < (end - ARROW_LEN); i++)
c0109e44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e47:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109e4a:	eb 22                	jmp    c0109e6e <is_kernelroot+0x30>
        if(strncmp(&pipelines[i], "->", ARROW_LEN) == 0)
c0109e4c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109e4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e52:	01 d0                	add    %edx,%eax
c0109e54:	0f b6 10             	movzbl (%eax),%edx
c0109e57:	b8 e4 1b 11 c0       	mov    $0xc0111be4,%eax
c0109e5c:	0f b6 00             	movzbl (%eax),%eax
c0109e5f:	38 c2                	cmp    %al,%dl
c0109e61:	75 07                	jne    c0109e6a <is_kernelroot+0x2c>
            return true;
c0109e63:	b8 01 00 00 00       	mov    $0x1,%eax
c0109e68:	eb 14                	jmp    c0109e7e <is_kernelroot+0x40>
 */
bool is_kernelroot(char *pipelines, int start, int end)
{
    int i;

    for(i = start; i < (end - ARROW_LEN); i++)
c0109e6a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109e6e:	8b 45 10             	mov    0x10(%ebp),%eax
c0109e71:	83 e8 01             	sub    $0x1,%eax
c0109e74:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109e77:	7f d3                	jg     c0109e4c <is_kernelroot+0xe>
        if(strncmp(&pipelines[i], "->", ARROW_LEN) == 0)
            return true;

    return false;
c0109e79:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e7e:	c9                   	leave  
c0109e7f:	c3                   	ret    

c0109e80 <get_ptype>:
 * @param start the start of the pnode
 * @param end the end of the pnode
 * @return the type of a pnode
 */
ptype get_ptype(char *pipelines, int start, int end)
{
c0109e80:	55                   	push   %ebp
c0109e81:	89 e5                	mov    %esp,%ebp
c0109e83:	83 ec 28             	sub    $0x28,%esp
    ptype result = NOTHING;
c0109e86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    if(is_service(pipelines, start, end))
c0109e8d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109e90:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e9e:	89 04 24             	mov    %eax,(%esp)
c0109ea1:	e8 49 ff ff ff       	call   c0109def <is_service>
c0109ea6:	85 c0                	test   %eax,%eax
c0109ea8:	74 04                	je     c0109eae <get_ptype+0x2e>
        result |= SERVICE;
c0109eaa:	83 4d f4 02          	orl    $0x2,-0xc(%ebp)

    if(is_kernelroot(pipelines, start, end))
c0109eae:	8b 45 10             	mov    0x10(%ebp),%eax
c0109eb1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109eb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eb8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ebc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ebf:	89 04 24             	mov    %eax,(%esp)
c0109ec2:	e8 77 ff ff ff       	call   c0109e3e <is_kernelroot>
c0109ec7:	85 c0                	test   %eax,%eax
c0109ec9:	74 04                	je     c0109ecf <get_ptype+0x4f>
        result |= KERNELROOT;
c0109ecb:	83 4d f4 04          	orl    $0x4,-0xc(%ebp)

    return result;
c0109ecf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109ed2:	c9                   	leave  
c0109ed3:	c3                   	ret    

c0109ed4 <get_pnode_filename>:
 * @param start the start of the pnode
 * @param end the end of the pnode
 * @return the name of a pnode
 */
char *get_pnode_filename(char *pipelines, int start, int end)
{
c0109ed4:	55                   	push   %ebp
c0109ed5:	89 e5                	mov    %esp,%ebp
c0109ed7:	83 ec 28             	sub    $0x28,%esp
    int i;

    for(i = start; pipelines[i] != '>'; i++)
c0109eda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109edd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ee0:	e9 ba 00 00 00       	jmp    c0109f9f <get_pnode_filename+0xcb>
    {
        if(!strncmp(&pipelines[i], "->", ARROW_LEN))
c0109ee5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109ee8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eeb:	01 d0                	add    %edx,%eax
c0109eed:	0f b6 10             	movzbl (%eax),%edx
c0109ef0:	b8 e4 1b 11 c0       	mov    $0xc0111be4,%eax
c0109ef5:	0f b6 00             	movzbl (%eax),%eax
c0109ef8:	38 c2                	cmp    %al,%dl
c0109efa:	75 09                	jne    c0109f05 <get_pnode_filename+0x31>
            i += ARROW_LEN;
c0109efc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109f00:	e9 96 00 00 00       	jmp    c0109f9b <get_pnode_filename+0xc7>
        else if(!strncmp(&pipelines[i], "service", STRING_SERVICE_LEN))
c0109f05:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f0b:	01 d0                	add    %edx,%eax
c0109f0d:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%esp)
c0109f14:	00 
c0109f15:	c7 44 24 04 dc 1b 11 	movl   $0xc0111bdc,0x4(%esp)
c0109f1c:	c0 
c0109f1d:	89 04 24             	mov    %eax,(%esp)
c0109f20:	e8 ae 8c ff ff       	call   c0102bd3 <strncmp>
c0109f25:	85 c0                	test   %eax,%eax
c0109f27:	75 06                	jne    c0109f2f <get_pnode_filename+0x5b>
            i += STRING_SERVICE_LEN;
c0109f29:	83 45 f4 06          	addl   $0x6,-0xc(%ebp)
c0109f2d:	eb 6c                	jmp    c0109f9b <get_pnode_filename+0xc7>
        else if(!is_whitespace(pipelines[i]) && pipelines[i] != '<')
c0109f2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f32:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f35:	01 d0                	add    %edx,%eax
c0109f37:	0f b6 00             	movzbl (%eax),%eax
c0109f3a:	0f be c0             	movsbl %al,%eax
c0109f3d:	89 04 24             	mov    %eax,(%esp)
c0109f40:	e8 5c f9 ff ff       	call   c01098a1 <is_whitespace>
c0109f45:	85 c0                	test   %eax,%eax
c0109f47:	75 52                	jne    c0109f9b <get_pnode_filename+0xc7>
c0109f49:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f4f:	01 d0                	add    %edx,%eax
c0109f51:	0f b6 00             	movzbl (%eax),%eax
c0109f54:	3c 3c                	cmp    $0x3c,%al
c0109f56:	74 43                	je     c0109f9b <get_pnode_filename+0xc7>
        {
            int len = end - i;
c0109f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f5b:	8b 55 10             	mov    0x10(%ebp),%edx
c0109f5e:	89 d1                	mov    %edx,%ecx
c0109f60:	29 c1                	sub    %eax,%ecx
c0109f62:	89 c8                	mov    %ecx,%eax
c0109f64:	89 45 f0             	mov    %eax,-0x10(%ebp)
            char *name = (char *)malloc(sizeof(char) * (len + 1));
c0109f67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f6a:	83 c0 01             	add    $0x1,%eax
c0109f6d:	89 04 24             	mov    %eax,(%esp)
c0109f70:	e8 27 37 00 00       	call   c010d69c <malloc>
c0109f75:	89 45 ec             	mov    %eax,-0x14(%ebp)
            strncpy(name, &pipelines[i], len);
c0109f78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f7b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0109f7e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f81:	01 ca                	add    %ecx,%edx
c0109f83:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f87:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109f8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f8e:	89 04 24             	mov    %eax,(%esp)
c0109f91:	e8 0b 8b ff ff       	call   c0102aa1 <strncpy>
            return name;
c0109f96:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f99:	eb 1c                	jmp    c0109fb7 <get_pnode_filename+0xe3>
 */
char *get_pnode_filename(char *pipelines, int start, int end)
{
    int i;

    for(i = start; pipelines[i] != '>'; i++)
c0109f9b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109f9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109fa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fa5:	01 d0                	add    %edx,%eax
c0109fa7:	0f b6 00             	movzbl (%eax),%eax
c0109faa:	3c 3e                	cmp    $0x3e,%al
c0109fac:	0f 85 33 ff ff ff    	jne    c0109ee5 <get_pnode_filename+0x11>
            strncpy(name, &pipelines[i], len);
            return name;
        }
    }

    return NULL;
c0109fb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fb7:	c9                   	leave  
c0109fb8:	c3                   	ret    

c0109fb9 <find_module>:
* @param mb_info multiboot struct
* @param name module name
* @return moduel information
*/
struct mods_add* find_module(struct multiboot_struct *mb_info, char *name)
{
c0109fb9:	55                   	push   %ebp
c0109fba:	89 e5                	mov    %esp,%ebp
c0109fbc:	83 ec 28             	sub    $0x28,%esp
    int i;
    while(*name == ' ' || *name == '\t')
c0109fbf:	eb 04                	jmp    c0109fc5 <find_module+0xc>
        name++;
c0109fc1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
* @return moduel information
*/
struct mods_add* find_module(struct multiboot_struct *mb_info, char *name)
{
    int i;
    while(*name == ' ' || *name == '\t')
c0109fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fc8:	0f b6 00             	movzbl (%eax),%eax
c0109fcb:	3c 20                	cmp    $0x20,%al
c0109fcd:	74 f2                	je     c0109fc1 <find_module+0x8>
c0109fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fd2:	0f b6 00             	movzbl (%eax),%eax
c0109fd5:	3c 09                	cmp    $0x9,%al
c0109fd7:	74 e8                	je     c0109fc1 <find_module+0x8>
        name++;
    int n = 0;
c0109fd9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while(name[n] != ' ' && name[n] != '\0')
c0109fe0:	eb 04                	jmp    c0109fe6 <find_module+0x2d>

        n++;
c0109fe2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
{
    int i;
    while(*name == ' ' || *name == '\t')
        name++;
    int n = 0;
    while(name[n] != ' ' && name[n] != '\0')
c0109fe6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109fe9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fec:	01 d0                	add    %edx,%eax
c0109fee:	0f b6 00             	movzbl (%eax),%eax
c0109ff1:	3c 20                	cmp    $0x20,%al
c0109ff3:	74 0f                	je     c010a004 <find_module+0x4b>
c0109ff5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ffb:	01 d0                	add    %edx,%eax
c0109ffd:	0f b6 00             	movzbl (%eax),%eax
c010a000:	84 c0                	test   %al,%al
c010a002:	75 de                	jne    c0109fe2 <find_module+0x29>

        n++;

    struct mods_add* modules = (struct mods_add*) mb_info->mods_addr;
c010a004:	8b 45 08             	mov    0x8(%ebp),%eax
c010a007:	8b 40 18             	mov    0x18(%eax),%eax
c010a00a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(i = 0; i < mb_info->mods_count; i++)
c010a00d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a014:	eb 3d                	jmp    c010a053 <find_module+0x9a>
    {
        if(! strncmp(name, modules[i].string, n))
c010a016:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a019:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a01c:	89 c1                	mov    %eax,%ecx
c010a01e:	c1 e1 04             	shl    $0x4,%ecx
c010a021:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a024:	01 c8                	add    %ecx,%eax
c010a026:	8b 40 08             	mov    0x8(%eax),%eax
c010a029:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a02d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a031:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a034:	89 04 24             	mov    %eax,(%esp)
c010a037:	e8 97 8b ff ff       	call   c0102bd3 <strncmp>
c010a03c:	85 c0                	test   %eax,%eax
c010a03e:	75 0f                	jne    c010a04f <find_module+0x96>
        {
            return &modules[i];
c010a040:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a043:	89 c2                	mov    %eax,%edx
c010a045:	c1 e2 04             	shl    $0x4,%edx
c010a048:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a04b:	01 d0                	add    %edx,%eax
c010a04d:	eb 16                	jmp    c010a065 <find_module+0xac>
    while(name[n] != ' ' && name[n] != '\0')

        n++;

    struct mods_add* modules = (struct mods_add*) mb_info->mods_addr;
    for(i = 0; i < mb_info->mods_count; i++)
c010a04f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a053:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a056:	8b 45 08             	mov    0x8(%ebp),%eax
c010a059:	8b 40 14             	mov    0x14(%eax),%eax
c010a05c:	39 c2                	cmp    %eax,%edx
c010a05e:	72 b6                	jb     c010a016 <find_module+0x5d>
        {
            return &modules[i];
        }

    }
    return NULL;
c010a060:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a065:	c9                   	leave  
c010a066:	c3                   	ret    

c010a067 <INIT_TRIGGER>:
 * Initiates the process/thread trigger module
 * @param void
 * @return void
 **/
void INIT_TRIGGER(void)
{
c010a067:	55                   	push   %ebp
c010a068:	89 e5                	mov    %esp,%ebp
c010a06a:	83 ec 08             	sub    $0x8,%esp
    trigger_list = list_create();
c010a06d:	e8 0c 85 ff ff       	call   c010257e <list_create>
c010a072:	a3 1c 80 11 c0       	mov    %eax,0xc011801c
    event_id_list = list_create();
c010a077:	e8 02 85 ff ff       	call   c010257e <list_create>
c010a07c:	a3 20 80 11 c0       	mov    %eax,0xc0118020
}
c010a081:	c9                   	leave  
c010a082:	c3                   	ret    

c010a083 <suspend_thread>:
 * Suspends a running thread
 * @param 0 pointer to the thread state
 * @return void
 */
void suspend_thread(struct thread_state *object)
{
c010a083:	55                   	push   %ebp
c010a084:	89 e5                	mov    %esp,%ebp
c010a086:	83 ec 28             	sub    $0x28,%esp
    if(list_is_empty(running_threads))
c010a089:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c010a08e:	89 04 24             	mov    %eax,(%esp)
c010a091:	e8 70 87 ff ff       	call   c0102806 <list_is_empty>
c010a096:	85 c0                	test   %eax,%eax
c010a098:	0f 85 87 00 00 00    	jne    c010a125 <suspend_thread+0xa2>
        return;

    iterator_t it = iterator_create(running_threads);
c010a09e:	8b 15 10 a0 11 c0    	mov    0xc011a010,%edx
c010a0a4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a0ab:	89 04 24             	mov    %eax,(%esp)
c010a0ae:	e8 94 87 ff ff       	call   c0102847 <iterator_create>
c010a0b3:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a0b6:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0b9:	89 04 24             	mov    %eax,(%esp)
c010a0bc:	e8 b6 88 ff ff       	call   c0102977 <list_set_first>
    while(list_get_current(&it) != object && !list_is_last(&it))
c010a0c1:	eb 0b                	jmp    c010a0ce <suspend_thread+0x4b>
        list_next(&it);
c010a0c3:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0c6:	89 04 24             	mov    %eax,(%esp)
c010a0c9:	e8 67 88 ff ff       	call   c0102935 <list_next>
    if(list_is_empty(running_threads))
        return;

    iterator_t it = iterator_create(running_threads);
    list_set_first(&it);
    while(list_get_current(&it) != object && !list_is_last(&it))
c010a0ce:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0d1:	89 04 24             	mov    %eax,(%esp)
c010a0d4:	e8 37 88 ff ff       	call   c0102910 <list_get_current>
c010a0d9:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a0dc:	74 0f                	je     c010a0ed <suspend_thread+0x6a>
c010a0de:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0e1:	89 04 24             	mov    %eax,(%esp)
c010a0e4:	e8 73 88 ff ff       	call   c010295c <list_is_last>
c010a0e9:	85 c0                	test   %eax,%eax
c010a0eb:	74 d6                	je     c010a0c3 <suspend_thread+0x40>
        list_next(&it);

    if(list_get_current(&it) == object)
c010a0ed:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0f0:	89 04 24             	mov    %eax,(%esp)
c010a0f3:	e8 18 88 ff ff       	call   c0102910 <list_get_current>
c010a0f8:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a0fb:	75 28                	jne    c010a125 <suspend_thread+0xa2>
    {
        list_remove(&it);
c010a0fd:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a100:	89 04 24             	mov    %eax,(%esp)
c010a103:	e8 9a 88 ff ff       	call   c01029a2 <list_remove>
        object->ticks  =  0;
c010a108:	8b 45 08             	mov    0x8(%ebp),%eax
c010a10b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        object->flags &= ~THREAD_ACTIV;
c010a112:	8b 45 08             	mov    0x8(%ebp),%eax
c010a115:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a119:	89 c2                	mov    %eax,%edx
c010a11b:	83 e2 fe             	and    $0xfffffffe,%edx
c010a11e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a121:	66 89 50 14          	mov    %dx,0x14(%eax)
    }
}
c010a125:	c9                   	leave  
c010a126:	c3                   	ret    

c010a127 <suspend_process>:
 * Suspends a process
 * @param 0 pointer to the process state
 * @return void
 */
void suspend_process(struct process_state *object)
{
c010a127:	55                   	push   %ebp
c010a128:	89 e5                	mov    %esp,%ebp
c010a12a:	83 ec 28             	sub    $0x28,%esp
    if(list_is_empty(object->threads))
c010a12d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a130:	8b 40 28             	mov    0x28(%eax),%eax
c010a133:	89 04 24             	mov    %eax,(%esp)
c010a136:	e8 cb 86 ff ff       	call   c0102806 <list_is_empty>
c010a13b:	85 c0                	test   %eax,%eax
c010a13d:	75 7c                	jne    c010a1bb <suspend_process+0x94>
        return;

    iterator_t it = iterator_create(object->threads);
c010a13f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a142:	8b 50 28             	mov    0x28(%eax),%edx
c010a145:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a148:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a14c:	89 04 24             	mov    %eax,(%esp)
c010a14f:	e8 f3 86 ff ff       	call   c0102847 <iterator_create>
c010a154:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a157:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a15a:	89 04 24             	mov    %eax,(%esp)
c010a15d:	e8 15 88 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_last(&it))
c010a162:	eb 35                	jmp    c010a199 <suspend_process+0x72>
    {
        struct thread_state *thread = (struct thread_state *)list_get_current(&it);
c010a164:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a167:	89 04 24             	mov    %eax,(%esp)
c010a16a:	e8 a1 87 ff ff       	call   c0102910 <list_get_current>
c010a16f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(thread->flags & THREAD_ACTIV)
c010a172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a175:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a179:	0f b7 c0             	movzwl %ax,%eax
c010a17c:	83 e0 01             	and    $0x1,%eax
c010a17f:	85 c0                	test   %eax,%eax
c010a181:	74 0b                	je     c010a18e <suspend_process+0x67>
            suspend_thread(thread);
c010a183:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a186:	89 04 24             	mov    %eax,(%esp)
c010a189:	e8 f5 fe ff ff       	call   c010a083 <suspend_thread>

        list_next(&it);
c010a18e:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a191:	89 04 24             	mov    %eax,(%esp)
c010a194:	e8 9c 87 ff ff       	call   c0102935 <list_next>
    if(list_is_empty(object->threads))
        return;

    iterator_t it = iterator_create(object->threads);
    list_set_first(&it);
    while(!list_is_last(&it))
c010a199:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a19c:	89 04 24             	mov    %eax,(%esp)
c010a19f:	e8 b8 87 ff ff       	call   c010295c <list_is_last>
c010a1a4:	85 c0                	test   %eax,%eax
c010a1a6:	74 bc                	je     c010a164 <suspend_process+0x3d>
            suspend_thread(thread);

        list_next(&it);
    }

    object->flags &= ~PROCESS_ACTIVE;
c010a1a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ab:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010a1af:	89 c2                	mov    %eax,%edx
c010a1b1:	83 e2 fe             	and    $0xfffffffe,%edx
c010a1b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b7:	66 89 50 3c          	mov    %dx,0x3c(%eax)
}
c010a1bb:	c9                   	leave  
c010a1bc:	c3                   	ret    

c010a1bd <wakeup_thread>:
 * Wakes up a thread
 * @param 0 pointer to the thread state
 * @return void
 **/
void wakeup_thread(struct thread_state *object)
{
c010a1bd:	55                   	push   %ebp
c010a1be:	89 e5                	mov    %esp,%ebp
c010a1c0:	83 ec 18             	sub    $0x18,%esp
    list_push_front(running_threads, object);
c010a1c3:	a1 10 a0 11 c0       	mov    0xc011a010,%eax
c010a1c8:	8b 55 08             	mov    0x8(%ebp),%edx
c010a1cb:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a1cf:	89 04 24             	mov    %eax,(%esp)
c010a1d2:	e8 de 84 ff ff       	call   c01026b5 <list_push_front>
    object->flags |= THREAD_ACTIV;
c010a1d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1da:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a1de:	89 c2                	mov    %eax,%edx
c010a1e0:	83 ca 01             	or     $0x1,%edx
c010a1e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1e6:	66 89 50 14          	mov    %dx,0x14(%eax)
}
c010a1ea:	c9                   	leave  
c010a1eb:	c3                   	ret    

c010a1ec <wakeup_process>:
 * Wakes up a process
 * @param 0 pointer to the process state
 * @return void
 **/
void wakeup_process(struct process_state *object)
{
c010a1ec:	55                   	push   %ebp
c010a1ed:	89 e5                	mov    %esp,%ebp
c010a1ef:	83 ec 28             	sub    $0x28,%esp
    struct process_state *process = object;
c010a1f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    iterator_t it = iterator_create(process->threads);
c010a1f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1fb:	8b 50 28             	mov    0x28(%eax),%edx
c010a1fe:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a201:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a205:	89 04 24             	mov    %eax,(%esp)
c010a208:	e8 3a 86 ff ff       	call   c0102847 <iterator_create>
c010a20d:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a210:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a213:	89 04 24             	mov    %eax,(%esp)
c010a216:	e8 5c 87 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_empty(process->threads) && !list_is_last(&it))
c010a21b:	eb 35                	jmp    c010a252 <wakeup_process+0x66>
    {
        struct thread_state *thread = (struct thread_state *)list_get_current(&it);
c010a21d:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a220:	89 04 24             	mov    %eax,(%esp)
c010a223:	e8 e8 86 ff ff       	call   c0102910 <list_get_current>
c010a228:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(!(thread->flags & THREAD_ACTIV))
c010a22b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a22e:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a232:	0f b7 c0             	movzwl %ax,%eax
c010a235:	83 e0 01             	and    $0x1,%eax
c010a238:	85 c0                	test   %eax,%eax
c010a23a:	75 0b                	jne    c010a247 <wakeup_process+0x5b>
            wakeup_thread(thread);
c010a23c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a23f:	89 04 24             	mov    %eax,(%esp)
c010a242:	e8 76 ff ff ff       	call   c010a1bd <wakeup_thread>
        list_next(&it);
c010a247:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a24a:	89 04 24             	mov    %eax,(%esp)
c010a24d:	e8 e3 86 ff ff       	call   c0102935 <list_next>
void wakeup_process(struct process_state *object)
{
    struct process_state *process = object;
    iterator_t it = iterator_create(process->threads);
    list_set_first(&it);
    while(!list_is_empty(process->threads) && !list_is_last(&it))
c010a252:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a255:	8b 40 28             	mov    0x28(%eax),%eax
c010a258:	89 04 24             	mov    %eax,(%esp)
c010a25b:	e8 a6 85 ff ff       	call   c0102806 <list_is_empty>
c010a260:	85 c0                	test   %eax,%eax
c010a262:	75 0f                	jne    c010a273 <wakeup_process+0x87>
c010a264:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a267:	89 04 24             	mov    %eax,(%esp)
c010a26a:	e8 ed 86 ff ff       	call   c010295c <list_is_last>
c010a26f:	85 c0                	test   %eax,%eax
c010a271:	74 aa                	je     c010a21d <wakeup_process+0x31>
        struct thread_state *thread = (struct thread_state *)list_get_current(&it);
        if(!(thread->flags & THREAD_ACTIV))
            wakeup_thread(thread);
        list_next(&it);
    }
    object->flags |= PROCESS_ACTIVE;
c010a273:	8b 45 08             	mov    0x8(%ebp),%eax
c010a276:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010a27a:	89 c2                	mov    %eax,%edx
c010a27c:	83 ca 01             	or     $0x1,%edx
c010a27f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a282:	66 89 50 3c          	mov    %dx,0x3c(%eax)
}
c010a286:	c9                   	leave  
c010a287:	c3                   	ret    

c010a288 <remove_event_trigger>:
 * @param 0 pointer to thread/process state
 * @param 1 optional event ID (0 = don't care)
 * @return number or removed triggers
 **/
int remove_event_trigger(void *object, uint32_t ID)
{
c010a288:	55                   	push   %ebp
c010a289:	89 e5                	mov    %esp,%ebp
c010a28b:	83 ec 38             	sub    $0x38,%esp
    int removed_elements = 0;
c010a28e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    iterator_t it = iterator_create(trigger_list);
c010a295:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a29b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a29e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a2a2:	89 04 24             	mov    %eax,(%esp)
c010a2a5:	e8 9d 85 ff ff       	call   c0102847 <iterator_create>
c010a2aa:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a2ad:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a2b0:	89 04 24             	mov    %eax,(%esp)
c010a2b3:	e8 bf 86 ff ff       	call   c0102977 <list_set_first>
    if(ID == 0)
c010a2b8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a2bc:	0f 85 00 01 00 00    	jne    c010a3c2 <remove_event_trigger+0x13a>
    {
        while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a2c2:	eb 61                	jmp    c010a325 <remove_event_trigger+0x9d>
        {
            struct trigger_entry *current_entry = list_get_current(&it);
c010a2c4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a2c7:	89 04 24             	mov    %eax,(%esp)
c010a2ca:	e8 41 86 ff ff       	call   c0102910 <list_get_current>
c010a2cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(current_entry->object == object)
c010a2d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a2d5:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2d8:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a2db:	75 3d                	jne    c010a31a <remove_event_trigger+0x92>
            {
                list_remove(&it);
c010a2dd:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a2e0:	89 04 24             	mov    %eax,(%esp)
c010a2e3:	e8 ba 86 ff ff       	call   c01029a2 <list_remove>
                if(current_entry->type == WAIT_EVENT)
c010a2e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a2eb:	8b 00                	mov    (%eax),%eax
c010a2ed:	83 f8 02             	cmp    $0x2,%eax
c010a2f0:	75 19                	jne    c010a30b <remove_event_trigger+0x83>
                    list_push_front(event_id_list,(void*)current_entry->ID);
c010a2f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a2f5:	8b 40 04             	mov    0x4(%eax),%eax
c010a2f8:	89 c2                	mov    %eax,%edx
c010a2fa:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a2ff:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a303:	89 04 24             	mov    %eax,(%esp)
c010a306:	e8 aa 83 ff ff       	call   c01026b5 <list_push_front>
                free(current_entry);
c010a30b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a30e:	89 04 24             	mov    %eax,(%esp)
c010a311:	e8 6d 34 00 00       	call   c010d783 <free>
                removed_elements++;
c010a316:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            }
            list_next(&it);
c010a31a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a31d:	89 04 24             	mov    %eax,(%esp)
c010a320:	e8 10 86 ff ff       	call   c0102935 <list_next>
    int removed_elements = 0;
    iterator_t it = iterator_create(trigger_list);
    list_set_first(&it);
    if(ID == 0)
    {
        while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a325:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a328:	89 04 24             	mov    %eax,(%esp)
c010a32b:	e8 2c 86 ff ff       	call   c010295c <list_is_last>
c010a330:	85 c0                	test   %eax,%eax
c010a332:	0f 85 af 00 00 00    	jne    c010a3e7 <remove_event_trigger+0x15f>
c010a338:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a33d:	89 04 24             	mov    %eax,(%esp)
c010a340:	e8 c1 84 ff ff       	call   c0102806 <list_is_empty>
c010a345:	85 c0                	test   %eax,%eax
c010a347:	0f 84 77 ff ff ff    	je     c010a2c4 <remove_event_trigger+0x3c>
c010a34d:	e9 95 00 00 00       	jmp    c010a3e7 <remove_event_trigger+0x15f>
    }
    else
    {
        while(!list_is_last(&it) && !list_is_empty(trigger_list))
        {
            struct trigger_entry *current_entry = list_get_current(&it);
c010a352:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a355:	89 04 24             	mov    %eax,(%esp)
c010a358:	e8 b3 85 ff ff       	call   c0102910 <list_get_current>
c010a35d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if(current_entry->object == object && current_entry->ID == ID)
c010a360:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a363:	8b 40 0c             	mov    0xc(%eax),%eax
c010a366:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a369:	75 4a                	jne    c010a3b5 <remove_event_trigger+0x12d>
c010a36b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a36e:	8b 40 04             	mov    0x4(%eax),%eax
c010a371:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a374:	75 3f                	jne    c010a3b5 <remove_event_trigger+0x12d>
            {
                list_remove(&it);
c010a376:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a379:	89 04 24             	mov    %eax,(%esp)
c010a37c:	e8 21 86 ff ff       	call   c01029a2 <list_remove>
                if(current_entry->type == WAIT_EVENT)
c010a381:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a384:	8b 00                	mov    (%eax),%eax
c010a386:	83 f8 02             	cmp    $0x2,%eax
c010a389:	75 19                	jne    c010a3a4 <remove_event_trigger+0x11c>
                    list_push_front(event_id_list,(void*)current_entry->ID);
c010a38b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a38e:	8b 40 04             	mov    0x4(%eax),%eax
c010a391:	89 c2                	mov    %eax,%edx
c010a393:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a398:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a39c:	89 04 24             	mov    %eax,(%esp)
c010a39f:	e8 11 83 ff ff       	call   c01026b5 <list_push_front>
                free(current_entry);
c010a3a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3a7:	89 04 24             	mov    %eax,(%esp)
c010a3aa:	e8 d4 33 00 00       	call   c010d783 <free>
                removed_elements++;
c010a3af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
                break;
c010a3b3:	eb 32                	jmp    c010a3e7 <remove_event_trigger+0x15f>
            }
            list_next(&it);
c010a3b5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a3b8:	89 04 24             	mov    %eax,(%esp)
c010a3bb:	e8 75 85 ff ff       	call   c0102935 <list_next>
c010a3c0:	eb 01                	jmp    c010a3c3 <remove_event_trigger+0x13b>
            list_next(&it);
        }
    }
    else
    {
        while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a3c2:	90                   	nop
c010a3c3:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a3c6:	89 04 24             	mov    %eax,(%esp)
c010a3c9:	e8 8e 85 ff ff       	call   c010295c <list_is_last>
c010a3ce:	85 c0                	test   %eax,%eax
c010a3d0:	75 15                	jne    c010a3e7 <remove_event_trigger+0x15f>
c010a3d2:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a3d7:	89 04 24             	mov    %eax,(%esp)
c010a3da:	e8 27 84 ff ff       	call   c0102806 <list_is_empty>
c010a3df:	85 c0                	test   %eax,%eax
c010a3e1:	0f 84 6b ff ff ff    	je     c010a352 <remove_event_trigger+0xca>
                break;
            }
            list_next(&it);
        }
    }
    return removed_elements;
c010a3e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a3ea:	c9                   	leave  
c010a3eb:	c3                   	ret    

c010a3ec <remove_event>:
 * Removes every trigger with the given ID
 * @param 0 event ID
 * @return number of removed triggers, 0 if there was no trigger with the given ID
 **/
int remove_event(uint32_t ID)
{
c010a3ec:	55                   	push   %ebp
c010a3ed:	89 e5                	mov    %esp,%ebp
c010a3ef:	83 ec 28             	sub    $0x28,%esp
    int removed_elements = 0;
c010a3f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    iterator_t it = iterator_create(trigger_list);
c010a3f9:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a3ff:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a402:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a406:	89 04 24             	mov    %eax,(%esp)
c010a409:	e8 39 84 ff ff       	call   c0102847 <iterator_create>
c010a40e:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a411:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a414:	89 04 24             	mov    %eax,(%esp)
c010a417:	e8 5b 85 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a41c:	eb 63                	jmp    c010a481 <remove_event+0x95>
    {
        struct trigger_entry *current_entry = list_get_current(&it);
c010a41e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a421:	89 04 24             	mov    %eax,(%esp)
c010a424:	e8 e7 84 ff ff       	call   c0102910 <list_get_current>
c010a429:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(current_entry->ID == ID)
c010a42c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a42f:	8b 40 04             	mov    0x4(%eax),%eax
c010a432:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a435:	75 3f                	jne    c010a476 <remove_event+0x8a>
        {
            list_remove(&it);
c010a437:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a43a:	89 04 24             	mov    %eax,(%esp)
c010a43d:	e8 60 85 ff ff       	call   c01029a2 <list_remove>
            if(current_entry->type == WAIT_EVENT)
c010a442:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a445:	8b 00                	mov    (%eax),%eax
c010a447:	83 f8 02             	cmp    $0x2,%eax
c010a44a:	75 19                	jne    c010a465 <remove_event+0x79>
                list_push_front(event_id_list,(void*)current_entry->ID);
c010a44c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a44f:	8b 40 04             	mov    0x4(%eax),%eax
c010a452:	89 c2                	mov    %eax,%edx
c010a454:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a459:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a45d:	89 04 24             	mov    %eax,(%esp)
c010a460:	e8 50 82 ff ff       	call   c01026b5 <list_push_front>
            free(current_entry);
c010a465:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a468:	89 04 24             	mov    %eax,(%esp)
c010a46b:	e8 13 33 00 00       	call   c010d783 <free>
            removed_elements++;
c010a470:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
            break;
c010a474:	eb 2f                	jmp    c010a4a5 <remove_event+0xb9>
        }

        list_next(&it);
c010a476:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a479:	89 04 24             	mov    %eax,(%esp)
c010a47c:	e8 b4 84 ff ff       	call   c0102935 <list_next>
int remove_event(uint32_t ID)
{
    int removed_elements = 0;
    iterator_t it = iterator_create(trigger_list);
    list_set_first(&it);
    while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a481:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a484:	89 04 24             	mov    %eax,(%esp)
c010a487:	e8 d0 84 ff ff       	call   c010295c <list_is_last>
c010a48c:	85 c0                	test   %eax,%eax
c010a48e:	75 15                	jne    c010a4a5 <remove_event+0xb9>
c010a490:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a495:	89 04 24             	mov    %eax,(%esp)
c010a498:	e8 69 83 ff ff       	call   c0102806 <list_is_empty>
c010a49d:	85 c0                	test   %eax,%eax
c010a49f:	0f 84 79 ff ff ff    	je     c010a41e <remove_event+0x32>
            break;
        }

        list_next(&it);
    }
    return removed_elements;
c010a4a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a4a8:	c9                   	leave  
c010a4a9:	c3                   	ret    

c010a4aa <send_event>:
 * Send a event which can lauch a event trigger
 * @param  0 event ID
 * @return true if the trigger was pulled, false if there's no trigger with the given ID
 */
int send_event(uint32_t ID)
{
c010a4aa:	55                   	push   %ebp
c010a4ab:	89 e5                	mov    %esp,%ebp
c010a4ad:	83 ec 38             	sub    $0x38,%esp
    int ret = false;
c010a4b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    iterator_t it = iterator_create(trigger_list);
c010a4b7:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a4bd:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a4c0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a4c4:	89 04 24             	mov    %eax,(%esp)
c010a4c7:	e8 7b 83 ff ff       	call   c0102847 <iterator_create>
c010a4cc:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a4cf:	e9 4e 01 00 00       	jmp    c010a622 <send_event+0x178>
    {
        struct trigger_entry *current_entry = list_get_current(&it);
c010a4d4:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a4d7:	89 04 24             	mov    %eax,(%esp)
c010a4da:	e8 31 84 ff ff       	call   c0102910 <list_get_current>
c010a4df:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(current_entry->ID == ID && current_entry->type == WAIT_EVENT)
c010a4e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4e5:	8b 40 04             	mov    0x4(%eax),%eax
c010a4e8:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a4eb:	0f 85 26 01 00 00    	jne    c010a617 <send_event+0x16d>
c010a4f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4f4:	8b 00                	mov    (%eax),%eax
c010a4f6:	83 f8 02             	cmp    $0x2,%eax
c010a4f9:	0f 85 18 01 00 00    	jne    c010a617 <send_event+0x16d>
        {
            if(current_entry->proc)
c010a4ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a502:	8b 40 08             	mov    0x8(%eax),%eax
c010a505:	85 c0                	test   %eax,%eax
c010a507:	74 2b                	je     c010a534 <send_event+0x8a>
            {
                wakeup_process(current_entry->object);
c010a509:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a50c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a50f:	89 04 24             	mov    %eax,(%esp)
c010a512:	e8 d5 fc ff ff       	call   c010a1ec <wakeup_process>
                remove_event_trigger(current_entry->object, current_entry->ID);
c010a517:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a51a:	8b 50 04             	mov    0x4(%eax),%edx
c010a51d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a520:	8b 40 0c             	mov    0xc(%eax),%eax
c010a523:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a527:	89 04 24             	mov    %eax,(%esp)
c010a52a:	e8 59 fd ff ff       	call   c010a288 <remove_event_trigger>
c010a52f:	e9 82 00 00 00       	jmp    c010a5b6 <send_event+0x10c>
            }
            else
            {
                struct thread_state *thread = current_entry->object;
c010a534:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a537:	8b 40 0c             	mov    0xc(%eax),%eax
c010a53a:	89 45 ec             	mov    %eax,-0x14(%ebp)
                remove_event_trigger(current_entry->object, current_entry->ID);
c010a53d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a540:	8b 50 04             	mov    0x4(%eax),%edx
c010a543:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a546:	8b 40 0c             	mov    0xc(%eax),%eax
c010a549:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a54d:	89 04 24             	mov    %eax,(%esp)
c010a550:	e8 33 fd ff ff       	call   c010a288 <remove_event_trigger>
                wakeup_thread(thread);
c010a555:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a558:	89 04 24             	mov    %eax,(%esp)
c010a55b:	e8 5d fc ff ff       	call   c010a1bd <wakeup_thread>

                if(current_entry->callback != NULL)
c010a560:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a563:	8b 40 10             	mov    0x10(%eax),%eax
c010a566:	85 c0                	test   %eax,%eax
c010a568:	74 4c                	je     c010a5b6 <send_event+0x10c>
                {
                    struct cpu_state **cpu = &thread->state;
c010a56a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a56d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    struct thread_state *tmp = current_thread;
c010a570:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010a575:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    current_thread = thread;
c010a578:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a57b:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
                    vmm_switch_context(&current_thread->context);
c010a580:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010a585:	83 c0 08             	add    $0x8,%eax
c010a588:	89 04 24             	mov    %eax,(%esp)
c010a58b:	e8 1b 2b 00 00       	call   c010d0ab <vmm_switch_context>
                    current_entry->callback(cpu);
c010a590:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a593:	8b 40 10             	mov    0x10(%eax),%eax
c010a596:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a599:	89 14 24             	mov    %edx,(%esp)
c010a59c:	ff d0                	call   *%eax
                    current_thread = tmp;
c010a59e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a5a1:	a3 0c a0 11 c0       	mov    %eax,0xc011a00c
                    vmm_switch_context(&current_thread->context);
c010a5a6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010a5ab:	83 c0 08             	add    $0x8,%eax
c010a5ae:	89 04 24             	mov    %eax,(%esp)
c010a5b1:	e8 f5 2a 00 00       	call   c010d0ab <vmm_switch_context>
                }
            }
            // that's a temporary workaround. I have to fix it later.
            // the problems are caused by blitzbasics list ports.
            ret = true;
c010a5b6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
            list_remove(&it);
c010a5bd:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a5c0:	89 04 24             	mov    %eax,(%esp)
c010a5c3:	e8 da 83 ff ff       	call   c01029a2 <list_remove>
            if(current_entry->type == WAIT_EVENT)
c010a5c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5cb:	8b 00                	mov    (%eax),%eax
c010a5cd:	83 f8 02             	cmp    $0x2,%eax
c010a5d0:	75 19                	jne    c010a5eb <send_event+0x141>
                list_push_front(event_id_list,(void*)current_entry->ID);
c010a5d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5d5:	8b 40 04             	mov    0x4(%eax),%eax
c010a5d8:	89 c2                	mov    %eax,%edx
c010a5da:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a5df:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a5e3:	89 04 24             	mov    %eax,(%esp)
c010a5e6:	e8 ca 80 ff ff       	call   c01026b5 <list_push_front>
            free(current_entry);
c010a5eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5ee:	89 04 24             	mov    %eax,(%esp)
c010a5f1:	e8 8d 31 00 00       	call   c010d783 <free>
            if(list_is_last(&it))
c010a5f6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a5f9:	89 04 24             	mov    %eax,(%esp)
c010a5fc:	e8 5b 83 ff ff       	call   c010295c <list_is_last>
c010a601:	85 c0                	test   %eax,%eax
c010a603:	74 05                	je     c010a60a <send_event+0x160>
                return ret;
c010a605:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a608:	eb 3f                	jmp    c010a649 <send_event+0x19f>
            list_set_first(&it);
c010a60a:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a60d:	89 04 24             	mov    %eax,(%esp)
c010a610:	e8 62 83 ff ff       	call   c0102977 <list_set_first>
c010a615:	eb 0b                	jmp    c010a622 <send_event+0x178>
        }
        else
            list_next(&it);
c010a617:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a61a:	89 04 24             	mov    %eax,(%esp)
c010a61d:	e8 13 83 ff ff       	call   c0102935 <list_next>
 */
int send_event(uint32_t ID)
{
    int ret = false;
    iterator_t it = iterator_create(trigger_list);
    while(!list_is_last(&it) && !list_is_empty(trigger_list))
c010a622:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a625:	89 04 24             	mov    %eax,(%esp)
c010a628:	e8 2f 83 ff ff       	call   c010295c <list_is_last>
c010a62d:	85 c0                	test   %eax,%eax
c010a62f:	75 15                	jne    c010a646 <send_event+0x19c>
c010a631:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a636:	89 04 24             	mov    %eax,(%esp)
c010a639:	e8 c8 81 ff ff       	call   c0102806 <list_is_empty>
c010a63e:	85 c0                	test   %eax,%eax
c010a640:	0f 84 8e fe ff ff    	je     c010a4d4 <send_event+0x2a>
            list_set_first(&it);
        }
        else
            list_next(&it);
    }
    return ret;
c010a646:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a649:	c9                   	leave  
c010a64a:	c3                   	ret    

c010a64b <get_new_event_ID>:
 * returns a new, unused event ID
 * @param void
 * @return new event ID
 */
uint32_t get_new_event_ID(void)
{
c010a64b:	55                   	push   %ebp
c010a64c:	89 e5                	mov    %esp,%ebp
c010a64e:	83 ec 18             	sub    $0x18,%esp
    if(list_is_empty(event_id_list))
c010a651:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a656:	89 04 24             	mov    %eax,(%esp)
c010a659:	e8 a8 81 ff ff       	call   c0102806 <list_is_empty>
c010a65e:	85 c0                	test   %eax,%eax
c010a660:	74 13                	je     c010a675 <get_new_event_ID+0x2a>
        return event_id_counter++;
c010a662:	8b 15 90 31 11 c0    	mov    0xc0113190,%edx
c010a668:	89 d0                	mov    %edx,%eax
c010a66a:	83 c2 01             	add    $0x1,%edx
c010a66d:	89 15 90 31 11 c0    	mov    %edx,0xc0113190
c010a673:	eb 0d                	jmp    c010a682 <get_new_event_ID+0x37>

    return (uint32_t) list_pop_back(event_id_list);
c010a675:	a1 20 80 11 c0       	mov    0xc0118020,%eax
c010a67a:	89 04 24             	mov    %eax,(%esp)
c010a67d:	e8 bd 80 ff ff       	call   c010273f <list_pop_back>
}
c010a682:	c9                   	leave  
c010a683:	c3                   	ret    

c010a684 <add_event_trigger>:
 * @param 1 pointer to process/thread state
 * @param 2 pointer to callback function (will be called before the thread/process wakes up) or NULL if there is no need for a callback
 * @return event ID
 **/
uint32_t add_event_trigger(bool proc, void *object, void (*callback)(struct cpu_state **cpu))
{
c010a684:	55                   	push   %ebp
c010a685:	89 e5                	mov    %esp,%ebp
c010a687:	83 ec 28             	sub    $0x28,%esp
    struct trigger_entry *new_entry = (struct trigger_entry*) malloc(sizeof(struct trigger_entry));
c010a68a:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c010a691:	e8 06 30 00 00       	call   c010d69c <malloc>
c010a696:	89 45 f4             	mov    %eax,-0xc(%ebp)
    new_entry->type = WAIT_EVENT;
c010a699:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a69c:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    new_entry->ID = get_new_event_ID();
c010a6a2:	e8 a4 ff ff ff       	call   c010a64b <get_new_event_ID>
c010a6a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6aa:	89 42 04             	mov    %eax,0x4(%edx)
    new_entry->proc = proc;
c010a6ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6b0:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6b3:	89 50 08             	mov    %edx,0x8(%eax)
    new_entry->object = object;
c010a6b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6b9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a6bc:	89 50 0c             	mov    %edx,0xc(%eax)
    new_entry->callback = callback;
c010a6bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6c2:	8b 55 10             	mov    0x10(%ebp),%edx
c010a6c5:	89 50 10             	mov    %edx,0x10(%eax)

    list_push_front(trigger_list,new_entry);
c010a6c8:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a6cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6d0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a6d4:	89 04 24             	mov    %eax,(%esp)
c010a6d7:	e8 d9 7f ff ff       	call   c01026b5 <list_push_front>
    return new_entry->ID;
c010a6dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6df:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a6e2:	c9                   	leave  
c010a6e3:	c3                   	ret    

c010a6e4 <add_trigger>:
 * @param 3 pointer to process/thread state
 * @param 4 pointer to callback function (will be called before the thread/process wakes up) or NULL if there is no need for a callback
 * @return void
 **/
void add_trigger(trigger_t type, uint32_t ID, bool proc, void *object, void (*callback)(struct cpu_state **cpu))
{
c010a6e4:	55                   	push   %ebp
c010a6e5:	89 e5                	mov    %esp,%ebp
c010a6e7:	83 ec 28             	sub    $0x28,%esp
    struct trigger_entry *new_entry = (struct trigger_entry*) malloc(sizeof(struct trigger_entry));
c010a6ea:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c010a6f1:	e8 a6 2f 00 00       	call   c010d69c <malloc>
c010a6f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    new_entry->type   = type;
c010a6f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6fc:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6ff:	89 10                	mov    %edx,(%eax)
    new_entry->ID     = ID;
c010a701:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a704:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a707:	89 50 04             	mov    %edx,0x4(%eax)
    new_entry->proc   = proc;
c010a70a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a70d:	8b 55 10             	mov    0x10(%ebp),%edx
c010a710:	89 50 08             	mov    %edx,0x8(%eax)
    new_entry->object = object;
c010a713:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a716:	8b 55 14             	mov    0x14(%ebp),%edx
c010a719:	89 50 0c             	mov    %edx,0xc(%eax)
    new_entry->callback = callback;
c010a71c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a71f:	8b 55 18             	mov    0x18(%ebp),%edx
c010a722:	89 50 10             	mov    %edx,0x10(%eax)
    list_push_front(trigger_list,new_entry);
c010a725:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a72a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a72d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a731:	89 04 24             	mov    %eax,(%esp)
c010a734:	e8 7c 7f ff ff       	call   c01026b5 <list_push_front>
}
c010a739:	c9                   	leave  
c010a73a:	c3                   	ret    

c010a73b <add_int_trigger>:
 * @param 1 pointer to the thread (optional NULL)
 * @param 2 callback function (optional NULL)
 * @return true = sucess, false = failure
 **/
int add_int_trigger(int irq, struct thread_state *object,void (*callback)(int irq))
{
c010a73b:	55                   	push   %ebp
c010a73c:	89 e5                	mov    %esp,%ebp
c010a73e:	83 ec 28             	sub    $0x28,%esp
    if(install_irq(irq,handle_interupts))
c010a741:	c7 44 24 04 8f a7 10 	movl   $0xc010a78f,0x4(%esp)
c010a748:	c0 
c010a749:	8b 45 08             	mov    0x8(%ebp),%eax
c010a74c:	89 04 24             	mov    %eax,(%esp)
c010a74f:	e8 57 3b 00 00       	call   c010e2ab <install_irq>
c010a754:	85 c0                	test   %eax,%eax
c010a756:	74 30                	je     c010a788 <add_int_trigger+0x4d>
    {
        add_trigger(WAIT_INT, irq, false, object,(void (*)(struct cpu_state **cpu))callback);
c010a758:	8b 45 08             	mov    0x8(%ebp),%eax
c010a75b:	8b 55 10             	mov    0x10(%ebp),%edx
c010a75e:	89 54 24 10          	mov    %edx,0x10(%esp)
c010a762:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a765:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010a769:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010a770:	00 
c010a771:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a775:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010a77c:	e8 63 ff ff ff       	call   c010a6e4 <add_trigger>
        return true;
c010a781:	b8 01 00 00 00       	mov    $0x1,%eax
c010a786:	eb 05                	jmp    c010a78d <add_int_trigger+0x52>
    }
    return false;
c010a788:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a78d:	c9                   	leave  
c010a78e:	c3                   	ret    

c010a78f <handle_interupts>:
 * pulls a interrupt trigger
 * @param 0 cpu-state of the current process
 * @return void
 **/
void handle_interupts(struct cpu_state **cpu)
{
c010a78f:	55                   	push   %ebp
c010a790:	89 e5                	mov    %esp,%ebp
c010a792:	83 ec 28             	sub    $0x28,%esp
    iterator_t it = iterator_create(trigger_list);
c010a795:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a79b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a79e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a7a2:	89 04 24             	mov    %eax,(%esp)
c010a7a5:	e8 9d 80 ff ff       	call   c0102847 <iterator_create>
c010a7aa:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a7ad:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a7b0:	89 04 24             	mov    %eax,(%esp)
c010a7b3:	e8 bf 81 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_empty(trigger_list) && !list_is_last(&it))
c010a7b8:	e9 d2 00 00 00       	jmp    c010a88f <handle_interupts+0x100>
    {
        struct trigger_entry *trg = list_get_current(&it);
c010a7bd:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a7c0:	89 04 24             	mov    %eax,(%esp)
c010a7c3:	e8 48 81 ff ff       	call   c0102910 <list_get_current>
c010a7c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        list_next(&it);
c010a7cb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a7ce:	89 04 24             	mov    %eax,(%esp)
c010a7d1:	e8 5f 81 ff ff       	call   c0102935 <list_next>
        if(trg->type == WAIT_INT && trg->ID == (*cpu)->intr-IRQ_OFFSET)
c010a7d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7d9:	8b 00                	mov    (%eax),%eax
c010a7db:	83 f8 05             	cmp    $0x5,%eax
c010a7de:	0f 85 ab 00 00 00    	jne    c010a88f <handle_interupts+0x100>
c010a7e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7e7:	8b 50 04             	mov    0x4(%eax),%edx
c010a7ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ed:	8b 00                	mov    (%eax),%eax
c010a7ef:	8b 40 2c             	mov    0x2c(%eax),%eax
c010a7f2:	83 e8 20             	sub    $0x20,%eax
c010a7f5:	39 c2                	cmp    %eax,%edx
c010a7f7:	0f 85 92 00 00 00    	jne    c010a88f <handle_interupts+0x100>
        {
            if(trg->callback)
c010a7fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a800:	8b 40 10             	mov    0x10(%eax),%eax
c010a803:	85 c0                	test   %eax,%eax
c010a805:	74 11                	je     c010a818 <handle_interupts+0x89>
            {
                ((void (*)(int irq))trg->callback)(trg->ID);
c010a807:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a80a:	8b 40 10             	mov    0x10(%eax),%eax
c010a80d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a810:	8b 52 04             	mov    0x4(%edx),%edx
c010a813:	89 14 24             	mov    %edx,(%esp)
c010a816:	ff d0                	call   *%eax
            }

            if(trg->object && ! (((struct thread_state *)trg->object)->flags & THREAD_ACTIV))
c010a818:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a81b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a81e:	85 c0                	test   %eax,%eax
c010a820:	74 6d                	je     c010a88f <handle_interupts+0x100>
c010a822:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a825:	8b 40 0c             	mov    0xc(%eax),%eax
c010a828:	0f b7 40 14          	movzwl 0x14(%eax),%eax
c010a82c:	0f b7 c0             	movzwl %ax,%eax
c010a82f:	83 e0 01             	and    $0x1,%eax
c010a832:	85 c0                	test   %eax,%eax
c010a834:	75 59                	jne    c010a88f <handle_interupts+0x100>
            {
                ((struct thread_state *)trg->object)->flags |= THREAD_ACTIV;
c010a836:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a839:	8b 40 0c             	mov    0xc(%eax),%eax
c010a83c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a83f:	8b 52 0c             	mov    0xc(%edx),%edx
c010a842:	0f b7 52 14          	movzwl 0x14(%edx),%edx
c010a846:	83 ca 01             	or     $0x1,%edx
c010a849:	66 89 50 14          	mov    %dx,0x14(%eax)
                list_insert_after(&it,trg->object);
c010a84d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a850:	8b 40 0c             	mov    0xc(%eax),%eax
c010a853:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a857:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a85a:	89 04 24             	mov    %eax,(%esp)
c010a85d:	e8 11 80 ff ff       	call   c0102873 <list_insert_after>
                ((struct thread_state *)trg->object)->ticks = 10;
c010a862:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a865:	8b 40 0c             	mov    0xc(%eax),%eax
c010a868:	c7 40 10 0a 00 00 00 	movl   $0xa,0x10(%eax)
                current_thread->ticks = 0;
c010a86f:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010a874:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
                *cpu = task_schedule(*cpu);
c010a87b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a87e:	8b 00                	mov    (%eax),%eax
c010a880:	89 04 24             	mov    %eax,(%esp)
c010a883:	e8 fd a0 ff ff       	call   c0104985 <task_schedule>
c010a888:	8b 55 08             	mov    0x8(%ebp),%edx
c010a88b:	89 02                	mov    %eax,(%edx)
c010a88d:	eb 24                	jmp    c010a8b3 <handle_interupts+0x124>
 **/
void handle_interupts(struct cpu_state **cpu)
{
    iterator_t it = iterator_create(trigger_list);
    list_set_first(&it);
    while(!list_is_empty(trigger_list) && !list_is_last(&it))
c010a88f:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010a894:	89 04 24             	mov    %eax,(%esp)
c010a897:	e8 6a 7f ff ff       	call   c0102806 <list_is_empty>
c010a89c:	85 c0                	test   %eax,%eax
c010a89e:	75 13                	jne    c010a8b3 <handle_interupts+0x124>
c010a8a0:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a8a3:	89 04 24             	mov    %eax,(%esp)
c010a8a6:	e8 b1 80 ff ff       	call   c010295c <list_is_last>
c010a8ab:	85 c0                	test   %eax,%eax
c010a8ad:	0f 84 0a ff ff ff    	je     c010a7bd <handle_interupts+0x2e>
            }

        }

    }
}
c010a8b3:	c9                   	leave  
c010a8b4:	c3                   	ret    

c010a8b5 <send_killed_process>:
 * pulls waitpid triggers when a process has been killed
 * @param pointer to process state
 * @return void
 **/
void send_killed_process(struct process_state *proc)
{
c010a8b5:	55                   	push   %ebp
c010a8b6:	89 e5                	mov    %esp,%ebp
c010a8b8:	83 ec 38             	sub    $0x38,%esp
    iterator_t it = iterator_create(trigger_list);
c010a8bb:	8b 15 1c 80 11 c0    	mov    0xc011801c,%edx
c010a8c1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a8c4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a8c8:	89 04 24             	mov    %eax,(%esp)
c010a8cb:	e8 77 7f ff ff       	call   c0102847 <iterator_create>
c010a8d0:	83 ec 04             	sub    $0x4,%esp
    list_set_first(&it);
c010a8d3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a8d6:	89 04 24             	mov    %eax,(%esp)
c010a8d9:	e8 99 80 ff ff       	call   c0102977 <list_set_first>
    while(!list_is_empty(trigger_list) && !list_is_last(&it))
c010a8de:	e9 9c 01 00 00       	jmp    c010aa7f <send_killed_process+0x1ca>
    {
        struct trigger_entry *current_entry = list_get_current(&it);
c010a8e3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a8e6:	89 04 24             	mov    %eax,(%esp)
c010a8e9:	e8 22 80 ff ff       	call   c0102910 <list_get_current>
c010a8ee:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if(current_entry->ID == proc->pid && current_entry->type == WAIT_PID) // pid > 0
c010a8f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8f4:	8b 50 04             	mov    0x4(%eax),%edx
c010a8f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8fa:	8b 00                	mov    (%eax),%eax
c010a8fc:	39 c2                	cmp    %eax,%edx
c010a8fe:	75 7c                	jne    c010a97c <send_killed_process+0xc7>
c010a900:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a903:	8b 00                	mov    (%eax),%eax
c010a905:	85 c0                	test   %eax,%eax
c010a907:	75 73                	jne    c010a97c <send_killed_process+0xc7>
        {
            if(current_entry->proc)
c010a909:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a90c:	8b 40 08             	mov    0x8(%eax),%eax
c010a90f:	85 c0                	test   %eax,%eax
c010a911:	74 28                	je     c010a93b <send_killed_process+0x86>
            {
                wakeup_process(current_entry->object);
c010a913:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a916:	8b 40 0c             	mov    0xc(%eax),%eax
c010a919:	89 04 24             	mov    %eax,(%esp)
c010a91c:	e8 cb f8 ff ff       	call   c010a1ec <wakeup_process>
                remove_event_trigger(current_entry->object, current_entry->ID);
c010a921:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a924:	8b 50 04             	mov    0x4(%eax),%edx
c010a927:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a92a:	8b 40 0c             	mov    0xc(%eax),%eax
c010a92d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a931:	89 04 24             	mov    %eax,(%esp)
c010a934:	e8 4f f9 ff ff       	call   c010a288 <remove_event_trigger>
c010a939:	eb 26                	jmp    c010a961 <send_killed_process+0xac>
            }
            else
            {
                wakeup_thread(current_entry->object);
c010a93b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a93e:	8b 40 0c             	mov    0xc(%eax),%eax
c010a941:	89 04 24             	mov    %eax,(%esp)
c010a944:	e8 74 f8 ff ff       	call   c010a1bd <wakeup_thread>
                remove_event_trigger(current_entry->object, current_entry->ID);
c010a949:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a94c:	8b 50 04             	mov    0x4(%eax),%edx
c010a94f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a952:	8b 40 0c             	mov    0xc(%eax),%eax
c010a955:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a959:	89 04 24             	mov    %eax,(%esp)
c010a95c:	e8 27 f9 ff ff       	call   c010a288 <remove_event_trigger>
            }

            list_remove(&it);
c010a961:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a964:	89 04 24             	mov    %eax,(%esp)
c010a967:	e8 36 80 ff ff       	call   c01029a2 <list_remove>
            free(current_entry);
c010a96c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a96f:	89 04 24             	mov    %eax,(%esp)
c010a972:	e8 0c 2e 00 00       	call   c010d783 <free>
            continue;
c010a977:	e9 03 01 00 00       	jmp    c010aa7f <send_killed_process+0x1ca>
        }

        if(current_entry->ID == 0 && current_entry->type == WAIT_PID) // pid = 0
c010a97c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a97f:	8b 40 04             	mov    0x4(%eax),%eax
c010a982:	85 c0                	test   %eax,%eax
                Please rewrite this case.
            */

        }

        if((int)current_entry->ID == -1 && current_entry->type == WAIT_PID) // pid = -1
c010a984:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a987:	8b 40 04             	mov    0x4(%eax),%eax
c010a98a:	83 f8 ff             	cmp    $0xffffffff,%eax
c010a98d:	0f 85 d8 00 00 00    	jne    c010aa6b <send_killed_process+0x1b6>
c010a993:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a996:	8b 00                	mov    (%eax),%eax
c010a998:	85 c0                	test   %eax,%eax
c010a99a:	0f 85 cb 00 00 00    	jne    c010aa6b <send_killed_process+0x1b6>
        {
            if(current_entry->object == proc->parent)
c010a9a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9a3:	8b 50 0c             	mov    0xc(%eax),%edx
c010a9a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9a9:	8b 40 14             	mov    0x14(%eax),%eax
c010a9ac:	39 c2                	cmp    %eax,%edx
c010a9ae:	75 2b                	jne    c010a9db <send_killed_process+0x126>
            {
                wakeup_process(proc->parent);
c010a9b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9b3:	8b 40 14             	mov    0x14(%eax),%eax
c010a9b6:	89 04 24             	mov    %eax,(%esp)
c010a9b9:	e8 2e f8 ff ff       	call   c010a1ec <wakeup_process>
                remove_event_trigger(proc->parent, current_entry->ID);
c010a9be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9c1:	8b 50 04             	mov    0x4(%eax),%edx
c010a9c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9c7:	8b 40 14             	mov    0x14(%eax),%eax
c010a9ca:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a9ce:	89 04 24             	mov    %eax,(%esp)
c010a9d1:	e8 b2 f8 ff ff       	call   c010a288 <remove_event_trigger>
c010a9d6:	e9 90 00 00 00       	jmp    c010aa6b <send_killed_process+0x1b6>
            }
            else
            {
                iterator_t thread_it = iterator_create(proc->parent->threads);
c010a9db:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9de:	8b 40 14             	mov    0x14(%eax),%eax
c010a9e1:	8b 50 28             	mov    0x28(%eax),%edx
c010a9e4:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a9e7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a9eb:	89 04 24             	mov    %eax,(%esp)
c010a9ee:	e8 54 7e ff ff       	call   c0102847 <iterator_create>
c010a9f3:	83 ec 04             	sub    $0x4,%esp
                list_set_first(&thread_it);
c010a9f6:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a9f9:	89 04 24             	mov    %eax,(%esp)
c010a9fc:	e8 76 7f ff ff       	call   c0102977 <list_set_first>
                while(!list_is_empty(proc->parent->threads) && !list_is_last(&thread_it))
c010aa01:	eb 44                	jmp    c010aa47 <send_killed_process+0x192>
                {
                    struct thread_state *thread = list_get_current(&thread_it);
c010aa03:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010aa06:	89 04 24             	mov    %eax,(%esp)
c010aa09:	e8 02 7f ff ff       	call   c0102910 <list_get_current>
c010aa0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    if(thread == current_entry->object)
c010aa11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa14:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa17:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010aa1a:	75 20                	jne    c010aa3c <send_killed_process+0x187>
                    {
                        wakeup_thread(thread);
c010aa1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa1f:	89 04 24             	mov    %eax,(%esp)
c010aa22:	e8 96 f7 ff ff       	call   c010a1bd <wakeup_thread>
                        remove_event_trigger(thread, current_entry->ID);
c010aa27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa2a:	8b 40 04             	mov    0x4(%eax),%eax
c010aa2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa34:	89 04 24             	mov    %eax,(%esp)
c010aa37:	e8 4c f8 ff ff       	call   c010a288 <remove_event_trigger>
                    }
                    list_next(&thread_it);
c010aa3c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010aa3f:	89 04 24             	mov    %eax,(%esp)
c010aa42:	e8 ee 7e ff ff       	call   c0102935 <list_next>
            }
            else
            {
                iterator_t thread_it = iterator_create(proc->parent->threads);
                list_set_first(&thread_it);
                while(!list_is_empty(proc->parent->threads) && !list_is_last(&thread_it))
c010aa47:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa4a:	8b 40 14             	mov    0x14(%eax),%eax
c010aa4d:	8b 40 28             	mov    0x28(%eax),%eax
c010aa50:	89 04 24             	mov    %eax,(%esp)
c010aa53:	e8 ae 7d ff ff       	call   c0102806 <list_is_empty>
c010aa58:	85 c0                	test   %eax,%eax
c010aa5a:	75 0f                	jne    c010aa6b <send_killed_process+0x1b6>
c010aa5c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010aa5f:	89 04 24             	mov    %eax,(%esp)
c010aa62:	e8 f5 7e ff ff       	call   c010295c <list_is_last>
c010aa67:	85 c0                	test   %eax,%eax
c010aa69:	74 98                	je     c010aa03 <send_killed_process+0x14e>
                    list_next(&thread_it);
                }
            }
        }

        if((int)current_entry->ID < -1 && current_entry->type == WAIT_PID) // pid < -1
c010aa6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa6e:	8b 40 04             	mov    0x4(%eax),%eax
c010aa71:	83 f8 ff             	cmp    $0xffffffff,%eax
            /*
                Process groups aren't implemented yet.
                Please rewrite this case.
            */
        }
        list_next(&it);
c010aa74:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010aa77:	89 04 24             	mov    %eax,(%esp)
c010aa7a:	e8 b6 7e ff ff       	call   c0102935 <list_next>
 **/
void send_killed_process(struct process_state *proc)
{
    iterator_t it = iterator_create(trigger_list);
    list_set_first(&it);
    while(!list_is_empty(trigger_list) && !list_is_last(&it))
c010aa7f:	a1 1c 80 11 c0       	mov    0xc011801c,%eax
c010aa84:	89 04 24             	mov    %eax,(%esp)
c010aa87:	e8 7a 7d ff ff       	call   c0102806 <list_is_empty>
c010aa8c:	85 c0                	test   %eax,%eax
c010aa8e:	75 13                	jne    c010aaa3 <send_killed_process+0x1ee>
c010aa90:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010aa93:	89 04 24             	mov    %eax,(%esp)
c010aa96:	e8 c1 7e ff ff       	call   c010295c <list_is_last>
c010aa9b:	85 c0                	test   %eax,%eax
c010aa9d:	0f 84 40 fe ff ff    	je     c010a8e3 <send_killed_process+0x2e>
            */
        }
        list_next(&it);
    }

}
c010aaa3:	c9                   	leave  
c010aaa4:	c3                   	ret    

c010aaa5 <unix_time>:
 * @param pointer ti time struct
 *
 * @return unix timestamp
 */
time_t unix_time(struct time *time)
{
c010aaa5:	55                   	push   %ebp
c010aaa6:	89 e5                	mov    %esp,%ebp
c010aaa8:	53                   	push   %ebx
c010aaa9:	83 ec 10             	sub    $0x10,%esp
    int year = (time->century*100)+time->year;
c010aaac:	8b 45 08             	mov    0x8(%ebp),%eax
c010aaaf:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c010aab3:	0f b6 c0             	movzbl %al,%eax
c010aab6:	6b d0 64             	imul   $0x64,%eax,%edx
c010aab9:	8b 45 08             	mov    0x8(%ebp),%eax
c010aabc:	0f b6 40 09          	movzbl 0x9(%eax),%eax
c010aac0:	0f b6 c0             	movzbl %al,%eax
c010aac3:	01 d0                	add    %edx,%eax
c010aac5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int leap_years = ((year - 1) - 1968) / 4 - ((year - 1) - 1900) / 100 + ((year - 1) - 1600) / 400;
c010aac8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aacb:	2d b1 07 00 00       	sub    $0x7b1,%eax
c010aad0:	8d 50 03             	lea    0x3(%eax),%edx
c010aad3:	85 c0                	test   %eax,%eax
c010aad5:	0f 48 c2             	cmovs  %edx,%eax
c010aad8:	c1 f8 02             	sar    $0x2,%eax
c010aadb:	89 c3                	mov    %eax,%ebx
c010aadd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aae0:	8d 88 93 f8 ff ff    	lea    -0x76d(%eax),%ecx
c010aae6:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010aaeb:	89 c8                	mov    %ecx,%eax
c010aaed:	f7 ea                	imul   %edx
c010aaef:	c1 fa 05             	sar    $0x5,%edx
c010aaf2:	89 c8                	mov    %ecx,%eax
c010aaf4:	c1 f8 1f             	sar    $0x1f,%eax
c010aaf7:	89 d1                	mov    %edx,%ecx
c010aaf9:	29 c1                	sub    %eax,%ecx
c010aafb:	89 c8                	mov    %ecx,%eax
c010aafd:	29 c3                	sub    %eax,%ebx
c010aaff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab02:	8d 88 bf f9 ff ff    	lea    -0x641(%eax),%ecx
c010ab08:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010ab0d:	89 c8                	mov    %ecx,%eax
c010ab0f:	f7 ea                	imul   %edx
c010ab11:	c1 fa 07             	sar    $0x7,%edx
c010ab14:	89 c8                	mov    %ecx,%eax
c010ab16:	c1 f8 1f             	sar    $0x1f,%eax
c010ab19:	89 d1                	mov    %edx,%ecx
c010ab1b:	29 c1                	sub    %eax,%ecx
c010ab1d:	89 c8                	mov    %ecx,%eax
c010ab1f:	01 d8                	add    %ebx,%eax
c010ab21:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int unix_time = time->second + (time->minute *60) + (time->hour *60*60) + ((day_to_current_month[time->month - 1] + time->day_in_month - 1) *24*60*60) + (((year-1970)*365+leap_years)*24*60*60);
c010ab24:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab27:	0f b6 00             	movzbl (%eax),%eax
c010ab2a:	0f b6 d0             	movzbl %al,%edx
c010ab2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab30:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010ab34:	0f b6 c0             	movzbl %al,%eax
c010ab37:	c1 e0 02             	shl    $0x2,%eax
c010ab3a:	89 c1                	mov    %eax,%ecx
c010ab3c:	c1 e1 04             	shl    $0x4,%ecx
c010ab3f:	89 cb                	mov    %ecx,%ebx
c010ab41:	29 c3                	sub    %eax,%ebx
c010ab43:	89 d8                	mov    %ebx,%eax
c010ab45:	01 c2                	add    %eax,%edx
c010ab47:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab4a:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010ab4e:	0f b6 c0             	movzbl %al,%eax
c010ab51:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
c010ab57:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c010ab5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab5d:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c010ab61:	0f b6 c0             	movzbl %al,%eax
c010ab64:	83 e8 01             	sub    $0x1,%eax
c010ab67:	8b 14 85 00 1c 11 c0 	mov    -0x3feee400(,%eax,4),%edx
c010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab71:	0f b6 40 07          	movzbl 0x7(%eax),%eax
c010ab75:	0f b6 c0             	movzbl %al,%eax
c010ab78:	01 d0                	add    %edx,%eax
c010ab7a:	83 e8 01             	sub    $0x1,%eax
c010ab7d:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c010ab83:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010ab86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab89:	69 c0 6d 01 00 00    	imul   $0x16d,%eax,%eax
c010ab8f:	8d 88 36 07 f5 ff    	lea    -0xaf8ca(%eax),%ecx
c010ab95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab98:	01 c8                	add    %ecx,%eax
c010ab9a:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
c010aba0:	01 d0                	add    %edx,%eax
c010aba2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if((time->month >2) && (year%4==0 && (year%100!=0 || year%400==0)))
c010aba5:	8b 45 08             	mov    0x8(%ebp),%eax
c010aba8:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c010abac:	3c 02                	cmp    $0x2,%al
c010abae:	76 62                	jbe    c010ac12 <unix_time+0x16d>
c010abb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abb3:	83 e0 03             	and    $0x3,%eax
c010abb6:	85 c0                	test   %eax,%eax
c010abb8:	75 58                	jne    c010ac12 <unix_time+0x16d>
c010abba:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010abbd:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010abc2:	89 c8                	mov    %ecx,%eax
c010abc4:	f7 ea                	imul   %edx
c010abc6:	c1 fa 05             	sar    $0x5,%edx
c010abc9:	89 c8                	mov    %ecx,%eax
c010abcb:	c1 f8 1f             	sar    $0x1f,%eax
c010abce:	89 d3                	mov    %edx,%ebx
c010abd0:	29 c3                	sub    %eax,%ebx
c010abd2:	89 d8                	mov    %ebx,%eax
c010abd4:	6b c0 64             	imul   $0x64,%eax,%eax
c010abd7:	89 ca                	mov    %ecx,%edx
c010abd9:	29 c2                	sub    %eax,%edx
c010abdb:	89 d0                	mov    %edx,%eax
c010abdd:	85 c0                	test   %eax,%eax
c010abdf:	75 2a                	jne    c010ac0b <unix_time+0x166>
c010abe1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010abe4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c010abe9:	89 c8                	mov    %ecx,%eax
c010abeb:	f7 ea                	imul   %edx
c010abed:	c1 fa 07             	sar    $0x7,%edx
c010abf0:	89 c8                	mov    %ecx,%eax
c010abf2:	c1 f8 1f             	sar    $0x1f,%eax
c010abf5:	89 d3                	mov    %edx,%ebx
c010abf7:	29 c3                	sub    %eax,%ebx
c010abf9:	89 d8                	mov    %ebx,%eax
c010abfb:	69 c0 90 01 00 00    	imul   $0x190,%eax,%eax
c010ac01:	89 ca                	mov    %ecx,%edx
c010ac03:	29 c2                	sub    %eax,%edx
c010ac05:	89 d0                	mov    %edx,%eax
c010ac07:	85 c0                	test   %eax,%eax
c010ac09:	75 07                	jne    c010ac12 <unix_time+0x16d>
        unix_time += 24*60*60;
c010ac0b:	81 45 f8 80 51 01 00 	addl   $0x15180,-0x8(%ebp)
    return unix_time;
c010ac12:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010ac15:	83 c4 10             	add    $0x10,%esp
c010ac18:	5b                   	pop    %ebx
c010ac19:	5d                   	pop    %ebp
c010ac1a:	c3                   	ret    

c010ac1b <print_time>:

/**
 * Print datetime
 */
void print_time(struct time *time)
{
c010ac1b:	55                   	push   %ebp
c010ac1c:	89 e5                	mov    %esp,%ebp
c010ac1e:	53                   	push   %ebx
c010ac1f:	83 ec 34             	sub    $0x34,%esp
    char *day_string;
    switch (time->week_day)
c010ac22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac25:	0f b6 40 06          	movzbl 0x6(%eax),%eax
c010ac29:	0f b6 c0             	movzbl %al,%eax
c010ac2c:	83 f8 06             	cmp    $0x6,%eax
c010ac2f:	77 47                	ja     c010ac78 <print_time+0x5d>
c010ac31:	8b 04 85 ac 1c 11 c0 	mov    -0x3feee354(,%eax,4),%eax
c010ac38:	ff e0                	jmp    *%eax
    {
        case 0:
            day_string = "Sonntag";
c010ac3a:	c7 45 f4 30 1c 11 c0 	movl   $0xc0111c30,-0xc(%ebp)
            break;
c010ac41:	eb 35                	jmp    c010ac78 <print_time+0x5d>
        case 1:
            day_string = "Montag";
c010ac43:	c7 45 f4 38 1c 11 c0 	movl   $0xc0111c38,-0xc(%ebp)
            break;
c010ac4a:	eb 2c                	jmp    c010ac78 <print_time+0x5d>
        case 2:
            day_string = "Dienstag";
c010ac4c:	c7 45 f4 3f 1c 11 c0 	movl   $0xc0111c3f,-0xc(%ebp)
            break;
c010ac53:	eb 23                	jmp    c010ac78 <print_time+0x5d>
        case 3:
            day_string = "Mittwoch";
c010ac55:	c7 45 f4 48 1c 11 c0 	movl   $0xc0111c48,-0xc(%ebp)
            break;
c010ac5c:	eb 1a                	jmp    c010ac78 <print_time+0x5d>
        case 4:
            day_string = "Donnerstag";
c010ac5e:	c7 45 f4 51 1c 11 c0 	movl   $0xc0111c51,-0xc(%ebp)
            break;
c010ac65:	eb 11                	jmp    c010ac78 <print_time+0x5d>
        case 5:
            day_string = "Freitag";
c010ac67:	c7 45 f4 5c 1c 11 c0 	movl   $0xc0111c5c,-0xc(%ebp)
            break;
c010ac6e:	eb 08                	jmp    c010ac78 <print_time+0x5d>
        case 6:
            day_string = "Samstag";
c010ac70:	c7 45 f4 64 1c 11 c0 	movl   $0xc0111c64,-0xc(%ebp)
            break;
c010ac77:	90                   	nop
    }

    printf("System Date: %02d/%02d/%02d (%s)\n", time->day_in_month, time->month, time->year, day_string);
c010ac78:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac7b:	0f b6 40 09          	movzbl 0x9(%eax),%eax
c010ac7f:	0f b6 c8             	movzbl %al,%ecx
c010ac82:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac85:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c010ac89:	0f b6 d0             	movzbl %al,%edx
c010ac8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac8f:	0f b6 40 07          	movzbl 0x7(%eax),%eax
c010ac93:	0f b6 c0             	movzbl %al,%eax
c010ac96:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010ac99:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c010ac9d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010aca1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010aca5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aca9:	c7 04 24 6c 1c 11 c0 	movl   $0xc0111c6c,(%esp)
c010acb0:	e8 c8 84 ff ff       	call   c010317d <printf>
    printf("System Time: %02d:%02d:%02d\n", time->hour, time->minute, time->second);
c010acb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010acb8:	0f b6 00             	movzbl (%eax),%eax
c010acbb:	0f b6 c8             	movzbl %al,%ecx
c010acbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010acc1:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010acc5:	0f b6 d0             	movzbl %al,%edx
c010acc8:	8b 45 08             	mov    0x8(%ebp),%eax
c010accb:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010accf:	0f b6 c0             	movzbl %al,%eax
c010acd2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010acd6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010acda:	89 44 24 04          	mov    %eax,0x4(%esp)
c010acde:	c7 04 24 8e 1c 11 c0 	movl   $0xc0111c8e,(%esp)
c010ace5:	e8 93 84 ff ff       	call   c010317d <printf>
}
c010acea:	83 c4 34             	add    $0x34,%esp
c010aced:	5b                   	pop    %ebx
c010acee:	5d                   	pop    %ebp
c010acef:	c3                   	ret    

c010acf0 <sys_time>:
/**
 * @brief unix sys_time syscall. Returns the current unix-timestamp to the user
 * @param current user cpu state
 */
void sys_time(struct cpu_state **cpu)
{
c010acf0:	55                   	push   %ebp
c010acf1:	89 e5                	mov    %esp,%ebp
c010acf3:	83 ec 28             	sub    $0x28,%esp
    struct time current_time;
    update_time(&current_time);
c010acf6:	8d 45 e9             	lea    -0x17(%ebp),%eax
c010acf9:	89 04 24             	mov    %eax,(%esp)
c010acfc:	e8 c7 18 00 00       	call   c010c5c8 <update_time>
    int stamp = unix_time(&current_time);
c010ad01:	8d 45 e9             	lea    -0x17(%ebp),%eax
c010ad04:	89 04 24             	mov    %eax,(%esp)
c010ad07:	e8 99 fd ff ff       	call   c010aaa5 <unix_time>
c010ad0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    (*cpu)->CPU_ARG0 = stamp;
c010ad0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad12:	8b 00                	mov    (%eax),%eax
c010ad14:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ad17:	89 50 28             	mov    %edx,0x28(%eax)
    if((*cpu)->CPU_ARG1)
c010ad1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad1d:	8b 00                	mov    (%eax),%eax
c010ad1f:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ad22:	85 c0                	test   %eax,%eax
c010ad24:	74 0d                	je     c010ad33 <sys_time+0x43>
        *((int*)(*cpu)->CPU_ARG1) = stamp;
c010ad26:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad29:	8b 00                	mov    (%eax),%eax
c010ad2b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ad2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ad31:	89 10                	mov    %edx,(%eax)
c010ad33:	c9                   	leave  
c010ad34:	c3                   	ret    

c010ad35 <inl>:
    asm volatile("inw %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline uint32_t inl(uint16_t port)
{
c010ad35:	55                   	push   %ebp
c010ad36:	89 e5                	mov    %esp,%ebp
c010ad38:	53                   	push   %ebx
c010ad39:	83 ec 14             	sub    $0x14,%esp
c010ad3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad3f:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    uint32_t result;
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
c010ad43:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010ad47:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010ad4b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010ad4f:	ed                   	in     (%dx),%eax
c010ad50:	89 c3                	mov    %eax,%ebx
c010ad52:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    return result;
c010ad55:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010ad58:	83 c4 14             	add    $0x14,%esp
c010ad5b:	5b                   	pop    %ebx
c010ad5c:	5d                   	pop    %ebp
c010ad5d:	c3                   	ret    

c010ad5e <outb>:

static inline void outb(uint16_t port, uint8_t value)
{
c010ad5e:	55                   	push   %ebp
c010ad5f:	89 e5                	mov    %esp,%ebp
c010ad61:	83 ec 08             	sub    $0x8,%esp
c010ad64:	8b 55 08             	mov    0x8(%ebp),%edx
c010ad67:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad6a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ad6e:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010ad71:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ad75:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ad79:	ee                   	out    %al,(%dx)
}
c010ad7a:	c9                   	leave  
c010ad7b:	c3                   	ret    

c010ad7c <outw>:

static inline void outw(uint16_t port, uint16_t value)
{
c010ad7c:	55                   	push   %ebp
c010ad7d:	89 e5                	mov    %esp,%ebp
c010ad7f:	83 ec 08             	sub    $0x8,%esp
c010ad82:	8b 55 08             	mov    0x8(%ebp),%edx
c010ad85:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad88:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ad8c:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    asm volatile("outw %1, %0" : : "Nd" (port), "a" (value));
c010ad90:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ad94:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c010ad98:	66 ef                	out    %ax,(%dx)
}
c010ad9a:	c9                   	leave  
c010ad9b:	c3                   	ret    

c010ad9c <outl>:

static inline void outl(uint16_t port, uint32_t value)
{
c010ad9c:	55                   	push   %ebp
c010ad9d:	89 e5                	mov    %esp,%ebp
c010ad9f:	83 ec 04             	sub    $0x4,%esp
c010ada2:	8b 45 08             	mov    0x8(%ebp),%eax
c010ada5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    asm volatile("outl %1, %0" : : "Nd" (port), "a" (value));
c010ada9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010adad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010adb0:	ef                   	out    %eax,(%dx)
}
c010adb1:	c9                   	leave  
c010adb2:	c3                   	ret    

c010adb3 <pci_read>:
#include <mm/heap.h>
#include <printf.h>
#include <idt.h>

uint32_t pci_read(uint8_t bus,uint8_t dev,uint8_t func,uint8_t offset)
{
c010adb3:	55                   	push   %ebp
c010adb4:	89 e5                	mov    %esp,%ebp
c010adb6:	53                   	push   %ebx
c010adb7:	83 ec 18             	sub    $0x18,%esp
c010adba:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010adbd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010adc0:	8b 55 10             	mov    0x10(%ebp),%edx
c010adc3:	8b 45 14             	mov    0x14(%ebp),%eax
c010adc6:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010adc9:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010adcc:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010adcf:	88 45 ec             	mov    %al,-0x14(%ebp)
    outl(PCI_CONFIG_ADDRESS,0x80000000 | (bus << 16) | (dev << 11) |( func << 8) | (offset & 0xFC));
c010add2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010add6:	c1 e0 10             	shl    $0x10,%eax
c010add9:	89 c2                	mov    %eax,%edx
c010addb:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010addf:	c1 e0 0b             	shl    $0xb,%eax
c010ade2:	09 c2                	or     %eax,%edx
c010ade4:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c010ade8:	c1 e0 08             	shl    $0x8,%eax
c010adeb:	09 c2                	or     %eax,%edx
c010aded:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010adf1:	25 fc 00 00 00       	and    $0xfc,%eax
c010adf6:	09 d0                	or     %edx,%eax
c010adf8:	0d 00 00 00 80       	or     $0x80000000,%eax
c010adfd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae01:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c010ae08:	e8 8f ff ff ff       	call   c010ad9c <outl>
    return inl(PCI_CONFIG_DATA) >> (8 * (offset % 4));
c010ae0d:	c7 04 24 fc 0c 00 00 	movl   $0xcfc,(%esp)
c010ae14:	e8 1c ff ff ff       	call   c010ad35 <inl>
c010ae19:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
c010ae1d:	83 e2 03             	and    $0x3,%edx
c010ae20:	c1 e2 03             	shl    $0x3,%edx
c010ae23:	89 d1                	mov    %edx,%ecx
c010ae25:	d3 e8                	shr    %cl,%eax
}
c010ae27:	83 c4 18             	add    $0x18,%esp
c010ae2a:	5b                   	pop    %ebx
c010ae2b:	5d                   	pop    %ebp
c010ae2c:	c3                   	ret    

c010ae2d <pci_readb>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
uint8_t pci_readb(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c010ae2d:	55                   	push   %ebp
c010ae2e:	89 e5                	mov    %esp,%ebp
c010ae30:	53                   	push   %ebx
c010ae31:	83 ec 20             	sub    $0x20,%esp
c010ae34:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010ae37:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ae3a:	8b 55 10             	mov    0x10(%ebp),%edx
c010ae3d:	8b 45 14             	mov    0x14(%ebp),%eax
c010ae40:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010ae43:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010ae46:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010ae49:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset) & 0xff;
c010ae4c:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c010ae50:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c010ae54:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c010ae58:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ae5c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010ae60:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010ae64:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ae68:	89 04 24             	mov    %eax,(%esp)
c010ae6b:	e8 43 ff ff ff       	call   c010adb3 <pci_read>
}
c010ae70:	83 c4 20             	add    $0x20,%esp
c010ae73:	5b                   	pop    %ebx
c010ae74:	5d                   	pop    %ebp
c010ae75:	c3                   	ret    

c010ae76 <pci_readw>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
inline uint16_t pci_readw(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c010ae76:	55                   	push   %ebp
c010ae77:	89 e5                	mov    %esp,%ebp
c010ae79:	53                   	push   %ebx
c010ae7a:	83 ec 20             	sub    $0x20,%esp
c010ae7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010ae80:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ae83:	8b 55 10             	mov    0x10(%ebp),%edx
c010ae86:	8b 45 14             	mov    0x14(%ebp),%eax
c010ae89:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010ae8c:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010ae8f:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010ae92:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset) & 0xffff;
c010ae95:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c010ae99:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c010ae9d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c010aea1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010aea5:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010aea9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010aead:	89 54 24 04          	mov    %edx,0x4(%esp)
c010aeb1:	89 04 24             	mov    %eax,(%esp)
c010aeb4:	e8 fa fe ff ff       	call   c010adb3 <pci_read>
}
c010aeb9:	83 c4 20             	add    $0x20,%esp
c010aebc:	5b                   	pop    %ebx
c010aebd:	5d                   	pop    %ebp
c010aebe:	c3                   	ret    

c010aebf <pci_readl>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
inline uint32_t pci_readl(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c010aebf:	55                   	push   %ebp
c010aec0:	89 e5                	mov    %esp,%ebp
c010aec2:	53                   	push   %ebx
c010aec3:	83 ec 20             	sub    $0x20,%esp
c010aec6:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010aec9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010aecc:	8b 55 10             	mov    0x10(%ebp),%edx
c010aecf:	8b 45 14             	mov    0x14(%ebp),%eax
c010aed2:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010aed5:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010aed8:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010aedb:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset);
c010aede:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c010aee2:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c010aee6:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c010aeea:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010aeee:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010aef2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010aef6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010aefa:	89 04 24             	mov    %eax,(%esp)
c010aefd:	e8 b1 fe ff ff       	call   c010adb3 <pci_read>
}
c010af02:	83 c4 20             	add    $0x20,%esp
c010af05:	5b                   	pop    %ebx
c010af06:	5d                   	pop    %ebp
c010af07:	c3                   	ret    

c010af08 <pci_writeb>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writeb(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint8_t value)
{
c010af08:	55                   	push   %ebp
c010af09:	89 e5                	mov    %esp,%ebp
c010af0b:	56                   	push   %esi
c010af0c:	53                   	push   %ebx
c010af0d:	83 ec 20             	sub    $0x20,%esp
c010af10:	8b 75 08             	mov    0x8(%ebp),%esi
c010af13:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010af16:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010af19:	8b 55 14             	mov    0x14(%ebp),%edx
c010af1c:	8b 45 18             	mov    0x18(%ebp),%eax
c010af1f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010af22:	89 f0                	mov    %esi,%eax
c010af24:	88 45 f4             	mov    %al,-0xc(%ebp)
c010af27:	88 5d f0             	mov    %bl,-0x10(%ebp)
c010af2a:	88 4d ec             	mov    %cl,-0x14(%ebp)
c010af2d:	88 55 e8             	mov    %dl,-0x18(%ebp)
c010af30:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010af34:	88 45 e4             	mov    %al,-0x1c(%ebp)
    outl(PCI_CONFIG_ADDRESS,0x80000000 | (bus << 16) | (dev << 11 ) | (func << 8) | (offset & 0xFC));
c010af37:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010af3b:	c1 e0 10             	shl    $0x10,%eax
c010af3e:	89 c2                	mov    %eax,%edx
c010af40:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c010af44:	c1 e0 0b             	shl    $0xb,%eax
c010af47:	09 c2                	or     %eax,%edx
c010af49:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010af4d:	c1 e0 08             	shl    $0x8,%eax
c010af50:	09 c2                	or     %eax,%edx
c010af52:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010af56:	25 fc 00 00 00       	and    $0xfc,%eax
c010af5b:	09 d0                	or     %edx,%eax
c010af5d:	0d 00 00 00 80       	or     $0x80000000,%eax
c010af62:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af66:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c010af6d:	e8 2a fe ff ff       	call   c010ad9c <outl>
    outb(PCI_CONFIG_DATA + (offset & 3), value);
c010af72:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010af76:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010af7a:	83 e0 03             	and    $0x3,%eax
c010af7d:	66 05 fc 0c          	add    $0xcfc,%ax
c010af81:	0f b7 c0             	movzwl %ax,%eax
c010af84:	89 54 24 04          	mov    %edx,0x4(%esp)
c010af88:	89 04 24             	mov    %eax,(%esp)
c010af8b:	e8 ce fd ff ff       	call   c010ad5e <outb>
}
c010af90:	83 c4 20             	add    $0x20,%esp
c010af93:	5b                   	pop    %ebx
c010af94:	5e                   	pop    %esi
c010af95:	5d                   	pop    %ebp
c010af96:	c3                   	ret    

c010af97 <pci_writew>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writew(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint16_t value)
{
c010af97:	55                   	push   %ebp
c010af98:	89 e5                	mov    %esp,%ebp
c010af9a:	56                   	push   %esi
c010af9b:	53                   	push   %ebx
c010af9c:	83 ec 20             	sub    $0x20,%esp
c010af9f:	8b 75 08             	mov    0x8(%ebp),%esi
c010afa2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010afa5:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010afa8:	8b 55 14             	mov    0x14(%ebp),%edx
c010afab:	8b 45 18             	mov    0x18(%ebp),%eax
c010afae:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010afb1:	89 f0                	mov    %esi,%eax
c010afb3:	88 45 f4             	mov    %al,-0xc(%ebp)
c010afb6:	88 5d f0             	mov    %bl,-0x10(%ebp)
c010afb9:	88 4d ec             	mov    %cl,-0x14(%ebp)
c010afbc:	88 55 e8             	mov    %dl,-0x18(%ebp)
c010afbf:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c010afc3:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    outl(PCI_CONFIG_ADDRESS, 0x80000000 | (bus << 16) | (dev << 11) | (func << 8) | (offset & 0xFC));
c010afc7:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010afcb:	c1 e0 10             	shl    $0x10,%eax
c010afce:	89 c2                	mov    %eax,%edx
c010afd0:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c010afd4:	c1 e0 0b             	shl    $0xb,%eax
c010afd7:	09 c2                	or     %eax,%edx
c010afd9:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010afdd:	c1 e0 08             	shl    $0x8,%eax
c010afe0:	09 c2                	or     %eax,%edx
c010afe2:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010afe6:	25 fc 00 00 00       	and    $0xfc,%eax
c010afeb:	09 d0                	or     %edx,%eax
c010afed:	0d 00 00 00 80       	or     $0x80000000,%eax
c010aff2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aff6:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c010affd:	e8 9a fd ff ff       	call   c010ad9c <outl>
    outw(PCI_CONFIG_DATA + (offset & 2), value);
c010b002:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010b006:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010b00a:	83 e0 02             	and    $0x2,%eax
c010b00d:	66 05 fc 0c          	add    $0xcfc,%ax
c010b011:	0f b7 c0             	movzwl %ax,%eax
c010b014:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b018:	89 04 24             	mov    %eax,(%esp)
c010b01b:	e8 5c fd ff ff       	call   c010ad7c <outw>
}
c010b020:	83 c4 20             	add    $0x20,%esp
c010b023:	5b                   	pop    %ebx
c010b024:	5e                   	pop    %esi
c010b025:	5d                   	pop    %ebp
c010b026:	c3                   	ret    

c010b027 <pci_writel>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writel(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint32_t value)
{
c010b027:	55                   	push   %ebp
c010b028:	89 e5                	mov    %esp,%ebp
c010b02a:	53                   	push   %ebx
c010b02b:	83 ec 18             	sub    $0x18,%esp
c010b02e:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010b031:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010b034:	8b 55 10             	mov    0x10(%ebp),%edx
c010b037:	8b 45 14             	mov    0x14(%ebp),%eax
c010b03a:	88 5d f8             	mov    %bl,-0x8(%ebp)
c010b03d:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010b040:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010b043:	88 45 ec             	mov    %al,-0x14(%ebp)
    outl(PCI_CONFIG_ADDRESS, 0x80000000 | (bus << 16) | (dev << 11) | (func << 8) | (offset & 0xFC));
c010b046:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010b04a:	c1 e0 10             	shl    $0x10,%eax
c010b04d:	89 c2                	mov    %eax,%edx
c010b04f:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010b053:	c1 e0 0b             	shl    $0xb,%eax
c010b056:	09 c2                	or     %eax,%edx
c010b058:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c010b05c:	c1 e0 08             	shl    $0x8,%eax
c010b05f:	09 c2                	or     %eax,%edx
c010b061:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010b065:	25 fc 00 00 00       	and    $0xfc,%eax
c010b06a:	09 d0                	or     %edx,%eax
c010b06c:	0d 00 00 00 80       	or     $0x80000000,%eax
c010b071:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b075:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c010b07c:	e8 1b fd ff ff       	call   c010ad9c <outl>
    outl(PCI_CONFIG_DATA, value);
c010b081:	8b 45 18             	mov    0x18(%ebp),%eax
c010b084:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b088:	c7 04 24 fc 0c 00 00 	movl   $0xcfc,(%esp)
c010b08f:	e8 08 fd ff ff       	call   c010ad9c <outl>
}
c010b094:	83 c4 18             	add    $0x18,%esp
c010b097:	5b                   	pop    %ebx
c010b098:	5d                   	pop    %ebp
c010b099:	c3                   	ret    

c010b09a <pci_dev_exist>:
 *  @param Bus
 *  @param Device/Slot
 *  @return true (device exists) or false (device does not exist)
 */
bool pci_dev_exist(uint8_t bus, uint8_t dev, uint8_t func)
{
c010b09a:	55                   	push   %ebp
c010b09b:	89 e5                	mov    %esp,%ebp
c010b09d:	83 ec 2c             	sub    $0x2c,%esp
c010b0a0:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b0a3:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b0a6:	8b 45 10             	mov    0x10(%ebp),%eax
c010b0a9:	88 4d ec             	mov    %cl,-0x14(%ebp)
c010b0ac:	88 55 e8             	mov    %dl,-0x18(%ebp)
c010b0af:	88 45 e4             	mov    %al,-0x1c(%ebp)
    uint16_t vendor_ID = pci_readw(bus, dev, func, 0);
c010b0b2:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c010b0b6:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c010b0ba:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010b0be:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b0c5:	00 
c010b0c6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b0ca:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b0ce:	89 04 24             	mov    %eax,(%esp)
c010b0d1:	e8 a0 fd ff ff       	call   c010ae76 <pci_readw>
c010b0d6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    if(vendor_ID == 0 || vendor_ID == 0xFFFF)
c010b0da:	66 83 7d fe 00       	cmpw   $0x0,-0x2(%ebp)
c010b0df:	74 07                	je     c010b0e8 <pci_dev_exist+0x4e>
c010b0e1:	66 83 7d fe ff       	cmpw   $0xffff,-0x2(%ebp)
c010b0e6:	75 07                	jne    c010b0ef <pci_dev_exist+0x55>
        return false;
c010b0e8:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0ed:	eb 05                	jmp    c010b0f4 <pci_dev_exist+0x5a>
    return true;
c010b0ef:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010b0f4:	c9                   	leave  
c010b0f5:	c3                   	ret    

c010b0f6 <pci_search_device>:
 * @param device devicde- ID of the device
 * @param num of the device in a device list
 * @return NULL if there is no more device of the specified type or the adress auf the PCI device struct
 */
struct pci_dev *pci_search_device(list_t *device_list, uint16_t vendor, uint16_t device, int num)
{
c010b0f6:	55                   	push   %ebp
c010b0f7:	89 e5                	mov    %esp,%ebp
c010b0f9:	83 ec 38             	sub    $0x38,%esp
c010b0fc:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b0ff:	8b 45 10             	mov    0x10(%ebp),%eax
c010b102:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c010b106:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
    list_lock(device_list);
c010b10a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b10d:	89 04 24             	mov    %eax,(%esp)
c010b110:	e8 0c 77 ff ff       	call   c0102821 <list_lock>
    iterator_t device_it = iterator_create(device_list);
c010b115:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b118:	8b 55 08             	mov    0x8(%ebp),%edx
c010b11b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b11f:	89 04 24             	mov    %eax,(%esp)
c010b122:	e8 20 77 ff ff       	call   c0102847 <iterator_create>
c010b127:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_empty(device_list) && !list_is_last(&device_it))
c010b12a:	eb 67                	jmp    c010b193 <pci_search_device+0x9d>
    {
        struct pci_dev *current_dev = list_get_current(&device_it);
c010b12c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b12f:	89 04 24             	mov    %eax,(%esp)
c010b132:	e8 d9 77 ff ff       	call   c0102910 <list_get_current>
c010b137:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(num == 0 && current_dev->device_ID == device && current_dev->vendor_ID == vendor)
c010b13a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b13e:	75 2a                	jne    c010b16a <pci_search_device+0x74>
c010b140:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b143:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c010b147:	66 3b 45 e0          	cmp    -0x20(%ebp),%ax
c010b14b:	75 1d                	jne    c010b16a <pci_search_device+0x74>
c010b14d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b150:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
c010b154:	66 3b 45 e4          	cmp    -0x1c(%ebp),%ax
c010b158:	75 10                	jne    c010b16a <pci_search_device+0x74>
        {
            list_unlock(device_list);
c010b15a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b15d:	89 04 24             	mov    %eax,(%esp)
c010b160:	e8 cf 76 ff ff       	call   c0102834 <list_unlock>
            return current_dev;
c010b165:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b168:	eb 5b                	jmp    c010b1c5 <pci_search_device+0xcf>
        }
        else if(current_dev->device_ID == device && current_dev->vendor_ID == vendor)
c010b16a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b16d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c010b171:	66 3b 45 e0          	cmp    -0x20(%ebp),%ax
c010b175:	75 11                	jne    c010b188 <pci_search_device+0x92>
c010b177:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b17a:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
c010b17e:	66 3b 45 e4          	cmp    -0x1c(%ebp),%ax
c010b182:	75 04                	jne    c010b188 <pci_search_device+0x92>
        {
            num--;
c010b184:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
        }
        list_next(&device_it);
c010b188:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b18b:	89 04 24             	mov    %eax,(%esp)
c010b18e:	e8 a2 77 ff ff       	call   c0102935 <list_next>
 */
struct pci_dev *pci_search_device(list_t *device_list, uint16_t vendor, uint16_t device, int num)
{
    list_lock(device_list);
    iterator_t device_it = iterator_create(device_list);
    while(!list_is_empty(device_list) && !list_is_last(&device_it))
c010b193:	8b 45 08             	mov    0x8(%ebp),%eax
c010b196:	89 04 24             	mov    %eax,(%esp)
c010b199:	e8 68 76 ff ff       	call   c0102806 <list_is_empty>
c010b19e:	85 c0                	test   %eax,%eax
c010b1a0:	75 13                	jne    c010b1b5 <pci_search_device+0xbf>
c010b1a2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b1a5:	89 04 24             	mov    %eax,(%esp)
c010b1a8:	e8 af 77 ff ff       	call   c010295c <list_is_last>
c010b1ad:	85 c0                	test   %eax,%eax
c010b1af:	0f 84 77 ff ff ff    	je     c010b12c <pci_search_device+0x36>
        {
            num--;
        }
        list_next(&device_it);
    }
    list_unlock(device_list);
c010b1b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b8:	89 04 24             	mov    %eax,(%esp)
c010b1bb:	e8 74 76 ff ff       	call   c0102834 <list_unlock>
    return NULL;
c010b1c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b1c5:	c9                   	leave  
c010b1c6:	c3                   	ret    

c010b1c7 <pci_install_isr>:
 * installs a isr handler for a specific pci device
 * @param isr interrupt service routine
 * @param dev pci device
 */
void pci_install_isr(void (*isr)(struct pci_dev *dev), struct pci_dev *dev)
{
c010b1c7:	55                   	push   %ebp
c010b1c8:	89 e5                	mov    %esp,%ebp
c010b1ca:	83 ec 28             	sub    $0x28,%esp
    while(pci_irq_handles->lock) {}
c010b1cd:	90                   	nop
c010b1ce:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b1d3:	8b 00                	mov    (%eax),%eax
c010b1d5:	85 c0                	test   %eax,%eax
c010b1d7:	75 f5                	jne    c010b1ce <pci_install_isr+0x7>
    list_lock(pci_irq_handles);
c010b1d9:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b1de:	89 04 24             	mov    %eax,(%esp)
c010b1e1:	e8 3b 76 ff ff       	call   c0102821 <list_lock>
    struct pci_isr *new_pci_isr = malloc(sizeof(struct pci_isr));
c010b1e6:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010b1ed:	e8 aa 24 00 00       	call   c010d69c <malloc>
c010b1f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    new_pci_isr->isr = isr;
c010b1f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1f8:	8b 55 08             	mov    0x8(%ebp),%edx
c010b1fb:	89 10                	mov    %edx,(%eax)
    new_pci_isr->dev = dev;
c010b1fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b200:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b203:	89 50 04             	mov    %edx,0x4(%eax)
    list_push_front(pci_irq_handles,new_pci_isr);
c010b206:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b20b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b20e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b212:	89 04 24             	mov    %eax,(%esp)
c010b215:	e8 9b 74 ff ff       	call   c01026b5 <list_push_front>
    list_unlock(pci_irq_handles);
c010b21a:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b21f:	89 04 24             	mov    %eax,(%esp)
c010b222:	e8 0d 76 ff ff       	call   c0102834 <list_unlock>
}
c010b227:	c9                   	leave  
c010b228:	c3                   	ret    

c010b229 <pci_deinstall_isr>:
 * deinstalls a isr handler for a specific pci device
 * @param isr interrupt service routine
 * @param dev pci device
 */
int pci_deinstall_isr(void (*isr)(struct pci_dev *dev), struct pci_dev *dev)
{
c010b229:	55                   	push   %ebp
c010b22a:	89 e5                	mov    %esp,%ebp
c010b22c:	83 ec 28             	sub    $0x28,%esp
    while(pci_irq_handles->lock) {}
c010b22f:	90                   	nop
c010b230:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b235:	8b 00                	mov    (%eax),%eax
c010b237:	85 c0                	test   %eax,%eax
c010b239:	75 f5                	jne    c010b230 <pci_deinstall_isr+0x7>
    list_lock(pci_irq_handles);
c010b23b:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b240:	89 04 24             	mov    %eax,(%esp)
c010b243:	e8 d9 75 ff ff       	call   c0102821 <list_lock>
    iterator_t handle_it = iterator_create(pci_irq_handles);
c010b248:	8b 15 2c a0 11 c0    	mov    0xc011a02c,%edx
c010b24e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b251:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b255:	89 04 24             	mov    %eax,(%esp)
c010b258:	e8 ea 75 ff ff       	call   c0102847 <iterator_create>
c010b25d:	83 ec 04             	sub    $0x4,%esp
    int num = 0;
c010b260:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(!list_is_last(&handle_it))
c010b267:	eb 4a                	jmp    c010b2b3 <pci_deinstall_isr+0x8a>
    {
        struct pci_isr *current_isr = list_get_current(&handle_it);
c010b269:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b26c:	89 04 24             	mov    %eax,(%esp)
c010b26f:	e8 9c 76 ff ff       	call   c0102910 <list_get_current>
c010b274:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(current_isr->isr == isr && current_isr->dev == dev)
c010b277:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b27a:	8b 00                	mov    (%eax),%eax
c010b27c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b27f:	75 27                	jne    c010b2a8 <pci_deinstall_isr+0x7f>
c010b281:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b284:	8b 40 04             	mov    0x4(%eax),%eax
c010b287:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b28a:	75 1c                	jne    c010b2a8 <pci_deinstall_isr+0x7f>
        {
            list_remove(&handle_it);
c010b28c:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b28f:	89 04 24             	mov    %eax,(%esp)
c010b292:	e8 0b 77 ff ff       	call   c01029a2 <list_remove>
            list_set_first(&handle_it);
c010b297:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b29a:	89 04 24             	mov    %eax,(%esp)
c010b29d:	e8 d5 76 ff ff       	call   c0102977 <list_set_first>
            num++;
c010b2a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b2a6:	eb 0b                	jmp    c010b2b3 <pci_deinstall_isr+0x8a>
        }
        else
            list_next(&handle_it);
c010b2a8:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b2ab:	89 04 24             	mov    %eax,(%esp)
c010b2ae:	e8 82 76 ff ff       	call   c0102935 <list_next>
{
    while(pci_irq_handles->lock) {}
    list_lock(pci_irq_handles);
    iterator_t handle_it = iterator_create(pci_irq_handles);
    int num = 0;
    while(!list_is_last(&handle_it))
c010b2b3:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010b2b6:	89 04 24             	mov    %eax,(%esp)
c010b2b9:	e8 9e 76 ff ff       	call   c010295c <list_is_last>
c010b2be:	85 c0                	test   %eax,%eax
c010b2c0:	74 a7                	je     c010b269 <pci_deinstall_isr+0x40>
            num++;
        }
        else
            list_next(&handle_it);
    }
    list_unlock(pci_irq_handles);
c010b2c2:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b2c7:	89 04 24             	mov    %eax,(%esp)
c010b2ca:	e8 65 75 ff ff       	call   c0102834 <list_unlock>
    return num;
c010b2cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b2d2:	c9                   	leave  
c010b2d3:	c3                   	ret    

c010b2d4 <pci_irq_handler>:

/**
 * handels pci irqs
 */
void pci_irq_handler(void)
{
c010b2d4:	55                   	push   %ebp
c010b2d5:	89 e5                	mov    %esp,%ebp
c010b2d7:	53                   	push   %ebx
c010b2d8:	83 ec 44             	sub    $0x44,%esp
    struct list_node *backup = pci_dev_list->head;
c010b2db:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b2e0:	8b 40 04             	mov    0x4(%eax),%eax
c010b2e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    iterator_t pci_dev_it = iterator_create(pci_dev_list);
c010b2e6:	8b 15 30 a0 11 c0    	mov    0xc011a030,%edx
c010b2ec:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b2ef:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b2f3:	89 04 24             	mov    %eax,(%esp)
c010b2f6:	e8 4c 75 ff ff       	call   c0102847 <iterator_create>
c010b2fb:	83 ec 04             	sub    $0x4,%esp
    while(!list_is_last(&pci_dev_it))
c010b2fe:	e9 fe 00 00 00       	jmp    c010b401 <pci_irq_handler+0x12d>
    {
        struct pci_dev * current_dev = list_get_current(&pci_dev_it);
c010b303:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b306:	89 04 24             	mov    %eax,(%esp)
c010b309:	e8 02 76 ff ff       	call   c0102910 <list_get_current>
c010b30e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint16_t status = pci_readw(current_dev->bus, current_dev->dev, current_dev->func, PCI_STATUS);
c010b311:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b314:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010b318:	0f b6 c8             	movzbl %al,%ecx
c010b31b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b31e:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010b322:	0f b6 d0             	movzbl %al,%edx
c010b325:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b328:	0f b6 00             	movzbl (%eax),%eax
c010b32b:	0f b6 c0             	movzbl %al,%eax
c010b32e:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010b335:	00 
c010b336:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b33a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b33e:	89 04 24             	mov    %eax,(%esp)
c010b341:	e8 30 fb ff ff       	call   c010ae76 <pci_readw>
c010b346:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
        if(status & PCI_STATUS_INT)
c010b34a:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010b34e:	83 e0 08             	and    $0x8,%eax
c010b351:	85 c0                	test   %eax,%eax
c010b353:	0f 84 9d 00 00 00    	je     c010b3f6 <pci_irq_handler+0x122>
        {
            iterator_t pci_irq_it = iterator_create(pci_irq_handles);
c010b359:	8b 15 2c a0 11 c0    	mov    0xc011a02c,%edx
c010b35f:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b362:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b366:	89 04 24             	mov    %eax,(%esp)
c010b369:	e8 d9 74 ff ff       	call   c0102847 <iterator_create>
c010b36e:	83 ec 04             	sub    $0x4,%esp
            while(!list_is_last(&pci_irq_it))
c010b371:	eb 31                	jmp    c010b3a4 <pci_irq_handler+0xd0>
            {
                struct pci_isr *current_isr = list_get_current(&pci_irq_it);
c010b373:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b376:	89 04 24             	mov    %eax,(%esp)
c010b379:	e8 92 75 ff ff       	call   c0102910 <list_get_current>
c010b37e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if(current_isr->dev == current_dev)
c010b381:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b384:	8b 40 04             	mov    0x4(%eax),%eax
c010b387:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010b38a:	75 0d                	jne    c010b399 <pci_irq_handler+0xc5>
                    current_isr->isr(current_dev);
c010b38c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b38f:	8b 00                	mov    (%eax),%eax
c010b391:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b394:	89 14 24             	mov    %edx,(%esp)
c010b397:	ff d0                	call   *%eax
                list_next(&pci_irq_it);
c010b399:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b39c:	89 04 24             	mov    %eax,(%esp)
c010b39f:	e8 91 75 ff ff       	call   c0102935 <list_next>
        struct pci_dev * current_dev = list_get_current(&pci_dev_it);
        uint16_t status = pci_readw(current_dev->bus, current_dev->dev, current_dev->func, PCI_STATUS);
        if(status & PCI_STATUS_INT)
        {
            iterator_t pci_irq_it = iterator_create(pci_irq_handles);
            while(!list_is_last(&pci_irq_it))
c010b3a4:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010b3a7:	89 04 24             	mov    %eax,(%esp)
c010b3aa:	e8 ad 75 ff ff       	call   c010295c <list_is_last>
c010b3af:	85 c0                	test   %eax,%eax
c010b3b1:	74 c0                	je     c010b373 <pci_irq_handler+0x9f>
                struct pci_isr *current_isr = list_get_current(&pci_irq_it);
                if(current_isr->dev == current_dev)
                    current_isr->isr(current_dev);
                list_next(&pci_irq_it);
            }
            pci_writel(current_dev->bus, current_dev->dev, current_dev->func, PCI_STATUS, status ^ 1);
c010b3b3:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010b3b7:	83 f0 01             	xor    $0x1,%eax
c010b3ba:	0f b7 d8             	movzwl %ax,%ebx
c010b3bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3c0:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010b3c4:	0f b6 c8             	movzbl %al,%ecx
c010b3c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3ca:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010b3ce:	0f b6 d0             	movzbl %al,%edx
c010b3d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3d4:	0f b6 00             	movzbl (%eax),%eax
c010b3d7:	0f b6 c0             	movzbl %al,%eax
c010b3da:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c010b3de:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010b3e5:	00 
c010b3e6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b3ea:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b3ee:	89 04 24             	mov    %eax,(%esp)
c010b3f1:	e8 31 fc ff ff       	call   c010b027 <pci_writel>
        }
        list_next(&pci_dev_it);
c010b3f6:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b3f9:	89 04 24             	mov    %eax,(%esp)
c010b3fc:	e8 34 75 ff ff       	call   c0102935 <list_next>
 */
void pci_irq_handler(void)
{
    struct list_node *backup = pci_dev_list->head;
    iterator_t pci_dev_it = iterator_create(pci_dev_list);
    while(!list_is_last(&pci_dev_it))
c010b401:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b404:	89 04 24             	mov    %eax,(%esp)
c010b407:	e8 50 75 ff ff       	call   c010295c <list_is_last>
c010b40c:	85 c0                	test   %eax,%eax
c010b40e:	0f 84 ef fe ff ff    	je     c010b303 <pci_irq_handler+0x2f>
            pci_writel(current_dev->bus, current_dev->dev, current_dev->func, PCI_STATUS, status ^ 1);
        }
        list_next(&pci_dev_it);
    }
    //printf("PCI-IRQ!\n");
    pci_dev_list->head = backup;
c010b414:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b419:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b41c:	89 50 04             	mov    %edx,0x4(%eax)
}
c010b41f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010b422:	c9                   	leave  
c010b423:	c3                   	ret    

c010b424 <INIT_PCI>:

#define PRINT_DEV_LIST


void INIT_PCI()
{
c010b424:	55                   	push   %ebp
c010b425:	89 e5                	mov    %esp,%ebp
c010b427:	57                   	push   %edi
c010b428:	56                   	push   %esi
c010b429:	53                   	push   %ebx
c010b42a:	83 ec 5c             	sub    $0x5c,%esp
#ifdef PRINT_DEV_LIST
    printf("PCI-devices:\n");
c010b42d:	c7 04 24 b1 1e 11 c0 	movl   $0xc0111eb1,(%esp)
c010b434:	e8 71 08 00 00       	call   c010bcaa <puts>
#endif
    if(!pci_dev_list)
c010b439:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b43e:	85 c0                	test   %eax,%eax
c010b440:	75 0a                	jne    c010b44c <INIT_PCI+0x28>
        pci_dev_list = list_create();
c010b442:	e8 37 71 ff ff       	call   c010257e <list_create>
c010b447:	a3 30 a0 11 c0       	mov    %eax,0xc011a030
    if(!pci_irq_handles)
c010b44c:	a1 2c a0 11 c0       	mov    0xc011a02c,%eax
c010b451:	85 c0                	test   %eax,%eax
c010b453:	75 0a                	jne    c010b45f <INIT_PCI+0x3b>
        pci_irq_handles = list_create();
c010b455:	e8 24 71 ff ff       	call   c010257e <list_create>
c010b45a:	a3 2c a0 11 c0       	mov    %eax,0xc011a02c
    pci_dev_list->lock = true;
c010b45f:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b464:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
c010b46a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010b471:	e9 88 05 00 00       	jmp    c010b9fe <INIT_PCI+0x5da>
    {

        for(dev = 0; dev < 32; dev++)
c010b476:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010b47d:	e9 6e 05 00 00       	jmp    c010b9f0 <INIT_PCI+0x5cc>
        {

            for(func = 0; func < 8; func ++)
c010b482:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010b489:	e9 54 05 00 00       	jmp    c010b9e2 <INIT_PCI+0x5be>
            {

                if(pci_dev_exist(bus, dev, func))
c010b48e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b491:	0f b6 c8             	movzbl %al,%ecx
c010b494:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b497:	0f b6 d0             	movzbl %al,%edx
c010b49a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b49d:	0f b6 c0             	movzbl %al,%eax
c010b4a0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b4a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b4a8:	89 04 24             	mov    %eax,(%esp)
c010b4ab:	e8 ea fb ff ff       	call   c010b09a <pci_dev_exist>
c010b4b0:	85 c0                	test   %eax,%eax
c010b4b2:	0f 84 26 05 00 00    	je     c010b9de <INIT_PCI+0x5ba>
                {
                    bool multifunc = (pci_readb(bus, dev, func,PCI_HEADERTYPE) & 0x80) >> 7;
c010b4b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b4bb:	0f b6 c8             	movzbl %al,%ecx
c010b4be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4c1:	0f b6 d0             	movzbl %al,%edx
c010b4c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b4c7:	0f b6 c0             	movzbl %al,%eax
c010b4ca:	c7 44 24 0c 0e 00 00 	movl   $0xe,0xc(%esp)
c010b4d1:	00 
c010b4d2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b4d6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b4da:	89 04 24             	mov    %eax,(%esp)
c010b4dd:	e8 4b f9 ff ff       	call   c010ae2d <pci_readb>
c010b4e2:	c0 e8 07             	shr    $0x7,%al
c010b4e5:	0f b6 c0             	movzbl %al,%eax
c010b4e8:	89 45 d0             	mov    %eax,-0x30(%ebp)

                    if(func && ! multifunc)
c010b4eb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010b4ef:	74 0a                	je     c010b4fb <INIT_PCI+0xd7>
c010b4f1:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b4f5:	0f 84 e2 04 00 00    	je     c010b9dd <INIT_PCI+0x5b9>
                        continue;

                    struct pci_dev *current_dev = malloc(sizeof(struct pci_dev));
c010b4fb:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
c010b502:	e8 95 21 00 00       	call   c010d69c <malloc>
c010b507:	89 45 cc             	mov    %eax,-0x34(%ebp)

                    current_dev->bus = bus;
c010b50a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b50d:	89 c2                	mov    %eax,%edx
c010b50f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b512:	88 10                	mov    %dl,(%eax)
                    current_dev->dev = dev;
c010b514:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b517:	89 c2                	mov    %eax,%edx
c010b519:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b51c:	88 50 01             	mov    %dl,0x1(%eax)
                    current_dev->func = func;
c010b51f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b522:	89 c2                	mov    %eax,%edx
c010b524:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b527:	88 50 02             	mov    %dl,0x2(%eax)

                    uint32_t classcode = pci_readl(bus, dev, 0, PCI_REVISION);
c010b52a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b52d:	0f b6 d0             	movzbl %al,%edx
c010b530:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b533:	0f b6 c0             	movzbl %al,%eax
c010b536:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010b53d:	00 
c010b53e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b545:	00 
c010b546:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b54a:	89 04 24             	mov    %eax,(%esp)
c010b54d:	e8 6d f9 ff ff       	call   c010aebf <pci_readl>
c010b552:	89 45 c8             	mov    %eax,-0x38(%ebp)

                    current_dev->reversion_ID = (uint8_t)classcode;
c010b555:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b558:	89 c2                	mov    %eax,%edx
c010b55a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b55d:	88 50 0c             	mov    %dl,0xc(%eax)
                    current_dev->programming_interface = (uint8_t) (classcode >> 8);
c010b560:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b563:	c1 e8 08             	shr    $0x8,%eax
c010b566:	89 c2                	mov    %eax,%edx
c010b568:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b56b:	88 50 0f             	mov    %dl,0xf(%eax)
                    current_dev->sub_class = (uint8_t) (classcode >> 16);
c010b56e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b571:	c1 e8 10             	shr    $0x10,%eax
c010b574:	89 c2                	mov    %eax,%edx
c010b576:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b579:	88 50 0e             	mov    %dl,0xe(%eax)
                    current_dev->base_class = (uint8_t) (classcode >> 24);
c010b57c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b57f:	c1 e8 18             	shr    $0x18,%eax
c010b582:	89 c2                	mov    %eax,%edx
c010b584:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b587:	88 50 0d             	mov    %dl,0xd(%eax)

                    current_dev->device_ID = pci_readw(bus, dev, func, PCI_DEVICE_ID);
c010b58a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b58d:	0f b6 c8             	movzbl %al,%ecx
c010b590:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b593:	0f b6 d0             	movzbl %al,%edx
c010b596:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b599:	0f b6 c0             	movzbl %al,%eax
c010b59c:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010b5a3:	00 
c010b5a4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b5a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b5ac:	89 04 24             	mov    %eax,(%esp)
c010b5af:	e8 c2 f8 ff ff       	call   c010ae76 <pci_readw>
c010b5b4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b5b7:	66 89 42 08          	mov    %ax,0x8(%edx)
                    current_dev->vendor_ID = pci_readw(bus, dev, func, PCI_VENDOR_ID);
c010b5bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b5be:	0f b6 c8             	movzbl %al,%ecx
c010b5c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5c4:	0f b6 d0             	movzbl %al,%edx
c010b5c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b5ca:	0f b6 c0             	movzbl %al,%eax
c010b5cd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b5d4:	00 
c010b5d5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b5d9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b5dd:	89 04 24             	mov    %eax,(%esp)
c010b5e0:	e8 91 f8 ff ff       	call   c010ae76 <pci_readw>
c010b5e5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b5e8:	66 89 42 0a          	mov    %ax,0xa(%edx)
                    current_dev->header_type = (pci_readb(bus, dev ,0, PCI_HEADERTYPE) | 0x80)^0x80;
c010b5ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5ef:	0f b6 d0             	movzbl %al,%edx
c010b5f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b5f5:	0f b6 c0             	movzbl %al,%eax
c010b5f8:	c7 44 24 0c 0e 00 00 	movl   $0xe,0xc(%esp)
c010b5ff:	00 
c010b600:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b607:	00 
c010b608:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b60c:	89 04 24             	mov    %eax,(%esp)
c010b60f:	e8 19 f8 ff ff       	call   c010ae2d <pci_readb>
c010b614:	89 c2                	mov    %eax,%edx
c010b616:	83 e2 7f             	and    $0x7f,%edx
c010b619:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b61c:	88 50 14             	mov    %dl,0x14(%eax)
                    current_dev->multifunc = multifunc;
c010b61f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b622:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b625:	89 50 10             	mov    %edx,0x10(%eax)

                    uint32_t irq_info = pci_readl(bus, dev, func, PCI_INTERRUPT);
c010b628:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b62b:	0f b6 c8             	movzbl %al,%ecx
c010b62e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b631:	0f b6 d0             	movzbl %al,%edx
c010b634:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b637:	0f b6 c0             	movzbl %al,%eax
c010b63a:	c7 44 24 0c 3c 00 00 	movl   $0x3c,0xc(%esp)
c010b641:	00 
c010b642:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b646:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b64a:	89 04 24             	mov    %eax,(%esp)
c010b64d:	e8 6d f8 ff ff       	call   c010aebf <pci_readl>
c010b652:	89 45 c4             	mov    %eax,-0x3c(%ebp)
                    current_dev->irq_num = (uint8_t) irq_info;
c010b655:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b658:	89 c2                	mov    %eax,%edx
c010b65a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b65d:	88 50 15             	mov    %dl,0x15(%eax)
                    current_dev->irq_pin = (uint8_t) (irq_info >> 8);
c010b660:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b663:	c1 e8 08             	shr    $0x8,%eax
c010b666:	89 c2                	mov    %eax,%edx
c010b668:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b66b:	88 50 16             	mov    %dl,0x16(%eax)
                    current_dev->locked = false;
c010b66e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b671:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


#ifdef PRINT_DEV_LIST
                    printf("device ID: %04X  vendor ID: %04X  bus: %d  port: %d  function: %d interrupt:%d\n",current_dev->device_ID, current_dev->vendor_ID, current_dev->bus, current_dev->dev, current_dev->func, current_dev->irq_num);
c010b678:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b67b:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b67f:	0f b6 f8             	movzbl %al,%edi
c010b682:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b685:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010b689:	0f b6 f0             	movzbl %al,%esi
c010b68c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b68f:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010b693:	0f b6 d8             	movzbl %al,%ebx
c010b696:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b699:	0f b6 00             	movzbl (%eax),%eax
c010b69c:	0f b6 c8             	movzbl %al,%ecx
c010b69f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6a2:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
c010b6a6:	0f b7 d0             	movzwl %ax,%edx
c010b6a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6ac:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c010b6b0:	0f b7 c0             	movzwl %ax,%eax
c010b6b3:	89 7c 24 18          	mov    %edi,0x18(%esp)
c010b6b7:	89 74 24 14          	mov    %esi,0x14(%esp)
c010b6bb:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c010b6bf:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b6c3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b6c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6cb:	c7 04 24 c0 1e 11 c0 	movl   $0xc0111ec0,(%esp)
c010b6d2:	e8 a6 7a ff ff       	call   c010317d <printf>
#endif

                    if(current_dev->irq_num < 16 && current_dev->irq_pin && current_dev->irq_num)
c010b6d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6da:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b6de:	3c 0f                	cmp    $0xf,%al
c010b6e0:	0f 87 fd 00 00 00    	ja     c010b7e3 <INIT_PCI+0x3bf>
c010b6e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6e9:	0f b6 40 16          	movzbl 0x16(%eax),%eax
c010b6ed:	84 c0                	test   %al,%al
c010b6ef:	0f 84 ee 00 00 00    	je     c010b7e3 <INIT_PCI+0x3bf>
c010b6f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6f8:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b6fc:	84 c0                	test   %al,%al
c010b6fe:	0f 84 df 00 00 00    	je     c010b7e3 <INIT_PCI+0x3bf>
                    {
                        if(!install_irq(current_dev->irq_num, pci_irq_handler))
c010b704:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b707:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b70b:	0f b6 c0             	movzbl %al,%eax
c010b70e:	c7 44 24 04 d4 b2 10 	movl   $0xc010b2d4,0x4(%esp)
c010b715:	c0 
c010b716:	89 04 24             	mov    %eax,(%esp)
c010b719:	e8 8d 2b 00 00       	call   c010e2ab <install_irq>
c010b71e:	85 c0                	test   %eax,%eax
c010b720:	0f 85 bd 00 00 00    	jne    c010b7e3 <INIT_PCI+0x3bf>
                        {
                            set_color(RED | BLACK << 4);
c010b726:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010b72d:	e8 4d 06 00 00       	call   c010bd7f <set_color>
                            printf("WARNING: ");
c010b732:	c7 04 24 10 1f 11 c0 	movl   $0xc0111f10,(%esp)
c010b739:	e8 3f 7a ff ff       	call   c010317d <printf>
                            set_color(WHITE | BLACK << 4);
c010b73e:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010b745:	e8 35 06 00 00       	call   c010bd7f <set_color>
                            printf("Could not Reserver IRQ %d for PCI-DEVICE: %d:%d:%d\n", current_dev->irq_num, bus, dev, func);
c010b74a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b74d:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b751:	0f b6 c0             	movzbl %al,%eax
c010b754:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b757:	89 54 24 10          	mov    %edx,0x10(%esp)
c010b75b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b75e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b762:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b765:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b769:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b76d:	c7 04 24 1c 1f 11 c0 	movl   $0xc0111f1c,(%esp)
c010b774:	e8 04 7a ff ff       	call   c010317d <printf>

                            set_color(RED | BLACK << 4);
c010b779:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010b780:	e8 fa 05 00 00       	call   c010bd7f <set_color>
                            printf("WARNING: ");
c010b785:	c7 04 24 10 1f 11 c0 	movl   $0xc0111f10,(%esp)
c010b78c:	e8 ec 79 ff ff       	call   c010317d <printf>
                            set_color(WHITE | BLACK << 4);
c010b791:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010b798:	e8 e2 05 00 00       	call   c010bd7f <set_color>
                            printf("FORCING IRQ %d for the PCI-BUS\n", current_dev->irq_num);
c010b79d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7a0:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b7a4:	0f b6 c0             	movzbl %al,%eax
c010b7a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7ab:	c7 04 24 50 1f 11 c0 	movl   $0xc0111f50,(%esp)
c010b7b2:	e8 c6 79 ff ff       	call   c010317d <printf>

                            deinstall_irq(current_dev->irq_num);
c010b7b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7ba:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b7be:	0f b6 c0             	movzbl %al,%eax
c010b7c1:	89 04 24             	mov    %eax,(%esp)
c010b7c4:	e8 3a 2b 00 00       	call   c010e303 <deinstall_irq>
                            install_irq(current_dev->irq_num, pci_irq_handler);
c010b7c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7cc:	0f b6 40 15          	movzbl 0x15(%eax),%eax
c010b7d0:	0f b6 c0             	movzbl %al,%eax
c010b7d3:	c7 44 24 04 d4 b2 10 	movl   $0xc010b2d4,0x4(%esp)
c010b7da:	c0 
c010b7db:	89 04 24             	mov    %eax,(%esp)
c010b7de:	e8 c8 2a 00 00       	call   c010e2ab <install_irq>
                        }

                    }

                    // Standart Device
                    if(! (current_dev->header_type & 0xFF) )
c010b7e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b7e6:	0f b6 40 14          	movzbl 0x14(%eax),%eax
c010b7ea:	84 c0                	test   %al,%al
c010b7ec:	0f 85 d5 01 00 00    	jne    c010b9c7 <INIT_PCI+0x5a3>
                    {
                        int base;

                        for(base = 0; base < 6; base++)
c010b7f2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c010b7f9:	e9 bf 01 00 00       	jmp    c010b9bd <INIT_PCI+0x599>
                        {
                            uint32_t current_base = pci_readl(bus, dev, func, PCI_BASE + (base * 4));
c010b7fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b801:	83 c0 04             	add    $0x4,%eax
c010b804:	c1 e0 02             	shl    $0x2,%eax
c010b807:	0f b6 d8             	movzbl %al,%ebx
c010b80a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b80d:	0f b6 c8             	movzbl %al,%ecx
c010b810:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b813:	0f b6 d0             	movzbl %al,%edx
c010b816:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b819:	0f b6 c0             	movzbl %al,%eax
c010b81c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010b820:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b824:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b828:	89 04 24             	mov    %eax,(%esp)
c010b82b:	e8 8f f6 ff ff       	call   c010aebf <pci_readl>
c010b830:	89 45 c0             	mov    %eax,-0x40(%ebp)

                            // get type
                            current_dev->base_adress[base].type = current_base & 1;
c010b833:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b836:	89 c1                	mov    %eax,%ecx
c010b838:	83 e1 01             	and    $0x1,%ecx
c010b83b:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c010b83e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b841:	89 d0                	mov    %edx,%eax
c010b843:	01 c0                	add    %eax,%eax
c010b845:	01 d0                	add    %edx,%eax
c010b847:	c1 e0 02             	shl    $0x2,%eax
c010b84a:	01 d8                	add    %ebx,%eax
c010b84c:	83 c0 1c             	add    $0x1c,%eax
c010b84f:	89 08                	mov    %ecx,(%eax)

                            // save current adress
                            current_dev->base_adress[base].adress = (current_base | 1) ^ 1;
c010b851:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b854:	89 c1                	mov    %eax,%ecx
c010b856:	83 e1 fe             	and    $0xfffffffe,%ecx
c010b859:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c010b85c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b85f:	89 d0                	mov    %edx,%eax
c010b861:	01 c0                	add    %eax,%eax
c010b863:	01 d0                	add    %edx,%eax
c010b865:	c1 e0 02             	shl    $0x2,%eax
c010b868:	01 d8                	add    %ebx,%eax
c010b86a:	83 c0 18             	add    $0x18,%eax
c010b86d:	89 08                	mov    %ecx,(%eax)

                            // get reserved bits
                            pci_writel(bus, dev, func, PCI_BASE + (base * 4), 0xFFFFFFFF);
c010b86f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b872:	83 c0 04             	add    $0x4,%eax
c010b875:	c1 e0 02             	shl    $0x2,%eax
c010b878:	0f b6 d8             	movzbl %al,%ebx
c010b87b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b87e:	0f b6 c8             	movzbl %al,%ecx
c010b881:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b884:	0f b6 d0             	movzbl %al,%edx
c010b887:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b88a:	0f b6 c0             	movzbl %al,%eax
c010b88d:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%esp)
c010b894:	ff 
c010b895:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010b899:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b89d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b8a1:	89 04 24             	mov    %eax,(%esp)
c010b8a4:	e8 7e f7 ff ff       	call   c010b027 <pci_writel>
                            uint32_t temp_base = pci_readl(bus, dev, func, PCI_BASE + (base * 4));
c010b8a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b8ac:	83 c0 04             	add    $0x4,%eax
c010b8af:	c1 e0 02             	shl    $0x2,%eax
c010b8b2:	0f b6 d8             	movzbl %al,%ebx
c010b8b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b8b8:	0f b6 c8             	movzbl %al,%ecx
c010b8bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8be:	0f b6 d0             	movzbl %al,%edx
c010b8c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b8c4:	0f b6 c0             	movzbl %al,%eax
c010b8c7:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010b8cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b8cf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b8d3:	89 04 24             	mov    %eax,(%esp)
c010b8d6:	e8 e4 f5 ff ff       	call   c010aebf <pci_readl>
c010b8db:	89 45 bc             	mov    %eax,-0x44(%ebp)
                            if(temp_base == 0)
c010b8de:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010b8e2:	75 1a                	jne    c010b8fe <INIT_PCI+0x4da>
                                current_dev->base_adress[base].type = UNUSED;
c010b8e4:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010b8e7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b8ea:	89 d0                	mov    %edx,%eax
c010b8ec:	01 c0                	add    %eax,%eax
c010b8ee:	01 d0                	add    %edx,%eax
c010b8f0:	c1 e0 02             	shl    $0x2,%eax
c010b8f3:	01 c8                	add    %ecx,%eax
c010b8f5:	83 c0 1c             	add    $0x1c,%eax
c010b8f8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
                            temp_base = (~temp_base) | 1;
c010b8fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b901:	f7 d0                	not    %eax
c010b903:	83 c8 01             	or     $0x1,%eax
c010b906:	89 45 bc             	mov    %eax,-0x44(%ebp)
                            current_dev->base_adress[base].resb = 0;
c010b909:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010b90c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b90f:	89 d0                	mov    %edx,%eax
c010b911:	01 c0                	add    %eax,%eax
c010b913:	01 d0                	add    %edx,%eax
c010b915:	c1 e0 02             	shl    $0x2,%eax
c010b918:	01 c8                	add    %ecx,%eax
c010b91a:	83 c0 10             	add    $0x10,%eax
c010b91d:	c6 40 10 00          	movb   $0x0,0x10(%eax)
                            int i;
                            for(i = 0; i < 32; i++)
c010b921:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c010b928:	eb 4d                	jmp    c010b977 <INIT_PCI+0x553>
                            {
                                if((temp_base & (1 << i)) != 0)
c010b92a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b92d:	ba 01 00 00 00       	mov    $0x1,%edx
c010b932:	89 d3                	mov    %edx,%ebx
c010b934:	89 c1                	mov    %eax,%ecx
c010b936:	d3 e3                	shl    %cl,%ebx
c010b938:	89 d8                	mov    %ebx,%eax
c010b93a:	23 45 bc             	and    -0x44(%ebp),%eax
c010b93d:	85 c0                	test   %eax,%eax
c010b93f:	74 3e                	je     c010b97f <INIT_PCI+0x55b>
                                    current_dev->base_adress[base].resb++;
c010b941:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010b944:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b947:	89 d0                	mov    %edx,%eax
c010b949:	01 c0                	add    %eax,%eax
c010b94b:	01 d0                	add    %edx,%eax
c010b94d:	c1 e0 02             	shl    $0x2,%eax
c010b950:	01 c8                	add    %ecx,%eax
c010b952:	83 c0 10             	add    $0x10,%eax
c010b955:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c010b959:	8d 48 01             	lea    0x1(%eax),%ecx
c010b95c:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c010b95f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b962:	89 d0                	mov    %edx,%eax
c010b964:	01 c0                	add    %eax,%eax
c010b966:	01 d0                	add    %edx,%eax
c010b968:	c1 e0 02             	shl    $0x2,%eax
c010b96b:	01 d8                	add    %ebx,%eax
c010b96d:	83 c0 10             	add    $0x10,%eax
c010b970:	88 48 10             	mov    %cl,0x10(%eax)
                            if(temp_base == 0)
                                current_dev->base_adress[base].type = UNUSED;
                            temp_base = (~temp_base) | 1;
                            current_dev->base_adress[base].resb = 0;
                            int i;
                            for(i = 0; i < 32; i++)
c010b973:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
c010b977:	83 7d d4 1f          	cmpl   $0x1f,-0x2c(%ebp)
c010b97b:	7e ad                	jle    c010b92a <INIT_PCI+0x506>
c010b97d:	eb 01                	jmp    c010b980 <INIT_PCI+0x55c>
                            {
                                if((temp_base & (1 << i)) != 0)
                                    current_dev->base_adress[base].resb++;
                                else
                                    break;
c010b97f:	90                   	nop
                            }

                            //reset old state
                            pci_writel(bus, dev, func, PCI_BASE + (base * 4), current_base);
c010b980:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b983:	83 c0 04             	add    $0x4,%eax
c010b986:	c1 e0 02             	shl    $0x2,%eax
c010b989:	0f b6 d8             	movzbl %al,%ebx
c010b98c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b98f:	0f b6 c8             	movzbl %al,%ecx
c010b992:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b995:	0f b6 d0             	movzbl %al,%edx
c010b998:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b99b:	0f b6 c0             	movzbl %al,%eax
c010b99e:	8b 75 c0             	mov    -0x40(%ebp),%esi
c010b9a1:	89 74 24 10          	mov    %esi,0x10(%esp)
c010b9a5:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010b9a9:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b9ad:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b9b1:	89 04 24             	mov    %eax,(%esp)
c010b9b4:	e8 6e f6 ff ff       	call   c010b027 <pci_writel>
                    // Standart Device
                    if(! (current_dev->header_type & 0xFF) )
                    {
                        int base;

                        for(base = 0; base < 6; base++)
c010b9b9:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
c010b9bd:	83 7d d8 05          	cmpl   $0x5,-0x28(%ebp)
c010b9c1:	0f 8e 37 fe ff ff    	jle    c010b7fe <INIT_PCI+0x3da>
                    else
                    {
                        //TODO: Write Cases for Bridges
                    }

                    list_push_front(pci_dev_list, current_dev);
c010b9c7:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010b9cc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b9cf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b9d3:	89 04 24             	mov    %eax,(%esp)
c010b9d6:	e8 da 6c ff ff       	call   c01026b5 <list_push_front>
c010b9db:	eb 01                	jmp    c010b9de <INIT_PCI+0x5ba>
                if(pci_dev_exist(bus, dev, func))
                {
                    bool multifunc = (pci_readb(bus, dev, func,PCI_HEADERTYPE) & 0x80) >> 7;

                    if(func && ! multifunc)
                        continue;
c010b9dd:	90                   	nop
    {

        for(dev = 0; dev < 32; dev++)
        {

            for(func = 0; func < 8; func ++)
c010b9de:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010b9e2:	83 7d dc 07          	cmpl   $0x7,-0x24(%ebp)
c010b9e6:	0f 8e a2 fa ff ff    	jle    c010b48e <INIT_PCI+0x6a>
    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
    {

        for(dev = 0; dev < 32; dev++)
c010b9ec:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010b9f0:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
c010b9f4:	0f 8e 88 fa ff ff    	jle    c010b482 <INIT_PCI+0x5e>
        pci_irq_handles = list_create();
    pci_dev_list->lock = true;

    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
c010b9fa:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c010b9fe:	83 7d e0 07          	cmpl   $0x7,-0x20(%ebp)
c010ba02:	0f 8e 6e fa ff ff    	jle    c010b476 <INIT_PCI+0x52>
                    list_push_front(pci_dev_list, current_dev);
                }
            }
        }
    }
    pci_dev_list->lock = false;
c010ba08:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010ba0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

#ifdef PRINT_DEV_LIST
    printf("\n");
c010ba13:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010ba1a:	e8 2c 01 00 00       	call   c010bb4b <putchar>
#endif
}
c010ba1f:	83 c4 5c             	add    $0x5c,%esp
c010ba22:	5b                   	pop    %ebx
c010ba23:	5e                   	pop    %esi
c010ba24:	5f                   	pop    %edi
c010ba25:	5d                   	pop    %ebp
c010ba26:	c3                   	ret    

c010ba27 <inb>:
#include <stdint.h>



static inline uint8_t inb(uint16_t port)
{
c010ba27:	55                   	push   %ebp
c010ba28:	89 e5                	mov    %esp,%ebp
c010ba2a:	53                   	push   %ebx
c010ba2b:	83 ec 14             	sub    $0x14,%esp
c010ba2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba31:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    uint8_t result;
    asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c010ba35:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010ba39:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010ba3d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010ba41:	ec                   	in     (%dx),%al
c010ba42:	89 c3                	mov    %eax,%ebx
c010ba44:	88 5d fb             	mov    %bl,-0x5(%ebp)
    return result;
c010ba47:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c010ba4b:	83 c4 14             	add    $0x14,%esp
c010ba4e:	5b                   	pop    %ebx
c010ba4f:	5d                   	pop    %ebp
c010ba50:	c3                   	ret    

c010ba51 <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010ba51:	55                   	push   %ebp
c010ba52:	89 e5                	mov    %esp,%ebp
c010ba54:	83 ec 08             	sub    $0x8,%esp
c010ba57:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba5d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ba61:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010ba64:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ba68:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ba6c:	ee                   	out    %al,(%dx)
}
c010ba6d:	c9                   	leave  
c010ba6e:	c3                   	ret    

c010ba6f <sound_on>:
 */

#include <io.h>

void sound_on()
{
c010ba6f:	55                   	push   %ebp
c010ba70:	89 e5                	mov    %esp,%ebp
c010ba72:	83 ec 08             	sub    $0x8,%esp
    outb(0x61, inb(0x61) | 3);
c010ba75:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c010ba7c:	e8 a6 ff ff ff       	call   c010ba27 <inb>
c010ba81:	83 c8 03             	or     $0x3,%eax
c010ba84:	0f b6 c0             	movzbl %al,%eax
c010ba87:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba8b:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c010ba92:	e8 ba ff ff ff       	call   c010ba51 <outb>
}
c010ba97:	c9                   	leave  
c010ba98:	c3                   	ret    

c010ba99 <sound_off>:

void sound_off()
{
c010ba99:	55                   	push   %ebp
c010ba9a:	89 e5                	mov    %esp,%ebp
c010ba9c:	83 ec 08             	sub    $0x8,%esp
    outb(0x61, inb(0x61) & ~3);
c010ba9f:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c010baa6:	e8 7c ff ff ff       	call   c010ba27 <inb>
c010baab:	0f b6 c0             	movzbl %al,%eax
c010baae:	25 fc 00 00 00       	and    $0xfc,%eax
c010bab3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bab7:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c010babe:	e8 8e ff ff ff       	call   c010ba51 <outb>
}
c010bac3:	c9                   	leave  
c010bac4:	c3                   	ret    

c010bac5 <sound>:

void sound(uint32_t frequency, uint32_t time)
{
c010bac5:	55                   	push   %ebp
c010bac6:	89 e5                	mov    %esp,%ebp
c010bac8:	83 ec 18             	sub    $0x18,%esp
    int i;
    uint16_t tmp;
    tmp = 1193180 / frequency;
c010bacb:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
c010bad0:	ba 00 00 00 00       	mov    $0x0,%edx
c010bad5:	f7 75 08             	divl   0x8(%ebp)
c010bad8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    outb(0x43, 0xB6);
c010badc:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c010bae3:	00 
c010bae4:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
c010baeb:	e8 61 ff ff ff       	call   c010ba51 <outb>
    outb(0x42, tmp & 0xFF);
c010baf0:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010baf4:	0f b6 c0             	movzbl %al,%eax
c010baf7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bafb:	c7 04 24 42 00 00 00 	movl   $0x42,(%esp)
c010bb02:	e8 4a ff ff ff       	call   c010ba51 <outb>
    outb(0x42, tmp >> 8);
c010bb07:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010bb0b:	66 c1 e8 08          	shr    $0x8,%ax
c010bb0f:	0f b6 c0             	movzbl %al,%eax
c010bb12:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb16:	c7 04 24 42 00 00 00 	movl   $0x42,(%esp)
c010bb1d:	e8 2f ff ff ff       	call   c010ba51 <outb>
    sound_on();
c010bb22:	e8 48 ff ff ff       	call   c010ba6f <sound_on>
    for (i = 0; i < time * 10000; i++);
c010bb27:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010bb2e:	eb 04                	jmp    c010bb34 <sound+0x6f>
c010bb30:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010bb34:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bb37:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb3a:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
c010bb40:	39 c2                	cmp    %eax,%edx
c010bb42:	72 ec                	jb     c010bb30 <sound+0x6b>
    sound_off();
c010bb44:	e8 50 ff ff ff       	call   c010ba99 <sound_off>
}
c010bb49:	c9                   	leave  
c010bb4a:	c3                   	ret    

c010bb4b <putchar>:

static color_t color = CYAN | BLACK << 4;
static char *video_mem = (char *)0xc00b8000;

int putchar(int c)
{
c010bb4b:	55                   	push   %ebp
c010bb4c:	89 e5                	mov    %esp,%ebp
c010bb4e:	83 ec 18             	sub    $0x18,%esp
    if (c == '\b')
c010bb51:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010bb55:	0f 85 8a 00 00 00    	jne    c010bbe5 <putchar+0x9a>
    {
        if (x > 0)
c010bb5b:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bb60:	85 c0                	test   %eax,%eax
c010bb62:	7e 2b                	jle    c010bb8f <putchar+0x44>
        {
            gotoxy(--x, y);
c010bb64:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bb69:	0f b6 d0             	movzbl %al,%edx
c010bb6c:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bb71:	83 e8 01             	sub    $0x1,%eax
c010bb74:	a3 24 80 11 c0       	mov    %eax,0xc0118024
c010bb79:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bb7e:	0f b6 c0             	movzbl %al,%eax
c010bb81:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bb85:	89 04 24             	mov    %eax,(%esp)
c010bb88:	e8 15 02 00 00       	call   c010bda2 <gotoxy>
c010bb8d:	eb 2c                	jmp    c010bbbb <putchar+0x70>
        }
        else
        {
            gotoxy(columns - 1, --y);
c010bb8f:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bb94:	83 e8 01             	sub    $0x1,%eax
c010bb97:	a3 28 80 11 c0       	mov    %eax,0xc0118028
c010bb9c:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bba1:	0f b6 d0             	movzbl %al,%edx
c010bba4:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bba9:	83 e8 01             	sub    $0x1,%eax
c010bbac:	0f b6 c0             	movzbl %al,%eax
c010bbaf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bbb3:	89 04 24             	mov    %eax,(%esp)
c010bbb6:	e8 e7 01 00 00       	call   c010bda2 <gotoxy>
        }

        video_mem[2 * (y * columns + x)] = 0;
c010bbbb:	8b 15 cc 33 11 c0    	mov    0xc01133cc,%edx
c010bbc1:	8b 0d 28 80 11 c0    	mov    0xc0118028,%ecx
c010bbc7:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bbcc:	0f af c8             	imul   %eax,%ecx
c010bbcf:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bbd4:	01 c8                	add    %ecx,%eax
c010bbd6:	01 c0                	add    %eax,%eax
c010bbd8:	01 d0                	add    %edx,%eax
c010bbda:	c6 00 00             	movb   $0x0,(%eax)

        return c;
c010bbdd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbe0:	e9 c3 00 00 00       	jmp    c010bca8 <putchar+0x15d>
    }

    if ((x > columns - 1) || (c == '\n'))
c010bbe5:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bbea:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bbed:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bbf2:	39 c2                	cmp    %eax,%edx
c010bbf4:	7c 06                	jl     c010bbfc <putchar+0xb1>
c010bbf6:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c010bbfa:	75 30                	jne    c010bc2c <putchar+0xe1>
    {
        gotoxy(0, ++y);
c010bbfc:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bc01:	83 c0 01             	add    $0x1,%eax
c010bc04:	a3 28 80 11 c0       	mov    %eax,0xc0118028
c010bc09:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bc0e:	0f b6 c0             	movzbl %al,%eax
c010bc11:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc15:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bc1c:	e8 81 01 00 00       	call   c010bda2 <gotoxy>

        if (c == '\n')
c010bc21:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c010bc25:	75 05                	jne    c010bc2c <putchar+0xe1>
        {
            return c;
c010bc27:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc2a:	eb 7c                	jmp    c010bca8 <putchar+0x15d>
        }
    }

    video_mem[2 * (y * columns + x)] = c;
c010bc2c:	8b 15 cc 33 11 c0    	mov    0xc01133cc,%edx
c010bc32:	8b 0d 28 80 11 c0    	mov    0xc0118028,%ecx
c010bc38:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bc3d:	0f af c8             	imul   %eax,%ecx
c010bc40:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bc45:	01 c8                	add    %ecx,%eax
c010bc47:	01 c0                	add    %eax,%eax
c010bc49:	01 c2                	add    %eax,%edx
c010bc4b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc4e:	88 02                	mov    %al,(%edx)
    video_mem[2 * (y * columns + x) + 1] = color;
c010bc50:	a1 cc 33 11 c0       	mov    0xc01133cc,%eax
c010bc55:	8b 0d 28 80 11 c0    	mov    0xc0118028,%ecx
c010bc5b:	8b 15 c4 33 11 c0    	mov    0xc01133c4,%edx
c010bc61:	0f af ca             	imul   %edx,%ecx
c010bc64:	8b 15 24 80 11 c0    	mov    0xc0118024,%edx
c010bc6a:	01 ca                	add    %ecx,%edx
c010bc6c:	01 d2                	add    %edx,%edx
c010bc6e:	83 c2 01             	add    $0x1,%edx
c010bc71:	01 c2                	add    %eax,%edx
c010bc73:	0f b6 05 c8 33 11 c0 	movzbl 0xc01133c8,%eax
c010bc7a:	88 02                	mov    %al,(%edx)

    gotoxy(++x, y);
c010bc7c:	a1 28 80 11 c0       	mov    0xc0118028,%eax
c010bc81:	0f b6 d0             	movzbl %al,%edx
c010bc84:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bc89:	83 c0 01             	add    $0x1,%eax
c010bc8c:	a3 24 80 11 c0       	mov    %eax,0xc0118024
c010bc91:	a1 24 80 11 c0       	mov    0xc0118024,%eax
c010bc96:	0f b6 c0             	movzbl %al,%eax
c010bc99:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bc9d:	89 04 24             	mov    %eax,(%esp)
c010bca0:	e8 fd 00 00 00       	call   c010bda2 <gotoxy>

    return c;
c010bca5:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bca8:	c9                   	leave  
c010bca9:	c3                   	ret    

c010bcaa <puts>:

int puts(const char* s)
{
c010bcaa:	55                   	push   %ebp
c010bcab:	89 e5                	mov    %esp,%ebp
c010bcad:	83 ec 28             	sub    $0x28,%esp
    int printed = 1;
c010bcb0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

    while (*s)
c010bcb7:	eb 19                	jmp    c010bcd2 <puts+0x28>
    {
        putchar(*s++);
c010bcb9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcbc:	0f b6 00             	movzbl (%eax),%eax
c010bcbf:	0f be c0             	movsbl %al,%eax
c010bcc2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010bcc6:	89 04 24             	mov    %eax,(%esp)
c010bcc9:	e8 7d fe ff ff       	call   c010bb4b <putchar>
        ++printed;
c010bcce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

int puts(const char* s)
{
    int printed = 1;

    while (*s)
c010bcd2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcd5:	0f b6 00             	movzbl (%eax),%eax
c010bcd8:	84 c0                	test   %al,%al
c010bcda:	75 dd                	jne    c010bcb9 <puts+0xf>
    {
        putchar(*s++);
        ++printed;
    }
    putchar('\n');
c010bcdc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010bce3:	e8 63 fe ff ff       	call   c010bb4b <putchar>

    return printed;
c010bce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bceb:	c9                   	leave  
c010bcec:	c3                   	ret    

c010bced <fputs>:

int fputs(const char* s, int fd)
{
c010bced:	55                   	push   %ebp
c010bcee:	89 e5                	mov    %esp,%ebp
c010bcf0:	83 ec 18             	sub    $0x18,%esp
    if (fd == STDOUT)
c010bcf3:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010bcf7:	75 21                	jne    c010bd1a <fputs+0x2d>
    {
        while (*s)
c010bcf9:	eb 15                	jmp    c010bd10 <fputs+0x23>
        {
            putchar(*s++);
c010bcfb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcfe:	0f b6 00             	movzbl (%eax),%eax
c010bd01:	0f be c0             	movsbl %al,%eax
c010bd04:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010bd08:	89 04 24             	mov    %eax,(%esp)
c010bd0b:	e8 3b fe ff ff       	call   c010bb4b <putchar>

int fputs(const char* s, int fd)
{
    if (fd == STDOUT)
    {
        while (*s)
c010bd10:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd13:	0f b6 00             	movzbl (%eax),%eax
c010bd16:	84 c0                	test   %al,%al
c010bd18:	75 e1                	jne    c010bcfb <fputs+0xe>
        {
            putchar(*s++);
        }
    }

    return 0;
c010bd1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd1f:	c9                   	leave  
c010bd20:	c3                   	ret    

c010bd21 <clear_screen>:

void clear_screen(void)
{
c010bd21:	55                   	push   %ebp
c010bd22:	89 e5                	mov    %esp,%ebp
c010bd24:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < lines * columns; i++)
c010bd27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010bd2e:	eb 26                	jmp    c010bd56 <clear_screen+0x35>
    {
        video_mem[2 * i] = 0;
c010bd30:	8b 15 cc 33 11 c0    	mov    0xc01133cc,%edx
c010bd36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd39:	01 c0                	add    %eax,%eax
c010bd3b:	01 d0                	add    %edx,%eax
c010bd3d:	c6 00 00             	movb   $0x0,(%eax)
        video_mem[2 * i + 1] = 0;
c010bd40:	a1 cc 33 11 c0       	mov    0xc01133cc,%eax
c010bd45:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bd48:	01 d2                	add    %edx,%edx
c010bd4a:	83 c2 01             	add    $0x1,%edx
c010bd4d:	01 d0                	add    %edx,%eax
c010bd4f:	c6 00 00             	movb   $0x0,(%eax)
}

void clear_screen(void)
{
    int i;
    for (i = 0; i < lines * columns; i++)
c010bd52:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010bd56:	8b 15 c0 33 11 c0    	mov    0xc01133c0,%edx
c010bd5c:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bd61:	0f af c2             	imul   %edx,%eax
c010bd64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010bd67:	7f c7                	jg     c010bd30 <clear_screen+0xf>
    {
        video_mem[2 * i] = 0;
        video_mem[2 * i + 1] = 0;
    }

    gotoxy(0, 0);
c010bd69:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bd70:	00 
c010bd71:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bd78:	e8 25 00 00 00       	call   c010bda2 <gotoxy>
}
c010bd7d:	c9                   	leave  
c010bd7e:	c3                   	ret    

c010bd7f <set_color>:

void set_color(color_t _color)
{
c010bd7f:	55                   	push   %ebp
c010bd80:	89 e5                	mov    %esp,%ebp
c010bd82:	83 ec 04             	sub    $0x4,%esp
c010bd85:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd88:	88 45 fc             	mov    %al,-0x4(%ebp)
    color = _color;
c010bd8b:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010bd8f:	a2 c8 33 11 c0       	mov    %al,0xc01133c8
}
c010bd94:	c9                   	leave  
c010bd95:	c3                   	ret    

c010bd96 <get_color>:

color_t get_color(void)
{
c010bd96:	55                   	push   %ebp
c010bd97:	89 e5                	mov    %esp,%ebp
    return color;
c010bd99:	0f b6 05 c8 33 11 c0 	movzbl 0xc01133c8,%eax
}
c010bda0:	5d                   	pop    %ebp
c010bda1:	c3                   	ret    

c010bda2 <gotoxy>:

void gotoxy(uint8_t _x, uint8_t _y)
{
c010bda2:	55                   	push   %ebp
c010bda3:	89 e5                	mov    %esp,%ebp
c010bda5:	53                   	push   %ebx
c010bda6:	83 ec 34             	sub    $0x34,%esp
c010bda9:	8b 55 08             	mov    0x8(%ebp),%edx
c010bdac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdaf:	88 55 e4             	mov    %dl,-0x1c(%ebp)
c010bdb2:	88 45 e0             	mov    %al,-0x20(%ebp)
    uint16_t offset;

    if ((_y * columns + _x) >= (columns * lines))   /* scroll if neccessary */
c010bdb5:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
c010bdb9:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bdbe:	0f af d0             	imul   %eax,%edx
c010bdc1:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010bdc5:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c010bdc8:	8b 15 c4 33 11 c0    	mov    0xc01133c4,%edx
c010bdce:	a1 c0 33 11 c0       	mov    0xc01133c0,%eax
c010bdd3:	0f af c2             	imul   %edx,%eax
c010bdd6:	39 c1                	cmp    %eax,%ecx
c010bdd8:	7c 6f                	jl     c010be49 <gotoxy+0xa7>
    {
        memmove(video_mem, video_mem + 2 * columns, 2 * lines * columns);
c010bdda:	a1 c0 33 11 c0       	mov    0xc01133c0,%eax
c010bddf:	8d 14 00             	lea    (%eax,%eax,1),%edx
c010bde2:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bde7:	0f af c2             	imul   %edx,%eax
c010bdea:	89 c2                	mov    %eax,%edx
c010bdec:	8b 0d cc 33 11 c0    	mov    0xc01133cc,%ecx
c010bdf2:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010bdf7:	01 c0                	add    %eax,%eax
c010bdf9:	01 c1                	add    %eax,%ecx
c010bdfb:	a1 cc 33 11 c0       	mov    0xc01133cc,%eax
c010be00:	89 54 24 08          	mov    %edx,0x8(%esp)
c010be04:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010be08:	89 04 24             	mov    %eax,(%esp)
c010be0b:	e8 30 70 ff ff       	call   c0102e40 <memmove>
        memset(video_mem + 2 * lines * columns, 0, 2 * columns);
c010be10:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010be15:	01 c0                	add    %eax,%eax
c010be17:	8b 0d cc 33 11 c0    	mov    0xc01133cc,%ecx
c010be1d:	8b 15 c0 33 11 c0    	mov    0xc01133c0,%edx
c010be23:	8d 1c 12             	lea    (%edx,%edx,1),%ebx
c010be26:	8b 15 c4 33 11 c0    	mov    0xc01133c4,%edx
c010be2c:	0f af d3             	imul   %ebx,%edx
c010be2f:	01 ca                	add    %ecx,%edx
c010be31:	89 44 24 08          	mov    %eax,0x8(%esp)
c010be35:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010be3c:	00 
c010be3d:	89 14 24             	mov    %edx,(%esp)
c010be40:	e8 30 71 ff ff       	call   c0102f75 <memset>
        --_y;
c010be45:	80 6d e0 01          	subb   $0x1,-0x20(%ebp)
    }

    x = _x;
c010be49:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010be4d:	a3 24 80 11 c0       	mov    %eax,0xc0118024
    y = _y;
c010be52:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010be56:	a3 28 80 11 c0       	mov    %eax,0xc0118028
    offset = _y * columns + _x;
c010be5b:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
c010be5f:	a1 c4 33 11 c0       	mov    0xc01133c4,%eax
c010be64:	0f af d0             	imul   %eax,%edx
c010be67:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010be6b:	01 d0                	add    %edx,%eax
c010be6d:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

    if (video_mem[2 * offset] == 0)
c010be71:	8b 15 cc 33 11 c0    	mov    0xc01133cc,%edx
c010be77:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010be7b:	01 c0                	add    %eax,%eax
c010be7d:	01 d0                	add    %edx,%eax
c010be7f:	0f b6 00             	movzbl (%eax),%eax
c010be82:	84 c0                	test   %al,%al
c010be84:	75 19                	jne    c010be9f <gotoxy+0xfd>
    {
        video_mem[2 * offset + 1] = color;
c010be86:	a1 cc 33 11 c0       	mov    0xc01133cc,%eax
c010be8b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010be8f:	01 d2                	add    %edx,%edx
c010be91:	83 c2 01             	add    $0x1,%edx
c010be94:	01 c2                	add    %eax,%edx
c010be96:	0f b6 05 c8 33 11 c0 	movzbl 0xc01133c8,%eax
c010be9d:	88 02                	mov    %al,(%edx)
    }

    crtc_write(CRTC_CURSOR_LOCATION_HIGH, (uint8_t)(offset >> 8));
c010be9f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010bea3:	66 c1 e8 08          	shr    $0x8,%ax
c010bea7:	0f b6 c0             	movzbl %al,%eax
c010beaa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010beae:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010beb5:	e8 b0 0d 00 00       	call   c010cc6a <crtc_write>
    crtc_write(CRTC_CURSOR_LOCATION_LOW, (uint8_t)offset);
c010beba:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010bebe:	0f b6 c0             	movzbl %al,%eax
c010bec1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bec5:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010becc:	e8 99 0d 00 00       	call   c010cc6a <crtc_write>
}
c010bed1:	83 c4 34             	add    $0x34,%esp
c010bed4:	5b                   	pop    %ebx
c010bed5:	5d                   	pop    %ebp
c010bed6:	c3                   	ret    

c010bed7 <cpu_dump>:
#include <idt.h>
#include <cpu.h>
#include <printf.h>

int cpu_dump(struct cpu_state* cpu, char *str)
{
c010bed7:	55                   	push   %ebp
c010bed8:	89 e5                	mov    %esp,%ebp
c010beda:	53                   	push   %ebx
c010bedb:	83 ec 24             	sub    $0x24,%esp
    int len = 0;
c010bede:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    len += sprintf(str + len, "EAX:  %#010X    EBX:     %#010X\n",  cpu->eax, 	cpu->ebx);
c010bee5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bee8:	8b 50 1c             	mov    0x1c(%eax),%edx
c010beeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010beee:	8b 40 28             	mov    0x28(%eax),%eax
c010bef1:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bef4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bef7:	01 d9                	add    %ebx,%ecx
c010bef9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010befd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf01:	c7 44 24 04 70 1f 11 	movl   $0xc0111f70,0x4(%esp)
c010bf08:	c0 
c010bf09:	89 0c 24             	mov    %ecx,(%esp)
c010bf0c:	e8 d9 72 ff ff       	call   c01031ea <sprintf>
c010bf11:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "ECX:  %#010X    EDX:     %#010X\n",  cpu->ecx, 	cpu->edx);
c010bf14:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf17:	8b 50 20             	mov    0x20(%eax),%edx
c010bf1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf1d:	8b 40 24             	mov    0x24(%eax),%eax
c010bf20:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bf23:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bf26:	01 d9                	add    %ebx,%ecx
c010bf28:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bf2c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf30:	c7 44 24 04 94 1f 11 	movl   $0xc0111f94,0x4(%esp)
c010bf37:	c0 
c010bf38:	89 0c 24             	mov    %ecx,(%esp)
c010bf3b:	e8 aa 72 ff ff       	call   c01031ea <sprintf>
c010bf40:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "ESI:  %#010X    EDI:     %#010X\n",  cpu->esi, 	cpu->edi);
c010bf43:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf46:	8b 50 10             	mov    0x10(%eax),%edx
c010bf49:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf4c:	8b 40 14             	mov    0x14(%eax),%eax
c010bf4f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bf52:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bf55:	01 d9                	add    %ebx,%ecx
c010bf57:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bf5b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf5f:	c7 44 24 04 b8 1f 11 	movl   $0xc0111fb8,0x4(%esp)
c010bf66:	c0 
c010bf67:	89 0c 24             	mov    %ecx,(%esp)
c010bf6a:	e8 7b 72 ff ff       	call   c01031ea <sprintf>
c010bf6f:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "ESP:  %#010X    EBP:     %#010X\n",  cpu->esp, 	cpu->ebp);
c010bf72:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf75:	8b 50 18             	mov    0x18(%eax),%edx
c010bf78:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf7b:	8b 40 40             	mov    0x40(%eax),%eax
c010bf7e:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bf81:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bf84:	01 d9                	add    %ebx,%ecx
c010bf86:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bf8a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf8e:	c7 44 24 04 dc 1f 11 	movl   $0xc0111fdc,0x4(%esp)
c010bf95:	c0 
c010bf96:	89 0c 24             	mov    %ecx,(%esp)
c010bf99:	e8 4c 72 ff ff       	call   c01031ea <sprintf>
c010bf9e:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "CS:   %#010X    DS:      %#010X\n",  cpu->cs, 	cpu->ds);
c010bfa1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfa4:	8b 50 0c             	mov    0xc(%eax),%edx
c010bfa7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfaa:	8b 40 38             	mov    0x38(%eax),%eax
c010bfad:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bfb0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bfb3:	01 d9                	add    %ebx,%ecx
c010bfb5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bfb9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bfbd:	c7 44 24 04 00 20 11 	movl   $0xc0112000,0x4(%esp)
c010bfc4:	c0 
c010bfc5:	89 0c 24             	mov    %ecx,(%esp)
c010bfc8:	e8 1d 72 ff ff       	call   c01031ea <sprintf>
c010bfcd:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "SS:   %#010X    ES:      %#010X\n",  cpu->ss, 	cpu->es);
c010bfd0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd3:	8b 50 08             	mov    0x8(%eax),%edx
c010bfd6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd9:	8b 40 44             	mov    0x44(%eax),%eax
c010bfdc:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010bfdf:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010bfe2:	01 d9                	add    %ebx,%ecx
c010bfe4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bfe8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bfec:	c7 44 24 04 24 20 11 	movl   $0xc0112024,0x4(%esp)
c010bff3:	c0 
c010bff4:	89 0c 24             	mov    %ecx,(%esp)
c010bff7:	e8 ee 71 ff ff       	call   c01031ea <sprintf>
c010bffc:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "GS:   %#010X    FS:      %#010X\n",  cpu->gs, 	cpu->fs);
c010bfff:	8b 45 08             	mov    0x8(%ebp),%eax
c010c002:	8b 50 04             	mov    0x4(%eax),%edx
c010c005:	8b 45 08             	mov    0x8(%ebp),%eax
c010c008:	8b 00                	mov    (%eax),%eax
c010c00a:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010c00d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010c010:	01 d9                	add    %ebx,%ecx
c010c012:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c016:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c01a:	c7 44 24 04 48 20 11 	movl   $0xc0112048,0x4(%esp)
c010c021:	c0 
c010c022:	89 0c 24             	mov    %ecx,(%esp)
c010c025:	e8 c0 71 ff ff       	call   c01031ea <sprintf>
c010c02a:	01 45 f4             	add    %eax,-0xc(%ebp)
    len += sprintf(str + len, "EIP:  %#010X    EFLAGS:  %#010X\n",  cpu->eip, 	cpu->eflags);
c010c02d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c030:	8b 50 3c             	mov    0x3c(%eax),%edx
c010c033:	8b 45 08             	mov    0x8(%ebp),%eax
c010c036:	8b 40 34             	mov    0x34(%eax),%eax
c010c039:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010c03c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010c03f:	01 d9                	add    %ebx,%ecx
c010c041:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c045:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c049:	c7 44 24 04 6c 20 11 	movl   $0xc011206c,0x4(%esp)
c010c050:	c0 
c010c051:	89 0c 24             	mov    %ecx,(%esp)
c010c054:	e8 91 71 ff ff       	call   c01031ea <sprintf>
c010c059:	01 45 f4             	add    %eax,-0xc(%ebp)

    return len;
c010c05c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c05f:	83 c4 24             	add    $0x24,%esp
c010c062:	5b                   	pop    %ebx
c010c063:	5d                   	pop    %ebp
c010c064:	c3                   	ret    

c010c065 <panic>:


void panic(char *message)
{
c010c065:	55                   	push   %ebp
c010c066:	89 e5                	mov    %esp,%ebp
c010c068:	57                   	push   %edi
c010c069:	56                   	push   %esi
c010c06a:	53                   	push   %ebx
c010c06b:	81 ec 2c 04 00 00    	sub    $0x42c,%esp
    char buffer[1024];
    int lines = 8;
c010c071:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%ebp)
    int len = 0;
c010c078:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

    int i;
    len += sprintf(buffer + len, "      %c", 201);
c010c07f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c082:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c088:	01 d0                	add    %edx,%eax
c010c08a:	c7 44 24 08 c9 00 00 	movl   $0xc9,0x8(%esp)
c010c091:	00 
c010c092:	c7 44 24 04 8d 20 11 	movl   $0xc011208d,0x4(%esp)
c010c099:	c0 
c010c09a:	89 04 24             	mov    %eax,(%esp)
c010c09d:	e8 48 71 ff ff       	call   c01031ea <sprintf>
c010c0a2:	01 45 e0             	add    %eax,-0x20(%ebp)
    for(i=0; i<66; i++) len += sprintf(buffer + len, "%c", 205);
c010c0a5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c0ac:	eb 2a                	jmp    c010c0d8 <panic+0x73>
c010c0ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c0b1:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c0b7:	01 d0                	add    %edx,%eax
c010c0b9:	c7 44 24 08 cd 00 00 	movl   $0xcd,0x8(%esp)
c010c0c0:	00 
c010c0c1:	c7 44 24 04 96 20 11 	movl   $0xc0112096,0x4(%esp)
c010c0c8:	c0 
c010c0c9:	89 04 24             	mov    %eax,(%esp)
c010c0cc:	e8 19 71 ff ff       	call   c01031ea <sprintf>
c010c0d1:	01 45 e0             	add    %eax,-0x20(%ebp)
c010c0d4:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010c0d8:	83 7d dc 41          	cmpl   $0x41,-0x24(%ebp)
c010c0dc:	7e d0                	jle    c010c0ae <panic+0x49>
    len += sprintf(buffer + len, "%c      \n", 187);
c010c0de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c0e1:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c0e7:	01 d0                	add    %edx,%eax
c010c0e9:	c7 44 24 08 bb 00 00 	movl   $0xbb,0x8(%esp)
c010c0f0:	00 
c010c0f1:	c7 44 24 04 99 20 11 	movl   $0xc0112099,0x4(%esp)
c010c0f8:	c0 
c010c0f9:	89 04 24             	mov    %eax,(%esp)
c010c0fc:	e8 e9 70 ff ff       	call   c01031ea <sprintf>
c010c101:	01 45 e0             	add    %eax,-0x20(%ebp)

    len += sprintf(buffer + len,
c010c104:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c107:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c10d:	01 d0                	add    %edx,%eax
c010c10f:	c7 44 24 0c ba 00 00 	movl   $0xba,0xc(%esp)
c010c116:	00 
c010c117:	c7 44 24 08 ba 00 00 	movl   $0xba,0x8(%esp)
c010c11e:	00 
c010c11f:	c7 44 24 04 a4 20 11 	movl   $0xc01120a4,0x4(%esp)
c010c126:	c0 
c010c127:	89 04 24             	mov    %eax,(%esp)
c010c12a:	e8 bb 70 ff ff       	call   c01031ea <sprintf>
c010c12f:	01 45 e0             	add    %eax,-0x20(%ebp)
                   "      %c                             Universe                             %c      \n",
                   186, 186);

    len += sprintf(buffer + len, "      %c", 200);
c010c132:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c135:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c13b:	01 d0                	add    %edx,%eax
c010c13d:	c7 44 24 08 c8 00 00 	movl   $0xc8,0x8(%esp)
c010c144:	00 
c010c145:	c7 44 24 04 8d 20 11 	movl   $0xc011208d,0x4(%esp)
c010c14c:	c0 
c010c14d:	89 04 24             	mov    %eax,(%esp)
c010c150:	e8 95 70 ff ff       	call   c01031ea <sprintf>
c010c155:	01 45 e0             	add    %eax,-0x20(%ebp)
    for(i=0; i<66; i++) len += sprintf(buffer + len, "%c", 205);
c010c158:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c15f:	eb 2a                	jmp    c010c18b <panic+0x126>
c010c161:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c164:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c16a:	01 d0                	add    %edx,%eax
c010c16c:	c7 44 24 08 cd 00 00 	movl   $0xcd,0x8(%esp)
c010c173:	00 
c010c174:	c7 44 24 04 96 20 11 	movl   $0xc0112096,0x4(%esp)
c010c17b:	c0 
c010c17c:	89 04 24             	mov    %eax,(%esp)
c010c17f:	e8 66 70 ff ff       	call   c01031ea <sprintf>
c010c184:	01 45 e0             	add    %eax,-0x20(%ebp)
c010c187:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010c18b:	83 7d dc 41          	cmpl   $0x41,-0x24(%ebp)
c010c18f:	7e d0                	jle    c010c161 <panic+0xfc>
    len += sprintf(buffer + len, "%c      \n", 188);
c010c191:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c194:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c19a:	01 d0                	add    %edx,%eax
c010c19c:	c7 44 24 08 bc 00 00 	movl   $0xbc,0x8(%esp)
c010c1a3:	00 
c010c1a4:	c7 44 24 04 99 20 11 	movl   $0xc0112099,0x4(%esp)
c010c1ab:	c0 
c010c1ac:	89 04 24             	mov    %eax,(%esp)
c010c1af:	e8 36 70 ff ff       	call   c01031ea <sprintf>
c010c1b4:	01 45 e0             	add    %eax,-0x20(%ebp)

    len += sprintf(buffer + len,
c010c1b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c1ba:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c1c0:	01 d0                	add    %edx,%eax
c010c1c2:	ba f8 20 11 c0       	mov    $0xc01120f8,%edx
c010c1c7:	bb 96 01 00 00       	mov    $0x196,%ebx
c010c1cc:	89 c1                	mov    %eax,%ecx
c010c1ce:	83 e1 01             	and    $0x1,%ecx
c010c1d1:	85 c9                	test   %ecx,%ecx
c010c1d3:	74 0e                	je     c010c1e3 <panic+0x17e>
c010c1d5:	0f b6 0a             	movzbl (%edx),%ecx
c010c1d8:	88 08                	mov    %cl,(%eax)
c010c1da:	83 c0 01             	add    $0x1,%eax
c010c1dd:	83 c2 01             	add    $0x1,%edx
c010c1e0:	83 eb 01             	sub    $0x1,%ebx
c010c1e3:	89 c1                	mov    %eax,%ecx
c010c1e5:	83 e1 02             	and    $0x2,%ecx
c010c1e8:	85 c9                	test   %ecx,%ecx
c010c1ea:	74 0f                	je     c010c1fb <panic+0x196>
c010c1ec:	0f b7 0a             	movzwl (%edx),%ecx
c010c1ef:	66 89 08             	mov    %cx,(%eax)
c010c1f2:	83 c0 02             	add    $0x2,%eax
c010c1f5:	83 c2 02             	add    $0x2,%edx
c010c1f8:	83 eb 02             	sub    $0x2,%ebx
c010c1fb:	89 d9                	mov    %ebx,%ecx
c010c1fd:	c1 e9 02             	shr    $0x2,%ecx
c010c200:	89 c7                	mov    %eax,%edi
c010c202:	89 d6                	mov    %edx,%esi
c010c204:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c206:	89 f2                	mov    %esi,%edx
c010c208:	89 f8                	mov    %edi,%eax
c010c20a:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c20f:	89 de                	mov    %ebx,%esi
c010c211:	83 e6 02             	and    $0x2,%esi
c010c214:	85 f6                	test   %esi,%esi
c010c216:	74 0b                	je     c010c223 <panic+0x1be>
c010c218:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c21c:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c220:	83 c1 02             	add    $0x2,%ecx
c010c223:	83 e3 01             	and    $0x1,%ebx
c010c226:	85 db                	test   %ebx,%ebx
c010c228:	74 07                	je     c010c231 <panic+0x1cc>
c010c22a:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c22e:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c010c231:	81 45 e0 95 01 00 00 	addl   $0x195,-0x20(%ebp)
                   "      Universe has been crashed. You have to restart your computer.             \n"
                   "                                                                                \n"
                   "                                                                                \n"
                  );

    while (*message != '\0')
c010c238:	eb 48                	jmp    c010c282 <panic+0x21d>
    {
        buffer[len++] = *message;
c010c23a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c23d:	0f b6 00             	movzbl (%eax),%eax
c010c240:	8d 8d dc fb ff ff    	lea    -0x424(%ebp),%ecx
c010c246:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c249:	01 ca                	add    %ecx,%edx
c010c24b:	88 02                	mov    %al,(%edx)
c010c24d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)

        if (*message == '\n')
c010c251:	8b 45 08             	mov    0x8(%ebp),%eax
c010c254:	0f b6 00             	movzbl (%eax),%eax
c010c257:	3c 0a                	cmp    $0xa,%al
c010c259:	75 23                	jne    c010c27e <panic+0x219>
        {
            len += sprintf(buffer + len, "      ");
c010c25b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c25e:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c264:	01 d0                	add    %edx,%eax
c010c266:	c7 00 20 20 20 20    	movl   $0x20202020,(%eax)
c010c26c:	66 c7 40 04 20 20    	movw   $0x2020,0x4(%eax)
c010c272:	c6 40 06 00          	movb   $0x0,0x6(%eax)
c010c276:	83 45 e0 06          	addl   $0x6,-0x20(%ebp)
            ++lines;
c010c27a:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
        }

        ++message;
c010c27e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
                   "      Universe has been crashed. You have to restart your computer.             \n"
                   "                                                                                \n"
                   "                                                                                \n"
                  );

    while (*message != '\0')
c010c282:	8b 45 08             	mov    0x8(%ebp),%eax
c010c285:	0f b6 00             	movzbl (%eax),%eax
c010c288:	84 c0                	test   %al,%al
c010c28a:	75 ae                	jne    c010c23a <panic+0x1d5>
        }

        ++message;
    }

    len += sprintf (buffer + len,
c010c28c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c28f:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010c295:	01 d0                	add    %edx,%eax
c010c297:	ba 90 22 11 c0       	mov    $0xc0112290,%edx
c010c29c:	bb 4d 00 00 00       	mov    $0x4d,%ebx
c010c2a1:	89 c1                	mov    %eax,%ecx
c010c2a3:	83 e1 01             	and    $0x1,%ecx
c010c2a6:	85 c9                	test   %ecx,%ecx
c010c2a8:	74 0e                	je     c010c2b8 <panic+0x253>
c010c2aa:	0f b6 0a             	movzbl (%edx),%ecx
c010c2ad:	88 08                	mov    %cl,(%eax)
c010c2af:	83 c0 01             	add    $0x1,%eax
c010c2b2:	83 c2 01             	add    $0x1,%edx
c010c2b5:	83 eb 01             	sub    $0x1,%ebx
c010c2b8:	89 c1                	mov    %eax,%ecx
c010c2ba:	83 e1 02             	and    $0x2,%ecx
c010c2bd:	85 c9                	test   %ecx,%ecx
c010c2bf:	74 0f                	je     c010c2d0 <panic+0x26b>
c010c2c1:	0f b7 0a             	movzwl (%edx),%ecx
c010c2c4:	66 89 08             	mov    %cx,(%eax)
c010c2c7:	83 c0 02             	add    $0x2,%eax
c010c2ca:	83 c2 02             	add    $0x2,%edx
c010c2cd:	83 eb 02             	sub    $0x2,%ebx
c010c2d0:	89 d9                	mov    %ebx,%ecx
c010c2d2:	c1 e9 02             	shr    $0x2,%ecx
c010c2d5:	89 c7                	mov    %eax,%edi
c010c2d7:	89 d6                	mov    %edx,%esi
c010c2d9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c2db:	89 f2                	mov    %esi,%edx
c010c2dd:	89 f8                	mov    %edi,%eax
c010c2df:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c2e4:	89 de                	mov    %ebx,%esi
c010c2e6:	83 e6 02             	and    $0x2,%esi
c010c2e9:	85 f6                	test   %esi,%esi
c010c2eb:	74 0b                	je     c010c2f8 <panic+0x293>
c010c2ed:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c2f1:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c2f5:	83 c1 02             	add    $0x2,%ecx
c010c2f8:	83 e3 01             	and    $0x1,%ebx
c010c2fb:	85 db                	test   %ebx,%ebx
c010c2fd:	74 07                	je     c010c306 <panic+0x2a1>
c010c2ff:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c303:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c010c306:	83 45 e0 4c          	addl   $0x4c,-0x20(%ebp)

    //set_color(WHITE | RED << 4);
    //clear_screen();

    //gotoxy(0, (25 / 2) - (lines / 2) - 1);
    puts(buffer);
c010c30a:	8d 85 dc fb ff ff    	lea    -0x424(%ebp),%eax
c010c310:	89 04 24             	mov    %eax,(%esp)
c010c313:	e8 92 f9 ff ff       	call   c010bcaa <puts>
    printf("\n\n      ");
c010c318:	c7 04 24 dd 22 11 c0 	movl   $0xc01122dd,(%esp)
c010c31f:	e8 59 6e ff ff       	call   c010317d <printf>

    halt();
c010c324:	e8 5d 1e 00 00       	call   c010e186 <halt>
}
c010c329:	81 c4 2c 04 00 00    	add    $0x42c,%esp
c010c32f:	5b                   	pop    %ebx
c010c330:	5e                   	pop    %esi
c010c331:	5f                   	pop    %edi
c010c332:	5d                   	pop    %ebp
c010c333:	c3                   	ret    

c010c334 <exc_panic>:

// just used in case of untreated exceptions
void exc_panic(struct cpu_state* cpu)
{
c010c334:	55                   	push   %ebp
c010c335:	89 e5                	mov    %esp,%ebp
c010c337:	81 ec 28 02 00 00    	sub    $0x228,%esp
    char message[512];
    char *exception = exception_messages[cpu->intr];
c010c33d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c340:	8b 40 2c             	mov    0x2c(%eax),%eax
c010c343:	8b 04 85 e0 33 11 c0 	mov    -0x3feecc20(,%eax,4),%eax
c010c34a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
c010c34d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    len = sprintf(message, "%s\n\n", exception);
c010c354:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c357:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c35b:	c7 44 24 04 e6 22 11 	movl   $0xc01122e6,0x4(%esp)
c010c362:	c0 
c010c363:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c010c369:	89 04 24             	mov    %eax,(%esp)
c010c36c:	e8 79 6e ff ff       	call   c01031ea <sprintf>
c010c371:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cpu_dump(cpu, message + len);
c010c374:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c377:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
c010c37d:	01 d0                	add    %edx,%eax
c010c37f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c383:	8b 45 08             	mov    0x8(%ebp),%eax
c010c386:	89 04 24             	mov    %eax,(%esp)
c010c389:	e8 49 fb ff ff       	call   c010bed7 <cpu_dump>

    panic(message);
c010c38e:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c010c394:	89 04 24             	mov    %eax,(%esp)
c010c397:	e8 c9 fc ff ff       	call   c010c065 <panic>
}
c010c39c:	c9                   	leave  
c010c39d:	c3                   	ret    

c010c39e <winpanic>:

/* easter egg! */
void winpanic(char *message)
{
c010c39e:	55                   	push   %ebp
c010c39f:	89 e5                	mov    %esp,%ebp
c010c3a1:	83 ec 18             	sub    $0x18,%esp
    set_color(WHITE | BLUE << 4);
c010c3a4:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c010c3ab:	e8 cf f9 ff ff       	call   c010bd7f <set_color>
    clear_screen();
c010c3b0:	e8 6c f9 ff ff       	call   c010bd21 <clear_screen>

    gotoxy(37, 8);
c010c3b5:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010c3bc:	00 
c010c3bd:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010c3c4:	e8 d9 f9 ff ff       	call   c010bda2 <gotoxy>
    set_color(BLUE | LIGHT_GRAY << 4);
c010c3c9:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c010c3d0:	e8 aa f9 ff ff       	call   c010bd7f <set_color>
    printf(" Windows");
c010c3d5:	c7 04 24 eb 22 11 c0 	movl   $0xc01122eb,(%esp)
c010c3dc:	e8 9c 6d ff ff       	call   c010317d <printf>
    set_color(WHITE | BLUE << 4);
c010c3e1:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c010c3e8:	e8 92 f9 ff ff       	call   c010bd7f <set_color>
    printf("\n\n      ");
c010c3ed:	c7 04 24 dd 22 11 c0 	movl   $0xc01122dd,(%esp)
c010c3f4:	e8 84 6d ff ff       	call   c010317d <printf>
    while (*message != '\0')
c010c3f9:	eb 2b                	jmp    c010c426 <winpanic+0x88>
    {
        putchar(*message);
c010c3fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3fe:	0f b6 00             	movzbl (%eax),%eax
c010c401:	0f be c0             	movsbl %al,%eax
c010c404:	89 04 24             	mov    %eax,(%esp)
c010c407:	e8 3f f7 ff ff       	call   c010bb4b <putchar>

        if (*message == '\n')
c010c40c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c40f:	0f b6 00             	movzbl (%eax),%eax
c010c412:	3c 0a                	cmp    $0xa,%al
c010c414:	75 0c                	jne    c010c422 <winpanic+0x84>
        {
            printf("      ");
c010c416:	c7 04 24 f4 22 11 c0 	movl   $0xc01122f4,(%esp)
c010c41d:	e8 5b 6d ff ff       	call   c010317d <printf>
        }

        ++message;
c010c422:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    gotoxy(37, 8);
    set_color(BLUE | LIGHT_GRAY << 4);
    printf(" Windows");
    set_color(WHITE | BLUE << 4);
    printf("\n\n      ");
    while (*message != '\0')
c010c426:	8b 45 08             	mov    0x8(%ebp),%eax
c010c429:	0f b6 00             	movzbl (%eax),%eax
c010c42c:	84 c0                	test   %al,%al
c010c42e:	75 cb                	jne    c010c3fb <winpanic+0x5d>

        ++message;
    }
    //printf("%s\n", message);

    printf("\n\n      *  Druecken Sie eine beliebige Taste, um die Anwendung abzubrechen.\n");
c010c430:	c7 04 24 fc 22 11 c0 	movl   $0xc01122fc,(%esp)
c010c437:	e8 6e f8 ff ff       	call   c010bcaa <puts>
    printf("      *  Druecken Sie Strg+Alt+Entf, um den Computer neu zu\n");
c010c43c:	c7 04 24 48 23 11 c0 	movl   $0xc0112348,(%esp)
c010c443:	e8 62 f8 ff ff       	call   c010bcaa <puts>
    printf("      starten. nicht gespeicherte Daten gehen dabei verloren.\n");
c010c448:	c7 04 24 84 23 11 c0 	movl   $0xc0112384,(%esp)
c010c44f:	e8 56 f8 ff ff       	call   c010bcaa <puts>
    halt();
c010c454:	e8 2d 1d 00 00       	call   c010e186 <halt>
}
c010c459:	c9                   	leave  
c010c45a:	c3                   	ret    

c010c45b <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010c45b:	55                   	push   %ebp
c010c45c:	89 e5                	mov    %esp,%ebp
c010c45e:	83 ec 08             	sub    $0x8,%esp
c010c461:	8b 55 08             	mov    0x8(%ebp),%edx
c010c464:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c467:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010c46b:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010c46e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010c472:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010c476:	ee                   	out    %al,(%dx)
}
c010c477:	c9                   	leave  
c010c478:	c3                   	ret    

c010c479 <BCD_ENCODE>:

// WARNING: ONLY values up to 99
#define BCD_DECODE(x) ((0b1111 & x) + (10 * (((0b1111 << 4) & x) >> 4)))

static inline uint8_t BCD_ENCODE(char *bcd_str, int x)
{
c010c479:	55                   	push   %ebp
c010c47a:	89 e5                	mov    %esp,%ebp
c010c47c:	83 ec 18             	sub    $0x18,%esp
    sprintf(bcd_str, "%d", x);
c010c47f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c482:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c486:	c7 44 24 04 c2 23 11 	movl   $0xc01123c2,0x4(%esp)
c010c48d:	c0 
c010c48e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c491:	89 04 24             	mov    %eax,(%esp)
c010c494:	e8 51 6d ff ff       	call   c01031ea <sprintf>
    return (uint8_t)bcd_str;
c010c499:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c49c:	c9                   	leave  
c010c49d:	c3                   	ret    

c010c49e <INIT_CLOCK>:
int timer_freq = 0;
struct time *startup;
uint64_t up_time;

void INIT_CLOCK(int freq)
{
c010c49e:	55                   	push   %ebp
c010c49f:	89 e5                	mov    %esp,%ebp
c010c4a1:	83 ec 18             	sub    $0x18,%esp
    startup = malloc(sizeof(struct time));
c010c4a4:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c010c4ab:	e8 ec 11 00 00       	call   c010d69c <malloc>
c010c4b0:	a3 3c a0 11 c0       	mov    %eax,0xc011a03c
    up_time = 0;
c010c4b5:	c7 05 40 a0 11 c0 00 	movl   $0x0,0xc011a040
c010c4bc:	00 00 00 
c010c4bf:	c7 05 44 a0 11 c0 00 	movl   $0x0,0xc011a044
c010c4c6:	00 00 00 
    INIT_RTC();
c010c4c9:	e8 83 00 00 00       	call   c010c551 <INIT_RTC>
    INIT_PIT(freq);
c010c4ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4d1:	89 04 24             	mov    %eax,(%esp)
c010c4d4:	e8 51 00 00 00       	call   c010c52a <INIT_PIT>
}
c010c4d9:	c9                   	leave  
c010c4da:	c3                   	ret    

c010c4db <set_pit_freq>:
 *
 * @param freqency
 * @return void
 */
void set_pit_freq(int freq)
{
c010c4db:	55                   	push   %ebp
c010c4dc:	89 e5                	mov    %esp,%ebp
c010c4de:	83 ec 18             	sub    $0x18,%esp
    timer_freq = freq;
c010c4e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4e4:	a3 2c 80 11 c0       	mov    %eax,0xc011802c
    int counter = 1193182 / freq;
c010c4e9:	b8 de 34 12 00       	mov    $0x1234de,%eax
c010c4ee:	89 c2                	mov    %eax,%edx
c010c4f0:	c1 fa 1f             	sar    $0x1f,%edx
c010c4f3:	f7 7d 08             	idivl  0x8(%ebp)
c010c4f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    outb(0x40,counter & 0xFF);
c010c4f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c4fc:	0f b6 c0             	movzbl %al,%eax
c010c4ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c503:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010c50a:	e8 4c ff ff ff       	call   c010c45b <outb>
    outb(0x40,counter >> 8);
c010c50f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c512:	c1 f8 08             	sar    $0x8,%eax
c010c515:	0f b6 c0             	movzbl %al,%eax
c010c518:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c51c:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010c523:	e8 33 ff ff ff       	call   c010c45b <outb>
}
c010c528:	c9                   	leave  
c010c529:	c3                   	ret    

c010c52a <INIT_PIT>:
 *
 * @param frequency
 * @return void
 */
void INIT_PIT(int freq)
{
c010c52a:	55                   	push   %ebp
c010c52b:	89 e5                	mov    %esp,%ebp
c010c52d:	83 ec 08             	sub    $0x8,%esp
    outb(0x43, 0x34);
c010c530:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c010c537:	00 
c010c538:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
c010c53f:	e8 17 ff ff ff       	call   c010c45b <outb>
    set_pit_freq(freq);
c010c544:	8b 45 08             	mov    0x8(%ebp),%eax
c010c547:	89 04 24             	mov    %eax,(%esp)
c010c54a:	e8 8c ff ff ff       	call   c010c4db <set_pit_freq>
}
c010c54f:	c9                   	leave  
c010c550:	c3                   	ret    

c010c551 <INIT_RTC>:
 *
 * @param void
 * @return void
 */
void INIT_RTC(void)
{
c010c551:	55                   	push   %ebp
c010c552:	89 e5                	mov    %esp,%ebp
c010c554:	83 ec 18             	sub    $0x18,%esp
    cmos = malloc(sizeof(struct cmos_data));
c010c557:	c7 04 24 13 00 00 00 	movl   $0x13,(%esp)
c010c55e:	e8 39 11 00 00       	call   c010d69c <malloc>
c010c563:	a3 38 a0 11 c0       	mov    %eax,0xc011a038
    get_cmos_data(cmos);
c010c568:	a1 38 a0 11 c0       	mov    0xc011a038,%eax
c010c56d:	89 04 24             	mov    %eax,(%esp)
c010c570:	e8 d0 04 00 00       	call   c010ca45 <get_cmos_data>
    update_time(startup);
c010c575:	a1 3c a0 11 c0       	mov    0xc011a03c,%eax
c010c57a:	89 04 24             	mov    %eax,(%esp)
c010c57d:	e8 46 00 00 00       	call   c010c5c8 <update_time>
}
c010c582:	c9                   	leave  
c010c583:	c3                   	ret    

c010c584 <sync_sys_clock>:

void sync_sys_clock()
{
c010c584:	55                   	push   %ebp
c010c585:	89 e5                	mov    %esp,%ebp
c010c587:	53                   	push   %ebx
c010c588:	83 ec 0c             	sub    $0xc,%esp
    up_time += 1000/timer_freq;
c010c58b:	8b 15 2c 80 11 c0    	mov    0xc011802c,%edx
c010c591:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c594:	b8 e8 03 00 00       	mov    $0x3e8,%eax
c010c599:	89 c2                	mov    %eax,%edx
c010c59b:	c1 fa 1f             	sar    $0x1f,%edx
c010c59e:	f7 7d f4             	idivl  -0xc(%ebp)
c010c5a1:	89 c1                	mov    %eax,%ecx
c010c5a3:	89 c3                	mov    %eax,%ebx
c010c5a5:	c1 fb 1f             	sar    $0x1f,%ebx
c010c5a8:	a1 40 a0 11 c0       	mov    0xc011a040,%eax
c010c5ad:	8b 15 44 a0 11 c0    	mov    0xc011a044,%edx
c010c5b3:	01 c8                	add    %ecx,%eax
c010c5b5:	11 da                	adc    %ebx,%edx
c010c5b7:	a3 40 a0 11 c0       	mov    %eax,0xc011a040
c010c5bc:	89 15 44 a0 11 c0    	mov    %edx,0xc011a044
}
c010c5c2:	83 c4 0c             	add    $0xc,%esp
c010c5c5:	5b                   	pop    %ebx
c010c5c6:	5d                   	pop    %ebp
c010c5c7:	c3                   	ret    

c010c5c8 <update_time>:
 * Updates the time from CMOS-RTC
 *
 * @param void
 */
void update_time(struct time *time)
{
c010c5c8:	55                   	push   %ebp
c010c5c9:	89 e5                	mov    %esp,%ebp
c010c5cb:	53                   	push   %ebx
c010c5cc:	83 ec 14             	sub    $0x14,%esp
    time->second =       BCD_DECODE(cmos_read_byte(0x00));
c010c5cf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c5d6:	e8 c7 05 00 00       	call   c010cba2 <cmos_read_byte>
c010c5db:	89 c3                	mov    %eax,%ebx
c010c5dd:	83 e3 0f             	and    $0xf,%ebx
c010c5e0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c5e7:	e8 b6 05 00 00       	call   c010cba2 <cmos_read_byte>
c010c5ec:	89 c2                	mov    %eax,%edx
c010c5ee:	c0 ea 04             	shr    $0x4,%dl
c010c5f1:	89 d0                	mov    %edx,%eax
c010c5f3:	c1 e0 02             	shl    $0x2,%eax
c010c5f6:	01 d0                	add    %edx,%eax
c010c5f8:	01 c0                	add    %eax,%eax
c010c5fa:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c5fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c600:	88 10                	mov    %dl,(%eax)
    time->alarm_sec =    BCD_DECODE(cmos_read_byte(0x01));
c010c602:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c609:	e8 94 05 00 00       	call   c010cba2 <cmos_read_byte>
c010c60e:	89 c3                	mov    %eax,%ebx
c010c610:	83 e3 0f             	and    $0xf,%ebx
c010c613:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c61a:	e8 83 05 00 00       	call   c010cba2 <cmos_read_byte>
c010c61f:	89 c2                	mov    %eax,%edx
c010c621:	c0 ea 04             	shr    $0x4,%dl
c010c624:	89 d0                	mov    %edx,%eax
c010c626:	c1 e0 02             	shl    $0x2,%eax
c010c629:	01 d0                	add    %edx,%eax
c010c62b:	01 c0                	add    %eax,%eax
c010c62d:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c630:	8b 45 08             	mov    0x8(%ebp),%eax
c010c633:	88 50 01             	mov    %dl,0x1(%eax)
    time->minute =       BCD_DECODE(cmos_read_byte(0x02));
c010c636:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c63d:	e8 60 05 00 00       	call   c010cba2 <cmos_read_byte>
c010c642:	89 c3                	mov    %eax,%ebx
c010c644:	83 e3 0f             	and    $0xf,%ebx
c010c647:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c64e:	e8 4f 05 00 00       	call   c010cba2 <cmos_read_byte>
c010c653:	89 c2                	mov    %eax,%edx
c010c655:	c0 ea 04             	shr    $0x4,%dl
c010c658:	89 d0                	mov    %edx,%eax
c010c65a:	c1 e0 02             	shl    $0x2,%eax
c010c65d:	01 d0                	add    %edx,%eax
c010c65f:	01 c0                	add    %eax,%eax
c010c661:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c664:	8b 45 08             	mov    0x8(%ebp),%eax
c010c667:	88 50 02             	mov    %dl,0x2(%eax)
    time->alarm_min =    BCD_DECODE(cmos_read_byte(0x03));
c010c66a:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010c671:	e8 2c 05 00 00       	call   c010cba2 <cmos_read_byte>
c010c676:	89 c3                	mov    %eax,%ebx
c010c678:	83 e3 0f             	and    $0xf,%ebx
c010c67b:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010c682:	e8 1b 05 00 00       	call   c010cba2 <cmos_read_byte>
c010c687:	89 c2                	mov    %eax,%edx
c010c689:	c0 ea 04             	shr    $0x4,%dl
c010c68c:	89 d0                	mov    %edx,%eax
c010c68e:	c1 e0 02             	shl    $0x2,%eax
c010c691:	01 d0                	add    %edx,%eax
c010c693:	01 c0                	add    %eax,%eax
c010c695:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c698:	8b 45 08             	mov    0x8(%ebp),%eax
c010c69b:	88 50 03             	mov    %dl,0x3(%eax)
    time->hour =         BCD_DECODE(cmos_read_byte(0x04));
c010c69e:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010c6a5:	e8 f8 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c6aa:	89 c3                	mov    %eax,%ebx
c010c6ac:	83 e3 0f             	and    $0xf,%ebx
c010c6af:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010c6b6:	e8 e7 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c6bb:	89 c2                	mov    %eax,%edx
c010c6bd:	c0 ea 04             	shr    $0x4,%dl
c010c6c0:	89 d0                	mov    %edx,%eax
c010c6c2:	c1 e0 02             	shl    $0x2,%eax
c010c6c5:	01 d0                	add    %edx,%eax
c010c6c7:	01 c0                	add    %eax,%eax
c010c6c9:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c6cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6cf:	88 50 04             	mov    %dl,0x4(%eax)
    time->alarm_hour =   BCD_DECODE(cmos_read_byte(0x05));
c010c6d2:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010c6d9:	e8 c4 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c6de:	89 c3                	mov    %eax,%ebx
c010c6e0:	83 e3 0f             	and    $0xf,%ebx
c010c6e3:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010c6ea:	e8 b3 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c6ef:	89 c2                	mov    %eax,%edx
c010c6f1:	c0 ea 04             	shr    $0x4,%dl
c010c6f4:	89 d0                	mov    %edx,%eax
c010c6f6:	c1 e0 02             	shl    $0x2,%eax
c010c6f9:	01 d0                	add    %edx,%eax
c010c6fb:	01 c0                	add    %eax,%eax
c010c6fd:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c700:	8b 45 08             	mov    0x8(%ebp),%eax
c010c703:	88 50 05             	mov    %dl,0x5(%eax)
    time->week_day =     BCD_DECODE(cmos_read_byte(0x06)) - 1;
c010c706:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010c70d:	e8 90 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c712:	89 c3                	mov    %eax,%ebx
c010c714:	83 e3 0f             	and    $0xf,%ebx
c010c717:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010c71e:	e8 7f 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c723:	89 c2                	mov    %eax,%edx
c010c725:	c0 ea 04             	shr    $0x4,%dl
c010c728:	89 d0                	mov    %edx,%eax
c010c72a:	c1 e0 02             	shl    $0x2,%eax
c010c72d:	01 d0                	add    %edx,%eax
c010c72f:	01 c0                	add    %eax,%eax
c010c731:	01 d8                	add    %ebx,%eax
c010c733:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c736:	8b 45 08             	mov    0x8(%ebp),%eax
c010c739:	88 50 06             	mov    %dl,0x6(%eax)
    time->day_in_month = BCD_DECODE(cmos_read_byte(0x07));
c010c73c:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010c743:	e8 5a 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c748:	89 c3                	mov    %eax,%ebx
c010c74a:	83 e3 0f             	and    $0xf,%ebx
c010c74d:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010c754:	e8 49 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c759:	89 c2                	mov    %eax,%edx
c010c75b:	c0 ea 04             	shr    $0x4,%dl
c010c75e:	89 d0                	mov    %edx,%eax
c010c760:	c1 e0 02             	shl    $0x2,%eax
c010c763:	01 d0                	add    %edx,%eax
c010c765:	01 c0                	add    %eax,%eax
c010c767:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c76a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c76d:	88 50 07             	mov    %dl,0x7(%eax)
    time->month =        BCD_DECODE(cmos_read_byte(0x08));
c010c770:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010c777:	e8 26 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c77c:	89 c3                	mov    %eax,%ebx
c010c77e:	83 e3 0f             	and    $0xf,%ebx
c010c781:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010c788:	e8 15 04 00 00       	call   c010cba2 <cmos_read_byte>
c010c78d:	89 c2                	mov    %eax,%edx
c010c78f:	c0 ea 04             	shr    $0x4,%dl
c010c792:	89 d0                	mov    %edx,%eax
c010c794:	c1 e0 02             	shl    $0x2,%eax
c010c797:	01 d0                	add    %edx,%eax
c010c799:	01 c0                	add    %eax,%eax
c010c79b:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c79e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7a1:	88 50 08             	mov    %dl,0x8(%eax)
    time->year =         BCD_DECODE(cmos_read_byte(0x09));
c010c7a4:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010c7ab:	e8 f2 03 00 00       	call   c010cba2 <cmos_read_byte>
c010c7b0:	89 c3                	mov    %eax,%ebx
c010c7b2:	83 e3 0f             	and    $0xf,%ebx
c010c7b5:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010c7bc:	e8 e1 03 00 00       	call   c010cba2 <cmos_read_byte>
c010c7c1:	89 c2                	mov    %eax,%edx
c010c7c3:	c0 ea 04             	shr    $0x4,%dl
c010c7c6:	89 d0                	mov    %edx,%eax
c010c7c8:	c1 e0 02             	shl    $0x2,%eax
c010c7cb:	01 d0                	add    %edx,%eax
c010c7cd:	01 c0                	add    %eax,%eax
c010c7cf:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c7d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7d5:	88 50 09             	mov    %dl,0x9(%eax)
    time->century =      BCD_DECODE(cmos_read_byte(0x32));
c010c7d8:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010c7df:	e8 be 03 00 00       	call   c010cba2 <cmos_read_byte>
c010c7e4:	89 c3                	mov    %eax,%ebx
c010c7e6:	83 e3 0f             	and    $0xf,%ebx
c010c7e9:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010c7f0:	e8 ad 03 00 00       	call   c010cba2 <cmos_read_byte>
c010c7f5:	89 c2                	mov    %eax,%edx
c010c7f7:	c0 ea 04             	shr    $0x4,%dl
c010c7fa:	89 d0                	mov    %edx,%eax
c010c7fc:	c1 e0 02             	shl    $0x2,%eax
c010c7ff:	01 d0                	add    %edx,%eax
c010c801:	01 c0                	add    %eax,%eax
c010c803:	8d 14 03             	lea    (%ebx,%eax,1),%edx
c010c806:	8b 45 08             	mov    0x8(%ebp),%eax
c010c809:	88 50 0a             	mov    %dl,0xa(%eax)
}
c010c80c:	83 c4 14             	add    $0x14,%esp
c010c80f:	5b                   	pop    %ebx
c010c810:	5d                   	pop    %ebp
c010c811:	c3                   	ret    

c010c812 <change_time>:
 * Changes the Time from CMOS
 *
 * @param time New time
 */
void change_time(struct time *time)
{
c010c812:	55                   	push   %ebp
c010c813:	89 e5                	mov    %esp,%ebp
c010c815:	83 ec 28             	sub    $0x28,%esp
    char bcd_str[2];
    cmos_write_byte(0x00, BCD_ENCODE(bcd_str, time->second));
c010c818:	8b 45 08             	mov    0x8(%ebp),%eax
c010c81b:	0f b6 00             	movzbl (%eax),%eax
c010c81e:	0f b6 c0             	movzbl %al,%eax
c010c821:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c825:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c828:	89 04 24             	mov    %eax,(%esp)
c010c82b:	e8 49 fc ff ff       	call   c010c479 <BCD_ENCODE>
c010c830:	0f b6 c0             	movzbl %al,%eax
c010c833:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c837:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c83e:	e8 ad 03 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x01, BCD_ENCODE(bcd_str, time->alarm_sec));
c010c843:	8b 45 08             	mov    0x8(%ebp),%eax
c010c846:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010c84a:	0f b6 c0             	movzbl %al,%eax
c010c84d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c851:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c854:	89 04 24             	mov    %eax,(%esp)
c010c857:	e8 1d fc ff ff       	call   c010c479 <BCD_ENCODE>
c010c85c:	0f b6 c0             	movzbl %al,%eax
c010c85f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c863:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c86a:	e8 81 03 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x02, BCD_ENCODE(bcd_str, time->minute));
c010c86f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c872:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010c876:	0f b6 c0             	movzbl %al,%eax
c010c879:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c87d:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c880:	89 04 24             	mov    %eax,(%esp)
c010c883:	e8 f1 fb ff ff       	call   c010c479 <BCD_ENCODE>
c010c888:	0f b6 c0             	movzbl %al,%eax
c010c88b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c88f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c896:	e8 55 03 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x03, BCD_ENCODE(bcd_str, time->alarm_min));
c010c89b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c89e:	0f b6 40 03          	movzbl 0x3(%eax),%eax
c010c8a2:	0f b6 c0             	movzbl %al,%eax
c010c8a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8a9:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c8ac:	89 04 24             	mov    %eax,(%esp)
c010c8af:	e8 c5 fb ff ff       	call   c010c479 <BCD_ENCODE>
c010c8b4:	0f b6 c0             	movzbl %al,%eax
c010c8b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8bb:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010c8c2:	e8 29 03 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x04, BCD_ENCODE(bcd_str, time->hour));
c010c8c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8ca:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010c8ce:	0f b6 c0             	movzbl %al,%eax
c010c8d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8d5:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c8d8:	89 04 24             	mov    %eax,(%esp)
c010c8db:	e8 99 fb ff ff       	call   c010c479 <BCD_ENCODE>
c010c8e0:	0f b6 c0             	movzbl %al,%eax
c010c8e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8e7:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010c8ee:	e8 fd 02 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x05, BCD_ENCODE(bcd_str, time->alarm_hour));
c010c8f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8f6:	0f b6 40 05          	movzbl 0x5(%eax),%eax
c010c8fa:	0f b6 c0             	movzbl %al,%eax
c010c8fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c901:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c904:	89 04 24             	mov    %eax,(%esp)
c010c907:	e8 6d fb ff ff       	call   c010c479 <BCD_ENCODE>
c010c90c:	0f b6 c0             	movzbl %al,%eax
c010c90f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c913:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010c91a:	e8 d1 02 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x06, BCD_ENCODE(bcd_str, time->week_day));
c010c91f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c922:	0f b6 40 06          	movzbl 0x6(%eax),%eax
c010c926:	0f b6 c0             	movzbl %al,%eax
c010c929:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c92d:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c930:	89 04 24             	mov    %eax,(%esp)
c010c933:	e8 41 fb ff ff       	call   c010c479 <BCD_ENCODE>
c010c938:	0f b6 c0             	movzbl %al,%eax
c010c93b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c93f:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010c946:	e8 a5 02 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x07, BCD_ENCODE(bcd_str, time->day_in_month));
c010c94b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c94e:	0f b6 40 07          	movzbl 0x7(%eax),%eax
c010c952:	0f b6 c0             	movzbl %al,%eax
c010c955:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c959:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c95c:	89 04 24             	mov    %eax,(%esp)
c010c95f:	e8 15 fb ff ff       	call   c010c479 <BCD_ENCODE>
c010c964:	0f b6 c0             	movzbl %al,%eax
c010c967:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c96b:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010c972:	e8 79 02 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x08, BCD_ENCODE(bcd_str, time->month));
c010c977:	8b 45 08             	mov    0x8(%ebp),%eax
c010c97a:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c010c97e:	0f b6 c0             	movzbl %al,%eax
c010c981:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c985:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c988:	89 04 24             	mov    %eax,(%esp)
c010c98b:	e8 e9 fa ff ff       	call   c010c479 <BCD_ENCODE>
c010c990:	0f b6 c0             	movzbl %al,%eax
c010c993:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c997:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010c99e:	e8 4d 02 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x09, BCD_ENCODE(bcd_str, time->year));
c010c9a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9a6:	0f b6 40 09          	movzbl 0x9(%eax),%eax
c010c9aa:	0f b6 c0             	movzbl %al,%eax
c010c9ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9b1:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c9b4:	89 04 24             	mov    %eax,(%esp)
c010c9b7:	e8 bd fa ff ff       	call   c010c479 <BCD_ENCODE>
c010c9bc:	0f b6 c0             	movzbl %al,%eax
c010c9bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9c3:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010c9ca:	e8 21 02 00 00       	call   c010cbf0 <cmos_write_byte>
    cmos_write_byte(0x32, BCD_ENCODE(bcd_str, time->century));
c010c9cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9d2:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c010c9d6:	0f b6 c0             	movzbl %al,%eax
c010c9d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9dd:	8d 45 f6             	lea    -0xa(%ebp),%eax
c010c9e0:	89 04 24             	mov    %eax,(%esp)
c010c9e3:	e8 91 fa ff ff       	call   c010c479 <BCD_ENCODE>
c010c9e8:	0f b6 c0             	movzbl %al,%eax
c010c9eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c9ef:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010c9f6:	e8 f5 01 00 00       	call   c010cbf0 <cmos_write_byte>
c010c9fb:	c9                   	leave  
c010c9fc:	c3                   	ret    

c010c9fd <inb>:
#include <stdint.h>



static inline uint8_t inb(uint16_t port)
{
c010c9fd:	55                   	push   %ebp
c010c9fe:	89 e5                	mov    %esp,%ebp
c010ca00:	53                   	push   %ebx
c010ca01:	83 ec 14             	sub    $0x14,%esp
c010ca04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca07:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    uint8_t result;
    asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c010ca0b:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010ca0f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010ca13:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010ca17:	ec                   	in     (%dx),%al
c010ca18:	89 c3                	mov    %eax,%ebx
c010ca1a:	88 5d fb             	mov    %bl,-0x5(%ebp)
    return result;
c010ca1d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c010ca21:	83 c4 14             	add    $0x14,%esp
c010ca24:	5b                   	pop    %ebx
c010ca25:	5d                   	pop    %ebp
c010ca26:	c3                   	ret    

c010ca27 <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010ca27:	55                   	push   %ebp
c010ca28:	89 e5                	mov    %esp,%ebp
c010ca2a:	83 ec 08             	sub    $0x8,%esp
c010ca2d:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca30:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca33:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ca37:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010ca3a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010ca3e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010ca42:	ee                   	out    %al,(%dx)
}
c010ca43:	c9                   	leave  
c010ca44:	c3                   	ret    

c010ca45 <get_cmos_data>:
 *
 * @param buffer
 * @return void
 */
void get_cmos_data(struct cmos_data *cmos)
{
c010ca45:	55                   	push   %ebp
c010ca46:	89 e5                	mov    %esp,%ebp
c010ca48:	83 ec 18             	sub    $0x18,%esp
    cmos->registers.register_a = cmos_read_byte(0x0A);
c010ca4b:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010ca52:	e8 4b 01 00 00       	call   c010cba2 <cmos_read_byte>
c010ca57:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca5a:	88 02                	mov    %al,(%edx)
    cmos->registers.register_b = cmos_read_byte(0x0B);
c010ca5c:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c010ca63:	e8 3a 01 00 00       	call   c010cba2 <cmos_read_byte>
c010ca68:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca6b:	88 42 01             	mov    %al,0x1(%edx)
    cmos->registers.register_c = cmos_read_byte(0x0C);
c010ca6e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010ca75:	e8 28 01 00 00       	call   c010cba2 <cmos_read_byte>
c010ca7a:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca7d:	88 42 02             	mov    %al,0x2(%edx)
    cmos->registers.register_d = cmos_read_byte(0x0D);
c010ca80:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
c010ca87:	e8 16 01 00 00       	call   c010cba2 <cmos_read_byte>
c010ca8c:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca8f:	88 42 03             	mov    %al,0x3(%edx)

    cmos->hardware.post_diagnostig_status_byte = cmos_read_byte(0x0E);
c010ca92:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010ca99:	e8 04 01 00 00       	call   c010cba2 <cmos_read_byte>
c010ca9e:	8b 55 08             	mov    0x8(%ebp),%edx
c010caa1:	88 42 04             	mov    %al,0x4(%edx)
    cmos->hardware.shutdown_status_byte =        cmos_read_byte(0x0F);
c010caa4:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010caab:	e8 f2 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cab0:	8b 55 08             	mov    0x8(%ebp),%edx
c010cab3:	88 42 05             	mov    %al,0x5(%edx)
    cmos->hardware.floppy_disk_type =            cmos_read_byte(0x10);
c010cab6:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c010cabd:	e8 e0 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cac2:	8b 55 08             	mov    0x8(%ebp),%edx
c010cac5:	88 42 06             	mov    %al,0x6(%edx)
    cmos->hardware.hd_type =                     cmos_read_byte(0x12);
c010cac8:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
c010cacf:	e8 ce 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cad4:	8b 55 08             	mov    0x8(%ebp),%edx
c010cad7:	88 42 07             	mov    %al,0x7(%edx)
    cmos->hardware.device_byte =                 cmos_read_byte(0x14);
c010cada:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c010cae1:	e8 bc 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cae6:	8b 55 08             	mov    0x8(%ebp),%edx
c010cae9:	88 42 08             	mov    %al,0x8(%edx)

    cmos->hardware.basememory_size_low =         cmos_read_byte(0x15);
c010caec:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
c010caf3:	e8 aa 00 00 00       	call   c010cba2 <cmos_read_byte>
c010caf8:	8b 55 08             	mov    0x8(%ebp),%edx
c010cafb:	88 42 09             	mov    %al,0x9(%edx)
    cmos->hardware.basememory_size_high =        cmos_read_byte(0x16);
c010cafe:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
c010cb05:	e8 98 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb0a:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb0d:	88 42 0a             	mov    %al,0xa(%edx)
    cmos->hardware.expandablememory_size_low =   cmos_read_byte(0x17);
c010cb10:	c7 04 24 17 00 00 00 	movl   $0x17,(%esp)
c010cb17:	e8 86 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb1c:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb1f:	88 42 0b             	mov    %al,0xb(%edx)
    cmos->hardware.expandablememory_size_high =  cmos_read_byte(0x18);
c010cb22:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010cb29:	e8 74 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb2e:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb31:	88 42 0c             	mov    %al,0xc(%edx)
    cmos->hardware.extension_byte_hd1 =          cmos_read_byte(0x19);
c010cb34:	c7 04 24 19 00 00 00 	movl   $0x19,(%esp)
c010cb3b:	e8 62 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb40:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb43:	88 42 0d             	mov    %al,0xd(%edx)
    cmos->hardware.extension_byte_hd2 =          cmos_read_byte(0x1A);
c010cb46:	c7 04 24 1a 00 00 00 	movl   $0x1a,(%esp)
c010cb4d:	e8 50 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb52:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb55:	88 42 0e             	mov    %al,0xe(%edx)

    cmos->hardware.cmos_magic_low =              cmos_read_byte(0x2E);
c010cb58:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
c010cb5f:	e8 3e 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb64:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb67:	88 42 0f             	mov    %al,0xf(%edx)
    cmos->hardware.cmos_magic_high =             cmos_read_byte(0x2F);
c010cb6a:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
c010cb71:	e8 2c 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb76:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb79:	88 42 10             	mov    %al,0x10(%edx)

    cmos->hardware.extendedmemory_low =          cmos_read_byte(0x30);
c010cb7c:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010cb83:	e8 1a 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb88:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb8b:	88 42 11             	mov    %al,0x11(%edx)
    cmos->hardware.extendedmenory_high =         cmos_read_byte(0x31);
c010cb8e:	c7 04 24 31 00 00 00 	movl   $0x31,(%esp)
c010cb95:	e8 08 00 00 00       	call   c010cba2 <cmos_read_byte>
c010cb9a:	8b 55 08             	mov    0x8(%ebp),%edx
c010cb9d:	88 42 12             	mov    %al,0x12(%edx)
}
c010cba0:	c9                   	leave  
c010cba1:	c3                   	ret    

c010cba2 <cmos_read_byte>:
 * @param offset Offset in the CMOS
 *
 * @return Read value from CMOS
 */
uint8_t cmos_read_byte(uint8_t offset)
{
c010cba2:	55                   	push   %ebp
c010cba3:	89 e5                	mov    %esp,%ebp
c010cba5:	83 ec 1c             	sub    $0x1c,%esp
c010cba8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbab:	88 45 ec             	mov    %al,-0x14(%ebp)
    uint8_t tmp = inb(0x70);
c010cbae:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010cbb5:	e8 43 fe ff ff       	call   c010c9fd <inb>
c010cbba:	88 45 ff             	mov    %al,-0x1(%ebp)
    outb(0x70, (tmp & 0x80) | (offset & 0x7F));
c010cbbd:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c010cbc1:	89 c2                	mov    %eax,%edx
c010cbc3:	83 e2 80             	and    $0xffffff80,%edx
c010cbc6:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010cbca:	83 e0 7f             	and    $0x7f,%eax
c010cbcd:	09 d0                	or     %edx,%eax
c010cbcf:	0f b6 c0             	movzbl %al,%eax
c010cbd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cbd6:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010cbdd:	e8 45 fe ff ff       	call   c010ca27 <outb>
    return inb(0x71);
c010cbe2:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c010cbe9:	e8 0f fe ff ff       	call   c010c9fd <inb>
}
c010cbee:	c9                   	leave  
c010cbef:	c3                   	ret    

c010cbf0 <cmos_write_byte>:
 * @param value Value which is written into the CMOS
 *
 * @return void
 */
void cmos_write_byte(uint8_t offset, uint8_t value)
{
c010cbf0:	55                   	push   %ebp
c010cbf1:	89 e5                	mov    %esp,%ebp
c010cbf3:	83 ec 20             	sub    $0x20,%esp
c010cbf6:	8b 55 08             	mov    0x8(%ebp),%edx
c010cbf9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbfc:	88 55 ec             	mov    %dl,-0x14(%ebp)
c010cbff:	88 45 e8             	mov    %al,-0x18(%ebp)
    uint8_t tmp = inb(0x70);
c010cc02:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010cc09:	e8 ef fd ff ff       	call   c010c9fd <inb>
c010cc0e:	88 45 ff             	mov    %al,-0x1(%ebp)
    outb(0x70, (tmp & 0x80) | (offset & 0x7F));
c010cc11:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c010cc15:	89 c2                	mov    %eax,%edx
c010cc17:	83 e2 80             	and    $0xffffff80,%edx
c010cc1a:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010cc1e:	83 e0 7f             	and    $0x7f,%eax
c010cc21:	09 d0                	or     %edx,%eax
c010cc23:	0f b6 c0             	movzbl %al,%eax
c010cc26:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc2a:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010cc31:	e8 f1 fd ff ff       	call   c010ca27 <outb>
    outb(0x71, value);
c010cc36:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010cc3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc3e:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c010cc45:	e8 dd fd ff ff       	call   c010ca27 <outb>
}
c010cc4a:	c9                   	leave  
c010cc4b:	c3                   	ret    

c010cc4c <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010cc4c:	55                   	push   %ebp
c010cc4d:	89 e5                	mov    %esp,%ebp
c010cc4f:	83 ec 08             	sub    $0x8,%esp
c010cc52:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc55:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc58:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010cc5c:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010cc5f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cc63:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010cc67:	ee                   	out    %al,(%dx)
}
c010cc68:	c9                   	leave  
c010cc69:	c3                   	ret    

c010cc6a <crtc_write>:

#include <drivers/crtc.h>
#include <io.h>

void crtc_write(uint8_t index, uint8_t value)
{
c010cc6a:	55                   	push   %ebp
c010cc6b:	89 e5                	mov    %esp,%ebp
c010cc6d:	83 ec 10             	sub    $0x10,%esp
c010cc70:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc73:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc76:	88 55 fc             	mov    %dl,-0x4(%ebp)
c010cc79:	88 45 f8             	mov    %al,-0x8(%ebp)
    outb(CRTC_INDEX_PORT, index);
c010cc7c:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010cc80:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc84:	c7 04 24 d4 03 00 00 	movl   $0x3d4,(%esp)
c010cc8b:	e8 bc ff ff ff       	call   c010cc4c <outb>
    outb(CRTC_DATA_PORT, value);
c010cc90:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010cc94:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc98:	c7 04 24 d5 03 00 00 	movl   $0x3d5,(%esp)
c010cc9f:	e8 a8 ff ff ff       	call   c010cc4c <outb>
}
c010cca4:	c9                   	leave  
c010cca5:	c3                   	ret    

c010cca6 <inb>:
#include <stdint.h>



static inline uint8_t inb(uint16_t port)
{
c010cca6:	55                   	push   %ebp
c010cca7:	89 e5                	mov    %esp,%ebp
c010cca9:	53                   	push   %ebx
c010ccaa:	83 ec 14             	sub    $0x14,%esp
c010ccad:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccb0:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    uint8_t result;
    asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c010ccb4:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010ccb8:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010ccbc:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010ccc0:	ec                   	in     (%dx),%al
c010ccc1:	89 c3                	mov    %eax,%ebx
c010ccc3:	88 5d fb             	mov    %bl,-0x5(%ebp)
    return result;
c010ccc6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c010ccca:	83 c4 14             	add    $0x14,%esp
c010cccd:	5b                   	pop    %ebx
c010ccce:	5d                   	pop    %ebp
c010cccf:	c3                   	ret    

c010ccd0 <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010ccd0:	55                   	push   %ebp
c010ccd1:	89 e5                	mov    %esp,%ebp
c010ccd3:	83 ec 08             	sub    $0x8,%esp
c010ccd6:	8b 55 08             	mov    0x8(%ebp),%edx
c010ccd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ccdc:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010cce0:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010cce3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cce7:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010cceb:	ee                   	out    %al,(%dx)
}
c010ccec:	c9                   	leave  
c010cced:	c3                   	ret    

c010ccee <outw>:

static inline void outw(uint16_t port, uint16_t value)
{
c010ccee:	55                   	push   %ebp
c010ccef:	89 e5                	mov    %esp,%ebp
c010ccf1:	83 ec 08             	sub    $0x8,%esp
c010ccf4:	8b 55 08             	mov    0x8(%ebp),%edx
c010ccf7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ccfa:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010ccfe:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    asm volatile("outw %1, %0" : : "Nd" (port), "a" (value));
c010cd02:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cd06:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c010cd0a:	66 ef                	out    %ax,(%dx)
}
c010cd0c:	c9                   	leave  
c010cd0d:	c3                   	ret    

c010cd0e <outl>:

static inline void outl(uint16_t port, uint32_t value)
{
c010cd0e:	55                   	push   %ebp
c010cd0f:	89 e5                	mov    %esp,%ebp
c010cd11:	83 ec 04             	sub    $0x4,%esp
c010cd14:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd17:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    asm volatile("outl %1, %0" : : "Nd" (port), "a" (value));
c010cd1b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cd1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd22:	ef                   	out    %eax,(%dx)
}
c010cd23:	c9                   	leave  
c010cd24:	c3                   	ret    

c010cd25 <rtl_outb>:
void rtl8139_isr(struct pci_dev *dev);
void rtl8139_reset(struct rtl_dev * dev);


static inline void rtl_outb(struct rtl_dev *dev, uint32_t offset, uint8_t value)
{
c010cd25:	55                   	push   %ebp
c010cd26:	89 e5                	mov    %esp,%ebp
c010cd28:	83 ec 0c             	sub    $0xc,%esp
c010cd2b:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd2e:	88 45 fc             	mov    %al,-0x4(%ebp)
    outb(dev->portbase+offset, value);
c010cd31:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c010cd35:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd38:	8b 00                	mov    (%eax),%eax
c010cd3a:	89 c1                	mov    %eax,%ecx
c010cd3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd3f:	01 c8                	add    %ecx,%eax
c010cd41:	0f b7 c0             	movzwl %ax,%eax
c010cd44:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cd48:	89 04 24             	mov    %eax,(%esp)
c010cd4b:	e8 80 ff ff ff       	call   c010ccd0 <outb>
}
c010cd50:	c9                   	leave  
c010cd51:	c3                   	ret    

c010cd52 <rtl_outw>:

static inline void rtl_outw(struct rtl_dev *dev, uint32_t offset, uint16_t value)
{
c010cd52:	55                   	push   %ebp
c010cd53:	89 e5                	mov    %esp,%ebp
c010cd55:	83 ec 0c             	sub    $0xc,%esp
c010cd58:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd5b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    outw(dev->portbase+offset, value);
c010cd5f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010cd63:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd66:	8b 00                	mov    (%eax),%eax
c010cd68:	89 c1                	mov    %eax,%ecx
c010cd6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd6d:	01 c8                	add    %ecx,%eax
c010cd6f:	0f b7 c0             	movzwl %ax,%eax
c010cd72:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cd76:	89 04 24             	mov    %eax,(%esp)
c010cd79:	e8 70 ff ff ff       	call   c010ccee <outw>
}
c010cd7e:	c9                   	leave  
c010cd7f:	c3                   	ret    

c010cd80 <rtl_outl>:

static inline void rtl_outl(struct rtl_dev *dev, uint32_t offset, uint32_t value)
{
c010cd80:	55                   	push   %ebp
c010cd81:	89 e5                	mov    %esp,%ebp
c010cd83:	83 ec 08             	sub    $0x8,%esp
    outl(dev->portbase+offset, value);
c010cd86:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd89:	8b 00                	mov    (%eax),%eax
c010cd8b:	89 c2                	mov    %eax,%edx
c010cd8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd90:	01 d0                	add    %edx,%eax
c010cd92:	0f b7 c0             	movzwl %ax,%eax
c010cd95:	8b 55 10             	mov    0x10(%ebp),%edx
c010cd98:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cd9c:	89 04 24             	mov    %eax,(%esp)
c010cd9f:	e8 6a ff ff ff       	call   c010cd0e <outl>
}
c010cda4:	c9                   	leave  
c010cda5:	c3                   	ret    

c010cda6 <rtl_inb>:

static inline uint8_t rtl_inb(struct rtl_dev *dev, uint32_t offset)
{
c010cda6:	55                   	push   %ebp
c010cda7:	89 e5                	mov    %esp,%ebp
c010cda9:	83 ec 04             	sub    $0x4,%esp
    return inb(dev->portbase+offset);
c010cdac:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdaf:	8b 00                	mov    (%eax),%eax
c010cdb1:	89 c2                	mov    %eax,%edx
c010cdb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cdb6:	01 d0                	add    %edx,%eax
c010cdb8:	0f b7 c0             	movzwl %ax,%eax
c010cdbb:	89 04 24             	mov    %eax,(%esp)
c010cdbe:	e8 e3 fe ff ff       	call   c010cca6 <inb>
}
c010cdc3:	c9                   	leave  
c010cdc4:	c3                   	ret    

c010cdc5 <INIT_RTL8139>:
list_t *rtl_dev = NULL;
int rtl_devc = 0;


void INIT_RTL8139(void)
{
c010cdc5:	55                   	push   %ebp
c010cdc6:	89 e5                	mov    %esp,%ebp
c010cdc8:	56                   	push   %esi
c010cdc9:	53                   	push   %ebx
c010cdca:	83 ec 30             	sub    $0x30,%esp
    printf("RTL8139:\n");
c010cdcd:	c7 04 24 c8 23 11 c0 	movl   $0xc01123c8,(%esp)
c010cdd4:	e8 d1 ee ff ff       	call   c010bcaa <puts>
    rtl_dev = list_create();
c010cdd9:	e8 a0 57 ff ff       	call   c010257e <list_create>
c010cdde:	a3 30 80 11 c0       	mov    %eax,0xc0118030
    struct pci_dev *current_pci_dev = pci_search_device(pci_dev_list, VENDOR_ID, DEVICE_ID, rtl_devc);
c010cde3:	8b 15 34 80 11 c0    	mov    0xc0118034,%edx
c010cde9:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010cdee:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cdf2:	c7 44 24 08 39 81 00 	movl   $0x8139,0x8(%esp)
c010cdf9:	00 
c010cdfa:	c7 44 24 04 ec 10 00 	movl   $0x10ec,0x4(%esp)
c010ce01:	00 
c010ce02:	89 04 24             	mov    %eax,(%esp)
c010ce05:	e8 ec e2 ff ff       	call   c010b0f6 <pci_search_device>
c010ce0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(current_pci_dev != NULL)
c010ce0d:	e9 5d 01 00 00       	jmp    c010cf6f <INIT_RTL8139+0x1aa>
    {
        rtl_devc++;
c010ce12:	a1 34 80 11 c0       	mov    0xc0118034,%eax
c010ce17:	83 c0 01             	add    $0x1,%eax
c010ce1a:	a3 34 80 11 c0       	mov    %eax,0xc0118034
        struct rtl_dev *current_dev = malloc(sizeof(struct rtl_dev ));
c010ce1f:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
c010ce26:	e8 71 08 00 00       	call   c010d69c <malloc>
c010ce2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        current_dev->dev = current_pci_dev;
c010ce2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce31:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ce34:	89 50 18             	mov    %edx,0x18(%eax)
        list_push_front(rtl_dev,(void *) current_dev);
c010ce37:	a1 30 80 11 c0       	mov    0xc0118030,%eax
c010ce3c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ce3f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ce43:	89 04 24             	mov    %eax,(%esp)
c010ce46:	e8 6a 58 ff ff       	call   c01026b5 <list_push_front>


        int i;
        for(i = 0; i < 6; i++)
c010ce4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010ce52:	e9 b1 00 00 00       	jmp    c010cf08 <INIT_RTL8139+0x143>
        {
            if(current_pci_dev->base_adress[i].type == PORT)
c010ce57:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010ce5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ce5d:	89 d0                	mov    %edx,%eax
c010ce5f:	01 c0                	add    %eax,%eax
c010ce61:	01 d0                	add    %edx,%eax
c010ce63:	c1 e0 02             	shl    $0x2,%eax
c010ce66:	01 c8                	add    %ecx,%eax
c010ce68:	83 c0 1c             	add    $0x1c,%eax
c010ce6b:	8b 00                	mov    (%eax),%eax
c010ce6d:	83 f8 01             	cmp    $0x1,%eax
c010ce70:	75 1d                	jne    c010ce8f <INIT_RTL8139+0xca>
            {
                current_dev->portbase = current_pci_dev->base_adress[i].adress;
c010ce72:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010ce75:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ce78:	89 d0                	mov    %edx,%eax
c010ce7a:	01 c0                	add    %eax,%eax
c010ce7c:	01 d0                	add    %edx,%eax
c010ce7e:	c1 e0 02             	shl    $0x2,%eax
c010ce81:	01 c8                	add    %ecx,%eax
c010ce83:	83 c0 18             	add    $0x18,%eax
c010ce86:	8b 10                	mov    (%eax),%edx
c010ce88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce8b:	89 10                	mov    %edx,(%eax)
                // TODO: require ports from kernel manager
                continue;
c010ce8d:	eb 75                	jmp    c010cf04 <INIT_RTL8139+0x13f>
            }
            else if(current_pci_dev->base_adress[i].type == MEMORY)
c010ce8f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010ce92:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ce95:	89 d0                	mov    %edx,%eax
c010ce97:	01 c0                	add    %eax,%eax
c010ce99:	01 d0                	add    %edx,%eax
c010ce9b:	c1 e0 02             	shl    $0x2,%eax
c010ce9e:	01 c8                	add    %ecx,%eax
c010cea0:	83 c0 1c             	add    $0x1c,%eax
c010cea3:	8b 00                	mov    (%eax),%eax
c010cea5:	85 c0                	test   %eax,%eax
c010cea7:	75 5b                	jne    c010cf04 <INIT_RTL8139+0x13f>
            {
                // TODO: require memory
                current_dev->phys_membase = 0xC00000; // A Random adress because there is no reall alloc function
c010cea9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ceac:	c7 40 04 00 00 c0 00 	movl   $0xc00000,0x4(%eax)
                current_dev->virt_membase = 0xC0C00000;
c010ceb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ceb6:	c7 40 08 00 00 c0 c0 	movl   $0xc0c00000,0x8(%eax)
                pci_writel(current_pci_dev->bus, current_pci_dev->dev, current_pci_dev->func, PCI_BASE + (i*4), current_dev->phys_membase);
c010cebd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cec0:	8b 70 04             	mov    0x4(%eax),%esi
c010cec3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cec6:	83 c0 04             	add    $0x4,%eax
c010cec9:	c1 e0 02             	shl    $0x2,%eax
c010cecc:	0f b6 d8             	movzbl %al,%ebx
c010cecf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ced2:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010ced6:	0f b6 c8             	movzbl %al,%ecx
c010ced9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cedc:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c010cee0:	0f b6 d0             	movzbl %al,%edx
c010cee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cee6:	0f b6 00             	movzbl (%eax),%eax
c010cee9:	0f b6 c0             	movzbl %al,%eax
c010ceec:	89 74 24 10          	mov    %esi,0x10(%esp)
c010cef0:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010cef4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010cef8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cefc:	89 04 24             	mov    %eax,(%esp)
c010ceff:	e8 23 e1 ff ff       	call   c010b027 <pci_writel>
        current_dev->dev = current_pci_dev;
        list_push_front(rtl_dev,(void *) current_dev);


        int i;
        for(i = 0; i < 6; i++)
c010cf04:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010cf08:	83 7d f0 05          	cmpl   $0x5,-0x10(%ebp)
c010cf0c:	0f 8e 45 ff ff ff    	jle    c010ce57 <INIT_RTL8139+0x92>
                current_dev->phys_membase = 0xC00000; // A Random adress because there is no reall alloc function
                current_dev->virt_membase = 0xC0C00000;
                pci_writel(current_pci_dev->bus, current_pci_dev->dev, current_pci_dev->func, PCI_BASE + (i*4), current_dev->phys_membase);
            }
        }
        if(current_dev->portbase == 0)
c010cf12:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cf15:	8b 00                	mov    (%eax),%eax
c010cf17:	85 c0                	test   %eax,%eax
c010cf19:	75 0c                	jne    c010cf27 <INIT_RTL8139+0x162>
            printf("invalid device; no port base found!\n");
c010cf1b:	c7 04 24 d4 23 11 c0 	movl   $0xc01123d4,(%esp)
c010cf22:	e8 83 ed ff ff       	call   c010bcaa <puts>


        rtl8139_reset(current_dev);
c010cf27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cf2a:	89 04 24             	mov    %eax,(%esp)
c010cf2d:	e8 4e 00 00 00       	call   c010cf80 <rtl8139_reset>

        pci_install_isr(rtl8139_isr, current_pci_dev);
c010cf32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf35:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf39:	c7 04 24 4a d0 10 c0 	movl   $0xc010d04a,(%esp)
c010cf40:	e8 82 e2 ff ff       	call   c010b1c7 <pci_install_isr>

        current_pci_dev = pci_search_device(pci_dev_list, VENDOR_ID, DEVICE_ID, rtl_devc);
c010cf45:	8b 15 34 80 11 c0    	mov    0xc0118034,%edx
c010cf4b:	a1 30 a0 11 c0       	mov    0xc011a030,%eax
c010cf50:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cf54:	c7 44 24 08 39 81 00 	movl   $0x8139,0x8(%esp)
c010cf5b:	00 
c010cf5c:	c7 44 24 04 ec 10 00 	movl   $0x10ec,0x4(%esp)
c010cf63:	00 
c010cf64:	89 04 24             	mov    %eax,(%esp)
c010cf67:	e8 8a e1 ff ff       	call   c010b0f6 <pci_search_device>
c010cf6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
void INIT_RTL8139(void)
{
    printf("RTL8139:\n");
    rtl_dev = list_create();
    struct pci_dev *current_pci_dev = pci_search_device(pci_dev_list, VENDOR_ID, DEVICE_ID, rtl_devc);
    while(current_pci_dev != NULL)
c010cf6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf73:	0f 85 99 fe ff ff    	jne    c010ce12 <INIT_RTL8139+0x4d>
        current_pci_dev = pci_search_device(pci_dev_list, VENDOR_ID, DEVICE_ID, rtl_devc);
    }



}
c010cf79:	83 c4 30             	add    $0x30,%esp
c010cf7c:	5b                   	pop    %ebx
c010cf7d:	5e                   	pop    %esi
c010cf7e:	5d                   	pop    %ebp
c010cf7f:	c3                   	ret    

c010cf80 <rtl8139_reset>:

void rtl8139_reset(struct rtl_dev * dev)
{
c010cf80:	55                   	push   %ebp
c010cf81:	89 e5                	mov    %esp,%ebp
c010cf83:	83 ec 0c             	sub    $0xc,%esp
    rtl_outb(dev,REG_COMMAND, RESET_CARD); // perform reset
c010cf86:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010cf8d:	00 
c010cf8e:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c010cf95:	00 
c010cf96:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf99:	89 04 24             	mov    %eax,(%esp)
c010cf9c:	e8 84 fd ff ff       	call   c010cd25 <rtl_outb>
    while(rtl_inb(dev, REG_COMMAND) & RESET_CARD) {}
c010cfa1:	90                   	nop
c010cfa2:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c010cfa9:	00 
c010cfaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfad:	89 04 24             	mov    %eax,(%esp)
c010cfb0:	e8 f1 fd ff ff       	call   c010cda6 <rtl_inb>
c010cfb5:	0f b6 c0             	movzbl %al,%eax
c010cfb8:	83 e0 10             	and    $0x10,%eax
c010cfbb:	85 c0                	test   %eax,%eax
c010cfbd:	75 e3                	jne    c010cfa2 <rtl8139_reset+0x22>
    rtl_outb(dev, REG_COMMAND, ENABLE_RECIEVER | ENABLE_TRANSMITTER); // enable reciever and transmitter
c010cfbf:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
c010cfc6:	00 
c010cfc7:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c010cfce:	00 
c010cfcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfd2:	89 04 24             	mov    %eax,(%esp)
c010cfd5:	e8 4b fd ff ff       	call   c010cd25 <rtl_outb>
    rtl_outl(dev, REG_TRANSMIT_CONFIGURATION, 0x03000700);
c010cfda:	c7 44 24 08 00 07 00 	movl   $0x3000700,0x8(%esp)
c010cfe1:	03 
c010cfe2:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c010cfe9:	00 
c010cfea:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfed:	89 04 24             	mov    %eax,(%esp)
c010cff0:	e8 8b fd ff ff       	call   c010cd80 <rtl_outl>
    rtl_outl(dev, REG_RECEIVE_CONFIGURATION, 0x0000070a);
c010cff5:	c7 44 24 08 0a 07 00 	movl   $0x70a,0x8(%esp)
c010cffc:	00 
c010cffd:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010d004:	00 
c010d005:	8b 45 08             	mov    0x8(%ebp),%eax
c010d008:	89 04 24             	mov    %eax,(%esp)
c010d00b:	e8 70 fd ff ff       	call   c010cd80 <rtl_outl>
    rtl_outl(dev, REG_RECEIVE_BUFFER, dev->phys_membase); // set recieve buffer
c010d010:	8b 45 08             	mov    0x8(%ebp),%eax
c010d013:	8b 40 04             	mov    0x4(%eax),%eax
c010d016:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d01a:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
c010d021:	00 
c010d022:	8b 45 08             	mov    0x8(%ebp),%eax
c010d025:	89 04 24             	mov    %eax,(%esp)
c010d028:	e8 53 fd ff ff       	call   c010cd80 <rtl_outl>
    rtl_outw(dev, REG_INTERRUPT_MASK, ALL_INTERRUPTS); //Allow all interrupts
c010d02d:	c7 44 24 08 ff ff 00 	movl   $0xffff,0x8(%esp)
c010d034:	00 
c010d035:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010d03c:	00 
c010d03d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d040:	89 04 24             	mov    %eax,(%esp)
c010d043:	e8 0a fd ff ff       	call   c010cd52 <rtl_outw>
}
c010d048:	c9                   	leave  
c010d049:	c3                   	ret    

c010d04a <rtl8139_isr>:


void rtl8139_isr(struct pci_dev *dev)
{
c010d04a:	55                   	push   %ebp
c010d04b:	89 e5                	mov    %esp,%ebp
c010d04d:	83 ec 18             	sub    $0x18,%esp
    printf("RTL IRQ!\n");
c010d050:	c7 04 24 f8 23 11 c0 	movl   $0xc01123f8,(%esp)
c010d057:	e8 4e ec ff ff       	call   c010bcaa <puts>
}
c010d05c:	c9                   	leave  
c010d05d:	c3                   	ret    

c010d05e <INIT_PAGING>:
 *
 * @param void
 * @return void
 */
void INIT_PAGING(struct multiboot_struct *mb_info)
{
c010d05e:	55                   	push   %ebp
c010d05f:	89 e5                	mov    %esp,%ebp
c010d061:	83 ec 18             	sub    $0x18,%esp
    install_exc(0xe, page_fault_handler);
c010d064:	c7 44 24 04 bd e0 10 	movl   $0xc010e0bd,0x4(%esp)
c010d06b:	c0 
c010d06c:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010d073:	e8 5f 12 00 00       	call   c010e2d7 <install_exc>
    ARCH_INIT_PAGING(mb_info);
c010d078:	8b 45 08             	mov    0x8(%ebp),%eax
c010d07b:	89 04 24             	mov    %eax,(%esp)
c010d07e:	e8 aa 07 00 00       	call   c010d82d <ARCH_INIT_PAGING>
}
c010d083:	c9                   	leave  
c010d084:	c3                   	ret    

c010d085 <vmm_create_context>:

/**
 * Create & Destroy
 */
void vmm_create_context(vmm_context_t *context)
{
c010d085:	55                   	push   %ebp
c010d086:	89 e5                	mov    %esp,%ebp
c010d088:	83 ec 18             	sub    $0x18,%esp
    arch_vmm_create_context(&context->arch_context);
c010d08b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d08e:	89 04 24             	mov    %eax,(%esp)
c010d091:	e8 6e 09 00 00       	call   c010da04 <arch_vmm_create_context>

}
c010d096:	c9                   	leave  
c010d097:	c3                   	ret    

c010d098 <vmm_destroy_context>:

void vmm_destroy_context(vmm_context_t *context)
{
c010d098:	55                   	push   %ebp
c010d099:	89 e5                	mov    %esp,%ebp
c010d09b:	83 ec 18             	sub    $0x18,%esp
    arch_vmm_destroy_context(&context->arch_context);
c010d09e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0a1:	89 04 24             	mov    %eax,(%esp)
c010d0a4:	e8 c1 09 00 00       	call   c010da6a <arch_vmm_destroy_context>
}
c010d0a9:	c9                   	leave  
c010d0aa:	c3                   	ret    

c010d0ab <vmm_switch_context>:

void vmm_switch_context(vmm_context_t *context)
{
c010d0ab:	55                   	push   %ebp
c010d0ac:	89 e5                	mov    %esp,%ebp
c010d0ae:	83 ec 18             	sub    $0x18,%esp
    if(context != current_context)
c010d0b1:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d0b6:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d0b9:	74 1e                	je     c010d0d9 <vmm_switch_context+0x2e>
    {
        arch_update_context(&context->arch_context);
c010d0bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0be:	89 04 24             	mov    %eax,(%esp)
c010d0c1:	e8 0a 0b 00 00       	call   c010dbd0 <arch_update_context>
        arch_switch_context(&context->arch_context);
c010d0c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0c9:	89 04 24             	mov    %eax,(%esp)
c010d0cc:	e8 de 0f 00 00       	call   c010e0af <arch_switch_context>
        current_context = context;
c010d0d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0d4:	a3 38 80 11 c0       	mov    %eax,0xc0118038
    }
}
c010d0d9:	c9                   	leave  
c010d0da:	c3                   	ret    

c010d0db <vmm_map>:

/**
 * Map a physical address to a virtual adress
 */
int vmm_map(vmm_context_t *context, paddr_t pframe, vaddr_t vframe, uint8_t flags)
{
c010d0db:	55                   	push   %ebp
c010d0dc:	89 e5                	mov    %esp,%ebp
c010d0de:	83 ec 28             	sub    $0x28,%esp
c010d0e1:	8b 45 14             	mov    0x14(%ebp),%eax
c010d0e4:	88 45 f4             	mov    %al,-0xc(%ebp)
    return arch_map(&context->arch_context, pframe, vframe, flags);
c010d0e7:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c010d0eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0ee:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d0f2:	8b 55 10             	mov    0x10(%ebp),%edx
c010d0f5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d0f9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d0fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d100:	89 04 24             	mov    %eax,(%esp)
c010d103:	e8 38 0c 00 00       	call   c010dd40 <arch_map>
}
c010d108:	c9                   	leave  
c010d109:	c3                   	ret    

c010d10a <vmm_unmap>:

int vmm_unmap(vmm_context_t *context, vaddr_t frame)
{
c010d10a:	55                   	push   %ebp
c010d10b:	89 e5                	mov    %esp,%ebp
c010d10d:	83 ec 18             	sub    $0x18,%esp
    return arch_unmap(&context->arch_context, frame);
c010d110:	8b 45 08             	mov    0x8(%ebp),%eax
c010d113:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d116:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d11a:	89 04 24             	mov    %eax,(%esp)
c010d11d:	e8 48 0d 00 00       	call   c010de6a <arch_unmap>
}
c010d122:	c9                   	leave  
c010d123:	c3                   	ret    

c010d124 <vmm_map_range>:

/**
 * Range
 */
int vmm_map_range(vmm_context_t *context, paddr_t pframe, vaddr_t vframe, int pages, uint8_t flags)
{
c010d124:	55                   	push   %ebp
c010d125:	89 e5                	mov    %esp,%ebp
c010d127:	53                   	push   %ebx
c010d128:	83 ec 34             	sub    $0x34,%esp
c010d12b:	8b 45 18             	mov    0x18(%ebp),%eax
c010d12e:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int p;
    for (p = 0; p < pages; ++p)
c010d131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d138:	eb 39                	jmp    c010d173 <vmm_map_range+0x4f>
    {
        vmm_map(context, pframe + PAGE_FRAME_ADDR(p), vframe + PAGE_FRAME_ADDR(p), flags);
c010d13a:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d13e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d141:	c1 e2 0c             	shl    $0xc,%edx
c010d144:	89 d1                	mov    %edx,%ecx
c010d146:	8b 55 10             	mov    0x10(%ebp),%edx
c010d149:	01 d1                	add    %edx,%ecx
c010d14b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d14e:	c1 e2 0c             	shl    $0xc,%edx
c010d151:	89 d3                	mov    %edx,%ebx
c010d153:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d156:	01 da                	add    %ebx,%edx
c010d158:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d15c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010d160:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d164:	8b 45 08             	mov    0x8(%ebp),%eax
c010d167:	89 04 24             	mov    %eax,(%esp)
c010d16a:	e8 6c ff ff ff       	call   c010d0db <vmm_map>
 * Range
 */
int vmm_map_range(vmm_context_t *context, paddr_t pframe, vaddr_t vframe, int pages, uint8_t flags)
{
    int p;
    for (p = 0; p < pages; ++p)
c010d16f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d173:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d176:	3b 45 14             	cmp    0x14(%ebp),%eax
c010d179:	7c bf                	jl     c010d13a <vmm_map_range+0x16>
    {
        vmm_map(context, pframe + PAGE_FRAME_ADDR(p), vframe + PAGE_FRAME_ADDR(p), flags);
    }
    return 0;
c010d17b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d180:	83 c4 34             	add    $0x34,%esp
c010d183:	5b                   	pop    %ebx
c010d184:	5d                   	pop    %ebp
c010d185:	c3                   	ret    

c010d186 <vmm_unmap_range>:

int vmm_unmap_range(vmm_context_t *context, vaddr_t frame, int pages)
{
c010d186:	55                   	push   %ebp
c010d187:	89 e5                	mov    %esp,%ebp
c010d189:	83 ec 28             	sub    $0x28,%esp
    int p;
    for(p = 0; p < pages; p++)
c010d18c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d193:	eb 20                	jmp    c010d1b5 <vmm_unmap_range+0x2f>
    {
        vmm_unmap(context, frame + PAGE_FRAME_ADDR(p));
c010d195:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d198:	c1 e0 0c             	shl    $0xc,%eax
c010d19b:	89 c2                	mov    %eax,%edx
c010d19d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1a0:	01 d0                	add    %edx,%eax
c010d1a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d1a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1a9:	89 04 24             	mov    %eax,(%esp)
c010d1ac:	e8 59 ff ff ff       	call   c010d10a <vmm_unmap>
}

int vmm_unmap_range(vmm_context_t *context, vaddr_t frame, int pages)
{
    int p;
    for(p = 0; p < pages; p++)
c010d1b1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d1b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d1b8:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d1bb:	7c d8                	jl     c010d195 <vmm_unmap_range+0xf>
    {
        vmm_unmap(context, frame + PAGE_FRAME_ADDR(p));
    }
    return 0;
c010d1bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d1c2:	c9                   	leave  
c010d1c3:	c3                   	ret    

c010d1c4 <vmm_automap_kernel>:

/**
 * Automap
 */
vaddr_t vmm_automap_kernel(vmm_context_t *context, paddr_t pframe, uint8_t flags)
{
c010d1c4:	55                   	push   %ebp
c010d1c5:	89 e5                	mov    %esp,%ebp
c010d1c7:	83 ec 48             	sub    $0x48,%esp
c010d1ca:	8b 45 10             	mov    0x10(%ebp),%eax
c010d1cd:	88 45 e4             	mov    %al,-0x1c(%ebp)
    vaddr_t vframe = arch_vaddr_find(&context->arch_context, 1,
c010d1d0:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010d1d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1d7:	89 54 24 10          	mov    %edx,0x10(%esp)
c010d1db:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c010d1e2:	ff 
c010d1e3:	c7 44 24 08 00 00 00 	movl   $0xc2000000,0x8(%esp)
c010d1ea:	c2 
c010d1eb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d1f2:	00 
c010d1f3:	89 04 24             	mov    %eax,(%esp)
c010d1f6:	e8 0f 0d 00 00       	call   c010df0a <arch_vaddr_find>
c010d1fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
                                     MEMORY_LAYOUT_RESERVED_AREA_END,
                                     MEMORY_LAYOUT_KERNEL_END, flags);
    vmm_map(context, pframe, vframe, flags | VMM_PRESENT);
c010d1fe:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d202:	83 c8 01             	or     $0x1,%eax
c010d205:	0f b6 c0             	movzbl %al,%eax
c010d208:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d20c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d20f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d213:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d216:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d21a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d21d:	89 04 24             	mov    %eax,(%esp)
c010d220:	e8 b6 fe ff ff       	call   c010d0db <vmm_map>

    return vframe;
c010d225:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d228:	c9                   	leave  
c010d229:	c3                   	ret    

c010d22a <vmm_automap_kernel_range>:

vaddr_t vmm_automap_kernel_range(vmm_context_t *context, paddr_t pframe, int pages, uint8_t flags)
{
c010d22a:	55                   	push   %ebp
c010d22b:	89 e5                	mov    %esp,%ebp
c010d22d:	83 ec 48             	sub    $0x48,%esp
c010d230:	8b 45 14             	mov    0x14(%ebp),%eax
c010d233:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int i;
    vaddr_t vaddr_start = arch_vaddr_find(&context->arch_context, pages, MEMORY_LAYOUT_RESERVED_AREA_END, MEMORY_LAYOUT_KERNEL_END, flags);
c010d236:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010d23a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d23d:	89 54 24 10          	mov    %edx,0x10(%esp)
c010d241:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c010d248:	ff 
c010d249:	c7 44 24 08 00 00 00 	movl   $0xc2000000,0x8(%esp)
c010d250:	c2 
c010d251:	8b 55 10             	mov    0x10(%ebp),%edx
c010d254:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d258:	89 04 24             	mov    %eax,(%esp)
c010d25b:	e8 aa 0c 00 00       	call   c010df0a <arch_vaddr_find>
c010d260:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for(i = 0; i < pages; i++)
c010d263:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d26a:	eb 45                	jmp    c010d2b1 <vmm_automap_kernel_range+0x87>
    {
        paddr_t paddr = pframe + i*PAGE_SIZE;
c010d26c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d26f:	c1 e0 0c             	shl    $0xc,%eax
c010d272:	89 c2                	mov    %eax,%edx
c010d274:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d277:	01 d0                	add    %edx,%eax
c010d279:	89 45 ec             	mov    %eax,-0x14(%ebp)
        vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
c010d27c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d27f:	c1 e0 0c             	shl    $0xc,%eax
c010d282:	89 c2                	mov    %eax,%edx
c010d284:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d287:	01 d0                	add    %edx,%eax
c010d289:	89 45 e8             	mov    %eax,-0x18(%ebp)
        vmm_map(context, paddr, vaddr, flags);
c010d28c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d290:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d294:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d297:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d29b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d29e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2a5:	89 04 24             	mov    %eax,(%esp)
c010d2a8:	e8 2e fe ff ff       	call   c010d0db <vmm_map>

vaddr_t vmm_automap_kernel_range(vmm_context_t *context, paddr_t pframe, int pages, uint8_t flags)
{
    int i;
    vaddr_t vaddr_start = arch_vaddr_find(&context->arch_context, pages, MEMORY_LAYOUT_RESERVED_AREA_END, MEMORY_LAYOUT_KERNEL_END, flags);
    for(i = 0; i < pages; i++)
c010d2ad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d2b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d2b4:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d2b7:	7c b3                	jl     c010d26c <vmm_automap_kernel_range+0x42>
        paddr_t paddr = pframe + i*PAGE_SIZE;
        vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
        vmm_map(context, paddr, vaddr, flags);
    }

    return vaddr_start;
c010d2b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d2bc:	c9                   	leave  
c010d2bd:	c3                   	ret    

c010d2be <vmm_automap_user>:

vaddr_t vmm_automap_user(vmm_context_t *context, paddr_t pframe, uint8_t flags)
{
c010d2be:	55                   	push   %ebp
c010d2bf:	89 e5                	mov    %esp,%ebp
c010d2c1:	83 ec 48             	sub    $0x48,%esp
c010d2c4:	8b 45 10             	mov    0x10(%ebp),%eax
c010d2c7:	88 45 e4             	mov    %al,-0x1c(%ebp)
    vaddr_t vframe = arch_vaddr_find(&context->arch_context, 1,
c010d2ca:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010d2ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2d1:	89 54 24 10          	mov    %edx,0x10(%esp)
c010d2d5:	c7 44 24 0c 00 00 00 	movl   $0xc0000000,0xc(%esp)
c010d2dc:	c0 
c010d2dd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d2e4:	00 
c010d2e5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d2ec:	00 
c010d2ed:	89 04 24             	mov    %eax,(%esp)
c010d2f0:	e8 15 0c 00 00       	call   c010df0a <arch_vaddr_find>
c010d2f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
                                     0x0, MEMORY_LAYOUT_KERNEL_START, flags);
    vmm_map(context, pframe, vframe, flags | VMM_PRESENT);
c010d2f8:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d2fc:	83 c8 01             	or     $0x1,%eax
c010d2ff:	0f b6 c0             	movzbl %al,%eax
c010d302:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d306:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d309:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d30d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d310:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d314:	8b 45 08             	mov    0x8(%ebp),%eax
c010d317:	89 04 24             	mov    %eax,(%esp)
c010d31a:	e8 bc fd ff ff       	call   c010d0db <vmm_map>

    return vframe;
c010d31f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d322:	c9                   	leave  
c010d323:	c3                   	ret    

c010d324 <vmm_automap_user_range>:

vaddr_t vmm_automap_user_range(vmm_context_t *context, paddr_t pframe, int pages, uint8_t flags)
{
c010d324:	55                   	push   %ebp
c010d325:	89 e5                	mov    %esp,%ebp
c010d327:	83 ec 48             	sub    $0x48,%esp
c010d32a:	8b 45 14             	mov    0x14(%ebp),%eax
c010d32d:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int i;
    vaddr_t vaddr_start = arch_vaddr_find(&context->arch_context, pages, 0x0, MEMORY_LAYOUT_KERNEL_START, flags);
c010d330:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010d334:	8b 45 08             	mov    0x8(%ebp),%eax
c010d337:	89 54 24 10          	mov    %edx,0x10(%esp)
c010d33b:	c7 44 24 0c 00 00 00 	movl   $0xc0000000,0xc(%esp)
c010d342:	c0 
c010d343:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d34a:	00 
c010d34b:	8b 55 10             	mov    0x10(%ebp),%edx
c010d34e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d352:	89 04 24             	mov    %eax,(%esp)
c010d355:	e8 b0 0b 00 00       	call   c010df0a <arch_vaddr_find>
c010d35a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for(i = 0; i < pages; i++)
c010d35d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d364:	eb 45                	jmp    c010d3ab <vmm_automap_user_range+0x87>
    {
        paddr_t paddr = pframe + i*PAGE_SIZE;
c010d366:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d369:	c1 e0 0c             	shl    $0xc,%eax
c010d36c:	89 c2                	mov    %eax,%edx
c010d36e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d371:	01 d0                	add    %edx,%eax
c010d373:	89 45 ec             	mov    %eax,-0x14(%ebp)
        vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
c010d376:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d379:	c1 e0 0c             	shl    $0xc,%eax
c010d37c:	89 c2                	mov    %eax,%edx
c010d37e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d381:	01 d0                	add    %edx,%eax
c010d383:	89 45 e8             	mov    %eax,-0x18(%ebp)
        vmm_map(context, paddr, vaddr, flags);
c010d386:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010d38a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d38e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d391:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d395:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d398:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d39c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d39f:	89 04 24             	mov    %eax,(%esp)
c010d3a2:	e8 34 fd ff ff       	call   c010d0db <vmm_map>

vaddr_t vmm_automap_user_range(vmm_context_t *context, paddr_t pframe, int pages, uint8_t flags)
{
    int i;
    vaddr_t vaddr_start = arch_vaddr_find(&context->arch_context, pages, 0x0, MEMORY_LAYOUT_KERNEL_START, flags);
    for(i = 0; i < pages; i++)
c010d3a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d3ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d3ae:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d3b1:	7c b3                	jl     c010d366 <vmm_automap_user_range+0x42>
        paddr_t paddr = pframe + i*PAGE_SIZE;
        vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
        vmm_map(context, paddr, vaddr, flags);
    }

    return vaddr_start;
c010d3b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d3b6:	c9                   	leave  
c010d3b7:	c3                   	ret    

c010d3b8 <alloc_memory>:

void alloc_memory(struct cpu_state **cpu)
{
c010d3b8:	55                   	push   %ebp
c010d3b9:	89 e5                	mov    %esp,%ebp
c010d3bb:	83 ec 48             	sub    $0x48,%esp
    int pages = (*cpu)->CPU_ARG1;
c010d3be:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3c1:	8b 00                	mov    (%eax),%eax
c010d3c3:	8b 40 1c             	mov    0x1c(%eax),%eax
c010d3c6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    uint32_t *dest = (uint32_t *)arch_vaddr_find(&current_context->arch_context, pages, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c010d3c9:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d3ce:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
c010d3d5:	00 
c010d3d6:	c7 44 24 0c 00 00 00 	movl   $0xb0000000,0xc(%esp)
c010d3dd:	b0 
c010d3de:	c7 44 24 08 00 00 00 	movl   $0xa0000000,0x8(%esp)
c010d3e5:	a0 
c010d3e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d3e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d3ed:	89 04 24             	mov    %eax,(%esp)
c010d3f0:	e8 15 0b 00 00       	call   c010df0a <arch_vaddr_find>
c010d3f5:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int i;
    for(i = 0; i < pages; i++)
c010d3f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d3ff:	eb 3f                	jmp    c010d440 <alloc_memory+0x88>
    {
        uint32_t *paddr = (uint32_t *)pmm_alloc_page();
c010d401:	e8 c3 21 00 00       	call   c010f5c9 <pmm_alloc_page>
c010d406:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t *vaddr = dest + i*PAGE_SIZE;
c010d409:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d40c:	c1 e0 0e             	shl    $0xe,%eax
c010d40f:	89 c2                	mov    %eax,%edx
c010d411:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d414:	01 d0                	add    %edx,%eax
c010d416:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        vmm_map(current_context, (paddr_t)paddr, (vaddr_t)vaddr, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c010d419:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010d41c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d41f:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d424:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c010d42b:	00 
c010d42c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010d430:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d434:	89 04 24             	mov    %eax,(%esp)
c010d437:	e8 9f fc ff ff       	call   c010d0db <vmm_map>
    int pages = (*cpu)->CPU_ARG1;

    uint32_t *dest = (uint32_t *)arch_vaddr_find(&current_context->arch_context, pages, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);

    int i;
    for(i = 0; i < pages; i++)
c010d43c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d440:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d443:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d446:	7c b9                	jl     c010d401 <alloc_memory+0x49>
    {
        uint32_t *paddr = (uint32_t *)pmm_alloc_page();
        uint32_t *vaddr = dest + i*PAGE_SIZE;
        vmm_map(current_context, (paddr_t)paddr, (vaddr_t)vaddr, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
    }
    (*cpu)->CPU_ARG0 = (uint32_t)dest;
c010d448:	8b 45 08             	mov    0x8(%ebp),%eax
c010d44b:	8b 00                	mov    (%eax),%eax
c010d44d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d450:	89 50 28             	mov    %edx,0x28(%eax)
}
c010d453:	c9                   	leave  
c010d454:	c3                   	ret    

c010d455 <sys_brk>:


extern struct thread_state* current_thread;

void sys_brk(struct cpu_state **cpu)
{
c010d455:	55                   	push   %ebp
c010d456:	89 e5                	mov    %esp,%ebp
c010d458:	83 ec 48             	sub    $0x48,%esp
    uint32_t new_bss_top = (*cpu)->CPU_ARG1;
c010d45b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d45e:	8b 00                	mov    (%eax),%eax
c010d460:	8b 40 1c             	mov    0x1c(%eax),%eax
c010d463:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t heap_top = current_thread->process->heap_top;
c010d466:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010d46b:	8b 40 04             	mov    0x4(%eax),%eax
c010d46e:	8b 40 40             	mov    0x40(%eax),%eax
c010d471:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(new_bss_top == 0)
c010d474:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d478:	75 10                	jne    c010d48a <sys_brk+0x35>
    {
        (*cpu)->CPU_ARG0 = heap_top; 
c010d47a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d47d:	8b 00                	mov    (%eax),%eax
c010d47f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d482:	89 50 28             	mov    %edx,0x28(%eax)
c010d485:	e9 16 01 00 00       	jmp    c010d5a0 <sys_brk+0x14b>
    }
    else if(new_bss_top > current_thread->process->heap_upper_limit || new_bss_top < current_thread->process->heap_lower_limit)
c010d48a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010d48f:	8b 40 04             	mov    0x4(%eax),%eax
c010d492:	8b 40 48             	mov    0x48(%eax),%eax
c010d495:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d498:	72 10                	jb     c010d4aa <sys_brk+0x55>
c010d49a:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010d49f:	8b 40 04             	mov    0x4(%eax),%eax
c010d4a2:	8b 40 44             	mov    0x44(%eax),%eax
c010d4a5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d4a8:	76 11                	jbe    c010d4bb <sys_brk+0x66>
    {
        (*cpu)->CPU_ARG0 = 0; 
c010d4aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4ad:	8b 00                	mov    (%eax),%eax
c010d4af:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c010d4b6:	e9 e5 00 00 00       	jmp    c010d5a0 <sys_brk+0x14b>
    }
    else if(new_bss_top > (heap_top|0x00000FFF))
c010d4bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4be:	0d ff 0f 00 00       	or     $0xfff,%eax
c010d4c3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d4c6:	0f 83 c1 00 00 00    	jae    c010d58d <sys_brk+0x138>
    {
        int req_memory = new_bss_top-((heap_top|0x00000FFF));
c010d4cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4cf:	89 c2                	mov    %eax,%edx
c010d4d1:	81 ca ff 0f 00 00    	or     $0xfff,%edx
c010d4d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d4da:	29 d0                	sub    %edx,%eax
c010d4dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int pages = 1+(req_memory/PAGE_SIZE);
c010d4df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d4e2:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c010d4e8:	85 c0                	test   %eax,%eax
c010d4ea:	0f 48 c2             	cmovs  %edx,%eax
c010d4ed:	c1 f8 0c             	sar    $0xc,%eax
c010d4f0:	83 c0 01             	add    $0x1,%eax
c010d4f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(req_memory%PAGE_SIZE)
c010d4f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d4f9:	25 ff 0f 00 00       	and    $0xfff,%eax
c010d4fe:	85 c0                	test   %eax,%eax
c010d500:	74 04                	je     c010d506 <sys_brk+0xb1>
            pages++;
c010d502:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

        heap_top = arch_vaddr_find(&current_context->arch_context, pages, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c010d506:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d50b:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
c010d512:	00 
c010d513:	c7 44 24 0c 00 00 00 	movl   $0xb0000000,0xc(%esp)
c010d51a:	b0 
c010d51b:	c7 44 24 08 00 00 00 	movl   $0xa0000000,0x8(%esp)
c010d522:	a0 
c010d523:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d526:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d52a:	89 04 24             	mov    %eax,(%esp)
c010d52d:	e8 d8 09 00 00       	call   c010df0a <arch_vaddr_find>
c010d532:	89 45 f4             	mov    %eax,-0xc(%ebp)
        int i;
        for(i = 0; i < pages; i++)
c010d535:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010d53c:	eb 3f                	jmp    c010d57d <sys_brk+0x128>
        {
            paddr_t paddr = pmm_alloc_page();
c010d53e:	e8 86 20 00 00       	call   c010f5c9 <pmm_alloc_page>
c010d543:	89 45 e0             	mov    %eax,-0x20(%ebp)
            vaddr_t vaddr = heap_top + i*PAGE_SIZE;
c010d546:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d549:	c1 e0 0c             	shl    $0xc,%eax
c010d54c:	89 c2                	mov    %eax,%edx
c010d54e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d551:	01 d0                	add    %edx,%eax
c010d553:	89 45 dc             	mov    %eax,-0x24(%ebp)
            vmm_map(current_context, paddr, vaddr, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
c010d556:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d55b:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c010d562:	00 
c010d563:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010d566:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d56a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d56d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d571:	89 04 24             	mov    %eax,(%esp)
c010d574:	e8 62 fb ff ff       	call   c010d0db <vmm_map>
        if(req_memory%PAGE_SIZE)
            pages++;

        heap_top = arch_vaddr_find(&current_context->arch_context, pages, MEMORY_LAYOUT_USER_HEAP_START, MEMORY_LAYOUT_USER_HEAP_END, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
        int i;
        for(i = 0; i < pages; i++)
c010d579:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010d57d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d580:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d583:	7c b9                	jl     c010d53e <sys_brk+0xe9>
            paddr_t paddr = pmm_alloc_page();
            vaddr_t vaddr = heap_top + i*PAGE_SIZE;
            vmm_map(current_context, paddr, vaddr, VMM_PRESENT|VMM_WRITABLE|VMM_USER);
        }

        heap_top += req_memory;
c010d585:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d588:	01 45 f4             	add    %eax,-0xc(%ebp)
c010d58b:	eb 13                	jmp    c010d5a0 <sys_brk+0x14b>
    }
    else if(new_bss_top < (heap_top^0xFFFFF000))
c010d58d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d590:	35 00 f0 ff ff       	xor    $0xfffff000,%eax
c010d595:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d598:	77 06                	ja     c010d5a0 <sys_brk+0x14b>
    {
        //todo Free
    }
    else
        heap_top = new_bss_top;
c010d59a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d59d:	89 45 f4             	mov    %eax,-0xc(%ebp)


    current_thread->process->heap_top = heap_top;
c010d5a0:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010d5a5:	8b 40 04             	mov    0x4(%eax),%eax
c010d5a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d5ab:	89 50 40             	mov    %edx,0x40(%eax)
    (*cpu)->CPU_ARG0 = heap_top; 
c010d5ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5b1:	8b 00                	mov    (%eax),%eax
c010d5b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d5b6:	89 50 28             	mov    %edx,0x28(%eax)
c010d5b9:	c9                   	leave  
c010d5ba:	c3                   	ret    

c010d5bb <INIT_HEAP>:
#include <string.h>

static alloc_t *first_node = NULL;

void INIT_HEAP(void)
{
c010d5bb:	55                   	push   %ebp
c010d5bc:	89 e5                	mov    %esp,%ebp
    // nothing to do here :)
}
c010d5be:	5d                   	pop    %ebp
c010d5bf:	c3                   	ret    

c010d5c0 <heap_add>:
 * add an inode to the list
 *
 * @param inode node to add
 */
void heap_add(alloc_t *inode)
{
c010d5c0:	55                   	push   %ebp
c010d5c1:	89 e5                	mov    %esp,%ebp
    inode->next = first_node;
c010d5c3:	8b 15 3c 80 11 c0    	mov    0xc011803c,%edx
c010d5c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5cc:	89 50 0c             	mov    %edx,0xc(%eax)
    first_node = inode;
c010d5cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5d2:	a3 3c 80 11 c0       	mov    %eax,0xc011803c
}
c010d5d7:	5d                   	pop    %ebp
c010d5d8:	c3                   	ret    

c010d5d9 <heap_expand>:
 *
 * @param pages number of pages to allocate
 * @return allocation inode
 */
alloc_t *heap_expand(int pages)
{
c010d5d9:	55                   	push   %ebp
c010d5da:	89 e5                	mov    %esp,%ebp
c010d5dc:	83 ec 48             	sub    $0x48,%esp
#ifdef HEAP_DEBUG
    printf("heap_expand(): add %d pages...\n", pages);
#endif

    // allocate memory
    paddr_t pframe = 0;
c010d5df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    vaddr_t vframe = arch_vaddr_find(&current_context->arch_context, pages,
c010d5e6:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d5eb:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010d5f2:	00 
c010d5f3:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c010d5fa:	ff 
c010d5fb:	c7 44 24 08 00 00 00 	movl   $0xe0000000,0x8(%esp)
c010d602:	e0 
c010d603:	8b 55 08             	mov    0x8(%ebp),%edx
c010d606:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d60a:	89 04 24             	mov    %eax,(%esp)
c010d60d:	e8 f8 08 00 00       	call   c010df0a <arch_vaddr_find>
c010d612:	89 45 e8             	mov    %eax,-0x18(%ebp)
                                     MEMORY_LAYOUT_KERNEL_HEAP_START,
                                     MEMORY_LAYOUT_KERNEL_HEAP_END, VMM_WRITABLE);
    vaddr_t vframe_cur = vframe;
c010d615:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d618:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int i;
    for(i = 0; i < pages; i++)
c010d61b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010d622:	eb 36                	jmp    c010d65a <heap_expand+0x81>
    {
        pframe = pmm_alloc_page();
c010d624:	e8 a0 1f 00 00       	call   c010f5c9 <pmm_alloc_page>
c010d629:	89 45 ec             	mov    %eax,-0x14(%ebp)
        vmm_map(current_context, pframe, vframe_cur, VMM_WRITABLE);
c010d62c:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010d631:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010d638:	00 
c010d639:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d63c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d640:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d643:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d647:	89 04 24             	mov    %eax,(%esp)
c010d64a:	e8 8c fa ff ff       	call   c010d0db <vmm_map>
        vframe_cur += PAGE_SIZE;
c010d64f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
                                     MEMORY_LAYOUT_KERNEL_HEAP_START,
                                     MEMORY_LAYOUT_KERNEL_HEAP_END, VMM_WRITABLE);
    vaddr_t vframe_cur = vframe;

    int i;
    for(i = 0; i < pages; i++)
c010d656:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010d65a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d65d:	3b 45 08             	cmp    0x8(%ebp),%eax
c010d660:	7c c2                	jl     c010d624 <heap_expand+0x4b>
        vmm_map(current_context, pframe, vframe_cur, VMM_WRITABLE);
        vframe_cur += PAGE_SIZE;
    }

    // create inode
    alloc_t *new_header = (alloc_t *) vframe;
c010d662:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d665:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    new_header->size = pages*PAGE_SIZE - sizeof(alloc_t);
c010d668:	8b 45 08             	mov    0x8(%ebp),%eax
c010d66b:	c1 e0 0c             	shl    $0xc,%eax
c010d66e:	8d 50 f0             	lea    -0x10(%eax),%edx
c010d671:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d674:	89 10                	mov    %edx,(%eax)
    new_header->base = vframe + sizeof(alloc_t);
c010d676:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d679:	8d 50 10             	lea    0x10(%eax),%edx
c010d67c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d67f:	89 50 04             	mov    %edx,0x4(%eax)
    new_header->status = HEAP_STATUS_FREE;
c010d682:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d685:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

    heap_add(new_header);
c010d68c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d68f:	89 04 24             	mov    %eax,(%esp)
c010d692:	e8 29 ff ff ff       	call   c010d5c0 <heap_add>

    return new_header;
c010d697:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c010d69a:	c9                   	leave  
c010d69b:	c3                   	ret    

c010d69c <malloc>:
 *
 * @param size number of bytes
 * @return pointer to reserved bytes
 */
void *malloc(size_t bytes)
{
c010d69c:	55                   	push   %ebp
c010d69d:	89 e5                	mov    %esp,%ebp
c010d69f:	83 ec 28             	sub    $0x28,%esp
    alloc_t *header = first_node;
c010d6a2:	a1 3c 80 11 c0       	mov    0xc011803c,%eax
c010d6a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //vaddr_t data = 0;         // currently unused, maybe useless (someone check this please)
    int n_size = bytes + sizeof(alloc_t);
c010d6aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6ad:	83 c0 10             	add    $0x10,%eax
c010d6b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // go through all inodes...
    while(header != NULL)
c010d6b3:	e9 87 00 00 00       	jmp    c010d73f <malloc+0xa3>
    {
        // fits the size?
        if(header->size >= bytes && header->status == HEAP_STATUS_FREE)
c010d6b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6bb:	8b 00                	mov    (%eax),%eax
c010d6bd:	3b 45 08             	cmp    0x8(%ebp),%eax
c010d6c0:	72 74                	jb     c010d736 <malloc+0x9a>
c010d6c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6c5:	8b 40 08             	mov    0x8(%eax),%eax
c010d6c8:	83 f8 01             	cmp    $0x1,%eax
c010d6cb:	75 69                	jne    c010d736 <malloc+0x9a>
        {
            // mark as used
            header->status = HEAP_STATUS_USED;
c010d6cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6d0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

            // if something is left, split it down
            if(header->size > n_size)
c010d6d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6da:	8b 10                	mov    (%eax),%edx
c010d6dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6df:	39 c2                	cmp    %eax,%edx
c010d6e1:	76 4b                	jbe    c010d72e <malloc+0x92>
            {
                alloc_t *new_header = (alloc_t *)(header->base + bytes);
c010d6e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6e6:	8b 50 04             	mov    0x4(%eax),%edx
c010d6e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6ec:	01 d0                	add    %edx,%eax
c010d6ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
                new_header->base    = header->base + n_size;
c010d6f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6f4:	8b 50 04             	mov    0x4(%eax),%edx
c010d6f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6fa:	01 c2                	add    %eax,%edx
c010d6fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6ff:	89 50 04             	mov    %edx,0x4(%eax)
                new_header->size = header->size - n_size;
c010d702:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d705:	8b 10                	mov    (%eax),%edx
c010d707:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d70a:	29 c2                	sub    %eax,%edx
c010d70c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d70f:	89 10                	mov    %edx,(%eax)
                new_header->status = HEAP_STATUS_FREE;
c010d711:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d714:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                header->size = bytes;
c010d71b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d71e:	8b 55 08             	mov    0x8(%ebp),%edx
c010d721:	89 10                	mov    %edx,(%eax)

                heap_add(new_header);
c010d723:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d726:	89 04 24             	mov    %eax,(%esp)
c010d729:	e8 92 fe ff ff       	call   c010d5c0 <heap_add>
            }

            return (void*) header->base;
c010d72e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d731:	8b 40 04             	mov    0x4(%eax),%eax
c010d734:	eb 4b                	jmp    c010d781 <malloc+0xe5>
        }

        header = header->next;
c010d736:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d739:	8b 40 0c             	mov    0xc(%eax),%eax
c010d73c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    alloc_t *header = first_node;
    //vaddr_t data = 0;         // currently unused, maybe useless (someone check this please)
    int n_size = bytes + sizeof(alloc_t);

    // go through all inodes...
    while(header != NULL)
c010d73f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d743:	0f 85 6f ff ff ff    	jne    c010d6b8 <malloc+0x1c>

        header = header->next;
    }

    // if nothing found, create new stuff...
    header = heap_expand(NUM_PAGES(n_size));
c010d749:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d74c:	05 ff 0f 00 00       	add    $0xfff,%eax
c010d751:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d756:	c1 e8 0c             	shr    $0xc,%eax
c010d759:	89 04 24             	mov    %eax,(%esp)
c010d75c:	e8 78 fe ff ff       	call   c010d5d9 <heap_expand>
c010d761:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(header != NULL)
c010d764:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d768:	74 12                	je     c010d77c <malloc+0xe0>
    {
        header->status = HEAP_STATUS_USED;
c010d76a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d76d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        return (void *)header->base;
c010d774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d777:	8b 40 04             	mov    0x4(%eax),%eax
c010d77a:	eb 05                	jmp    c010d781 <malloc+0xe5>
#ifdef HEAP_DEBUG
    printf("malloc(): reserving %d bytes of memory: %p - %p\n", header->size, data, data + header->size);
#endif

    // no more memory :'(
    return NULL;
c010d77c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d781:	c9                   	leave  
c010d782:	c3                   	ret    

c010d783 <free>:
 * Free a range of bytes in th heap
 *
 * @param ptr pointer
 */
void free(void *ptr)
{
c010d783:	55                   	push   %ebp
c010d784:	89 e5                	mov    %esp,%ebp
c010d786:	83 ec 10             	sub    $0x10,%esp
    // calculate inode adress
    alloc_t *header = (alloc_t*)((uintptr_t)ptr - sizeof(alloc_t));
c010d789:	8b 45 08             	mov    0x8(%ebp),%eax
c010d78c:	83 e8 10             	sub    $0x10,%eax
c010d78f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // mark as free
    header->status = HEAP_STATUS_FREE;
c010d792:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d795:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

#ifdef HEAP_DEBUG
    printf("free(): freeing %d bytes of memory: %p - %p\n", header->size, ptr, ptr + header->size);
#endif
}
c010d79c:	c9                   	leave  
c010d79d:	c3                   	ret    

c010d79e <calloc>:
 * @param size size of one block
 *
 * @return pointer to allocated memory
 */
void *calloc(size_t num, size_t size)
{
c010d79e:	55                   	push   %ebp
c010d79f:	89 e5                	mov    %esp,%ebp
c010d7a1:	83 ec 28             	sub    $0x28,%esp
    size_t bytes = num * size;
c010d7a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7a7:	0f af 45 0c          	imul   0xc(%ebp),%eax
c010d7ab:	89 45 f4             	mov    %eax,-0xc(%ebp)

    void *data = malloc(bytes);
c010d7ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7b1:	89 04 24             	mov    %eax,(%esp)
c010d7b4:	e8 e3 fe ff ff       	call   c010d69c <malloc>
c010d7b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset(data, 0, bytes);
c010d7bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7bf:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d7c3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d7ca:	00 
c010d7cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7ce:	89 04 24             	mov    %eax,(%esp)
c010d7d1:	e8 9f 57 ff ff       	call   c0102f75 <memset>

    return data;
c010d7d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d7d9:	c9                   	leave  
c010d7da:	c3                   	ret    

c010d7db <realloc>:
 * @param size new size
 *
 * @return new pointer
 */
void *realloc(void *ptr, size_t size)
{
c010d7db:	55                   	push   %ebp
c010d7dc:	89 e5                	mov    %esp,%ebp
c010d7de:	83 ec 28             	sub    $0x28,%esp
    void *dest = malloc(size);
c010d7e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7e4:	89 04 24             	mov    %eax,(%esp)
c010d7e7:	e8 b0 fe ff ff       	call   c010d69c <malloc>
c010d7ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    alloc_t *source_alloc = (alloc_t*)((uintptr_t)ptr - sizeof(alloc_t));
c010d7ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7f2:	83 e8 10             	sub    $0x10,%eax
c010d7f5:	89 45 f0             	mov    %eax,-0x10(%ebp)

#ifdef HEAP_DEBUG
    printf("realloc(): copying %d bytes from 0x%x to 0x%x\n", source_alloc->size, ptr, dest);
#endif

    if(source_alloc->size < size)
c010d7f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7fb:	8b 00                	mov    (%eax),%eax
c010d7fd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d800:	73 1b                	jae    c010d81d <realloc+0x42>
    {
        memcpy(dest, ptr, source_alloc->size);
c010d802:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d805:	8b 00                	mov    (%eax),%eax
c010d807:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d80b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d80e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d812:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d815:	89 04 24             	mov    %eax,(%esp)
c010d818:	e8 e2 55 ff ff       	call   c0102dff <memcpy>
    }

    free(ptr);
c010d81d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d820:	89 04 24             	mov    %eax,(%esp)
c010d823:	e8 5b ff ff ff       	call   c010d783 <free>

    return dest;
c010d828:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d82b:	c9                   	leave  
c010d82c:	c3                   	ret    

c010d82d <ARCH_INIT_PAGING>:
 *
 * @param void
 * @return void
 */
void ARCH_INIT_PAGING(struct multiboot_struct *mb_info)
{
c010d82d:	55                   	push   %ebp
c010d82e:	89 e5                	mov    %esp,%ebp
c010d830:	83 ec 48             	sub    $0x48,%esp
    paddr_t pframe = pmm_alloc_page_limit(0);
c010d833:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010d83a:	e8 c7 1d 00 00       	call   c010f606 <pmm_alloc_page_limit>
c010d83f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr_t vframe = MEMORY_LAYOUT_PAGING_STRUCTURES_START;
c010d842:	c7 45 e8 00 00 80 ff 	movl   $0xff800000,-0x18(%ebp)

    kernel_context.arch_context.phys_addr = pframe;
c010d849:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d84c:	a3 4c a0 11 c0       	mov    %eax,0xc011a04c
    kernel_context.arch_context.entries = (pde_t *) pframe + MEMORY_LAYOUT_KERNEL_START;
c010d851:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d854:	a3 48 a0 11 c0       	mov    %eax,0xc011a048
    memset(kernel_context.arch_context.entries, 0, PAGE_SIZE);
c010d859:	a1 48 a0 11 c0       	mov    0xc011a048,%eax
c010d85e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010d865:	00 
c010d866:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d86d:	00 
c010d86e:	89 04 24             	mov    %eax,(%esp)
c010d871:	e8 ff 56 ff ff       	call   c0102f75 <memset>

    kernel_context.arch_context.entries[PDE_INDEX(vframe)] = pframe | VMM_WRITABLE | VMM_PRESENT;
c010d876:	a1 48 a0 11 c0       	mov    0xc011a048,%eax
c010d87b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d87e:	c1 ea 16             	shr    $0x16,%edx
c010d881:	c1 e2 02             	shl    $0x2,%edx
c010d884:	01 d0                	add    %edx,%eax
c010d886:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d889:	83 ca 03             	or     $0x3,%edx
c010d88c:	89 10                	mov    %edx,(%eax)
    vmm_map_range(&kernel_context, 0, MEMORY_LAYOUT_KERNEL_START, MEMORY_LAYOUT_DIRECT_MAPPED/PAGE_SIZE, VMM_WRITABLE);// kernel
c010d88e:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010d895:	00 
c010d896:	c7 44 24 0c 00 20 00 	movl   $0x2000,0xc(%esp)
c010d89d:	00 
c010d89e:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
c010d8a5:	c0 
c010d8a6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d8ad:	00 
c010d8ae:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d8b5:	e8 6a f8 ff ff       	call   c010d124 <vmm_map_range>
    vmm_map(&kernel_context, 0xB8000, 0xC00B8000, VMM_WRITABLE);// videomemory (0xB8000 - 0xBFFFF)
c010d8ba:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010d8c1:	00 
c010d8c2:	c7 44 24 08 00 80 0b 	movl   $0xc00b8000,0x8(%esp)
c010d8c9:	c0 
c010d8ca:	c7 44 24 04 00 80 0b 	movl   $0xb8000,0x4(%esp)
c010d8d1:	00 
c010d8d2:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d8d9:	e8 fd f7 ff ff       	call   c010d0db <vmm_map>
    // multiboot
    vmm_map(&kernel_context, ((vaddr_t)mb_info & (~0xfff)) - MEMORY_LAYOUT_KERNEL_START, ((paddr_t)mb_info&(~0xfff)), VMM_WRITABLE);
c010d8de:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8e1:	89 c2                	mov    %eax,%edx
c010d8e3:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c010d8e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d8f1:	05 00 00 00 40       	add    $0x40000000,%eax
c010d8f6:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010d8fd:	00 
c010d8fe:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d902:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d906:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d90d:	e8 c9 f7 ff ff       	call   c010d0db <vmm_map>
    vmm_map(&kernel_context, (mb_info->mods_addr & (~0xfff)) - MEMORY_LAYOUT_KERNEL_START, mb_info->mods_addr & (~0xfff), VMM_WRITABLE);
c010d912:	8b 45 08             	mov    0x8(%ebp),%eax
c010d915:	8b 40 18             	mov    0x18(%eax),%eax
c010d918:	89 c2                	mov    %eax,%edx
c010d91a:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c010d920:	8b 45 08             	mov    0x8(%ebp),%eax
c010d923:	8b 40 18             	mov    0x18(%eax),%eax
c010d926:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d92b:	05 00 00 00 40       	add    $0x40000000,%eax
c010d930:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010d937:	00 
c010d938:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d93c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d940:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d947:	e8 8f f7 ff ff       	call   c010d0db <vmm_map>

    int i;
    uintptr_t addr;
    struct mods_add *modules = (void*) mb_info->mods_addr;
c010d94c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d94f:	8b 40 18             	mov    0x18(%eax),%eax
c010d952:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    for(i = 0; i < mb_info->mods_count; i++)
c010d955:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d95c:	eb 5b                	jmp    c010d9b9 <ARCH_INIT_PAGING+0x18c>
    {
        addr = modules[i].mod_start & (~0xfff);
c010d95e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d961:	89 c2                	mov    %eax,%edx
c010d963:	c1 e2 04             	shl    $0x4,%edx
c010d966:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d969:	01 d0                	add    %edx,%eax
c010d96b:	8b 00                	mov    (%eax),%eax
c010d96d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d972:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while(addr < modules[i].mod_end)
c010d975:	eb 29                	jmp    c010d9a0 <ARCH_INIT_PAGING+0x173>
        {
            vmm_map(&kernel_context, addr, addr, VMM_PRESENT | VMM_WRITABLE);
c010d977:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
c010d97e:	00 
c010d97f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d982:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d986:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d989:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d98d:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d994:	e8 42 f7 ff ff       	call   c010d0db <vmm_map>
            addr += PAGE_SIZE;
c010d999:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
    uintptr_t addr;
    struct mods_add *modules = (void*) mb_info->mods_addr;
    for(i = 0; i < mb_info->mods_count; i++)
    {
        addr = modules[i].mod_start & (~0xfff);
        while(addr < modules[i].mod_end)
c010d9a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9a3:	89 c2                	mov    %eax,%edx
c010d9a5:	c1 e2 04             	shl    $0x4,%edx
c010d9a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d9ab:	01 d0                	add    %edx,%eax
c010d9ad:	8b 40 04             	mov    0x4(%eax),%eax
c010d9b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d9b3:	77 c2                	ja     c010d977 <ARCH_INIT_PAGING+0x14a>
    vmm_map(&kernel_context, (mb_info->mods_addr & (~0xfff)) - MEMORY_LAYOUT_KERNEL_START, mb_info->mods_addr & (~0xfff), VMM_WRITABLE);

    int i;
    uintptr_t addr;
    struct mods_add *modules = (void*) mb_info->mods_addr;
    for(i = 0; i < mb_info->mods_count; i++)
c010d9b5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d9b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d9bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9bf:	8b 40 14             	mov    0x14(%eax),%eax
c010d9c2:	39 c2                	cmp    %eax,%edx
c010d9c4:	72 98                	jb     c010d95e <ARCH_INIT_PAGING+0x131>
            vmm_map(&kernel_context, addr, addr, VMM_PRESENT | VMM_WRITABLE);
            addr += PAGE_SIZE;
        }
    }

    void *pd_vaddr = (void *) vmm_automap_kernel(&kernel_context, pframe, VMM_WRITABLE);
c010d9c6:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010d9cd:	00 
c010d9ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d9d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d9d5:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d9dc:	e8 e3 f7 ff ff       	call   c010d1c4 <vmm_automap_kernel>
c010d9e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    kernel_context.arch_context.entries = pd_vaddr;
c010d9e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d9e7:	a3 48 a0 11 c0       	mov    %eax,0xc011a048

    arch_switch_context(&kernel_context.arch_context);
c010d9ec:	c7 04 24 48 a0 11 c0 	movl   $0xc011a048,(%esp)
c010d9f3:	e8 b7 06 00 00       	call   c010e0af <arch_switch_context>
    current_context = &kernel_context;
c010d9f8:	c7 05 38 80 11 c0 48 	movl   $0xc011a048,0xc0118038
c010d9ff:	a0 11 c0 
}
c010da02:	c9                   	leave  
c010da03:	c3                   	ret    

c010da04 <arch_vmm_create_context>:
 *
 * @param void
 * @return new pagedirectory
 */
void arch_vmm_create_context(arch_vmm_context_t *context)
{
c010da04:	55                   	push   %ebp
c010da05:	89 e5                	mov    %esp,%ebp
c010da07:	83 ec 28             	sub    $0x28,%esp
    uintptr_t paddr = (uintptr_t) pmm_alloc_page();
c010da0a:	e8 ba 1b 00 00       	call   c010f5c9 <pmm_alloc_page>
c010da0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t vaddr = vmm_automap_kernel(current_context, paddr, VMM_PRESENT | VMM_WRITABLE);
c010da12:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010da17:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010da1e:	00 
c010da1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010da22:	89 54 24 04          	mov    %edx,0x4(%esp)
c010da26:	89 04 24             	mov    %eax,(%esp)
c010da29:	e8 96 f7 ff ff       	call   c010d1c4 <vmm_automap_kernel>
c010da2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memset((void*)vaddr, 0, PAGE_SIZE);
c010da31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da34:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010da3b:	00 
c010da3c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010da43:	00 
c010da44:	89 04 24             	mov    %eax,(%esp)
c010da47:	e8 29 55 ff ff       	call   c0102f75 <memset>

    context->entries = (pde_t *) vaddr;
c010da4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010da4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010da52:	89 10                	mov    %edx,(%eax)
    context->phys_addr = paddr;
c010da54:	8b 45 08             	mov    0x8(%ebp),%eax
c010da57:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010da5a:	89 50 04             	mov    %edx,0x4(%eax)

    arch_update_context(context);
c010da5d:	8b 45 08             	mov    0x8(%ebp),%eax
c010da60:	89 04 24             	mov    %eax,(%esp)
c010da63:	e8 68 01 00 00       	call   c010dbd0 <arch_update_context>
}
c010da68:	c9                   	leave  
c010da69:	c3                   	ret    

c010da6a <arch_vmm_destroy_context>:

 * @param pd pagedirectory to destroy
 * @return void
 */
void arch_vmm_destroy_context(arch_vmm_context_t *context)
{
c010da6a:	55                   	push   %ebp
c010da6b:	89 e5                	mov    %esp,%ebp
c010da6d:	83 ec 28             	sub    $0x28,%esp
    int pt;
    for (pt = 0; pt < PD_LENGTH; ++pt)
c010da70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010da77:	eb 31                	jmp    c010daaa <arch_vmm_destroy_context+0x40>
    {
        if (context->entries[pt] & VMM_PRESENT)
c010da79:	8b 45 08             	mov    0x8(%ebp),%eax
c010da7c:	8b 00                	mov    (%eax),%eax
c010da7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010da81:	c1 e2 02             	shl    $0x2,%edx
c010da84:	01 d0                	add    %edx,%eax
c010da86:	8b 00                	mov    (%eax),%eax
c010da88:	83 e0 01             	and    $0x1,%eax
c010da8b:	85 c0                	test   %eax,%eax
c010da8d:	74 17                	je     c010daa6 <arch_vmm_destroy_context+0x3c>
        {
            pmm_mark_page_as_free((paddr_t)context->entries[pt]);
c010da8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010da92:	8b 00                	mov    (%eax),%eax
c010da94:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010da97:	c1 e2 02             	shl    $0x2,%edx
c010da9a:	01 d0                	add    %edx,%eax
c010da9c:	8b 00                	mov    (%eax),%eax
c010da9e:	89 04 24             	mov    %eax,(%esp)
c010daa1:	e8 ed 17 00 00       	call   c010f293 <pmm_mark_page_as_free>
 * @return void
 */
void arch_vmm_destroy_context(arch_vmm_context_t *context)
{
    int pt;
    for (pt = 0; pt < PD_LENGTH; ++pt)
c010daa6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010daaa:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010dab1:	7e c6                	jle    c010da79 <arch_vmm_destroy_context+0xf>
        if (context->entries[pt] & VMM_PRESENT)
        {
            pmm_mark_page_as_free((paddr_t)context->entries[pt]);
        }
    }
    pmm_mark_page_as_free((paddr_t)context->phys_addr);
c010dab3:	8b 45 08             	mov    0x8(%ebp),%eax
c010dab6:	8b 40 04             	mov    0x4(%eax),%eax
c010dab9:	89 04 24             	mov    %eax,(%esp)
c010dabc:	e8 d2 17 00 00       	call   c010f293 <pmm_mark_page_as_free>
}
c010dac1:	c9                   	leave  
c010dac2:	c3                   	ret    

c010dac3 <arch_sync_pts>:
 *
 * @param src source
 * @return void
 */
void arch_sync_pts(arch_vmm_context_t *dest, arch_vmm_context_t *src, int index_low, int index_high)
{
c010dac3:	55                   	push   %ebp
c010dac4:	89 e5                	mov    %esp,%ebp
c010dac6:	83 ec 28             	sub    $0x28,%esp
    int i;
	if(src != NULL && dest != NULL)
c010dac9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010dacd:	74 69                	je     c010db38 <arch_sync_pts+0x75>
c010dacf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010dad3:	74 63                	je     c010db38 <arch_sync_pts+0x75>
	{
		if(src->entries != NULL && dest->entries != NULL && index_low >= 0 && index_high < 1024)
c010dad5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dad8:	8b 00                	mov    (%eax),%eax
c010dada:	85 c0                	test   %eax,%eax
c010dadc:	74 4c                	je     c010db2a <arch_sync_pts+0x67>
c010dade:	8b 45 08             	mov    0x8(%ebp),%eax
c010dae1:	8b 00                	mov    (%eax),%eax
c010dae3:	85 c0                	test   %eax,%eax
c010dae5:	74 43                	je     c010db2a <arch_sync_pts+0x67>
c010dae7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010daeb:	78 3d                	js     c010db2a <arch_sync_pts+0x67>
c010daed:	81 7d 14 ff 03 00 00 	cmpl   $0x3ff,0x14(%ebp)
c010daf4:	7f 34                	jg     c010db2a <arch_sync_pts+0x67>
		{
    		for(i = index_low; i < index_high; i++)
c010daf6:	8b 45 10             	mov    0x10(%ebp),%eax
c010daf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dafc:	eb 22                	jmp    c010db20 <arch_sync_pts+0x5d>
   			{
				dest->entries[i] = src->entries[i];
c010dafe:	8b 45 08             	mov    0x8(%ebp),%eax
c010db01:	8b 00                	mov    (%eax),%eax
c010db03:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010db06:	c1 e2 02             	shl    $0x2,%edx
c010db09:	01 c2                	add    %eax,%edx
c010db0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010db0e:	8b 00                	mov    (%eax),%eax
c010db10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010db13:	c1 e1 02             	shl    $0x2,%ecx
c010db16:	01 c8                	add    %ecx,%eax
c010db18:	8b 00                	mov    (%eax),%eax
c010db1a:	89 02                	mov    %eax,(%edx)
    int i;
	if(src != NULL && dest != NULL)
	{
		if(src->entries != NULL && dest->entries != NULL && index_low >= 0 && index_high < 1024)
		{
    		for(i = index_low; i < index_high; i++)
c010db1c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010db20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db23:	3b 45 14             	cmp    0x14(%ebp),%eax
c010db26:	7c d6                	jl     c010dafe <arch_sync_pts+0x3b>
void arch_sync_pts(arch_vmm_context_t *dest, arch_vmm_context_t *src, int index_low, int index_high)
{
    int i;
	if(src != NULL && dest != NULL)
	{
		if(src->entries != NULL && dest->entries != NULL && index_low >= 0 && index_high < 1024)
c010db28:	eb 1c                	jmp    c010db46 <arch_sync_pts+0x83>
				dest->entries[i] = src->entries[i];
	    	}
		}
		else
		{
			printf("sync_pt error 2\n");
c010db2a:	c7 04 24 04 24 11 c0 	movl   $0xc0112404,(%esp)
c010db31:	e8 74 e1 ff ff       	call   c010bcaa <puts>
			while(1);
c010db36:	eb fe                	jmp    c010db36 <arch_sync_pts+0x73>
		}
	}
	else
	{
		printf("invalid parameters for sync_pts()\n");
c010db38:	c7 04 24 14 24 11 c0 	movl   $0xc0112414,(%esp)
c010db3f:	e8 66 e1 ff ff       	call   c010bcaa <puts>
		while(1);
c010db44:	eb fe                	jmp    c010db44 <arch_sync_pts+0x81>
	}
}
c010db46:	c9                   	leave  
c010db47:	c3                   	ret    

c010db48 <arch_fork_context>:

void arch_fork_context(arch_vmm_context_t *src, arch_vmm_context_t *dest)
{
c010db48:	55                   	push   %ebp
c010db49:	89 e5                	mov    %esp,%ebp
c010db4b:	83 ec 28             	sub    $0x28,%esp
    int i;
    for(i = 0; i < 1024; i++)
c010db4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010db55:	eb 6e                	jmp    c010dbc5 <arch_fork_context+0x7d>
    {
        if(src->entries[i] & VMM_PRESENT)
c010db57:	8b 45 08             	mov    0x8(%ebp),%eax
c010db5a:	8b 00                	mov    (%eax),%eax
c010db5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010db5f:	c1 e2 02             	shl    $0x2,%edx
c010db62:	01 d0                	add    %edx,%eax
c010db64:	8b 00                	mov    (%eax),%eax
c010db66:	83 e0 01             	and    $0x1,%eax
c010db69:	85 c0                	test   %eax,%eax
c010db6b:	74 54                	je     c010dbc1 <arch_fork_context+0x79>
        {
            pt_t *pt_src = (pt_t *)pt_get(src, i, VMM_PRESENT | VMM_WRITABLE);
c010db6d:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010db74:	00 
c010db75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db78:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010db7f:	89 04 24             	mov    %eax,(%esp)
c010db82:	e8 8b 00 00 00       	call   c010dc12 <pt_get>
c010db87:	89 45 f0             	mov    %eax,-0x10(%ebp)
            pt_t *pt_dest = (pt_t *)pt_create(dest, i, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
c010db8a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010db91:	00 
c010db92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db95:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db99:	8b 45 0c             	mov    0xc(%ebp),%eax
c010db9c:	89 04 24             	mov    %eax,(%esp)
c010db9f:	e8 f1 00 00 00       	call   c010dc95 <pt_create>
c010dba4:	89 45 ec             	mov    %eax,-0x14(%ebp)
            memcpy(pt_dest, pt_src, 4096);
c010dba7:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010dbae:	00 
c010dbaf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dbb2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dbb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dbb9:	89 04 24             	mov    %eax,(%esp)
c010dbbc:	e8 3e 52 ff ff       	call   c0102dff <memcpy>
}

void arch_fork_context(arch_vmm_context_t *src, arch_vmm_context_t *dest)
{
    int i;
    for(i = 0; i < 1024; i++)
c010dbc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010dbc5:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010dbcc:	7e 89                	jle    c010db57 <arch_fork_context+0xf>
            pt_t *pt_src = (pt_t *)pt_get(src, i, VMM_PRESENT | VMM_WRITABLE);
            pt_t *pt_dest = (pt_t *)pt_create(dest, i, VMM_PRESENT | VMM_WRITABLE | VMM_USER);
            memcpy(pt_dest, pt_src, 4096);
        }
    }
}
c010dbce:	c9                   	leave  
c010dbcf:	c3                   	ret    

c010dbd0 <arch_update_context>:

void arch_update_context(arch_vmm_context_t *context)
{
c010dbd0:	55                   	push   %ebp
c010dbd1:	89 e5                	mov    %esp,%ebp
c010dbd3:	83 ec 18             	sub    $0x18,%esp
#define START PDE_INDEX(MEMORY_LAYOUT_KERNEL_START)
#define END   PDE_INDEX(MEMORY_LAYOUT_KERNEL_END)
    arch_sync_pts(context, &current_context->arch_context, START, END);
c010dbd6:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010dbdb:	c7 44 24 0c ff 03 00 	movl   $0x3ff,0xc(%esp)
c010dbe2:	00 
c010dbe3:	c7 44 24 08 00 03 00 	movl   $0x300,0x8(%esp)
c010dbea:	00 
c010dbeb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dbef:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbf2:	89 04 24             	mov    %eax,(%esp)
c010dbf5:	e8 c9 fe ff ff       	call   c010dac3 <arch_sync_pts>
    context->entries[PDE_INDEX(MEMORY_LAYOUT_PAGING_STRUCTURES_START)] = (uint32_t) context->phys_addr | VMM_PRESENT | VMM_WRITABLE;
c010dbfa:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbfd:	8b 00                	mov    (%eax),%eax
c010dbff:	8d 90 f8 0f 00 00    	lea    0xff8(%eax),%edx
c010dc05:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc08:	8b 40 04             	mov    0x4(%eax),%eax
c010dc0b:	83 c8 03             	or     $0x3,%eax
c010dc0e:	89 02                	mov    %eax,(%edx)
}
c010dc10:	c9                   	leave  
c010dc11:	c3                   	ret    

c010dc12 <pt_get>:
 * @param flags flags
 *
 * @return pagetable
 */
pt_t pt_get(arch_vmm_context_t *context, int index, uint8_t flags)
{
c010dc12:	55                   	push   %ebp
c010dc13:	89 e5                	mov    %esp,%ebp
c010dc15:	83 ec 38             	sub    $0x38,%esp
c010dc18:	8b 45 10             	mov    0x10(%ebp),%eax
c010dc1b:	88 45 e4             	mov    %al,-0x1c(%ebp)
    pt_t pt;

    if(current_context != NULL)
c010dc1e:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010dc23:	85 c0                	test   %eax,%eax
c010dc25:	74 52                	je     c010dc79 <pt_get+0x67>
    {
        if(context == &current_context->arch_context)
c010dc27:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010dc2c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010dc2f:	75 10                	jne    c010dc41 <pt_get+0x2f>
        {
            pt = (pt_t) PT_VADDR(index);
c010dc31:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc34:	05 00 f8 0f 00       	add    $0xff800,%eax
c010dc39:	c1 e0 0c             	shl    $0xc,%eax
c010dc3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dc3f:	eb 4f                	jmp    c010dc90 <pt_get+0x7e>
        }
        else
        {
            pt = (pt_t) PT_PADDR(index);
c010dc41:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc44:	8b 00                	mov    (%eax),%eax
c010dc46:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dc49:	c1 e2 02             	shl    $0x2,%edx
c010dc4c:	01 d0                	add    %edx,%eax
c010dc4e:	8b 00                	mov    (%eax),%eax
c010dc50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010dc55:	89 45 f4             	mov    %eax,-0xc(%ebp)
            pt = (pt_t) vmm_automap_kernel(current_context, (paddr_t) pt, flags);
c010dc58:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c010dc5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dc5f:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010dc64:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010dc68:	89 54 24 04          	mov    %edx,0x4(%esp)
c010dc6c:	89 04 24             	mov    %eax,(%esp)
c010dc6f:	e8 50 f5 ff ff       	call   c010d1c4 <vmm_automap_kernel>
c010dc74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dc77:	eb 17                	jmp    c010dc90 <pt_get+0x7e>
        }
    }
    else
    {
        pt = (pt_t) PT_PADDR(index) + MEMORY_LAYOUT_KERNEL_START;
c010dc79:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc7c:	8b 00                	mov    (%eax),%eax
c010dc7e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dc81:	c1 e2 02             	shl    $0x2,%edx
c010dc84:	01 d0                	add    %edx,%eax
c010dc86:	8b 00                	mov    (%eax),%eax
c010dc88:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010dc8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    return pt;
c010dc90:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dc93:	c9                   	leave  
c010dc94:	c3                   	ret    

c010dc95 <pt_create>:
 * @param flags flags
 *
 * @return pagetable
 */
pt_t pt_create(arch_vmm_context_t *context, int index, uint8_t flags)
{
c010dc95:	55                   	push   %ebp
c010dc96:	89 e5                	mov    %esp,%ebp
c010dc98:	83 ec 38             	sub    $0x38,%esp
c010dc9b:	8b 45 10             	mov    0x10(%ebp),%eax
c010dc9e:	88 45 e4             	mov    %al,-0x1c(%ebp)
    pt_t pt = (pt_t) pmm_alloc_page_limit(0);
c010dca1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dca8:	e8 59 19 00 00       	call   c010f606 <pmm_alloc_page_limit>
c010dcad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    context->entries[index] = (pde_t) pt | flags | VMM_PRESENT;
c010dcb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcb3:	8b 00                	mov    (%eax),%eax
c010dcb5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dcb8:	c1 e2 02             	shl    $0x2,%edx
c010dcbb:	01 d0                	add    %edx,%eax
c010dcbd:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c010dcc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dcc4:	09 ca                	or     %ecx,%edx
c010dcc6:	83 ca 01             	or     $0x1,%edx
c010dcc9:	89 10                	mov    %edx,(%eax)

    pt = pt_get(context, index, flags | VMM_PRESENT);
c010dccb:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010dccf:	83 c8 01             	or     $0x1,%eax
c010dcd2:	0f b6 c0             	movzbl %al,%eax
c010dcd5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010dcd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dcdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dce0:	8b 45 08             	mov    0x8(%ebp),%eax
c010dce3:	89 04 24             	mov    %eax,(%esp)
c010dce6:	e8 27 ff ff ff       	call   c010dc12 <pt_get>
c010dceb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memset(pt, 0, 4096);
c010dcee:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010dcf5:	00 
c010dcf6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dcfd:	00 
c010dcfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dd01:	89 04 24             	mov    %eax,(%esp)
c010dd04:	e8 6c 52 ff ff       	call   c0102f75 <memset>

    return pt;
c010dd09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010dd0c:	c9                   	leave  
c010dd0d:	c3                   	ret    

c010dd0e <pt_destroy>:
 * @param index index
 *
 * @return void
 */
void pt_destroy(arch_vmm_context_t *context, int index)
{
c010dd0e:	55                   	push   %ebp
c010dd0f:	89 e5                	mov    %esp,%ebp
c010dd11:	83 ec 18             	sub    $0x18,%esp
    pmm_mark_page_as_free((paddr_t)context->entries[index]);
c010dd14:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd17:	8b 00                	mov    (%eax),%eax
c010dd19:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dd1c:	c1 e2 02             	shl    $0x2,%edx
c010dd1f:	01 d0                	add    %edx,%eax
c010dd21:	8b 00                	mov    (%eax),%eax
c010dd23:	89 04 24             	mov    %eax,(%esp)
c010dd26:	e8 68 15 00 00       	call   c010f293 <pmm_mark_page_as_free>
    context->entries[index] = 0;
c010dd2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd2e:	8b 00                	mov    (%eax),%eax
c010dd30:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dd33:	c1 e2 02             	shl    $0x2,%edx
c010dd36:	01 d0                	add    %edx,%eax
c010dd38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010dd3e:	c9                   	leave  
c010dd3f:	c3                   	ret    

c010dd40 <arch_map>:
 * @param flags flags
 *
 * @return success
 */
int arch_map(arch_vmm_context_t *context, paddr_t pframe, vaddr_t vframe, uint8_t flags)
{
c010dd40:	55                   	push   %ebp
c010dd41:	89 e5                	mov    %esp,%ebp
c010dd43:	83 ec 38             	sub    $0x38,%esp
c010dd46:	8b 45 14             	mov    0x14(%ebp),%eax
c010dd49:	88 45 e4             	mov    %al,-0x1c(%ebp)
    if( (pframe & 0xFFF) || (vframe & 0xFFF) )
c010dd4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd4f:	25 ff 0f 00 00       	and    $0xfff,%eax
c010dd54:	85 c0                	test   %eax,%eax
c010dd56:	75 0c                	jne    c010dd64 <arch_map+0x24>
c010dd58:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd5b:	25 ff 0f 00 00       	and    $0xfff,%eax
c010dd60:	85 c0                	test   %eax,%eax
c010dd62:	74 24                	je     c010dd88 <arch_map+0x48>
    {
        printf("pd_map(): can't map 0x%x to 0x%x.", pframe, vframe);
c010dd64:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd67:	89 44 24 08          	mov    %eax,0x8(%esp)
c010dd6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dd72:	c7 04 24 38 24 11 c0 	movl   $0xc0112438,(%esp)
c010dd79:	e8 ff 53 ff ff       	call   c010317d <printf>
        return -1;
c010dd7e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010dd83:	e9 e0 00 00 00       	jmp    c010de68 <arch_map+0x128>
    }

    uint32_t pd_index = PDE_INDEX(vframe);
c010dd88:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd8b:	c1 e8 16             	shr    $0x16,%eax
c010dd8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t pt_index = PTE_INDEX(vframe);
c010dd91:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd94:	c1 e8 0c             	shr    $0xc,%eax
c010dd97:	25 ff 03 00 00       	and    $0x3ff,%eax
c010dd9c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pt_t pt = NULL;
c010dd9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    pde_t pde = context->entries[pd_index];
c010dda6:	8b 45 08             	mov    0x8(%ebp),%eax
c010dda9:	8b 00                	mov    (%eax),%eax
c010ddab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ddae:	c1 e2 02             	shl    $0x2,%edx
c010ddb1:	01 d0                	add    %edx,%eax
c010ddb3:	8b 00                	mov    (%eax),%eax
c010ddb5:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (pde & VMM_PRESENT)
c010ddb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ddbb:	83 e0 01             	and    $0x1,%eax
c010ddbe:	85 c0                	test   %eax,%eax
c010ddc0:	74 25                	je     c010dde7 <arch_map+0xa7>
    {
        pt = pt_get(context, pd_index, flags | VMM_PRESENT);
c010ddc2:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010ddc6:	83 c8 01             	or     $0x1,%eax
c010ddc9:	0f b6 d0             	movzbl %al,%edx
c010ddcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ddcf:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ddd3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ddd7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddda:	89 04 24             	mov    %eax,(%esp)
c010dddd:	e8 30 fe ff ff       	call   c010dc12 <pt_get>
c010dde2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dde5:	eb 23                	jmp    c010de0a <arch_map+0xca>
    }
    else
    {
        pt = pt_create(context, pd_index, flags | VMM_PRESENT);
c010dde7:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010ddeb:	83 c8 01             	or     $0x1,%eax
c010ddee:	0f b6 d0             	movzbl %al,%edx
c010ddf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ddf4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ddf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ddfc:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddff:	89 04 24             	mov    %eax,(%esp)
c010de02:	e8 8e fe ff ff       	call   c010dc95 <pt_create>
c010de07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    pt[pt_index] = (pte_t)(pframe & ~0xFFF) | VMM_PRESENT | (flags & 0xFFF);
c010de0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010de0d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010de14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010de17:	01 d0                	add    %edx,%eax
c010de19:	8b 55 0c             	mov    0xc(%ebp),%edx
c010de1c:	89 d1                	mov    %edx,%ecx
c010de1e:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c010de24:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010de28:	09 ca                	or     %ecx,%edx
c010de2a:	83 ca 01             	or     $0x1,%edx
c010de2d:	89 10                	mov    %edx,(%eax)

    if(current_context != NULL)
c010de2f:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010de34:	85 c0                	test   %eax,%eax
c010de36:	74 2b                	je     c010de63 <arch_map+0x123>
    {
        if(context == &current_context->arch_context)
c010de38:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010de3d:	3b 45 08             	cmp    0x8(%ebp),%eax
c010de40:	75 0d                	jne    c010de4f <arch_map+0x10f>
        {
            paging_flush_tlb(vframe);
c010de42:	8b 45 10             	mov    0x10(%ebp),%eax
c010de45:	89 04 24             	mov    %eax,(%esp)
c010de48:	e8 2e 03 00 00       	call   c010e17b <paging_flush_tlb>
c010de4d:	eb 14                	jmp    c010de63 <arch_map+0x123>
        }
        else
        {
            vmm_unmap(current_context, (vaddr_t) pt);
c010de4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010de52:	a1 38 80 11 c0       	mov    0xc0118038,%eax
c010de57:	89 54 24 04          	mov    %edx,0x4(%esp)
c010de5b:	89 04 24             	mov    %eax,(%esp)
c010de5e:	e8 a7 f2 ff ff       	call   c010d10a <vmm_unmap>
        }
    }

    return 0;
c010de63:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010de68:	c9                   	leave  
c010de69:	c3                   	ret    

c010de6a <arch_unmap>:
 * @param frame adress to unmap
 *
 * @return void
 */
int arch_unmap(arch_vmm_context_t *context, vaddr_t frame)
{
c010de6a:	55                   	push   %ebp
c010de6b:	89 e5                	mov    %esp,%ebp
c010de6d:	83 ec 28             	sub    $0x28,%esp
    pt_t pt = pt_get(context, PDE_INDEX(frame), VMM_WRITABLE);
c010de70:	8b 45 0c             	mov    0xc(%ebp),%eax
c010de73:	c1 e8 16             	shr    $0x16,%eax
c010de76:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010de7d:	00 
c010de7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010de82:	8b 45 08             	mov    0x8(%ebp),%eax
c010de85:	89 04 24             	mov    %eax,(%esp)
c010de88:	e8 85 fd ff ff       	call   c010dc12 <pt_get>
c010de8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pt[PTE_INDEX(frame)] = 0;
c010de90:	8b 45 0c             	mov    0xc(%ebp),%eax
c010de93:	c1 e8 0c             	shr    $0xc,%eax
c010de96:	25 ff 03 00 00       	and    $0x3ff,%eax
c010de9b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010dea2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dea5:	01 d0                	add    %edx,%eax
c010dea7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    int pt_emty = 1, i;
c010dead:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    for(i = 0; i < PT_LENGTH; i++)
c010deb4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010debb:	eb 22                	jmp    c010dedf <arch_unmap+0x75>
    {
        if(pt[i])
c010debd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dec0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010dec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010deca:	01 d0                	add    %edx,%eax
c010decc:	8b 00                	mov    (%eax),%eax
c010dece:	85 c0                	test   %eax,%eax
c010ded0:	74 09                	je     c010dedb <arch_unmap+0x71>
        {
            pt_emty = 0;
c010ded2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            break;
c010ded9:	eb 0d                	jmp    c010dee8 <arch_unmap+0x7e>
{
    pt_t pt = pt_get(context, PDE_INDEX(frame), VMM_WRITABLE);
    pt[PTE_INDEX(frame)] = 0;

    int pt_emty = 1, i;
    for(i = 0; i < PT_LENGTH; i++)
c010dedb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010dedf:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c010dee6:	7e d5                	jle    c010debd <arch_unmap+0x53>
            pt_emty = 0;
            break;
        }
    }

    if(pt_emty)
c010dee8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010deec:	74 15                	je     c010df03 <arch_unmap+0x99>
    {
        pt_destroy(context, PDE_INDEX(frame));
c010deee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010def1:	c1 e8 16             	shr    $0x16,%eax
c010def4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010def8:	8b 45 08             	mov    0x8(%ebp),%eax
c010defb:	89 04 24             	mov    %eax,(%esp)
c010defe:	e8 0b fe ff ff       	call   c010dd0e <pt_destroy>
    }

    return 0;
c010df03:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010df08:	c9                   	leave  
c010df09:	c3                   	ret    

c010df0a <arch_vaddr_find>:
 *
 * @param pd pagedirectory
 * @return virtual adress
 */
vaddr_t arch_vaddr_find(arch_vmm_context_t *context, int num, vaddr_t limit_low, vaddr_t limit_high, int flags)
{
c010df0a:	55                   	push   %ebp
c010df0b:	89 e5                	mov    %esp,%ebp
c010df0d:	83 ec 48             	sub    $0x48,%esp
	  pages_found += l; \
	  if(pages_found >= num) { \
	    return vaddr; \
	  }

    vaddr_t vaddr = 0;
c010df10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int page = 0;
c010df17:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    int pages_found = 0;
c010df1e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    uint32_t pd_index = PDE_INDEX(limit_low);
c010df25:	8b 45 10             	mov    0x10(%ebp),%eax
c010df28:	c1 e8 16             	shr    $0x16,%eax
c010df2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t pt_index = PTE_INDEX(limit_low);
c010df2e:	8b 45 10             	mov    0x10(%ebp),%eax
c010df31:	c1 e8 0c             	shr    $0xc,%eax
c010df34:	25 ff 03 00 00       	and    $0x3ff,%eax
c010df39:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t pd_index_end = PDE_INDEX(limit_high);
c010df3c:	8b 45 14             	mov    0x14(%ebp),%eax
c010df3f:	c1 e8 16             	shr    $0x16,%eax
c010df42:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t pt_index_end = PTE_INDEX(limit_high);
c010df45:	8b 45 14             	mov    0x14(%ebp),%eax
c010df48:	c1 e8 0c             	shr    $0xc,%eax
c010df4b:	25 ff 03 00 00       	and    $0x3ff,%eax
c010df50:	89 45 dc             	mov    %eax,-0x24(%ebp)
    pt_t pt;
    while(pd_index <= pd_index_end)
c010df53:	e9 f2 00 00 00       	jmp    c010e04a <arch_vaddr_find+0x140>
    {
        if(context->entries[pd_index] & VMM_PRESENT)
c010df58:	8b 45 08             	mov    0x8(%ebp),%eax
c010df5b:	8b 00                	mov    (%eax),%eax
c010df5d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010df60:	c1 e2 02             	shl    $0x2,%edx
c010df63:	01 d0                	add    %edx,%eax
c010df65:	8b 00                	mov    (%eax),%eax
c010df67:	83 e0 01             	and    $0x1,%eax
c010df6a:	85 c0                	test   %eax,%eax
c010df6c:	0f 84 a1 00 00 00    	je     c010e013 <arch_vaddr_find+0x109>
        {
            pt = pt_get(context, pd_index, flags);
c010df72:	8b 45 18             	mov    0x18(%ebp),%eax
c010df75:	0f b6 d0             	movzbl %al,%edx
c010df78:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010df7b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010df7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010df83:	8b 45 08             	mov    0x8(%ebp),%eax
c010df86:	89 04 24             	mov    %eax,(%esp)
c010df89:	e8 84 fc ff ff       	call   c010dc12 <pt_get>
c010df8e:	89 45 d8             	mov    %eax,-0x28(%ebp)

            uint32_t pt_end = (pd_index == pd_index_end) ? pt_index_end : PT_LENGTH; // last pd entry
c010df91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010df94:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010df97:	75 05                	jne    c010df9e <arch_vaddr_find+0x94>
c010df99:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010df9c:	eb 05                	jmp    c010dfa3 <arch_vaddr_find+0x99>
c010df9e:	b8 00 04 00 00       	mov    $0x400,%eax
c010dfa3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            for(; pt_index < pt_end; pt_index++)
c010dfa6:	eb 5a                	jmp    c010e002 <arch_vaddr_find+0xf8>
            {
                if(! ((uint32_t)pt[pt_index] & VMM_PRESENT) )
c010dfa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dfab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010dfb2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010dfb5:	01 d0                	add    %edx,%eax
c010dfb7:	8b 00                	mov    (%eax),%eax
c010dfb9:	83 e0 01             	and    $0x1,%eax
c010dfbc:	85 c0                	test   %eax,%eax
c010dfbe:	75 30                	jne    c010dff0 <arch_vaddr_find+0xe6>
                {
                    PAGES_FOUND(1);
c010dfc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dfc4:	75 19                	jne    c010dfdf <arch_vaddr_find+0xd5>
c010dfc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dfc9:	89 c2                	mov    %eax,%edx
c010dfcb:	c1 e2 0a             	shl    $0xa,%edx
c010dfce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dfd1:	01 d0                	add    %edx,%eax
c010dfd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010dfd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dfd9:	c1 e0 0c             	shl    $0xc,%eax
c010dfdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dfdf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010dfe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dfe6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010dfe9:	7c 13                	jl     c010dffe <arch_vaddr_find+0xf4>
c010dfeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dfee:	eb 6b                	jmp    c010e05b <arch_vaddr_find+0x151>
                }
                else
                {
                    pages_found = 0;
c010dff0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
                    vaddr = (uintptr_t)NULL;
c010dff7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if(context->entries[pd_index] & VMM_PRESENT)
        {
            pt = pt_get(context, pd_index, flags);

            uint32_t pt_end = (pd_index == pd_index_end) ? pt_index_end : PT_LENGTH; // last pd entry
            for(; pt_index < pt_end; pt_index++)
c010dffe:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c010e002:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e005:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010e008:	72 9e                	jb     c010dfa8 <arch_vaddr_find+0x9e>
                {
                    pages_found = 0;
                    vaddr = (uintptr_t)NULL;
                }
            }
            pt_index = 0;
c010e00a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010e011:	eb 33                	jmp    c010e046 <arch_vaddr_find+0x13c>
        }
        else
        {
            PAGES_FOUND(PT_LENGTH);
c010e013:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e017:	75 19                	jne    c010e032 <arch_vaddr_find+0x128>
c010e019:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e01c:	89 c2                	mov    %eax,%edx
c010e01e:	c1 e2 0a             	shl    $0xa,%edx
c010e021:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e024:	01 d0                	add    %edx,%eax
c010e026:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010e029:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e02c:	c1 e0 0c             	shl    $0xc,%eax
c010e02f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e032:	81 45 f0 00 04 00 00 	addl   $0x400,-0x10(%ebp)
c010e039:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e03c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010e03f:	7c 05                	jl     c010e046 <arch_vaddr_find+0x13c>
c010e041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e044:	eb 15                	jmp    c010e05b <arch_vaddr_find+0x151>
        }
        pd_index++;
c010e046:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    uint32_t pd_index = PDE_INDEX(limit_low);
    uint32_t pt_index = PTE_INDEX(limit_low);
    uint32_t pd_index_end = PDE_INDEX(limit_high);
    uint32_t pt_index_end = PTE_INDEX(limit_high);
    pt_t pt;
    while(pd_index <= pd_index_end)
c010e04a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e04d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010e050:	0f 86 02 ff ff ff    	jbe    c010df58 <arch_vaddr_find+0x4e>
            PAGES_FOUND(PT_LENGTH);
        }
        pd_index++;
    }

    return 0;
c010e056:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e05b:	c9                   	leave  
c010e05c:	c3                   	ret    

c010e05d <arch_vaddr2paddr>:

paddr_t arch_vaddr2paddr(arch_vmm_context_t *context, vaddr_t vaddr)
{
c010e05d:	55                   	push   %ebp
c010e05e:	89 e5                	mov    %esp,%ebp
c010e060:	83 ec 28             	sub    $0x28,%esp
    unsigned int pd_index = PDE_INDEX(vaddr);
c010e063:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e066:	c1 e8 16             	shr    $0x16,%eax
c010e069:	89 45 f4             	mov    %eax,-0xc(%ebp)
    unsigned int pt_index = PTE_INDEX(vaddr);
c010e06c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e06f:	c1 e8 0c             	shr    $0xc,%eax
c010e072:	25 ff 03 00 00       	and    $0x3ff,%eax
c010e077:	89 45 f0             	mov    %eax,-0x10(%ebp)

    pt_t *pt = (pt_t *)pt_get(context, pd_index, 0);
c010e07a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e07d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010e084:	00 
c010e085:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e089:	8b 45 08             	mov    0x8(%ebp),%eax
c010e08c:	89 04 24             	mov    %eax,(%esp)
c010e08f:	e8 7e fb ff ff       	call   c010dc12 <pt_get>
c010e094:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return (paddr_t) pt[pt_index] & ~0xfff;
c010e097:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e09a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010e0a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e0a4:	01 d0                	add    %edx,%eax
c010e0a6:	8b 00                	mov    (%eax),%eax
c010e0a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
c010e0ad:	c9                   	leave  
c010e0ae:	c3                   	ret    

c010e0af <arch_switch_context>:
 * @param flags flags
 *
 * @return void
 */
void arch_switch_context(arch_vmm_context_t *context)
{
c010e0af:	55                   	push   %ebp
c010e0b0:	89 e5                	mov    %esp,%ebp
    asm volatile ("mov %0, %%cr3" : : "r" (context->phys_addr));
c010e0b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0b5:	8b 40 04             	mov    0x4(%eax),%eax
c010e0b8:	0f 22 d8             	mov    %eax,%cr3
}
c010e0bb:	5d                   	pop    %ebp
c010e0bc:	c3                   	ret    

c010e0bd <page_fault_handler>:
 *
 * @param cpu current cpu state
 * @return void
 */
void page_fault_handler(struct cpu_state **cpu_p)
{
c010e0bd:	55                   	push   %ebp
c010e0be:	89 e5                	mov    %esp,%ebp
c010e0c0:	56                   	push   %esi
c010e0c1:	53                   	push   %ebx
c010e0c2:	81 ec 30 02 00 00    	sub    $0x230,%esp
    struct cpu_state *cpu = cpu_p[0];
c010e0c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0cb:	8b 00                	mov    (%eax),%eax
c010e0cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));
c010e0d0:	0f 20 d3             	mov    %cr2,%ebx
c010e0d3:	89 5d f0             	mov    %ebx,-0x10(%ebp)

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);
c010e0d6:	a1 0c a0 11 c0       	mov    0xc011a00c,%eax
c010e0db:	8b 40 04             	mov    0x4(%eax),%eax
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
c010e0de:	8b 70 0c             	mov    0xc(%eax),%esi
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);
c010e0e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
c010e0e4:	8b 58 34             	mov    0x34(%eax),%ebx
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);
c010e0e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e0ea:	8b 40 30             	mov    0x30(%eax),%eax
c010e0ed:	83 e0 01             	and    $0x1,%eax
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
c010e0f0:	85 c0                	test   %eax,%eax
c010e0f2:	74 07                	je     c010e0fb <page_fault_handler+0x3e>
c010e0f4:	b9 5a 24 11 c0       	mov    $0xc011245a,%ecx
c010e0f9:	eb 05                	jmp    c010e100 <page_fault_handler+0x43>
c010e0fb:	b9 68 24 11 c0       	mov    $0xc0112468,%ecx
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);
c010e100:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e103:	8b 40 30             	mov    0x30(%eax),%eax
c010e106:	83 e0 02             	and    $0x2,%eax
    char message[512];

    uint32_t addr;
    asm ("mov %%cr2, %0" : "=r" (addr));

    sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X\n Process: %s\n", ((cpu->error & 4) ? "user" : "kernel"),
c010e109:	85 c0                	test   %eax,%eax
c010e10b:	74 07                	je     c010e114 <page_fault_handler+0x57>
c010e10d:	ba 76 24 11 c0       	mov    $0xc0112476,%edx
c010e112:	eb 05                	jmp    c010e119 <page_fault_handler+0x5c>
c010e114:	ba 81 24 11 c0       	mov    $0xc0112481,%edx
c010e119:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e11c:	8b 40 30             	mov    0x30(%eax),%eax
c010e11f:	83 e0 04             	and    $0x4,%eax
c010e122:	85 c0                	test   %eax,%eax
c010e124:	74 07                	je     c010e12d <page_fault_handler+0x70>
c010e126:	b8 8c 24 11 c0       	mov    $0xc011248c,%eax
c010e12b:	eb 05                	jmp    c010e132 <page_fault_handler+0x75>
c010e12d:	b8 91 24 11 c0       	mov    $0xc0112491,%eax
c010e132:	89 74 24 1c          	mov    %esi,0x1c(%esp)
c010e136:	89 5c 24 18          	mov    %ebx,0x18(%esp)
c010e13a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c010e13e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010e141:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010e145:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010e149:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e14d:	c7 44 24 04 98 24 11 	movl   $0xc0112498,0x4(%esp)
c010e154:	c0 
c010e155:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c010e15b:	89 04 24             	mov    %eax,(%esp)
c010e15e:	e8 87 50 ff ff       	call   c01031ea <sprintf>
            ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip,current_thread->process->name);

    panic(message);
c010e163:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c010e169:	89 04 24             	mov    %eax,(%esp)
c010e16c:	e8 f4 de ff ff       	call   c010c065 <panic>
}
c010e171:	81 c4 30 02 00 00    	add    $0x230,%esp
c010e177:	5b                   	pop    %ebx
c010e178:	5e                   	pop    %esi
c010e179:	5d                   	pop    %ebp
c010e17a:	c3                   	ret    

c010e17b <paging_flush_tlb>:

static inline void paging_flush_tlb(vaddr_t addr)
{
c010e17b:	55                   	push   %ebp
c010e17c:	89 e5                	mov    %esp,%ebp
    asm volatile ("invlpg %0" : : "m" (*(char*) addr));
c010e17e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e181:	0f 01 38             	invlpg (%eax)
}
c010e184:	5d                   	pop    %ebp
c010e185:	c3                   	ret    

c010e186 <halt>:
/**
 *  @author Simon Diepold aka. Tdotu <simon.diepold@infinitycoding.de>
 */

void halt(void)
{
c010e186:	55                   	push   %ebp
c010e187:	89 e5                	mov    %esp,%ebp
    while (1)
    {
        asm volatile("cli; hlt");
c010e189:	fa                   	cli    
c010e18a:	f4                   	hlt    
    }
c010e18b:	eb fc                	jmp    c010e189 <halt+0x3>

c010e18d <outb>:
    asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
    return result;
}

static inline void outb(uint16_t port, uint8_t value)
{
c010e18d:	55                   	push   %ebp
c010e18e:	89 e5                	mov    %esp,%ebp
c010e190:	83 ec 08             	sub    $0x8,%esp
c010e193:	8b 55 08             	mov    0x8(%ebp),%edx
c010e196:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e199:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010e19d:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010e1a0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010e1a4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010e1a8:	ee                   	out    %al,(%dx)
}
c010e1a9:	c9                   	leave  
c010e1aa:	c3                   	ret    

c010e1ab <lidt>:
 * Load IDT
 * @param nuber of the last defined Descriptor
 * @return void
 **/
void lidt(uint16_t irq)
{
c010e1ab:	55                   	push   %ebp
c010e1ac:	89 e5                	mov    %esp,%ebp
c010e1ae:	83 ec 04             	sub    $0x4,%esp
c010e1b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1b4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idtp.limit = (8 * irq)-1;
c010e1b8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010e1bc:	c1 e0 03             	shl    $0x3,%eax
c010e1bf:	83 e8 01             	sub    $0x1,%eax
c010e1c2:	66 a3 40 88 11 c0    	mov    %ax,0xc0118840
    idtp.base = IDT;
c010e1c8:	c7 05 42 88 11 c0 40 	movl   $0xc0118040,0xc0118842
c010e1cf:	80 11 c0 
    asm volatile("lidt %0" : : "m" (idtp));
c010e1d2:	0f 01 1d 40 88 11 c0 	lidtl  0xc0118840
}
c010e1d9:	c9                   	leave  
c010e1da:	c3                   	ret    

c010e1db <EOI>:
 * Send End of Interrupt Signal to the PIC
 * @param number of the runnig interrupt
 * @return void
 **/
void EOI(int irq)
{
c010e1db:	55                   	push   %ebp
c010e1dc:	89 e5                	mov    %esp,%ebp
c010e1de:	83 ec 08             	sub    $0x8,%esp
    outb(0x20, 0x20);
c010e1e1:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c010e1e8:	00 
c010e1e9:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010e1f0:	e8 98 ff ff ff       	call   c010e18d <outb>
    if (irq >= 8)
c010e1f5:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
c010e1f9:	7e 14                	jle    c010e20f <EOI+0x34>
    {
        outb(0xA0, 0x20);
c010e1fb:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c010e202:	00 
c010e203:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c010e20a:	e8 7e ff ff ff       	call   c010e18d <outb>
    }
}
c010e20f:	c9                   	leave  
c010e210:	c3                   	ret    

c010e211 <pic_mask_irqs>:
 * block hardware IRQs
 * @param number of the IRQ which should be blocked
 * @return void
 **/
void pic_mask_irqs(uint16_t mask)
{
c010e211:	55                   	push   %ebp
c010e212:	89 e5                	mov    %esp,%ebp
c010e214:	83 ec 0c             	sub    $0xc,%esp
c010e217:	8b 45 08             	mov    0x8(%ebp),%eax
c010e21a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    outb(0x21, (uint8_t) mask);
c010e21e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010e222:	0f b6 c0             	movzbl %al,%eax
c010e225:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e229:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e230:	e8 58 ff ff ff       	call   c010e18d <outb>
    outb(0xA1, (uint8_t) mask >> 8);
c010e235:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010e239:	0f b6 c0             	movzbl %al,%eax
c010e23c:	c1 f8 08             	sar    $0x8,%eax
c010e23f:	0f b6 c0             	movzbl %al,%eax
c010e242:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e246:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e24d:	e8 3b ff ff ff       	call   c010e18d <outb>
}
c010e252:	c9                   	leave  
c010e253:	c3                   	ret    

c010e254 <Set_IDT_Entry>:
 * @param 2 Baseadress of the ISR function
 * @param 3 Flags
 * @return void
 **/
void Set_IDT_Entry(uint32_t intnr, uint16_t selector,uint32_t Base, uint16_t flags)
{
c010e254:	55                   	push   %ebp
c010e255:	89 e5                	mov    %esp,%ebp
c010e257:	83 ec 08             	sub    $0x8,%esp
c010e25a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e25d:	8b 45 14             	mov    0x14(%ebp),%eax
c010e260:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010e264:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    IDT[intnr].Base_low = (uint16_t)Base;
c010e268:	8b 45 10             	mov    0x10(%ebp),%eax
c010e26b:	89 c2                	mov    %eax,%edx
c010e26d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e270:	66 89 14 c5 40 80 11 	mov    %dx,-0x3fee7fc0(,%eax,8)
c010e277:	c0 
    IDT[intnr].selector = selector;
c010e278:	8b 45 08             	mov    0x8(%ebp),%eax
c010e27b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010e27f:	66 89 14 c5 42 80 11 	mov    %dx,-0x3fee7fbe(,%eax,8)
c010e286:	c0 
    IDT[intnr].flags = flags;
c010e287:	8b 45 08             	mov    0x8(%ebp),%eax
c010e28a:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c010e28e:	66 89 14 c5 44 80 11 	mov    %dx,-0x3fee7fbc(,%eax,8)
c010e295:	c0 
    IDT[intnr].Base_hi = (uint16_t)(Base>>16);
c010e296:	8b 45 10             	mov    0x10(%ebp),%eax
c010e299:	c1 e8 10             	shr    $0x10,%eax
c010e29c:	89 c2                	mov    %eax,%edx
c010e29e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2a1:	66 89 14 c5 46 80 11 	mov    %dx,-0x3fee7fba(,%eax,8)
c010e2a8:	c0 
}
c010e2a9:	c9                   	leave  
c010e2aa:	c3                   	ret    

c010e2ab <install_irq>:
 * @param 1 pointer to the handler function
 * @return false  -> Handler is already seted-up
 * @return true -> Handler sucessfully installed
 **/
int install_irq(int intr,void *handler)
{
c010e2ab:	55                   	push   %ebp
c010e2ac:	89 e5                	mov    %esp,%ebp
    if (irq[intr] != NULL)
c010e2ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2b1:	8b 04 85 60 88 11 c0 	mov    -0x3fee77a0(,%eax,4),%eax
c010e2b8:	85 c0                	test   %eax,%eax
c010e2ba:	74 07                	je     c010e2c3 <install_irq+0x18>
    {
        return false;
c010e2bc:	b8 00 00 00 00       	mov    $0x0,%eax
c010e2c1:	eb 12                	jmp    c010e2d5 <install_irq+0x2a>
    }

    irq[intr] = handler;
c010e2c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e2c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2c9:	89 14 85 60 88 11 c0 	mov    %edx,-0x3fee77a0(,%eax,4)
    return true;
c010e2d0:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010e2d5:	5d                   	pop    %ebp
c010e2d6:	c3                   	ret    

c010e2d7 <install_exc>:
 * @param 1 pointer to the handler function
 * @return true  -> Handler is already seted-up
 * @return false -> Handler sucessfully installed
 **/
int install_exc(int excnum, void *handler)
{
c010e2d7:	55                   	push   %ebp
c010e2d8:	89 e5                	mov    %esp,%ebp
    if (exc[excnum] != NULL)
c010e2da:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2dd:	8b 04 85 a0 88 11 c0 	mov    -0x3fee7760(,%eax,4),%eax
c010e2e4:	85 c0                	test   %eax,%eax
c010e2e6:	74 07                	je     c010e2ef <install_exc+0x18>
    {
        return false;
c010e2e8:	b8 00 00 00 00       	mov    $0x0,%eax
c010e2ed:	eb 12                	jmp    c010e301 <install_exc+0x2a>
    }

    exc[excnum] = handler;
c010e2ef:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e2f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2f5:	89 14 85 a0 88 11 c0 	mov    %edx,-0x3fee7760(,%eax,4)
    return true;
c010e2fc:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010e301:	5d                   	pop    %ebp
c010e302:	c3                   	ret    

c010e303 <deinstall_irq>:
 * deinstall IRQ handlder
 * @param interrupt number
 * @return void
**/
void deinstall_irq(int intr)
{
c010e303:	55                   	push   %ebp
c010e304:	89 e5                	mov    %esp,%ebp
    irq[intr] = NULL;
c010e306:	8b 45 08             	mov    0x8(%ebp),%eax
c010e309:	c7 04 85 60 88 11 c0 	movl   $0x0,-0x3fee77a0(,%eax,4)
c010e310:	00 00 00 00 
}
c010e314:	5d                   	pop    %ebp
c010e315:	c3                   	ret    

c010e316 <deinstall_exc>:
 * deinstall exception handlder
 * @param exception number
 * @return void
**/
void deinstall_exc(int excnum)
{
c010e316:	55                   	push   %ebp
c010e317:	89 e5                	mov    %esp,%ebp
    exc[excnum] = NULL;
c010e319:	8b 45 08             	mov    0x8(%ebp),%eax
c010e31c:	c7 04 85 a0 88 11 c0 	movl   $0x0,-0x3fee7760(,%eax,4)
c010e323:	00 00 00 00 
}
c010e327:	5d                   	pop    %ebp
c010e328:	c3                   	ret    

c010e329 <irq_handler>:
 * General IRQ Handler
 * @param pointer to cpu_state struct of the interrupted Process
 * @return pointer to cpu_state struct of the interrupted Process
 **/
struct cpu_state* irq_handler(struct cpu_state* cpu)
{
c010e329:	55                   	push   %ebp
c010e32a:	89 e5                	mov    %esp,%ebp
c010e32c:	83 ec 28             	sub    $0x28,%esp
    //Exceptions
    if (cpu->intr < 32)
c010e32f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e332:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e335:	83 f8 1f             	cmp    $0x1f,%eax
c010e338:	77 3e                	ja     c010e378 <irq_handler+0x4f>
    {
        if (exc[cpu->intr] != NULL)
c010e33a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e33d:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e340:	8b 04 85 a0 88 11 c0 	mov    -0x3fee7760(,%eax,4),%eax
c010e347:	85 c0                	test   %eax,%eax
c010e349:	74 1d                	je     c010e368 <irq_handler+0x3f>
        {
            exc[cpu->intr](&cpu);
c010e34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e34e:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e351:	8b 04 85 a0 88 11 c0 	mov    -0x3fee7760(,%eax,4),%eax
c010e358:	8d 55 08             	lea    0x8(%ebp),%edx
c010e35b:	89 14 24             	mov    %edx,(%esp)
c010e35e:	ff d0                	call   *%eax
            return cpu;
c010e360:	8b 45 08             	mov    0x8(%ebp),%eax
c010e363:	e9 cf 00 00 00       	jmp    c010e437 <irq_handler+0x10e>
        }
        else
        {
            exc_panic(cpu);
c010e368:	8b 45 08             	mov    0x8(%ebp),%eax
c010e36b:	89 04 24             	mov    %eax,(%esp)
c010e36e:	e8 c1 df ff ff       	call   c010c334 <exc_panic>
c010e373:	e9 bc 00 00 00       	jmp    c010e434 <irq_handler+0x10b>
        }
    }
    //Taskscheduler
    else if(cpu->intr == 32)
c010e378:	8b 45 08             	mov    0x8(%ebp),%eax
c010e37b:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e37e:	83 f8 20             	cmp    $0x20,%eax
c010e381:	75 18                	jne    c010e39b <irq_handler+0x72>
    {
        sync_sys_clock();
c010e383:	e8 fc e1 ff ff       	call   c010c584 <sync_sys_clock>
        cpu = task_schedule(cpu);
c010e388:	8b 45 08             	mov    0x8(%ebp),%eax
c010e38b:	89 04 24             	mov    %eax,(%esp)
c010e38e:	e8 f2 65 ff ff       	call   c0104985 <task_schedule>
c010e393:	89 45 08             	mov    %eax,0x8(%ebp)
c010e396:	e9 99 00 00 00       	jmp    c010e434 <irq_handler+0x10b>
    }
    //IRQs
    else if (cpu->intr < 46)
c010e39b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e39e:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e3a1:	83 f8 2d             	cmp    $0x2d,%eax
c010e3a4:	77 3e                	ja     c010e3e4 <irq_handler+0xbb>
    {
        asm volatile("cli");
c010e3a6:	fa                   	cli    
        int irqnum = cpu->intr - IRQ_OFFSET;
c010e3a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3aa:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e3ad:	83 e8 20             	sub    $0x20,%eax
c010e3b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (irq[irqnum] != NULL)
c010e3b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3b6:	8b 04 85 60 88 11 c0 	mov    -0x3fee77a0(,%eax,4),%eax
c010e3bd:	85 c0                	test   %eax,%eax
c010e3bf:	74 12                	je     c010e3d3 <irq_handler+0xaa>
        {
            irq[irqnum](&cpu);
c010e3c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3c4:	8b 04 85 60 88 11 c0 	mov    -0x3fee77a0(,%eax,4),%eax
c010e3cb:	8d 55 08             	lea    0x8(%ebp),%edx
c010e3ce:	89 14 24             	mov    %edx,(%esp)
c010e3d1:	ff d0                	call   *%eax
        }
        EOI(irqnum);
c010e3d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3d6:	89 04 24             	mov    %eax,(%esp)
c010e3d9:	e8 fd fd ff ff       	call   c010e1db <EOI>
        asm volatile("sti");
c010e3de:	fb                   	sti    
        return cpu;
c010e3df:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3e2:	eb 53                	jmp    c010e437 <irq_handler+0x10e>
    }
    //universe syscall
    else if(cpu->intr == 0x70)
c010e3e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3e7:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e3ea:	83 f8 70             	cmp    $0x70,%eax
c010e3ed:	75 0d                	jne    c010e3fc <irq_handler+0xd3>
    {
        universe_syscall_handler(&cpu);
c010e3ef:	8d 45 08             	lea    0x8(%ebp),%eax
c010e3f2:	89 04 24             	mov    %eax,(%esp)
c010e3f5:	e8 30 a4 ff ff       	call   c010882a <universe_syscall_handler>
c010e3fa:	eb 38                	jmp    c010e434 <irq_handler+0x10b>
    }
    //linux syscall
    else if(cpu->intr == 0x80)
c010e3fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3ff:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e402:	3d 80 00 00 00       	cmp    $0x80,%eax
c010e407:	75 0d                	jne    c010e416 <irq_handler+0xed>
    {
        linux_syscall_handler(&cpu);
c010e409:	8d 55 08             	lea    0x8(%ebp),%edx
c010e40c:	89 14 24             	mov    %edx,(%esp)
c010e40f:	e8 d7 a3 ff ff       	call   c01087eb <linux_syscall_handler>
c010e414:	eb 1e                	jmp    c010e434 <irq_handler+0x10b>
    }
    //pci IRQ
    else if(cpu->intr == 50)
c010e416:	8b 45 08             	mov    0x8(%ebp),%eax
c010e419:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e41c:	83 f8 32             	cmp    $0x32,%eax
c010e41f:	75 07                	jne    c010e428 <irq_handler+0xff>
    {
        pci_irq_handler();
c010e421:	e8 ae ce ff ff       	call   c010b2d4 <pci_irq_handler>
c010e426:	eb 0c                	jmp    c010e434 <irq_handler+0x10b>
    }
    //unspecified ISRs
    else
    {
        panic("A unspecified ISR was called.");
c010e428:	c7 04 24 37 26 11 c0 	movl   $0xc0112637,(%esp)
c010e42f:	e8 31 dc ff ff       	call   c010c065 <panic>
    }
    return cpu;
c010e434:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010e437:	c9                   	leave  
c010e438:	c3                   	ret    

c010e439 <remap_pic>:
 * remap IRQs to irqnum 31
 * @param void
 * @return void
 **/
void remap_pic(void)
{
c010e439:	55                   	push   %ebp
c010e43a:	89 e5                	mov    %esp,%ebp
c010e43c:	83 ec 08             	sub    $0x8,%esp
    outb(0x20, 0x11);
c010e43f:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010e446:	00 
c010e447:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010e44e:	e8 3a fd ff ff       	call   c010e18d <outb>
    outb(0xA0, 0x11);
c010e453:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c010e45a:	00 
c010e45b:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c010e462:	e8 26 fd ff ff       	call   c010e18d <outb>
    outb(0x21, 32);
c010e467:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c010e46e:	00 
c010e46f:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e476:	e8 12 fd ff ff       	call   c010e18d <outb>
    outb(0xA1, 32+8);
c010e47b:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
c010e482:	00 
c010e483:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e48a:	e8 fe fc ff ff       	call   c010e18d <outb>
    outb(0x21, 0x04);
c010e48f:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
c010e496:	00 
c010e497:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e49e:	e8 ea fc ff ff       	call   c010e18d <outb>
    outb(0xA1, 2);
c010e4a3:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010e4aa:	00 
c010e4ab:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e4b2:	e8 d6 fc ff ff       	call   c010e18d <outb>
    outb(0x21, 0x01);
c010e4b7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010e4be:	00 
c010e4bf:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e4c6:	e8 c2 fc ff ff       	call   c010e18d <outb>
    outb(0xA1, 0x01);
c010e4cb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010e4d2:	00 
c010e4d3:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e4da:	e8 ae fc ff ff       	call   c010e18d <outb>
    outb(0x21, 0x00);
c010e4df:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010e4e6:	00 
c010e4e7:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010e4ee:	e8 9a fc ff ff       	call   c010e18d <outb>
    outb(0xA1, 0x00);
c010e4f3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010e4fa:	00 
c010e4fb:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c010e502:	e8 86 fc ff ff       	call   c010e18d <outb>
}
c010e507:	c9                   	leave  
c010e508:	c3                   	ret    

c010e509 <INIT_IDT>:
 * Initialize IDT wit exceptions and basical ISRs
 * @param 0 void
 * @param 1 void
 **/
void INIT_IDT(void)
{
c010e509:	55                   	push   %ebp
c010e50a:	89 e5                	mov    %esp,%ebp
c010e50c:	83 ec 20             	sub    $0x20,%esp
    remap_pic();
c010e50f:	e8 25 ff ff ff       	call   c010e439 <remap_pic>
    //Exceptions
    int i;
    for(i = 0; i < 256; i++)
c010e514:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010e51b:	eb 28                	jmp    c010e545 <INIT_IDT+0x3c>
    {
        Set_IDT_Entry(i,0x8,(uint32_t)isr_default,0xEE00);
c010e51d:	ba bf 02 11 c0       	mov    $0xc01102bf,%edx
c010e522:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e525:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e52c:	00 
c010e52d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e531:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e538:	00 
c010e539:	89 04 24             	mov    %eax,(%esp)
c010e53c:	e8 13 fd ff ff       	call   c010e254 <Set_IDT_Entry>
void INIT_IDT(void)
{
    remap_pic();
    //Exceptions
    int i;
    for(i = 0; i < 256; i++)
c010e541:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010e545:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c010e54c:	7e cf                	jle    c010e51d <INIT_IDT+0x14>
    {
        Set_IDT_Entry(i,0x8,(uint32_t)isr_default,0xEE00);
    }

    Set_IDT_Entry(0,0x8,(uint32_t)isr_0,0xEE00);
c010e54e:	b8 b0 01 11 c0       	mov    $0xc01101b0,%eax
c010e553:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e55a:	00 
c010e55b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e55f:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e566:	00 
c010e567:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010e56e:	e8 e1 fc ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(1,0x8,(uint32_t)isr_1,0xEE00);
c010e573:	b8 b9 01 11 c0       	mov    $0xc01101b9,%eax
c010e578:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e57f:	00 
c010e580:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e584:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e58b:	00 
c010e58c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010e593:	e8 bc fc ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(2,0x8,(uint32_t)isr_2,0xEE00);
c010e598:	b8 c2 01 11 c0       	mov    $0xc01101c2,%eax
c010e59d:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e5a4:	00 
c010e5a5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e5a9:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e5b0:	00 
c010e5b1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010e5b8:	e8 97 fc ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(3,0x8,(uint32_t)isr_3,0xEE00);
c010e5bd:	b8 cb 01 11 c0       	mov    $0xc01101cb,%eax
c010e5c2:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e5c9:	00 
c010e5ca:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e5ce:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e5d5:	00 
c010e5d6:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010e5dd:	e8 72 fc ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(4,0x8,(uint32_t)isr_4,0xEE00);
c010e5e2:	b8 d4 01 11 c0       	mov    $0xc01101d4,%eax
c010e5e7:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e5ee:	00 
c010e5ef:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e5f3:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e5fa:	00 
c010e5fb:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010e602:	e8 4d fc ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(5,0x8,(uint32_t)isr_5,0xEE00);
c010e607:	b8 dd 01 11 c0       	mov    $0xc01101dd,%eax
c010e60c:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e613:	00 
c010e614:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e618:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e61f:	00 
c010e620:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010e627:	e8 28 fc ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(6,0x8,(uint32_t)isr_6,0xEE00);
c010e62c:	b8 e6 01 11 c0       	mov    $0xc01101e6,%eax
c010e631:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e638:	00 
c010e639:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e63d:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e644:	00 
c010e645:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c010e64c:	e8 03 fc ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(7,0x8,(uint32_t)isr_7,0xEE00);
c010e651:	b8 ef 01 11 c0       	mov    $0xc01101ef,%eax
c010e656:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e65d:	00 
c010e65e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e662:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e669:	00 
c010e66a:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010e671:	e8 de fb ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(8,0x8,(uint32_t)isr_8,0xEE00);
c010e676:	b8 f8 01 11 c0       	mov    $0xc01101f8,%eax
c010e67b:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e682:	00 
c010e683:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e687:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e68e:	00 
c010e68f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010e696:	e8 b9 fb ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(9,0x8,(uint32_t)isr_9,0xEE00);
c010e69b:	b8 ff 01 11 c0       	mov    $0xc01101ff,%eax
c010e6a0:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e6a7:	00 
c010e6a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e6ac:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e6b3:	00 
c010e6b4:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010e6bb:	e8 94 fb ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(10,0x8,(uint32_t)isr_10,0xEE00);
c010e6c0:	b8 08 02 11 c0       	mov    $0xc0110208,%eax
c010e6c5:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e6cc:	00 
c010e6cd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e6d1:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e6d8:	00 
c010e6d9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010e6e0:	e8 6f fb ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(11,0x8,(uint32_t)isr_11,0xEE00);
c010e6e5:	b8 0f 02 11 c0       	mov    $0xc011020f,%eax
c010e6ea:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e6f1:	00 
c010e6f2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e6f6:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e6fd:	00 
c010e6fe:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c010e705:	e8 4a fb ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(12,0x8,(uint32_t)isr_12,0xEE00);
c010e70a:	b8 16 02 11 c0       	mov    $0xc0110216,%eax
c010e70f:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e716:	00 
c010e717:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e71b:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e722:	00 
c010e723:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010e72a:	e8 25 fb ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(13,0x8,(uint32_t)isr_13,0xEE00);
c010e72f:	b8 1d 02 11 c0       	mov    $0xc011021d,%eax
c010e734:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e73b:	00 
c010e73c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e740:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e747:	00 
c010e748:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
c010e74f:	e8 00 fb ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(14,0x8,(uint32_t)isr_14,0xEE00);
c010e754:	b8 24 02 11 c0       	mov    $0xc0110224,%eax
c010e759:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e760:	00 
c010e761:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e765:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e76c:	00 
c010e76d:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c010e774:	e8 db fa ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(15,0x8,(uint32_t)isr_15,0xEE00);
c010e779:	b8 2b 02 11 c0       	mov    $0xc011022b,%eax
c010e77e:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e785:	00 
c010e786:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e78a:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e791:	00 
c010e792:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010e799:	e8 b6 fa ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(16,0x8,(uint32_t)isr_16,0xEE00);
c010e79e:	b8 34 02 11 c0       	mov    $0xc0110234,%eax
c010e7a3:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e7aa:	00 
c010e7ab:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e7af:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e7b6:	00 
c010e7b7:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c010e7be:	e8 91 fa ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(17,0x8,(uint32_t)isr_17,0xEE00);
c010e7c3:	b8 3d 02 11 c0       	mov    $0xc011023d,%eax
c010e7c8:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e7cf:	00 
c010e7d0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e7d4:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e7db:	00 
c010e7dc:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
c010e7e3:	e8 6c fa ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(18,0x8,(uint32_t)isr_18,0xEE00);
c010e7e8:	b8 44 02 11 c0       	mov    $0xc0110244,%eax
c010e7ed:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e7f4:	00 
c010e7f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e7f9:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e800:	00 
c010e801:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
c010e808:	e8 47 fa ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(19,0x8,(uint32_t)isr_19,0xEE00);
c010e80d:	b8 4d 02 11 c0       	mov    $0xc011024d,%eax
c010e812:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e819:	00 
c010e81a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e81e:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e825:	00 
c010e826:	c7 04 24 13 00 00 00 	movl   $0x13,(%esp)
c010e82d:	e8 22 fa ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(20,0x8,(uint32_t)isr_20,0xEE00);
c010e832:	b8 56 02 11 c0       	mov    $0xc0110256,%eax
c010e837:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e83e:	00 
c010e83f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e843:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e84a:	00 
c010e84b:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c010e852:	e8 fd f9 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(21,0x8,(uint32_t)isr_21,0xEE00);
c010e857:	b8 5f 02 11 c0       	mov    $0xc011025f,%eax
c010e85c:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e863:	00 
c010e864:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e868:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e86f:	00 
c010e870:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
c010e877:	e8 d8 f9 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(22,0x8,(uint32_t)isr_22,0xEE00);
c010e87c:	b8 68 02 11 c0       	mov    $0xc0110268,%eax
c010e881:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e888:	00 
c010e889:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e88d:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e894:	00 
c010e895:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
c010e89c:	e8 b3 f9 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(23,0x8,(uint32_t)isr_23,0xEE00);
c010e8a1:	b8 71 02 11 c0       	mov    $0xc0110271,%eax
c010e8a6:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e8ad:	00 
c010e8ae:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e8b2:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e8b9:	00 
c010e8ba:	c7 04 24 17 00 00 00 	movl   $0x17,(%esp)
c010e8c1:	e8 8e f9 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(24,0x8,(uint32_t)isr_24,0xEE00);
c010e8c6:	b8 7a 02 11 c0       	mov    $0xc011027a,%eax
c010e8cb:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e8d2:	00 
c010e8d3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e8d7:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e8de:	00 
c010e8df:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010e8e6:	e8 69 f9 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(25,0x8,(uint32_t)isr_25,0xEE00);
c010e8eb:	b8 83 02 11 c0       	mov    $0xc0110283,%eax
c010e8f0:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e8f7:	00 
c010e8f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e8fc:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e903:	00 
c010e904:	c7 04 24 19 00 00 00 	movl   $0x19,(%esp)
c010e90b:	e8 44 f9 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(26,0x8,(uint32_t)isr_26,0xEE00);
c010e910:	b8 8c 02 11 c0       	mov    $0xc011028c,%eax
c010e915:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e91c:	00 
c010e91d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e921:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e928:	00 
c010e929:	c7 04 24 1a 00 00 00 	movl   $0x1a,(%esp)
c010e930:	e8 1f f9 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(27,0x8,(uint32_t)isr_27,0xEE00);
c010e935:	b8 95 02 11 c0       	mov    $0xc0110295,%eax
c010e93a:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e941:	00 
c010e942:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e946:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e94d:	00 
c010e94e:	c7 04 24 1b 00 00 00 	movl   $0x1b,(%esp)
c010e955:	e8 fa f8 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(28,0x8,(uint32_t)isr_28,0xEE00);
c010e95a:	b8 9e 02 11 c0       	mov    $0xc011029e,%eax
c010e95f:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e966:	00 
c010e967:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e96b:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e972:	00 
c010e973:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
c010e97a:	e8 d5 f8 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(29,0x8,(uint32_t)isr_29,0xEE00);
c010e97f:	b8 a7 02 11 c0       	mov    $0xc01102a7,%eax
c010e984:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e98b:	00 
c010e98c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e990:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e997:	00 
c010e998:	c7 04 24 1d 00 00 00 	movl   $0x1d,(%esp)
c010e99f:	e8 b0 f8 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(30,0x8,(uint32_t)isr_30,0xEE00);
c010e9a4:	b8 b0 02 11 c0       	mov    $0xc01102b0,%eax
c010e9a9:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e9b0:	00 
c010e9b1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9b5:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e9bc:	00 
c010e9bd:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
c010e9c4:	e8 8b f8 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(31,0x8,(uint32_t)isr_31,0xEE00);
c010e9c9:	b8 b9 02 11 c0       	mov    $0xc01102b9,%eax
c010e9ce:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e9d5:	00 
c010e9d6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9da:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010e9e1:	00 
c010e9e2:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c010e9e9:	e8 66 f8 ff ff       	call   c010e254 <Set_IDT_Entry>
    //IRQs
    Set_IDT_Entry(32,0x8,(uint32_t)isr_32,0xEE00);
c010e9ee:	b8 c5 02 11 c0       	mov    $0xc01102c5,%eax
c010e9f3:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010e9fa:	00 
c010e9fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9ff:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea06:	00 
c010ea07:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010ea0e:	e8 41 f8 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(33,0x8,(uint32_t)isr_33,0xEE00);
c010ea13:	b8 cb 02 11 c0       	mov    $0xc01102cb,%eax
c010ea18:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea1f:	00 
c010ea20:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea24:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea2b:	00 
c010ea2c:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010ea33:	e8 1c f8 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(34,0x8,(uint32_t)isr_34,0xEE00);
c010ea38:	b8 d1 02 11 c0       	mov    $0xc01102d1,%eax
c010ea3d:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea44:	00 
c010ea45:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea49:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea50:	00 
c010ea51:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
c010ea58:	e8 f7 f7 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(35,0x8,(uint32_t)isr_35,0xEE00);
c010ea5d:	b8 d7 02 11 c0       	mov    $0xc01102d7,%eax
c010ea62:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea69:	00 
c010ea6a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea6e:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea75:	00 
c010ea76:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
c010ea7d:	e8 d2 f7 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(36,0x8,(uint32_t)isr_36,0xEE00);
c010ea82:	b8 dd 02 11 c0       	mov    $0xc01102dd,%eax
c010ea87:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ea8e:	00 
c010ea8f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea93:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ea9a:	00 
c010ea9b:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
c010eaa2:	e8 ad f7 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(37,0x8,(uint32_t)isr_37,0xEE00);
c010eaa7:	b8 e3 02 11 c0       	mov    $0xc01102e3,%eax
c010eaac:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eab3:	00 
c010eab4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eab8:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eabf:	00 
c010eac0:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010eac7:	e8 88 f7 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(38,0x8,(uint32_t)isr_38,0xEE00);
c010eacc:	b8 e9 02 11 c0       	mov    $0xc01102e9,%eax
c010ead1:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ead8:	00 
c010ead9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eadd:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eae4:	00 
c010eae5:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
c010eaec:	e8 63 f7 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(39,0x8,(uint32_t)isr_39,0xEE00);
c010eaf1:	b8 ef 02 11 c0       	mov    $0xc01102ef,%eax
c010eaf6:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eafd:	00 
c010eafe:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb02:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb09:	00 
c010eb0a:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
c010eb11:	e8 3e f7 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(40,0x8,(uint32_t)isr_40,0xEE00);
c010eb16:	b8 f5 02 11 c0       	mov    $0xc01102f5,%eax
c010eb1b:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb22:	00 
c010eb23:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb27:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb2e:	00 
c010eb2f:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
c010eb36:	e8 19 f7 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(41,0x8,(uint32_t)isr_41,0xEE00);
c010eb3b:	b8 fb 02 11 c0       	mov    $0xc01102fb,%eax
c010eb40:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb47:	00 
c010eb48:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb4c:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb53:	00 
c010eb54:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
c010eb5b:	e8 f4 f6 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(42,0x8,(uint32_t)isr_42,0xEE00);
c010eb60:	b8 01 03 11 c0       	mov    $0xc0110301,%eax
c010eb65:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb6c:	00 
c010eb6d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb71:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb78:	00 
c010eb79:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
c010eb80:	e8 cf f6 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(43,0x8,(uint32_t)isr_43,0xEE00);
c010eb85:	b8 07 03 11 c0       	mov    $0xc0110307,%eax
c010eb8a:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010eb91:	00 
c010eb92:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb96:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010eb9d:	00 
c010eb9e:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
c010eba5:	e8 aa f6 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(44,0x8,(uint32_t)isr_44,0xEE00);
c010ebaa:	b8 0d 03 11 c0       	mov    $0xc011030d,%eax
c010ebaf:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ebb6:	00 
c010ebb7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ebbb:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ebc2:	00 
c010ebc3:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c010ebca:	e8 85 f6 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(45,0x8,(uint32_t)isr_45,0xEE00);
c010ebcf:	b8 13 03 11 c0       	mov    $0xc0110313,%eax
c010ebd4:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ebdb:	00 
c010ebdc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ebe0:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ebe7:	00 
c010ebe8:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010ebef:	e8 60 f6 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(46,0x8,(uint32_t)isr_46,0xEE00);
c010ebf4:	b8 19 03 11 c0       	mov    $0xc0110319,%eax
c010ebf9:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ec00:	00 
c010ec01:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec05:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ec0c:	00 
c010ec0d:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
c010ec14:	e8 3b f6 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(47,0x8,(uint32_t)isr_47,0xEE00);
c010ec19:	b8 1f 03 11 c0       	mov    $0xc011031f,%eax
c010ec1e:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ec25:	00 
c010ec26:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec2a:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ec31:	00 
c010ec32:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
c010ec39:	e8 16 f6 ff ff       	call   c010e254 <Set_IDT_Entry>

    Set_IDT_Entry(0x70,0x8,(uint32_t)isr_112,0xEE00); //Universe syscall interface
c010ec3e:	b8 25 03 11 c0       	mov    $0xc0110325,%eax
c010ec43:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ec4a:	00 
c010ec4b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec4f:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ec56:	00 
c010ec57:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010ec5e:	e8 f1 f5 ff ff       	call   c010e254 <Set_IDT_Entry>
    Set_IDT_Entry(0x80,0x8,(uint32_t)isr_128,0xEE00); //Linux syscall interface
c010ec63:	b8 2b 03 11 c0       	mov    $0xc011032b,%eax
c010ec68:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010ec6f:	00 
c010ec70:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ec74:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010ec7b:	00 
c010ec7c:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010ec83:	e8 cc f5 ff ff       	call   c010e254 <Set_IDT_Entry>
    lidt(129);
c010ec88:	c7 04 24 81 00 00 00 	movl   $0x81,(%esp)
c010ec8f:	e8 17 f5 ff ff       	call   c010e1ab <lidt>
}
c010ec94:	c9                   	leave  
c010ec95:	c3                   	ret    

c010ec96 <pd_dump>:
 * @param pointer to the phys. pd frame
 * @return void
 */

void pd_dump(arch_vmm_context_t *context)
{
c010ec96:	55                   	push   %ebp
c010ec97:	89 e5                	mov    %esp,%ebp
c010ec99:	83 ec 48             	sub    $0x48,%esp
    int pdi, pti, phys_base, virt_base, size, sec = 0;
c010ec9c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    uint32_t *pt;
    uint32_t *pd = context->entries;
c010eca3:	8b 45 08             	mov    0x8(%ebp),%eax
c010eca6:	8b 00                	mov    (%eax),%eax
c010eca8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    for( pdi = 0; pdi < PD_LENGTH; pdi++ )
c010ecab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ecb2:	e9 27 02 00 00       	jmp    c010eede <pd_dump+0x248>
    {
        if(sec && (pd[pdi] & 1) == 0)
c010ecb7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010ecbb:	74 63                	je     c010ed20 <pd_dump+0x8a>
c010ecbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecc0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ecc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ecca:	01 d0                	add    %edx,%eax
c010eccc:	8b 00                	mov    (%eax),%eax
c010ecce:	83 e0 01             	and    $0x1,%eax
c010ecd1:	85 c0                	test   %eax,%eax
c010ecd3:	75 4b                	jne    c010ed20 <pd_dump+0x8a>
        {
            printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c010ecd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ecd8:	89 c2                	mov    %eax,%edx
c010ecda:	c1 e2 0c             	shl    $0xc,%edx
c010ecdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ece0:	01 d0                	add    %edx,%eax
c010ece2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ece5:	89 d1                	mov    %edx,%ecx
c010ece7:	c1 e1 0c             	shl    $0xc,%ecx
c010ecea:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010eced:	01 ca                	add    %ecx,%edx
c010ecef:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ecf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ecf6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ecfa:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ecfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ed01:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed05:	c7 04 24 58 26 11 c0 	movl   $0xc0112658,(%esp)
c010ed0c:	e8 6c 44 ff ff       	call   c010317d <printf>
            sec = 0;
c010ed11:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        }

        while( (pd[pdi] & 1) == 0 )
c010ed18:	eb 06                	jmp    c010ed20 <pd_dump+0x8a>
        {
            pdi++;
c010ed1a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ed1e:	eb 01                	jmp    c010ed21 <pd_dump+0x8b>
        {
            printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
            sec = 0;
        }

        while( (pd[pdi] & 1) == 0 )
c010ed20:	90                   	nop
c010ed21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ed2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ed2e:	01 d0                	add    %edx,%eax
c010ed30:	8b 00                	mov    (%eax),%eax
c010ed32:	83 e0 01             	and    $0x1,%eax
c010ed35:	85 c0                	test   %eax,%eax
c010ed37:	74 e1                	je     c010ed1a <pd_dump+0x84>
        {
            pdi++;
        }

        pt = pt_get(context, pdi, 0);
c010ed39:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ed40:	00 
c010ed41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed44:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed48:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed4b:	89 04 24             	mov    %eax,(%esp)
c010ed4e:	e8 bf ee ff ff       	call   c010dc12 <pt_get>
c010ed53:	89 45 d8             	mov    %eax,-0x28(%ebp)

        for( pti = 0; pti < PT_LENGTH; pti++ )
c010ed56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010ed5d:	e9 6b 01 00 00       	jmp    c010eecd <pd_dump+0x237>
        {
            if(sec && (pt[pti] & 1) == 0)
c010ed62:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010ed66:	74 63                	je     c010edcb <pd_dump+0x135>
c010ed68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed6b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ed72:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ed75:	01 d0                	add    %edx,%eax
c010ed77:	8b 00                	mov    (%eax),%eax
c010ed79:	83 e0 01             	and    $0x1,%eax
c010ed7c:	85 c0                	test   %eax,%eax
c010ed7e:	75 4b                	jne    c010edcb <pd_dump+0x135>
            {
                printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c010ed80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ed83:	89 c2                	mov    %eax,%edx
c010ed85:	c1 e2 0c             	shl    $0xc,%edx
c010ed88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ed8b:	01 d0                	add    %edx,%eax
c010ed8d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ed90:	89 d1                	mov    %edx,%ecx
c010ed92:	c1 e1 0c             	shl    $0xc,%ecx
c010ed95:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ed98:	01 ca                	add    %ecx,%edx
c010ed9a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ed9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eda1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010eda5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010eda9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010edac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010edb0:	c7 04 24 58 26 11 c0 	movl   $0xc0112658,(%esp)
c010edb7:	e8 c1 43 ff ff       	call   c010317d <printf>
                sec = 0;
c010edbc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            }

            while( (pt[pti] & 1) == 0 )
c010edc3:	eb 06                	jmp    c010edcb <pd_dump+0x135>
            {
                pti++;
c010edc5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010edc9:	eb 01                	jmp    c010edcc <pd_dump+0x136>
            {
                printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
                sec = 0;
            }

            while( (pt[pti] & 1) == 0 )
c010edcb:	90                   	nop
c010edcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edcf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010edd6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010edd9:	01 d0                	add    %edx,%eax
c010eddb:	8b 00                	mov    (%eax),%eax
c010eddd:	83 e0 01             	and    $0x1,%eax
c010ede0:	85 c0                	test   %eax,%eax
c010ede2:	74 e1                	je     c010edc5 <pd_dump+0x12f>
            {
                pti++;
            }
            if(sec == 0)
c010ede4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010ede8:	75 3f                	jne    c010ee29 <pd_dump+0x193>
            {
                sec = 1;
c010edea:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
                phys_base = ((pt[pti] | 0xfff) ^ 0xfff);
c010edf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010edf4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010edfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010edfe:	01 d0                	add    %edx,%eax
c010ee00:	8b 00                	mov    (%eax),%eax
c010ee02:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010ee07:	89 45 ec             	mov    %eax,-0x14(%ebp)
                virt_base = (pdi << 22) | (pti << 12);
c010ee0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee0d:	89 c2                	mov    %eax,%edx
c010ee0f:	c1 e2 16             	shl    $0x16,%edx
c010ee12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee15:	c1 e0 0c             	shl    $0xc,%eax
c010ee18:	09 d0                	or     %edx,%eax
c010ee1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                size = 0;
c010ee1d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010ee24:	e9 a0 00 00 00       	jmp    c010eec9 <pd_dump+0x233>

            }
            else
            {
                if( (phys_base + (4096 * (size+1) )) == ( (pt[pti] | 0xfff) ^ 0xfff) )
c010ee29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ee2c:	83 c0 01             	add    $0x1,%eax
c010ee2f:	89 c2                	mov    %eax,%edx
c010ee31:	c1 e2 0c             	shl    $0xc,%edx
c010ee34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ee37:	01 d0                	add    %edx,%eax
c010ee39:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ee3c:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
c010ee43:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ee46:	01 ca                	add    %ecx,%edx
c010ee48:	8b 12                	mov    (%edx),%edx
c010ee4a:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c010ee50:	39 d0                	cmp    %edx,%eax
c010ee52:	75 06                	jne    c010ee5a <pd_dump+0x1c4>
                {
                    size++;
c010ee54:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010ee58:	eb 6f                	jmp    c010eec9 <pd_dump+0x233>
                }
                else
                {
                    printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c010ee5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ee5d:	89 c2                	mov    %eax,%edx
c010ee5f:	c1 e2 0c             	shl    $0xc,%edx
c010ee62:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ee65:	01 d0                	add    %edx,%eax
c010ee67:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ee6a:	89 d1                	mov    %edx,%ecx
c010ee6c:	c1 e1 0c             	shl    $0xc,%ecx
c010ee6f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ee72:	01 ca                	add    %ecx,%edx
c010ee74:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ee78:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ee7b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ee7f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ee83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ee86:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ee8a:	c7 04 24 58 26 11 c0 	movl   $0xc0112658,(%esp)
c010ee91:	e8 e7 42 ff ff       	call   c010317d <printf>
                    phys_base = ((pt[pti] | 0xfff) ^ 0xfff);
c010ee96:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee99:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010eea0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010eea3:	01 d0                	add    %edx,%eax
c010eea5:	8b 00                	mov    (%eax),%eax
c010eea7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010eeac:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    virt_base = (pdi << 22) | (pti << 12);
c010eeaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeb2:	89 c2                	mov    %eax,%edx
c010eeb4:	c1 e2 16             	shl    $0x16,%edx
c010eeb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eeba:	c1 e0 0c             	shl    $0xc,%eax
c010eebd:	09 d0                	or     %edx,%eax
c010eebf:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    size = 0;
c010eec2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            pdi++;
        }

        pt = pt_get(context, pdi, 0);

        for( pti = 0; pti < PT_LENGTH; pti++ )
c010eec9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010eecd:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c010eed4:	0f 8e 88 fe ff ff    	jle    c010ed62 <pd_dump+0xcc>
void pd_dump(arch_vmm_context_t *context)
{
    int pdi, pti, phys_base, virt_base, size, sec = 0;
    uint32_t *pt;
    uint32_t *pd = context->entries;
    for( pdi = 0; pdi < PD_LENGTH; pdi++ )
c010eeda:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010eede:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010eee5:	0f 8e cc fd ff ff    	jle    c010ecb7 <pd_dump+0x21>
            }
        }

    }

    if(sec)
c010eeeb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010eeef:	74 3c                	je     c010ef2d <pd_dump+0x297>
    {
        printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c010eef1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010eef4:	89 c2                	mov    %eax,%edx
c010eef6:	c1 e2 0c             	shl    $0xc,%edx
c010eef9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eefc:	01 d0                	add    %edx,%eax
c010eefe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ef01:	89 d1                	mov    %edx,%ecx
c010ef03:	c1 e1 0c             	shl    $0xc,%ecx
c010ef06:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ef09:	01 ca                	add    %ecx,%edx
c010ef0b:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ef0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ef12:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ef16:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ef1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ef1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ef21:	c7 04 24 58 26 11 c0 	movl   $0xc0112658,(%esp)
c010ef28:	e8 50 42 ff ff       	call   c010317d <printf>
    }
}
c010ef2d:	c9                   	leave  
c010ef2e:	c3                   	ret    

c010ef2f <pd_dump2>:

void pd_dump2(arch_vmm_context_t *context)
{
c010ef2f:	55                   	push   %ebp
c010ef30:	89 e5                	mov    %esp,%ebp
c010ef32:	83 ec 58             	sub    $0x58,%esp

#define START 	virt_begin = (pd_index * 1024 + pt_index) * 4096; \
		phys_begin = paddr; \
		size = 1;

    int pd_index = 0;
c010ef35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int pt_index = 0;
c010ef3c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    uint32_t *pd = context->entries;
c010ef43:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef46:	8b 00                	mov    (%eax),%eax
c010ef48:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t *pt = NULL;
c010ef4b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

    uint32_t virt_begin = 0;
c010ef52:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    uint32_t phys_begin = 0;
c010ef59:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    int size = 0;
c010ef60:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    uint32_t entry = 0;
c010ef67:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    uint32_t paddr = 0;
c010ef6e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)

    for(pd_index = 0; pd_index < 1024; pd_index++)
c010ef75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ef7c:	e9 33 02 00 00       	jmp    c010f1b4 <pd_dump2+0x285>
    {
        if(pd[pd_index] & VMM_PRESENT)
c010ef81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef84:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ef8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ef8e:	01 d0                	add    %edx,%eax
c010ef90:	8b 00                	mov    (%eax),%eax
c010ef92:	83 e0 01             	and    $0x1,%eax
c010ef95:	85 c0                	test   %eax,%eax
c010ef97:	0f 84 a2 01 00 00    	je     c010f13f <pd_dump2+0x210>
        {
            pt = pt_get(context, pd_index, VMM_PRESENT);
c010ef9d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010efa4:	00 
c010efa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efa8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010efac:	8b 45 08             	mov    0x8(%ebp),%eax
c010efaf:	89 04 24             	mov    %eax,(%esp)
c010efb2:	e8 5b ec ff ff       	call   c010dc12 <pt_get>
c010efb7:	89 45 dc             	mov    %eax,-0x24(%ebp)

            for(pt_index = 0; pt_index < 1024; pt_index++)
c010efba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010efc1:	e9 6a 01 00 00       	jmp    c010f130 <pd_dump2+0x201>
            {
                entry = pt[pt_index];
c010efc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010efc9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010efd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010efd3:	01 d0                	add    %edx,%eax
c010efd5:	8b 00                	mov    (%eax),%eax
c010efd7:	89 45 d8             	mov    %eax,-0x28(%ebp)
                if(entry & VMM_PRESENT)
c010efda:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010efdd:	83 e0 01             	and    $0x1,%eax
c010efe0:	85 c0                	test   %eax,%eax
c010efe2:	0f 84 d3 00 00 00    	je     c010f0bb <pd_dump2+0x18c>
                {
                    paddr = pt[pt_index] & ~0xfff;
c010efe8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010efeb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010eff2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010eff5:	01 d0                	add    %edx,%eax
c010eff7:	8b 00                	mov    (%eax),%eax
c010eff9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010effe:	89 45 d4             	mov    %eax,-0x2c(%ebp)

                    if(size == 0)
c010f001:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f005:	75 25                	jne    c010f02c <pd_dump2+0xfd>
                    {
                        START
c010f007:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f00a:	89 c2                	mov    %eax,%edx
c010f00c:	c1 e2 0a             	shl    $0xa,%edx
c010f00f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f012:	01 d0                	add    %edx,%eax
c010f014:	c1 e0 0c             	shl    $0xc,%eax
c010f017:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f01a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f01d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f020:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c010f027:	e9 00 01 00 00       	jmp    c010f12c <pd_dump2+0x1fd>
                    }
                    else
                    {
                        if(paddr != phys_begin + size*4096)
c010f02c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f02f:	c1 e0 0c             	shl    $0xc,%eax
c010f032:	89 c2                	mov    %eax,%edx
c010f034:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f037:	01 d0                	add    %edx,%eax
c010f039:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010f03c:	74 77                	je     c010f0b5 <pd_dump2+0x186>
                        {
                            END
c010f03e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f042:	0f 8e e4 00 00 00    	jle    c010f12c <pd_dump2+0x1fd>
c010f048:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c010f04c:	75 1c                	jne    c010f06a <pd_dump2+0x13b>
c010f04e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f051:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f055:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f058:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f05c:	c7 04 24 7c 26 11 c0 	movl   $0xc011267c,(%esp)
c010f063:	e8 15 41 ff ff       	call   c010317d <printf>
c010f068:	eb 42                	jmp    c010f0ac <pd_dump2+0x17d>
c010f06a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f06d:	83 e8 01             	sub    $0x1,%eax
c010f070:	c1 e0 0c             	shl    $0xc,%eax
c010f073:	89 c2                	mov    %eax,%edx
c010f075:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f078:	01 d0                	add    %edx,%eax
c010f07a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f07d:	83 ea 01             	sub    $0x1,%edx
c010f080:	c1 e2 0c             	shl    $0xc,%edx
c010f083:	89 d1                	mov    %edx,%ecx
c010f085:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f088:	01 ca                	add    %ecx,%edx
c010f08a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010f08e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f091:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f095:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f099:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f09c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f0a0:	c7 04 24 58 26 11 c0 	movl   $0xc0112658,(%esp)
c010f0a7:	e8 d1 40 ff ff       	call   c010317d <printf>
c010f0ac:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010f0b3:	eb 77                	jmp    c010f12c <pd_dump2+0x1fd>
                        }
                        else
                        {
                            size++;
c010f0b5:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010f0b9:	eb 71                	jmp    c010f12c <pd_dump2+0x1fd>
                        }
                    }
                }
                else
                {
                    END
c010f0bb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f0bf:	7e 6b                	jle    c010f12c <pd_dump2+0x1fd>
c010f0c1:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c010f0c5:	75 1c                	jne    c010f0e3 <pd_dump2+0x1b4>
c010f0c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f0ca:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f0ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f0d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f0d5:	c7 04 24 7c 26 11 c0 	movl   $0xc011267c,(%esp)
c010f0dc:	e8 9c 40 ff ff       	call   c010317d <printf>
c010f0e1:	eb 42                	jmp    c010f125 <pd_dump2+0x1f6>
c010f0e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f0e6:	83 e8 01             	sub    $0x1,%eax
c010f0e9:	c1 e0 0c             	shl    $0xc,%eax
c010f0ec:	89 c2                	mov    %eax,%edx
c010f0ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f0f1:	01 d0                	add    %edx,%eax
c010f0f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f0f6:	83 ea 01             	sub    $0x1,%edx
c010f0f9:	c1 e2 0c             	shl    $0xc,%edx
c010f0fc:	89 d1                	mov    %edx,%ecx
c010f0fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f101:	01 ca                	add    %ecx,%edx
c010f103:	89 44 24 10          	mov    %eax,0x10(%esp)
c010f107:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f10a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f10e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f112:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f115:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f119:	c7 04 24 58 26 11 c0 	movl   $0xc0112658,(%esp)
c010f120:	e8 58 40 ff ff       	call   c010317d <printf>
c010f125:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    {
        if(pd[pd_index] & VMM_PRESENT)
        {
            pt = pt_get(context, pd_index, VMM_PRESENT);

            for(pt_index = 0; pt_index < 1024; pt_index++)
c010f12c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010f130:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c010f137:	0f 8e 89 fe ff ff    	jle    c010efc6 <pd_dump2+0x97>
c010f13d:	eb 71                	jmp    c010f1b0 <pd_dump2+0x281>
                }
            }
        }
        else
        {
            END
c010f13f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f143:	7e 6b                	jle    c010f1b0 <pd_dump2+0x281>
c010f145:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c010f149:	75 1c                	jne    c010f167 <pd_dump2+0x238>
c010f14b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f14e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f152:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f155:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f159:	c7 04 24 7c 26 11 c0 	movl   $0xc011267c,(%esp)
c010f160:	e8 18 40 ff ff       	call   c010317d <printf>
c010f165:	eb 42                	jmp    c010f1a9 <pd_dump2+0x27a>
c010f167:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f16a:	83 e8 01             	sub    $0x1,%eax
c010f16d:	c1 e0 0c             	shl    $0xc,%eax
c010f170:	89 c2                	mov    %eax,%edx
c010f172:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f175:	01 d0                	add    %edx,%eax
c010f177:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f17a:	83 ea 01             	sub    $0x1,%edx
c010f17d:	c1 e2 0c             	shl    $0xc,%edx
c010f180:	89 d1                	mov    %edx,%ecx
c010f182:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f185:	01 ca                	add    %ecx,%edx
c010f187:	89 44 24 10          	mov    %eax,0x10(%esp)
c010f18b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f18e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f192:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f196:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f199:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f19d:	c7 04 24 58 26 11 c0 	movl   $0xc0112658,(%esp)
c010f1a4:	e8 d4 3f ff ff       	call   c010317d <printf>
c010f1a9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    int size = 0;

    uint32_t entry = 0;
    uint32_t paddr = 0;

    for(pd_index = 0; pd_index < 1024; pd_index++)
c010f1b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f1b4:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010f1bb:	0f 8e c0 fd ff ff    	jle    c010ef81 <pd_dump2+0x52>
        else
        {
            END
        }
    }
}
c010f1c1:	c9                   	leave  
c010f1c2:	c3                   	ret    

c010f1c3 <pmm_count_free_pages>:
/**
 * @brief Returns the number of free pages.
 * @return number of free pages
 */
int pmm_count_free_pages(void)
{
c010f1c3:	55                   	push   %ebp
c010f1c4:	89 e5                	mov    %esp,%ebp
c010f1c6:	56                   	push   %esi
c010f1c7:	53                   	push   %ebx
c010f1c8:	83 ec 10             	sub    $0x10,%esp
    int free_pages = 0;
c010f1cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int i, z;

    for (i = 0; i < PMM_MMAP_SIZE; i++)
c010f1d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010f1d9:	eb 3b                	jmp    c010f216 <pmm_count_free_pages+0x53>
    {
        for (z = 0; z < 32; z++)
c010f1db:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010f1e2:	eb 28                	jmp    c010f20c <pmm_count_free_pages+0x49>
        {
            if (pmm_mmap[i] & (1 << z))
c010f1e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1e7:	8b 14 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%edx
c010f1ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1f1:	bb 01 00 00 00       	mov    $0x1,%ebx
c010f1f6:	89 de                	mov    %ebx,%esi
c010f1f8:	89 c1                	mov    %eax,%ecx
c010f1fa:	d3 e6                	shl    %cl,%esi
c010f1fc:	89 f0                	mov    %esi,%eax
c010f1fe:	21 d0                	and    %edx,%eax
c010f200:	85 c0                	test   %eax,%eax
c010f202:	74 04                	je     c010f208 <pmm_count_free_pages+0x45>
            {
                free_pages++;
c010f204:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    int free_pages = 0;
    int i, z;

    for (i = 0; i < PMM_MMAP_SIZE; i++)
    {
        for (z = 0; z < 32; z++)
c010f208:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010f20c:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c010f210:	7e d2                	jle    c010f1e4 <pmm_count_free_pages+0x21>
int pmm_count_free_pages(void)
{
    int free_pages = 0;
    int i, z;

    for (i = 0; i < PMM_MMAP_SIZE; i++)
c010f212:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010f216:	81 7d f0 ff 7f 00 00 	cmpl   $0x7fff,-0x10(%ebp)
c010f21d:	7e bc                	jle    c010f1db <pmm_count_free_pages+0x18>
            {
                free_pages++;
            }
        }
    }
    return free_pages;
c010f21f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f222:	83 c4 10             	add    $0x10,%esp
c010f225:	5b                   	pop    %ebx
c010f226:	5e                   	pop    %esi
c010f227:	5d                   	pop    %ebp
c010f228:	c3                   	ret    

c010f229 <pmm_check_page>:
 * @brief Checs if the page is already in use or not.
 * @param page the pysical base adress of the page
 * @return 0 = page is already taken; 1 = Page is free
 */
int pmm_check_page(paddr_t page)
{
c010f229:	55                   	push   %ebp
c010f22a:	89 e5                	mov    %esp,%ebp
c010f22c:	56                   	push   %esi
c010f22d:	53                   	push   %ebx
    return pmm_mmap[page / PAGE_SIZE / 32] & (1 << ((page / PAGE_SIZE) & 31));
c010f22e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f231:	c1 e8 11             	shr    $0x11,%eax
c010f234:	8b 14 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%edx
c010f23b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f23e:	c1 e8 0c             	shr    $0xc,%eax
c010f241:	83 e0 1f             	and    $0x1f,%eax
c010f244:	bb 01 00 00 00       	mov    $0x1,%ebx
c010f249:	89 de                	mov    %ebx,%esi
c010f24b:	89 c1                	mov    %eax,%ecx
c010f24d:	d3 e6                	shl    %cl,%esi
c010f24f:	89 f0                	mov    %esi,%eax
c010f251:	21 d0                	and    %edx,%eax
}
c010f253:	5b                   	pop    %ebx
c010f254:	5e                   	pop    %esi
c010f255:	5d                   	pop    %ebp
c010f256:	c3                   	ret    

c010f257 <pmm_check_page_range>:
 * @param page the pysical base adress of the page
 * @param range number of pages to be checked
 * @return 0 = page is already taken; 1 = Page is free
 */
int pmm_check_page_range(paddr_t page, size_t range)
{
c010f257:	55                   	push   %ebp
c010f258:	89 e5                	mov    %esp,%ebp
c010f25a:	83 ec 14             	sub    $0x14,%esp
    int r = 1;
c010f25d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    size_t i;
    for(i=0; i < range; i++)
c010f264:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010f26b:	eb 19                	jmp    c010f286 <pmm_check_page_range+0x2f>
    {
        r &= pmm_check_page(page);
c010f26d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f270:	89 04 24             	mov    %eax,(%esp)
c010f273:	e8 b1 ff ff ff       	call   c010f229 <pmm_check_page>
c010f278:	21 45 fc             	and    %eax,-0x4(%ebp)
        page += PAGE_SIZE;
c010f27b:	81 45 08 00 10 00 00 	addl   $0x1000,0x8(%ebp)
 */
int pmm_check_page_range(paddr_t page, size_t range)
{
    int r = 1;
    size_t i;
    for(i=0; i < range; i++)
c010f282:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c010f286:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010f289:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f28c:	72 df                	jb     c010f26d <pmm_check_page_range+0x16>
    {
        r &= pmm_check_page(page);
        page += PAGE_SIZE;
    }
    return r;
c010f28e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010f291:	c9                   	leave  
c010f292:	c3                   	ret    

c010f293 <pmm_mark_page_as_free>:
/**
 * @brief Mark page als free.
 * @param page pointer on the begin of the page which should be marked as free.
 */
void pmm_mark_page_as_free(paddr_t page)
{
c010f293:	55                   	push   %ebp
c010f294:	89 e5                	mov    %esp,%ebp
c010f296:	57                   	push   %edi
c010f297:	56                   	push   %esi
c010f298:	53                   	push   %ebx
    //TODO: should that be possible from the entire kernel?
    pmm_mmap[page / PAGE_SIZE / 32] |= 1 << ((page / PAGE_SIZE) & 31);
c010f299:	8b 45 08             	mov    0x8(%ebp),%eax
c010f29c:	c1 e8 11             	shr    $0x11,%eax
c010f29f:	8b 1c 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%ebx
c010f2a6:	8b 55 08             	mov    0x8(%ebp),%edx
c010f2a9:	c1 ea 0c             	shr    $0xc,%edx
c010f2ac:	83 e2 1f             	and    $0x1f,%edx
c010f2af:	be 01 00 00 00       	mov    $0x1,%esi
c010f2b4:	89 f7                	mov    %esi,%edi
c010f2b6:	89 d1                	mov    %edx,%ecx
c010f2b8:	d3 e7                	shl    %cl,%edi
c010f2ba:	89 fa                	mov    %edi,%edx
c010f2bc:	09 da                	or     %ebx,%edx
c010f2be:	89 14 85 60 a0 11 c0 	mov    %edx,-0x3fee5fa0(,%eax,4)
}
c010f2c5:	5b                   	pop    %ebx
c010f2c6:	5e                   	pop    %esi
c010f2c7:	5f                   	pop    %edi
c010f2c8:	5d                   	pop    %ebp
c010f2c9:	c3                   	ret    

c010f2ca <pmm_mark_page_range_as_free>:
 * @brief Mark num pages as free.
 * @param page pointer on the begin of the first page.
 * @param num number of the pages which should be marked as free.
 */
void pmm_mark_page_range_as_free(paddr_t page, unsigned int num)
{
c010f2ca:	55                   	push   %ebp
c010f2cb:	89 e5                	mov    %esp,%ebp
c010f2cd:	83 ec 28             	sub    $0x28,%esp
    int i;

    if (!num)
c010f2d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f2d4:	75 0c                	jne    c010f2e2 <pmm_mark_page_range_as_free+0x18>
        panic("PMM: pmm_mark_page_range_as_free(): num is zero");
c010f2d6:	c7 04 24 90 26 11 c0 	movl   $0xc0112690,(%esp)
c010f2dd:	e8 83 cd ff ff       	call   c010c065 <panic>

    if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
c010f2e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2e5:	89 c2                	mov    %eax,%edx
c010f2e7:	c1 ea 0c             	shr    $0xc,%edx
c010f2ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f2ed:	01 d0                	add    %edx,%eax
c010f2ef:	3d 00 00 10 00       	cmp    $0x100000,%eax
c010f2f4:	76 0c                	jbe    c010f302 <pmm_mark_page_range_as_free+0x38>
        panic("PMM: pmm_mark_page_range_as_free(): marking the given\n"
c010f2f6:	c7 04 24 c0 26 11 c0 	movl   $0xc01126c0,(%esp)
c010f2fd:	e8 63 cd ff ff       	call   c010c065 <panic>
              "pages as free would cause a buffer overrun");


    for (i = 0; i < num; i++)
c010f302:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f309:	eb 19                	jmp    c010f324 <pmm_mark_page_range_as_free+0x5a>
    {
        pmm_mark_page_as_free(page + i * PAGE_SIZE);
c010f30b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f30e:	c1 e0 0c             	shl    $0xc,%eax
c010f311:	89 c2                	mov    %eax,%edx
c010f313:	8b 45 08             	mov    0x8(%ebp),%eax
c010f316:	01 d0                	add    %edx,%eax
c010f318:	89 04 24             	mov    %eax,(%esp)
c010f31b:	e8 73 ff ff ff       	call   c010f293 <pmm_mark_page_as_free>
    if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
        panic("PMM: pmm_mark_page_range_as_free(): marking the given\n"
              "pages as free would cause a buffer overrun");


    for (i = 0; i < num; i++)
c010f320:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f324:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f327:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f32a:	72 df                	jb     c010f30b <pmm_mark_page_range_as_free+0x41>
    {
        pmm_mark_page_as_free(page + i * PAGE_SIZE);
    }
}
c010f32c:	c9                   	leave  
c010f32d:	c3                   	ret    

c010f32e <pmm_mark_page_as_used>:
/**
 * @brief Mark page as used.
 * @param page pointer on the begin of the first page.
 */
void pmm_mark_page_as_used(paddr_t page)
{
c010f32e:	55                   	push   %ebp
c010f32f:	89 e5                	mov    %esp,%ebp
c010f331:	57                   	push   %edi
c010f332:	56                   	push   %esi
c010f333:	53                   	push   %ebx
    pmm_mmap[page / PAGE_SIZE / 32] &= ~(1 << ((page / PAGE_SIZE) & 31));
c010f334:	8b 45 08             	mov    0x8(%ebp),%eax
c010f337:	c1 e8 11             	shr    $0x11,%eax
c010f33a:	8b 1c 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%ebx
c010f341:	8b 55 08             	mov    0x8(%ebp),%edx
c010f344:	c1 ea 0c             	shr    $0xc,%edx
c010f347:	83 e2 1f             	and    $0x1f,%edx
c010f34a:	be 01 00 00 00       	mov    $0x1,%esi
c010f34f:	89 f7                	mov    %esi,%edi
c010f351:	89 d1                	mov    %edx,%ecx
c010f353:	d3 e7                	shl    %cl,%edi
c010f355:	89 fa                	mov    %edi,%edx
c010f357:	f7 d2                	not    %edx
c010f359:	21 da                	and    %ebx,%edx
c010f35b:	89 14 85 60 a0 11 c0 	mov    %edx,-0x3fee5fa0(,%eax,4)
}
c010f362:	5b                   	pop    %ebx
c010f363:	5e                   	pop    %esi
c010f364:	5f                   	pop    %edi
c010f365:	5d                   	pop    %ebp
c010f366:	c3                   	ret    

c010f367 <pmm_mark_page_range_as_used>:
 * @brief Mark num pages as used.
 * @param page pointer on the begin of the first page.
 * @param num number of the pages which should be marked as free.
 */
void pmm_mark_page_range_as_used(paddr_t page, unsigned int num)
{
c010f367:	55                   	push   %ebp
c010f368:	89 e5                	mov    %esp,%ebp
c010f36a:	83 ec 28             	sub    $0x28,%esp
    int i;

    if (!num)
c010f36d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f371:	75 0c                	jne    c010f37f <pmm_mark_page_range_as_used+0x18>
        panic("PMM: pmm_mark_page_range_as_used(): num is zero");
c010f373:	c7 04 24 24 27 11 c0 	movl   $0xc0112724,(%esp)
c010f37a:	e8 e6 cc ff ff       	call   c010c065 <panic>

    /*
     * PMM is broken, see comment in PMM_INIT
     */
    if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
c010f37f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f382:	89 c2                	mov    %eax,%edx
c010f384:	c1 ea 0c             	shr    $0xc,%edx
c010f387:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f38a:	01 d0                	add    %edx,%eax
c010f38c:	3d 00 00 10 00       	cmp    $0x100000,%eax
c010f391:	76 0c                	jbe    c010f39f <pmm_mark_page_range_as_used+0x38>
        panic("PMM: pmm_mark_page_range_as_used(): marking the given\n"
c010f393:	c7 04 24 54 27 11 c0 	movl   $0xc0112754,(%esp)
c010f39a:	e8 c6 cc ff ff       	call   c010c065 <panic>
              "pages as used would cause a buffer overrun");

    for (i = 0; i < num; i++)
c010f39f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f3a6:	eb 19                	jmp    c010f3c1 <pmm_mark_page_range_as_used+0x5a>
    {
        pmm_mark_page_as_used(page + i * PAGE_SIZE);
c010f3a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3ab:	c1 e0 0c             	shl    $0xc,%eax
c010f3ae:	89 c2                	mov    %eax,%edx
c010f3b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3b3:	01 d0                	add    %edx,%eax
c010f3b5:	89 04 24             	mov    %eax,(%esp)
c010f3b8:	e8 71 ff ff ff       	call   c010f32e <pmm_mark_page_as_used>
     */
    if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
        panic("PMM: pmm_mark_page_range_as_used(): marking the given\n"
              "pages as used would cause a buffer overrun");

    for (i = 0; i < num; i++)
c010f3bd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f3c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f3c7:	72 df                	jb     c010f3a8 <pmm_mark_page_range_as_used+0x41>
    {
        pmm_mark_page_as_used(page + i * PAGE_SIZE);
    }
}
c010f3c9:	c9                   	leave  
c010f3ca:	c3                   	ret    

c010f3cb <pmm_find_free_page>:
 * @brief Search for a free page and returns a pointer on the begin.
 * @param lower_limit minimus size of the page.
 * @return If the search is succesful this method returns a pointer on the begin on this page.
 */
paddr_t pmm_find_free_page(unsigned long lower_limit)
{
c010f3cb:	55                   	push   %ebp
c010f3cc:	89 e5                	mov    %esp,%ebp
c010f3ce:	56                   	push   %esi
c010f3cf:	53                   	push   %ebx
c010f3d0:	83 ec 20             	sub    $0x20,%esp
    uint32_t i, z;
    paddr_t page = 0;
c010f3d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    i = lower_limit / PAGE_SIZE / 32;
c010f3da:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3dd:	c1 e8 11             	shr    $0x11,%eax
c010f3e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pmm_mmap[i] & (0xffffffff << (( lower_limit / PAGE_SIZE) % 32)))
c010f3e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3e6:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f3ed:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3f0:	c1 ea 0c             	shr    $0xc,%edx
c010f3f3:	83 e2 1f             	and    $0x1f,%edx
c010f3f6:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
c010f3fb:	89 de                	mov    %ebx,%esi
c010f3fd:	89 d1                	mov    %edx,%ecx
c010f3ff:	d3 e6                	shl    %cl,%esi
c010f401:	89 f2                	mov    %esi,%edx
c010f403:	21 d0                	and    %edx,%eax
c010f405:	85 c0                	test   %eax,%eax
c010f407:	74 45                	je     c010f44e <pmm_find_free_page+0x83>
    {
        z = bit_scan_forward(pmm_mmap[i] & (0xffffffff << ((lower_limit / PAGE_SIZE) % 32)));
c010f409:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f40c:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f413:	8b 55 08             	mov    0x8(%ebp),%edx
c010f416:	c1 ea 0c             	shr    $0xc,%edx
c010f419:	83 e2 1f             	and    $0x1f,%edx
c010f41c:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
c010f421:	89 de                	mov    %ebx,%esi
c010f423:	89 d1                	mov    %edx,%ecx
c010f425:	d3 e6                	shl    %cl,%esi
c010f427:	89 f2                	mov    %esi,%edx
c010f429:	21 d0                	and    %edx,%eax
c010f42b:	89 04 24             	mov    %eax,(%esp)
c010f42e:	e8 d9 2e ff ff       	call   c010230c <bit_scan_forward>
c010f433:	89 45 ec             	mov    %eax,-0x14(%ebp)
        page = (i * 32 + z) * PAGE_SIZE;
c010f436:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f439:	89 c2                	mov    %eax,%edx
c010f43b:	c1 e2 05             	shl    $0x5,%edx
c010f43e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f441:	01 d0                	add    %edx,%eax
c010f443:	c1 e0 0c             	shl    $0xc,%eax
c010f446:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return page;
c010f449:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f44c:	eb 53                	jmp    c010f4a1 <pmm_find_free_page+0xd6>
    }

    for (i++; i < PMM_MMAP_SIZE; i++)
c010f44e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f452:	eb 3f                	jmp    c010f493 <pmm_find_free_page+0xc8>
    {
        if (pmm_mmap[i])
c010f454:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f457:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f45e:	85 c0                	test   %eax,%eax
c010f460:	74 2d                	je     c010f48f <pmm_find_free_page+0xc4>
        {
            z = bit_scan_forward(pmm_mmap[i]);
c010f462:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f465:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f46c:	89 04 24             	mov    %eax,(%esp)
c010f46f:	e8 98 2e ff ff       	call   c010230c <bit_scan_forward>
c010f474:	89 45 ec             	mov    %eax,-0x14(%ebp)
            page = (i * 32 + z) * PAGE_SIZE;
c010f477:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f47a:	89 c2                	mov    %eax,%edx
c010f47c:	c1 e2 05             	shl    $0x5,%edx
c010f47f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f482:	01 d0                	add    %edx,%eax
c010f484:	c1 e0 0c             	shl    $0xc,%eax
c010f487:	89 45 f0             	mov    %eax,-0x10(%ebp)
            return page;
c010f48a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f48d:	eb 12                	jmp    c010f4a1 <pmm_find_free_page+0xd6>
        z = bit_scan_forward(pmm_mmap[i] & (0xffffffff << ((lower_limit / PAGE_SIZE) % 32)));
        page = (i * 32 + z) * PAGE_SIZE;
        return page;
    }

    for (i++; i < PMM_MMAP_SIZE; i++)
c010f48f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f493:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c010f49a:	76 b8                	jbe    c010f454 <pmm_find_free_page+0x89>
            return page;
        }
    }

    /* checked in the alloc functions */
    return -1;
c010f49c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010f4a1:	83 c4 20             	add    $0x20,%esp
c010f4a4:	5b                   	pop    %ebx
c010f4a5:	5e                   	pop    %esi
c010f4a6:	5d                   	pop    %ebp
c010f4a7:	c3                   	ret    

c010f4a8 <pmm_find_free_page_range>:
 * @param num Number of pages.
 * @return Pointer on begin of the first page.
 * If succesful this method will return a pointer on the begin of the first free page.
 */
paddr_t pmm_find_free_page_range(unsigned long lower_limit, unsigned int num)
{
c010f4a8:	55                   	push   %ebp
c010f4a9:	89 e5                	mov    %esp,%ebp
c010f4ab:	56                   	push   %esi
c010f4ac:	53                   	push   %ebx
c010f4ad:	83 ec 20             	sub    $0x20,%esp
    uint32_t i, z;
    uint32_t found = 0;
c010f4b0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    paddr_t page = 0;
c010f4b7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

    if (!num)
c010f4be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f4c2:	75 0c                	jne    c010f4d0 <pmm_find_free_page_range+0x28>
        panic("PMM: searching 0 pages (find_free_page_range())");
c010f4c4:	c7 04 24 b8 27 11 c0 	movl   $0xc01127b8,(%esp)
c010f4cb:	e8 95 cb ff ff       	call   c010c065 <panic>

    for (i = lower_limit / PAGE_SIZE / 32; i < PMM_MMAP_SIZE; i++)
c010f4d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4d3:	c1 e8 11             	shr    $0x11,%eax
c010f4d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f4d9:	e9 d2 00 00 00       	jmp    c010f5b0 <pmm_find_free_page_range+0x108>
    {
        printf("%i\n", i);
c010f4de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f4e5:	c7 04 24 e8 27 11 c0 	movl   $0xc01127e8,(%esp)
c010f4ec:	e8 8c 3c ff ff       	call   c010317d <printf>
        if (pmm_mmap[i] == 0)
c010f4f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4f4:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f4fb:	85 c0                	test   %eax,%eax
c010f4fd:	75 0c                	jne    c010f50b <pmm_find_free_page_range+0x63>
        {
            found = 0;
c010f4ff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
            continue;
c010f506:	e9 a1 00 00 00       	jmp    c010f5ac <pmm_find_free_page_range+0x104>
        }

        if (pmm_mmap[i] == 0xffffffff)
c010f50b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f50e:	8b 04 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%eax
c010f515:	83 f8 ff             	cmp    $0xffffffff,%eax
c010f518:	75 15                	jne    c010f52f <pmm_find_free_page_range+0x87>
        {
            if (found == 0)
c010f51a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f51e:	75 09                	jne    c010f529 <pmm_find_free_page_range+0x81>
            {
                page = (i * 32) * PAGE_SIZE; //
c010f520:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f523:	c1 e0 11             	shl    $0x11,%eax
c010f526:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            found += 32;
c010f529:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010f52d:	eb 70                	jmp    c010f59f <pmm_find_free_page_range+0xf7>

        }
        else
        {
            printf("bar\n");
c010f52f:	c7 04 24 ec 27 11 c0 	movl   $0xc01127ec,(%esp)
c010f536:	e8 6f c7 ff ff       	call   c010bcaa <puts>
            for (z = 0; z < 32; z++)
c010f53b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010f542:	eb 55                	jmp    c010f599 <pmm_find_free_page_range+0xf1>
            {
                if (pmm_mmap[i] & (1 << z))
c010f544:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f547:	8b 14 85 60 a0 11 c0 	mov    -0x3fee5fa0(,%eax,4),%edx
c010f54e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f551:	bb 01 00 00 00       	mov    $0x1,%ebx
c010f556:	89 de                	mov    %ebx,%esi
c010f558:	89 c1                	mov    %eax,%ecx
c010f55a:	d3 e6                	shl    %cl,%esi
c010f55c:	89 f0                	mov    %esi,%eax
c010f55e:	21 d0                	and    %edx,%eax
c010f560:	85 c0                	test   %eax,%eax
c010f562:	74 2a                	je     c010f58e <pmm_find_free_page_range+0xe6>
                {
                    if (found == 0)
c010f564:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f568:	75 13                	jne    c010f57d <pmm_find_free_page_range+0xd5>
                    {
                        page = (i * 32 + z) * PAGE_SIZE;
c010f56a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f56d:	89 c2                	mov    %eax,%edx
c010f56f:	c1 e2 05             	shl    $0x5,%edx
c010f572:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f575:	01 d0                	add    %edx,%eax
c010f577:	c1 e0 0c             	shl    $0xc,%eax
c010f57a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    }
                    found++;
c010f57d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)

                    if (found >= num)
c010f581:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f584:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f587:	72 0c                	jb     c010f595 <pmm_find_free_page_range+0xed>
                    {
                        return page;
c010f589:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f58c:	eb 34                	jmp    c010f5c2 <pmm_find_free_page_range+0x11a>
                    }
                }
                else
                {
                    found = 0;
c010f58e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

        }
        else
        {
            printf("bar\n");
            for (z = 0; z < 32; z++)
c010f595:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010f599:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010f59d:	76 a5                	jbe    c010f544 <pmm_find_free_page_range+0x9c>
                    found = 0;
                }
            }
        }

        if (found >= num)
c010f59f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f5a2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f5a5:	72 05                	jb     c010f5ac <pmm_find_free_page_range+0x104>
        {
            return page;
c010f5a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f5aa:	eb 16                	jmp    c010f5c2 <pmm_find_free_page_range+0x11a>
    paddr_t page = 0;

    if (!num)
        panic("PMM: searching 0 pages (find_free_page_range())");

    for (i = lower_limit / PAGE_SIZE / 32; i < PMM_MMAP_SIZE; i++)
c010f5ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f5b0:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c010f5b7:	0f 86 21 ff ff ff    	jbe    c010f4de <pmm_find_free_page_range+0x36>
        {
            return page;
        }
    }

    return -1; /* checked in the alloc functions */
c010f5bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010f5c2:	83 c4 20             	add    $0x20,%esp
c010f5c5:	5b                   	pop    %ebx
c010f5c6:	5e                   	pop    %esi
c010f5c7:	5d                   	pop    %ebp
c010f5c8:	c3                   	ret    

c010f5c9 <pmm_alloc_page>:
/**
 * @brief Reserve a page and mark this page as used.
 * @return Pointer on the begin of the page.
 */
paddr_t pmm_alloc_page(void)
{
c010f5c9:	55                   	push   %ebp
c010f5ca:	89 e5                	mov    %esp,%ebp
c010f5cc:	83 ec 28             	sub    $0x28,%esp
    paddr_t page = pmm_find_free_page(PMM_DMA_LIMIT);
c010f5cf:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
c010f5d6:	e8 f0 fd ff ff       	call   c010f3cb <pmm_find_free_page>
c010f5db:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (page & (PAGE_SIZE - 1))
c010f5de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5e1:	25 ff 0f 00 00       	and    $0xfff,%eax
c010f5e6:	85 c0                	test   %eax,%eax
c010f5e8:	74 0c                	je     c010f5f6 <pmm_alloc_page+0x2d>
    {
        panic("PMM: pmm_alloc_page(): no pages left");
c010f5ea:	c7 04 24 f0 27 11 c0 	movl   $0xc01127f0,(%esp)
c010f5f1:	e8 6f ca ff ff       	call   c010c065 <panic>
    }
    pmm_mark_page_as_used(page);
c010f5f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5f9:	89 04 24             	mov    %eax,(%esp)
c010f5fc:	e8 2d fd ff ff       	call   c010f32e <pmm_mark_page_as_used>

    return page;
c010f601:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f604:	c9                   	leave  
c010f605:	c3                   	ret    

c010f606 <pmm_alloc_page_limit>:
 * @brief Reserve a page not under a entered address
 * @param lower_limit the lower limit
 * @return Pointer on the begin of the allocated page.
 */
paddr_t pmm_alloc_page_limit(paddr_t lower_limit)
{
c010f606:	55                   	push   %ebp
c010f607:	89 e5                	mov    %esp,%ebp
c010f609:	83 ec 28             	sub    $0x28,%esp
    paddr_t page = pmm_find_free_page(lower_limit);
c010f60c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f60f:	89 04 24             	mov    %eax,(%esp)
c010f612:	e8 b4 fd ff ff       	call   c010f3cb <pmm_find_free_page>
c010f617:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (page & (PAGE_SIZE - 1))
c010f61a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f61d:	25 ff 0f 00 00       	and    $0xfff,%eax
c010f622:	85 c0                	test   %eax,%eax
c010f624:	74 0c                	je     c010f632 <pmm_alloc_page_limit+0x2c>
    {
        panic("PMM: pmm_alloc_page_limit(): no pages left");
c010f626:	c7 04 24 18 28 11 c0 	movl   $0xc0112818,(%esp)
c010f62d:	e8 33 ca ff ff       	call   c010c065 <panic>
    }

    pmm_mark_page_as_used(page);
c010f632:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f635:	89 04 24             	mov    %eax,(%esp)
c010f638:	e8 f1 fc ff ff       	call   c010f32e <pmm_mark_page_as_used>
    return page;
c010f63d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f640:	c9                   	leave  
c010f641:	c3                   	ret    

c010f642 <pmm_alloc_dma_page_range>:
 * @brief Reserve num DMA-Pages.
 * @param num the number of pages to be allocated
 * @return Pointer on the begin of the first page.
 */
paddr_t pmm_alloc_dma_page_range(unsigned int num)
{
c010f642:	55                   	push   %ebp
c010f643:	89 e5                	mov    %esp,%ebp
c010f645:	83 ec 28             	sub    $0x28,%esp
    if (!num)
c010f648:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f64c:	75 0c                	jne    c010f65a <pmm_alloc_dma_page_range+0x18>
        panic("PMM: pmm_alloc_dma_page_range(): num zero");
c010f64e:	c7 04 24 44 28 11 c0 	movl   $0xc0112844,(%esp)
c010f655:	e8 0b ca ff ff       	call   c010c065 <panic>
    paddr_t page = pmm_find_free_page_range(0, num);
c010f65a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f65d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f661:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010f668:	e8 3b fe ff ff       	call   c010f4a8 <pmm_find_free_page_range>
c010f66d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page & (PAGE_SIZE - 1) || page >= PMM_DMA_LIMIT)
c010f670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f673:	25 ff 0f 00 00       	and    $0xfff,%eax
c010f678:	85 c0                	test   %eax,%eax
c010f67a:	75 09                	jne    c010f685 <pmm_alloc_dma_page_range+0x43>
c010f67c:	81 7d f4 ff ff ff 00 	cmpl   $0xffffff,-0xc(%ebp)
c010f683:	76 0c                	jbe    c010f691 <pmm_alloc_dma_page_range+0x4f>
    {
        panic("PMM: pmm_alloc_dma_page_range(): no DMA memory left");
c010f685:	c7 04 24 70 28 11 c0 	movl   $0xc0112870,(%esp)
c010f68c:	e8 d4 c9 ff ff       	call   c010c065 <panic>
    }
    pmm_mark_page_range_as_used(page, num);
c010f691:	8b 45 08             	mov    0x8(%ebp),%eax
c010f694:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f698:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f69b:	89 04 24             	mov    %eax,(%esp)
c010f69e:	e8 c4 fc ff ff       	call   c010f367 <pmm_mark_page_range_as_used>
    return page;
c010f6a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f6a6:	c9                   	leave  
c010f6a7:	c3                   	ret    

c010f6a8 <pmm_alloc_page_range>:
/**
 * @brief Reserve num pages.
 * @return Pointer on the begin of the first page.
 */
paddr_t pmm_alloc_page_range(unsigned int num)
{
c010f6a8:	55                   	push   %ebp
c010f6a9:	89 e5                	mov    %esp,%ebp
c010f6ab:	83 ec 28             	sub    $0x28,%esp
    if (!num)
c010f6ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f6b2:	75 0c                	jne    c010f6c0 <pmm_alloc_page_range+0x18>
        panic("PMM: pmm_alloc_page_range(): num zero");
c010f6b4:	c7 04 24 a4 28 11 c0 	movl   $0xc01128a4,(%esp)
c010f6bb:	e8 a5 c9 ff ff       	call   c010c065 <panic>
    paddr_t page = pmm_find_free_page_range(PMM_DMA_LIMIT, num);
c010f6c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f6c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f6c7:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
c010f6ce:	e8 d5 fd ff ff       	call   c010f4a8 <pmm_find_free_page_range>
c010f6d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page & (PAGE_SIZE - 1))
c010f6d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6d9:	25 ff 0f 00 00       	and    $0xfff,%eax
c010f6de:	85 c0                	test   %eax,%eax
c010f6e0:	74 0c                	je     c010f6ee <pmm_alloc_page_range+0x46>
    {
        panic("PMM: pmm_alloc_page_range(): no memory left");
c010f6e2:	c7 04 24 cc 28 11 c0 	movl   $0xc01128cc,(%esp)
c010f6e9:	e8 77 c9 ff ff       	call   c010c065 <panic>
    }
    pmm_mark_page_range_as_used(page, num);
c010f6ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010f6f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f6f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6f8:	89 04 24             	mov    %eax,(%esp)
c010f6fb:	e8 67 fc ff ff       	call   c010f367 <pmm_mark_page_range_as_used>
    return page;
c010f700:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f703:	c9                   	leave  
c010f704:	c3                   	ret    

c010f705 <INIT_PMM>:
 * @brief Initiates the PMM module.
 * @param mb_info the multiboot info struct for module protection
 */

void INIT_PMM(struct multiboot_struct *mb_info)
{
c010f705:	55                   	push   %ebp
c010f706:	89 e5                	mov    %esp,%ebp
c010f708:	83 ec 48             	sub    $0x48,%esp
    int i;
    for (i = 0; i < PMM_MMAP_SIZE; i++)
c010f70b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f712:	eb 12                	jmp    c010f726 <INIT_PMM+0x21>
    {
        pmm_mmap[i] = 0;
c010f714:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f717:	c7 04 85 60 a0 11 c0 	movl   $0x0,-0x3fee5fa0(,%eax,4)
c010f71e:	00 00 00 00 
 */

void INIT_PMM(struct multiboot_struct *mb_info)
{
    int i;
    for (i = 0; i < PMM_MMAP_SIZE; i++)
c010f722:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f726:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c010f72d:	7e e5                	jle    c010f714 <INIT_PMM+0xf>
    {
        pmm_mmap[i] = 0;
    }

    mb_info->mmap_addr += MEMORY_LAYOUT_KERNEL_START;
c010f72f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f732:	8b 40 30             	mov    0x30(%eax),%eax
c010f735:	8d 90 00 00 00 c0    	lea    -0x40000000(%eax),%edx
c010f73b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f73e:	89 50 30             	mov    %edx,0x30(%eax)
    mb_info->mods_addr += MEMORY_LAYOUT_KERNEL_START;
c010f741:	8b 45 08             	mov    0x8(%ebp),%eax
c010f744:	8b 40 18             	mov    0x18(%eax),%eax
c010f747:	8d 90 00 00 00 c0    	lea    -0x40000000(%eax),%edx
c010f74d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f750:	89 50 18             	mov    %edx,0x18(%eax)

    struct mmap_entry *mmap = (struct mmap_entry *)mb_info->mmap_addr;
c010f753:	8b 45 08             	mov    0x8(%ebp),%eax
c010f756:	8b 40 30             	mov    0x30(%eax),%eax
c010f759:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int len = 0;
c010f75c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for(i = 0; len < mb_info->mmap_length; i++)
c010f763:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f76a:	e9 90 00 00 00       	jmp    c010f7ff <INIT_PMM+0xfa>
    {
        len += mmap[i].size +4;
c010f76f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f772:	89 d0                	mov    %edx,%eax
c010f774:	01 c0                	add    %eax,%eax
c010f776:	01 d0                	add    %edx,%eax
c010f778:	c1 e0 03             	shl    $0x3,%eax
c010f77b:	89 c2                	mov    %eax,%edx
c010f77d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f780:	01 d0                	add    %edx,%eax
c010f782:	8b 10                	mov    (%eax),%edx
c010f784:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f787:	01 d0                	add    %edx,%eax
c010f789:	83 c0 04             	add    $0x4,%eax
c010f78c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if(mmap[i].Type == 1)
c010f78f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f792:	89 d0                	mov    %edx,%eax
c010f794:	01 c0                	add    %eax,%eax
c010f796:	01 d0                	add    %edx,%eax
c010f798:	c1 e0 03             	shl    $0x3,%eax
c010f79b:	89 c2                	mov    %eax,%edx
c010f79d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7a0:	01 d0                	add    %edx,%eax
c010f7a2:	8b 40 14             	mov    0x14(%eax),%eax
c010f7a5:	83 f8 01             	cmp    $0x1,%eax
c010f7a8:	75 51                	jne    c010f7fb <INIT_PMM+0xf6>
        {
            uintptr_t addr = mmap[i].BaseAddr;
c010f7aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f7ad:	89 d0                	mov    %edx,%eax
c010f7af:	01 c0                	add    %eax,%eax
c010f7b1:	01 d0                	add    %edx,%eax
c010f7b3:	c1 e0 03             	shl    $0x3,%eax
c010f7b6:	89 c2                	mov    %eax,%edx
c010f7b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7bb:	01 d0                	add    %edx,%eax
c010f7bd:	8b 50 08             	mov    0x8(%eax),%edx
c010f7c0:	8b 40 04             	mov    0x4(%eax),%eax
c010f7c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
            int pages = mmap[i].Length / PAGE_SIZE;
c010f7c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f7c9:	89 d0                	mov    %edx,%eax
c010f7cb:	01 c0                	add    %eax,%eax
c010f7cd:	01 d0                	add    %edx,%eax
c010f7cf:	c1 e0 03             	shl    $0x3,%eax
c010f7d2:	89 c2                	mov    %eax,%edx
c010f7d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f7d7:	01 d0                	add    %edx,%eax
c010f7d9:	8b 50 10             	mov    0x10(%eax),%edx
c010f7dc:	8b 40 0c             	mov    0xc(%eax),%eax
c010f7df:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010f7e3:	c1 ea 0c             	shr    $0xc,%edx
c010f7e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            pmm_mark_page_range_as_free(addr, pages);
c010f7e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f7ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f7f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f7f3:	89 04 24             	mov    %eax,(%esp)
c010f7f6:	e8 cf fa ff ff       	call   c010f2ca <pmm_mark_page_range_as_free>
    mb_info->mods_addr += MEMORY_LAYOUT_KERNEL_START;

    struct mmap_entry *mmap = (struct mmap_entry *)mb_info->mmap_addr;

    int len = 0;
    for(i = 0; len < mb_info->mmap_length; i++)
c010f7fb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f7ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f802:	8b 45 08             	mov    0x8(%ebp),%eax
c010f805:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f808:	39 c2                	cmp    %eax,%edx
c010f80a:	0f 82 5f ff ff ff    	jb     c010f76f <INIT_PMM+0x6a>
            pmm_mark_page_range_as_free(addr, pages);
        }
    }

    //protect Memory structures
    pmm_mark_page_as_used(0); //IVT+BDA
c010f810:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010f817:	e8 12 fb ff ff       	call   c010f32e <pmm_mark_page_as_used>

    uint16_t* EBDA_p = (void *)0x040E;
c010f81c:	c7 45 e0 0e 04 00 00 	movl   $0x40e,-0x20(%ebp)
    pmm_mark_page_as_used((paddr_t)EBDA_p[0] << 4); //EBDA
c010f823:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f826:	0f b7 00             	movzwl (%eax),%eax
c010f829:	0f b7 c0             	movzwl %ax,%eax
c010f82c:	c1 e0 04             	shl    $0x4,%eax
c010f82f:	89 04 24             	mov    %eax,(%esp)
c010f832:	e8 f7 fa ff ff       	call   c010f32e <pmm_mark_page_as_used>

    uint16_t* BDA_size = (uint16_t*)0x0413;
c010f837:	c7 45 dc 13 04 00 00 	movl   $0x413,-0x24(%ebp)
    pmm_mark_page_as_used((BDA_size[0] / 4) * 1024); //FPS (maybe)
c010f83e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f841:	0f b7 00             	movzwl (%eax),%eax
c010f844:	66 c1 e8 02          	shr    $0x2,%ax
c010f848:	0f b7 c0             	movzwl %ax,%eax
c010f84b:	c1 e0 0a             	shl    $0xa,%eax
c010f84e:	89 04 24             	mov    %eax,(%esp)
c010f851:	e8 d8 fa ff ff       	call   c010f32e <pmm_mark_page_as_used>
    pmm_mark_page_range_as_used(0xA0000, 96); //0xA0000 - 0xFFFFF ROM-AREA
c010f856:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c010f85d:	00 
c010f85e:	c7 04 24 00 00 0a 00 	movl   $0xa0000,(%esp)
c010f865:	e8 fd fa ff ff       	call   c010f367 <pmm_mark_page_range_as_used>


    //multiboot structures
    struct mods_add *mods = (void*)mb_info->mods_addr;
c010f86a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f86d:	8b 40 18             	mov    0x18(%eax),%eax
c010f870:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pmm_mark_page_as_used((paddr_t)mb_info - MEMORY_LAYOUT_KERNEL_START);
c010f873:	8b 45 08             	mov    0x8(%ebp),%eax
c010f876:	05 00 00 00 40       	add    $0x40000000,%eax
c010f87b:	89 04 24             	mov    %eax,(%esp)
c010f87e:	e8 ab fa ff ff       	call   c010f32e <pmm_mark_page_as_used>
    pmm_mark_page_as_used((paddr_t)mods    - MEMORY_LAYOUT_KERNEL_START);
c010f883:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f886:	05 00 00 00 40       	add    $0x40000000,%eax
c010f88b:	89 04 24             	mov    %eax,(%esp)
c010f88e:	e8 9b fa ff ff       	call   c010f32e <pmm_mark_page_as_used>

    //multiboot modules
    for (i = 0; i < mb_info->mods_count; i++)
c010f893:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f89a:	eb 75                	jmp    c010f911 <INIT_PMM+0x20c>
    {
        uint32_t size = mods[i].mod_end - mods[i].mod_start;
c010f89c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f89f:	89 c2                	mov    %eax,%edx
c010f8a1:	c1 e2 04             	shl    $0x4,%edx
c010f8a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f8a7:	01 d0                	add    %edx,%eax
c010f8a9:	8b 50 04             	mov    0x4(%eax),%edx
c010f8ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8af:	89 c1                	mov    %eax,%ecx
c010f8b1:	c1 e1 04             	shl    $0x4,%ecx
c010f8b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f8b7:	01 c8                	add    %ecx,%eax
c010f8b9:	8b 00                	mov    (%eax),%eax
c010f8bb:	89 d1                	mov    %edx,%ecx
c010f8bd:	29 c1                	sub    %eax,%ecx
c010f8bf:	89 c8                	mov    %ecx,%eax
c010f8c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        int pages = NUM_PAGES(size);
c010f8c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f8c7:	05 ff 0f 00 00       	add    $0xfff,%eax
c010f8cc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010f8d1:	c1 e8 0c             	shr    $0xc,%eax
c010f8d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
        pmm_mark_page_range_as_used((paddr_t) mods[i].mod_start, pages);
c010f8d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f8da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8dd:	89 c1                	mov    %eax,%ecx
c010f8df:	c1 e1 04             	shl    $0x4,%ecx
c010f8e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f8e5:	01 c8                	add    %ecx,%eax
c010f8e7:	8b 00                	mov    (%eax),%eax
c010f8e9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f8ed:	89 04 24             	mov    %eax,(%esp)
c010f8f0:	e8 72 fa ff ff       	call   c010f367 <pmm_mark_page_range_as_used>
        pmm_mark_page_as_used((paddr_t) mods[i].string);
c010f8f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f8f8:	89 c2                	mov    %eax,%edx
c010f8fa:	c1 e2 04             	shl    $0x4,%edx
c010f8fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f900:	01 d0                	add    %edx,%eax
c010f902:	8b 40 08             	mov    0x8(%eax),%eax
c010f905:	89 04 24             	mov    %eax,(%esp)
c010f908:	e8 21 fa ff ff       	call   c010f32e <pmm_mark_page_as_used>
    struct mods_add *mods = (void*)mb_info->mods_addr;
    pmm_mark_page_as_used((paddr_t)mb_info - MEMORY_LAYOUT_KERNEL_START);
    pmm_mark_page_as_used((paddr_t)mods    - MEMORY_LAYOUT_KERNEL_START);

    //multiboot modules
    for (i = 0; i < mb_info->mods_count; i++)
c010f90d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f911:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f914:	8b 45 08             	mov    0x8(%ebp),%eax
c010f917:	8b 40 14             	mov    0x14(%eax),%eax
c010f91a:	39 c2                	cmp    %eax,%edx
c010f91c:	0f 82 7a ff ff ff    	jb     c010f89c <INIT_PMM+0x197>
        int pages = NUM_PAGES(size);
        pmm_mark_page_range_as_used((paddr_t) mods[i].mod_start, pages);
        pmm_mark_page_as_used((paddr_t) mods[i].string);
    }

    if (! (mb_info->flags & 0x1))
c010f922:	8b 45 08             	mov    0x8(%ebp),%eax
c010f925:	8b 00                	mov    (%eax),%eax
c010f927:	83 e0 01             	and    $0x1,%eax
c010f92a:	85 c0                	test   %eax,%eax
c010f92c:	75 0c                	jne    c010f93a <INIT_PMM+0x235>
    {
        panic("PMM_INIT: no ram info in multiboot structure");
c010f92e:	c7 04 24 f8 28 11 c0 	movl   $0xc01128f8,(%esp)
c010f935:	e8 2b c7 ff ff       	call   c010c065 <panic>
    }

}
c010f93a:	c9                   	leave  
c010f93b:	c3                   	ret    

c010f93c <cpuid>:
 * @param uint32_t cpuid function number
 * @param pointer to output register structure
 * @return sucess (0=sucess, 1=CPUID is not supported)
 */
static void cpuid(uint32_t function,struct cpuid_regs* output)
{
c010f93c:	55                   	push   %ebp
c010f93d:	89 e5                	mov    %esp,%ebp
c010f93f:	56                   	push   %esi
c010f940:	53                   	push   %ebx
c010f941:	83 ec 04             	sub    $0x4,%esp
    asm volatile("cpuid":"=a" (output->eax), "=b"(output->ebx),"=c"(output->ecx),"=d"(output->edx):"a"(function));
c010f944:	8b 45 08             	mov    0x8(%ebp),%eax
c010f947:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f94a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f94d:	0f a2                	cpuid  
c010f94f:	89 c6                	mov    %eax,%esi
c010f951:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f954:	89 30                	mov    %esi,(%eax)
c010f956:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f959:	89 58 04             	mov    %ebx,0x4(%eax)
c010f95c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f95f:	89 48 08             	mov    %ecx,0x8(%eax)
c010f962:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f965:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010f968:	83 c4 04             	add    $0x4,%esp
c010f96b:	5b                   	pop    %ebx
c010f96c:	5e                   	pop    %esi
c010f96d:	5d                   	pop    %ebp
c010f96e:	c3                   	ret    

c010f96f <identify_cpu>:
 * Identify curret CPU
 * @param pointer to 128byte free bytes for cpu_prpoerties struct
 * @return sucess (0=sucess, 1=CPUID is not supported)
 */
int identify_cpu(struct cpu_properties *cpu)
{
c010f96f:	55                   	push   %ebp
c010f970:	89 e5                	mov    %esp,%ebp
c010f972:	57                   	push   %edi
c010f973:	56                   	push   %esi
c010f974:	53                   	push   %ebx
c010f975:	83 ec 4c             	sub    $0x4c,%esp
    int ref,eflags;
    asm volatile(
c010f978:	9c                   	pushf  
c010f979:	59                   	pop    %ecx
c010f97a:	89 c8                	mov    %ecx,%eax
c010f97c:	35 00 00 20 00       	xor    $0x200000,%eax
c010f981:	50                   	push   %eax
c010f982:	9d                   	popf   
c010f983:	9c                   	pushf  
c010f984:	58                   	pop    %eax
c010f985:	89 cb                	mov    %ecx,%ebx
c010f987:	89 c6                	mov    %eax,%esi
c010f989:	89 75 e0             	mov    %esi,-0x20(%ebp)
c010f98c:	89 5d dc             	mov    %ebx,-0x24(%ebp)
        "popfl;"
        "pushfl;"
        "pop %%eax;"
        :"=a"(eflags), "=c"(ref):
    );
    if (eflags == ref)
c010f98f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f992:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010f995:	75 13                	jne    c010f9aa <identify_cpu+0x3b>
        //cpuid is not supported
    {
        cpu->cpuid_support = false;
c010f997:	8b 45 08             	mov    0x8(%ebp),%eax
c010f99a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        return 1;
c010f9a0:	b8 01 00 00 00       	mov    $0x1,%eax
c010f9a5:	e9 31 04 00 00       	jmp    c010fddb <identify_cpu+0x46c>
    }

    //cpuid is supported
    cpu->cpuid_support = true;
c010f9aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9ad:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    //create struct for processor registers
    struct cpuid_regs reg;
    uint32_t i;

    //call cpuid 0
    cpuid(0, &reg);
c010f9b3:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010f9b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f9ba:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010f9c1:	e8 76 ff ff ff       	call   c010f93c <cpuid>

    // copy vendor string
    strncpy(cpu->vendor_id    , (char*) &reg.ebx, 4);
c010f9c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9c9:	83 c0 10             	add    $0x10,%eax
c010f9cc:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010f9d3:	00 
c010f9d4:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010f9d7:	83 c2 04             	add    $0x4,%edx
c010f9da:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f9de:	89 04 24             	mov    %eax,(%esp)
c010f9e1:	e8 bb 30 ff ff       	call   c0102aa1 <strncpy>
    strncpy(cpu->vendor_id + 4, (char*) &reg.edx, 4);
c010f9e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9e9:	83 c0 14             	add    $0x14,%eax
c010f9ec:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010f9f3:	00 
c010f9f4:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010f9f7:	83 c2 0c             	add    $0xc,%edx
c010f9fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f9fe:	89 04 24             	mov    %eax,(%esp)
c010fa01:	e8 9b 30 ff ff       	call   c0102aa1 <strncpy>
    strncpy(cpu->vendor_id + 8, (char*) &reg.ecx, 4);
c010fa06:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa09:	83 c0 18             	add    $0x18,%eax
c010fa0c:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010fa13:	00 
c010fa14:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010fa17:	83 c2 08             	add    $0x8,%edx
c010fa1a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010fa1e:	89 04 24             	mov    %eax,(%esp)
c010fa21:	e8 7b 30 ff ff       	call   c0102aa1 <strncpy>

    // identify manufactory
    for (i = 0; strncmp(cpu->vendor_id, vendorID[i], 12) && i < 15; i++) {}
c010fa26:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010fa2d:	eb 04                	jmp    c010fa33 <identify_cpu+0xc4>
c010fa2f:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010fa33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fa36:	8b 04 85 60 34 11 c0 	mov    -0x3feecba0(,%eax,4),%eax
c010fa3d:	8b 55 08             	mov    0x8(%ebp),%edx
c010fa40:	83 c2 10             	add    $0x10,%edx
c010fa43:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
c010fa4a:	00 
c010fa4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa4f:	89 14 24             	mov    %edx,(%esp)
c010fa52:	e8 7c 31 ff ff       	call   c0102bd3 <strncmp>
c010fa57:	85 c0                	test   %eax,%eax
c010fa59:	74 06                	je     c010fa61 <identify_cpu+0xf2>
c010fa5b:	83 7d e4 0e          	cmpl   $0xe,-0x1c(%ebp)
c010fa5f:	76 ce                	jbe    c010fa2f <identify_cpu+0xc0>
    cpu->manufactory = i;
c010fa61:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010fa67:	89 50 04             	mov    %edx,0x4(%eax)

    // save number of basic identify functions
    cpu->max_std_func = reg.eax;
c010fa6a:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010fa6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa70:	89 50 08             	mov    %edx,0x8(%eax)

    // get and save maximum numbers of extendet identify functions
    cpuid(0x80000000, &reg);
c010fa73:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fa76:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa7a:	c7 04 24 00 00 00 80 	movl   $0x80000000,(%esp)
c010fa81:	e8 b6 fe ff ff       	call   c010f93c <cpuid>
    cpu->max_spec_func = reg.eax;
c010fa86:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010fa89:	8b 45 08             	mov    0x8(%ebp),%eax
c010fa8c:	89 50 0c             	mov    %edx,0xc(%eax)


    cpuid(1, &reg);
c010fa8f:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fa92:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa96:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010fa9d:	e8 9a fe ff ff       	call   c010f93c <cpuid>
    // get CPU model and Family
    cpu->family     = ((reg.eax & 0x0FF00000) >> 16) | ((reg.eax & 0x00000F00) >> 8);
c010faa2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010faa5:	25 00 00 f0 0f       	and    $0xff00000,%eax
c010faaa:	c1 e8 10             	shr    $0x10,%eax
c010faad:	89 c2                	mov    %eax,%edx
c010faaf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fab2:	25 00 0f 00 00       	and    $0xf00,%eax
c010fab7:	c1 e8 08             	shr    $0x8,%eax
c010faba:	09 c2                	or     %eax,%edx
c010fabc:	8b 45 08             	mov    0x8(%ebp),%eax
c010fabf:	88 50 1d             	mov    %dl,0x1d(%eax)
    cpu->model      = ((reg.eax & 0x000F0000) >> 12) | ((reg.eax & 0x000000F0) >> 4);
c010fac2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fac5:	25 00 00 0f 00       	and    $0xf0000,%eax
c010faca:	c1 e8 0c             	shr    $0xc,%eax
c010facd:	89 c2                	mov    %eax,%edx
c010facf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fad2:	25 f0 00 00 00       	and    $0xf0,%eax
c010fad7:	c1 e8 04             	shr    $0x4,%eax
c010fada:	09 c2                	or     %eax,%edx
c010fadc:	8b 45 08             	mov    0x8(%ebp),%eax
c010fadf:	88 50 1e             	mov    %dl,0x1e(%eax)
    cpu->stepping   =  reg.eax & 0x0000000F;
c010fae2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010fae5:	89 c2                	mov    %eax,%edx
c010fae7:	83 e2 0f             	and    $0xf,%edx
c010faea:	8b 45 08             	mov    0x8(%ebp),%eax
c010faed:	88 50 1f             	mov    %dl,0x1f(%eax)
    cpu->type       = (reg.eax & 0x00003000) >> 12;
c010faf0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010faf3:	25 00 30 00 00       	and    $0x3000,%eax
c010faf8:	c1 e8 0c             	shr    $0xc,%eax
c010fafb:	89 c2                	mov    %eax,%edx
c010fafd:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb00:	88 50 20             	mov    %dl,0x20(%eax)

    cpu->brandID     = (uint8_t) reg.ebx;
c010fb03:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fb06:	89 c2                	mov    %eax,%edx
c010fb08:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb0b:	88 50 21             	mov    %dl,0x21(%eax)
    cpu->clflush     = (uint8_t) (reg.ebx >> 8);
c010fb0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fb11:	c1 e8 08             	shr    $0x8,%eax
c010fb14:	89 c2                	mov    %eax,%edx
c010fb16:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb19:	88 50 22             	mov    %dl,0x22(%eax)
    cpu->logic_cores = (uint8_t) (reg.ebx >> 16);
c010fb1c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fb1f:	c1 e8 10             	shr    $0x10,%eax
c010fb22:	89 c2                	mov    %eax,%edx
c010fb24:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb27:	88 50 23             	mov    %dl,0x23(%eax)
    cpu->APIC_ID     = (uint8_t) (reg.ebx >> 24);
c010fb2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fb2d:	c1 e8 18             	shr    $0x18,%eax
c010fb30:	89 c2                	mov    %eax,%edx
c010fb32:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb35:	88 50 2e             	mov    %dl,0x2e(%eax)



    cpu->flagblock0 = reg.ecx;
c010fb38:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010fb3b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb3e:	89 50 68             	mov    %edx,0x68(%eax)
    cpu->flagblock1 = reg.edx;
c010fb41:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fb44:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb47:	89 50 6c             	mov    %edx,0x6c(%eax)

    if(cpu->max_spec_func > 0x80000000)
c010fb4a:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb4d:	8b 40 0c             	mov    0xc(%eax),%eax
c010fb50:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c010fb55:	76 39                	jbe    c010fb90 <identify_cpu+0x221>
    {
        cpuid(0x80000001, &reg);
c010fb57:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fb5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fb5e:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c010fb65:	e8 d2 fd ff ff       	call   c010f93c <cpuid>
        if((( reg.edx & (1 << 29) ) >> 29) && cpu->flagblock1 & PAE )
c010fb6a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fb6d:	25 00 00 00 20       	and    $0x20000000,%eax
c010fb72:	c1 e8 1d             	shr    $0x1d,%eax
c010fb75:	85 c0                	test   %eax,%eax
c010fb77:	74 17                	je     c010fb90 <identify_cpu+0x221>
c010fb79:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb7c:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fb7f:	83 e0 40             	and    $0x40,%eax
c010fb82:	85 c0                	test   %eax,%eax
c010fb84:	74 0a                	je     c010fb90 <identify_cpu+0x221>
        {
            cpu->LM = true;
c010fb86:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb89:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
        }
    }

    if (cpu->flagblock1 & (1 << 30))
c010fb90:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb93:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fb96:	25 00 00 00 40       	and    $0x40000000,%eax
c010fb9b:	85 c0                	test   %eax,%eax
c010fb9d:	74 22                	je     c010fbc1 <identify_cpu+0x252>
    {
        if(cpu->LM)
c010fb9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010fba2:	8b 40 24             	mov    0x24(%eax),%eax
c010fba5:	85 c0                	test   %eax,%eax
c010fba7:	74 0c                	je     c010fbb5 <identify_cpu+0x246>
            cpu->architecture = IA64;
c010fba9:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbac:	c7 40 30 00 00 00 40 	movl   $0x40000000,0x30(%eax)
c010fbb3:	eb 2c                	jmp    c010fbe1 <identify_cpu+0x272>
        else
            cpu->architecture = IA32;
c010fbb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbb8:	c7 40 30 02 00 00 00 	movl   $0x2,0x30(%eax)
c010fbbf:	eb 20                	jmp    c010fbe1 <identify_cpu+0x272>
    }
    else
    {
        if(cpu->LM)
c010fbc1:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbc4:	8b 40 24             	mov    0x24(%eax),%eax
c010fbc7:	85 c0                	test   %eax,%eax
c010fbc9:	74 0c                	je     c010fbd7 <identify_cpu+0x268>
            cpu->architecture = AMD64;
c010fbcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbce:	c7 40 30 01 00 00 00 	movl   $0x1,0x30(%eax)
c010fbd5:	eb 0a                	jmp    c010fbe1 <identify_cpu+0x272>
        else
            cpu->architecture = I386;
c010fbd7:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbda:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)




    //Detect Dynamic Syscall
    if (cpu->flagblock1 & SEP && cpu->manufactory == 2)
c010fbe1:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbe4:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fbe7:	25 00 08 00 00       	and    $0x800,%eax
c010fbec:	85 c0                	test   %eax,%eax
c010fbee:	74 17                	je     c010fc07 <identify_cpu+0x298>
c010fbf0:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbf3:	8b 40 04             	mov    0x4(%eax),%eax
c010fbf6:	83 f8 02             	cmp    $0x2,%eax
c010fbf9:	75 0c                	jne    c010fc07 <identify_cpu+0x298>
    {
        cpu->dsysc = sysenter;
c010fbfb:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbfe:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
c010fc05:	eb 50                	jmp    c010fc57 <identify_cpu+0x2e8>
    }
    else if (cpu->flagblock1 & SEP && cpu->manufactory < 2 && cpu->max_spec_func > 0x80000000)
c010fc07:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc0a:	8b 40 6c             	mov    0x6c(%eax),%eax
c010fc0d:	25 00 08 00 00       	and    $0x800,%eax
c010fc12:	85 c0                	test   %eax,%eax
c010fc14:	74 41                	je     c010fc57 <identify_cpu+0x2e8>
c010fc16:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc19:	8b 40 04             	mov    0x4(%eax),%eax
c010fc1c:	83 f8 01             	cmp    $0x1,%eax
c010fc1f:	77 36                	ja     c010fc57 <identify_cpu+0x2e8>
c010fc21:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc24:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc27:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c010fc2c:	76 29                	jbe    c010fc57 <identify_cpu+0x2e8>
    {
        cpuid(0x80000001,&reg);
c010fc2e:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fc31:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc35:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c010fc3c:	e8 fb fc ff ff       	call   c010f93c <cpuid>
        if (reg.edx & 0x1000)
c010fc41:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fc44:	25 00 10 00 00       	and    $0x1000,%eax
c010fc49:	85 c0                	test   %eax,%eax
c010fc4b:	74 0a                	je     c010fc57 <identify_cpu+0x2e8>
        {
            cpu->dsysc = syscall;
c010fc4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc50:	c7 40 28 02 00 00 00 	movl   $0x2,0x28(%eax)
        }
    }

    //get extended BrandID
    if (cpu->max_spec_func > 0x80000000)
c010fc57:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc5a:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc5d:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c010fc62:	76 21                	jbe    c010fc85 <identify_cpu+0x316>
    {
        cpuid(0x80000001, &reg);
c010fc64:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fc67:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc6b:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c010fc72:	e8 c5 fc ff ff       	call   c010f93c <cpuid>
        cpu->ext_brandID = (uint16_t)reg.ebx;
c010fc77:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fc7a:	89 c2                	mov    %eax,%edx
c010fc7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc7f:	66 89 50 2c          	mov    %dx,0x2c(%eax)
c010fc83:	eb 09                	jmp    c010fc8e <identify_cpu+0x31f>
    }
    else
    {
        cpu->ext_brandID = 0x3e;
c010fc85:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc88:	66 c7 40 2c 3e 00    	movw   $0x3e,0x2c(%eax)
    }


    //Get CPU name/series
    if (cpu->max_spec_func > 0x80000004)   // via Brand String
c010fc8e:	8b 45 08             	mov    0x8(%ebp),%eax
c010fc91:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc94:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c010fc99:	76 5a                	jbe    c010fcf5 <identify_cpu+0x386>
    {
        for (i=0x80000002; i<=0x80000004; i++)
c010fc9b:	c7 45 e4 02 00 00 80 	movl   $0x80000002,-0x1c(%ebp)
c010fca2:	eb 43                	jmp    c010fce7 <identify_cpu+0x378>
        {
            cpuid(i,&reg);
c010fca4:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010fca7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fcab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fcae:	89 04 24             	mov    %eax,(%esp)
c010fcb1:	e8 86 fc ff ff       	call   c010f93c <cpuid>
            memcpy((cpu->cpu_type+(i-0x80000002)*16),((void*)&reg),16);
c010fcb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fcb9:	05 fe ff ff 0f       	add    $0xffffffe,%eax
c010fcbe:	c1 e0 04             	shl    $0x4,%eax
c010fcc1:	8d 50 30             	lea    0x30(%eax),%edx
c010fcc4:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcc7:	01 d0                	add    %edx,%eax
c010fcc9:	83 c0 04             	add    $0x4,%eax
c010fccc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010fccf:	89 10                	mov    %edx,(%eax)
c010fcd1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fcd4:	89 50 04             	mov    %edx,0x4(%eax)
c010fcd7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010fcda:	89 50 08             	mov    %edx,0x8(%eax)
c010fcdd:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fce0:	89 50 0c             	mov    %edx,0xc(%eax)


    //Get CPU name/series
    if (cpu->max_spec_func > 0x80000004)   // via Brand String
    {
        for (i=0x80000002; i<=0x80000004; i++)
c010fce3:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010fce7:	81 7d e4 04 00 00 80 	cmpl   $0x80000004,-0x1c(%ebp)
c010fcee:	76 b4                	jbe    c010fca4 <identify_cpu+0x335>
c010fcf0:	e9 e1 00 00 00       	jmp    c010fdd6 <identify_cpu+0x467>
            memcpy((cpu->cpu_type+(i-0x80000002)*16),((void*)&reg),16);
        }

    }

    else if(cpu->family == 6 && cpu->model == 3 && cpu->stepping == 3)
c010fcf5:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcf8:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c010fcfc:	3c 06                	cmp    $0x6,%al
c010fcfe:	75 6d                	jne    c010fd6d <identify_cpu+0x3fe>
c010fd00:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd03:	0f b6 40 1e          	movzbl 0x1e(%eax),%eax
c010fd07:	3c 03                	cmp    $0x3,%al
c010fd09:	75 62                	jne    c010fd6d <identify_cpu+0x3fe>
c010fd0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd0e:	0f b6 40 1f          	movzbl 0x1f(%eax),%eax
c010fd12:	3c 03                	cmp    $0x3,%al
c010fd14:	75 57                	jne    c010fd6d <identify_cpu+0x3fe>
    {
        strcat(cpu->cpu_type,"Quemu ");
c010fd16:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd19:	8d 58 34             	lea    0x34(%eax),%ebx
c010fd1c:	89 d8                	mov    %ebx,%eax
c010fd1e:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
c010fd25:	89 c2                	mov    %eax,%edx
c010fd27:	b8 00 00 00 00       	mov    $0x0,%eax
c010fd2c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010fd2f:	89 d7                	mov    %edx,%edi
c010fd31:	f2 ae                	repnz scas %es:(%edi),%al
c010fd33:	89 c8                	mov    %ecx,%eax
c010fd35:	f7 d0                	not    %eax
c010fd37:	83 e8 01             	sub    $0x1,%eax
c010fd3a:	01 d8                	add    %ebx,%eax
c010fd3c:	c7 00 51 75 65 6d    	movl   $0x6d657551,(%eax)
c010fd42:	66 c7 40 04 75 20    	movw   $0x2075,0x4(%eax)
c010fd48:	c6 40 06 00          	movb   $0x0,0x6(%eax)
        strcat(cpu->cpu_type,architecture[cpu->architecture]);
c010fd4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd4f:	8b 40 30             	mov    0x30(%eax),%eax
c010fd52:	8b 04 85 e8 34 11 c0 	mov    -0x3feecb18(,%eax,4),%eax
c010fd59:	8b 55 08             	mov    0x8(%ebp),%edx
c010fd5c:	83 c2 34             	add    $0x34,%edx
c010fd5f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd63:	89 14 24             	mov    %edx,(%esp)
c010fd66:	e8 9b 2d ff ff       	call   c0102b06 <strcat>
c010fd6b:	eb 69                	jmp    c010fdd6 <identify_cpu+0x467>
    }

    else
    {
        //standart name
        strcpy(cpu->cpu_type,cpu_manufactorys[cpu->manufactory]);
c010fd6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd70:	8b 40 04             	mov    0x4(%eax),%eax
c010fd73:	8b 04 85 a0 34 11 c0 	mov    -0x3feecb60(,%eax,4),%eax
c010fd7a:	8b 55 08             	mov    0x8(%ebp),%edx
c010fd7d:	83 c2 34             	add    $0x34,%edx
c010fd80:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd84:	89 14 24             	mov    %edx,(%esp)
c010fd87:	e8 c4 2c ff ff       	call   c0102a50 <strcpy>
        strcat(cpu->cpu_type," ");
c010fd8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd8f:	8d 58 34             	lea    0x34(%eax),%ebx
c010fd92:	89 d8                	mov    %ebx,%eax
c010fd94:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
c010fd9b:	89 c2                	mov    %eax,%edx
c010fd9d:	b8 00 00 00 00       	mov    $0x0,%eax
c010fda2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010fda5:	89 d7                	mov    %edx,%edi
c010fda7:	f2 ae                	repnz scas %es:(%edi),%al
c010fda9:	89 c8                	mov    %ecx,%eax
c010fdab:	f7 d0                	not    %eax
c010fdad:	83 e8 01             	sub    $0x1,%eax
c010fdb0:	01 d8                	add    %ebx,%eax
c010fdb2:	66 c7 00 20 00       	movw   $0x20,(%eax)
        strcat(cpu->cpu_type,architecture[cpu->architecture]);
c010fdb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdba:	8b 40 30             	mov    0x30(%eax),%eax
c010fdbd:	8b 04 85 e8 34 11 c0 	mov    -0x3feecb18(,%eax,4),%eax
c010fdc4:	8b 55 08             	mov    0x8(%ebp),%edx
c010fdc7:	83 c2 34             	add    $0x34,%edx
c010fdca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fdce:	89 14 24             	mov    %edx,(%esp)
c010fdd1:	e8 30 2d ff ff       	call   c0102b06 <strcat>
    }

    return 0;
c010fdd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fddb:	83 c4 4c             	add    $0x4c,%esp
c010fdde:	5b                   	pop    %ebx
c010fddf:	5e                   	pop    %esi
c010fde0:	5f                   	pop    %edi
c010fde1:	5d                   	pop    %ebp
c010fde2:	c3                   	ret    

c010fde3 <CPU_info>:
/*
 * prints CPU Information (not much)
 * @return void
 */
void CPU_info(struct cpu_properties *cpu)
{
c010fde3:	55                   	push   %ebp
c010fde4:	89 e5                	mov    %esp,%ebp
c010fde6:	83 ec 18             	sub    $0x18,%esp
    if (cpu->cpuid_support==true)
c010fde9:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdec:	8b 00                	mov    (%eax),%eax
c010fdee:	83 f8 01             	cmp    $0x1,%eax
c010fdf1:	0f 85 34 01 00 00    	jne    c010ff2b <CPU_info+0x148>
    {
        printf("CPU Manufactory: %s\n",cpu_manufactorys[cpu->manufactory]);
c010fdf7:	8b 45 08             	mov    0x8(%ebp),%eax
c010fdfa:	8b 40 04             	mov    0x4(%eax),%eax
c010fdfd:	8b 04 85 a0 34 11 c0 	mov    -0x3feecb60(,%eax,4),%eax
c010fe04:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe08:	c7 04 24 6d 2a 11 c0 	movl   $0xc0112a6d,(%esp)
c010fe0f:	e8 69 33 ff ff       	call   c010317d <printf>
        printf("Architecture: %s\n",architecture[cpu->architecture]);
c010fe14:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe17:	8b 40 30             	mov    0x30(%eax),%eax
c010fe1a:	8b 04 85 e8 34 11 c0 	mov    -0x3feecb18(,%eax,4),%eax
c010fe21:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe25:	c7 04 24 82 2a 11 c0 	movl   $0xc0112a82,(%esp)
c010fe2c:	e8 4c 33 ff ff       	call   c010317d <printf>
        printf("CPU Model: %s\n",cpu->cpu_type);
c010fe31:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe34:	83 c0 34             	add    $0x34,%eax
c010fe37:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe3b:	c7 04 24 94 2a 11 c0 	movl   $0xc0112a94,(%esp)
c010fe42:	e8 36 33 ff ff       	call   c010317d <printf>
        printf("Family: %d  Model: %d  Stepping: %d\n",cpu->family,cpu->model,cpu->stepping);
c010fe47:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe4a:	0f b6 40 1f          	movzbl 0x1f(%eax),%eax
c010fe4e:	0f b6 c8             	movzbl %al,%ecx
c010fe51:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe54:	0f b6 40 1e          	movzbl 0x1e(%eax),%eax
c010fe58:	0f b6 d0             	movzbl %al,%edx
c010fe5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe5e:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c010fe62:	0f b6 c0             	movzbl %al,%eax
c010fe65:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010fe69:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fe6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe71:	c7 04 24 a4 2a 11 c0 	movl   $0xc0112aa4,(%esp)
c010fe78:	e8 00 33 ff ff       	call   c010317d <printf>
        printf("Logical CPUs: %d\n",cpu->logic_cores);
c010fe7d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe80:	0f b6 40 23          	movzbl 0x23(%eax),%eax
c010fe84:	0f b6 c0             	movzbl %al,%eax
c010fe87:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fe8b:	c7 04 24 c9 2a 11 c0 	movl   $0xc0112ac9,(%esp)
c010fe92:	e8 e6 32 ff ff       	call   c010317d <printf>
        printf("FB0: %#08x  FB1: %#08x\n",cpu->flagblock0, cpu->flagblock1);
c010fe97:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe9a:	8b 50 6c             	mov    0x6c(%eax),%edx
c010fe9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fea0:	8b 40 68             	mov    0x68(%eax),%eax
c010fea3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fea7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010feab:	c7 04 24 db 2a 11 c0 	movl   $0xc0112adb,(%esp)
c010feb2:	e8 c6 32 ff ff       	call   c010317d <printf>
        printf("Dynamic Syscall: %s\n",scall[cpu->dsysc]);
c010feb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010feba:	8b 40 28             	mov    0x28(%eax),%eax
c010febd:	8b 04 85 dc 34 11 c0 	mov    -0x3feecb24(,%eax,4),%eax
c010fec4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fec8:	c7 04 24 f3 2a 11 c0 	movl   $0xc0112af3,(%esp)
c010fecf:	e8 a9 32 ff ff       	call   c010317d <printf>

        if(cpu->flagblock1 & CLFLSH)
c010fed4:	8b 45 08             	mov    0x8(%ebp),%eax
c010fed7:	8b 40 6c             	mov    0x6c(%eax),%eax
c010feda:	25 00 00 08 00       	and    $0x80000,%eax
c010fedf:	85 c0                	test   %eax,%eax
c010fee1:	74 1d                	je     c010ff00 <CPU_info+0x11d>
        {
            printf("clflush size: %dB\n",cpu->clflush*8);
c010fee3:	8b 45 08             	mov    0x8(%ebp),%eax
c010fee6:	0f b6 40 22          	movzbl 0x22(%eax),%eax
c010feea:	0f b6 c0             	movzbl %al,%eax
c010feed:	c1 e0 03             	shl    $0x3,%eax
c010fef0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fef4:	c7 04 24 08 2b 11 c0 	movl   $0xc0112b08,(%esp)
c010fefb:	e8 7d 32 ff ff       	call   c010317d <printf>
        }
        if(cpu->flagblock1 & ACPI)
c010ff00:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff03:	8b 40 6c             	mov    0x6c(%eax),%eax
c010ff06:	25 00 00 40 00       	and    $0x400000,%eax
c010ff0b:	85 c0                	test   %eax,%eax
c010ff0d:	74 28                	je     c010ff37 <CPU_info+0x154>
        {
            printf("APIC ID: %d\n", cpu->APIC_ID);
c010ff0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff12:	0f b6 40 2e          	movzbl 0x2e(%eax),%eax
c010ff16:	0f b6 c0             	movzbl %al,%eax
c010ff19:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ff1d:	c7 04 24 1b 2b 11 c0 	movl   $0xc0112b1b,(%esp)
c010ff24:	e8 54 32 ff ff       	call   c010317d <printf>
c010ff29:	eb 0c                	jmp    c010ff37 <CPU_info+0x154>
    }

    else

    {
        printf("current cpu does not support CPUID\n");
c010ff2b:	c7 04 24 28 2b 11 c0 	movl   $0xc0112b28,(%esp)
c010ff32:	e8 73 bd ff ff       	call   c010bcaa <puts>
    }
}
c010ff37:	c9                   	leave  
c010ff38:	c3                   	ret    

c010ff39 <INIT_CPUID>:
/*
 * Creates structures containing CPU Informations
 * @return void
 */
void INIT_CPUID(void)
{
c010ff39:	55                   	push   %ebp
c010ff3a:	89 e5                	mov    %esp,%ebp
c010ff3c:	83 ec 18             	sub    $0x18,%esp
    identify_cpu((struct cpu_properties *)&current_CPU);
c010ff3f:	c7 04 24 60 a0 13 c0 	movl   $0xc013a060,(%esp)
c010ff46:	e8 24 fa ff ff       	call   c010f96f <identify_cpu>
    CPU_info((struct cpu_properties *)&current_CPU);
c010ff4b:	c7 04 24 60 a0 13 c0 	movl   $0xc013a060,(%esp)
c010ff52:	e8 8c fe ff ff       	call   c010fde3 <CPU_info>
}
c010ff57:	c9                   	leave  
c010ff58:	c3                   	ret    

c010ff59 <lock>:
 */

#include <mutex.h>

void lock(mutex *m)
{
c010ff59:	55                   	push   %ebp
c010ff5a:	89 e5                	mov    %esp,%ebp
c010ff5c:	83 ec 18             	sub    $0x18,%esp
    while(!try_lock(m));
c010ff5f:	90                   	nop
c010ff60:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff63:	89 04 24             	mov    %eax,(%esp)
c010ff66:	e8 14 00 00 00       	call   c010ff7f <try_lock>
c010ff6b:	85 c0                	test   %eax,%eax
c010ff6d:	74 f1                	je     c010ff60 <lock+0x7>
}
c010ff6f:	c9                   	leave  
c010ff70:	c3                   	ret    

c010ff71 <unlock>:

void unlock(mutex *m)
{
c010ff71:	55                   	push   %ebp
c010ff72:	89 e5                	mov    %esp,%ebp
    *m = false;
c010ff74:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010ff7d:	5d                   	pop    %ebp
c010ff7e:	c3                   	ret    

c010ff7f <try_lock>:


bool try_lock(mutex *m)
{
c010ff7f:	55                   	push   %ebp
c010ff80:	89 e5                	mov    %esp,%ebp
c010ff82:	57                   	push   %edi
c010ff83:	53                   	push   %ebx
c010ff84:	83 ec 14             	sub    $0x14,%esp
    int r;
    asm(
c010ff87:	8b 7d 08             	mov    0x8(%ebp),%edi
c010ff8a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
c010ff8d:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010ff90:	b8 01 00 00 00       	mov    $0x1,%eax
c010ff95:	87 07                	xchg   %eax,(%edi)
c010ff97:	89 c3                	mov    %eax,%ebx
c010ff99:	89 5d f4             	mov    %ebx,-0xc(%ebp)
        "mov $1, %%eax;"
        "xchg %%eax,(%1);"
        : "=a"(r) : "D" (m)
    );
    return !r;
c010ff9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ffa0:	0f 94 c0             	sete   %al
c010ffa3:	0f b6 c0             	movzbl %al,%eax
}
c010ffa6:	83 c4 14             	add    $0x14,%esp
c010ffa9:	5b                   	pop    %ebx
c010ffaa:	5f                   	pop    %edi
c010ffab:	5d                   	pop    %ebp
c010ffac:	c3                   	ret    

c010ffad <set_GDT_entry>:
	@param size 	Segment size (Limit)
	@param access 	Access Settings
	@param flags	Flags
 */
void set_GDT_entry(int entry, uint32_t base, uint32_t size, uint8_t access, int8_t flags)
{
c010ffad:	55                   	push   %ebp
c010ffae:	89 e5                	mov    %esp,%ebp
c010ffb0:	83 ec 08             	sub    $0x8,%esp
c010ffb3:	8b 55 14             	mov    0x14(%ebp),%edx
c010ffb6:	8b 45 18             	mov    0x18(%ebp),%eax
c010ffb9:	88 55 fc             	mov    %dl,-0x4(%ebp)
c010ffbc:	88 45 f8             	mov    %al,-0x8(%ebp)
    GDT[entry].limit_low = (uint16_t)size;
c010ffbf:	8b 45 10             	mov    0x10(%ebp),%eax
c010ffc2:	89 c2                	mov    %eax,%edx
c010ffc4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffc7:	66 89 14 c5 20 89 11 	mov    %dx,-0x3fee76e0(,%eax,8)
c010ffce:	c0 
    GDT[entry].Base_low = (uint16_t)base;
c010ffcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffd2:	89 c2                	mov    %eax,%edx
c010ffd4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffd7:	66 89 14 c5 22 89 11 	mov    %dx,-0x3fee76de(,%eax,8)
c010ffde:	c0 
    GDT[entry].Base_middle = (uint8_t)(base >> 16);
c010ffdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ffe2:	c1 e8 10             	shr    $0x10,%eax
c010ffe5:	89 c2                	mov    %eax,%edx
c010ffe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffea:	88 14 c5 24 89 11 c0 	mov    %dl,-0x3fee76dc(,%eax,8)
    GDT[entry].Access = access;
c010fff1:	8b 45 08             	mov    0x8(%ebp),%eax
c010fff4:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c010fff8:	88 14 c5 25 89 11 c0 	mov    %dl,-0x3fee76db(,%eax,8)
    GDT[entry].limit_Flags= (uint8_t)((flags << 4) | (size >> 16));
c010ffff:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0110003:	89 c2                	mov    %eax,%edx
c0110005:	c1 e2 04             	shl    $0x4,%edx
c0110008:	8b 45 10             	mov    0x10(%ebp),%eax
c011000b:	c1 e8 10             	shr    $0x10,%eax
c011000e:	09 c2                	or     %eax,%edx
c0110010:	8b 45 08             	mov    0x8(%ebp),%eax
c0110013:	88 14 c5 26 89 11 c0 	mov    %dl,-0x3fee76da(,%eax,8)
    GDT[entry].base_high = (uint8_t)(base >> 24);
c011001a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011001d:	c1 e8 18             	shr    $0x18,%eax
c0110020:	89 c2                	mov    %eax,%edx
c0110022:	8b 45 08             	mov    0x8(%ebp),%eax
c0110025:	88 14 c5 27 89 11 c0 	mov    %dl,-0x3fee76d9(,%eax,8)
}
c011002c:	c9                   	leave  
c011002d:	c3                   	ret    

c011002e <load_gdt>:
/**
	@brief Load GDT into register
	@param last_entry last entry
 */
void load_gdt(uint16_t last_entry)
{
c011002e:	55                   	push   %ebp
c011002f:	89 e5                	mov    %esp,%ebp
c0110031:	83 ec 04             	sub    $0x4,%esp
c0110034:	8b 45 08             	mov    0x8(%ebp),%eax
c0110037:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdtp.limit = ((last_entry + 1) * 8) - 1;
c011003b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c011003f:	83 c0 01             	add    $0x1,%eax
c0110042:	c1 e0 03             	shl    $0x3,%eax
c0110045:	83 e8 01             	sub    $0x1,%eax
c0110048:	66 a3 58 89 11 c0    	mov    %ax,0xc0118958
    gdtp.base = GDT;
c011004e:	c7 05 5a 89 11 c0 20 	movl   $0xc0118920,0xc011895a
c0110055:	89 11 c0 
    asm volatile("lgdt %0"::"m" (gdtp));
c0110058:	0f 01 15 58 89 11 c0 	lgdtl  0xc0118958
}
c011005f:	c9                   	leave  
c0110060:	c3                   	ret    

c0110061 <INIT_GDT>:

void INIT_GDT(void)
{
c0110061:	55                   	push   %ebp
c0110062:	89 e5                	mov    %esp,%ebp
c0110064:	83 ec 14             	sub    $0x14,%esp
    set_GDT_entry(0,0,0,0,0);
c0110067:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011006e:	00 
c011006f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110076:	00 
c0110077:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011007e:	00 
c011007f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110086:	00 
c0110087:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c011008e:	e8 1a ff ff ff       	call   c010ffad <set_GDT_entry>
    //Ring 0 Descriptors
    set_GDT_entry(1,0,0xFFFFF,0x9A,0xC);
c0110093:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c011009a:	00 
c011009b:	c7 44 24 0c 9a 00 00 	movl   $0x9a,0xc(%esp)
c01100a2:	00 
c01100a3:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c01100aa:	00 
c01100ab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01100b2:	00 
c01100b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01100ba:	e8 ee fe ff ff       	call   c010ffad <set_GDT_entry>
    set_GDT_entry(2,0,0xFFFFF,0x92,0xC);
c01100bf:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c01100c6:	00 
c01100c7:	c7 44 24 0c 92 00 00 	movl   $0x92,0xc(%esp)
c01100ce:	00 
c01100cf:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c01100d6:	00 
c01100d7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01100de:	00 
c01100df:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01100e6:	e8 c2 fe ff ff       	call   c010ffad <set_GDT_entry>

    //Ring 3 Descriptors
    set_GDT_entry(3,0,0xFFFFF,0xFA,0xC);
c01100eb:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c01100f2:	00 
c01100f3:	c7 44 24 0c fa 00 00 	movl   $0xfa,0xc(%esp)
c01100fa:	00 
c01100fb:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c0110102:	00 
c0110103:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011010a:	00 
c011010b:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0110112:	e8 96 fe ff ff       	call   c010ffad <set_GDT_entry>
    set_GDT_entry(4,0,0xFFFFF,0xF2,0xC);
c0110117:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c011011e:	00 
c011011f:	c7 44 24 0c f2 00 00 	movl   $0xf2,0xc(%esp)
c0110126:	00 
c0110127:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c011012e:	00 
c011012f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110136:	00 
c0110137:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c011013e:	e8 6a fe ff ff       	call   c010ffad <set_GDT_entry>

    load_gdt(4);
c0110143:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c011014a:	e8 df fe ff ff       	call   c011002e <load_gdt>
    asm volatile(
c011014f:	66 b8 10 00          	mov    $0x10,%ax
c0110153:	8e d8                	mov    %eax,%ds
c0110155:	8e c0                	mov    %eax,%es
c0110157:	8e e0                	mov    %eax,%fs
c0110159:	8e e8                	mov    %eax,%gs
c011015b:	8e d0                	mov    %eax,%ss
c011015d:	ea 64 01 11 c0 08 00 	ljmp   $0x8,$0xc0110164

c0110164 <.1>:
        "mov %ax, %gs;"
        "mov %ax, %ss;"
        "ljmp $0x8, $.1;"
        ".1:;"
    );
}
c0110164:	c9                   	leave  
c0110165:	c3                   	ret    
c0110166:	66 90                	xchg   %ax,%ax
c0110168:	66 90                	xchg   %ax,%ax
c011016a:	66 90                	xchg   %ax,%ax
c011016c:	66 90                	xchg   %ax,%ax
c011016e:	66 90                	xchg   %ax,%ax

c0110170 <start>:
c0110170:	b9 00 40 11 00       	mov    $0x114000,%ecx
c0110175:	0f 22 d9             	mov    %ecx,%cr3
c0110178:	0f 20 e1             	mov    %cr4,%ecx
c011017b:	83 c9 10             	or     $0x10,%ecx
c011017e:	0f 22 e1             	mov    %ecx,%cr4
c0110181:	0f 20 c1             	mov    %cr0,%ecx
c0110184:	81 c9 00 00 00 80    	or     $0x80000000,%ecx
c011018a:	0f 22 c1             	mov    %ecx,%cr0
c011018d:	8d 0d 95 01 11 c0    	lea    0xc0110195,%ecx
c0110193:	ff e1                	jmp    *%ecx

c0110195 <higherhalf>:
c0110195:	bc 00 a0 11 c0       	mov    $0xc011a000,%esp
c011019a:	81 c3 00 00 00 c0    	add    $0xc0000000,%ebx
c01101a0:	6a 00                	push   $0x0
c01101a2:	6a 00                	push   $0x0
c01101a4:	50                   	push   %eax
c01101a5:	53                   	push   %ebx
c01101a6:	e8 f9 34 ff ff       	call   c01036a4 <init>
c01101ab:	eb fe                	jmp    c01101ab <higherhalf+0x16>
c01101ad:	66 90                	xchg   %ax,%ax
c01101af:	90                   	nop

c01101b0 <isr_0>:
c01101b0:	6a 00                	push   $0x0
c01101b2:	6a 00                	push   $0x0
c01101b4:	e9 81 01 00 00       	jmp    c011033a <isr_save>

c01101b9 <isr_1>:
c01101b9:	6a 00                	push   $0x0
c01101bb:	6a 01                	push   $0x1
c01101bd:	e9 78 01 00 00       	jmp    c011033a <isr_save>

c01101c2 <isr_2>:
c01101c2:	6a 00                	push   $0x0
c01101c4:	6a 02                	push   $0x2
c01101c6:	e9 6f 01 00 00       	jmp    c011033a <isr_save>

c01101cb <isr_3>:
c01101cb:	6a 00                	push   $0x0
c01101cd:	6a 03                	push   $0x3
c01101cf:	e9 66 01 00 00       	jmp    c011033a <isr_save>

c01101d4 <isr_4>:
c01101d4:	6a 00                	push   $0x0
c01101d6:	6a 04                	push   $0x4
c01101d8:	e9 5d 01 00 00       	jmp    c011033a <isr_save>

c01101dd <isr_5>:
c01101dd:	6a 00                	push   $0x0
c01101df:	6a 05                	push   $0x5
c01101e1:	e9 54 01 00 00       	jmp    c011033a <isr_save>

c01101e6 <isr_6>:
c01101e6:	6a 00                	push   $0x0
c01101e8:	6a 06                	push   $0x6
c01101ea:	e9 4b 01 00 00       	jmp    c011033a <isr_save>

c01101ef <isr_7>:
c01101ef:	6a 00                	push   $0x0
c01101f1:	6a 07                	push   $0x7
c01101f3:	e9 42 01 00 00       	jmp    c011033a <isr_save>

c01101f8 <isr_8>:
c01101f8:	6a 08                	push   $0x8
c01101fa:	e9 3b 01 00 00       	jmp    c011033a <isr_save>

c01101ff <isr_9>:
c01101ff:	6a 00                	push   $0x0
c0110201:	6a 09                	push   $0x9
c0110203:	e9 32 01 00 00       	jmp    c011033a <isr_save>

c0110208 <isr_10>:
c0110208:	6a 0a                	push   $0xa
c011020a:	e9 2b 01 00 00       	jmp    c011033a <isr_save>

c011020f <isr_11>:
c011020f:	6a 0b                	push   $0xb
c0110211:	e9 24 01 00 00       	jmp    c011033a <isr_save>

c0110216 <isr_12>:
c0110216:	6a 0c                	push   $0xc
c0110218:	e9 1d 01 00 00       	jmp    c011033a <isr_save>

c011021d <isr_13>:
c011021d:	6a 0d                	push   $0xd
c011021f:	e9 16 01 00 00       	jmp    c011033a <isr_save>

c0110224 <isr_14>:
c0110224:	6a 0e                	push   $0xe
c0110226:	e9 0f 01 00 00       	jmp    c011033a <isr_save>

c011022b <isr_15>:
c011022b:	6a 00                	push   $0x0
c011022d:	6a 0f                	push   $0xf
c011022f:	e9 06 01 00 00       	jmp    c011033a <isr_save>

c0110234 <isr_16>:
c0110234:	6a 00                	push   $0x0
c0110236:	6a 10                	push   $0x10
c0110238:	e9 fd 00 00 00       	jmp    c011033a <isr_save>

c011023d <isr_17>:
c011023d:	6a 11                	push   $0x11
c011023f:	e9 f6 00 00 00       	jmp    c011033a <isr_save>

c0110244 <isr_18>:
c0110244:	6a 00                	push   $0x0
c0110246:	6a 12                	push   $0x12
c0110248:	e9 ed 00 00 00       	jmp    c011033a <isr_save>

c011024d <isr_19>:
c011024d:	6a 00                	push   $0x0
c011024f:	6a 13                	push   $0x13
c0110251:	e9 e4 00 00 00       	jmp    c011033a <isr_save>

c0110256 <isr_20>:
c0110256:	6a 00                	push   $0x0
c0110258:	6a 14                	push   $0x14
c011025a:	e9 db 00 00 00       	jmp    c011033a <isr_save>

c011025f <isr_21>:
c011025f:	6a 00                	push   $0x0
c0110261:	6a 15                	push   $0x15
c0110263:	e9 d2 00 00 00       	jmp    c011033a <isr_save>

c0110268 <isr_22>:
c0110268:	6a 00                	push   $0x0
c011026a:	6a 16                	push   $0x16
c011026c:	e9 c9 00 00 00       	jmp    c011033a <isr_save>

c0110271 <isr_23>:
c0110271:	6a 00                	push   $0x0
c0110273:	6a 17                	push   $0x17
c0110275:	e9 c0 00 00 00       	jmp    c011033a <isr_save>

c011027a <isr_24>:
c011027a:	6a 00                	push   $0x0
c011027c:	6a 18                	push   $0x18
c011027e:	e9 b7 00 00 00       	jmp    c011033a <isr_save>

c0110283 <isr_25>:
c0110283:	6a 00                	push   $0x0
c0110285:	6a 19                	push   $0x19
c0110287:	e9 ae 00 00 00       	jmp    c011033a <isr_save>

c011028c <isr_26>:
c011028c:	6a 00                	push   $0x0
c011028e:	6a 1a                	push   $0x1a
c0110290:	e9 a5 00 00 00       	jmp    c011033a <isr_save>

c0110295 <isr_27>:
c0110295:	6a 00                	push   $0x0
c0110297:	6a 1b                	push   $0x1b
c0110299:	e9 9c 00 00 00       	jmp    c011033a <isr_save>

c011029e <isr_28>:
c011029e:	6a 00                	push   $0x0
c01102a0:	6a 1c                	push   $0x1c
c01102a2:	e9 93 00 00 00       	jmp    c011033a <isr_save>

c01102a7 <isr_29>:
c01102a7:	6a 00                	push   $0x0
c01102a9:	6a 1d                	push   $0x1d
c01102ab:	e9 8a 00 00 00       	jmp    c011033a <isr_save>

c01102b0 <isr_30>:
c01102b0:	6a 00                	push   $0x0
c01102b2:	6a 1e                	push   $0x1e
c01102b4:	e9 81 00 00 00       	jmp    c011033a <isr_save>

c01102b9 <isr_31>:
c01102b9:	6a 00                	push   $0x0
c01102bb:	6a 1f                	push   $0x1f
c01102bd:	eb 7b                	jmp    c011033a <isr_save>

c01102bf <isr_default>:
c01102bf:	6a ff                	push   $0xffffffff
c01102c1:	6a ff                	push   $0xffffffff
c01102c3:	eb 75                	jmp    c011033a <isr_save>

c01102c5 <isr_32>:
c01102c5:	6a 00                	push   $0x0
c01102c7:	6a 20                	push   $0x20
c01102c9:	eb 6f                	jmp    c011033a <isr_save>

c01102cb <isr_33>:
c01102cb:	6a 00                	push   $0x0
c01102cd:	6a 21                	push   $0x21
c01102cf:	eb 69                	jmp    c011033a <isr_save>

c01102d1 <isr_34>:
c01102d1:	6a 00                	push   $0x0
c01102d3:	6a 22                	push   $0x22
c01102d5:	eb 63                	jmp    c011033a <isr_save>

c01102d7 <isr_35>:
c01102d7:	6a 00                	push   $0x0
c01102d9:	6a 23                	push   $0x23
c01102db:	eb 5d                	jmp    c011033a <isr_save>

c01102dd <isr_36>:
c01102dd:	6a 00                	push   $0x0
c01102df:	6a 24                	push   $0x24
c01102e1:	eb 57                	jmp    c011033a <isr_save>

c01102e3 <isr_37>:
c01102e3:	6a 00                	push   $0x0
c01102e5:	6a 25                	push   $0x25
c01102e7:	eb 51                	jmp    c011033a <isr_save>

c01102e9 <isr_38>:
c01102e9:	6a 00                	push   $0x0
c01102eb:	6a 26                	push   $0x26
c01102ed:	eb 4b                	jmp    c011033a <isr_save>

c01102ef <isr_39>:
c01102ef:	6a 00                	push   $0x0
c01102f1:	6a 27                	push   $0x27
c01102f3:	eb 45                	jmp    c011033a <isr_save>

c01102f5 <isr_40>:
c01102f5:	6a 00                	push   $0x0
c01102f7:	6a 28                	push   $0x28
c01102f9:	eb 3f                	jmp    c011033a <isr_save>

c01102fb <isr_41>:
c01102fb:	6a 00                	push   $0x0
c01102fd:	6a 29                	push   $0x29
c01102ff:	eb 39                	jmp    c011033a <isr_save>

c0110301 <isr_42>:
c0110301:	6a 00                	push   $0x0
c0110303:	6a 2a                	push   $0x2a
c0110305:	eb 33                	jmp    c011033a <isr_save>

c0110307 <isr_43>:
c0110307:	6a 00                	push   $0x0
c0110309:	6a 2b                	push   $0x2b
c011030b:	eb 2d                	jmp    c011033a <isr_save>

c011030d <isr_44>:
c011030d:	6a 00                	push   $0x0
c011030f:	6a 2c                	push   $0x2c
c0110311:	eb 27                	jmp    c011033a <isr_save>

c0110313 <isr_45>:
c0110313:	6a 00                	push   $0x0
c0110315:	6a 2d                	push   $0x2d
c0110317:	eb 21                	jmp    c011033a <isr_save>

c0110319 <isr_46>:
c0110319:	6a 00                	push   $0x0
c011031b:	6a 2e                	push   $0x2e
c011031d:	eb 1b                	jmp    c011033a <isr_save>

c011031f <isr_47>:
c011031f:	6a 00                	push   $0x0
c0110321:	6a 2f                	push   $0x2f
c0110323:	eb 15                	jmp    c011033a <isr_save>

c0110325 <isr_112>:
c0110325:	6a 00                	push   $0x0
c0110327:	6a 70                	push   $0x70
c0110329:	eb 0f                	jmp    c011033a <isr_save>

c011032b <isr_128>:
c011032b:	6a 00                	push   $0x0
c011032d:	68 80 00 00 00       	push   $0x80
c0110332:	eb 06                	jmp    c011033a <isr_save>

c0110334 <isr_pci>:
c0110334:	6a 00                	push   $0x0
c0110336:	6a 32                	push   $0x32
c0110338:	eb 00                	jmp    c011033a <isr_save>

c011033a <isr_save>:
c011033a:	50                   	push   %eax
c011033b:	51                   	push   %ecx
c011033c:	52                   	push   %edx
c011033d:	53                   	push   %ebx
c011033e:	55                   	push   %ebp
c011033f:	56                   	push   %esi
c0110340:	57                   	push   %edi
c0110341:	1e                   	push   %ds
c0110342:	06                   	push   %es
c0110343:	0f a0                	push   %fs
c0110345:	0f a8                	push   %gs
c0110347:	66 ba 10 00          	mov    $0x10,%dx
c011034b:	8e da                	mov    %edx,%ds
c011034d:	8e c2                	mov    %edx,%es
c011034f:	8e e2                	mov    %edx,%fs
c0110351:	8e ea                	mov    %edx,%gs
c0110353:	54                   	push   %esp
c0110354:	e8 d0 df ff ff       	call   c010e329 <irq_handler>
c0110359:	89 c4                	mov    %eax,%esp
c011035b:	0f a9                	pop    %gs
c011035d:	0f a1                	pop    %fs
c011035f:	07                   	pop    %es
c0110360:	1f                   	pop    %ds
c0110361:	5f                   	pop    %edi
c0110362:	5e                   	pop    %esi
c0110363:	5d                   	pop    %ebp
c0110364:	5b                   	pop    %ebx
c0110365:	5a                   	pop    %edx
c0110366:	59                   	pop    %ecx
c0110367:	58                   	pop    %eax
c0110368:	83 c4 08             	add    $0x8,%esp
c011036b:	cf                   	iret   
