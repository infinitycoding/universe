
kernel/src/kernel32.elf:     file format elf32-i386


Disassembly of section .text:

c0100000 <print_logo-0xc>:
c0100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
c0100006:	00 00                	add    %al,(%eax)
c0100008:	fe 4f 52             	decb   0x52(%edi)
c010000b:	e4 55                	in     $0x55,%al

c010000c <print_logo>:
                 UUUUUUUUU       NNNNNNNN         NNNNNNN IIIIIIIIII           \n\
                                                                               \n\
";

static void print_logo(color_t color)
{
c010000c:	55                   	push   %ebp
c010000d:	89 e5                	mov    %esp,%ebp
c010000f:	83 ec 38             	sub    $0x38,%esp
c0100012:	8b 45 08             	mov    0x8(%ebp),%eax
c0100015:	88 45 e4             	mov    %al,-0x1c(%ebp)
	color_t color_saved = get_color();
c0100018:	e8 c4 32 00 00       	call   c01032e1 <get_color>
c010001d:	88 45 f7             	mov    %al,-0x9(%ebp)

	set_color(color | BLACK << 4);
c0100020:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0100024:	89 04 24             	mov    %eax,(%esp)
c0100027:	e8 9e 32 00 00       	call   c01032ca <set_color>

	puts(__logo);
c010002c:	a1 00 c0 10 c0       	mov    0xc010c000,%eax
c0100031:	89 04 24             	mov    %eax,(%esp)
c0100034:	e8 b6 31 00 00       	call   c01031ef <puts>

	set_color(color_saved);
c0100039:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010003d:	89 04 24             	mov    %eax,(%esp)
c0100040:	e8 85 32 00 00       	call   c01032ca <set_color>
}
c0100045:	c9                   	leave  
c0100046:	c3                   	ret    

c0100047 <init>:
* @return 0
*/
extern struct thread_state *current_thread;
extern struct process_state *kernel_state;
extern pd_t *pd_current;
int init (struct multiboot_struct *mb_info, uint32_t magic_number) {
c0100047:	55                   	push   %ebp
c0100048:	89 e5                	mov    %esp,%ebp
c010004a:	83 ec 38             	sub    $0x38,%esp
	clear_screen();
c010004d:	e8 14 32 00 00       	call   c0103266 <clear_screen>

	if (magic_number != 0x2BADB002) {
c0100052:	81 7d 0c 02 b0 ad 2b 	cmpl   $0x2badb002,0xc(%ebp)
c0100059:	74 0c                	je     c0100067 <init+0x20>
		panic("Incompatible Bootloader");
c010005b:	c7 04 24 bd 89 10 c0 	movl   $0xc01089bd,(%esp)
c0100062:	e8 a3 06 00 00       	call   c010070a <panic>
	}

	set_color(WHITE | BLACK << 4);
c0100067:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c010006e:	e8 57 32 00 00       	call   c01032ca <set_color>
	//Init Kernelmodules
	INIT_PMM(mb_info);
c0100073:	8b 45 08             	mov    0x8(%ebp),%eax
c0100076:	89 04 24             	mov    %eax,(%esp)
c0100079:	e8 e1 74 00 00       	call   c010755f <INIT_PMM>
	INIT_GDT();
c010007e:	e8 09 4f 00 00       	call   c0104f8c <INIT_GDT>
	INIT_IDT();
c0100083:	e8 b5 5b 00 00       	call   c0105c3d <INIT_IDT>
	INIT_PAGING(mb_info);
c0100088:	8b 45 08             	mov    0x8(%ebp),%eax
c010008b:	89 04 24             	mov    %eax,(%esp)
c010008e:	e8 39 0a 00 00       	call   c0100acc <INIT_PAGING>
	INIT_HEAP();
c0100093:	e8 30 2a 00 00       	call   c0102ac8 <INIT_HEAP>
	INIT_PIT(50);
c0100098:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010009f:	e8 ed 42 00 00       	call   c0104391 <INIT_PIT>
	INIT_CMOS();
c01000a4:	e8 d7 2d 00 00       	call   c0102e80 <INIT_CMOS>
	INIT_KEYBOARD();
c01000a9:	e8 b0 35 00 00       	call   c010365e <INIT_KEYBOARD>
	INIT_SCHEDULER();
c01000ae:	e8 15 4b 00 00       	call   c0104bc8 <INIT_SCHEDULER>
	INIT_VFS();
c01000b3:	e8 5c 18 00 00       	call   c0101914 <INIT_VFS>

	asm volatile("sti");
c01000b8:	fb                   	sti    

	//print Logo and loading message
	print_logo(YELLOW);
c01000b9:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c01000c0:	e8 47 ff ff ff       	call   c010000c <print_logo>
	puts("Universe wird gestartet...\n");
c01000c5:	c7 04 24 d5 89 10 c0 	movl   $0xc01089d5,(%esp)
c01000cc:	e8 1e 31 00 00       	call   c01031ef <puts>



	// count free memory and display it
	uint32_t pages = pmm_count_free_pages();
c01000d1:	e8 c6 6f 00 00       	call   c010709c <pmm_count_free_pages>
c01000d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	printf("%u freie Speicherseiten (%u MB)\n", pages, pages >> 8);
c01000d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01000dc:	c1 e8 08             	shr    $0x8,%eax
c01000df:	89 44 24 08          	mov    %eax,0x8(%esp)
c01000e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01000e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01000ea:	c7 04 24 f4 89 10 c0 	movl   $0xc01089f4,(%esp)
c01000f1:	e8 d6 24 00 00       	call   c01025cc <printf>

	//print current time
	//print_time(get_time()); //crashes on a real computer and on virtual box
	//printf("\n");

	INIT_CPUID();
c01000f6:	e8 75 7c 00 00       	call   c0107d70 <INIT_CPUID>
	printf("\n");
c01000fb:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0100102:	e8 89 2f 00 00       	call   c0103090 <putchar>
	INIT_PCI();
c0100107:	e8 77 3d 00 00       	call   c0103e83 <INIT_PCI>
	INIT_RTL8139();
c010010c:	e8 5b 47 00 00       	call   c010486c <INIT_RTL8139>
	// Load modules



	int i,j;
	struct mods_add* modules = mb_info->mods_addr;
c0100111:	8b 45 08             	mov    0x8(%ebp),%eax
c0100114:	8b 40 18             	mov    0x18(%eax),%eax
c0100117:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for(i = 0; i < mb_info->mods_count; i++) {
c010011a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100121:	eb 73                	jmp    c0100196 <init+0x14f>
        	size_t len = modules[i].mod_end - modules[i].mod_start;
c0100123:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100126:	c1 e0 04             	shl    $0x4,%eax
c0100129:	03 45 ec             	add    -0x14(%ebp),%eax
c010012c:	8b 50 04             	mov    0x4(%eax),%edx
c010012f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100132:	c1 e0 04             	shl    $0x4,%eax
c0100135:	03 45 ec             	add    -0x14(%ebp),%eax
c0100138:	8b 00                	mov    (%eax),%eax
c010013a:	89 d1                	mov    %edx,%ecx
c010013c:	29 c1                	sub    %eax,%ecx
c010013e:	89 c8                	mov    %ecx,%eax
c0100140:	89 45 e8             	mov    %eax,-0x18(%ebp)
        	size_t pages = NUM_PAGES(len);
c0100143:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100146:	05 ff 0f 00 00       	add    $0xfff,%eax
c010014b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0100150:	c1 e8 0c             	shr    $0xc,%eax
c0100153:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        	void *mod = pd_automap_kernel_range(pd_current, modules[i].mod_start, pages, PTE_WRITABLE);
c0100156:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0100159:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010015c:	c1 e0 04             	shl    $0x4,%eax
c010015f:	03 45 ec             	add    -0x14(%ebp),%eax
c0100162:	8b 10                	mov    (%eax),%edx
c0100164:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0100169:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0100170:	00 
c0100171:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100175:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100179:	89 04 24             	mov    %eax,(%esp)
c010017c:	e8 87 11 00 00       	call   c0101308 <pd_automap_kernel_range>
c0100181:	89 45 e0             	mov    %eax,-0x20(%ebp)
		struct process *proc = load_elf(mod);
c0100184:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100187:	89 04 24             	mov    %eax,(%esp)
c010018a:	e8 9d 47 00 00       	call   c010492c <load_elf>
c010018f:	89 45 dc             	mov    %eax,-0x24(%ebp)



	int i,j;
	struct mods_add* modules = mb_info->mods_addr;
        for(i = 0; i < mb_info->mods_count; i++) {
c0100192:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100196:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100199:	8b 45 08             	mov    0x8(%ebp),%eax
c010019c:	8b 40 14             	mov    0x14(%eax),%eax
c010019f:	39 c2                	cmp    %eax,%edx
c01001a1:	72 80                	jb     c0100123 <init+0xdc>
        }

    //thread_kill(current_thread);

    //while(1){}
	return 0;
c01001a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01001a8:	c9                   	leave  
c01001a9:	c3                   	ret    
	...

c01001ac <exp>:

/**
	Exponential-Function
**/
double exp(double x)
{
c01001ac:	55                   	push   %ebp
c01001ad:	89 e5                	mov    %esp,%ebp
c01001af:	83 ec 48             	sub    $0x48,%esp
c01001b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01001b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01001b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01001bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    double sigma = 0;
c01001be:	d9 ee                	fldz   
c01001c0:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 150; i++)
c01001c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01001ca:	eb 4e                	jmp    c010021a <exp+0x6e>
        sigma += powi(x, i ) / factorial(i);
c01001cc:	dd 45 e0             	fldl   -0x20(%ebp)
c01001cf:	d9 7d de             	fnstcw -0x22(%ebp)
c01001d2:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c01001d6:	b4 0c                	mov    $0xc,%ah
c01001d8:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c01001dc:	d9 6d dc             	fldcw  -0x24(%ebp)
c01001df:	db 5d d8             	fistpl -0x28(%ebp)
c01001e2:	d9 6d de             	fldcw  -0x22(%ebp)
c01001e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01001e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01001eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01001ef:	89 04 24             	mov    %eax,(%esp)
c01001f2:	e8 3a 02 00 00       	call   c0100431 <powi>
c01001f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01001fa:	db 45 d8             	fildl  -0x28(%ebp)
c01001fd:	dd 5d d0             	fstpl  -0x30(%ebp)
c0100200:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100203:	89 04 24             	mov    %eax,(%esp)
c0100206:	e8 68 02 00 00       	call   c0100473 <factorial>
c010020b:	dc 7d d0             	fdivrl -0x30(%ebp)
c010020e:	dd 45 f0             	fldl   -0x10(%ebp)
c0100211:	de c1                	faddp  %st,%st(1)
c0100213:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double exp(double x)
{
    double sigma = 0;
    int i;
    for (i = 0; i < 150; i++)
c0100216:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010021a:	81 7d ec 95 00 00 00 	cmpl   $0x95,-0x14(%ebp)
c0100221:	7e a9                	jle    c01001cc <exp+0x20>
        sigma += powi(x, i ) / factorial(i);
    return sigma;
c0100223:	dd 45 f0             	fldl   -0x10(%ebp)
}
c0100226:	c9                   	leave  
c0100227:	c3                   	ret    

c0100228 <ln>:

/**
	Natural logarithm
**/
double ln(double y)
{
c0100228:	55                   	push   %ebp
c0100229:	89 e5                	mov    %esp,%ebp
c010022b:	83 ec 58             	sub    $0x58,%esp
c010022e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100231:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0100234:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100237:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    double x = (y - 1) / (y + 1);
c010023a:	dd 45 d0             	fldl   -0x30(%ebp)
c010023d:	d9 e8                	fld1   
c010023f:	de e9                	fsubrp %st,%st(1)
c0100241:	dd 45 d0             	fldl   -0x30(%ebp)
c0100244:	d9 e8                	fld1   
c0100246:	de c1                	faddp  %st,%st(1)
c0100248:	de f9                	fdivrp %st,%st(1)
c010024a:	dd 5d e0             	fstpl  -0x20(%ebp)
    double sigma = 0;
c010024d:	d9 ee                	fldz   
c010024f:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 150; i++)
c0100252:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100259:	eb 55                	jmp    c01002b0 <ln+0x88>
        sigma += powi(x, 2*i+1) /(2*i+1);
c010025b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010025e:	01 c0                	add    %eax,%eax
c0100260:	8d 50 01             	lea    0x1(%eax),%edx
c0100263:	dd 45 e0             	fldl   -0x20(%ebp)
c0100266:	d9 7d ce             	fnstcw -0x32(%ebp)
c0100269:	0f b7 45 ce          	movzwl -0x32(%ebp),%eax
c010026d:	b4 0c                	mov    $0xc,%ah
c010026f:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
c0100273:	d9 6d cc             	fldcw  -0x34(%ebp)
c0100276:	db 5d c8             	fistpl -0x38(%ebp)
c0100279:	d9 6d ce             	fldcw  -0x32(%ebp)
c010027c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010027f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100283:	89 04 24             	mov    %eax,(%esp)
c0100286:	e8 a6 01 00 00       	call   c0100431 <powi>
c010028b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010028e:	01 d2                	add    %edx,%edx
c0100290:	83 c2 01             	add    $0x1,%edx
c0100293:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0100296:	89 c2                	mov    %eax,%edx
c0100298:	c1 fa 1f             	sar    $0x1f,%edx
c010029b:	f7 7d c4             	idivl  -0x3c(%ebp)
c010029e:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01002a1:	db 45 c8             	fildl  -0x38(%ebp)
c01002a4:	dd 45 f0             	fldl   -0x10(%ebp)
c01002a7:	de c1                	faddp  %st,%st(1)
c01002a9:	dd 5d f0             	fstpl  -0x10(%ebp)
double ln(double y)
{
    double x = (y - 1) / (y + 1);
    double sigma = 0;
    int i;
    for (i = 0; i < 150; i++)
c01002ac:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01002b0:	81 7d ec 95 00 00 00 	cmpl   $0x95,-0x14(%ebp)
c01002b7:	7e a2                	jle    c010025b <ln+0x33>
        sigma += powi(x, 2*i+1) /(2*i+1);
    return 2*sigma;
c01002b9:	dd 45 f0             	fldl   -0x10(%ebp)
c01002bc:	d8 c0                	fadd   %st(0),%st
}
c01002be:	c9                   	leave  
c01002bf:	c3                   	ret    

c01002c0 <pow>:

/**
	Power for real exponents
**/
double pow(double base, double exponent)
{
c01002c0:	55                   	push   %ebp
c01002c1:	89 e5                	mov    %esp,%ebp
c01002c3:	83 ec 28             	sub    $0x28,%esp
c01002c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01002c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01002cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01002d2:	8b 45 10             	mov    0x10(%ebp),%eax
c01002d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01002d8:	8b 45 14             	mov    0x14(%ebp),%eax
c01002db:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return exp(exponent * ln(base));
c01002de:	dd 45 f0             	fldl   -0x10(%ebp)
c01002e1:	dd 1c 24             	fstpl  (%esp)
c01002e4:	e8 3f ff ff ff       	call   c0100228 <ln>
c01002e9:	dc 4d e8             	fmull  -0x18(%ebp)
c01002ec:	dd 1c 24             	fstpl  (%esp)
c01002ef:	e8 b8 fe ff ff       	call   c01001ac <exp>
}
c01002f4:	c9                   	leave  
c01002f5:	c3                   	ret    

c01002f6 <sin>:

/**
	Sine
**/
double sin(double x)
{
c01002f6:	55                   	push   %ebp
c01002f7:	89 e5                	mov    %esp,%ebp
c01002f9:	53                   	push   %ebx
c01002fa:	83 ec 44             	sub    $0x44,%esp
c01002fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100300:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100303:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100306:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	double sigma = 0;
c0100309:	d9 ee                	fldz   
c010030b:	dd 5d f0             	fstpl  -0x10(%ebp)
	int i;
	for (i = 0; i < 20; i++)
c010030e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100315:	eb 70                	jmp    c0100387 <sin+0x91>
		sigma += ((powi(-1, i) * powi(x, 2 * i + 1)) / factorial(2 * i + 1));
c0100317:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010031a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010031e:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
c0100325:	e8 07 01 00 00       	call   c0100431 <powi>
c010032a:	89 c3                	mov    %eax,%ebx
c010032c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010032f:	01 c0                	add    %eax,%eax
c0100331:	8d 50 01             	lea    0x1(%eax),%edx
c0100334:	dd 45 e0             	fldl   -0x20(%ebp)
c0100337:	d9 7d de             	fnstcw -0x22(%ebp)
c010033a:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c010033e:	b4 0c                	mov    $0xc,%ah
c0100340:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c0100344:	d9 6d dc             	fldcw  -0x24(%ebp)
c0100347:	db 5d d8             	fistpl -0x28(%ebp)
c010034a:	d9 6d de             	fldcw  -0x22(%ebp)
c010034d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100350:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100354:	89 04 24             	mov    %eax,(%esp)
c0100357:	e8 d5 00 00 00       	call   c0100431 <powi>
c010035c:	0f af c3             	imul   %ebx,%eax
c010035f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0100362:	db 45 d8             	fildl  -0x28(%ebp)
c0100365:	dd 5d d0             	fstpl  -0x30(%ebp)
c0100368:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010036b:	01 c0                	add    %eax,%eax
c010036d:	83 c0 01             	add    $0x1,%eax
c0100370:	89 04 24             	mov    %eax,(%esp)
c0100373:	e8 fb 00 00 00       	call   c0100473 <factorial>
c0100378:	dc 7d d0             	fdivrl -0x30(%ebp)
c010037b:	dd 45 f0             	fldl   -0x10(%ebp)
c010037e:	de c1                	faddp  %st,%st(1)
c0100380:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double sin(double x)
{
	double sigma = 0;
	int i;
	for (i = 0; i < 20; i++)
c0100383:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100387:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c010038b:	7e 8a                	jle    c0100317 <sin+0x21>
		sigma += ((powi(-1, i) * powi(x, 2 * i + 1)) / factorial(2 * i + 1));
	return sigma;
c010038d:	dd 45 f0             	fldl   -0x10(%ebp)
}
c0100390:	83 c4 44             	add    $0x44,%esp
c0100393:	5b                   	pop    %ebx
c0100394:	5d                   	pop    %ebp
c0100395:	c3                   	ret    

c0100396 <cos>:

/**
	Cosine
**/
double cos(double x)
{
c0100396:	55                   	push   %ebp
c0100397:	89 e5                	mov    %esp,%ebp
c0100399:	53                   	push   %ebx
c010039a:	83 ec 44             	sub    $0x44,%esp
c010039d:	8b 45 08             	mov    0x8(%ebp),%eax
c01003a0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01003a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    double sigma = 0;
c01003a9:	d9 ee                	fldz   
c01003ab:	dd 5d f0             	fstpl  -0x10(%ebp)
    int i;
    for (i = 0; i < 20; i++)
c01003ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01003b5:	eb 6b                	jmp    c0100422 <cos+0x8c>
        sigma += ((powi(-1, i) * powi(x, 2 * i)) / factorial(2 * i));
c01003b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01003ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003be:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
c01003c5:	e8 67 00 00 00       	call   c0100431 <powi>
c01003ca:	89 c3                	mov    %eax,%ebx
c01003cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01003cf:	8d 14 00             	lea    (%eax,%eax,1),%edx
c01003d2:	dd 45 e0             	fldl   -0x20(%ebp)
c01003d5:	d9 7d de             	fnstcw -0x22(%ebp)
c01003d8:	0f b7 45 de          	movzwl -0x22(%ebp),%eax
c01003dc:	b4 0c                	mov    $0xc,%ah
c01003de:	66 89 45 dc          	mov    %ax,-0x24(%ebp)
c01003e2:	d9 6d dc             	fldcw  -0x24(%ebp)
c01003e5:	db 5d d8             	fistpl -0x28(%ebp)
c01003e8:	d9 6d de             	fldcw  -0x22(%ebp)
c01003eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01003ee:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003f2:	89 04 24             	mov    %eax,(%esp)
c01003f5:	e8 37 00 00 00       	call   c0100431 <powi>
c01003fa:	0f af c3             	imul   %ebx,%eax
c01003fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0100400:	db 45 d8             	fildl  -0x28(%ebp)
c0100403:	dd 5d d0             	fstpl  -0x30(%ebp)
c0100406:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100409:	01 c0                	add    %eax,%eax
c010040b:	89 04 24             	mov    %eax,(%esp)
c010040e:	e8 60 00 00 00       	call   c0100473 <factorial>
c0100413:	dc 7d d0             	fdivrl -0x30(%ebp)
c0100416:	dd 45 f0             	fldl   -0x10(%ebp)
c0100419:	de c1                	faddp  %st,%st(1)
c010041b:	dd 5d f0             	fstpl  -0x10(%ebp)
**/
double cos(double x)
{
    double sigma = 0;
    int i;
    for (i = 0; i < 20; i++)
c010041e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100422:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100426:	7e 8f                	jle    c01003b7 <cos+0x21>
        sigma += ((powi(-1, i) * powi(x, 2 * i)) / factorial(2 * i));
    return sigma;
c0100428:	dd 45 f0             	fldl   -0x10(%ebp)
}
c010042b:	83 c4 44             	add    $0x44,%esp
c010042e:	5b                   	pop    %ebx
c010042f:	5d                   	pop    %ebp
c0100430:	c3                   	ret    

c0100431 <powi>:

/**
	Power for integer exponents
**/
int powi(int base, int exponent)
{
c0100431:	55                   	push   %ebp
c0100432:	89 e5                	mov    %esp,%ebp
c0100434:	83 ec 10             	sub    $0x10,%esp
  int result = base;
c0100437:	8b 45 08             	mov    0x8(%ebp),%eax
c010043a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  int i;

  if (exponent == 0) {
c010043d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100441:	75 09                	jne    c010044c <powi+0x1b>
    result = 1;
c0100443:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
c010044a:	eb 22                	jmp    c010046e <powi+0x3d>
  } else {
    for (i = 0; i < exponent - 1; ++i) {
c010044c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0100453:	eb 0e                	jmp    c0100463 <powi+0x32>
      result *= base;
c0100455:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100458:	0f af 45 08          	imul   0x8(%ebp),%eax
c010045c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  int i;

  if (exponent == 0) {
    result = 1;
  } else {
    for (i = 0; i < exponent - 1; ++i) {
c010045f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0100463:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100466:	83 e8 01             	sub    $0x1,%eax
c0100469:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010046c:	7f e7                	jg     c0100455 <powi+0x24>
      result *= base;
    }
  }
  
  return result;
c010046e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100471:	c9                   	leave  
c0100472:	c3                   	ret    

c0100473 <factorial>:

/**
	Factorial function
**/
double inline factorial(long n)
{
c0100473:	55                   	push   %ebp
c0100474:	89 e5                	mov    %esp,%ebp
c0100476:	83 ec 10             	sub    $0x10,%esp
	double res = 1;
c0100479:	d9 e8                	fld1   
c010047b:	dd 5d f8             	fstpl  -0x8(%ebp)
	int i;
	for (i = 1; i <= n; i++)
c010047e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0100485:	eb 0f                	jmp    c0100496 <factorial+0x23>
		res *= i;
c0100487:	db 45 f4             	fildl  -0xc(%ebp)
c010048a:	dd 45 f8             	fldl   -0x8(%ebp)
c010048d:	de c9                	fmulp  %st,%st(1)
c010048f:	dd 5d f8             	fstpl  -0x8(%ebp)
**/
double inline factorial(long n)
{
	double res = 1;
	int i;
	for (i = 1; i <= n; i++)
c0100492:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100496:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100499:	3b 45 08             	cmp    0x8(%ebp),%eax
c010049c:	7e e9                	jle    c0100487 <factorial+0x14>
		res *= i;
	return res;
c010049e:	dd 45 f8             	fldl   -0x8(%ebp)
}
c01004a1:	c9                   	leave  
c01004a2:	c3                   	ret    

c01004a3 <abs>:

/**
	Absolute value
**/
double inline abs(double x)
{
c01004a3:	55                   	push   %ebp
c01004a4:	89 e5                	mov    %esp,%ebp
c01004a6:	83 ec 08             	sub    $0x8,%esp
c01004a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01004ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (x < 0.0) {
c01004b5:	d9 ee                	fldz   
c01004b7:	dd 45 f8             	fldl   -0x8(%ebp)
c01004ba:	d9 c9                	fxch   %st(1)
c01004bc:	df e9                	fucomip %st(1),%st
c01004be:	dd d8                	fstp   %st(0)
c01004c0:	0f 97 c0             	seta   %al
c01004c3:	84 c0                	test   %al,%al
c01004c5:	74 07                	je     c01004ce <abs+0x2b>
		return -x;
c01004c7:	dd 45 f8             	fldl   -0x8(%ebp)
c01004ca:	d9 e0                	fchs   
c01004cc:	eb 03                	jmp    c01004d1 <abs+0x2e>
	} else {
		return x;
c01004ce:	dd 45 f8             	fldl   -0x8(%ebp)
	}
}
c01004d1:	c9                   	leave  
c01004d2:	c3                   	ret    

c01004d3 <bit_scan_forward>:

unsigned int bit_scan_forward(unsigned int i)
{
c01004d3:	55                   	push   %ebp
c01004d4:	89 e5                	mov    %esp,%ebp
c01004d6:	53                   	push   %ebx
c01004d7:	83 ec 10             	sub    $0x10,%esp
	unsigned int j;

	for (j = 0; j < 32; j++) {
c01004da:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c01004e1:	eb 20                	jmp    c0100503 <bit_scan_forward+0x30>
		if (i & (1 << j)) {
c01004e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004e6:	ba 01 00 00 00       	mov    $0x1,%edx
c01004eb:	89 d3                	mov    %edx,%ebx
c01004ed:	89 c1                	mov    %eax,%ecx
c01004ef:	d3 e3                	shl    %cl,%ebx
c01004f1:	89 d8                	mov    %ebx,%eax
c01004f3:	23 45 08             	and    0x8(%ebp),%eax
c01004f6:	85 c0                	test   %eax,%eax
c01004f8:	74 05                	je     c01004ff <bit_scan_forward+0x2c>
			return j;
c01004fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004fd:	eb 0f                	jmp    c010050e <bit_scan_forward+0x3b>

unsigned int bit_scan_forward(unsigned int i)
{
	unsigned int j;

	for (j = 0; j < 32; j++) {
c01004ff:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0100503:	83 7d f8 1f          	cmpl   $0x1f,-0x8(%ebp)
c0100507:	76 da                	jbe    c01004e3 <bit_scan_forward+0x10>
		if (i & (1 << j)) {
			return j;
		}
	}
	return -1;
c0100509:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010050e:	83 c4 10             	add    $0x10,%esp
c0100511:	5b                   	pop    %ebx
c0100512:	5d                   	pop    %ebp
c0100513:	c3                   	ret    

c0100514 <halt>:

#include <idt.h>
#include <cpu.h>
#include <printf.h>

void halt(void) {
c0100514:	55                   	push   %ebp
c0100515:	89 e5                	mov    %esp,%ebp
	while (1) {
		asm volatile("cli; hlt");
c0100517:	fa                   	cli    
c0100518:	f4                   	hlt    
	}
c0100519:	eb fc                	jmp    c0100517 <halt+0x3>

c010051b <cpu_dump>:
	"Reserved",                "Reserved",                      "Reserved",                  "Reserved",
	"Reserved",                "Reserved",                      "Reserved",                  "Reserved"
};

int cpu_dump(struct cpu_state* cpu, char *str)
{
c010051b:	55                   	push   %ebp
c010051c:	89 e5                	mov    %esp,%ebp
c010051e:	83 ec 28             	sub    $0x28,%esp
	int len = 0;
c0100521:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	len += sprintf(str + len, "EAX:  %#010X    EBX:     %#010X\n",  cpu->eax, 	cpu->ebx);
c0100528:	8b 45 08             	mov    0x8(%ebp),%eax
c010052b:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010052e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100531:	8b 50 28             	mov    0x28(%eax),%edx
c0100534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100537:	03 45 0c             	add    0xc(%ebp),%eax
c010053a:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010053e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100542:	c7 44 24 04 68 8b 10 	movl   $0xc0108b68,0x4(%esp)
c0100549:	c0 
c010054a:	89 04 24             	mov    %eax,(%esp)
c010054d:	e8 ed 20 00 00       	call   c010263f <sprintf>
c0100552:	01 45 f4             	add    %eax,-0xc(%ebp)
	len += sprintf(str + len, "ECX:  %#010X    EDX:     %#010X\n",  cpu->ecx, 	cpu->edx);
c0100555:	8b 45 08             	mov    0x8(%ebp),%eax
c0100558:	8b 48 20             	mov    0x20(%eax),%ecx
c010055b:	8b 45 08             	mov    0x8(%ebp),%eax
c010055e:	8b 50 24             	mov    0x24(%eax),%edx
c0100561:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100564:	03 45 0c             	add    0xc(%ebp),%eax
c0100567:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010056b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010056f:	c7 44 24 04 8c 8b 10 	movl   $0xc0108b8c,0x4(%esp)
c0100576:	c0 
c0100577:	89 04 24             	mov    %eax,(%esp)
c010057a:	e8 c0 20 00 00       	call   c010263f <sprintf>
c010057f:	01 45 f4             	add    %eax,-0xc(%ebp)
	len += sprintf(str + len, "ESI:  %#010X    EDI:     %#010X\n",  cpu->esi, 	cpu->edi);
c0100582:	8b 45 08             	mov    0x8(%ebp),%eax
c0100585:	8b 48 10             	mov    0x10(%eax),%ecx
c0100588:	8b 45 08             	mov    0x8(%ebp),%eax
c010058b:	8b 50 14             	mov    0x14(%eax),%edx
c010058e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100591:	03 45 0c             	add    0xc(%ebp),%eax
c0100594:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100598:	89 54 24 08          	mov    %edx,0x8(%esp)
c010059c:	c7 44 24 04 b0 8b 10 	movl   $0xc0108bb0,0x4(%esp)
c01005a3:	c0 
c01005a4:	89 04 24             	mov    %eax,(%esp)
c01005a7:	e8 93 20 00 00       	call   c010263f <sprintf>
c01005ac:	01 45 f4             	add    %eax,-0xc(%ebp)
	len += sprintf(str + len, "ESP:  %#010X    EBP:     %#010X\n",  cpu->esp, 	cpu->ebp);
c01005af:	8b 45 08             	mov    0x8(%ebp),%eax
c01005b2:	8b 48 18             	mov    0x18(%eax),%ecx
c01005b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01005b8:	8b 50 40             	mov    0x40(%eax),%edx
c01005bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005be:	03 45 0c             	add    0xc(%ebp),%eax
c01005c1:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01005c5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01005c9:	c7 44 24 04 d4 8b 10 	movl   $0xc0108bd4,0x4(%esp)
c01005d0:	c0 
c01005d1:	89 04 24             	mov    %eax,(%esp)
c01005d4:	e8 66 20 00 00       	call   c010263f <sprintf>
c01005d9:	01 45 f4             	add    %eax,-0xc(%ebp)
	len += sprintf(str + len, "CS:   %#010X    DS:      %#010X\n",  cpu->cs, 	cpu->ds);
c01005dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01005df:	8b 48 0c             	mov    0xc(%eax),%ecx
c01005e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01005e5:	8b 50 38             	mov    0x38(%eax),%edx
c01005e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005eb:	03 45 0c             	add    0xc(%ebp),%eax
c01005ee:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01005f2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01005f6:	c7 44 24 04 f8 8b 10 	movl   $0xc0108bf8,0x4(%esp)
c01005fd:	c0 
c01005fe:	89 04 24             	mov    %eax,(%esp)
c0100601:	e8 39 20 00 00       	call   c010263f <sprintf>
c0100606:	01 45 f4             	add    %eax,-0xc(%ebp)
	len += sprintf(str + len, "SS:   %#010X    ES:      %#010X\n",  cpu->ss, 	cpu->es);
c0100609:	8b 45 08             	mov    0x8(%ebp),%eax
c010060c:	8b 48 08             	mov    0x8(%eax),%ecx
c010060f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100612:	8b 50 44             	mov    0x44(%eax),%edx
c0100615:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100618:	03 45 0c             	add    0xc(%ebp),%eax
c010061b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010061f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100623:	c7 44 24 04 1c 8c 10 	movl   $0xc0108c1c,0x4(%esp)
c010062a:	c0 
c010062b:	89 04 24             	mov    %eax,(%esp)
c010062e:	e8 0c 20 00 00       	call   c010263f <sprintf>
c0100633:	01 45 f4             	add    %eax,-0xc(%ebp)
	len += sprintf(str + len, "GS:   %#010X    FS:      %#010X\n",  cpu->gs, 	cpu->fs);
c0100636:	8b 45 08             	mov    0x8(%ebp),%eax
c0100639:	8b 48 04             	mov    0x4(%eax),%ecx
c010063c:	8b 45 08             	mov    0x8(%ebp),%eax
c010063f:	8b 10                	mov    (%eax),%edx
c0100641:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100644:	03 45 0c             	add    0xc(%ebp),%eax
c0100647:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010064b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010064f:	c7 44 24 04 40 8c 10 	movl   $0xc0108c40,0x4(%esp)
c0100656:	c0 
c0100657:	89 04 24             	mov    %eax,(%esp)
c010065a:	e8 e0 1f 00 00       	call   c010263f <sprintf>
c010065f:	01 45 f4             	add    %eax,-0xc(%ebp)
	len += sprintf(str + len, "EIP:  %#010X    EFLAGS:  %#010X\n",  cpu->eip, 	cpu->eflags);
c0100662:	8b 45 08             	mov    0x8(%ebp),%eax
c0100665:	8b 48 3c             	mov    0x3c(%eax),%ecx
c0100668:	8b 45 08             	mov    0x8(%ebp),%eax
c010066b:	8b 50 34             	mov    0x34(%eax),%edx
c010066e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100671:	03 45 0c             	add    0xc(%ebp),%eax
c0100674:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100678:	89 54 24 08          	mov    %edx,0x8(%esp)
c010067c:	c7 44 24 04 64 8c 10 	movl   $0xc0108c64,0x4(%esp)
c0100683:	c0 
c0100684:	89 04 24             	mov    %eax,(%esp)
c0100687:	e8 b3 1f 00 00       	call   c010263f <sprintf>
c010068c:	01 45 f4             	add    %eax,-0xc(%ebp)

	return len;
c010068f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100692:	c9                   	leave  
c0100693:	c3                   	ret    

c0100694 <exc_panic>:


// just used in case of untreated exceptions
void exc_panic(struct cpu_state* cpu)
{
c0100694:	55                   	push   %ebp
c0100695:	89 e5                	mov    %esp,%ebp
c0100697:	81 ec 28 02 00 00    	sub    $0x228,%esp
	char message[512];
	char *exception = exception_messages[cpu->intr];
c010069d:	8b 45 08             	mov    0x8(%ebp),%eax
c01006a0:	8b 40 2c             	mov    0x2c(%eax),%eax
c01006a3:	8b 04 85 20 c0 10 c0 	mov    -0x3fef3fe0(,%eax,4),%eax
c01006aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len = 0;
c01006ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	len = sprintf(message, "%s\n\n", exception, cpu->error);
c01006b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01006b7:	8b 40 30             	mov    0x30(%eax),%eax
c01006ba:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01006be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006c1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01006c5:	c7 44 24 04 85 8c 10 	movl   $0xc0108c85,0x4(%esp)
c01006cc:	c0 
c01006cd:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c01006d3:	89 04 24             	mov    %eax,(%esp)
c01006d6:	e8 64 1f 00 00       	call   c010263f <sprintf>
c01006db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cpu_dump(cpu, message + len);
c01006de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006e1:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
c01006e7:	01 d0                	add    %edx,%eax
c01006e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01006f0:	89 04 24             	mov    %eax,(%esp)
c01006f3:	e8 23 fe ff ff       	call   c010051b <cpu_dump>

	panic(message);
c01006f8:	ba 0a 07 10 c0       	mov    $0xc010070a,%edx
c01006fd:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
c0100703:	89 04 24             	mov    %eax,(%esp)
c0100706:	ff d2                	call   *%edx
}
c0100708:	c9                   	leave  
c0100709:	c3                   	ret    

c010070a <panic>:

void panic(char *message)
{
c010070a:	55                   	push   %ebp
c010070b:	89 e5                	mov    %esp,%ebp
c010070d:	57                   	push   %edi
c010070e:	56                   	push   %esi
c010070f:	53                   	push   %ebx
c0100710:	81 ec 2c 04 00 00    	sub    $0x42c,%esp
	char buffer[1024];
	int lines = 8;
c0100716:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%ebp)
	int len = 0;
c010071d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	int i;
	len += sprintf(buffer + len, "      %c", 201);
c0100724:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100727:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010072d:	01 d0                	add    %edx,%eax
c010072f:	c7 44 24 08 c9 00 00 	movl   $0xc9,0x8(%esp)
c0100736:	00 
c0100737:	c7 44 24 04 8a 8c 10 	movl   $0xc0108c8a,0x4(%esp)
c010073e:	c0 
c010073f:	89 04 24             	mov    %eax,(%esp)
c0100742:	e8 f8 1e 00 00       	call   c010263f <sprintf>
c0100747:	01 45 e0             	add    %eax,-0x20(%ebp)
	for(i=0;i<66;i++) len += sprintf(buffer + len, "%c", 205);
c010074a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0100751:	eb 2a                	jmp    c010077d <panic+0x73>
c0100753:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100756:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010075c:	01 d0                	add    %edx,%eax
c010075e:	c7 44 24 08 cd 00 00 	movl   $0xcd,0x8(%esp)
c0100765:	00 
c0100766:	c7 44 24 04 93 8c 10 	movl   $0xc0108c93,0x4(%esp)
c010076d:	c0 
c010076e:	89 04 24             	mov    %eax,(%esp)
c0100771:	e8 c9 1e 00 00       	call   c010263f <sprintf>
c0100776:	01 45 e0             	add    %eax,-0x20(%ebp)
c0100779:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010077d:	83 7d dc 41          	cmpl   $0x41,-0x24(%ebp)
c0100781:	7e d0                	jle    c0100753 <panic+0x49>
	len += sprintf(buffer + len, "%c      \n", 187);
c0100783:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100786:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010078c:	01 d0                	add    %edx,%eax
c010078e:	c7 44 24 08 bb 00 00 	movl   $0xbb,0x8(%esp)
c0100795:	00 
c0100796:	c7 44 24 04 96 8c 10 	movl   $0xc0108c96,0x4(%esp)
c010079d:	c0 
c010079e:	89 04 24             	mov    %eax,(%esp)
c01007a1:	e8 99 1e 00 00       	call   c010263f <sprintf>
c01007a6:	01 45 e0             	add    %eax,-0x20(%ebp)
	
	len += sprintf(buffer + len, 
c01007a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01007ac:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c01007b2:	01 d0                	add    %edx,%eax
c01007b4:	c7 44 24 0c ba 00 00 	movl   $0xba,0xc(%esp)
c01007bb:	00 
c01007bc:	c7 44 24 08 ba 00 00 	movl   $0xba,0x8(%esp)
c01007c3:	00 
c01007c4:	c7 44 24 04 a0 8c 10 	movl   $0xc0108ca0,0x4(%esp)
c01007cb:	c0 
c01007cc:	89 04 24             	mov    %eax,(%esp)
c01007cf:	e8 6b 1e 00 00       	call   c010263f <sprintf>
c01007d4:	01 45 e0             	add    %eax,-0x20(%ebp)
		       "      %c                             Universe                             %c      \n",
	       186, 186);
	
	len += sprintf(buffer + len, "      %c", 200);
c01007d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01007da:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c01007e0:	01 d0                	add    %edx,%eax
c01007e2:	c7 44 24 08 c8 00 00 	movl   $0xc8,0x8(%esp)
c01007e9:	00 
c01007ea:	c7 44 24 04 8a 8c 10 	movl   $0xc0108c8a,0x4(%esp)
c01007f1:	c0 
c01007f2:	89 04 24             	mov    %eax,(%esp)
c01007f5:	e8 45 1e 00 00       	call   c010263f <sprintf>
c01007fa:	01 45 e0             	add    %eax,-0x20(%ebp)
	for(i=0;i<66;i++) len += sprintf(buffer + len, "%c", 205);
c01007fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0100804:	eb 2a                	jmp    c0100830 <panic+0x126>
c0100806:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100809:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010080f:	01 d0                	add    %edx,%eax
c0100811:	c7 44 24 08 cd 00 00 	movl   $0xcd,0x8(%esp)
c0100818:	00 
c0100819:	c7 44 24 04 93 8c 10 	movl   $0xc0108c93,0x4(%esp)
c0100820:	c0 
c0100821:	89 04 24             	mov    %eax,(%esp)
c0100824:	e8 16 1e 00 00       	call   c010263f <sprintf>
c0100829:	01 45 e0             	add    %eax,-0x20(%ebp)
c010082c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0100830:	83 7d dc 41          	cmpl   $0x41,-0x24(%ebp)
c0100834:	7e d0                	jle    c0100806 <panic+0xfc>
	len += sprintf(buffer + len, "%c      \n", 188);
c0100836:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100839:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c010083f:	01 d0                	add    %edx,%eax
c0100841:	c7 44 24 08 bc 00 00 	movl   $0xbc,0x8(%esp)
c0100848:	00 
c0100849:	c7 44 24 04 96 8c 10 	movl   $0xc0108c96,0x4(%esp)
c0100850:	c0 
c0100851:	89 04 24             	mov    %eax,(%esp)
c0100854:	e8 e6 1d 00 00       	call   c010263f <sprintf>
c0100859:	01 45 e0             	add    %eax,-0x20(%ebp)
	
	len += sprintf(buffer + len,
c010085c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010085f:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c0100865:	01 d0                	add    %edx,%eax
c0100867:	ba f4 8c 10 c0       	mov    $0xc0108cf4,%edx
c010086c:	bb 4e 00 00 00       	mov    $0x4e,%ebx
c0100871:	89 c1                	mov    %eax,%ecx
c0100873:	83 e1 01             	and    $0x1,%ecx
c0100876:	85 c9                	test   %ecx,%ecx
c0100878:	74 0e                	je     c0100888 <panic+0x17e>
c010087a:	0f b6 0a             	movzbl (%edx),%ecx
c010087d:	88 08                	mov    %cl,(%eax)
c010087f:	83 c0 01             	add    $0x1,%eax
c0100882:	83 c2 01             	add    $0x1,%edx
c0100885:	83 eb 01             	sub    $0x1,%ebx
c0100888:	89 c1                	mov    %eax,%ecx
c010088a:	83 e1 02             	and    $0x2,%ecx
c010088d:	85 c9                	test   %ecx,%ecx
c010088f:	74 0f                	je     c01008a0 <panic+0x196>
c0100891:	0f b7 0a             	movzwl (%edx),%ecx
c0100894:	66 89 08             	mov    %cx,(%eax)
c0100897:	83 c0 02             	add    $0x2,%eax
c010089a:	83 c2 02             	add    $0x2,%edx
c010089d:	83 eb 02             	sub    $0x2,%ebx
c01008a0:	89 d9                	mov    %ebx,%ecx
c01008a2:	c1 e9 02             	shr    $0x2,%ecx
c01008a5:	89 c7                	mov    %eax,%edi
c01008a7:	89 d6                	mov    %edx,%esi
c01008a9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c01008ab:	89 f2                	mov    %esi,%edx
c01008ad:	89 f8                	mov    %edi,%eax
c01008af:	b9 00 00 00 00       	mov    $0x0,%ecx
c01008b4:	89 de                	mov    %ebx,%esi
c01008b6:	83 e6 02             	and    $0x2,%esi
c01008b9:	85 f6                	test   %esi,%esi
c01008bb:	74 0b                	je     c01008c8 <panic+0x1be>
c01008bd:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c01008c1:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c01008c5:	83 c1 02             	add    $0x2,%ecx
c01008c8:	83 e3 01             	and    $0x1,%ebx
c01008cb:	85 db                	test   %ebx,%ebx
c01008cd:	74 07                	je     c01008d6 <panic+0x1cc>
c01008cf:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c01008d3:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c01008d6:	83 45 e0 4d          	addl   $0x4d,-0x20(%ebp)
		"      Universe has been crashed. You have to restart your computer.\n"
		"\n"
		"      "
	);

	while (*message != '\0') {
c01008da:	eb 46                	jmp    c0100922 <panic+0x218>
		buffer[len++] = *message;
c01008dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01008df:	0f b6 10             	movzbl (%eax),%edx
c01008e2:	8d 85 dc fb ff ff    	lea    -0x424(%ebp),%eax
c01008e8:	03 45 e0             	add    -0x20(%ebp),%eax
c01008eb:	88 10                	mov    %dl,(%eax)
c01008ed:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)

		if (*message == '\n') {
c01008f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01008f4:	0f b6 00             	movzbl (%eax),%eax
c01008f7:	3c 0a                	cmp    $0xa,%al
c01008f9:	75 23                	jne    c010091e <panic+0x214>
			len += sprintf(buffer + len, "      ");
c01008fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01008fe:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c0100904:	01 d0                	add    %edx,%eax
c0100906:	c7 00 20 20 20 20    	movl   $0x20202020,(%eax)
c010090c:	66 c7 40 04 20 20    	movw   $0x2020,0x4(%eax)
c0100912:	c6 40 06 00          	movb   $0x0,0x6(%eax)
c0100916:	83 45 e0 06          	addl   $0x6,-0x20(%ebp)
			++lines;
c010091a:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
		}

		++message;
c010091e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
		"      Universe has been crashed. You have to restart your computer.\n"
		"\n"
		"      "
	);

	while (*message != '\0') {
c0100922:	8b 45 08             	mov    0x8(%ebp),%eax
c0100925:	0f b6 00             	movzbl (%eax),%eax
c0100928:	84 c0                	test   %al,%al
c010092a:	75 b0                	jne    c01008dc <panic+0x1d2>
		}

		++message;
	}

	len += sprintf (buffer + len,
c010092c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010092f:	8d 95 dc fb ff ff    	lea    -0x424(%ebp),%edx
c0100935:	01 d0                	add    %edx,%eax
c0100937:	ba 44 8d 10 c0       	mov    $0xc0108d44,%edx
c010093c:	bb 4d 00 00 00       	mov    $0x4d,%ebx
c0100941:	89 c1                	mov    %eax,%ecx
c0100943:	83 e1 01             	and    $0x1,%ecx
c0100946:	85 c9                	test   %ecx,%ecx
c0100948:	74 0e                	je     c0100958 <panic+0x24e>
c010094a:	0f b6 0a             	movzbl (%edx),%ecx
c010094d:	88 08                	mov    %cl,(%eax)
c010094f:	83 c0 01             	add    $0x1,%eax
c0100952:	83 c2 01             	add    $0x1,%edx
c0100955:	83 eb 01             	sub    $0x1,%ebx
c0100958:	89 c1                	mov    %eax,%ecx
c010095a:	83 e1 02             	and    $0x2,%ecx
c010095d:	85 c9                	test   %ecx,%ecx
c010095f:	74 0f                	je     c0100970 <panic+0x266>
c0100961:	0f b7 0a             	movzwl (%edx),%ecx
c0100964:	66 89 08             	mov    %cx,(%eax)
c0100967:	83 c0 02             	add    $0x2,%eax
c010096a:	83 c2 02             	add    $0x2,%edx
c010096d:	83 eb 02             	sub    $0x2,%ebx
c0100970:	89 d9                	mov    %ebx,%ecx
c0100972:	c1 e9 02             	shr    $0x2,%ecx
c0100975:	89 c7                	mov    %eax,%edi
c0100977:	89 d6                	mov    %edx,%esi
c0100979:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010097b:	89 f2                	mov    %esi,%edx
c010097d:	89 f8                	mov    %edi,%eax
c010097f:	b9 00 00 00 00       	mov    $0x0,%ecx
c0100984:	89 de                	mov    %ebx,%esi
c0100986:	83 e6 02             	and    $0x2,%esi
c0100989:	85 f6                	test   %esi,%esi
c010098b:	74 0b                	je     c0100998 <panic+0x28e>
c010098d:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0100991:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0100995:	83 c1 02             	add    $0x2,%ecx
c0100998:	83 e3 01             	and    $0x1,%ebx
c010099b:	85 db                	test   %ebx,%ebx
c010099d:	74 07                	je     c01009a6 <panic+0x29c>
c010099f:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c01009a3:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c01009a6:	83 45 e0 4c          	addl   $0x4c,-0x20(%ebp)
		       "\n\n      To help us improving our systems, please report this incident to us."
	);

	set_color(WHITE | RED << 4);
c01009aa:	c7 04 24 4f 00 00 00 	movl   $0x4f,(%esp)
c01009b1:	e8 14 29 00 00       	call   c01032ca <set_color>
	clear_screen();
c01009b6:	e8 ab 28 00 00       	call   c0103266 <clear_screen>

	gotoxy(0, (25 / 2) - (lines / 2) - 1);
c01009bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01009be:	89 c2                	mov    %eax,%edx
c01009c0:	c1 ea 1f             	shr    $0x1f,%edx
c01009c3:	01 d0                	add    %edx,%eax
c01009c5:	d1 f8                	sar    %eax
c01009c7:	ba 0b 00 00 00       	mov    $0xb,%edx
c01009cc:	89 d1                	mov    %edx,%ecx
c01009ce:	28 c1                	sub    %al,%cl
c01009d0:	89 c8                	mov    %ecx,%eax
c01009d2:	0f b6 c0             	movzbl %al,%eax
c01009d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01009d9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01009e0:	e8 08 29 00 00       	call   c01032ed <gotoxy>
	puts(buffer);
c01009e5:	8d 85 dc fb ff ff    	lea    -0x424(%ebp),%eax
c01009eb:	89 04 24             	mov    %eax,(%esp)
c01009ee:	e8 fc 27 00 00       	call   c01031ef <puts>
	printf("\n\n      ");
c01009f3:	c7 04 24 91 8d 10 c0 	movl   $0xc0108d91,(%esp)
c01009fa:	e8 cd 1b 00 00       	call   c01025cc <printf>
	
	halt();
c01009ff:	e8 10 fb ff ff       	call   c0100514 <halt>
}
c0100a04:	81 c4 2c 04 00 00    	add    $0x42c,%esp
c0100a0a:	5b                   	pop    %ebx
c0100a0b:	5e                   	pop    %esi
c0100a0c:	5f                   	pop    %edi
c0100a0d:	5d                   	pop    %ebp
c0100a0e:	c3                   	ret    

c0100a0f <winpanic>:

/* easter egg! */
void winpanic(char *message)
{
c0100a0f:	55                   	push   %ebp
c0100a10:	89 e5                	mov    %esp,%ebp
c0100a12:	83 ec 18             	sub    $0x18,%esp
	set_color(WHITE | BLUE << 4);
c0100a15:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c0100a1c:	e8 a9 28 00 00       	call   c01032ca <set_color>
	clear_screen();
c0100a21:	e8 40 28 00 00       	call   c0103266 <clear_screen>

	gotoxy(37, 8);
c0100a26:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0100a2d:	00 
c0100a2e:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0100a35:	e8 b3 28 00 00       	call   c01032ed <gotoxy>
	set_color(BLUE | LIGHT_GRAY << 4);
c0100a3a:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c0100a41:	e8 84 28 00 00       	call   c01032ca <set_color>
	printf(" Windows");
c0100a46:	c7 04 24 9a 8d 10 c0 	movl   $0xc0108d9a,(%esp)
c0100a4d:	e8 7a 1b 00 00       	call   c01025cc <printf>
	set_color(WHITE | BLUE << 4);
c0100a52:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c0100a59:	e8 6c 28 00 00       	call   c01032ca <set_color>
	printf("\n\n      ");
c0100a5e:	c7 04 24 91 8d 10 c0 	movl   $0xc0108d91,(%esp)
c0100a65:	e8 62 1b 00 00       	call   c01025cc <printf>
	while (*message != '\0') {
c0100a6a:	eb 2b                	jmp    c0100a97 <winpanic+0x88>
		putchar(*message);
c0100a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a6f:	0f b6 00             	movzbl (%eax),%eax
c0100a72:	0f be c0             	movsbl %al,%eax
c0100a75:	89 04 24             	mov    %eax,(%esp)
c0100a78:	e8 13 26 00 00       	call   c0103090 <putchar>

		if (*message == '\n') {
c0100a7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a80:	0f b6 00             	movzbl (%eax),%eax
c0100a83:	3c 0a                	cmp    $0xa,%al
c0100a85:	75 0c                	jne    c0100a93 <winpanic+0x84>
			printf("      ");
c0100a87:	c7 04 24 a3 8d 10 c0 	movl   $0xc0108da3,(%esp)
c0100a8e:	e8 39 1b 00 00       	call   c01025cc <printf>
		}

		++message;
c0100a93:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	gotoxy(37, 8);
	set_color(BLUE | LIGHT_GRAY << 4);
	printf(" Windows");
	set_color(WHITE | BLUE << 4);
	printf("\n\n      ");
	while (*message != '\0') {
c0100a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a9a:	0f b6 00             	movzbl (%eax),%eax
c0100a9d:	84 c0                	test   %al,%al
c0100a9f:	75 cb                	jne    c0100a6c <winpanic+0x5d>

		++message;
	}
	//printf("%s\n", message);

	printf("\n\n      *  Druecken Sie eine beliebige Taste, um die Anwendung abzubrechen.\n");
c0100aa1:	c7 04 24 ac 8d 10 c0 	movl   $0xc0108dac,(%esp)
c0100aa8:	e8 42 27 00 00       	call   c01031ef <puts>
	printf("      *  Druecken Sie Strg+Alt+Entf, um den Computer neu zu\n");
c0100aad:	c7 04 24 f8 8d 10 c0 	movl   $0xc0108df8,(%esp)
c0100ab4:	e8 36 27 00 00       	call   c01031ef <puts>
	printf("      starten. nicht gespeicherte Daten gehen dabei verloren.\n");
c0100ab9:	c7 04 24 34 8e 10 c0 	movl   $0xc0108e34,(%esp)
c0100ac0:	e8 2a 27 00 00       	call   c01031ef <puts>
	halt();
c0100ac5:	e8 4a fa ff ff       	call   c0100514 <halt>
}
c0100aca:	c9                   	leave  
c0100acb:	c3                   	ret    

c0100acc <INIT_PAGING>:
 * Initalize paging (kernel_pd)
 *
 * @param void
 * @return void
 */
void INIT_PAGING(struct multiboot_struct *mb_info) {
c0100acc:	55                   	push   %ebp
c0100acd:	89 e5                	mov    %esp,%ebp
c0100acf:	83 ec 58             	sub    $0x58,%esp
	install_exc(INT_PAGE_FAULT, pd_fault_handler);
c0100ad2:	c7 44 24 04 0d 16 10 	movl   $0xc010160d,0x4(%esp)
c0100ad9:	c0 
c0100ada:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0100ae1:	e8 2c 4f 00 00       	call   c0105a12 <install_exc>

	paddr_t pd_paddr = pmm_alloc_page_limit(0);
c0100ae6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100aed:	e8 6e 69 00 00       	call   c0107460 <pmm_alloc_page_limit>
c0100af2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	pd_kernel = pd_paddr + MEMORY_LAYOUT_KERNEL_START;
c0100af5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100af8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0100afd:	a3 00 e0 10 c0       	mov    %eax,0xc010e000

	paddr_t pframe = pmm_alloc_page_limit(0);
c0100b02:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100b09:	e8 52 69 00 00       	call   c0107460 <pmm_alloc_page_limit>
c0100b0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	vaddr_t vframe = pframe + MEMORY_LAYOUT_KERNEL_START;
c0100b11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b14:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0100b19:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	vaddr_t pt_vframe = MEMORY_LAYOUT_PAGING_STRUCTURES_START;
c0100b1c:	c7 45 e0 00 00 80 ff 	movl   $0xff800000,-0x20(%ebp)

	pd_kernel->phys_addr = pframe;
c0100b23:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100b28:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100b2b:	89 50 04             	mov    %edx,0x4(%eax)
	pd_kernel->entries = vframe;
c0100b2e:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100b33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b36:	89 10                	mov    %edx,(%eax)
	pd_kernel->entries[PDE_INDEX(pt_vframe)] = pframe | PTE_WRITABLE | PDE_PRESENT;
c0100b38:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100b3d:	8b 00                	mov    (%eax),%eax
c0100b3f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b42:	c1 ea 16             	shr    $0x16,%edx
c0100b45:	c1 e2 02             	shl    $0x2,%edx
c0100b48:	01 d0                	add    %edx,%eax
c0100b4a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100b4d:	83 ca 03             	or     $0x3,%edx
c0100b50:	89 10                	mov    %edx,(%eax)
	
	pd_map_range(pd_kernel, 0, MEMORY_LAYOUT_KERNEL_START, NUM_PAGES(MEMORY_LAYOUT_DIRECT_MAPPED), PTE_WRITABLE);// kernel
c0100b52:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100b57:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0100b5e:	00 
c0100b5f:	c7 44 24 0c 00 20 00 	movl   $0x2000,0xc(%esp)
c0100b66:	00 
c0100b67:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
c0100b6e:	c0 
c0100b6f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100b76:	00 
c0100b77:	89 04 24             	mov    %eax,(%esp)
c0100b7a:	e8 9c 06 00 00       	call   c010121b <pd_map_range>
	pd_map(pd_kernel, 0xB8000, 0xC00B8000, PTE_WRITABLE | PTE_USER);// videomemory (0xB8000 - 0xBFFFF)
c0100b7f:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100b84:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0100b8b:	00 
c0100b8c:	c7 44 24 08 00 80 0b 	movl   $0xc00b8000,0x8(%esp)
c0100b93:	c0 
c0100b94:	c7 44 24 04 00 80 0b 	movl   $0xb8000,0x4(%esp)
c0100b9b:	00 
c0100b9c:	89 04 24             	mov    %eax,(%esp)
c0100b9f:	e8 bb 04 00 00       	call   c010105f <pd_map>
	// multiboot
	pd_map(pd_kernel, (vaddr_t)mb_info & (~0xfff) - MEMORY_LAYOUT_KERNEL_START, ((paddr_t)mb_info&(~0xfff)), PTE_WRITABLE);
c0100ba4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ba7:	89 c1                	mov    %eax,%ecx
c0100ba9:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c0100baf:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bb2:	89 c2                	mov    %eax,%edx
c0100bb4:	81 e2 00 f0 ff 3f    	and    $0x3ffff000,%edx
c0100bba:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100bbf:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0100bc6:	00 
c0100bc7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100bcb:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100bcf:	89 04 24             	mov    %eax,(%esp)
c0100bd2:	e8 88 04 00 00       	call   c010105f <pd_map>
	pd_map(pd_kernel, mb_info->mods_addr & (~0xfff) - MEMORY_LAYOUT_KERNEL_START, mb_info->mods_addr & (~0xfff), PTE_WRITABLE);
c0100bd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bda:	8b 40 18             	mov    0x18(%eax),%eax
c0100bdd:	89 c1                	mov    %eax,%ecx
c0100bdf:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c0100be5:	8b 45 08             	mov    0x8(%ebp),%eax
c0100be8:	8b 40 18             	mov    0x18(%eax),%eax
c0100beb:	89 c2                	mov    %eax,%edx
c0100bed:	81 e2 00 f0 ff 3f    	and    $0x3ffff000,%edx
c0100bf3:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100bf8:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0100bff:	00 
c0100c00:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100c04:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100c08:	89 04 24             	mov    %eax,(%esp)
c0100c0b:	e8 4f 04 00 00       	call   c010105f <pd_map>
	
	int i;
	uintptr_t addr;
	struct mods_add *modules = (void*) mb_info->mods_addr;
c0100c10:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c13:	8b 40 18             	mov    0x18(%eax),%eax
c0100c16:	89 45 dc             	mov    %eax,-0x24(%ebp)
	for(i = 0; i < mb_info->mods_count; i++) {
c0100c19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c20:	eb 54                	jmp    c0100c76 <INIT_PAGING+0x1aa>
		addr = modules[i].mod_start & (~0xfff);
c0100c22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c25:	c1 e0 04             	shl    $0x4,%eax
c0100c28:	03 45 dc             	add    -0x24(%ebp),%eax
c0100c2b:	8b 00                	mov    (%eax),%eax
c0100c2d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0100c32:	89 45 f0             	mov    %eax,-0x10(%ebp)
		while(addr < modules[i].mod_end) {
c0100c35:	eb 2a                	jmp    c0100c61 <INIT_PAGING+0x195>
			pd_map(pd_kernel, addr, addr, PTE_PRESENT | PTE_WRITABLE);
c0100c37:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100c3c:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
c0100c43:	00 
c0100c44:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100c47:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100c4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100c4e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100c52:	89 04 24             	mov    %eax,(%esp)
c0100c55:	e8 05 04 00 00       	call   c010105f <pd_map>
			addr += PAGE_SIZE;
c0100c5a:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
	int i;
	uintptr_t addr;
	struct mods_add *modules = (void*) mb_info->mods_addr;
	for(i = 0; i < mb_info->mods_count; i++) {
		addr = modules[i].mod_start & (~0xfff);
		while(addr < modules[i].mod_end) {
c0100c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c64:	c1 e0 04             	shl    $0x4,%eax
c0100c67:	03 45 dc             	add    -0x24(%ebp),%eax
c0100c6a:	8b 40 04             	mov    0x4(%eax),%eax
c0100c6d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c70:	77 c5                	ja     c0100c37 <INIT_PAGING+0x16b>
	pd_map(pd_kernel, mb_info->mods_addr & (~0xfff) - MEMORY_LAYOUT_KERNEL_START, mb_info->mods_addr & (~0xfff), PTE_WRITABLE);
	
	int i;
	uintptr_t addr;
	struct mods_add *modules = (void*) mb_info->mods_addr;
	for(i = 0; i < mb_info->mods_count; i++) {
c0100c72:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100c76:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c79:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c7c:	8b 40 14             	mov    0x14(%eax),%eax
c0100c7f:	39 c2                	cmp    %eax,%edx
c0100c81:	72 9f                	jb     c0100c22 <INIT_PAGING+0x156>
			pd_map(pd_kernel, addr, addr, PTE_PRESENT | PTE_WRITABLE);
			addr += PAGE_SIZE;
		}
	}
	
	void *pd = pd_automap_kernel(pd_kernel, pframe, PTE_WRITABLE);
c0100c83:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100c88:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0100c8f:	00 
c0100c90:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100c93:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100c97:	89 04 24             	mov    %eax,(%esp)
c0100c9a:	e8 03 06 00 00       	call   c01012a2 <pd_automap_kernel>
c0100c9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	void *ct = pd_automap_kernel(pd_kernel, pd_paddr, PTE_WRITABLE);
c0100ca2:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100ca7:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0100cae:	00 
c0100caf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100cb2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100cb6:	89 04 24             	mov    %eax,(%esp)
c0100cb9:	e8 e4 05 00 00       	call   c01012a2 <pd_automap_kernel>
c0100cbe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	pd_kernel->entries = pd;
c0100cc1:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100cc6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100cc9:	89 10                	mov    %edx,(%eax)
	pd_kernel = ct;
c0100ccb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100cce:	a3 00 e0 10 c0       	mov    %eax,0xc010e000
	
	pd_current = pd_kernel;
c0100cd3:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
c0100cd8:	a3 04 e0 10 c0       	mov    %eax,0xc010e004
	asm volatile("mov %0, %%cr3" : : "r" (pframe));
c0100cdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100ce0:	0f 22 d8             	mov    %eax,%cr3
}
c0100ce3:	c9                   	leave  
c0100ce4:	c3                   	ret    

c0100ce5 <pd_create>:
 * Create new pagedirectory
 *
 * @param void
 * @return new pagedirectory
 */
pd_t *pd_create(void) {
c0100ce5:	55                   	push   %ebp
c0100ce6:	89 e5                	mov    %esp,%ebp
c0100ce8:	57                   	push   %edi
c0100ce9:	53                   	push   %ebx
c0100cea:	83 ec 20             	sub    $0x20,%esp
	uintptr_t paddr = (uintptr_t) pmm_alloc_page();
c0100ced:	e8 31 67 00 00       	call   c0107423 <pmm_alloc_page>
c0100cf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	pd_t *pd = pd_automap_kernel(pd_current, paddr, PTE_PRESENT | PTE_WRITABLE);
c0100cf5:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0100cfa:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0100d01:	00 
c0100d02:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d05:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100d09:	89 04 24             	mov    %eax,(%esp)
c0100d0c:	e8 91 05 00 00       	call   c01012a2 <pd_automap_kernel>
c0100d11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memset(pd, 0, PAGE_SIZE);
c0100d14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100d17:	89 c2                	mov    %eax,%edx
c0100d19:	bb 00 10 00 00       	mov    $0x1000,%ebx
c0100d1e:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d23:	89 d1                	mov    %edx,%ecx
c0100d25:	83 e1 01             	and    $0x1,%ecx
c0100d28:	85 c9                	test   %ecx,%ecx
c0100d2a:	74 08                	je     c0100d34 <pd_create+0x4f>
c0100d2c:	88 02                	mov    %al,(%edx)
c0100d2e:	83 c2 01             	add    $0x1,%edx
c0100d31:	83 eb 01             	sub    $0x1,%ebx
c0100d34:	89 d1                	mov    %edx,%ecx
c0100d36:	83 e1 02             	and    $0x2,%ecx
c0100d39:	85 c9                	test   %ecx,%ecx
c0100d3b:	74 09                	je     c0100d46 <pd_create+0x61>
c0100d3d:	66 89 02             	mov    %ax,(%edx)
c0100d40:	83 c2 02             	add    $0x2,%edx
c0100d43:	83 eb 02             	sub    $0x2,%ebx
c0100d46:	89 d9                	mov    %ebx,%ecx
c0100d48:	c1 e9 02             	shr    $0x2,%ecx
c0100d4b:	89 d7                	mov    %edx,%edi
c0100d4d:	f3 ab                	rep stos %eax,%es:(%edi)
c0100d4f:	89 fa                	mov    %edi,%edx
c0100d51:	89 d9                	mov    %ebx,%ecx
c0100d53:	83 e1 02             	and    $0x2,%ecx
c0100d56:	85 c9                	test   %ecx,%ecx
c0100d58:	74 06                	je     c0100d60 <pd_create+0x7b>
c0100d5a:	66 89 02             	mov    %ax,(%edx)
c0100d5d:	83 c2 02             	add    $0x2,%edx
c0100d60:	89 d9                	mov    %ebx,%ecx
c0100d62:	83 e1 01             	and    $0x1,%ecx
c0100d65:	85 c9                	test   %ecx,%ecx
c0100d67:	74 05                	je     c0100d6e <pd_create+0x89>
c0100d69:	88 02                	mov    %al,(%edx)
c0100d6b:	83 c2 01             	add    $0x1,%edx
  	
	uintptr_t entries_paddr = (uintptr_t) pmm_alloc_page();
c0100d6e:	e8 b0 66 00 00       	call   c0107423 <pmm_alloc_page>
c0100d73:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uintptr_t entries = pd_automap_kernel(pd_current, entries_paddr, PTE_PRESENT | PTE_WRITABLE);
c0100d76:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0100d7b:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0100d82:	00 
c0100d83:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100d86:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100d8a:	89 04 24             	mov    %eax,(%esp)
c0100d8d:	e8 10 05 00 00       	call   c01012a2 <pd_automap_kernel>
c0100d92:	89 45 e8             	mov    %eax,-0x18(%ebp)
	memset(entries, 0, PAGE_SIZE);
c0100d95:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d98:	89 c2                	mov    %eax,%edx
c0100d9a:	bb 00 10 00 00       	mov    $0x1000,%ebx
c0100d9f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100da4:	89 d1                	mov    %edx,%ecx
c0100da6:	83 e1 01             	and    $0x1,%ecx
c0100da9:	85 c9                	test   %ecx,%ecx
c0100dab:	74 08                	je     c0100db5 <pd_create+0xd0>
c0100dad:	88 02                	mov    %al,(%edx)
c0100daf:	83 c2 01             	add    $0x1,%edx
c0100db2:	83 eb 01             	sub    $0x1,%ebx
c0100db5:	89 d1                	mov    %edx,%ecx
c0100db7:	83 e1 02             	and    $0x2,%ecx
c0100dba:	85 c9                	test   %ecx,%ecx
c0100dbc:	74 09                	je     c0100dc7 <pd_create+0xe2>
c0100dbe:	66 89 02             	mov    %ax,(%edx)
c0100dc1:	83 c2 02             	add    $0x2,%edx
c0100dc4:	83 eb 02             	sub    $0x2,%ebx
c0100dc7:	89 d9                	mov    %ebx,%ecx
c0100dc9:	c1 e9 02             	shr    $0x2,%ecx
c0100dcc:	89 d7                	mov    %edx,%edi
c0100dce:	f3 ab                	rep stos %eax,%es:(%edi)
c0100dd0:	89 fa                	mov    %edi,%edx
c0100dd2:	89 d9                	mov    %ebx,%ecx
c0100dd4:	83 e1 02             	and    $0x2,%ecx
c0100dd7:	85 c9                	test   %ecx,%ecx
c0100dd9:	74 06                	je     c0100de1 <pd_create+0xfc>
c0100ddb:	66 89 02             	mov    %ax,(%edx)
c0100dde:	83 c2 02             	add    $0x2,%edx
c0100de1:	89 d9                	mov    %ebx,%ecx
c0100de3:	83 e1 01             	and    $0x1,%ecx
c0100de6:	85 c9                	test   %ecx,%ecx
c0100de8:	74 05                	je     c0100def <pd_create+0x10a>
c0100dea:	88 02                	mov    %al,(%edx)
c0100dec:	83 c2 01             	add    $0x1,%edx
	
	pd->entries = (pde_t*) entries;
c0100def:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100df2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100df5:	89 10                	mov    %edx,(%eax)
	pd->phys_addr = entries_paddr;
c0100df7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100dfa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100dfd:	89 50 04             	mov    %edx,0x4(%eax)
	
	pd_update(pd);
c0100e00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100e03:	89 04 24             	mov    %eax,(%esp)
c0100e06:	e8 1c 00 00 00       	call   c0100e27 <pd_update>
	pd->entries[PDE_INDEX(MEMORY_LAYOUT_PAGING_STRUCTURES_START)] = (uint32_t) entries_paddr | PTE_PRESENT | PTE_WRITABLE;
c0100e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100e0e:	8b 00                	mov    (%eax),%eax
c0100e10:	05 f8 0f 00 00       	add    $0xff8,%eax
c0100e15:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100e18:	83 ca 03             	or     $0x3,%edx
c0100e1b:	89 10                	mov    %edx,(%eax)
	
	return pd;
c0100e1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100e20:	83 c4 20             	add    $0x20,%esp
c0100e23:	5b                   	pop    %ebx
c0100e24:	5f                   	pop    %edi
c0100e25:	5d                   	pop    %ebp
c0100e26:	c3                   	ret    

c0100e27 <pd_update>:
 * Update the kernelspace area of a pagedir
 *
 * @param pagedir
 * @return void
 */
void pd_update(pd_t *pd) {
c0100e27:	55                   	push   %ebp
c0100e28:	89 e5                	mov    %esp,%ebp
c0100e2a:	83 ec 28             	sub    $0x28,%esp
	if(pd != pd_current) {
c0100e2d:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0100e32:	39 45 08             	cmp    %eax,0x8(%ebp)
c0100e35:	74 59                	je     c0100e90 <pd_update+0x69>
		#define START PDE_INDEX(MEMORY_LAYOUT_KERNEL_START)
		#define END   PDE_INDEX(MEMORY_LAYOUT_KERNEL_END)
		uintptr_t upd = (uintptr_t) (pd->entries + START);
c0100e37:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e3a:	8b 00                	mov    (%eax),%eax
c0100e3c:	05 00 0c 00 00       	add    $0xc00,%eax
c0100e41:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uintptr_t kpd = (uintptr_t) (pd_current->entries + START);
c0100e44:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0100e49:	8b 00                	mov    (%eax),%eax
c0100e4b:	05 00 0c 00 00       	add    $0xc00,%eax
c0100e50:	89 45 f0             	mov    %eax,-0x10(%ebp)
		size_t len = END - START;
c0100e53:	c7 45 ec ff 00 00 00 	movl   $0xff,-0x14(%ebp)
		memcpy((void*) upd, (void*) kpd, len * sizeof(pde_t));
c0100e5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100e5d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0100e64:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e6a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e6e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100e72:	89 04 24             	mov    %eax,(%esp)
c0100e75:	e8 2c 60 00 00       	call   c0106ea6 <memcpy>
		pd->entries[PDE_INDEX(MEMORY_LAYOUT_PAGING_STRUCTURES_START)] = (uint32_t) pd->phys_addr | PTE_PRESENT | PTE_WRITABLE;
c0100e7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e7d:	8b 00                	mov    (%eax),%eax
c0100e7f:	8d 90 f8 0f 00 00    	lea    0xff8(%eax),%edx
c0100e85:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e88:	8b 40 04             	mov    0x4(%eax),%eax
c0100e8b:	83 c8 03             	or     $0x3,%eax
c0100e8e:	89 02                	mov    %eax,(%edx)
	}
}
c0100e90:	c9                   	leave  
c0100e91:	c3                   	ret    

c0100e92 <pd_destroy>:
 * Destroy a pagedirectory
 *
 * @param pd pagedirectory to destroy
 * @return void
 */
void pd_destroy(pd_t *pd) {
c0100e92:	55                   	push   %ebp
c0100e93:	89 e5                	mov    %esp,%ebp
c0100e95:	83 ec 28             	sub    $0x28,%esp
	int pt;
	for (pt = 0; pt < PD_LENGTH; ++pt) {
c0100e98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e9f:	eb 31                	jmp    c0100ed2 <pd_destroy+0x40>
		if (pd->entries[pt] & PDE_PRESENT) {
c0100ea1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ea4:	8b 00                	mov    (%eax),%eax
c0100ea6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ea9:	c1 e2 02             	shl    $0x2,%edx
c0100eac:	01 d0                	add    %edx,%eax
c0100eae:	8b 00                	mov    (%eax),%eax
c0100eb0:	83 e0 01             	and    $0x1,%eax
c0100eb3:	84 c0                	test   %al,%al
c0100eb5:	74 17                	je     c0100ece <pd_destroy+0x3c>
			pmm_mark_page_as_free((paddr_t)pd->entries[pt]);
c0100eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0100eba:	8b 00                	mov    (%eax),%eax
c0100ebc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ebf:	c1 e2 02             	shl    $0x2,%edx
c0100ec2:	01 d0                	add    %edx,%eax
c0100ec4:	8b 00                	mov    (%eax),%eax
c0100ec6:	89 04 24             	mov    %eax,(%esp)
c0100ec9:	e8 34 62 00 00       	call   c0107102 <pmm_mark_page_as_free>
 * @param pd pagedirectory to destroy
 * @return void
 */
void pd_destroy(pd_t *pd) {
	int pt;
	for (pt = 0; pt < PD_LENGTH; ++pt) {
c0100ece:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100ed2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0100ed9:	7e c6                	jle    c0100ea1 <pd_destroy+0xf>
		if (pd->entries[pt] & PDE_PRESENT) {
			pmm_mark_page_as_free((paddr_t)pd->entries[pt]);
		}
	}
	pmm_mark_page_as_free((paddr_t)pd->phys_addr);
c0100edb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ede:	8b 40 04             	mov    0x4(%eax),%eax
c0100ee1:	89 04 24             	mov    %eax,(%esp)
c0100ee4:	e8 19 62 00 00       	call   c0107102 <pmm_mark_page_as_free>
}
c0100ee9:	c9                   	leave  
c0100eea:	c3                   	ret    

c0100eeb <pt_get>:
 * @param index index
 * @param flags flags
 *
 * @return pagetable
 */
pt_t pt_get(pd_t *pd, int index, uint8_t flags) {
c0100eeb:	55                   	push   %ebp
c0100eec:	89 e5                	mov    %esp,%ebp
c0100eee:	83 ec 38             	sub    $0x38,%esp
c0100ef1:	8b 45 10             	mov    0x10(%ebp),%eax
c0100ef4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	pt_t pt;

	if(pd_current != NULL) {
c0100ef7:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0100efc:	85 c0                	test   %eax,%eax
c0100efe:	74 52                	je     c0100f52 <pt_get+0x67>
	  if(pd != pd_current) {
c0100f00:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0100f05:	39 45 08             	cmp    %eax,0x8(%ebp)
c0100f08:	74 38                	je     c0100f42 <pt_get+0x57>
	    pt = (pt_t) PT_PADDR(index);
c0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f0d:	8b 00                	mov    (%eax),%eax
c0100f0f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f12:	c1 e2 02             	shl    $0x2,%edx
c0100f15:	01 d0                	add    %edx,%eax
c0100f17:	8b 00                	mov    (%eax),%eax
c0100f19:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0100f1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    pt = pd_automap_kernel(pd_current, pt, flags);
c0100f21:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0100f25:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100f28:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0100f2d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100f31:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100f35:	89 04 24             	mov    %eax,(%esp)
c0100f38:	e8 65 03 00 00       	call   c01012a2 <pd_automap_kernel>
c0100f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100f40:	eb 27                	jmp    c0100f69 <pt_get+0x7e>
	  } else {
	    pt = (pt_t) PT_VADDR(index);
c0100f42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f45:	05 00 f8 0f 00       	add    $0xff800,%eax
c0100f4a:	c1 e0 0c             	shl    $0xc,%eax
c0100f4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100f50:	eb 17                	jmp    c0100f69 <pt_get+0x7e>
	  }
	} else {
	  pt = (pt_t) PT_PADDR(index) + MEMORY_LAYOUT_KERNEL_START;
c0100f52:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f55:	8b 00                	mov    (%eax),%eax
c0100f57:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f5a:	c1 e2 02             	shl    $0x2,%edx
c0100f5d:	01 d0                	add    %edx,%eax
c0100f5f:	8b 00                	mov    (%eax),%eax
c0100f61:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0100f66:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	return pt;
c0100f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100f6c:	c9                   	leave  
c0100f6d:	c3                   	ret    

c0100f6e <pt_create>:
 * @param index index
 * @param flags flags
 *
 * @return pagetable
 */
pt_t pt_create(pd_t *pd, int index, uint8_t flags) {
c0100f6e:	55                   	push   %ebp
c0100f6f:	89 e5                	mov    %esp,%ebp
c0100f71:	57                   	push   %edi
c0100f72:	53                   	push   %ebx
c0100f73:	83 ec 30             	sub    $0x30,%esp
c0100f76:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f79:	88 45 e4             	mov    %al,-0x1c(%ebp)
	pt_t pt = pmm_alloc_page_limit(0);
c0100f7c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f83:	e8 d8 64 00 00       	call   c0107460 <pmm_alloc_page_limit>
c0100f88:	89 45 f4             	mov    %eax,-0xc(%ebp)
	pd->entries[index] = (pde_t) pt | flags | PDE_PRESENT;
c0100f8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f8e:	8b 00                	mov    (%eax),%eax
c0100f90:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f93:	c1 e2 02             	shl    $0x2,%edx
c0100f96:	01 d0                	add    %edx,%eax
c0100f98:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0100f9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100f9f:	09 ca                	or     %ecx,%edx
c0100fa1:	83 ca 01             	or     $0x1,%edx
c0100fa4:	89 10                	mov    %edx,(%eax)

	pt = pt_get(pd, index, flags | PDE_PRESENT);
c0100fa6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0100faa:	83 c8 01             	or     $0x1,%eax
c0100fad:	0f b6 c0             	movzbl %al,%eax
c0100fb0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100fb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100fbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fbe:	89 04 24             	mov    %eax,(%esp)
c0100fc1:	e8 25 ff ff ff       	call   c0100eeb <pt_get>
c0100fc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	memset(pt, 0, 4096);
c0100fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100fcc:	89 c2                	mov    %eax,%edx
c0100fce:	bb 00 10 00 00       	mov    $0x1000,%ebx
c0100fd3:	b8 00 00 00 00       	mov    $0x0,%eax
c0100fd8:	89 d1                	mov    %edx,%ecx
c0100fda:	83 e1 01             	and    $0x1,%ecx
c0100fdd:	85 c9                	test   %ecx,%ecx
c0100fdf:	74 08                	je     c0100fe9 <pt_create+0x7b>
c0100fe1:	88 02                	mov    %al,(%edx)
c0100fe3:	83 c2 01             	add    $0x1,%edx
c0100fe6:	83 eb 01             	sub    $0x1,%ebx
c0100fe9:	89 d1                	mov    %edx,%ecx
c0100feb:	83 e1 02             	and    $0x2,%ecx
c0100fee:	85 c9                	test   %ecx,%ecx
c0100ff0:	74 09                	je     c0100ffb <pt_create+0x8d>
c0100ff2:	66 89 02             	mov    %ax,(%edx)
c0100ff5:	83 c2 02             	add    $0x2,%edx
c0100ff8:	83 eb 02             	sub    $0x2,%ebx
c0100ffb:	89 d9                	mov    %ebx,%ecx
c0100ffd:	c1 e9 02             	shr    $0x2,%ecx
c0101000:	89 d7                	mov    %edx,%edi
c0101002:	f3 ab                	rep stos %eax,%es:(%edi)
c0101004:	89 fa                	mov    %edi,%edx
c0101006:	89 d9                	mov    %ebx,%ecx
c0101008:	83 e1 02             	and    $0x2,%ecx
c010100b:	85 c9                	test   %ecx,%ecx
c010100d:	74 06                	je     c0101015 <pt_create+0xa7>
c010100f:	66 89 02             	mov    %ax,(%edx)
c0101012:	83 c2 02             	add    $0x2,%edx
c0101015:	89 d9                	mov    %ebx,%ecx
c0101017:	83 e1 01             	and    $0x1,%ecx
c010101a:	85 c9                	test   %ecx,%ecx
c010101c:	74 05                	je     c0101023 <pt_create+0xb5>
c010101e:	88 02                	mov    %al,(%edx)
c0101020:	83 c2 01             	add    $0x1,%edx

	return pt;
c0101023:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101026:	83 c4 30             	add    $0x30,%esp
c0101029:	5b                   	pop    %ebx
c010102a:	5f                   	pop    %edi
c010102b:	5d                   	pop    %ebp
c010102c:	c3                   	ret    

c010102d <pt_destroy>:
 * @param pd pagedirectory
 * @param index index
 *
 * @return void
 */
void pt_destroy(pd_t *pd, int index) {
c010102d:	55                   	push   %ebp
c010102e:	89 e5                	mov    %esp,%ebp
c0101030:	83 ec 18             	sub    $0x18,%esp
	pmm_mark_page_as_free((paddr_t)pd->entries[index]);
c0101033:	8b 45 08             	mov    0x8(%ebp),%eax
c0101036:	8b 00                	mov    (%eax),%eax
c0101038:	8b 55 0c             	mov    0xc(%ebp),%edx
c010103b:	c1 e2 02             	shl    $0x2,%edx
c010103e:	01 d0                	add    %edx,%eax
c0101040:	8b 00                	mov    (%eax),%eax
c0101042:	89 04 24             	mov    %eax,(%esp)
c0101045:	e8 b8 60 00 00       	call   c0107102 <pmm_mark_page_as_free>
	pd->entries[index] = 0;
c010104a:	8b 45 08             	mov    0x8(%ebp),%eax
c010104d:	8b 00                	mov    (%eax),%eax
c010104f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101052:	c1 e2 02             	shl    $0x2,%edx
c0101055:	01 d0                	add    %edx,%eax
c0101057:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010105d:	c9                   	leave  
c010105e:	c3                   	ret    

c010105f <pd_map>:
 * @param vframe vitual adress
 * @param flags flags
 *
 * @return success
 */
int pd_map(pd_t *pd, paddr_t pframe, vaddr_t vframe, uint8_t flags) {
c010105f:	55                   	push   %ebp
c0101060:	89 e5                	mov    %esp,%ebp
c0101062:	83 ec 38             	sub    $0x38,%esp
c0101065:	8b 45 14             	mov    0x14(%ebp),%eax
c0101068:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if( (pframe & 0xFFF) || (vframe & 0xFFF) ) {
c010106b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010106e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0101073:	85 c0                	test   %eax,%eax
c0101075:	75 0c                	jne    c0101083 <pd_map+0x24>
c0101077:	8b 45 10             	mov    0x10(%ebp),%eax
c010107a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010107f:	85 c0                	test   %eax,%eax
c0101081:	74 24                	je     c01010a7 <pd_map+0x48>
	  printf("pd_map(): can't map 0x%x to 0x%x.", pframe, vframe);
c0101083:	8b 45 10             	mov    0x10(%ebp),%eax
c0101086:	89 44 24 08          	mov    %eax,0x8(%esp)
c010108a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010108d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101091:	c7 04 24 74 8e 10 c0 	movl   $0xc0108e74,(%esp)
c0101098:	e8 2f 15 00 00       	call   c01025cc <printf>
	  return -1;
c010109d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01010a2:	e9 e3 00 00 00       	jmp    c010118a <pd_map+0x12b>
	}

	uint32_t pd_index = PDE_INDEX(vframe);
c01010a7:	8b 45 10             	mov    0x10(%ebp),%eax
c01010aa:	c1 e8 16             	shr    $0x16,%eax
c01010ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t pt_index = PTE_INDEX(vframe);
c01010b0:	8b 45 10             	mov    0x10(%ebp),%eax
c01010b3:	c1 e8 0c             	shr    $0xc,%eax
c01010b6:	25 ff 03 00 00       	and    $0x3ff,%eax
c01010bb:	89 45 ec             	mov    %eax,-0x14(%ebp)

	pt_t pt = NULL;
c01010be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	pde_t pde = pd->entries[pd_index];
c01010c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01010c8:	8b 00                	mov    (%eax),%eax
c01010ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01010cd:	c1 e2 02             	shl    $0x2,%edx
c01010d0:	01 d0                	add    %edx,%eax
c01010d2:	8b 00                	mov    (%eax),%eax
c01010d4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	if (pde & PDE_PRESENT) {
c01010d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01010da:	83 e0 01             	and    $0x1,%eax
c01010dd:	84 c0                	test   %al,%al
c01010df:	74 25                	je     c0101106 <pd_map+0xa7>
		pt = pt_get(pd, pd_index, flags | PDE_PRESENT);
c01010e1:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c01010e5:	83 c8 01             	or     $0x1,%eax
c01010e8:	0f b6 d0             	movzbl %al,%edx
c01010eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01010ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01010f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01010f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01010f9:	89 04 24             	mov    %eax,(%esp)
c01010fc:	e8 ea fd ff ff       	call   c0100eeb <pt_get>
c0101101:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101104:	eb 23                	jmp    c0101129 <pd_map+0xca>
	} else {
		pt = pt_create(pd, pd_index, flags | PDE_PRESENT);
c0101106:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010110a:	83 c8 01             	or     $0x1,%eax
c010110d:	0f b6 d0             	movzbl %al,%edx
c0101110:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101113:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101117:	89 44 24 04          	mov    %eax,0x4(%esp)
c010111b:	8b 45 08             	mov    0x8(%ebp),%eax
c010111e:	89 04 24             	mov    %eax,(%esp)
c0101121:	e8 48 fe ff ff       	call   c0100f6e <pt_create>
c0101126:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	pt[pt_index] = (pte_t)(pframe & ~0xFFF) | PTE_PRESENT | (flags & 0xFFF);
c0101129:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010112c:	c1 e0 02             	shl    $0x2,%eax
c010112f:	03 45 f4             	add    -0xc(%ebp),%eax
c0101132:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101135:	89 d1                	mov    %edx,%ecx
c0101137:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c010113d:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0101141:	09 ca                	or     %ecx,%edx
c0101143:	83 ca 01             	or     $0x1,%edx
c0101146:	89 10                	mov    %edx,(%eax)

	if(pd == pd_current && pd_current) {
c0101148:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c010114d:	39 45 08             	cmp    %eax,0x8(%ebp)
c0101150:	75 16                	jne    c0101168 <pd_map+0x109>
c0101152:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0101157:	85 c0                	test   %eax,%eax
c0101159:	74 0d                	je     c0101168 <pd_map+0x109>
		paging_flush_tlb(vframe);
c010115b:	8b 45 10             	mov    0x10(%ebp),%eax
c010115e:	89 04 24             	mov    %eax,(%esp)
c0101161:	e8 72 05 00 00       	call   c01016d8 <paging_flush_tlb>
c0101166:	eb 1d                	jmp    c0101185 <pd_map+0x126>
	} else {
		if(pd_current) {
c0101168:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c010116d:	85 c0                	test   %eax,%eax
c010116f:	74 14                	je     c0101185 <pd_map+0x126>
			pd_unmap(pd_current, (vaddr_t) pt);
c0101171:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101174:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0101179:	89 54 24 04          	mov    %edx,0x4(%esp)
c010117d:	89 04 24             	mov    %eax,(%esp)
c0101180:	e8 07 00 00 00       	call   c010118c <pd_unmap>
		}
	}

	return 0;
c0101185:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010118a:	c9                   	leave  
c010118b:	c3                   	ret    

c010118c <pd_unmap>:
 * @param pd pagedirectory
 * @param frame adress to unmap
 *
 * @return void
 */
void pd_unmap(pd_t *pd, vaddr_t frame) {
c010118c:	55                   	push   %ebp
c010118d:	89 e5                	mov    %esp,%ebp
c010118f:	83 ec 28             	sub    $0x28,%esp
	pt_t pt = pt_get(pd, PDE_INDEX(frame), PDE_WRITABLE);
c0101192:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101195:	c1 e8 16             	shr    $0x16,%eax
c0101198:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c010119f:	00 
c01011a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01011a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01011a7:	89 04 24             	mov    %eax,(%esp)
c01011aa:	e8 3c fd ff ff       	call   c0100eeb <pt_get>
c01011af:	89 45 ec             	mov    %eax,-0x14(%ebp)
	pt[PTE_INDEX(frame)] = 0;
c01011b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01011b5:	c1 e8 0c             	shr    $0xc,%eax
c01011b8:	25 ff 03 00 00       	and    $0x3ff,%eax
c01011bd:	c1 e0 02             	shl    $0x2,%eax
c01011c0:	03 45 ec             	add    -0x14(%ebp),%eax
c01011c3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	
	int pt_emty = 1, i;
c01011c9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	for(i = 0; i < PT_LENGTH; i++) {
c01011d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01011d7:	eb 1c                	jmp    c01011f5 <pd_unmap+0x69>
	  if(pt[i]) {
c01011d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01011dc:	c1 e0 02             	shl    $0x2,%eax
c01011df:	03 45 ec             	add    -0x14(%ebp),%eax
c01011e2:	8b 00                	mov    (%eax),%eax
c01011e4:	85 c0                	test   %eax,%eax
c01011e6:	74 09                	je     c01011f1 <pd_unmap+0x65>
	    pt_emty = 0;
c01011e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	    break;
c01011ef:	eb 0d                	jmp    c01011fe <pd_unmap+0x72>
void pd_unmap(pd_t *pd, vaddr_t frame) {
	pt_t pt = pt_get(pd, PDE_INDEX(frame), PDE_WRITABLE);
	pt[PTE_INDEX(frame)] = 0;
	
	int pt_emty = 1, i;
	for(i = 0; i < PT_LENGTH; i++) {
c01011f1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01011f5:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c01011fc:	7e db                	jle    c01011d9 <pd_unmap+0x4d>
	    pt_emty = 0;
	    break;
	  }
	}
	
	if(pt_emty) {
c01011fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101202:	74 15                	je     c0101219 <pd_unmap+0x8d>
	  pt_destroy(pd, PDE_INDEX(frame));
c0101204:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101207:	c1 e8 16             	shr    $0x16,%eax
c010120a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010120e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101211:	89 04 24             	mov    %eax,(%esp)
c0101214:	e8 14 fe ff ff       	call   c010102d <pt_destroy>
	}
}
c0101219:	c9                   	leave  
c010121a:	c3                   	ret    

c010121b <pd_map_range>:

void pd_map_range(pd_t *pd, paddr_t pframe, vaddr_t vframe, unsigned int pages, uint8_t flags) {
c010121b:	55                   	push   %ebp
c010121c:	89 e5                	mov    %esp,%ebp
c010121e:	83 ec 38             	sub    $0x38,%esp
c0101221:	8b 45 18             	mov    0x18(%ebp),%eax
c0101224:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int p;
	for (p = 0; p < pages; ++p) {
c0101227:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010122e:	eb 33                	jmp    c0101263 <pd_map_range+0x48>
	  pd_map(pd, pframe + PAGE_FRAME_ADDR(p), vframe + PAGE_FRAME_ADDR(p), flags);
c0101230:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0101234:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101237:	c1 e0 0c             	shl    $0xc,%eax
c010123a:	89 c2                	mov    %eax,%edx
c010123c:	03 55 10             	add    0x10(%ebp),%edx
c010123f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101242:	c1 e0 0c             	shl    $0xc,%eax
c0101245:	03 45 0c             	add    0xc(%ebp),%eax
c0101248:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010124c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101250:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101254:	8b 45 08             	mov    0x8(%ebp),%eax
c0101257:	89 04 24             	mov    %eax,(%esp)
c010125a:	e8 00 fe ff ff       	call   c010105f <pd_map>
	}
}

void pd_map_range(pd_t *pd, paddr_t pframe, vaddr_t vframe, unsigned int pages, uint8_t flags) {
	int p;
	for (p = 0; p < pages; ++p) {
c010125f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101263:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101266:	3b 45 14             	cmp    0x14(%ebp),%eax
c0101269:	72 c5                	jb     c0101230 <pd_map_range+0x15>
	  pd_map(pd, pframe + PAGE_FRAME_ADDR(p), vframe + PAGE_FRAME_ADDR(p), flags);
	}
}
c010126b:	c9                   	leave  
c010126c:	c3                   	ret    

c010126d <pd_unmap_range>:

void pd_unmap_range(pd_t *pd, vaddr_t frame, unsigned int pages) {
c010126d:	55                   	push   %ebp
c010126e:	89 e5                	mov    %esp,%ebp
c0101270:	83 ec 28             	sub    $0x28,%esp
	int p;
	for(p = 0; p < pages; p++) {
c0101273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010127a:	eb 1c                	jmp    c0101298 <pd_unmap_range+0x2b>
	  pd_unmap(pd, frame + PAGE_FRAME_ADDR(p));
c010127c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010127f:	c1 e0 0c             	shl    $0xc,%eax
c0101282:	03 45 0c             	add    0xc(%ebp),%eax
c0101285:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101289:	8b 45 08             	mov    0x8(%ebp),%eax
c010128c:	89 04 24             	mov    %eax,(%esp)
c010128f:	e8 f8 fe ff ff       	call   c010118c <pd_unmap>
	}
}

void pd_unmap_range(pd_t *pd, vaddr_t frame, unsigned int pages) {
	int p;
	for(p = 0; p < pages; p++) {
c0101294:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101298:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010129b:	3b 45 10             	cmp    0x10(%ebp),%eax
c010129e:	72 dc                	jb     c010127c <pd_unmap_range+0xf>
	  pd_unmap(pd, frame + PAGE_FRAME_ADDR(p));
	}
}
c01012a0:	c9                   	leave  
c01012a1:	c3                   	ret    

c01012a2 <pd_automap_kernel>:
 * @param pframe phys. address
 * @param flags flags
 *
 * @return virtual address
 */
vaddr_t pd_automap_kernel(pd_t *pd, paddr_t pframe, uint8_t flags) {
c01012a2:	55                   	push   %ebp
c01012a3:	89 e5                	mov    %esp,%ebp
c01012a5:	83 ec 48             	sub    $0x48,%esp
c01012a8:	8b 45 10             	mov    0x10(%ebp),%eax
c01012ab:	88 45 e4             	mov    %al,-0x1c(%ebp)
	vaddr_t vframe = vaddr_find(pd, 1,
c01012ae:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c01012b2:	89 44 24 10          	mov    %eax,0x10(%esp)
c01012b6:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c01012bd:	ff 
c01012be:	c7 44 24 08 00 00 00 	movl   $0xc2000000,0x8(%esp)
c01012c5:	c2 
c01012c6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01012cd:	00 
c01012ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01012d1:	89 04 24             	mov    %eax,(%esp)
c01012d4:	e8 b1 01 00 00       	call   c010148a <vaddr_find>
c01012d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
				    MEMORY_LAYOUT_RESERVED_AREA_END,
				    MEMORY_LAYOUT_KERNEL_END, flags);
	pd_map(pd, pframe, vframe, flags | PTE_PRESENT);
c01012dc:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c01012e0:	83 c8 01             	or     $0x1,%eax
c01012e3:	0f b6 c0             	movzbl %al,%eax
c01012e6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01012ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012ed:	89 44 24 08          	mov    %eax,0x8(%esp)
c01012f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01012f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01012f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01012fb:	89 04 24             	mov    %eax,(%esp)
c01012fe:	e8 5c fd ff ff       	call   c010105f <pd_map>

	return vframe;
c0101303:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101306:	c9                   	leave  
c0101307:	c3                   	ret    

c0101308 <pd_automap_kernel_range>:

vaddr_t pd_automap_kernel_range(pd_t *pd, paddr_t pframe, int pages, uint8_t flags) {
c0101308:	55                   	push   %ebp
c0101309:	89 e5                	mov    %esp,%ebp
c010130b:	83 ec 48             	sub    $0x48,%esp
c010130e:	8b 45 14             	mov    0x14(%ebp),%eax
c0101311:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int i;
	vaddr_t vaddr_start = vaddr_find(pd, pages, MEMORY_LAYOUT_RESERVED_AREA_END, MEMORY_LAYOUT_KERNEL_END, flags);
c0101314:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0101318:	89 44 24 10          	mov    %eax,0x10(%esp)
c010131c:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c0101323:	ff 
c0101324:	c7 44 24 08 00 00 00 	movl   $0xc2000000,0x8(%esp)
c010132b:	c2 
c010132c:	8b 45 10             	mov    0x10(%ebp),%eax
c010132f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101333:	8b 45 08             	mov    0x8(%ebp),%eax
c0101336:	89 04 24             	mov    %eax,(%esp)
c0101339:	e8 4c 01 00 00       	call   c010148a <vaddr_find>
c010133e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for(i = 0; i < pages; i++) {
c0101341:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101348:	eb 3f                	jmp    c0101389 <pd_automap_kernel_range+0x81>
		paddr_t paddr = pframe + i*PAGE_SIZE;
c010134a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010134d:	c1 e0 0c             	shl    $0xc,%eax
c0101350:	03 45 0c             	add    0xc(%ebp),%eax
c0101353:	89 45 ec             	mov    %eax,-0x14(%ebp)
		vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
c0101356:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101359:	c1 e0 0c             	shl    $0xc,%eax
c010135c:	03 45 f0             	add    -0x10(%ebp),%eax
c010135f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		pd_map(pd_current, paddr, vaddr, flags);
c0101362:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0101366:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c010136b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010136f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0101372:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101376:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101379:	89 54 24 04          	mov    %edx,0x4(%esp)
c010137d:	89 04 24             	mov    %eax,(%esp)
c0101380:	e8 da fc ff ff       	call   c010105f <pd_map>
}

vaddr_t pd_automap_kernel_range(pd_t *pd, paddr_t pframe, int pages, uint8_t flags) {
	int i;
	vaddr_t vaddr_start = vaddr_find(pd, pages, MEMORY_LAYOUT_RESERVED_AREA_END, MEMORY_LAYOUT_KERNEL_END, flags);
	for(i = 0; i < pages; i++) {
c0101385:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101389:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010138c:	3b 45 10             	cmp    0x10(%ebp),%eax
c010138f:	7c b9                	jl     c010134a <pd_automap_kernel_range+0x42>
		paddr_t paddr = pframe + i*PAGE_SIZE;
		vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
		pd_map(pd_current, paddr, vaddr, flags);
	}
	
	return vaddr_start;
c0101391:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0101394:	c9                   	leave  
c0101395:	c3                   	ret    

c0101396 <pd_automap_user>:
 * @param pframe phys. address
 * @param flags flags
 *
 * @return virtual address
 */
vaddr_t pd_automap_user(pd_t *pd, paddr_t pframe, uint8_t flags) {
c0101396:	55                   	push   %ebp
c0101397:	89 e5                	mov    %esp,%ebp
c0101399:	83 ec 48             	sub    $0x48,%esp
c010139c:	8b 45 10             	mov    0x10(%ebp),%eax
c010139f:	88 45 e4             	mov    %al,-0x1c(%ebp)
	vaddr_t vframe = vaddr_find(pd, 1,
c01013a2:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c01013a6:	89 44 24 10          	mov    %eax,0x10(%esp)
c01013aa:	c7 44 24 0c 00 00 00 	movl   $0xc0000000,0xc(%esp)
c01013b1:	c0 
c01013b2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01013b9:	00 
c01013ba:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01013c1:	00 
c01013c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01013c5:	89 04 24             	mov    %eax,(%esp)
c01013c8:	e8 bd 00 00 00       	call   c010148a <vaddr_find>
c01013cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
				    0x0, MEMORY_LAYOUT_KERNEL_START, flags);
	pd_map(pd, pframe, vframe, flags | PTE_PRESENT);
c01013d0:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c01013d4:	83 c8 01             	or     $0x1,%eax
c01013d7:	0f b6 c0             	movzbl %al,%eax
c01013da:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01013de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013e1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01013e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01013ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01013ef:	89 04 24             	mov    %eax,(%esp)
c01013f2:	e8 68 fc ff ff       	call   c010105f <pd_map>

	return vframe;
c01013f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01013fa:	c9                   	leave  
c01013fb:	c3                   	ret    

c01013fc <pd_automap_user_range>:

vaddr_t pd_automap_user_range(pd_t *pd, paddr_t pframe, int pages, uint8_t flags) {
c01013fc:	55                   	push   %ebp
c01013fd:	89 e5                	mov    %esp,%ebp
c01013ff:	83 ec 48             	sub    $0x48,%esp
c0101402:	8b 45 14             	mov    0x14(%ebp),%eax
c0101405:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int i;
	vaddr_t vaddr_start = vaddr_find(pd, pages, 0x0, MEMORY_LAYOUT_KERNEL_START, flags);
c0101408:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010140c:	89 44 24 10          	mov    %eax,0x10(%esp)
c0101410:	c7 44 24 0c 00 00 00 	movl   $0xc0000000,0xc(%esp)
c0101417:	c0 
c0101418:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010141f:	00 
c0101420:	8b 45 10             	mov    0x10(%ebp),%eax
c0101423:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101427:	8b 45 08             	mov    0x8(%ebp),%eax
c010142a:	89 04 24             	mov    %eax,(%esp)
c010142d:	e8 58 00 00 00       	call   c010148a <vaddr_find>
c0101432:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for(i = 0; i < pages; i++) {
c0101435:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010143c:	eb 3f                	jmp    c010147d <pd_automap_user_range+0x81>
		paddr_t paddr = pframe + i*PAGE_SIZE;
c010143e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101441:	c1 e0 0c             	shl    $0xc,%eax
c0101444:	03 45 0c             	add    0xc(%ebp),%eax
c0101447:	89 45 ec             	mov    %eax,-0x14(%ebp)
		vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
c010144a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010144d:	c1 e0 0c             	shl    $0xc,%eax
c0101450:	03 45 f0             	add    -0x10(%ebp),%eax
c0101453:	89 45 e8             	mov    %eax,-0x18(%ebp)
		pd_map(pd_current, paddr, vaddr, flags);
c0101456:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c010145a:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c010145f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0101463:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0101466:	89 54 24 08          	mov    %edx,0x8(%esp)
c010146a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010146d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101471:	89 04 24             	mov    %eax,(%esp)
c0101474:	e8 e6 fb ff ff       	call   c010105f <pd_map>
}

vaddr_t pd_automap_user_range(pd_t *pd, paddr_t pframe, int pages, uint8_t flags) {
	int i;
	vaddr_t vaddr_start = vaddr_find(pd, pages, 0x0, MEMORY_LAYOUT_KERNEL_START, flags);
	for(i = 0; i < pages; i++) {
c0101479:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010147d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101480:	3b 45 10             	cmp    0x10(%ebp),%eax
c0101483:	7c b9                	jl     c010143e <pd_automap_user_range+0x42>
		paddr_t paddr = pframe + i*PAGE_SIZE;
		vaddr_t vaddr = vaddr_start + i*PAGE_SIZE;
		pd_map(pd_current, paddr, vaddr, flags);
	}
	
	return vaddr_start;
c0101485:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0101488:	c9                   	leave  
c0101489:	c3                   	ret    

c010148a <vaddr_find>:
 * Find a free virtual adress
 *
 * @param pd pagedirectory
 * @return virtual adress
 */
vaddr_t vaddr_find(pd_t *pd, int num, vaddr_t limit_low, vaddr_t limit_high, int flags) {
c010148a:	55                   	push   %ebp
c010148b:	89 e5                	mov    %esp,%ebp
c010148d:	83 ec 48             	sub    $0x48,%esp
	  pages_found += l; \
	  if(pages_found >= num) { \
	    return vaddr; \
	  }
  
  vaddr_t vaddr = NULL;
c0101490:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  int page = 0;
c0101497:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  int pages_found = 0;
c010149e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  
  uint32_t pd_index = PDE_INDEX(limit_low);
c01014a5:	8b 45 10             	mov    0x10(%ebp),%eax
c01014a8:	c1 e8 16             	shr    $0x16,%eax
c01014ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
  uint32_t pt_index = PTE_INDEX(limit_low);
c01014ae:	8b 45 10             	mov    0x10(%ebp),%eax
c01014b1:	c1 e8 0c             	shr    $0xc,%eax
c01014b4:	25 ff 03 00 00       	and    $0x3ff,%eax
c01014b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
  uint32_t pd_index_end = PDE_INDEX(limit_high);
c01014bc:	8b 45 14             	mov    0x14(%ebp),%eax
c01014bf:	c1 e8 16             	shr    $0x16,%eax
c01014c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  uint32_t pt_index_end = PTE_INDEX(limit_high);
c01014c5:	8b 45 14             	mov    0x14(%ebp),%eax
c01014c8:	c1 e8 0c             	shr    $0xc,%eax
c01014cb:	25 ff 03 00 00       	and    $0x3ff,%eax
c01014d0:	89 45 dc             	mov    %eax,-0x24(%ebp)
  pt_t pt;
  
  while(pd_index <= pd_index_end) {
c01014d3:	e9 e4 00 00 00       	jmp    c01015bc <vaddr_find+0x132>
    if(pd->entries[pd_index] & PTE_PRESENT) {
c01014d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01014db:	8b 00                	mov    (%eax),%eax
c01014dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01014e0:	c1 e2 02             	shl    $0x2,%edx
c01014e3:	01 d0                	add    %edx,%eax
c01014e5:	8b 00                	mov    (%eax),%eax
c01014e7:	83 e0 01             	and    $0x1,%eax
c01014ea:	84 c0                	test   %al,%al
c01014ec:	0f 84 97 00 00 00    	je     c0101589 <vaddr_find+0xff>
      pt = pt_get(pd, pd_index, flags);
c01014f2:	8b 45 18             	mov    0x18(%ebp),%eax
c01014f5:	0f b6 d0             	movzbl %al,%edx
c01014f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01014fb:	89 54 24 08          	mov    %edx,0x8(%esp)
c01014ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101503:	8b 45 08             	mov    0x8(%ebp),%eax
c0101506:	89 04 24             	mov    %eax,(%esp)
c0101509:	e8 dd f9 ff ff       	call   c0100eeb <pt_get>
c010150e:	89 45 d8             	mov    %eax,-0x28(%ebp)

      uint32_t pt_end = (pd_index == pd_index_end) ? pt_index_end : PT_LENGTH; // last pd entry
c0101511:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101514:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101517:	75 05                	jne    c010151e <vaddr_find+0x94>
c0101519:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010151c:	eb 05                	jmp    c0101523 <vaddr_find+0x99>
c010151e:	b8 00 04 00 00       	mov    $0x400,%eax
c0101523:	89 45 d4             	mov    %eax,-0x2c(%ebp)
      for(; pt_index < pt_end; pt_index++) {
c0101526:	eb 50                	jmp    c0101578 <vaddr_find+0xee>
	if(! ((uint32_t)pt[pt_index] & PTE_PRESENT) ) {
c0101528:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010152b:	c1 e0 02             	shl    $0x2,%eax
c010152e:	03 45 d8             	add    -0x28(%ebp),%eax
c0101531:	8b 00                	mov    (%eax),%eax
c0101533:	83 e0 01             	and    $0x1,%eax
c0101536:	85 c0                	test   %eax,%eax
c0101538:	75 2c                	jne    c0101566 <vaddr_find+0xdc>
	  PAGES_FOUND(1);
c010153a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010153e:	75 15                	jne    c0101555 <vaddr_find+0xcb>
c0101540:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101543:	c1 e0 0a             	shl    $0xa,%eax
c0101546:	03 45 e8             	add    -0x18(%ebp),%eax
c0101549:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010154c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010154f:	c1 e0 0c             	shl    $0xc,%eax
c0101552:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101555:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0101559:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010155c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010155f:	7c 13                	jl     c0101574 <vaddr_find+0xea>
c0101561:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101564:	eb 67                	jmp    c01015cd <vaddr_find+0x143>
	} else {
	  pages_found = 0;
c0101566:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	  vaddr = (uintptr_t)NULL;
c010156d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  while(pd_index <= pd_index_end) {
    if(pd->entries[pd_index] & PTE_PRESENT) {
      pt = pt_get(pd, pd_index, flags);

      uint32_t pt_end = (pd_index == pd_index_end) ? pt_index_end : PT_LENGTH; // last pd entry
      for(; pt_index < pt_end; pt_index++) {
c0101574:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0101578:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010157b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010157e:	72 a8                	jb     c0101528 <vaddr_find+0x9e>
	} else {
	  pages_found = 0;
	  vaddr = (uintptr_t)NULL;
	}
      }
      pt_index = 0;
c0101580:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0101587:	eb 2f                	jmp    c01015b8 <vaddr_find+0x12e>
    } else {
      PAGES_FOUND(PT_LENGTH);
c0101589:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010158d:	75 15                	jne    c01015a4 <vaddr_find+0x11a>
c010158f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101592:	c1 e0 0a             	shl    $0xa,%eax
c0101595:	03 45 e8             	add    -0x18(%ebp),%eax
c0101598:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010159b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010159e:	c1 e0 0c             	shl    $0xc,%eax
c01015a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01015a4:	81 45 f0 00 04 00 00 	addl   $0x400,-0x10(%ebp)
c01015ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01015ae:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01015b1:	7c 05                	jl     c01015b8 <vaddr_find+0x12e>
c01015b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01015b6:	eb 15                	jmp    c01015cd <vaddr_find+0x143>
    }
    pd_index++;
c01015b8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  uint32_t pt_index = PTE_INDEX(limit_low);
  uint32_t pd_index_end = PDE_INDEX(limit_high);
  uint32_t pt_index_end = PTE_INDEX(limit_high);
  pt_t pt;
  
  while(pd_index <= pd_index_end) {
c01015bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015bf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01015c2:	0f 86 10 ff ff ff    	jbe    c01014d8 <vaddr_find+0x4e>
      PAGES_FOUND(PT_LENGTH);
    }
    pd_index++;
  }

  return NULL;
c01015c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01015cd:	c9                   	leave  
c01015ce:	c3                   	ret    

c01015cf <vaddr2paddr>:

/** FIXME: really needed? */
paddr_t vaddr2paddr(pd_t * const pd, vaddr_t vaddr)
{
c01015cf:	55                   	push   %ebp
c01015d0:	89 e5                	mov    %esp,%ebp
// 	unsigned int pt_index = PTE_INDEX(vaddr);
//
// 	pt_t *pt = (pt_t *)pd_map_fast(pd->entries[pd_index] & PDE_FRAME, 0);
//
// 	return (paddr_t)(pd_map_fast(pt[pt_index] & PTE_FRAME, 0) + (vaddr & 0xFFF));
	return NULL;
c01015d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01015d7:	5d                   	pop    %ebp
c01015d8:	c3                   	ret    

c01015d9 <pd_switch>:
 * @param pd pagedirectory
 * @param flags flags
 *
 * @return void
 */
void pd_switch(pd_t *pd) {
c01015d9:	55                   	push   %ebp
c01015da:	89 e5                	mov    %esp,%ebp
c01015dc:	83 ec 18             	sub    $0x18,%esp
	if(pd != pd_current && pd != NULL) {
c01015df:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c01015e4:	39 45 08             	cmp    %eax,0x8(%ebp)
c01015e7:	74 22                	je     c010160b <pd_switch+0x32>
c01015e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01015ed:	74 1c                	je     c010160b <pd_switch+0x32>
		pd_update(pd);
c01015ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01015f2:	89 04 24             	mov    %eax,(%esp)
c01015f5:	e8 2d f8 ff ff       	call   c0100e27 <pd_update>
		pd_current = pd;
c01015fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01015fd:	a3 04 e0 10 c0       	mov    %eax,0xc010e004
		asm volatile ("mov %0, %%cr3" : : "r" (pd->phys_addr));
c0101602:	8b 45 08             	mov    0x8(%ebp),%eax
c0101605:	8b 40 04             	mov    0x4(%eax),%eax
c0101608:	0f 22 d8             	mov    %eax,%cr3
	}
}
c010160b:	c9                   	leave  
c010160c:	c3                   	ret    

c010160d <pd_fault_handler>:
 *
 * @param cpu current cpu state
 * @return void
 */
void pd_fault_handler(struct cpu_state **cpu_p)
{
c010160d:	55                   	push   %ebp
c010160e:	89 e5                	mov    %esp,%ebp
c0101610:	53                   	push   %ebx
c0101611:	81 ec 34 02 00 00    	sub    $0x234,%esp
    struct cpu_state *cpu = cpu_p[0];
c0101617:	8b 45 08             	mov    0x8(%ebp),%eax
c010161a:	8b 00                	mov    (%eax),%eax
c010161c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	char message[512];
	int len = 0;
c010161f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	uint32_t addr;
	asm ("mov %%cr2, %0" : "=r" (addr));
c0101626:	0f 20 d3             	mov    %cr2,%ebx
c0101629:	89 5d ec             	mov    %ebx,-0x14(%ebp)

	len = sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X", ((cpu->error & 4) ? "user" : "kernel"),
		      ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip);
c010162c:	8b 45 f4             	mov    -0xc(%ebp),%eax
	int len = 0;

	uint32_t addr;
	asm ("mov %%cr2, %0" : "=r" (addr));

	len = sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X", ((cpu->error & 4) ? "user" : "kernel"),
c010162f:	8b 58 34             	mov    0x34(%eax),%ebx
		      ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip);
c0101632:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101635:	8b 40 30             	mov    0x30(%eax),%eax
c0101638:	83 e0 01             	and    $0x1,%eax
	int len = 0;

	uint32_t addr;
	asm ("mov %%cr2, %0" : "=r" (addr));

	len = sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X", ((cpu->error & 4) ? "user" : "kernel"),
c010163b:	84 c0                	test   %al,%al
c010163d:	74 07                	je     c0101646 <pd_fault_handler+0x39>
c010163f:	b9 96 8e 10 c0       	mov    $0xc0108e96,%ecx
c0101644:	eb 05                	jmp    c010164b <pd_fault_handler+0x3e>
c0101646:	b9 a4 8e 10 c0       	mov    $0xc0108ea4,%ecx
		      ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip);
c010164b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010164e:	8b 40 30             	mov    0x30(%eax),%eax
c0101651:	83 e0 02             	and    $0x2,%eax
	int len = 0;

	uint32_t addr;
	asm ("mov %%cr2, %0" : "=r" (addr));

	len = sprintf(message, "Page fault in %s space:\nError %s address %#010X: %s.\nEIP: %#010X", ((cpu->error & 4) ? "user" : "kernel"),
c0101654:	85 c0                	test   %eax,%eax
c0101656:	74 07                	je     c010165f <pd_fault_handler+0x52>
c0101658:	ba b2 8e 10 c0       	mov    $0xc0108eb2,%edx
c010165d:	eb 05                	jmp    c0101664 <pd_fault_handler+0x57>
c010165f:	ba bd 8e 10 c0       	mov    $0xc0108ebd,%edx
c0101664:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101667:	8b 40 30             	mov    0x30(%eax),%eax
c010166a:	83 e0 04             	and    $0x4,%eax
c010166d:	85 c0                	test   %eax,%eax
c010166f:	74 07                	je     c0101678 <pd_fault_handler+0x6b>
c0101671:	b8 c8 8e 10 c0       	mov    $0xc0108ec8,%eax
c0101676:	eb 05                	jmp    c010167d <pd_fault_handler+0x70>
c0101678:	b8 cd 8e 10 c0       	mov    $0xc0108ecd,%eax
c010167d:	89 5c 24 18          	mov    %ebx,0x18(%esp)
c0101681:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0101685:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0101688:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010168c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0101690:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101694:	c7 44 24 04 d4 8e 10 	movl   $0xc0108ed4,0x4(%esp)
c010169b:	c0 
c010169c:	8d 85 ec fd ff ff    	lea    -0x214(%ebp),%eax
c01016a2:	89 04 24             	mov    %eax,(%esp)
c01016a5:	e8 95 0f 00 00       	call   c010263f <sprintf>
c01016aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		      ((cpu->error & 2) ? "writing to" : "reading at"), addr, ((cpu->error & 1) ? "Access denied" : "Nonpaged area"), cpu->eip);

	panic(message);
c01016ad:	8d 85 ec fd ff ff    	lea    -0x214(%ebp),%eax
c01016b3:	89 04 24             	mov    %eax,(%esp)
c01016b6:	e8 4f f0 ff ff       	call   c010070a <panic>
}
c01016bb:	81 c4 34 02 00 00    	add    $0x234,%esp
c01016c1:	5b                   	pop    %ebx
c01016c2:	5d                   	pop    %ebp
c01016c3:	c3                   	ret    

c01016c4 <pd_get_current>:

inline pd_t * pd_get_current(void)
{
c01016c4:	55                   	push   %ebp
c01016c5:	89 e5                	mov    %esp,%ebp
	return pd_current;
c01016c7:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
}
c01016cc:	5d                   	pop    %ebp
c01016cd:	c3                   	ret    

c01016ce <pd_get_kernel>:

inline pd_t * pd_get_kernel(void)
{
c01016ce:	55                   	push   %ebp
c01016cf:	89 e5                	mov    %esp,%ebp
	return pd_kernel;
c01016d1:	a1 00 e0 10 c0       	mov    0xc010e000,%eax
}
c01016d6:	5d                   	pop    %ebp
c01016d7:	c3                   	ret    

c01016d8 <paging_flush_tlb>:

static inline void paging_flush_tlb(vaddr_t addr) {
c01016d8:	55                   	push   %ebp
c01016d9:	89 e5                	mov    %esp,%ebp
	asm volatile ("invlpg %0" : : "m" (*(char*) addr));
c01016db:	8b 45 08             	mov    0x8(%ebp),%eax
c01016de:	0f 01 38             	invlpg (%eax)
}
c01016e1:	5d                   	pop    %ebp
c01016e2:	c3                   	ret    
	...

c01016e4 <itoa_ex>:
 *  @param width 	Field width
 *  @return pointer to buffer
 */

char * itoa_ex(unsigned int value, char * str, int base, int flags, int width)
{
c01016e4:	55                   	push   %ebp
c01016e5:	89 e5                	mov    %esp,%ebp
c01016e7:	83 ec 48             	sub    $0x48,%esp
	char *result = str;
c01016ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01016ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	unsigned int size;
	unsigned int len = 0;
c01016f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int temp = 0;
c01016f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int negative = 0;
c01016fe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	const char *digits = "0123456789ABCDEF";
c0101705:	c7 45 ec 15 8f 10 c0 	movl   $0xc0108f15,-0x14(%ebp)

	if (flags & SMALL) {
c010170c:	8b 45 14             	mov    0x14(%ebp),%eax
c010170f:	83 e0 20             	and    $0x20,%eax
c0101712:	85 c0                	test   %eax,%eax
c0101714:	74 07                	je     c010171d <itoa_ex+0x39>
		digits = "0123456789abcdef";
c0101716:	c7 45 ec 26 8f 10 c0 	movl   $0xc0108f26,-0x14(%ebp)
	if (value < 0) {
		value = - value;
		++negative;
	}

	temp = value;
c010171d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101720:	89 45 f0             	mov    %eax,-0x10(%ebp)
	do {temp /= base; ++len;} while (temp);
c0101723:	8b 55 10             	mov    0x10(%ebp),%edx
c0101726:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0101729:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010172c:	ba 00 00 00 00       	mov    $0x0,%edx
c0101731:	f7 75 d4             	divl   -0x2c(%ebp)
c0101734:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101737:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010173b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010173f:	75 e2                	jne    c0101723 <itoa_ex+0x3f>
	size = len;
c0101741:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101744:	89 45 e0             	mov    %eax,-0x20(%ebp)

	if (!(flags & LEFT) && !(flags & ZEROPAD))
c0101747:	8b 45 14             	mov    0x14(%ebp),%eax
c010174a:	83 e0 10             	and    $0x10,%eax
c010174d:	85 c0                	test   %eax,%eax
c010174f:	75 27                	jne    c0101778 <itoa_ex+0x94>
c0101751:	8b 45 14             	mov    0x14(%ebp),%eax
c0101754:	83 e0 01             	and    $0x1,%eax
c0101757:	85 c0                	test   %eax,%eax
c0101759:	75 1d                	jne    c0101778 <itoa_ex+0x94>
		while (size < width--)
c010175b:	eb 0a                	jmp    c0101767 <itoa_ex+0x83>
			*str++ = ' ';
c010175d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101760:	c6 00 20             	movb   $0x20,(%eax)
c0101763:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
	temp = value;
	do {temp /= base; ++len;} while (temp);
	size = len;

	if (!(flags & LEFT) && !(flags & ZEROPAD))
		while (size < width--)
c0101767:	8b 45 18             	mov    0x18(%ebp),%eax
c010176a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010176d:	0f 97 c0             	seta   %al
c0101770:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c0101774:	84 c0                	test   %al,%al
c0101776:	75 e5                	jne    c010175d <itoa_ex+0x79>
			*str++ = ' ';

	if (negative) {
c0101778:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010177c:	74 0c                	je     c010178a <itoa_ex+0xa6>
		*str++ = '-';
c010177e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101781:	c6 00 2d             	movb   $0x2d,(%eax)
c0101784:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0101788:	eb 14                	jmp    c010179e <itoa_ex+0xba>
	} else if (flags & PLUS) {
c010178a:	8b 45 14             	mov    0x14(%ebp),%eax
c010178d:	83 e0 04             	and    $0x4,%eax
c0101790:	85 c0                	test   %eax,%eax
c0101792:	74 0a                	je     c010179e <itoa_ex+0xba>
		*str++ = '+';
c0101794:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101797:	c6 00 2b             	movb   $0x2b,(%eax)
c010179a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
	}
	if (flags & SPECIAL) {
c010179e:	8b 45 14             	mov    0x14(%ebp),%eax
c01017a1:	83 e0 40             	and    $0x40,%eax
c01017a4:	85 c0                	test   %eax,%eax
c01017a6:	74 18                	je     c01017c0 <itoa_ex+0xdc>
		*str++ = '0'; *str++ = 'x';
c01017a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01017ab:	c6 00 30             	movb   $0x30,(%eax)
c01017ae:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c01017b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01017b5:	c6 00 78             	movb   $0x78,(%eax)
c01017b8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
		width -= 2;
c01017bc:	83 6d 18 02          	subl   $0x2,0x18(%ebp)
	}

	if (!(flags & LEFT) && (flags & ZEROPAD))
c01017c0:	8b 45 14             	mov    0x14(%ebp),%eax
c01017c3:	83 e0 10             	and    $0x10,%eax
c01017c6:	85 c0                	test   %eax,%eax
c01017c8:	75 27                	jne    c01017f1 <itoa_ex+0x10d>
c01017ca:	8b 45 14             	mov    0x14(%ebp),%eax
c01017cd:	83 e0 01             	and    $0x1,%eax
c01017d0:	84 c0                	test   %al,%al
c01017d2:	74 1d                	je     c01017f1 <itoa_ex+0x10d>
		while (size < width--)
c01017d4:	eb 0a                	jmp    c01017e0 <itoa_ex+0xfc>
			*str++ = '0';
c01017d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01017d9:	c6 00 30             	movb   $0x30,(%eax)
c01017dc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
		*str++ = '0'; *str++ = 'x';
		width -= 2;
	}

	if (!(flags & LEFT) && (flags & ZEROPAD))
		while (size < width--)
c01017e0:	8b 45 18             	mov    0x18(%ebp),%eax
c01017e3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01017e6:	0f 97 c0             	seta   %al
c01017e9:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c01017ed:	84 c0                	test   %al,%al
c01017ef:	75 e5                	jne    c01017d6 <itoa_ex+0xf2>
			*str++ = '0';

	do {
		int power = powi(base, --len);
c01017f1:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01017f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01017f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01017fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01017ff:	89 04 24             	mov    %eax,(%esp)
c0101802:	e8 2a ec ff ff       	call   c0100431 <powi>
c0101807:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int digit = value / power;
c010180a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010180d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0101810:	8b 45 08             	mov    0x8(%ebp),%eax
c0101813:	ba 00 00 00 00       	mov    $0x0,%edx
c0101818:	f7 75 d4             	divl   -0x2c(%ebp)
c010181b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*str++ = digits[digit];
c010181e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101821:	03 45 ec             	add    -0x14(%ebp),%eax
c0101824:	0f b6 10             	movzbl (%eax),%edx
c0101827:	8b 45 0c             	mov    0xc(%ebp),%eax
c010182a:	88 10                	mov    %dl,(%eax)
c010182c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

		value -= digit * power;
c0101830:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101833:	0f af 45 dc          	imul   -0x24(%ebp),%eax
c0101837:	29 45 08             	sub    %eax,0x8(%ebp)
	} while (len > 0);
c010183a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010183e:	75 b1                	jne    c01017f1 <itoa_ex+0x10d>

	while (size < width--)
c0101840:	eb 0a                	jmp    c010184c <itoa_ex+0x168>
		*str++ = ' ';
c0101842:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101845:	c6 00 20             	movb   $0x20,(%eax)
c0101848:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
		*str++ = digits[digit];

		value -= digit * power;
	} while (len > 0);

	while (size < width--)
c010184c:	8b 45 18             	mov    0x18(%ebp),%eax
c010184f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101852:	0f 97 c0             	seta   %al
c0101855:	83 6d 18 01          	subl   $0x1,0x18(%ebp)
c0101859:	84 c0                	test   %al,%al
c010185b:	75 e5                	jne    c0101842 <itoa_ex+0x15e>
		*str++ = ' ';

	*str++ = '\0';
c010185d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101860:	c6 00 00             	movb   $0x0,(%eax)
c0101863:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

	return result;
c0101867:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c010186a:	c9                   	leave  
c010186b:	c3                   	ret    

c010186c <itoa>:
 *  @param base     numerical base (10 = decimal, 16 = hexadecimal)
 *  @return pointer to buffer
 */

inline char * itoa(unsigned int value, char * str, int base)
{
c010186c:	55                   	push   %ebp
c010186d:	89 e5                	mov    %esp,%ebp
c010186f:	83 ec 28             	sub    $0x28,%esp
	return itoa_ex(value, str, base, 0, 1);
c0101872:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0101879:	00 
c010187a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0101881:	00 
c0101882:	8b 45 10             	mov    0x10(%ebp),%eax
c0101885:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101889:	8b 45 0c             	mov    0xc(%ebp),%eax
c010188c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101890:	8b 45 08             	mov    0x8(%ebp),%eax
c0101893:	89 04 24             	mov    %eax,(%esp)
c0101896:	e8 49 fe ff ff       	call   c01016e4 <itoa_ex>
}
c010189b:	c9                   	leave  
c010189c:	c3                   	ret    

c010189d <atoi>:
 *  @param  str  input string
 *  @return integer value
 */

int atoi(const char *str)
{
c010189d:	55                   	push   %ebp
c010189e:	89 e5                	mov    %esp,%ebp
c01018a0:	83 ec 28             	sub    $0x28,%esp
	int result = 0;
c01018a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int length = 0;
c01018aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	while (isdigit(*str++))
c01018b1:	eb 04                	jmp    c01018b7 <atoi+0x1a>
		++length;
c01018b3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
int atoi(const char *str)
{
	int result = 0;
	int length = 0;

	while (isdigit(*str++))
c01018b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01018ba:	0f b6 00             	movzbl (%eax),%eax
c01018bd:	0f be c0             	movsbl %al,%eax
c01018c0:	83 e8 30             	sub    $0x30,%eax
c01018c3:	83 f8 09             	cmp    $0x9,%eax
c01018c6:	0f 96 c0             	setbe  %al
c01018c9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01018cd:	84 c0                	test   %al,%al
c01018cf:	75 e2                	jne    c01018b3 <atoi+0x16>
		++length;

	str -= length + 1;
c01018d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018d4:	f7 d0                	not    %eax
c01018d6:	01 45 08             	add    %eax,0x8(%ebp)

	while (length > 0)
c01018d9:	eb 2d                	jmp    c0101908 <atoi+0x6b>
		result += powi(10, --length) * (*str++ - '0');
c01018db:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
c01018df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01018e6:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01018ed:	e8 3f eb ff ff       	call   c0100431 <powi>
c01018f2:	8b 55 08             	mov    0x8(%ebp),%edx
c01018f5:	0f b6 12             	movzbl (%edx),%edx
c01018f8:	0f be d2             	movsbl %dl,%edx
c01018fb:	83 ea 30             	sub    $0x30,%edx
c01018fe:	0f af c2             	imul   %edx,%eax
c0101901:	01 45 f4             	add    %eax,-0xc(%ebp)
c0101904:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	while (isdigit(*str++))
		++length;

	str -= length + 1;

	while (length > 0)
c0101908:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010190c:	7f cd                	jg     c01018db <atoi+0x3e>
		result += powi(10, --length) * (*str++ - '0');

	return result;
c010190e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101911:	c9                   	leave  
c0101912:	c3                   	ret    
	...

c0101914 <INIT_VFS>:
 * Initalizing the Virtual File System
 *
 * @param void
 * @return void
 */
void INIT_VFS(void) {
c0101914:	55                   	push   %ebp
c0101915:	89 e5                	mov    %esp,%ebp
c0101917:	83 ec 28             	sub    $0x28,%esp
	root = malloc(sizeof(vfs_inode_t));
c010191a:	c7 04 24 54 00 00 00 	movl   $0x54,(%esp)
c0101921:	e8 b6 11 00 00       	call   c0102adc <malloc>
c0101926:	a3 08 e0 10 c0       	mov    %eax,0xc010e008
	root->stat.st_ino = 0;
c010192b:	a1 08 e0 10 c0       	mov    0xc010e008,%eax
c0101930:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	root->stat.st_mode = 0x1ff;
c0101937:	a1 08 e0 10 c0       	mov    0xc010e008,%eax
c010193c:	c7 40 0c ff 01 00 00 	movl   $0x1ff,0xc(%eax)
	nodes = 1;
c0101943:	c7 05 0c e0 10 c0 01 	movl   $0x1,0xc010e00c
c010194a:	00 00 00 
	root->name = "root";
c010194d:	a1 08 e0 10 c0       	mov    0xc010e008,%eax
c0101952:	c7 00 37 8f 10 c0    	movl   $0xc0108f37,(%eax)
	root->length = 0;
c0101958:	a1 08 e0 10 c0       	mov    0xc010e008,%eax
c010195d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	root->parent = NULL;
c0101964:	a1 08 e0 10 c0       	mov    0xc010e008,%eax
c0101969:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	vfs_inode_t *foo = vfs_create_inode("foo.txt", 0x1ff, root);
c0101970:	a1 08 e0 10 c0       	mov    0xc010e008,%eax
c0101975:	89 44 24 08          	mov    %eax,0x8(%esp)
c0101979:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c0101980:	00 
c0101981:	c7 04 24 3c 8f 10 c0 	movl   $0xc0108f3c,(%esp)
c0101988:	e8 42 00 00 00       	call   c01019cf <vfs_create_inode>
c010198d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vfs_write(foo, 0, "Hallo Welt!\n", 13);
c0101990:	c7 44 24 0c 0d 00 00 	movl   $0xd,0xc(%esp)
c0101997:	00 
c0101998:	c7 44 24 08 44 8f 10 	movl   $0xc0108f44,0x8(%esp)
c010199f:	c0 
c01019a0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019a7:	00 
c01019a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01019ab:	89 04 24             	mov    %eax,(%esp)
c01019ae:	e8 39 01 00 00       	call   c0101aec <vfs_write>
}
c01019b3:	c9                   	leave  
c01019b4:	c3                   	ret    

c01019b5 <set_vfs_uid>:
 * Set the User-ID
 *
 * @param new_uid the new user-id
 * @return void
 */
void set_vfs_uid(uid_t new_uid) {
c01019b5:	55                   	push   %ebp
c01019b6:	89 e5                	mov    %esp,%ebp
	uid = new_uid;
c01019b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01019bb:	a3 10 e0 10 c0       	mov    %eax,0xc010e010
}
c01019c0:	5d                   	pop    %ebp
c01019c1:	c3                   	ret    

c01019c2 <set_vfs_gid>:
 * Set the Group-ID
 *
 * @param new_gid the new group-id
 * @return void
 */
void set_vfs_gid(gid_t new_gid) {
c01019c2:	55                   	push   %ebp
c01019c3:	89 e5                	mov    %esp,%ebp
	gid = new_gid;
c01019c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01019c8:	a3 14 e0 10 c0       	mov    %eax,0xc010e014
}
c01019cd:	5d                   	pop    %ebp
c01019ce:	c3                   	ret    

c01019cf <vfs_create_inode>:
 * @param parent the parent node for the new node.
 *               if parent is NULL, the parent for the node is root.
 *
 * @return pointer to the new node
 */
vfs_inode_t* vfs_create_inode(char *name, mode_t mode, vfs_inode_t *parent) {
c01019cf:	55                   	push   %ebp
c01019d0:	89 e5                	mov    %esp,%ebp
c01019d2:	83 ec 28             	sub    $0x28,%esp
	vfs_inode_t *node = malloc(sizeof(vfs_inode_t));
c01019d5:	c7 04 24 54 00 00 00 	movl   $0x54,(%esp)
c01019dc:	e8 fb 10 00 00       	call   c0102adc <malloc>
c01019e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	node->name = name;
c01019e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01019e7:	8b 55 08             	mov    0x8(%ebp),%edx
c01019ea:	89 10                	mov    %edx,(%eax)
	node->length = 0;
c01019ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01019ef:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	node->base = NULL;
c01019f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01019f9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	if (parent != NULL) {
c0101a00:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0101a04:	74 3b                	je     c0101a41 <vfs_create_inode+0x72>
		node->parent = parent;
c0101a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101a09:	8b 55 10             	mov    0x10(%ebp),%edx
c0101a0c:	89 50 50             	mov    %edx,0x50(%eax)
		vfs_dentry_t *entry = vfs_create_dir_entry(node);
c0101a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101a12:	89 04 24             	mov    %eax,(%esp)
c0101a15:	e8 a4 00 00 00       	call   c0101abe <vfs_create_dir_entry>
c0101a1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		vfs_write(parent, parent->length, entry, sizeof(vfs_dentry_t));
c0101a1d:	8b 45 10             	mov    0x10(%ebp),%eax
c0101a20:	8b 40 08             	mov    0x8(%eax),%eax
c0101a23:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0101a2a:	00 
c0101a2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101a2e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101a32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101a36:	8b 45 10             	mov    0x10(%ebp),%eax
c0101a39:	89 04 24             	mov    %eax,(%esp)
c0101a3c:	e8 ab 00 00 00       	call   c0101aec <vfs_write>
	}

	node->stat.st_mode = mode;
c0101a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101a44:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101a47:	89 50 0c             	mov    %edx,0xc(%eax)
	node->stat.st_ino = nodes++;
c0101a4a:	a1 0c e0 10 c0       	mov    0xc010e00c,%eax
c0101a4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101a52:	89 42 10             	mov    %eax,0x10(%edx)
c0101a55:	83 c0 01             	add    $0x1,%eax
c0101a58:	a3 0c e0 10 c0       	mov    %eax,0xc010e00c
	node->stat.st_uid = uid;
c0101a5d:	8b 15 10 e0 10 c0    	mov    0xc010e010,%edx
c0101a63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101a66:	89 50 18             	mov    %edx,0x18(%eax)
	node->stat.st_gid = gid;
c0101a69:	8b 15 14 e0 10 c0    	mov    0xc010e014,%edx
c0101a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101a72:	89 50 1c             	mov    %edx,0x1c(%eax)
	node->stat.st_atime = *get_time();
c0101a75:	e8 13 2d 00 00       	call   c010478d <get_time>
c0101a7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101a7d:	8b 08                	mov    (%eax),%ecx
c0101a7f:	89 4a 24             	mov    %ecx,0x24(%edx)
c0101a82:	8b 48 04             	mov    0x4(%eax),%ecx
c0101a85:	89 4a 28             	mov    %ecx,0x28(%edx)
c0101a88:	0f b7 48 08          	movzwl 0x8(%eax),%ecx
c0101a8c:	66 89 4a 2c          	mov    %cx,0x2c(%edx)
c0101a90:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0101a94:	88 42 2e             	mov    %al,0x2e(%edx)
	node->stat.st_mtime = *get_time();
c0101a97:	e8 f1 2c 00 00       	call   c010478d <get_time>
c0101a9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101a9f:	8b 08                	mov    (%eax),%ecx
c0101aa1:	89 4a 2f             	mov    %ecx,0x2f(%edx)
c0101aa4:	8b 48 04             	mov    0x4(%eax),%ecx
c0101aa7:	89 4a 33             	mov    %ecx,0x33(%edx)
c0101aaa:	0f b7 48 08          	movzwl 0x8(%eax),%ecx
c0101aae:	66 89 4a 37          	mov    %cx,0x37(%edx)
c0101ab2:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
c0101ab6:	88 42 39             	mov    %al,0x39(%edx)

	return node;
c0101ab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101abc:	c9                   	leave  
c0101abd:	c3                   	ret    

c0101abe <vfs_create_dir_entry>:
 * Create a new directory entry
 *
 * @param entry_inode the node that will be entried
 * @return the new directory entry
 */
vfs_dentry_t* vfs_create_dir_entry(vfs_inode_t *entry_inode) {
c0101abe:	55                   	push   %ebp
c0101abf:	89 e5                	mov    %esp,%ebp
c0101ac1:	83 ec 28             	sub    $0x28,%esp
	vfs_dentry_t *dir_ent = malloc(sizeof(vfs_dentry_t));
c0101ac4:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101acb:	e8 0c 10 00 00       	call   c0102adc <malloc>
c0101ad0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	dir_ent->ino = entry_inode->stat.st_ino;
c0101ad3:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ad6:	8b 50 10             	mov    0x10(%eax),%edx
c0101ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101adc:	89 10                	mov    %edx,(%eax)
	dir_ent->inode = entry_inode;
c0101ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ae1:	8b 55 08             	mov    0x8(%ebp),%edx
c0101ae4:	89 50 04             	mov    %edx,0x4(%eax)

	return dir_ent;
c0101ae7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101aea:	c9                   	leave  
c0101aeb:	c3                   	ret    

c0101aec <vfs_write>:
 * @param node the node, in that will be written
 * @param base pointer to the data
 *
 * @return number of written bytes
 */
int vfs_write(vfs_inode_t *node, int off, void *base, int bytes) {
c0101aec:	55                   	push   %ebp
c0101aed:	89 e5                	mov    %esp,%ebp
c0101aef:	83 ec 38             	sub    $0x38,%esp
	int writable = 0;
c0101af2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((node->stat.st_uid == uid) &&
c0101af9:	8b 45 08             	mov    0x8(%ebp),%eax
c0101afc:	8b 50 18             	mov    0x18(%eax),%edx
c0101aff:	a1 10 e0 10 c0       	mov    0xc010e010,%eax
c0101b04:	39 c2                	cmp    %eax,%edx
c0101b06:	75 16                	jne    c0101b1e <vfs_write+0x32>
	    (node->stat.st_mode & S_IWUSR)) 
c0101b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b0b:	8b 40 0c             	mov    0xc(%eax),%eax
c0101b0e:	83 e0 06             	and    $0x6,%eax
 *
 * @return number of written bytes
 */
int vfs_write(vfs_inode_t *node, int off, void *base, int bytes) {
	int writable = 0;
	if ((node->stat.st_uid == uid) &&
c0101b11:	85 c0                	test   %eax,%eax
c0101b13:	74 09                	je     c0101b1e <vfs_write+0x32>
	    (node->stat.st_mode & S_IWUSR)) 
	{
		writable = 1;
c0101b15:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0101b1c:	eb 3b                	jmp    c0101b59 <vfs_write+0x6d>
	} 
	else if
	    ((node->stat.st_gid == gid) && 
c0101b1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b21:	8b 50 1c             	mov    0x1c(%eax),%edx
c0101b24:	a1 14 e0 10 c0       	mov    0xc010e014,%eax
c0101b29:	39 c2                	cmp    %eax,%edx
c0101b2b:	75 16                	jne    c0101b43 <vfs_write+0x57>
	    (node->stat.st_mode & S_IWGRP))
c0101b2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b30:	8b 40 0c             	mov    0xc(%eax),%eax
c0101b33:	83 e0 14             	and    $0x14,%eax
	    (node->stat.st_mode & S_IWUSR)) 
	{
		writable = 1;
	} 
	else if
	    ((node->stat.st_gid == gid) && 
c0101b36:	85 c0                	test   %eax,%eax
c0101b38:	74 09                	je     c0101b43 <vfs_write+0x57>
	    (node->stat.st_mode & S_IWGRP))
	{
		writable = 1;
c0101b3a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0101b41:	eb 16                	jmp    c0101b59 <vfs_write+0x6d>
	} else {
		if (node->stat.st_mode & S_IWOTH)
c0101b43:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b46:	8b 40 0c             	mov    0xc(%eax),%eax
c0101b49:	25 84 00 00 00       	and    $0x84,%eax
c0101b4e:	85 c0                	test   %eax,%eax
c0101b50:	74 07                	je     c0101b59 <vfs_write+0x6d>
			writable = 1;
c0101b52:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}

	if (writable) {
c0101b59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101b5d:	0f 84 de 00 00 00    	je     c0101c41 <vfs_write+0x155>
		int old_len = node->length;
c0101b63:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b66:	8b 40 08             	mov    0x8(%eax),%eax
c0101b69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    		if( (off + bytes) > node->length) {
c0101b6c:	8b 45 14             	mov    0x14(%ebp),%eax
c0101b6f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101b72:	01 d0                	add    %edx,%eax
c0101b74:	89 c2                	mov    %eax,%edx
c0101b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b79:	8b 40 08             	mov    0x8(%eax),%eax
c0101b7c:	39 c2                	cmp    %eax,%edx
c0101b7e:	76 1e                	jbe    c0101b9e <vfs_write+0xb2>
			node->length = off + bytes;
c0101b80:	8b 45 14             	mov    0x14(%ebp),%eax
c0101b83:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101b86:	01 d0                	add    %edx,%eax
c0101b88:	89 c2                	mov    %eax,%edx
c0101b8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b8d:	89 50 08             	mov    %edx,0x8(%eax)
			node->stat.st_size = node->length;
c0101b90:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b93:	8b 40 08             	mov    0x8(%eax),%eax
c0101b96:	89 c2                	mov    %eax,%edx
c0101b98:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b9b:	89 50 20             	mov    %edx,0x20(%eax)
		}

		if (node->base == NULL) {
c0101b9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ba1:	8b 40 04             	mov    0x4(%eax),%eax
c0101ba4:	85 c0                	test   %eax,%eax
c0101ba6:	75 18                	jne    c0101bc0 <vfs_write+0xd4>
			node->base = malloc(node->length);
c0101ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bab:	8b 40 08             	mov    0x8(%eax),%eax
c0101bae:	89 04 24             	mov    %eax,(%esp)
c0101bb1:	e8 26 0f 00 00       	call   c0102adc <malloc>
c0101bb6:	89 c2                	mov    %eax,%edx
c0101bb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bbb:	89 50 04             	mov    %edx,0x4(%eax)
c0101bbe:	eb 4f                	jmp    c0101c0f <vfs_write+0x123>
		} else {
			int pages_new = NUM_PAGES(node->length);
c0101bc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bc3:	8b 40 08             	mov    0x8(%eax),%eax
c0101bc6:	05 ff 0f 00 00       	add    $0xfff,%eax
c0101bcb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0101bd0:	c1 e8 0c             	shr    $0xc,%eax
c0101bd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
			int pages_old = NUM_PAGES(old_len);
c0101bd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101bd9:	05 ff 0f 00 00       	add    $0xfff,%eax
c0101bde:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0101be3:	c1 e8 0c             	shr    $0xc,%eax
c0101be6:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if(pages_new > pages_old)
c0101be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101bec:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0101bef:	7e 1e                	jle    c0101c0f <vfs_write+0x123>
				node->base = realloc(node->base, node->length);
c0101bf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bf4:	8b 50 08             	mov    0x8(%eax),%edx
c0101bf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bfa:	8b 40 04             	mov    0x4(%eax),%eax
c0101bfd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101c01:	89 04 24             	mov    %eax,(%esp)
c0101c04:	e8 44 0f 00 00       	call   c0102b4d <realloc>
c0101c09:	8b 55 08             	mov    0x8(%ebp),%edx
c0101c0c:	89 42 04             	mov    %eax,0x4(%edx)
		}

		uint8_t *nbase = (uint8_t*) node->base + off;
c0101c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c12:	8b 50 04             	mov    0x4(%eax),%edx
c0101c15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c18:	01 d0                	add    %edx,%eax
c0101c1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint8_t *wbase = (uint8_t*) base;
c0101c1d:	8b 45 10             	mov    0x10(%ebp),%eax
c0101c20:	89 45 e0             	mov    %eax,-0x20(%ebp)
		memcpy(nbase, wbase, bytes);
c0101c23:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0101c26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101c29:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0101c2c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0101c30:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101c34:	89 04 24             	mov    %eax,(%esp)
c0101c37:	e8 6a 52 00 00       	call   c0106ea6 <memcpy>
		return bytes;
c0101c3c:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c3f:	eb 1b                	jmp    c0101c5c <vfs_write+0x170>
	} else {
		printf("vfs: node %d isn't writable!\n", node->stat.st_ino);
c0101c41:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c44:	8b 40 10             	mov    0x10(%eax),%eax
c0101c47:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101c4b:	c7 04 24 51 8f 10 c0 	movl   $0xc0108f51,(%esp)
c0101c52:	e8 75 09 00 00       	call   c01025cc <printf>
	}
	return 0;
c0101c57:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c5c:	c9                   	leave  
c0101c5d:	c3                   	ret    

c0101c5e <vfs_read>:
 * @param node the node, that will be readed
 * @param offset the offset from the node
 *
 * @return readed data
 */
void* vfs_read(vfs_inode_t *node, uintptr_t offset) {
c0101c5e:	55                   	push   %ebp
c0101c5f:	89 e5                	mov    %esp,%ebp
	return (void*) node->base + offset;
c0101c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c64:	8b 40 04             	mov    0x4(%eax),%eax
c0101c67:	03 45 0c             	add    0xc(%ebp),%eax
}
c0101c6a:	5d                   	pop    %ebp
c0101c6b:	c3                   	ret    

c0101c6c <vfs_stat>:
 * @param node node
 * @param buffer buffer
 *
 * @return success
 */
int vfs_stat(vfs_inode_t *node, struct stat *buffer) {
c0101c6c:	55                   	push   %ebp
c0101c6d:	89 e5                	mov    %esp,%ebp
c0101c6f:	83 ec 10             	sub    $0x10,%esp
	uint8_t *node_stat = (uint8_t*) &node->stat;
c0101c72:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c75:	83 c0 0c             	add    $0xc,%eax
c0101c78:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint8_t *buf = (uint8_t*) buffer;
c0101c7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
	int i = 0;
c0101c81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	while (i++ < sizeof(struct stat)) {
c0101c88:	eb 13                	jmp    c0101c9d <vfs_stat+0x31>
		*buf++ = *node_stat++;
c0101c8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101c8d:	0f b6 10             	movzbl (%eax),%edx
c0101c90:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101c93:	88 10                	mov    %dl,(%eax)
c0101c95:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0101c99:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 */
int vfs_stat(vfs_inode_t *node, struct stat *buffer) {
	uint8_t *node_stat = (uint8_t*) &node->stat;
	uint8_t *buf = (uint8_t*) buffer;
	int i = 0;
	while (i++ < sizeof(struct stat)) {
c0101c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ca0:	83 f8 43             	cmp    $0x43,%eax
c0101ca3:	0f 96 c0             	setbe  %al
c0101ca6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101caa:	84 c0                	test   %al,%al
c0101cac:	75 dc                	jne    c0101c8a <vfs_stat+0x1e>
		*buf++ = *node_stat++;
	}

	return 0;
c0101cae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101cb3:	c9                   	leave  
c0101cb4:	c3                   	ret    

c0101cb5 <vfs_access>:
 * @param node node
 * @param modus access to check
 *
 * @return 
 */
int vfs_access(vfs_inode_t *node, mode_t modus) {
c0101cb5:	55                   	push   %ebp
c0101cb6:	89 e5                	mov    %esp,%ebp
	if (node->stat.st_uid == uid) 
c0101cb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cbb:	8b 50 18             	mov    0x18(%eax),%edx
c0101cbe:	a1 10 e0 10 c0       	mov    0xc010e010,%eax
c0101cc3:	39 c2                	cmp    %eax,%edx
c0101cc5:	75 6b                	jne    c0101d32 <vfs_access+0x7d>
	{
		if ((modus & R_OK) &&
c0101cc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cca:	83 e0 01             	and    $0x1,%eax
c0101ccd:	84 c0                	test   %al,%al
c0101ccf:	74 17                	je     c0101ce8 <vfs_access+0x33>
		    !(node->stat.st_mode & S_IRUSR))
c0101cd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cd4:	8b 40 0c             	mov    0xc(%eax),%eax
c0101cd7:	83 e0 05             	and    $0x5,%eax
 * @return 
 */
int vfs_access(vfs_inode_t *node, mode_t modus) {
	if (node->stat.st_uid == uid) 
	{
		if ((modus & R_OK) &&
c0101cda:	85 c0                	test   %eax,%eax
c0101cdc:	75 0a                	jne    c0101ce8 <vfs_access+0x33>
		    !(node->stat.st_mode & S_IRUSR))
			return -1;
c0101cde:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ce3:	e9 1c 01 00 00       	jmp    c0101e04 <vfs_access+0x14f>
		if ((modus & W_OK) &&
c0101ce8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ceb:	83 e0 02             	and    $0x2,%eax
c0101cee:	85 c0                	test   %eax,%eax
c0101cf0:	74 17                	je     c0101d09 <vfs_access+0x54>
		    !(node->stat.st_mode & S_IWUSR))
c0101cf2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cf5:	8b 40 0c             	mov    0xc(%eax),%eax
c0101cf8:	83 e0 06             	and    $0x6,%eax
	if (node->stat.st_uid == uid) 
	{
		if ((modus & R_OK) &&
		    !(node->stat.st_mode & S_IRUSR))
			return -1;
		if ((modus & W_OK) &&
c0101cfb:	85 c0                	test   %eax,%eax
c0101cfd:	75 0a                	jne    c0101d09 <vfs_access+0x54>
		    !(node->stat.st_mode & S_IWUSR))
			return -1;
c0101cff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d04:	e9 fb 00 00 00       	jmp    c0101e04 <vfs_access+0x14f>
		if ((modus & X_OK) &&
c0101d09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d0c:	83 e0 04             	and    $0x4,%eax
c0101d0f:	85 c0                	test   %eax,%eax
c0101d11:	0f 84 e8 00 00 00    	je     c0101dff <vfs_access+0x14a>
		    !(node->stat.st_mode & S_IXUSR))
c0101d17:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d1a:	8b 40 0c             	mov    0xc(%eax),%eax
c0101d1d:	83 e0 08             	and    $0x8,%eax
		    !(node->stat.st_mode & S_IRUSR))
			return -1;
		if ((modus & W_OK) &&
		    !(node->stat.st_mode & S_IWUSR))
			return -1;
		if ((modus & X_OK) &&
c0101d20:	85 c0                	test   %eax,%eax
c0101d22:	0f 85 d7 00 00 00    	jne    c0101dff <vfs_access+0x14a>
		    !(node->stat.st_mode & S_IXUSR))
			return -1;
c0101d28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d2d:	e9 d2 00 00 00       	jmp    c0101e04 <vfs_access+0x14f>
	}
	else if (node->stat.st_gid == gid) 
c0101d32:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d35:	8b 50 1c             	mov    0x1c(%eax),%edx
c0101d38:	a1 14 e0 10 c0       	mov    0xc010e014,%eax
c0101d3d:	39 c2                	cmp    %eax,%edx
c0101d3f:	75 60                	jne    c0101da1 <vfs_access+0xec>
	{
		if ((modus & R_OK) &&
c0101d41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d44:	83 e0 01             	and    $0x1,%eax
c0101d47:	84 c0                	test   %al,%al
c0101d49:	74 17                	je     c0101d62 <vfs_access+0xad>
		    !(node->stat.st_mode & S_IRGRP))
c0101d4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d4e:	8b 40 0c             	mov    0xc(%eax),%eax
c0101d51:	83 e0 0c             	and    $0xc,%eax
		    !(node->stat.st_mode & S_IXUSR))
			return -1;
	}
	else if (node->stat.st_gid == gid) 
	{
		if ((modus & R_OK) &&
c0101d54:	85 c0                	test   %eax,%eax
c0101d56:	75 0a                	jne    c0101d62 <vfs_access+0xad>
		    !(node->stat.st_mode & S_IRGRP))
			return -1;
c0101d58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d5d:	e9 a2 00 00 00       	jmp    c0101e04 <vfs_access+0x14f>
		if ((modus & W_OK) &&
c0101d62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d65:	83 e0 02             	and    $0x2,%eax
c0101d68:	85 c0                	test   %eax,%eax
c0101d6a:	74 17                	je     c0101d83 <vfs_access+0xce>
		    !(node->stat.st_mode & S_IWGRP))
c0101d6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d6f:	8b 40 0c             	mov    0xc(%eax),%eax
c0101d72:	83 e0 14             	and    $0x14,%eax
	else if (node->stat.st_gid == gid) 
	{
		if ((modus & R_OK) &&
		    !(node->stat.st_mode & S_IRGRP))
			return -1;
		if ((modus & W_OK) &&
c0101d75:	85 c0                	test   %eax,%eax
c0101d77:	75 0a                	jne    c0101d83 <vfs_access+0xce>
		    !(node->stat.st_mode & S_IWGRP))
			return -1;
c0101d79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d7e:	e9 81 00 00 00       	jmp    c0101e04 <vfs_access+0x14f>
		if ((modus & X_OK) &&
c0101d83:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d86:	83 e0 04             	and    $0x4,%eax
c0101d89:	85 c0                	test   %eax,%eax
c0101d8b:	74 72                	je     c0101dff <vfs_access+0x14a>
		    !(node->stat.st_mode & S_IXGRP))
c0101d8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d90:	8b 40 0c             	mov    0xc(%eax),%eax
c0101d93:	83 e0 24             	and    $0x24,%eax
		    !(node->stat.st_mode & S_IRGRP))
			return -1;
		if ((modus & W_OK) &&
		    !(node->stat.st_mode & S_IWGRP))
			return -1;
		if ((modus & X_OK) &&
c0101d96:	85 c0                	test   %eax,%eax
c0101d98:	75 65                	jne    c0101dff <vfs_access+0x14a>
		    !(node->stat.st_mode & S_IXGRP))
			return -1;
c0101d9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d9f:	eb 63                	jmp    c0101e04 <vfs_access+0x14f>
	}
	else
	{
		if ((modus & R_OK) &&
c0101da1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101da4:	83 e0 01             	and    $0x1,%eax
c0101da7:	84 c0                	test   %al,%al
c0101da9:	74 14                	je     c0101dbf <vfs_access+0x10a>
		    !(node->stat.st_mode & S_IROTH))
c0101dab:	8b 45 08             	mov    0x8(%ebp),%eax
c0101dae:	8b 40 0c             	mov    0xc(%eax),%eax
c0101db1:	83 e0 44             	and    $0x44,%eax
		    !(node->stat.st_mode & S_IXGRP))
			return -1;
	}
	else
	{
		if ((modus & R_OK) &&
c0101db4:	85 c0                	test   %eax,%eax
c0101db6:	75 07                	jne    c0101dbf <vfs_access+0x10a>
		    !(node->stat.st_mode & S_IROTH))
			return -1;
c0101db8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101dbd:	eb 45                	jmp    c0101e04 <vfs_access+0x14f>
		if ((modus & W_OK) &&
c0101dbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dc2:	83 e0 02             	and    $0x2,%eax
c0101dc5:	85 c0                	test   %eax,%eax
c0101dc7:	74 16                	je     c0101ddf <vfs_access+0x12a>
		    !(node->stat.st_mode & S_IWOTH))
c0101dc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0101dcc:	8b 40 0c             	mov    0xc(%eax),%eax
c0101dcf:	25 84 00 00 00       	and    $0x84,%eax
	else
	{
		if ((modus & R_OK) &&
		    !(node->stat.st_mode & S_IROTH))
			return -1;
		if ((modus & W_OK) &&
c0101dd4:	85 c0                	test   %eax,%eax
c0101dd6:	75 07                	jne    c0101ddf <vfs_access+0x12a>
		    !(node->stat.st_mode & S_IWOTH))
			return -1;
c0101dd8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101ddd:	eb 25                	jmp    c0101e04 <vfs_access+0x14f>
		if ((modus & X_OK) &&
c0101ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101de2:	83 e0 04             	and    $0x4,%eax
c0101de5:	85 c0                	test   %eax,%eax
c0101de7:	74 16                	je     c0101dff <vfs_access+0x14a>
		    !(node->stat.st_mode & S_IXOTH))
c0101de9:	8b 45 08             	mov    0x8(%ebp),%eax
c0101dec:	8b 40 0c             	mov    0xc(%eax),%eax
c0101def:	25 04 01 00 00       	and    $0x104,%eax
		    !(node->stat.st_mode & S_IROTH))
			return -1;
		if ((modus & W_OK) &&
		    !(node->stat.st_mode & S_IWOTH))
			return -1;
		if ((modus & X_OK) &&
c0101df4:	85 c0                	test   %eax,%eax
c0101df6:	75 07                	jne    c0101dff <vfs_access+0x14a>
		    !(node->stat.st_mode & S_IXOTH))
			return -1;
c0101df8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101dfd:	eb 05                	jmp    c0101e04 <vfs_access+0x14f>
	}

	return 0;
c0101dff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101e04:	5d                   	pop    %ebp
c0101e05:	c3                   	ret    

c0101e06 <vfs_lookup_path>:
 * Dissolve a path to an inode
 *
 * @param path
 * @return inode
 */
vfs_inode_t *vfs_lookup_path(char *path) {
c0101e06:	55                   	push   %ebp
c0101e07:	89 e5                	mov    %esp,%ebp
c0101e09:	57                   	push   %edi
c0101e0a:	83 ec 54             	sub    $0x54,%esp
	vfs_inode_t *parent = root;
c0101e0d:	a1 08 e0 10 c0       	mov    0xc010e008,%eax
c0101e12:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vfs_inode_t *inode = NULL;
c0101e15:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	
	if(path[0] != '/') {
c0101e1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101e1f:	0f b6 00             	movzbl (%eax),%eax
c0101e22:	3c 2f                	cmp    $0x2f,%al
c0101e24:	74 10                	je     c0101e36 <vfs_lookup_path+0x30>
		parent = current_thread->process->cwd;
c0101e26:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0101e2b:	8b 40 04             	mov    0x4(%eax),%eax
c0101e2e:	8b 40 10             	mov    0x10(%eax),%eax
c0101e31:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e34:	eb 04                	jmp    c0101e3a <vfs_lookup_path+0x34>
	} else {
		path++;
c0101e36:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	}
	
	int len = strlen(path);
c0101e3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0101e3d:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
c0101e44:	89 c2                	mov    %eax,%edx
c0101e46:	b8 00 00 00 00       	mov    $0x0,%eax
c0101e4b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0101e4e:	89 d7                	mov    %edx,%edi
c0101e50:	f2 ae                	repnz scas %es:(%edi),%al
c0101e52:	89 c8                	mov    %ecx,%eax
c0101e54:	f7 d0                	not    %eax
c0101e56:	83 e8 01             	sub    $0x1,%eax
c0101e59:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(path[len-1] == '/') {
c0101e5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101e5f:	83 e8 01             	sub    $0x1,%eax
c0101e62:	03 45 08             	add    0x8(%ebp),%eax
c0101e65:	0f b6 00             	movzbl (%eax),%eax
c0101e68:	3c 2f                	cmp    $0x2f,%al
c0101e6a:	75 0c                	jne    c0101e78 <vfs_lookup_path+0x72>
		path[len-1] = '\0';
c0101e6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101e6f:	83 e8 01             	sub    $0x1,%eax
c0101e72:	03 45 08             	add    0x8(%ebp),%eax
c0101e75:	c6 00 00             	movb   $0x0,(%eax)
	}
	
	char delimiter[] = "/";
c0101e78:	66 c7 45 d6 2f 00    	movw   $0x2f,-0x2a(%ebp)
	char *str = (char*) strtok(path, delimiter);
c0101e7e:	8d 45 d6             	lea    -0x2a(%ebp),%eax
c0101e81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101e85:	8b 45 08             	mov    0x8(%ebp),%eax
c0101e88:	89 04 24             	mov    %eax,(%esp)
c0101e8b:	e8 05 4f 00 00       	call   c0106d95 <strtok>
c0101e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while(str != NULL) {
c0101e93:	e9 98 00 00 00       	jmp    c0101f30 <vfs_lookup_path+0x12a>
		int num = parent->length / sizeof(vfs_dentry_t);
c0101e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101e9b:	8b 40 08             	mov    0x8(%eax),%eax
c0101e9e:	c1 e8 03             	shr    $0x3,%eax
c0101ea1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		vfs_dentry_t *entries = vfs_read(parent, 0);
c0101ea4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101eab:	00 
c0101eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101eaf:	89 04 24             	mov    %eax,(%esp)
c0101eb2:	e8 a7 fd ff ff       	call   c0101c5e <vfs_read>
c0101eb7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int found = 0;
c0101eba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		int i;
		for(i = 0; i < num; i++) {
c0101ec1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0101ec8:	eb 3b                	jmp    c0101f05 <vfs_lookup_path+0xff>
			if(strcmp(str, entries[i].inode->name)) {
c0101eca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101ecd:	c1 e0 03             	shl    $0x3,%eax
c0101ed0:	03 45 d8             	add    -0x28(%ebp),%eax
c0101ed3:	8b 40 04             	mov    0x4(%eax),%eax
c0101ed6:	8b 00                	mov    (%eax),%eax
c0101ed8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101edc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101edf:	89 04 24             	mov    %eax,(%esp)
c0101ee2:	e8 00 4d 00 00       	call   c0106be7 <strcmp>
c0101ee7:	85 c0                	test   %eax,%eax
c0101ee9:	74 16                	je     c0101f01 <vfs_lookup_path+0xfb>
				parent = entries[i].inode;
c0101eeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101eee:	c1 e0 03             	shl    $0x3,%eax
c0101ef1:	03 45 d8             	add    -0x28(%ebp),%eax
c0101ef4:	8b 40 04             	mov    0x4(%eax),%eax
c0101ef7:	89 45 f4             	mov    %eax,-0xc(%ebp)
				found = 1;
c0101efa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	while(str != NULL) {
		int num = parent->length / sizeof(vfs_dentry_t);
		vfs_dentry_t *entries = vfs_read(parent, 0);
		int found = 0;
		int i;
		for(i = 0; i < num; i++) {
c0101f01:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0101f05:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101f08:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0101f0b:	7c bd                	jl     c0101eca <vfs_lookup_path+0xc4>
				parent = entries[i].inode;
				found = 1;
			}
		}

		if(!found) {
c0101f0d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0101f11:	75 07                	jne    c0101f1a <vfs_lookup_path+0x114>
			return NULL;
c0101f13:	b8 00 00 00 00       	mov    $0x0,%eax
c0101f18:	eb 23                	jmp    c0101f3d <vfs_lookup_path+0x137>
		} else {
			str = strtok(NULL, delimiter);
c0101f1a:	8d 45 d6             	lea    -0x2a(%ebp),%eax
c0101f1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101f21:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0101f28:	e8 68 4e 00 00       	call   c0106d95 <strtok>
c0101f2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		path[len-1] = '\0';
	}
	
	char delimiter[] = "/";
	char *str = (char*) strtok(path, delimiter);
	while(str != NULL) {
c0101f30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0101f34:	0f 85 5e ff ff ff    	jne    c0101e98 <vfs_lookup_path+0x92>
		} else {
			str = strtok(NULL, delimiter);
		}
	}

	return parent;
c0101f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101f3d:	83 c4 54             	add    $0x54,%esp
c0101f40:	5f                   	pop    %edi
c0101f41:	5d                   	pop    %ebp
c0101f42:	c3                   	ret    

c0101f43 <get_fd>:

// Systemcalls

struct fd *get_fd(int fd) {
c0101f43:	55                   	push   %ebp
c0101f44:	89 e5                	mov    %esp,%ebp
c0101f46:	83 ec 28             	sub    $0x28,%esp
	struct fd *desc = NULL;
c0101f49:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct list_node *node = current_thread->process->files->head->next;	
c0101f50:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0101f55:	8b 40 04             	mov    0x4(%eax),%eax
c0101f58:	8b 40 14             	mov    0x14(%eax),%eax
c0101f5b:	8b 00                	mov    (%eax),%eax
c0101f5d:	8b 00                	mov    (%eax),%eax
c0101f5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i;
	for(i = 0; i < list_length(current_thread->process->files); i++) {
c0101f62:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0101f69:	eb 26                	jmp    c0101f91 <get_fd+0x4e>
		desc = node->element;
c0101f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f6e:	8b 40 08             	mov    0x8(%eax),%eax
c0101f71:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(desc->id == fd) {
c0101f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101f77:	8b 10                	mov    (%eax),%edx
c0101f79:	8b 45 08             	mov    0x8(%ebp),%eax
c0101f7c:	39 c2                	cmp    %eax,%edx
c0101f7e:	75 05                	jne    c0101f85 <get_fd+0x42>
			return desc;
c0101f80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101f83:	eb 29                	jmp    c0101fae <get_fd+0x6b>
		} else {
			node = node->next;
c0101f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f88:	8b 00                	mov    (%eax),%eax
c0101f8a:	89 45 f4             	mov    %eax,-0xc(%ebp)

struct fd *get_fd(int fd) {
	struct fd *desc = NULL;
	struct list_node *node = current_thread->process->files->head->next;	
	int i;
	for(i = 0; i < list_length(current_thread->process->files); i++) {
c0101f8d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0101f91:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0101f96:	8b 40 04             	mov    0x4(%eax),%eax
c0101f99:	8b 40 14             	mov    0x14(%eax),%eax
c0101f9c:	89 04 24             	mov    %eax,(%esp)
c0101f9f:	e8 9f 61 00 00       	call   c0108143 <list_length>
c0101fa4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0101fa7:	7f c2                	jg     c0101f6b <get_fd+0x28>
		} else {
			node = node->next;
		}
	}
	
	return NULL;
c0101fa9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101fae:	c9                   	leave  
c0101faf:	c3                   	ret    

c0101fb0 <open>:

void open(struct cpu_state **cpu) {
c0101fb0:	55                   	push   %ebp
c0101fb1:	89 e5                	mov    %esp,%ebp
c0101fb3:	57                   	push   %edi
c0101fb4:	83 ec 44             	sub    $0x44,%esp
	char *path = (*cpu)->ebx;
c0101fb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fba:	8b 00                	mov    (%eax),%eax
c0101fbc:	8b 40 1c             	mov    0x1c(%eax),%eax
c0101fbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int oflags = (*cpu)->ecx;
c0101fc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fc5:	8b 00                	mov    (%eax),%eax
c0101fc7:	8b 40 24             	mov    0x24(%eax),%eax
c0101fca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	mode_t mode = (*cpu)->edx;
c0101fcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fd0:	8b 00                	mov    (%eax),%eax
c0101fd2:	8b 40 20             	mov    0x20(%eax),%eax
c0101fd5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	vfs_inode_t *inode = vfs_lookup_path(path);
c0101fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101fdb:	89 04 24             	mov    %eax,(%esp)
c0101fde:	e8 23 fe ff ff       	call   c0101e06 <vfs_lookup_path>
c0101fe3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(inode == NULL) {
c0101fe6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101fea:	75 77                	jne    c0102063 <open+0xb3>
		if(oflags & O_CREAT) {// create inode
c0101fec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101fef:	83 e0 20             	and    $0x20,%eax
c0101ff2:	85 c0                	test   %eax,%eax
c0101ff4:	74 5c                	je     c0102052 <open+0xa2>
			char *name = malloc(strlen((char*)path));
c0101ff6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101ff9:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
c0102000:	89 c2                	mov    %eax,%edx
c0102002:	b8 00 00 00 00       	mov    $0x0,%eax
c0102007:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010200a:	89 d7                	mov    %edx,%edi
c010200c:	f2 ae                	repnz scas %es:(%edi),%al
c010200e:	89 c8                	mov    %ecx,%eax
c0102010:	f7 d0                	not    %eax
c0102012:	83 e8 01             	sub    $0x1,%eax
c0102015:	89 04 24             	mov    %eax,(%esp)
c0102018:	e8 bf 0a 00 00       	call   c0102adc <malloc>
c010201d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			strcpy(name, path);
c0102020:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102023:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102027:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010202a:	89 04 24             	mov    %eax,(%esp)
c010202d:	e8 95 4a 00 00       	call   c0106ac7 <strcpy>
			inode = vfs_create_inode(name, mode, root);
c0102032:	a1 08 e0 10 c0       	mov    0xc010e008,%eax
c0102037:	89 44 24 08          	mov    %eax,0x8(%esp)
c010203b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010203e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102042:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102045:	89 04 24             	mov    %eax,(%esp)
c0102048:	e8 82 f9 ff ff       	call   c01019cf <vfs_create_inode>
c010204d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102050:	eb 2c                	jmp    c010207e <open+0xce>
		} else {
			(*cpu)->eax = -1;
c0102052:	8b 45 08             	mov    0x8(%ebp),%eax
c0102055:	8b 00                	mov    (%eax),%eax
c0102057:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
			return;
c010205e:	e9 ba 00 00 00       	jmp    c010211d <open+0x16d>
		}
	} else {
		if(oflags & O_EXCL) {
c0102063:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102066:	83 e0 40             	and    $0x40,%eax
c0102069:	85 c0                	test   %eax,%eax
c010206b:	74 11                	je     c010207e <open+0xce>
			(*cpu)->eax = -2;
c010206d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102070:	8b 00                	mov    (%eax),%eax
c0102072:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
			return;
c0102079:	e9 9f 00 00 00       	jmp    c010211d <open+0x16d>
		}
	}
	
	if(oflags & O_TRUNC) {
c010207e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102081:	83 e0 10             	and    $0x10,%eax
c0102084:	85 c0                	test   %eax,%eax
c0102086:	74 20                	je     c01020a8 <open+0xf8>
		memset(inode->base, 0, inode->length);
c0102088:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010208b:	8b 50 08             	mov    0x8(%eax),%edx
c010208e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102091:	8b 40 04             	mov    0x4(%eax),%eax
c0102094:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102098:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010209f:	00 
c01020a0:	89 04 24             	mov    %eax,(%esp)
c01020a3:	e8 c1 4f 00 00       	call   c0107069 <memset>
	}
	
	struct fd *desc = malloc(sizeof(struct fd));
c01020a8:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c01020af:	e8 28 0a 00 00       	call   c0102adc <malloc>
c01020b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	desc->id = list_length(current_thread->process->files);
c01020b7:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01020bc:	8b 40 04             	mov    0x4(%eax),%eax
c01020bf:	8b 40 14             	mov    0x14(%eax),%eax
c01020c2:	89 04 24             	mov    %eax,(%esp)
c01020c5:	e8 79 60 00 00       	call   c0108143 <list_length>
c01020ca:	89 c2                	mov    %eax,%edx
c01020cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01020cf:	89 10                	mov    %edx,(%eax)
	desc->mode = mode;
c01020d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01020d4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01020d7:	89 50 08             	mov    %edx,0x8(%eax)
	desc->flags = oflags;
c01020da:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01020dd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01020e0:	89 50 0c             	mov    %edx,0xc(%eax)
	desc->pos = 0;	
c01020e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01020e6:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	desc->inode = inode;
c01020ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01020f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01020f3:	89 50 04             	mov    %edx,0x4(%eax)

	list_push_back(current_thread->process->files, desc);
c01020f6:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01020fb:	8b 40 04             	mov    0x4(%eax),%eax
c01020fe:	8b 40 14             	mov    0x14(%eax),%eax
c0102101:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0102104:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102108:	89 04 24             	mov    %eax,(%esp)
c010210b:	e8 32 5e 00 00       	call   c0107f42 <list_push_back>

	(*cpu)->eax = desc->id;
c0102110:	8b 45 08             	mov    0x8(%ebp),%eax
c0102113:	8b 00                	mov    (%eax),%eax
c0102115:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0102118:	8b 12                	mov    (%edx),%edx
c010211a:	89 50 28             	mov    %edx,0x28(%eax)
}
c010211d:	83 c4 44             	add    $0x44,%esp
c0102120:	5f                   	pop    %edi
c0102121:	5d                   	pop    %ebp
c0102122:	c3                   	ret    

c0102123 <close>:

void close(struct cpu_state **cpu) {
c0102123:	55                   	push   %ebp
c0102124:	89 e5                	mov    %esp,%ebp
c0102126:	83 ec 28             	sub    $0x28,%esp
	int fd = (*cpu)->ebx;
c0102129:	8b 45 08             	mov    0x8(%ebp),%eax
c010212c:	8b 00                	mov    (%eax),%eax
c010212e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102131:	89 45 ec             	mov    %eax,-0x14(%ebp)
	
	struct list_node *node = current_thread->process->files->head->next;	
c0102134:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0102139:	8b 40 04             	mov    0x4(%eax),%eax
c010213c:	8b 40 14             	mov    0x14(%eax),%eax
c010213f:	8b 00                	mov    (%eax),%eax
c0102141:	8b 00                	mov    (%eax),%eax
c0102143:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i;
	for(i = 0; i < list_length(current_thread->process->files); i++) {
c0102146:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010214d:	eb 3a                	jmp    c0102189 <close+0x66>
		struct fd *desc = node->element;
c010214f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102152:	8b 40 08             	mov    0x8(%eax),%eax
c0102155:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(desc->id == fd) {
c0102158:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010215b:	8b 10                	mov    (%eax),%edx
c010215d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102160:	39 c2                	cmp    %eax,%edx
c0102162:	75 19                	jne    c010217d <close+0x5a>
			list_remove_node(node);
c0102164:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102167:	89 04 24             	mov    %eax,(%esp)
c010216a:	e8 52 5f 00 00       	call   c01080c1 <list_remove_node>
			(*cpu)->eax = 0;
c010216f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102172:	8b 00                	mov    (%eax),%eax
c0102174:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
c010217b:	eb 08                	jmp    c0102185 <close+0x62>
		} else {
			node = node->next;
c010217d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102180:	8b 00                	mov    (%eax),%eax
c0102182:	89 45 f4             	mov    %eax,-0xc(%ebp)
void close(struct cpu_state **cpu) {
	int fd = (*cpu)->ebx;
	
	struct list_node *node = current_thread->process->files->head->next;	
	int i;
	for(i = 0; i < list_length(current_thread->process->files); i++) {
c0102185:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0102189:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c010218e:	8b 40 04             	mov    0x4(%eax),%eax
c0102191:	8b 40 14             	mov    0x14(%eax),%eax
c0102194:	89 04 24             	mov    %eax,(%esp)
c0102197:	e8 a7 5f 00 00       	call   c0108143 <list_length>
c010219c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010219f:	7f ae                	jg     c010214f <close+0x2c>
		} else {
			node = node->next;
		}
	}
	
	(*cpu)->eax = -1;
c01021a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01021a4:	8b 00                	mov    (%eax),%eax
c01021a6:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
}
c01021ad:	c9                   	leave  
c01021ae:	c3                   	ret    

c01021af <read>:

void read(struct cpu_state **cpu) {
c01021af:	55                   	push   %ebp
c01021b0:	89 e5                	mov    %esp,%ebp
c01021b2:	83 ec 38             	sub    $0x38,%esp
	int fd = (*cpu)->ebx;
c01021b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01021b8:	8b 00                	mov    (%eax),%eax
c01021ba:	8b 40 1c             	mov    0x1c(%eax),%eax
c01021bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void *buf = (void*) (*cpu)->ecx;
c01021c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01021c3:	8b 00                	mov    (%eax),%eax
c01021c5:	8b 40 24             	mov    0x24(%eax),%eax
c01021c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	size_t len = (*cpu)->edx;
c01021cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01021ce:	8b 00                	mov    (%eax),%eax
c01021d0:	8b 40 20             	mov    0x20(%eax),%eax
c01021d3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	struct fd *desc = get_fd(fd);
c01021d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01021d9:	89 04 24             	mov    %eax,(%esp)
c01021dc:	e8 62 fd ff ff       	call   c0101f43 <get_fd>
c01021e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(desc == NULL) {
c01021e4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01021e8:	75 11                	jne    c01021fb <read+0x4c>
		(*cpu)->eax = -1;
c01021ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01021ed:	8b 00                	mov    (%eax),%eax
c01021ef:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
		return;
c01021f6:	e9 92 00 00 00       	jmp    c010228d <read+0xde>
	}
	
	if(desc->flags & O_RDONLY ||
c01021fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01021fe:	8b 40 0c             	mov    0xc(%eax),%eax
c0102201:	83 e0 01             	and    $0x1,%eax
c0102204:	84 c0                	test   %al,%al
c0102206:	75 0d                	jne    c0102215 <read+0x66>
	   desc->flags & O_RDWR)
c0102208:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010220b:	8b 40 0c             	mov    0xc(%eax),%eax
c010220e:	83 e0 04             	and    $0x4,%eax
	if(desc == NULL) {
		(*cpu)->eax = -1;
		return;
	}
	
	if(desc->flags & O_RDONLY ||
c0102211:	85 c0                	test   %eax,%eax
c0102213:	74 6c                	je     c0102281 <read+0xd2>
	   desc->flags & O_RDWR)
	{
		vfs_inode_t *inode = desc->inode;
c0102215:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102218:	8b 40 04             	mov    0x4(%eax),%eax
c010221b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		void *read = vfs_read(inode, desc->pos);
c010221e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102221:	8b 40 10             	mov    0x10(%eax),%eax
c0102224:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102228:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010222b:	89 04 24             	mov    %eax,(%esp)
c010222e:	e8 2b fa ff ff       	call   c0101c5e <vfs_read>
c0102233:	89 45 e0             	mov    %eax,-0x20(%ebp)
		if(read != NULL) {
c0102236:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010223a:	74 37                	je     c0102273 <read+0xc4>
			memcpy((void*)buf, read, len);
c010223c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010223f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0102242:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0102245:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0102249:	89 54 24 04          	mov    %edx,0x4(%esp)
c010224d:	89 04 24             	mov    %eax,(%esp)
c0102250:	e8 51 4c 00 00       	call   c0106ea6 <memcpy>
			desc->pos += len;
c0102255:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102258:	8b 40 10             	mov    0x10(%eax),%eax
c010225b:	03 45 ec             	add    -0x14(%ebp),%eax
c010225e:	89 c2                	mov    %eax,%edx
c0102260:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102263:	89 50 10             	mov    %edx,0x10(%eax)
			(*cpu)->eax = len;
c0102266:	8b 45 08             	mov    0x8(%ebp),%eax
c0102269:	8b 00                	mov    (%eax),%eax
c010226b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010226e:	89 50 28             	mov    %edx,0x28(%eax)
		return;
	}
	
	if(desc->flags & O_RDONLY ||
	   desc->flags & O_RDWR)
	{
c0102271:	eb 1a                	jmp    c010228d <read+0xde>
		if(read != NULL) {
			memcpy((void*)buf, read, len);
			desc->pos += len;
			(*cpu)->eax = len;
		} else {
			(*cpu)->eax = -2;
c0102273:	8b 45 08             	mov    0x8(%ebp),%eax
c0102276:	8b 00                	mov    (%eax),%eax
c0102278:	c7 40 28 fe ff ff ff 	movl   $0xfffffffe,0x28(%eax)
		return;
	}
	
	if(desc->flags & O_RDONLY ||
	   desc->flags & O_RDWR)
	{
c010227f:	eb 0c                	jmp    c010228d <read+0xde>
			(*cpu)->eax = len;
		} else {
			(*cpu)->eax = -2;
		}
	} else {
		(*cpu)->eax = -3;
c0102281:	8b 45 08             	mov    0x8(%ebp),%eax
c0102284:	8b 00                	mov    (%eax),%eax
c0102286:	c7 40 28 fd ff ff ff 	movl   $0xfffffffd,0x28(%eax)
	}
}
c010228d:	c9                   	leave  
c010228e:	c3                   	ret    

c010228f <write>:

void write(struct cpu_state **cpu) {
c010228f:	55                   	push   %ebp
c0102290:	89 e5                	mov    %esp,%ebp
c0102292:	83 ec 38             	sub    $0x38,%esp
	int fd = (*cpu)->ebx;
c0102295:	8b 45 08             	mov    0x8(%ebp),%eax
c0102298:	8b 00                	mov    (%eax),%eax
c010229a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010229d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void *buf = (void*) (*cpu)->ecx;
c01022a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01022a3:	8b 00                	mov    (%eax),%eax
c01022a5:	8b 40 24             	mov    0x24(%eax),%eax
c01022a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	size_t len = (*cpu)->edx;
c01022ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01022ae:	8b 00                	mov    (%eax),%eax
c01022b0:	8b 40 20             	mov    0x20(%eax),%eax
c01022b3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	struct fd *desc = get_fd(fd);
c01022b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01022b9:	89 04 24             	mov    %eax,(%esp)
c01022bc:	e8 82 fc ff ff       	call   c0101f43 <get_fd>
c01022c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(desc == NULL) {
c01022c4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01022c8:	75 11                	jne    c01022db <write+0x4c>
		(*cpu)->eax = -1;
c01022ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01022cd:	8b 00                	mov    (%eax),%eax
c01022cf:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
		return;
c01022d6:	e9 a4 00 00 00       	jmp    c010237f <write+0xf0>
	}

	if(desc->flags & O_WRONLY ||
c01022db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01022de:	8b 40 0c             	mov    0xc(%eax),%eax
c01022e1:	83 e0 02             	and    $0x2,%eax
c01022e4:	85 c0                	test   %eax,%eax
c01022e6:	75 0d                	jne    c01022f5 <write+0x66>
	   desc->flags & O_RDWR)
c01022e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01022eb:	8b 40 0c             	mov    0xc(%eax),%eax
c01022ee:	83 e0 04             	and    $0x4,%eax
	if(desc == NULL) {
		(*cpu)->eax = -1;
		return;
	}

	if(desc->flags & O_WRONLY ||
c01022f1:	85 c0                	test   %eax,%eax
c01022f3:	74 7b                	je     c0102370 <write+0xe1>
	   desc->flags & O_RDWR)
	{
		if(! (desc->flags & O_APPEND) ) {
c01022f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01022f8:	8b 40 0c             	mov    0xc(%eax),%eax
c01022fb:	83 e0 08             	and    $0x8,%eax
c01022fe:	85 c0                	test   %eax,%eax
c0102300:	75 1b                	jne    c010231d <write+0x8e>
			desc->pos = 0;
c0102302:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102305:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
			desc->flags |= O_APPEND;
c010230c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010230f:	8b 40 0c             	mov    0xc(%eax),%eax
c0102312:	89 c2                	mov    %eax,%edx
c0102314:	83 ca 08             	or     $0x8,%edx
c0102317:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010231a:	89 50 0c             	mov    %edx,0xc(%eax)
		}
		
		vfs_inode_t *inode = desc->inode;
c010231d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102320:	8b 40 04             	mov    0x4(%eax),%eax
c0102323:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		int ret = vfs_write(inode, desc->pos, buf, len);
c0102326:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0102329:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010232c:	8b 40 10             	mov    0x10(%eax),%eax
c010232f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102333:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0102336:	89 54 24 08          	mov    %edx,0x8(%esp)
c010233a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010233e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102341:	89 04 24             	mov    %eax,(%esp)
c0102344:	e8 a3 f7 ff ff       	call   c0101aec <vfs_write>
c0102349:	89 45 e0             	mov    %eax,-0x20(%ebp)
		(*cpu)->eax = ret;
c010234c:	8b 45 08             	mov    0x8(%ebp),%eax
c010234f:	8b 00                	mov    (%eax),%eax
c0102351:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0102354:	89 50 28             	mov    %edx,0x28(%eax)
		if(ret > 0) {
c0102357:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010235b:	7e 21                	jle    c010237e <write+0xef>
			desc->pos += len;
c010235d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102360:	8b 40 10             	mov    0x10(%eax),%eax
c0102363:	03 45 ec             	add    -0x14(%ebp),%eax
c0102366:	89 c2                	mov    %eax,%edx
c0102368:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010236b:	89 50 10             	mov    %edx,0x10(%eax)
		return;
	}

	if(desc->flags & O_WRONLY ||
	   desc->flags & O_RDWR)
	{
c010236e:	eb 0e                	jmp    c010237e <write+0xef>
		(*cpu)->eax = ret;
		if(ret > 0) {
			desc->pos += len;
		}
	} else {
		(*cpu)->eax = -3;
c0102370:	8b 45 08             	mov    0x8(%ebp),%eax
c0102373:	8b 00                	mov    (%eax),%eax
c0102375:	c7 40 28 fd ff ff ff 	movl   $0xfffffffd,0x28(%eax)
c010237c:	eb 01                	jmp    c010237f <write+0xf0>
		return;
	}

	if(desc->flags & O_WRONLY ||
	   desc->flags & O_RDWR)
	{
c010237e:	90                   	nop
			desc->pos += len;
		}
	} else {
		(*cpu)->eax = -3;
	}
}
c010237f:	c9                   	leave  
c0102380:	c3                   	ret    
c0102381:	00 00                	add    %al,(%eax)
	...

c0102384 <pd_dump>:
 * Only works wehne every PD is mapped in in kernelspace Area
 * @param pointer to the phys. pd frame
 * @return void
 **/

void pd_dump(uint32_t *pd){
c0102384:	55                   	push   %ebp
c0102385:	89 e5                	mov    %esp,%ebp
c0102387:	83 ec 48             	sub    $0x48,%esp
    pd += 0xC0000000;
    int pdi, pti, phys_base, virt_base, size, sec = 0;
c010238a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    uint32_t *pt;
    for( pdi = 0; pdi < PD_LENGTH; pdi++ ){
c0102391:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102398:	e9 e3 01 00 00       	jmp    c0102580 <pd_dump+0x1fc>
        if(sec && (pd[pdi] & 1) == 0){
c010239d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01023a1:	74 57                	je     c01023fa <pd_dump+0x76>
c01023a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023a6:	c1 e0 02             	shl    $0x2,%eax
c01023a9:	03 45 08             	add    0x8(%ebp),%eax
c01023ac:	8b 00                	mov    (%eax),%eax
c01023ae:	83 e0 01             	and    $0x1,%eax
c01023b1:	85 c0                	test   %eax,%eax
c01023b3:	75 45                	jne    c01023fa <pd_dump+0x76>
            printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c01023b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01023b8:	c1 e0 0c             	shl    $0xc,%eax
c01023bb:	89 c2                	mov    %eax,%edx
c01023bd:	03 55 e8             	add    -0x18(%ebp),%edx
c01023c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01023c3:	c1 e0 0c             	shl    $0xc,%eax
c01023c6:	03 45 ec             	add    -0x14(%ebp),%eax
c01023c9:	89 54 24 10          	mov    %edx,0x10(%esp)
c01023cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01023d0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01023d4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01023d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01023db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023df:	c7 04 24 70 8f 10 c0 	movl   $0xc0108f70,(%esp)
c01023e6:	e8 e1 01 00 00       	call   c01025cc <printf>
            sec = 0;
c01023eb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        }

        while( (pd[pdi] & 1) == 0 ){
c01023f2:	eb 06                	jmp    c01023fa <pd_dump+0x76>
            pdi++;
c01023f4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01023f8:	eb 01                	jmp    c01023fb <pd_dump+0x77>
        if(sec && (pd[pdi] & 1) == 0){
            printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
            sec = 0;
        }

        while( (pd[pdi] & 1) == 0 ){
c01023fa:	90                   	nop
c01023fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023fe:	c1 e0 02             	shl    $0x2,%eax
c0102401:	03 45 08             	add    0x8(%ebp),%eax
c0102404:	8b 00                	mov    (%eax),%eax
c0102406:	83 e0 01             	and    $0x1,%eax
c0102409:	85 c0                	test   %eax,%eax
c010240b:	74 e7                	je     c01023f4 <pd_dump+0x70>
            pdi++;
        }

        pt = (uint32_t*) ( ( (pd[pdi] | 0xfff) ^ 0xfff) + 0xC0000000);
c010240d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102410:	c1 e0 02             	shl    $0x2,%eax
c0102413:	03 45 08             	add    0x8(%ebp),%eax
c0102416:	8b 00                	mov    (%eax),%eax
c0102418:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010241d:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0102422:	89 45 dc             	mov    %eax,-0x24(%ebp)

        for( pti = 0; pti < PT_LENGTH; pti++ ){
c0102425:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010242c:	e9 3e 01 00 00       	jmp    c010256f <pd_dump+0x1eb>
            if(sec && (pt[pti] & 1) == 0){
c0102431:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0102435:	74 57                	je     c010248e <pd_dump+0x10a>
c0102437:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010243a:	c1 e0 02             	shl    $0x2,%eax
c010243d:	03 45 dc             	add    -0x24(%ebp),%eax
c0102440:	8b 00                	mov    (%eax),%eax
c0102442:	83 e0 01             	and    $0x1,%eax
c0102445:	85 c0                	test   %eax,%eax
c0102447:	75 45                	jne    c010248e <pd_dump+0x10a>
                printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c0102449:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010244c:	c1 e0 0c             	shl    $0xc,%eax
c010244f:	89 c2                	mov    %eax,%edx
c0102451:	03 55 e8             	add    -0x18(%ebp),%edx
c0102454:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102457:	c1 e0 0c             	shl    $0xc,%eax
c010245a:	03 45 ec             	add    -0x14(%ebp),%eax
c010245d:	89 54 24 10          	mov    %edx,0x10(%esp)
c0102461:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0102464:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102468:	89 44 24 08          	mov    %eax,0x8(%esp)
c010246c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010246f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102473:	c7 04 24 70 8f 10 c0 	movl   $0xc0108f70,(%esp)
c010247a:	e8 4d 01 00 00       	call   c01025cc <printf>
                sec = 0;
c010247f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            }

            while( (pt[pti] & 1) == 0 ){
c0102486:	eb 06                	jmp    c010248e <pd_dump+0x10a>
                pti++;
c0102488:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010248c:	eb 01                	jmp    c010248f <pd_dump+0x10b>
            if(sec && (pt[pti] & 1) == 0){
                printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
                sec = 0;
            }

            while( (pt[pti] & 1) == 0 ){
c010248e:	90                   	nop
c010248f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102492:	c1 e0 02             	shl    $0x2,%eax
c0102495:	03 45 dc             	add    -0x24(%ebp),%eax
c0102498:	8b 00                	mov    (%eax),%eax
c010249a:	83 e0 01             	and    $0x1,%eax
c010249d:	85 c0                	test   %eax,%eax
c010249f:	74 e7                	je     c0102488 <pd_dump+0x104>
                pti++;
            }
            if(sec == 0){
c01024a1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01024a5:	75 39                	jne    c01024e0 <pd_dump+0x15c>
                sec = 1;
c01024a7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
                phys_base = ((pt[pti] | 0xfff) ^ 0xfff);
c01024ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01024b1:	c1 e0 02             	shl    $0x2,%eax
c01024b4:	03 45 dc             	add    -0x24(%ebp),%eax
c01024b7:	8b 00                	mov    (%eax),%eax
c01024b9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01024be:	89 45 ec             	mov    %eax,-0x14(%ebp)
                virt_base = (pdi << 22) | (pti << 12);
c01024c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024c4:	89 c2                	mov    %eax,%edx
c01024c6:	c1 e2 16             	shl    $0x16,%edx
c01024c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01024cc:	c1 e0 0c             	shl    $0xc,%eax
c01024cf:	09 d0                	or     %edx,%eax
c01024d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
                size = 0;
c01024d4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c01024db:	e9 8b 00 00 00       	jmp    c010256b <pd_dump+0x1e7>

            }else{
                if( (phys_base + (4096 * (size+1) )) == ( (pt[pti] | 0xfff) ^ 0xfff) ){
c01024e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01024e3:	83 c0 01             	add    $0x1,%eax
c01024e6:	c1 e0 0c             	shl    $0xc,%eax
c01024e9:	03 45 ec             	add    -0x14(%ebp),%eax
c01024ec:	89 c2                	mov    %eax,%edx
c01024ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01024f1:	c1 e0 02             	shl    $0x2,%eax
c01024f4:	03 45 dc             	add    -0x24(%ebp),%eax
c01024f7:	8b 00                	mov    (%eax),%eax
c01024f9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01024fe:	39 c2                	cmp    %eax,%edx
c0102500:	75 06                	jne    c0102508 <pd_dump+0x184>
                    size++;
c0102502:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c0102506:	eb 63                	jmp    c010256b <pd_dump+0x1e7>
                }else{
                    printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c0102508:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010250b:	c1 e0 0c             	shl    $0xc,%eax
c010250e:	89 c2                	mov    %eax,%edx
c0102510:	03 55 e8             	add    -0x18(%ebp),%edx
c0102513:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102516:	c1 e0 0c             	shl    $0xc,%eax
c0102519:	03 45 ec             	add    -0x14(%ebp),%eax
c010251c:	89 54 24 10          	mov    %edx,0x10(%esp)
c0102520:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0102523:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102527:	89 44 24 08          	mov    %eax,0x8(%esp)
c010252b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010252e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102532:	c7 04 24 70 8f 10 c0 	movl   $0xc0108f70,(%esp)
c0102539:	e8 8e 00 00 00       	call   c01025cc <printf>
                    phys_base = ((pt[pti] | 0xfff) ^ 0xfff);
c010253e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102541:	c1 e0 02             	shl    $0x2,%eax
c0102544:	03 45 dc             	add    -0x24(%ebp),%eax
c0102547:	8b 00                	mov    (%eax),%eax
c0102549:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010254e:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    virt_base = (pdi << 22) | (pti << 12);
c0102551:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102554:	89 c2                	mov    %eax,%edx
c0102556:	c1 e2 16             	shl    $0x16,%edx
c0102559:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010255c:	c1 e0 0c             	shl    $0xc,%eax
c010255f:	09 d0                	or     %edx,%eax
c0102561:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    size = 0;
c0102564:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            pdi++;
        }

        pt = (uint32_t*) ( ( (pd[pdi] | 0xfff) ^ 0xfff) + 0xC0000000);

        for( pti = 0; pti < PT_LENGTH; pti++ ){
c010256b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010256f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0102576:	0f 8e b5 fe ff ff    	jle    c0102431 <pd_dump+0xad>

void pd_dump(uint32_t *pd){
    pd += 0xC0000000;
    int pdi, pti, phys_base, virt_base, size, sec = 0;
    uint32_t *pt;
    for( pdi = 0; pdi < PD_LENGTH; pdi++ ){
c010257c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102580:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0102587:	0f 8e 10 fe ff ff    	jle    c010239d <pd_dump+0x19>
            }
        }

    }

    if(sec){
c010258d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0102591:	74 36                	je     c01025c9 <pd_dump+0x245>
        printf("%#010X - %#010X => %#010X - %#010X\n", phys_base, phys_base + (4096 * size), virt_base, virt_base + (4096 * size));
c0102593:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102596:	c1 e0 0c             	shl    $0xc,%eax
c0102599:	89 c2                	mov    %eax,%edx
c010259b:	03 55 e8             	add    -0x18(%ebp),%edx
c010259e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01025a1:	c1 e0 0c             	shl    $0xc,%eax
c01025a4:	03 45 ec             	add    -0x14(%ebp),%eax
c01025a7:	89 54 24 10          	mov    %edx,0x10(%esp)
c01025ab:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01025ae:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01025b2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01025b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01025b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025bd:	c7 04 24 70 8f 10 c0 	movl   $0xc0108f70,(%esp)
c01025c4:	e8 03 00 00 00       	call   c01025cc <printf>
    }
}
c01025c9:	c9                   	leave  
c01025ca:	c3                   	ret    
	...

c01025cc <printf>:
#include <ctype.h>
#include <atoi.h>
#include <drivers/video.h>

int printf(const char *fmt, ...)
{
c01025cc:	55                   	push   %ebp
c01025cd:	89 e5                	mov    %esp,%ebp
c01025cf:	57                   	push   %edi
c01025d0:	53                   	push   %ebx
c01025d1:	81 ec 20 04 00 00    	sub    $0x420,%esp
	int size;
	char buffer[1024];
	memset(buffer, 0, 1024);
c01025d7:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c01025dd:	89 c3                	mov    %eax,%ebx
c01025df:	b8 00 00 00 00       	mov    $0x0,%eax
c01025e4:	ba 00 01 00 00       	mov    $0x100,%edx
c01025e9:	89 df                	mov    %ebx,%edi
c01025eb:	89 d1                	mov    %edx,%ecx
c01025ed:	f3 ab                	rep stos %eax,%es:(%edi)

	va_list args;
	va_start(args, fmt);
c01025ef:	8d 55 0c             	lea    0xc(%ebp),%edx
c01025f2:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
c01025f8:	89 10                	mov    %edx,(%eax)

	size = vsprintf(buffer, fmt, args);
c01025fa:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
c0102600:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102604:	8b 45 08             	mov    0x8(%ebp),%eax
c0102607:	89 44 24 04          	mov    %eax,0x4(%esp)
c010260b:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c0102611:	89 04 24             	mov    %eax,(%esp)
c0102614:	e8 55 00 00 00       	call   c010266e <vsprintf>
c0102619:	89 45 f4             	mov    %eax,-0xc(%ebp)

	fputs(buffer, STDOUT);
c010261c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0102623:	00 
c0102624:	8d 85 f4 fb ff ff    	lea    -0x40c(%ebp),%eax
c010262a:	89 04 24             	mov    %eax,(%esp)
c010262d:	e8 00 0c 00 00       	call   c0103232 <fputs>

	va_end(args);
	return size;
c0102632:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102635:	81 c4 20 04 00 00    	add    $0x420,%esp
c010263b:	5b                   	pop    %ebx
c010263c:	5f                   	pop    %edi
c010263d:	5d                   	pop    %ebp
c010263e:	c3                   	ret    

c010263f <sprintf>:

int sprintf(char *buf, const char *fmt, ...)
{
c010263f:	55                   	push   %ebp
c0102640:	89 e5                	mov    %esp,%ebp
c0102642:	83 ec 28             	sub    $0x28,%esp
	int size;

	va_list args;
	va_start(args, fmt);
c0102645:	8d 55 10             	lea    0x10(%ebp),%edx
c0102648:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010264b:	89 10                	mov    %edx,(%eax)

	size = vsprintf(buf, fmt, args);
c010264d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102650:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102654:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102657:	89 44 24 04          	mov    %eax,0x4(%esp)
c010265b:	8b 45 08             	mov    0x8(%ebp),%eax
c010265e:	89 04 24             	mov    %eax,(%esp)
c0102661:	e8 08 00 00 00       	call   c010266e <vsprintf>
c0102666:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_end(args);
	return size;
c0102669:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010266c:	c9                   	leave  
c010266d:	c3                   	ret    

c010266e <vsprintf>:

int vsprintf(char *buf, const char *fmt, va_list args)
{
c010266e:	55                   	push   %ebp
c010266f:	89 e5                	mov    %esp,%ebp
c0102671:	83 ec 58             	sub    $0x58,%esp
	char *str = buf;
c0102674:	8b 45 08             	mov    0x8(%ebp),%eax
c0102677:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int precision;
	int qualifier;

	int base;

	for (; *fmt; ++fmt) {
c010267a:	e9 25 04 00 00       	jmp    c0102aa4 <vsprintf+0x436>
		if (*fmt != '%') {
c010267f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102682:	0f b6 00             	movzbl (%eax),%eax
c0102685:	3c 25                	cmp    $0x25,%al
c0102687:	74 14                	je     c010269d <vsprintf+0x2f>
			*buf++ = *fmt;
c0102689:	8b 45 0c             	mov    0xc(%ebp),%eax
c010268c:	0f b6 10             	movzbl (%eax),%edx
c010268f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102692:	88 10                	mov    %dl,(%eax)
c0102694:	83 45 08 01          	addl   $0x1,0x8(%ebp)
			continue;
c0102698:	e9 03 04 00 00       	jmp    c0102aa0 <vsprintf+0x432>
		}

		/* flags */
		flags = 0;
c010269d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		loop:
		++fmt;
c01026a4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
		switch (*fmt) {
c01026a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01026ab:	0f b6 00             	movzbl (%eax),%eax
c01026ae:	0f be c0             	movsbl %al,%eax
c01026b1:	83 e8 20             	sub    $0x20,%eax
c01026b4:	83 f8 10             	cmp    $0x10,%eax
c01026b7:	77 27                	ja     c01026e0 <vsprintf+0x72>
c01026b9:	8b 04 85 98 8f 10 c0 	mov    -0x3fef7068(,%eax,4),%eax
c01026c0:	ff e0                	jmp    *%eax
		case '0':
			flags |= ZEROPAD;
c01026c2:	83 4d e4 01          	orl    $0x1,-0x1c(%ebp)
			goto loop;
c01026c6:	eb dc                	jmp    c01026a4 <vsprintf+0x36>
		case '+':
			flags |= PLUS;
c01026c8:	83 4d e4 04          	orl    $0x4,-0x1c(%ebp)
			goto loop;
c01026cc:	eb d6                	jmp    c01026a4 <vsprintf+0x36>
		case ' ':
			flags |= SPACE;
c01026ce:	83 4d e4 08          	orl    $0x8,-0x1c(%ebp)
			goto loop;
c01026d2:	eb d0                	jmp    c01026a4 <vsprintf+0x36>
		case '-':
			flags |= LEFT;
c01026d4:	83 4d e4 10          	orl    $0x10,-0x1c(%ebp)
			goto loop;
c01026d8:	eb ca                	jmp    c01026a4 <vsprintf+0x36>
		case '#':
			flags |= SPECIAL;
c01026da:	83 4d e4 40          	orl    $0x40,-0x1c(%ebp)
			goto loop;
c01026de:	eb c4                	jmp    c01026a4 <vsprintf+0x36>
		}

		/* width */
		width = 1;
c01026e0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (isdigit(*fmt)) {
c01026e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01026ea:	0f b6 00             	movzbl (%eax),%eax
c01026ed:	0f be c0             	movsbl %al,%eax
c01026f0:	83 e8 30             	sub    $0x30,%eax
c01026f3:	83 f8 09             	cmp    $0x9,%eax
c01026f6:	77 25                	ja     c010271d <vsprintf+0xaf>
			width = atoi(fmt);
c01026f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01026fb:	89 04 24             	mov    %eax,(%esp)
c01026fe:	e8 9a f1 ff ff       	call   c010189d <atoi>
c0102703:	89 45 e0             	mov    %eax,-0x20(%ebp)
			while (isdigit(*++fmt));
c0102706:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c010270a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010270d:	0f b6 00             	movzbl (%eax),%eax
c0102710:	0f be c0             	movsbl %al,%eax
c0102713:	83 e8 30             	sub    $0x30,%eax
c0102716:	83 f8 09             	cmp    $0x9,%eax
c0102719:	76 eb                	jbe    c0102706 <vsprintf+0x98>
c010271b:	eb 29                	jmp    c0102746 <vsprintf+0xd8>
		} else if (*fmt == '*') {
c010271d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102720:	0f b6 00             	movzbl (%eax),%eax
c0102723:	3c 2a                	cmp    $0x2a,%al
c0102725:	75 1f                	jne    c0102746 <vsprintf+0xd8>
			++fmt;
c0102727:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
			width = va_arg(args, int);
c010272b:	8b 45 10             	mov    0x10(%ebp),%eax
c010272e:	8d 50 04             	lea    0x4(%eax),%edx
c0102731:	89 55 10             	mov    %edx,0x10(%ebp)
c0102734:	8b 00                	mov    (%eax),%eax
c0102736:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (width < 0) {
c0102739:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010273d:	79 07                	jns    c0102746 <vsprintf+0xd8>
				width = - width;
c010273f:	f7 5d e0             	negl   -0x20(%ebp)
				flags |= LEFT;
c0102742:	83 4d e4 10          	orl    $0x10,-0x1c(%ebp)
			}
		}

		/* precision */
		precision = -1;
c0102746:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
		if (*fmt == '.') {
c010274d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102750:	0f b6 00             	movzbl (%eax),%eax
c0102753:	3c 2e                	cmp    $0x2e,%al
c0102755:	75 63                	jne    c01027ba <vsprintf+0x14c>
			++fmt;
c0102757:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
			if (isdigit(*fmt)) {
c010275b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010275e:	0f b6 00             	movzbl (%eax),%eax
c0102761:	0f be c0             	movsbl %al,%eax
c0102764:	83 e8 30             	sub    $0x30,%eax
c0102767:	83 f8 09             	cmp    $0x9,%eax
c010276a:	77 25                	ja     c0102791 <vsprintf+0x123>
				precision = atoi(fmt);
c010276c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010276f:	89 04 24             	mov    %eax,(%esp)
c0102772:	e8 26 f1 ff ff       	call   c010189d <atoi>
c0102777:	89 45 dc             	mov    %eax,-0x24(%ebp)
				while (isdigit(*++fmt));
c010277a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c010277e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102781:	0f b6 00             	movzbl (%eax),%eax
c0102784:	0f be c0             	movsbl %al,%eax
c0102787:	83 e8 30             	sub    $0x30,%eax
c010278a:	83 f8 09             	cmp    $0x9,%eax
c010278d:	76 eb                	jbe    c010277a <vsprintf+0x10c>
c010278f:	eb 1c                	jmp    c01027ad <vsprintf+0x13f>
			} else if (*fmt == '*') {
c0102791:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102794:	0f b6 00             	movzbl (%eax),%eax
c0102797:	3c 2a                	cmp    $0x2a,%al
c0102799:	75 12                	jne    c01027ad <vsprintf+0x13f>
				++fmt;
c010279b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
				precision = va_arg(args, int);
c010279f:	8b 45 10             	mov    0x10(%ebp),%eax
c01027a2:	8d 50 04             	lea    0x4(%eax),%edx
c01027a5:	89 55 10             	mov    %edx,0x10(%ebp)
c01027a8:	8b 00                	mov    (%eax),%eax
c01027aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
			}
			if (precision < 0) {
c01027ad:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01027b1:	79 07                	jns    c01027ba <vsprintf+0x14c>
				precision = 0;
c01027b3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			}
		}

		/* qualifier */
		qualifier = -1;
c01027ba:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
		if (strchr("hlL", *fmt)) {
c01027c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01027c4:	0f b6 00             	movzbl (%eax),%eax
c01027c7:	0f be c0             	movsbl %al,%eax
c01027ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027ce:	c7 04 24 94 8f 10 c0 	movl   $0xc0108f94,(%esp)
c01027d5:	e8 2a 45 00 00       	call   c0106d04 <strchr>
c01027da:	85 c0                	test   %eax,%eax
c01027dc:	74 10                	je     c01027ee <vsprintf+0x180>
			qualifier = *fmt;
c01027de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01027e1:	0f b6 00             	movzbl (%eax),%eax
c01027e4:	0f be c0             	movsbl %al,%eax
c01027e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
			++fmt;
c01027ea:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
		}

		/* base */
		base = 10;
c01027ee:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)

		/* specifier */
		switch (*fmt) {
c01027f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01027f8:	0f b6 00             	movzbl (%eax),%eax
c01027fb:	0f be c0             	movsbl %al,%eax
c01027fe:	83 e8 25             	sub    $0x25,%eax
c0102801:	83 f8 53             	cmp    $0x53,%eax
c0102804:	0f 87 c7 01 00 00    	ja     c01029d1 <vsprintf+0x363>
c010280a:	8b 04 85 dc 8f 10 c0 	mov    -0x3fef7024(,%eax,4),%eax
c0102811:	ff e0                	jmp    *%eax
		case 'c':
			len = 1;
c0102813:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)

			if (!(flags & LEFT))
c010281a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010281d:	83 e0 10             	and    $0x10,%eax
c0102820:	85 c0                	test   %eax,%eax
c0102822:	75 1d                	jne    c0102841 <vsprintf+0x1d3>
				while (len < width--)
c0102824:	eb 0a                	jmp    c0102830 <vsprintf+0x1c2>
					*buf++ = ' ';
c0102826:	8b 45 08             	mov    0x8(%ebp),%eax
c0102829:	c6 00 20             	movb   $0x20,(%eax)
c010282c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
		switch (*fmt) {
		case 'c':
			len = 1;

			if (!(flags & LEFT))
				while (len < width--)
c0102830:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102833:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0102836:	0f 9f c0             	setg   %al
c0102839:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c010283d:	84 c0                	test   %al,%al
c010283f:	75 e5                	jne    c0102826 <vsprintf+0x1b8>
					*buf++ = ' ';

			*buf++ = (unsigned char)va_arg(args, int);
c0102841:	8b 45 10             	mov    0x10(%ebp),%eax
c0102844:	8d 50 04             	lea    0x4(%eax),%edx
c0102847:	89 55 10             	mov    %edx,0x10(%ebp)
c010284a:	8b 00                	mov    (%eax),%eax
c010284c:	89 c2                	mov    %eax,%edx
c010284e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102851:	88 10                	mov    %dl,(%eax)
c0102853:	83 45 08 01          	addl   $0x1,0x8(%ebp)

			while (len < width--)
c0102857:	eb 0a                	jmp    c0102863 <vsprintf+0x1f5>
				*buf++ = ' ';
c0102859:	8b 45 08             	mov    0x8(%ebp),%eax
c010285c:	c6 00 20             	movb   $0x20,(%eax)
c010285f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
				while (len < width--)
					*buf++ = ' ';

			*buf++ = (unsigned char)va_arg(args, int);

			while (len < width--)
c0102863:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102866:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0102869:	0f 9f c0             	setg   %al
c010286c:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c0102870:	84 c0                	test   %al,%al
c0102872:	75 e5                	jne    c0102859 <vsprintf+0x1eb>
				*buf++ = ' ';
			continue;
c0102874:	e9 27 02 00 00       	jmp    c0102aa0 <vsprintf+0x432>

		case 's':
			s = va_arg(args, char *);
c0102879:	8b 45 10             	mov    0x10(%ebp),%eax
c010287c:	8d 50 04             	lea    0x4(%eax),%edx
c010287f:	89 55 10             	mov    %edx,0x10(%ebp)
c0102882:	8b 00                	mov    (%eax),%eax
c0102884:	89 45 f0             	mov    %eax,-0x10(%ebp)
			len = strnlen(s, precision);
c0102887:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010288a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010288e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102891:	89 04 24             	mov    %eax,(%esp)
c0102894:	e8 d3 41 00 00       	call   c0106a6c <strnlen>
c0102899:	89 45 d0             	mov    %eax,-0x30(%ebp)

			if (!(flags & LEFT))
c010289c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010289f:	83 e0 10             	and    $0x10,%eax
c01028a2:	85 c0                	test   %eax,%eax
c01028a4:	75 1d                	jne    c01028c3 <vsprintf+0x255>
				while (len < width--)
c01028a6:	eb 0a                	jmp    c01028b2 <vsprintf+0x244>
					*buf++ = ' ';
c01028a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01028ab:	c6 00 20             	movb   $0x20,(%eax)
c01028ae:	83 45 08 01          	addl   $0x1,0x8(%ebp)
		case 's':
			s = va_arg(args, char *);
			len = strnlen(s, precision);

			if (!(flags & LEFT))
				while (len < width--)
c01028b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01028b5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01028b8:	0f 9f c0             	setg   %al
c01028bb:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c01028bf:	84 c0                	test   %al,%al
c01028c1:	75 e5                	jne    c01028a8 <vsprintf+0x23a>
					*buf++ = ' ';

			for (i = 0; i < len; ++i)
c01028c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01028ca:	eb 17                	jmp    c01028e3 <vsprintf+0x275>
				*buf++ = *s++;
c01028cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01028cf:	0f b6 10             	movzbl (%eax),%edx
c01028d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01028d5:	88 10                	mov    %dl,(%eax)
c01028d7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01028db:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

			if (!(flags & LEFT))
				while (len < width--)
					*buf++ = ' ';

			for (i = 0; i < len; ++i)
c01028df:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01028e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01028e6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01028e9:	7c e1                	jl     c01028cc <vsprintf+0x25e>
				*buf++ = *s++;

			while (len < width--)
c01028eb:	eb 0a                	jmp    c01028f7 <vsprintf+0x289>
				*buf++ = ' ';
c01028ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01028f0:	c6 00 20             	movb   $0x20,(%eax)
c01028f3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
					*buf++ = ' ';

			for (i = 0; i < len; ++i)
				*buf++ = *s++;

			while (len < width--)
c01028f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01028fa:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01028fd:	0f 9f c0             	setg   %al
c0102900:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
c0102904:	84 c0                	test   %al,%al
c0102906:	75 e5                	jne    c01028ed <vsprintf+0x27f>
				*buf++ = ' ';
			continue;
c0102908:	e9 93 01 00 00       	jmp    c0102aa0 <vsprintf+0x432>

		case 'p':
			if (width == -1) {
c010290d:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
c0102911:	75 0b                	jne    c010291e <vsprintf+0x2b0>
				width = 2 * sizeof(void *);
c0102913:	c7 45 e0 08 00 00 00 	movl   $0x8,-0x20(%ebp)
				flags |= ZEROPAD;
c010291a:	83 4d e4 01          	orl    $0x1,-0x1c(%ebp)
			}
			flags |= SPECIAL;
c010291e:	83 4d e4 40          	orl    $0x40,-0x1c(%ebp)
			itoa_ex((unsigned long)va_arg(args, void *), buf, 16, flags, width);
c0102922:	8b 45 10             	mov    0x10(%ebp),%eax
c0102925:	8d 50 04             	lea    0x4(%eax),%edx
c0102928:	89 55 10             	mov    %edx,0x10(%ebp)
c010292b:	8b 00                	mov    (%eax),%eax
c010292d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0102930:	89 54 24 10          	mov    %edx,0x10(%esp)
c0102934:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0102937:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010293b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0102942:	00 
c0102943:	8b 55 08             	mov    0x8(%ebp),%edx
c0102946:	89 54 24 04          	mov    %edx,0x4(%esp)
c010294a:	89 04 24             	mov    %eax,(%esp)
c010294d:	e8 92 ed ff ff       	call   c01016e4 <itoa_ex>
			while (*++buf);
c0102952:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0102956:	8b 45 08             	mov    0x8(%ebp),%eax
c0102959:	0f b6 00             	movzbl (%eax),%eax
c010295c:	84 c0                	test   %al,%al
c010295e:	75 f2                	jne    c0102952 <vsprintf+0x2e4>
			continue;
c0102960:	e9 3b 01 00 00       	jmp    c0102aa0 <vsprintf+0x432>

		case 'n':
			if (qualifier == 'l') {
c0102965:	83 7d d8 6c          	cmpl   $0x6c,-0x28(%ebp)
c0102969:	75 20                	jne    c010298b <vsprintf+0x31d>
				long *dest = va_arg(args, long *);
c010296b:	8b 45 10             	mov    0x10(%ebp),%eax
c010296e:	8d 50 04             	lea    0x4(%eax),%edx
c0102971:	89 55 10             	mov    %edx,0x10(%ebp)
c0102974:	8b 00                	mov    (%eax),%eax
c0102976:	89 45 cc             	mov    %eax,-0x34(%ebp)
				*dest = (buf - str);
c0102979:	8b 55 08             	mov    0x8(%ebp),%edx
c010297c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010297f:	29 c2                	sub    %eax,%edx
c0102981:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0102984:	89 10                	mov    %edx,(%eax)
			} else {
				int *dest = va_arg(args, int *);
				*dest = (buf - str);
			}
			continue;
c0102986:	e9 15 01 00 00       	jmp    c0102aa0 <vsprintf+0x432>
		case 'n':
			if (qualifier == 'l') {
				long *dest = va_arg(args, long *);
				*dest = (buf - str);
			} else {
				int *dest = va_arg(args, int *);
c010298b:	8b 45 10             	mov    0x10(%ebp),%eax
c010298e:	8d 50 04             	lea    0x4(%eax),%edx
c0102991:	89 55 10             	mov    %edx,0x10(%ebp)
c0102994:	8b 00                	mov    (%eax),%eax
c0102996:	89 45 c8             	mov    %eax,-0x38(%ebp)
				*dest = (buf - str);
c0102999:	8b 55 08             	mov    0x8(%ebp),%edx
c010299c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010299f:	29 c2                	sub    %eax,%edx
c01029a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01029a4:	89 10                	mov    %edx,(%eax)
			}
			continue;
c01029a6:	e9 f5 00 00 00       	jmp    c0102aa0 <vsprintf+0x432>

		case '%':
			*buf++ = '%';
c01029ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01029ae:	c6 00 25             	movb   $0x25,(%eax)
c01029b1:	83 45 08 01          	addl   $0x1,0x8(%ebp)

		/* integers */

		case 'o':
			base = 8;
c01029b5:	c7 45 d4 08 00 00 00 	movl   $0x8,-0x2c(%ebp)
			break;
c01029bc:	eb 45                	jmp    c0102a03 <vsprintf+0x395>

		case 'd':
		case 'i':
			flags |= SIGN;
c01029be:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
		case 'u':
			break;
c01029c2:	eb 3e                	jmp    c0102a02 <vsprintf+0x394>

		case 'x':
			flags |= SMALL;
c01029c4:	83 4d e4 20          	orl    $0x20,-0x1c(%ebp)
		case 'X':
			base = 16;
c01029c8:	c7 45 d4 10 00 00 00 	movl   $0x10,-0x2c(%ebp)
			break;
c01029cf:	eb 32                	jmp    c0102a03 <vsprintf+0x395>

		default:
			*str++ = '%';
c01029d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029d4:	c6 00 25             	movb   $0x25,(%eax)
c01029d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
			if (*fmt) {
c01029db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01029de:	0f b6 00             	movzbl (%eax),%eax
c01029e1:	84 c0                	test   %al,%al
c01029e3:	74 14                	je     c01029f9 <vsprintf+0x38b>
				*str++ = *fmt;
c01029e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01029e8:	0f b6 10             	movzbl (%eax),%edx
c01029eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029ee:	88 10                	mov    %dl,(%eax)
c01029f0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
			} else {
				--fmt;
			}
			continue;
c01029f4:	e9 a7 00 00 00       	jmp    c0102aa0 <vsprintf+0x432>
		default:
			*str++ = '%';
			if (*fmt) {
				*str++ = *fmt;
			} else {
				--fmt;
c01029f9:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
			}
			continue;
c01029fd:	e9 9e 00 00 00       	jmp    c0102aa0 <vsprintf+0x432>

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
c0102a02:	90                   	nop
				--fmt;
			}
			continue;
		}

		if (qualifier == 'l') {
c0102a03:	83 7d d8 6c          	cmpl   $0x6c,-0x28(%ebp)
c0102a07:	75 10                	jne    c0102a19 <vsprintf+0x3ab>
			num = va_arg(args, unsigned long);
c0102a09:	8b 45 10             	mov    0x10(%ebp),%eax
c0102a0c:	8d 50 04             	lea    0x4(%eax),%edx
c0102a0f:	89 55 10             	mov    %edx,0x10(%ebp)
c0102a12:	8b 00                	mov    (%eax),%eax
c0102a14:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0102a17:	eb 52                	jmp    c0102a6b <vsprintf+0x3fd>
		} else if (qualifier == 'h') {
c0102a19:	83 7d d8 68          	cmpl   $0x68,-0x28(%ebp)
c0102a1d:	75 24                	jne    c0102a43 <vsprintf+0x3d5>
			num = (unsigned short)va_arg(args, int);
c0102a1f:	8b 45 10             	mov    0x10(%ebp),%eax
c0102a22:	8d 50 04             	lea    0x4(%eax),%edx
c0102a25:	89 55 10             	mov    %edx,0x10(%ebp)
c0102a28:	8b 00                	mov    (%eax),%eax
c0102a2a:	0f b7 c0             	movzwl %ax,%eax
c0102a2d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (flags & SIGN) {
c0102a30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102a33:	83 e0 02             	and    $0x2,%eax
c0102a36:	85 c0                	test   %eax,%eax
c0102a38:	74 31                	je     c0102a6b <vsprintf+0x3fd>
				num = (short)num;
c0102a3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102a3d:	98                   	cwtl   
c0102a3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0102a41:	eb 28                	jmp    c0102a6b <vsprintf+0x3fd>
			}
		} else if (flags & SIGN) {
c0102a43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102a46:	83 e0 02             	and    $0x2,%eax
c0102a49:	85 c0                	test   %eax,%eax
c0102a4b:	74 10                	je     c0102a5d <vsprintf+0x3ef>
			num = va_arg(args, int);
c0102a4d:	8b 45 10             	mov    0x10(%ebp),%eax
c0102a50:	8d 50 04             	lea    0x4(%eax),%edx
c0102a53:	89 55 10             	mov    %edx,0x10(%ebp)
c0102a56:	8b 00                	mov    (%eax),%eax
c0102a58:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0102a5b:	eb 0e                	jmp    c0102a6b <vsprintf+0x3fd>
		} else {
			num = va_arg(args, unsigned int);
c0102a5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0102a60:	8d 50 04             	lea    0x4(%eax),%edx
c0102a63:	89 55 10             	mov    %edx,0x10(%ebp)
c0102a66:	8b 00                	mov    (%eax),%eax
c0102a68:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}

		itoa_ex(num, buf, base, flags, width);
c0102a6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102a6e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0102a71:	89 54 24 10          	mov    %edx,0x10(%esp)
c0102a75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0102a78:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102a7c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0102a7f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102a83:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a86:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102a8a:	89 04 24             	mov    %eax,(%esp)
c0102a8d:	e8 52 ec ff ff       	call   c01016e4 <itoa_ex>
		while (*++buf);
c0102a92:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0102a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a99:	0f b6 00             	movzbl (%eax),%eax
c0102a9c:	84 c0                	test   %al,%al
c0102a9e:	75 f2                	jne    c0102a92 <vsprintf+0x424>
	int precision;
	int qualifier;

	int base;

	for (; *fmt; ++fmt) {
c0102aa0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0102aa4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102aa7:	0f b6 00             	movzbl (%eax),%eax
c0102aaa:	84 c0                	test   %al,%al
c0102aac:	0f 85 cd fb ff ff    	jne    c010267f <vsprintf+0x11>

		itoa_ex(num, buf, base, flags, width);
		while (*++buf);
	}

	*buf = '\0';
c0102ab2:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ab5:	c6 00 00             	movb   $0x0,(%eax)

	return buf - str;
c0102ab8:	8b 55 08             	mov    0x8(%ebp),%edx
c0102abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102abe:	89 d1                	mov    %edx,%ecx
c0102ac0:	29 c1                	sub    %eax,%ecx
c0102ac2:	89 c8                	mov    %ecx,%eax
}
c0102ac4:	c9                   	leave  
c0102ac5:	c3                   	ret    
	...

c0102ac8 <INIT_HEAP>:
#include <memory_layout.h>
#include <paging.h>

heap_t kernel_heap;

void INIT_HEAP(void) {
c0102ac8:	55                   	push   %ebp
c0102ac9:	89 e5                	mov    %esp,%ebp
c0102acb:	83 ec 18             	sub    $0x18,%esp
	heap_init(&kernel_heap);
c0102ace:	c7 04 24 00 00 11 c0 	movl   $0xc0110000,(%esp)
c0102ad5:	e8 c3 00 00 00       	call   c0102b9d <heap_init>
}
c0102ada:	c9                   	leave  
c0102adb:	c3                   	ret    

c0102adc <malloc>:

/* c standard interface. do some preparation here! */

void *malloc(size_t size) {
c0102adc:	55                   	push   %ebp
c0102add:	89 e5                	mov    %esp,%ebp
c0102adf:	83 ec 18             	sub    $0x18,%esp
	return heap_alloc(&kernel_heap, size);
c0102ae2:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ae5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102ae9:	c7 04 24 00 00 11 c0 	movl   $0xc0110000,(%esp)
c0102af0:	e8 51 02 00 00       	call   c0102d46 <heap_alloc>
}
c0102af5:	c9                   	leave  
c0102af6:	c3                   	ret    

c0102af7 <free>:

void free(void * ptr) {
c0102af7:	55                   	push   %ebp
c0102af8:	89 e5                	mov    %esp,%ebp
c0102afa:	83 ec 18             	sub    $0x18,%esp
	heap_free(&kernel_heap, ptr);
c0102afd:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b04:	c7 04 24 00 00 11 c0 	movl   $0xc0110000,(%esp)
c0102b0b:	e8 0b 03 00 00       	call   c0102e1b <heap_free>
}
c0102b10:	c9                   	leave  
c0102b11:	c3                   	ret    

c0102b12 <calloc>:

void *calloc(size_t num, size_t size) {
c0102b12:	55                   	push   %ebp
c0102b13:	89 e5                	mov    %esp,%ebp
c0102b15:	83 ec 28             	sub    $0x28,%esp
	void *data = heap_alloc(&kernel_heap, size);
c0102b18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102b1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b1f:	c7 04 24 00 00 11 c0 	movl   $0xc0110000,(%esp)
c0102b26:	e8 1b 02 00 00       	call   c0102d46 <heap_alloc>
c0102b2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	memset(data, 0, size);
c0102b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102b31:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102b34:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102b38:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0102b3f:	00 
c0102b40:	89 04 24             	mov    %eax,(%esp)
c0102b43:	e8 21 45 00 00       	call   c0107069 <memset>
	
	return data;
c0102b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102b4b:	c9                   	leave  
c0102b4c:	c3                   	ret    

c0102b4d <realloc>:

void *realloc(void *ptr, size_t size) {
c0102b4d:	55                   	push   %ebp
c0102b4e:	89 e5                	mov    %esp,%ebp
c0102b50:	83 ec 28             	sub    $0x28,%esp
	void *dest = heap_alloc(&kernel_heap, size);
c0102b53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102b56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b5a:	c7 04 24 00 00 11 c0 	movl   $0xc0110000,(%esp)
c0102b61:	e8 e0 01 00 00       	call   c0102d46 <heap_alloc>
c0102b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
	alloc_t *source_alloc = ptr - sizeof(alloc_t);
c0102b69:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b6c:	83 e8 10             	sub    $0x10,%eax
c0102b6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	
	memmove(dest, ptr, source_alloc->size);
c0102b72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102b75:	8b 00                	mov    (%eax),%eax
c0102b77:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102b7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102b85:	89 04 24             	mov    %eax,(%esp)
c0102b88:	e8 5a 43 00 00       	call   c0106ee7 <memmove>
	free(ptr);
c0102b8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b90:	89 04 24             	mov    %eax,(%esp)
c0102b93:	e8 5f ff ff ff       	call   c0102af7 <free>
	
	return dest;
c0102b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102b9b:	c9                   	leave  
c0102b9c:	c3                   	ret    

c0102b9d <heap_init>:
 * Initalize a heap
 * 
 * @param heap heap to initalise
 * @return void
 */
void heap_init(heap_t *heap) {
c0102b9d:	55                   	push   %ebp
c0102b9e:	89 e5                	mov    %esp,%ebp
c0102ba0:	53                   	push   %ebx
c0102ba1:	83 ec 24             	sub    $0x24,%esp
	vaddr_t vframe = pd_automap_kernel(pd_get_current(), pmm_alloc_page(), PTE_WRITABLE);
c0102ba4:	e8 7a 48 00 00       	call   c0107423 <pmm_alloc_page>
c0102ba9:	89 c3                	mov    %eax,%ebx
c0102bab:	e8 14 eb ff ff       	call   c01016c4 <pd_get_current>
c0102bb0:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0102bb7:	00 
c0102bb8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102bbc:	89 04 24             	mov    %eax,(%esp)
c0102bbf:	e8 de e6 ff ff       	call   c01012a2 <pd_automap_kernel>
c0102bc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	alloc_t *header = vframe;
c0102bc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102bca:	89 45 f0             	mov    %eax,-0x10(%ebp)

	header->size = PAGE_SIZE - sizeof(alloc_t);
c0102bcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102bd0:	c7 00 f0 0f 00 00    	movl   $0xff0,(%eax)
	header->base = vframe + sizeof(alloc_t);
c0102bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102bd9:	8d 50 10             	lea    0x10(%eax),%edx
c0102bdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102bdf:	89 50 04             	mov    %edx,0x4(%eax)
	header->status = HEAP_STATUS_FREE;
c0102be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102be5:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
	header->next = NULL;
c0102bec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102bef:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

	heap->list_count = 1;
c0102bf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102bf9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	heap->alloc_list = header;
c0102bff:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c02:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0102c05:	89 50 04             	mov    %edx,0x4(%eax)
}
c0102c08:	83 c4 24             	add    $0x24,%esp
c0102c0b:	5b                   	pop    %ebx
c0102c0c:	5d                   	pop    %ebp
c0102c0d:	c3                   	ret    

c0102c0e <heap_expand>:
 * Add a page to the heap
 * 
 * @param heap heap
 * @return void
 */
alloc_t *heap_expand(heap_t *heap, int pages) {
c0102c0e:	55                   	push   %ebp
c0102c0f:	89 e5                	mov    %esp,%ebp
c0102c11:	83 ec 48             	sub    $0x48,%esp
	/* TODO : Range Allocation */
	heap->list_count++;
c0102c14:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c17:	8b 00                	mov    (%eax),%eax
c0102c19:	8d 50 01             	lea    0x1(%eax),%edx
c0102c1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c1f:	89 10                	mov    %edx,(%eax)
	paddr_t pframe = NULL;
c0102c21:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	vaddr_t vframe = vaddr_find(pd_get_current(), pages, 
c0102c28:	e8 97 ea ff ff       	call   c01016c4 <pd_get_current>
c0102c2d:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0102c34:	00 
c0102c35:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c0102c3c:	ff 
c0102c3d:	c7 44 24 08 00 00 00 	movl   $0xe0000000,0x8(%esp)
c0102c44:	e0 
c0102c45:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102c48:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102c4c:	89 04 24             	mov    %eax,(%esp)
c0102c4f:	e8 36 e8 ff ff       	call   c010148a <vaddr_find>
c0102c54:	89 45 e8             	mov    %eax,-0x18(%ebp)
				    MEMORY_LAYOUT_KERNEL_HEAP_START,
				    MEMORY_LAYOUT_KERNEL_HEAP_END, PTE_WRITABLE);
	vaddr_t vframe_cur = vframe;
c0102c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102c5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	
	int i;
	for(i = 0; i < pages; i++) {
c0102c5d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0102c64:	eb 36                	jmp    c0102c9c <heap_expand+0x8e>
		pframe = pmm_alloc_page();
c0102c66:	e8 b8 47 00 00       	call   c0107423 <pmm_alloc_page>
c0102c6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		pd_map(pd_get_current(), pframe, vframe_cur, PTE_WRITABLE);
c0102c6e:	e8 51 ea ff ff       	call   c01016c4 <pd_get_current>
c0102c73:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0102c7a:	00 
c0102c7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102c7e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102c82:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0102c85:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102c89:	89 04 24             	mov    %eax,(%esp)
c0102c8c:	e8 ce e3 ff ff       	call   c010105f <pd_map>
		vframe_cur += PAGE_SIZE;
c0102c91:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
				    MEMORY_LAYOUT_KERNEL_HEAP_START,
				    MEMORY_LAYOUT_KERNEL_HEAP_END, PTE_WRITABLE);
	vaddr_t vframe_cur = vframe;
	
	int i;
	for(i = 0; i < pages; i++) {
c0102c98:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0102c9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102c9f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0102ca2:	7c c2                	jl     c0102c66 <heap_expand+0x58>
		pframe = pmm_alloc_page();
		pd_map(pd_get_current(), pframe, vframe_cur, PTE_WRITABLE);
		vframe_cur += PAGE_SIZE;
	}
	
	alloc_t *new_header = vframe;
c0102ca4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102ca7:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	new_header->size = pages*PAGE_SIZE - sizeof(alloc_t);
c0102caa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102cad:	c1 e0 0c             	shl    $0xc,%eax
c0102cb0:	8d 50 f0             	lea    -0x10(%eax),%edx
c0102cb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102cb6:	89 10                	mov    %edx,(%eax)
	new_header->base = vframe + sizeof(alloc_t);
c0102cb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0102cbb:	8d 50 10             	lea    0x10(%eax),%edx
c0102cbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102cc1:	89 50 04             	mov    %edx,0x4(%eax)
	new_header->status = HEAP_STATUS_FREE;
c0102cc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102cc7:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

	new_header->next = heap->alloc_list;
c0102cce:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cd1:	8b 50 04             	mov    0x4(%eax),%edx
c0102cd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102cd7:	89 50 0c             	mov    %edx,0xc(%eax)
	heap->alloc_list = new_header;
c0102cda:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cdd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0102ce0:	89 50 04             	mov    %edx,0x4(%eax)
	heap->list_count ++;
c0102ce3:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ce6:	8b 00                	mov    (%eax),%eax
c0102ce8:	8d 50 01             	lea    0x1(%eax),%edx
c0102ceb:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cee:	89 10                	mov    %edx,(%eax)
	return new_header;
c0102cf0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0102cf3:	c9                   	leave  
c0102cf4:	c3                   	ret    

c0102cf5 <heap_destroy>:
 * Destroy a heap
 * 
 * @param heap heap
 * @return void
 */
void heap_destroy(heap_t *heap) {
c0102cf5:	55                   	push   %ebp
c0102cf6:	89 e5                	mov    %esp,%ebp
c0102cf8:	53                   	push   %ebx
c0102cf9:	83 ec 14             	sub    $0x14,%esp
	while (heap->list_count != 0) {
c0102cfc:	eb 39                	jmp    c0102d37 <heap_destroy+0x42>
		pd_unmap(pd_get_current(),
			 heap->alloc_list[--heap->list_count].base & ~0xFFF);
c0102cfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d01:	8b 50 04             	mov    0x4(%eax),%edx
c0102d04:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d07:	8b 00                	mov    (%eax),%eax
c0102d09:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0102d0c:	8b 45 08             	mov    0x8(%ebp),%eax
 * @param heap heap
 * @return void
 */
void heap_destroy(heap_t *heap) {
	while (heap->list_count != 0) {
		pd_unmap(pd_get_current(),
c0102d0f:	89 08                	mov    %ecx,(%eax)
			 heap->alloc_list[--heap->list_count].base & ~0xFFF);
c0102d11:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d14:	8b 00                	mov    (%eax),%eax
c0102d16:	c1 e0 04             	shl    $0x4,%eax
c0102d19:	01 d0                	add    %edx,%eax
c0102d1b:	8b 40 04             	mov    0x4(%eax),%eax
 * @param heap heap
 * @return void
 */
void heap_destroy(heap_t *heap) {
	while (heap->list_count != 0) {
		pd_unmap(pd_get_current(),
c0102d1e:	89 c3                	mov    %eax,%ebx
c0102d20:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c0102d26:	e8 99 e9 ff ff       	call   c01016c4 <pd_get_current>
c0102d2b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102d2f:	89 04 24             	mov    %eax,(%esp)
c0102d32:	e8 55 e4 ff ff       	call   c010118c <pd_unmap>
 * 
 * @param heap heap
 * @return void
 */
void heap_destroy(heap_t *heap) {
	while (heap->list_count != 0) {
c0102d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d3a:	8b 00                	mov    (%eax),%eax
c0102d3c:	85 c0                	test   %eax,%eax
c0102d3e:	75 be                	jne    c0102cfe <heap_destroy+0x9>
		pd_unmap(pd_get_current(),
			 heap->alloc_list[--heap->list_count].base & ~0xFFF);
	}
}
c0102d40:	83 c4 14             	add    $0x14,%esp
c0102d43:	5b                   	pop    %ebx
c0102d44:	5d                   	pop    %ebp
c0102d45:	c3                   	ret    

c0102d46 <heap_alloc>:
 * @param heap heap
 * @param size number of bytes
 * 
 * @return pointer to reserved bytes
 */
void *heap_alloc(heap_t *heap, size_t size) {
c0102d46:	55                   	push   %ebp
c0102d47:	89 e5                	mov    %esp,%ebp
c0102d49:	53                   	push   %ebx
c0102d4a:	83 ec 24             	sub    $0x24,%esp
	alloc_t *header = heap->alloc_list;
c0102d4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d50:	8b 40 04             	mov    0x4(%eax),%eax
c0102d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vaddr_t data = 0;
c0102d56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int n_size = size + sizeof(alloc_t);
c0102d5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102d60:	83 c0 10             	add    $0x10,%eax
c0102d63:	89 45 ec             	mov    %eax,-0x14(%ebp)
	
	if(size <= PAGE_SIZE && size > PAGE_SIZE - sizeof(alloc_t)) {
c0102d66:	81 7d 0c 00 10 00 00 	cmpl   $0x1000,0xc(%ebp)
c0102d6d:	77 61                	ja     c0102dd0 <heap_alloc+0x8a>
c0102d6f:	81 7d 0c f0 0f 00 00 	cmpl   $0xff0,0xc(%ebp)
c0102d76:	76 58                	jbe    c0102dd0 <heap_alloc+0x8a>
		data = pd_automap_kernel(pd_get_current(), pmm_alloc_page(), PTE_WRITABLE);
c0102d78:	e8 a6 46 00 00       	call   c0107423 <pmm_alloc_page>
c0102d7d:	89 c3                	mov    %eax,%ebx
c0102d7f:	e8 40 e9 ff ff       	call   c01016c4 <pd_get_current>
c0102d84:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0102d8b:	00 
c0102d8c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102d90:	89 04 24             	mov    %eax,(%esp)
c0102d93:	e8 0a e5 ff ff       	call   c01012a2 <pd_automap_kernel>
c0102d98:	89 45 f0             	mov    %eax,-0x10(%ebp)
		return data;
c0102d9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102d9e:	eb 75                	jmp    c0102e15 <heap_alloc+0xcf>
	}
	
	while(header != NULL) {
		if(header->size >= size && header->status == HEAP_STATUS_FREE) {
c0102da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102da3:	8b 00                	mov    (%eax),%eax
c0102da5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0102da8:	72 1d                	jb     c0102dc7 <heap_alloc+0x81>
c0102daa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102dad:	8b 40 08             	mov    0x8(%eax),%eax
c0102db0:	83 f8 01             	cmp    $0x1,%eax
c0102db3:	75 12                	jne    c0102dc7 <heap_alloc+0x81>
			header->status = HEAP_STATUS_USED;
c0102db5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102db8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

				new_header->next = heap->alloc_list;
				heap->alloc_list = new_header;
			}*/
			
			return header->base;
c0102dbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102dc2:	8b 40 04             	mov    0x4(%eax),%eax
c0102dc5:	eb 4e                	jmp    c0102e15 <heap_alloc+0xcf>
		}
		header = header->next;
c0102dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102dca:	8b 40 0c             	mov    0xc(%eax),%eax
c0102dcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(size <= PAGE_SIZE && size > PAGE_SIZE - sizeof(alloc_t)) {
		data = pd_automap_kernel(pd_get_current(), pmm_alloc_page(), PTE_WRITABLE);
		return data;
	}
	
	while(header != NULL) {
c0102dd0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102dd4:	75 ca                	jne    c0102da0 <heap_alloc+0x5a>
			return header->base;
		}
		header = header->next;
	}
	
	header = heap_expand(heap, NUM_PAGES(n_size));
c0102dd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102dd9:	05 ff 0f 00 00       	add    $0xfff,%eax
c0102dde:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0102de3:	c1 e8 0c             	shr    $0xc,%eax
c0102de6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102dea:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ded:	89 04 24             	mov    %eax,(%esp)
c0102df0:	e8 19 fe ff ff       	call   c0102c0e <heap_expand>
c0102df5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(header != NULL) {
c0102df8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102dfc:	74 12                	je     c0102e10 <heap_alloc+0xca>
		header->status = HEAP_STATUS_USED;
c0102dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102e01:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		return header->base;
c0102e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102e0b:	8b 40 04             	mov    0x4(%eax),%eax
c0102e0e:	eb 05                	jmp    c0102e15 <heap_alloc+0xcf>
	
	#ifdef HEAP_DEBUG
		printf("heap_alloc(): reserving %d bytes of memory: %p - %p\n", header->size, data, data + header->size);
	#endif
	
	return NULL;
c0102e10:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102e15:	83 c4 24             	add    $0x24,%esp
c0102e18:	5b                   	pop    %ebx
c0102e19:	5d                   	pop    %ebp
c0102e1a:	c3                   	ret    

c0102e1b <heap_free>:
 * @param heap heap
 * @param ptr pointer
 * 
 * @return void
 */
void heap_free(heap_t *heap, void *ptr) {
c0102e1b:	55                   	push   %ebp
c0102e1c:	89 e5                	mov    %esp,%ebp
c0102e1e:	83 ec 10             	sub    $0x10,%esp
	alloc_t *header = (alloc_t*)((uintptr_t)ptr - sizeof(alloc_t));
c0102e21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102e24:	83 e8 10             	sub    $0x10,%eax
c0102e27:	89 45 fc             	mov    %eax,-0x4(%ebp)
	header->status = HEAP_STATUS_FREE;
c0102e2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102e2d:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
	
	#ifdef HEAP_DEBUG
		printf("heap_free(): freeing %d bytes of memory: %p - %p\n", header->size, ptr, ptr + header->size);
	#endif
}
c0102e34:	c9                   	leave  
c0102e35:	c3                   	ret    
	...

c0102e38 <inb>:
*/

#include <stdint.h>


static inline uint8_t inb(uint16_t port) {
c0102e38:	55                   	push   %ebp
c0102e39:	89 e5                	mov    %esp,%ebp
c0102e3b:	53                   	push   %ebx
c0102e3c:	83 ec 14             	sub    $0x14,%esp
c0102e3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e42:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	uint8_t result;
	asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c0102e46:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102e4a:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0102e4e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102e52:	ec                   	in     (%dx),%al
c0102e53:	89 c3                	mov    %eax,%ebx
c0102e55:	88 5d fb             	mov    %bl,-0x5(%ebp)
	return result;
c0102e58:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c0102e5c:	83 c4 14             	add    $0x14,%esp
c0102e5f:	5b                   	pop    %ebx
c0102e60:	5d                   	pop    %ebp
c0102e61:	c3                   	ret    

c0102e62 <outb>:
	uint32_t result;
	asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
	return result;
}

static inline void outb(uint16_t port, uint8_t value) {
c0102e62:	55                   	push   %ebp
c0102e63:	89 e5                	mov    %esp,%ebp
c0102e65:	83 ec 08             	sub    $0x8,%esp
c0102e68:	8b 55 08             	mov    0x8(%ebp),%edx
c0102e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102e6e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0102e72:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c0102e75:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102e79:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0102e7d:	ee                   	out    %al,(%dx)
}
c0102e7e:	c9                   	leave  
c0102e7f:	c3                   	ret    

c0102e80 <INIT_CMOS>:
 * Reads the Values from Complementary Metal Oxide Semiconductor
 *
 * @param void
 * @return void
 */
void INIT_CMOS(void) {
c0102e80:	55                   	push   %ebp
c0102e81:	89 e5                	mov    %esp,%ebp
c0102e83:	83 ec 18             	sub    $0x18,%esp
	cmos.registers.register_a = cmos_read_byte(0x0A);
c0102e86:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0102e8d:	e8 52 01 00 00       	call   c0102fe4 <cmos_read_byte>
c0102e92:	a2 0c 00 11 c0       	mov    %al,0xc011000c
	cmos.registers.register_b = cmos_read_byte(0x0B);
c0102e97:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c0102e9e:	e8 41 01 00 00       	call   c0102fe4 <cmos_read_byte>
c0102ea3:	a2 0d 00 11 c0       	mov    %al,0xc011000d
	cmos.registers.register_c = cmos_read_byte(0x0C);
c0102ea8:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0102eaf:	e8 30 01 00 00       	call   c0102fe4 <cmos_read_byte>
c0102eb4:	a2 0e 00 11 c0       	mov    %al,0xc011000e
	cmos.registers.register_d = cmos_read_byte(0x0D);
c0102eb9:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
c0102ec0:	e8 1f 01 00 00       	call   c0102fe4 <cmos_read_byte>
c0102ec5:	a2 0f 00 11 c0       	mov    %al,0xc011000f

	INIT_RTC();
c0102eca:	e8 e9 14 00 00       	call   c01043b8 <INIT_RTC>
	cmos.time = get_time();
c0102ecf:	e8 b9 18 00 00       	call   c010478d <get_time>
c0102ed4:	a3 08 00 11 c0       	mov    %eax,0xc0110008

	cmos.hardware.post_diagnostig_status_byte = cmos_read_byte(0x0E);
c0102ed9:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0102ee0:	e8 ff 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102ee5:	a2 10 00 11 c0       	mov    %al,0xc0110010
	cmos.hardware.shutdown_status_byte =        cmos_read_byte(0x0F);
c0102eea:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0102ef1:	e8 ee 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102ef6:	a2 11 00 11 c0       	mov    %al,0xc0110011
	cmos.hardware.floppy_disk_type =            cmos_read_byte(0x10);
c0102efb:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0102f02:	e8 dd 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f07:	a2 12 00 11 c0       	mov    %al,0xc0110012
	cmos.hardware.hd_type =                     cmos_read_byte(0x12);
c0102f0c:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
c0102f13:	e8 cc 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f18:	a2 13 00 11 c0       	mov    %al,0xc0110013
	cmos.hardware.device_byte =                 cmos_read_byte(0x14);
c0102f1d:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c0102f24:	e8 bb 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f29:	a2 14 00 11 c0       	mov    %al,0xc0110014
	
	cmos.hardware.basememory_size_low =         cmos_read_byte(0x15);
c0102f2e:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
c0102f35:	e8 aa 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f3a:	a2 15 00 11 c0       	mov    %al,0xc0110015
	cmos.hardware.basememory_size_high =        cmos_read_byte(0x16);
c0102f3f:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
c0102f46:	e8 99 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f4b:	a2 16 00 11 c0       	mov    %al,0xc0110016
	cmos.hardware.expandablememory_size_low =   cmos_read_byte(0x17);
c0102f50:	c7 04 24 17 00 00 00 	movl   $0x17,(%esp)
c0102f57:	e8 88 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f5c:	a2 17 00 11 c0       	mov    %al,0xc0110017
	cmos.hardware.expandablememory_size_high =  cmos_read_byte(0x18);
c0102f61:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0102f68:	e8 77 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f6d:	a2 18 00 11 c0       	mov    %al,0xc0110018
	cmos.hardware.extension_byte_hd1 =          cmos_read_byte(0x19);
c0102f72:	c7 04 24 19 00 00 00 	movl   $0x19,(%esp)
c0102f79:	e8 66 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f7e:	a2 19 00 11 c0       	mov    %al,0xc0110019
	cmos.hardware.extension_byte_hd2 =          cmos_read_byte(0x1A);
c0102f83:	c7 04 24 1a 00 00 00 	movl   $0x1a,(%esp)
c0102f8a:	e8 55 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102f8f:	a2 1a 00 11 c0       	mov    %al,0xc011001a
	
	cmos.hardware.cmos_magic_low =              cmos_read_byte(0x2E);
c0102f94:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
c0102f9b:	e8 44 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102fa0:	a2 1b 00 11 c0       	mov    %al,0xc011001b
	cmos.hardware.cmos_magic_high =             cmos_read_byte(0x2F);
c0102fa5:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
c0102fac:	e8 33 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102fb1:	a2 1c 00 11 c0       	mov    %al,0xc011001c
	
	cmos.hardware.extendedmemory_low =          cmos_read_byte(0x30);
c0102fb6:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0102fbd:	e8 22 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102fc2:	a2 1d 00 11 c0       	mov    %al,0xc011001d
	cmos.hardware.extendedmenory_high =         cmos_read_byte(0x31);
c0102fc7:	c7 04 24 31 00 00 00 	movl   $0x31,(%esp)
c0102fce:	e8 11 00 00 00       	call   c0102fe4 <cmos_read_byte>
c0102fd3:	a2 1e 00 11 c0       	mov    %al,0xc011001e
}
c0102fd8:	c9                   	leave  
c0102fd9:	c3                   	ret    

c0102fda <get_cmos_data>:
 * 
 * @param void
 *
 * @return pointer to the cmos-struct
 */
cmos_data_t* get_cmos_data(void) {
c0102fda:	55                   	push   %ebp
c0102fdb:	89 e5                	mov    %esp,%ebp
	return &cmos;
c0102fdd:	b8 08 00 11 c0       	mov    $0xc0110008,%eax
}
c0102fe2:	5d                   	pop    %ebp
c0102fe3:	c3                   	ret    

c0102fe4 <cmos_read_byte>:
 * Reads a byte from CMOS
 * @param offset Offset in the CMOS
 * 
 * @return Read value from CMOS
 */
uint8_t cmos_read_byte(uint8_t offset) {
c0102fe4:	55                   	push   %ebp
c0102fe5:	89 e5                	mov    %esp,%ebp
c0102fe7:	83 ec 1c             	sub    $0x1c,%esp
c0102fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0102fed:	88 45 ec             	mov    %al,-0x14(%ebp)
	uint8_t tmp = inb(0x70);
c0102ff0:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c0102ff7:	e8 3c fe ff ff       	call   c0102e38 <inb>
c0102ffc:	88 45 ff             	mov    %al,-0x1(%ebp)
	outb(0x70, (tmp & 0x80) | (offset & 0x7F));
c0102fff:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0103003:	89 c2                	mov    %eax,%edx
c0103005:	83 e2 80             	and    $0xffffff80,%edx
c0103008:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c010300c:	83 e0 7f             	and    $0x7f,%eax
c010300f:	09 d0                	or     %edx,%eax
c0103011:	0f b6 c0             	movzbl %al,%eax
c0103014:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103018:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010301f:	e8 3e fe ff ff       	call   c0102e62 <outb>
	return inb(0x71);
c0103024:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c010302b:	e8 08 fe ff ff       	call   c0102e38 <inb>
}
c0103030:	c9                   	leave  
c0103031:	c3                   	ret    

c0103032 <cmos_write_byte>:
 * @param offset Offset in the CMOS
 * @param value Value which is written into the CMOS
 *
 * @return void
 */
void cmos_write_byte(uint8_t offset, uint8_t value) {
c0103032:	55                   	push   %ebp
c0103033:	89 e5                	mov    %esp,%ebp
c0103035:	83 ec 20             	sub    $0x20,%esp
c0103038:	8b 55 08             	mov    0x8(%ebp),%edx
c010303b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010303e:	88 55 ec             	mov    %dl,-0x14(%ebp)
c0103041:	88 45 e8             	mov    %al,-0x18(%ebp)
	uint8_t tmp = inb(0x70);
c0103044:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c010304b:	e8 e8 fd ff ff       	call   c0102e38 <inb>
c0103050:	88 45 ff             	mov    %al,-0x1(%ebp)
	outb(0x70, (tmp & 0x80) | (offset & 0x7F));
c0103053:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
c0103057:	89 c2                	mov    %eax,%edx
c0103059:	83 e2 80             	and    $0xffffff80,%edx
c010305c:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0103060:	83 e0 7f             	and    $0x7f,%eax
c0103063:	09 d0                	or     %edx,%eax
c0103065:	0f b6 c0             	movzbl %al,%eax
c0103068:	89 44 24 04          	mov    %eax,0x4(%esp)
c010306c:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c0103073:	e8 ea fd ff ff       	call   c0102e62 <outb>
	outb(0x71,value);
c0103078:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c010307c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103080:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
c0103087:	e8 d6 fd ff ff       	call   c0102e62 <outb>
}
c010308c:	c9                   	leave  
c010308d:	c3                   	ret    
	...

c0103090 <putchar>:

static color_t color = CYAN | BLACK << 4;
static char *video_mem = (char *)0xc00b8000;

int putchar(int c)
{
c0103090:	55                   	push   %ebp
c0103091:	89 e5                	mov    %esp,%ebp
c0103093:	83 ec 18             	sub    $0x18,%esp
	if (c == '\b') {
c0103096:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010309a:	0f 85 8a 00 00 00    	jne    c010312a <putchar+0x9a>
		if (x > 0) {
c01030a0:	a1 18 e0 10 c0       	mov    0xc010e018,%eax
c01030a5:	85 c0                	test   %eax,%eax
c01030a7:	7e 2b                	jle    c01030d4 <putchar+0x44>
			gotoxy(--x, y);
c01030a9:	a1 1c e0 10 c0       	mov    0xc010e01c,%eax
c01030ae:	0f b6 d0             	movzbl %al,%edx
c01030b1:	a1 18 e0 10 c0       	mov    0xc010e018,%eax
c01030b6:	83 e8 01             	sub    $0x1,%eax
c01030b9:	a3 18 e0 10 c0       	mov    %eax,0xc010e018
c01030be:	a1 18 e0 10 c0       	mov    0xc010e018,%eax
c01030c3:	0f b6 c0             	movzbl %al,%eax
c01030c6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01030ca:	89 04 24             	mov    %eax,(%esp)
c01030cd:	e8 1b 02 00 00       	call   c01032ed <gotoxy>
c01030d2:	eb 2c                	jmp    c0103100 <putchar+0x70>
		} else {
			gotoxy(columns - 1, --y);
c01030d4:	a1 1c e0 10 c0       	mov    0xc010e01c,%eax
c01030d9:	83 e8 01             	sub    $0x1,%eax
c01030dc:	a3 1c e0 10 c0       	mov    %eax,0xc010e01c
c01030e1:	a1 1c e0 10 c0       	mov    0xc010e01c,%eax
c01030e6:	0f b6 d0             	movzbl %al,%edx
c01030e9:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c01030ee:	83 e8 01             	sub    $0x1,%eax
c01030f1:	0f b6 c0             	movzbl %al,%eax
c01030f4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01030f8:	89 04 24             	mov    %eax,(%esp)
c01030fb:	e8 ed 01 00 00       	call   c01032ed <gotoxy>
		}
		
		video_mem[2 * (y * columns + x)] = 0;
c0103100:	8b 15 ac c0 10 c0    	mov    0xc010c0ac,%edx
c0103106:	8b 0d 1c e0 10 c0    	mov    0xc010e01c,%ecx
c010310c:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c0103111:	0f af c8             	imul   %eax,%ecx
c0103114:	a1 18 e0 10 c0       	mov    0xc010e018,%eax
c0103119:	01 c8                	add    %ecx,%eax
c010311b:	01 c0                	add    %eax,%eax
c010311d:	01 d0                	add    %edx,%eax
c010311f:	c6 00 00             	movb   $0x0,(%eax)
		
		return c;
c0103122:	8b 45 08             	mov    0x8(%ebp),%eax
c0103125:	e9 c3 00 00 00       	jmp    c01031ed <putchar+0x15d>
	}
	
	if ((x > columns - 1) || (c == '\n')) {
c010312a:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c010312f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0103132:	a1 18 e0 10 c0       	mov    0xc010e018,%eax
c0103137:	39 c2                	cmp    %eax,%edx
c0103139:	7c 06                	jl     c0103141 <putchar+0xb1>
c010313b:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c010313f:	75 30                	jne    c0103171 <putchar+0xe1>
		gotoxy(0, ++y);
c0103141:	a1 1c e0 10 c0       	mov    0xc010e01c,%eax
c0103146:	83 c0 01             	add    $0x1,%eax
c0103149:	a3 1c e0 10 c0       	mov    %eax,0xc010e01c
c010314e:	a1 1c e0 10 c0       	mov    0xc010e01c,%eax
c0103153:	0f b6 c0             	movzbl %al,%eax
c0103156:	89 44 24 04          	mov    %eax,0x4(%esp)
c010315a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0103161:	e8 87 01 00 00       	call   c01032ed <gotoxy>

		if (c == '\n') {
c0103166:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c010316a:	75 05                	jne    c0103171 <putchar+0xe1>
			return c;
c010316c:	8b 45 08             	mov    0x8(%ebp),%eax
c010316f:	eb 7c                	jmp    c01031ed <putchar+0x15d>
		}
	}

	video_mem[2 * (y * columns + x)] = c;
c0103171:	8b 15 ac c0 10 c0    	mov    0xc010c0ac,%edx
c0103177:	8b 0d 1c e0 10 c0    	mov    0xc010e01c,%ecx
c010317d:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c0103182:	0f af c8             	imul   %eax,%ecx
c0103185:	a1 18 e0 10 c0       	mov    0xc010e018,%eax
c010318a:	01 c8                	add    %ecx,%eax
c010318c:	01 c0                	add    %eax,%eax
c010318e:	01 c2                	add    %eax,%edx
c0103190:	8b 45 08             	mov    0x8(%ebp),%eax
c0103193:	88 02                	mov    %al,(%edx)
	video_mem[2 * (y * columns + x) + 1] = color;
c0103195:	a1 ac c0 10 c0       	mov    0xc010c0ac,%eax
c010319a:	8b 0d 1c e0 10 c0    	mov    0xc010e01c,%ecx
c01031a0:	8b 15 a4 c0 10 c0    	mov    0xc010c0a4,%edx
c01031a6:	0f af ca             	imul   %edx,%ecx
c01031a9:	8b 15 18 e0 10 c0    	mov    0xc010e018,%edx
c01031af:	01 ca                	add    %ecx,%edx
c01031b1:	01 d2                	add    %edx,%edx
c01031b3:	83 c2 01             	add    $0x1,%edx
c01031b6:	01 c2                	add    %eax,%edx
c01031b8:	0f b6 05 a8 c0 10 c0 	movzbl 0xc010c0a8,%eax
c01031bf:	88 02                	mov    %al,(%edx)

	gotoxy(++x, y);
c01031c1:	a1 1c e0 10 c0       	mov    0xc010e01c,%eax
c01031c6:	0f b6 d0             	movzbl %al,%edx
c01031c9:	a1 18 e0 10 c0       	mov    0xc010e018,%eax
c01031ce:	83 c0 01             	add    $0x1,%eax
c01031d1:	a3 18 e0 10 c0       	mov    %eax,0xc010e018
c01031d6:	a1 18 e0 10 c0       	mov    0xc010e018,%eax
c01031db:	0f b6 c0             	movzbl %al,%eax
c01031de:	89 54 24 04          	mov    %edx,0x4(%esp)
c01031e2:	89 04 24             	mov    %eax,(%esp)
c01031e5:	e8 03 01 00 00       	call   c01032ed <gotoxy>
	
	return c;
c01031ea:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01031ed:	c9                   	leave  
c01031ee:	c3                   	ret    

c01031ef <puts>:

int puts(const char* s)
{
c01031ef:	55                   	push   %ebp
c01031f0:	89 e5                	mov    %esp,%ebp
c01031f2:	83 ec 28             	sub    $0x28,%esp
	int printed = 1;
c01031f5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

	while (*s) {
c01031fc:	eb 19                	jmp    c0103217 <puts+0x28>
		putchar(*s++);
c01031fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0103201:	0f b6 00             	movzbl (%eax),%eax
c0103204:	0f be c0             	movsbl %al,%eax
c0103207:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010320b:	89 04 24             	mov    %eax,(%esp)
c010320e:	e8 7d fe ff ff       	call   c0103090 <putchar>
		++printed;
c0103213:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

int puts(const char* s)
{
	int printed = 1;

	while (*s) {
c0103217:	8b 45 08             	mov    0x8(%ebp),%eax
c010321a:	0f b6 00             	movzbl (%eax),%eax
c010321d:	84 c0                	test   %al,%al
c010321f:	75 dd                	jne    c01031fe <puts+0xf>
		putchar(*s++);
		++printed;
	}
	putchar('\n');
c0103221:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0103228:	e8 63 fe ff ff       	call   c0103090 <putchar>

	return printed;
c010322d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103230:	c9                   	leave  
c0103231:	c3                   	ret    

c0103232 <fputs>:

int fputs(const char* s, int fd)
{
c0103232:	55                   	push   %ebp
c0103233:	89 e5                	mov    %esp,%ebp
c0103235:	83 ec 18             	sub    $0x18,%esp
	if (fd == STDOUT) {
c0103238:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010323c:	75 21                	jne    c010325f <fputs+0x2d>
		while (*s) {
c010323e:	eb 15                	jmp    c0103255 <fputs+0x23>
			putchar(*s++);
c0103240:	8b 45 08             	mov    0x8(%ebp),%eax
c0103243:	0f b6 00             	movzbl (%eax),%eax
c0103246:	0f be c0             	movsbl %al,%eax
c0103249:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010324d:	89 04 24             	mov    %eax,(%esp)
c0103250:	e8 3b fe ff ff       	call   c0103090 <putchar>
}

int fputs(const char* s, int fd)
{
	if (fd == STDOUT) {
		while (*s) {
c0103255:	8b 45 08             	mov    0x8(%ebp),%eax
c0103258:	0f b6 00             	movzbl (%eax),%eax
c010325b:	84 c0                	test   %al,%al
c010325d:	75 e1                	jne    c0103240 <fputs+0xe>
			putchar(*s++);
		}
	}

	return 0;
c010325f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103264:	c9                   	leave  
c0103265:	c3                   	ret    

c0103266 <clear_screen>:

void clear_screen(void)
{
c0103266:	55                   	push   %ebp
c0103267:	89 e5                	mov    %esp,%ebp
c0103269:	83 ec 28             	sub    $0x28,%esp
	int i;
	for (i = 0; i < lines * columns; i++) {
c010326c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103273:	eb 2c                	jmp    c01032a1 <clear_screen+0x3b>
		video_mem[2 * i] = 0;
c0103275:	8b 15 ac c0 10 c0    	mov    0xc010c0ac,%edx
c010327b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010327e:	01 c0                	add    %eax,%eax
c0103280:	01 d0                	add    %edx,%eax
c0103282:	c6 00 00             	movb   $0x0,(%eax)
		video_mem[2 * i + 1] = color;
c0103285:	a1 ac c0 10 c0       	mov    0xc010c0ac,%eax
c010328a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010328d:	01 d2                	add    %edx,%edx
c010328f:	83 c2 01             	add    $0x1,%edx
c0103292:	01 c2                	add    %eax,%edx
c0103294:	0f b6 05 a8 c0 10 c0 	movzbl 0xc010c0a8,%eax
c010329b:	88 02                	mov    %al,(%edx)
}

void clear_screen(void)
{
	int i;
	for (i = 0; i < lines * columns; i++) {
c010329d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01032a1:	8b 15 a0 c0 10 c0    	mov    0xc010c0a0,%edx
c01032a7:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c01032ac:	0f af c2             	imul   %edx,%eax
c01032af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01032b2:	7f c1                	jg     c0103275 <clear_screen+0xf>
		video_mem[2 * i] = 0;
		video_mem[2 * i + 1] = color;
	}

	gotoxy(0, 0);
c01032b4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01032bb:	00 
c01032bc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01032c3:	e8 25 00 00 00       	call   c01032ed <gotoxy>
}
c01032c8:	c9                   	leave  
c01032c9:	c3                   	ret    

c01032ca <set_color>:

void set_color(color_t _color)
{
c01032ca:	55                   	push   %ebp
c01032cb:	89 e5                	mov    %esp,%ebp
c01032cd:	83 ec 04             	sub    $0x4,%esp
c01032d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01032d3:	88 45 fc             	mov    %al,-0x4(%ebp)
	color = _color;
c01032d6:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c01032da:	a2 a8 c0 10 c0       	mov    %al,0xc010c0a8
}
c01032df:	c9                   	leave  
c01032e0:	c3                   	ret    

c01032e1 <get_color>:

color_t get_color(void)
{
c01032e1:	55                   	push   %ebp
c01032e2:	89 e5                	mov    %esp,%ebp
	return color;
c01032e4:	0f b6 05 a8 c0 10 c0 	movzbl 0xc010c0a8,%eax
}
c01032eb:	5d                   	pop    %ebp
c01032ec:	c3                   	ret    

c01032ed <gotoxy>:

void gotoxy(uint8_t _x, uint8_t _y)
{
c01032ed:	55                   	push   %ebp
c01032ee:	89 e5                	mov    %esp,%ebp
c01032f0:	53                   	push   %ebx
c01032f1:	83 ec 34             	sub    $0x34,%esp
c01032f4:	8b 55 08             	mov    0x8(%ebp),%edx
c01032f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01032fa:	88 55 e4             	mov    %dl,-0x1c(%ebp)
c01032fd:	88 45 e0             	mov    %al,-0x20(%ebp)
	uint16_t offset;

	if ((_y * columns + _x) >= (columns * lines)) { /* scroll if neccessary */
c0103300:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
c0103304:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c0103309:	0f af d0             	imul   %eax,%edx
c010330c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0103310:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
c0103313:	8b 15 a4 c0 10 c0    	mov    0xc010c0a4,%edx
c0103319:	a1 a0 c0 10 c0       	mov    0xc010c0a0,%eax
c010331e:	0f af c2             	imul   %edx,%eax
c0103321:	39 c1                	cmp    %eax,%ecx
c0103323:	7c 6f                	jl     c0103394 <gotoxy+0xa7>
		memmove(video_mem, video_mem + 2 * columns, 2 * lines * columns);
c0103325:	a1 a0 c0 10 c0       	mov    0xc010c0a0,%eax
c010332a:	8d 14 00             	lea    (%eax,%eax,1),%edx
c010332d:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c0103332:	0f af c2             	imul   %edx,%eax
c0103335:	89 c2                	mov    %eax,%edx
c0103337:	8b 0d ac c0 10 c0    	mov    0xc010c0ac,%ecx
c010333d:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c0103342:	01 c0                	add    %eax,%eax
c0103344:	01 c1                	add    %eax,%ecx
c0103346:	a1 ac c0 10 c0       	mov    0xc010c0ac,%eax
c010334b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010334f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0103353:	89 04 24             	mov    %eax,(%esp)
c0103356:	e8 8c 3b 00 00       	call   c0106ee7 <memmove>
		memset(video_mem + 2 * lines * columns, 0, 2 * columns);
c010335b:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c0103360:	01 c0                	add    %eax,%eax
c0103362:	89 c2                	mov    %eax,%edx
c0103364:	8b 0d ac c0 10 c0    	mov    0xc010c0ac,%ecx
c010336a:	a1 a0 c0 10 c0       	mov    0xc010c0a0,%eax
c010336f:	8d 1c 00             	lea    (%eax,%eax,1),%ebx
c0103372:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c0103377:	0f af c3             	imul   %ebx,%eax
c010337a:	01 c8                	add    %ecx,%eax
c010337c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103380:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103387:	00 
c0103388:	89 04 24             	mov    %eax,(%esp)
c010338b:	e8 d9 3c 00 00       	call   c0107069 <memset>
		--_y;
c0103390:	80 6d e0 01          	subb   $0x1,-0x20(%ebp)
	}
	
	x = _x; y = _y;
c0103394:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c0103398:	a3 18 e0 10 c0       	mov    %eax,0xc010e018
c010339d:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c01033a1:	a3 1c e0 10 c0       	mov    %eax,0xc010e01c
	offset = _y * columns + _x;
c01033a6:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
c01033aa:	a1 a4 c0 10 c0       	mov    0xc010c0a4,%eax
c01033af:	0f af d0             	imul   %eax,%edx
c01033b2:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c01033b6:	01 d0                	add    %edx,%eax
c01033b8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

	if (video_mem[2 * offset] == 0) {
c01033bc:	8b 15 ac c0 10 c0    	mov    0xc010c0ac,%edx
c01033c2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01033c6:	01 c0                	add    %eax,%eax
c01033c8:	01 d0                	add    %edx,%eax
c01033ca:	0f b6 00             	movzbl (%eax),%eax
c01033cd:	84 c0                	test   %al,%al
c01033cf:	75 19                	jne    c01033ea <gotoxy+0xfd>
		video_mem[2 * offset + 1] = color;
c01033d1:	a1 ac c0 10 c0       	mov    0xc010c0ac,%eax
c01033d6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01033da:	01 d2                	add    %edx,%edx
c01033dc:	83 c2 01             	add    $0x1,%edx
c01033df:	01 c2                	add    %eax,%edx
c01033e1:	0f b6 05 a8 c0 10 c0 	movzbl 0xc010c0a8,%eax
c01033e8:	88 02                	mov    %al,(%edx)
	}

	crtc_write(CRTC_CURSOR_LOCATION_HIGH, (uint8_t)(offset >> 8));
c01033ea:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01033ee:	66 c1 e8 08          	shr    $0x8,%ax
c01033f2:	0f b6 c0             	movzbl %al,%eax
c01033f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01033f9:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0103400:	e8 3d 00 00 00       	call   c0103442 <crtc_write>
	crtc_write(CRTC_CURSOR_LOCATION_LOW, (uint8_t)offset);
c0103405:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0103409:	0f b6 c0             	movzbl %al,%eax
c010340c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103410:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0103417:	e8 26 00 00 00       	call   c0103442 <crtc_write>
}
c010341c:	83 c4 34             	add    $0x34,%esp
c010341f:	5b                   	pop    %ebx
c0103420:	5d                   	pop    %ebp
c0103421:	c3                   	ret    
	...

c0103424 <outb>:
	uint32_t result;
	asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
	return result;
}

static inline void outb(uint16_t port, uint8_t value) {
c0103424:	55                   	push   %ebp
c0103425:	89 e5                	mov    %esp,%ebp
c0103427:	83 ec 08             	sub    $0x8,%esp
c010342a:	8b 55 08             	mov    0x8(%ebp),%edx
c010342d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103430:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0103434:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c0103437:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010343b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010343f:	ee                   	out    %al,(%dx)
}
c0103440:	c9                   	leave  
c0103441:	c3                   	ret    

c0103442 <crtc_write>:

#include <drivers/crtc.h>
#include <io.h>

void crtc_write(uint8_t index, uint8_t value)
{
c0103442:	55                   	push   %ebp
c0103443:	89 e5                	mov    %esp,%ebp
c0103445:	83 ec 10             	sub    $0x10,%esp
c0103448:	8b 55 08             	mov    0x8(%ebp),%edx
c010344b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010344e:	88 55 fc             	mov    %dl,-0x4(%ebp)
c0103451:	88 45 f8             	mov    %al,-0x8(%ebp)
	outb(CRTC_INDEX_PORT, index);
c0103454:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c0103458:	89 44 24 04          	mov    %eax,0x4(%esp)
c010345c:	c7 04 24 d4 03 00 00 	movl   $0x3d4,(%esp)
c0103463:	e8 bc ff ff ff       	call   c0103424 <outb>
	outb(CRTC_DATA_PORT, value);
c0103468:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c010346c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103470:	c7 04 24 d5 03 00 00 	movl   $0x3d5,(%esp)
c0103477:	e8 a8 ff ff ff       	call   c0103424 <outb>
}
c010347c:	c9                   	leave  
c010347d:	c3                   	ret    
	...

c0103480 <inb>:
*/

#include <stdint.h>


static inline uint8_t inb(uint16_t port) {
c0103480:	55                   	push   %ebp
c0103481:	89 e5                	mov    %esp,%ebp
c0103483:	53                   	push   %ebx
c0103484:	83 ec 14             	sub    $0x14,%esp
c0103487:	8b 45 08             	mov    0x8(%ebp),%eax
c010348a:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	uint8_t result;
	asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c010348e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0103492:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0103496:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010349a:	ec                   	in     (%dx),%al
c010349b:	89 c3                	mov    %eax,%ebx
c010349d:	88 5d fb             	mov    %bl,-0x5(%ebp)
	return result;
c01034a0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c01034a4:	83 c4 14             	add    $0x14,%esp
c01034a7:	5b                   	pop    %ebx
c01034a8:	5d                   	pop    %ebp
c01034a9:	c3                   	ret    

c01034aa <outb>:
	uint32_t result;
	asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
	return result;
}

static inline void outb(uint16_t port, uint8_t value) {
c01034aa:	55                   	push   %ebp
c01034ab:	89 e5                	mov    %esp,%ebp
c01034ad:	83 ec 08             	sub    $0x8,%esp
c01034b0:	8b 55 08             	mov    0x8(%ebp),%edx
c01034b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01034b6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c01034ba:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c01034bd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01034c1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c01034c5:	ee                   	out    %al,(%dx)
}
c01034c6:	c9                   	leave  
c01034c7:	c3                   	ret    

c01034c8 <sound_on>:
	along with Universe Kernel.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <io.h>

void sound_on() {
c01034c8:	55                   	push   %ebp
c01034c9:	89 e5                	mov    %esp,%ebp
c01034cb:	83 ec 08             	sub    $0x8,%esp
	outb(0x61, inb(0x61) | 3);
c01034ce:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c01034d5:	e8 a6 ff ff ff       	call   c0103480 <inb>
c01034da:	83 c8 03             	or     $0x3,%eax
c01034dd:	0f b6 c0             	movzbl %al,%eax
c01034e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01034e4:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c01034eb:	e8 ba ff ff ff       	call   c01034aa <outb>
}
c01034f0:	c9                   	leave  
c01034f1:	c3                   	ret    

c01034f2 <sound_off>:

void sound_off() {
c01034f2:	55                   	push   %ebp
c01034f3:	89 e5                	mov    %esp,%ebp
c01034f5:	83 ec 08             	sub    $0x8,%esp
	outb(0x61, inb(0x61) & ~3);
c01034f8:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c01034ff:	e8 7c ff ff ff       	call   c0103480 <inb>
c0103504:	0f b6 c0             	movzbl %al,%eax
c0103507:	25 fc 00 00 00       	and    $0xfc,%eax
c010350c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103510:	c7 04 24 61 00 00 00 	movl   $0x61,(%esp)
c0103517:	e8 8e ff ff ff       	call   c01034aa <outb>
}
c010351c:	c9                   	leave  
c010351d:	c3                   	ret    

c010351e <sound>:

void sound(uint32_t frequency, uint32_t time) {
c010351e:	55                   	push   %ebp
c010351f:	89 e5                	mov    %esp,%ebp
c0103521:	83 ec 18             	sub    $0x18,%esp
	int i;
	uint16_t tmp;
	tmp = 1193180 / frequency;
c0103524:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
c0103529:	ba 00 00 00 00       	mov    $0x0,%edx
c010352e:	f7 75 08             	divl   0x8(%ebp)
c0103531:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	outb(0x43, 0xB6);
c0103535:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c010353c:	00 
c010353d:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
c0103544:	e8 61 ff ff ff       	call   c01034aa <outb>
	outb(0x42, tmp & 0xFF);
c0103549:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010354d:	0f b6 c0             	movzbl %al,%eax
c0103550:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103554:	c7 04 24 42 00 00 00 	movl   $0x42,(%esp)
c010355b:	e8 4a ff ff ff       	call   c01034aa <outb>
	outb(0x42, tmp >> 8);
c0103560:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0103564:	66 c1 e8 08          	shr    $0x8,%ax
c0103568:	0f b6 c0             	movzbl %al,%eax
c010356b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010356f:	c7 04 24 42 00 00 00 	movl   $0x42,(%esp)
c0103576:	e8 2f ff ff ff       	call   c01034aa <outb>
	sound_on();
c010357b:	e8 48 ff ff ff       	call   c01034c8 <sound_on>
	for (i = 0; i < time * 10000; i++);
c0103580:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0103587:	eb 04                	jmp    c010358d <sound+0x6f>
c0103589:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010358d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103590:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103593:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
c0103599:	39 c2                	cmp    %eax,%edx
c010359b:	72 ec                	jb     c0103589 <sound+0x6b>
	sound_off();
c010359d:	e8 50 ff ff ff       	call   c01034f2 <sound_off>
}
c01035a2:	c9                   	leave  
c01035a3:	c3                   	ret    

c01035a4 <inb>:
*/

#include <stdint.h>


static inline uint8_t inb(uint16_t port) {
c01035a4:	55                   	push   %ebp
c01035a5:	89 e5                	mov    %esp,%ebp
c01035a7:	53                   	push   %ebx
c01035a8:	83 ec 14             	sub    $0x14,%esp
c01035ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01035ae:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	uint8_t result;
	asm volatile("inb %1, %0" : "=a" (result) : "Nd" (port));
c01035b2:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01035b6:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01035ba:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01035be:	ec                   	in     (%dx),%al
c01035bf:	89 c3                	mov    %eax,%ebx
c01035c1:	88 5d fb             	mov    %bl,-0x5(%ebp)
	return result;
c01035c4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
c01035c8:	83 c4 14             	add    $0x14,%esp
c01035cb:	5b                   	pop    %ebx
c01035cc:	5d                   	pop    %ebp
c01035cd:	c3                   	ret    

c01035ce <outb>:
	uint32_t result;
	asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
	return result;
}

static inline void outb(uint16_t port, uint8_t value) {
c01035ce:	55                   	push   %ebp
c01035cf:	89 e5                	mov    %esp,%ebp
c01035d1:	83 ec 08             	sub    $0x8,%esp
c01035d4:	8b 55 08             	mov    0x8(%ebp),%edx
c01035d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01035da:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c01035de:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c01035e1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01035e5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c01035e9:	ee                   	out    %al,(%dx)
}
c01035ea:	c9                   	leave  
c01035eb:	c3                   	ret    

c01035ec <send_kbc_command>:
 * @param port Port for the Command
 * @param command Command for the KBC
 *
 * @return void
 */
void send_kbc_command(uint8_t port, uint8_t command) {
c01035ec:	55                   	push   %ebp
c01035ed:	89 e5                	mov    %esp,%ebp
c01035ef:	83 ec 10             	sub    $0x10,%esp
c01035f2:	8b 55 08             	mov    0x8(%ebp),%edx
c01035f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01035f8:	88 55 fc             	mov    %dl,-0x4(%ebp)
c01035fb:	88 45 f8             	mov    %al,-0x8(%ebp)
  	while (inb(0x64) & 0x2);//Warten bis Eigabepuffer leer ist
c01035fe:	90                   	nop
c01035ff:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
c0103606:	e8 99 ff ff ff       	call   c01035a4 <inb>
c010360b:	0f b6 c0             	movzbl %al,%eax
c010360e:	83 e0 02             	and    $0x2,%eax
c0103611:	85 c0                	test   %eax,%eax
c0103613:	75 ea                	jne    c01035ff <send_kbc_command+0x13>
  	outb(port, command);//KBC-Befehl senden
c0103615:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
c0103619:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010361d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103621:	89 04 24             	mov    %eax,(%esp)
c0103624:	e8 a5 ff ff ff       	call   c01035ce <outb>
  	while (inb(0x60) != 0xFA);
c0103629:	90                   	nop
c010362a:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
c0103631:	e8 6e ff ff ff       	call   c01035a4 <inb>
c0103636:	3c fa                	cmp    $0xfa,%al
c0103638:	75 f0                	jne    c010362a <send_kbc_command+0x3e>
}
c010363a:	c9                   	leave  
c010363b:	c3                   	ret    

c010363c <send_kbd_command>:
 *
 * @param command Command for the Keyboard
 *
 * @return void
 */
inline void send_kbd_command(uint8_t command) {
c010363c:	55                   	push   %ebp
c010363d:	89 e5                	mov    %esp,%ebp
c010363f:	83 ec 0c             	sub    $0xc,%esp
c0103642:	8b 45 08             	mov    0x8(%ebp),%eax
c0103645:	88 45 fc             	mov    %al,-0x4(%ebp)
	send_kbc_command(0x60, command);
c0103648:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
c010364c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103650:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
c0103657:	e8 90 ff ff ff       	call   c01035ec <send_kbc_command>
}
c010365c:	c9                   	leave  
c010365d:	c3                   	ret    

c010365e <INIT_KEYBOARD>:
 * Initalize the Keyboard
 *
 * @param void
 * @return void
 */
void INIT_KEYBOARD(void) {
c010365e:	55                   	push   %ebp
c010365f:	89 e5                	mov    %esp,%ebp
c0103661:	83 ec 18             	sub    $0x18,%esp
	install_irq(0x1, &kbd_irq_handler);
c0103664:	c7 44 24 04 c1 36 10 	movl   $0xc01036c1,0x4(%esp)
c010366b:	c0 
c010366c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103673:	e8 6e 23 00 00       	call   c01059e6 <install_irq>

  	while (!(inb(0x64) & 0x4));
c0103678:	90                   	nop
c0103679:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
c0103680:	e8 1f ff ff ff       	call   c01035a4 <inb>
c0103685:	0f b6 c0             	movzbl %al,%eax
c0103688:	83 e0 04             	and    $0x4,%eax
c010368b:	85 c0                	test   %eax,%eax
c010368d:	74 ea                	je     c0103679 <INIT_KEYBOARD+0x1b>
  	// Puffer leeren
  	while (inb(0x64) & 0x1) {
c010368f:	eb 0c                	jmp    c010369d <INIT_KEYBOARD+0x3f>
  		inb(0x60);
c0103691:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
c0103698:	e8 07 ff ff ff       	call   c01035a4 <inb>
void INIT_KEYBOARD(void) {
	install_irq(0x1, &kbd_irq_handler);

  	while (!(inb(0x64) & 0x4));
  	// Puffer leeren
  	while (inb(0x64) & 0x1) {
c010369d:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
c01036a4:	e8 fb fe ff ff       	call   c01035a4 <inb>
c01036a9:	0f b6 c0             	movzbl %al,%eax
c01036ac:	83 e0 01             	and    $0x1,%eax
c01036af:	84 c0                	test   %al,%al
c01036b1:	75 de                	jne    c0103691 <INIT_KEYBOARD+0x33>
  		inb(0x60);
  	}

  	send_kbd_command(0xF4);// Tastatur aktivieren
c01036b3:	c7 04 24 f4 00 00 00 	movl   $0xf4,(%esp)
c01036ba:	e8 7d ff ff ff       	call   c010363c <send_kbd_command>
}
c01036bf:	c9                   	leave  
c01036c0:	c3                   	ret    

c01036c1 <kbd_irq_handler>:
 * IRQ handler for the Keyboard
 *
 * @param void
 * @return void
 */
void kbd_irq_handler(void) {
c01036c1:	55                   	push   %ebp
c01036c2:	89 e5                	mov    %esp,%ebp
c01036c4:	83 ec 28             	sub    $0x28,%esp
	uint8_t input = 0, ASCII = 0;
c01036c7:	c6 45 f6 00          	movb   $0x0,-0xa(%ebp)
c01036cb:	c6 45 f7 00          	movb   $0x0,-0x9(%ebp)
	while (inb(0x64)&1) {
c01036cf:	e9 f6 00 00 00       	jmp    c01037ca <kbd_irq_handler+0x109>
		input = inb(0x60);
c01036d4:	c7 04 24 60 00 00 00 	movl   $0x60,(%esp)
c01036db:	e8 c4 fe ff ff       	call   c01035a4 <inb>
c01036e0:	88 45 f6             	mov    %al,-0xa(%ebp)

		if (input==0xC5) { //pressed numlock
c01036e3:	80 7d f6 c5          	cmpb   $0xc5,-0xa(%ebp)
c01036e7:	75 17                	jne    c0103700 <kbd_irq_handler+0x3f>
			numlock = !numlock;
c01036e9:	a1 24 e0 10 c0       	mov    0xc010e024,%eax
c01036ee:	85 c0                	test   %eax,%eax
c01036f0:	0f 94 c0             	sete   %al
c01036f3:	0f b6 c0             	movzbl %al,%eax
c01036f6:	a3 24 e0 10 c0       	mov    %eax,0xc010e024
			continue;
c01036fb:	e9 ca 00 00 00       	jmp    c01037ca <kbd_irq_handler+0x109>
		}

		if (input==0x3A) { //pressed capslock
c0103700:	80 7d f6 3a          	cmpb   $0x3a,-0xa(%ebp)
c0103704:	75 17                	jne    c010371d <kbd_irq_handler+0x5c>
			caps = !caps;
c0103706:	a1 28 e0 10 c0       	mov    0xc010e028,%eax
c010370b:	85 c0                	test   %eax,%eax
c010370d:	0f 94 c0             	sete   %al
c0103710:	0f b6 c0             	movzbl %al,%eax
c0103713:	a3 28 e0 10 c0       	mov    %eax,0xc010e028
			continue;
c0103718:	e9 ad 00 00 00       	jmp    c01037ca <kbd_irq_handler+0x109>
		}


		if ((input & 0x80) == 0x80) { //release Key
c010371d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0103721:	84 c0                	test   %al,%al
c0103723:	79 23                	jns    c0103748 <kbd_irq_handler+0x87>
		    input &= 0x7F;
c0103725:	80 65 f6 7f          	andb   $0x7f,-0xa(%ebp)

		    if (input == 0x2A || input == 0x36) { //released shift key
c0103729:	80 7d f6 2a          	cmpb   $0x2a,-0xa(%ebp)
c010372d:	74 0a                	je     c0103739 <kbd_irq_handler+0x78>
c010372f:	80 7d f6 36          	cmpb   $0x36,-0xa(%ebp)
c0103733:	0f 85 90 00 00 00    	jne    c01037c9 <kbd_irq_handler+0x108>
		        shift = false;
c0103739:	c7 05 20 e0 10 c0 00 	movl   $0x0,0xc010e020
c0103740:	00 00 00 
		    }
			continue;
c0103743:	e9 81 00 00 00       	jmp    c01037c9 <kbd_irq_handler+0x108>
		}

		if (input == 0x2A || input == 0x36) { //pressed shift
c0103748:	80 7d f6 2a          	cmpb   $0x2a,-0xa(%ebp)
c010374c:	74 06                	je     c0103754 <kbd_irq_handler+0x93>
c010374e:	80 7d f6 36          	cmpb   $0x36,-0xa(%ebp)
c0103752:	75 0c                	jne    c0103760 <kbd_irq_handler+0x9f>
			shift = true;
c0103754:	c7 05 20 e0 10 c0 01 	movl   $0x1,0xc010e020
c010375b:	00 00 00 
			continue;
c010375e:	eb 6a                	jmp    c01037ca <kbd_irq_handler+0x109>
		}

		if (input > 0x46 && input < 0x55 && input != 0x4A && input != 0x4C && input != 0x4E && numlock) { //Numblock Key
c0103760:	80 7d f6 46          	cmpb   $0x46,-0xa(%ebp)
c0103764:	76 31                	jbe    c0103797 <kbd_irq_handler+0xd6>
c0103766:	80 7d f6 54          	cmpb   $0x54,-0xa(%ebp)
c010376a:	77 2b                	ja     c0103797 <kbd_irq_handler+0xd6>
c010376c:	80 7d f6 4a          	cmpb   $0x4a,-0xa(%ebp)
c0103770:	74 25                	je     c0103797 <kbd_irq_handler+0xd6>
c0103772:	80 7d f6 4c          	cmpb   $0x4c,-0xa(%ebp)
c0103776:	74 1f                	je     c0103797 <kbd_irq_handler+0xd6>
c0103778:	80 7d f6 4e          	cmpb   $0x4e,-0xa(%ebp)
c010377c:	74 19                	je     c0103797 <kbd_irq_handler+0xd6>
c010377e:	a1 24 e0 10 c0       	mov    0xc010e024,%eax
c0103783:	85 c0                	test   %eax,%eax
c0103785:	74 10                	je     c0103797 <kbd_irq_handler+0xd6>
			ASCII = asciishift[input];
c0103787:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c010378b:	0f b6 80 20 c1 10 c0 	movzbl -0x3fef3ee0(%eax),%eax
c0103792:	88 45 f7             	mov    %al,-0x9(%ebp)
c0103795:	eb 33                	jmp    c01037ca <kbd_irq_handler+0x109>
		}

		else if (shift || caps) { //Common Key
c0103797:	a1 20 e0 10 c0       	mov    0xc010e020,%eax
c010379c:	85 c0                	test   %eax,%eax
c010379e:	75 09                	jne    c01037a9 <kbd_irq_handler+0xe8>
c01037a0:	a1 28 e0 10 c0       	mov    0xc010e028,%eax
c01037a5:	85 c0                	test   %eax,%eax
c01037a7:	74 10                	je     c01037b9 <kbd_irq_handler+0xf8>
			ASCII = asciishift[input];
c01037a9:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c01037ad:	0f b6 80 20 c1 10 c0 	movzbl -0x3fef3ee0(%eax),%eax
c01037b4:	88 45 f7             	mov    %al,-0x9(%ebp)
c01037b7:	eb 11                	jmp    c01037ca <kbd_irq_handler+0x109>
		} else {
			ASCII = asciinormal[input];
c01037b9:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c01037bd:	0f b6 80 c0 c0 10 c0 	movzbl -0x3fef3f40(%eax),%eax
c01037c4:	88 45 f7             	mov    %al,-0x9(%ebp)
c01037c7:	eb 01                	jmp    c01037ca <kbd_irq_handler+0x109>
		    input &= 0x7F;

		    if (input == 0x2A || input == 0x36) { //released shift key
		        shift = false;
		    }
			continue;
c01037c9:	90                   	nop
 * @param void
 * @return void
 */
void kbd_irq_handler(void) {
	uint8_t input = 0, ASCII = 0;
	while (inb(0x64)&1) {
c01037ca:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
c01037d1:	e8 ce fd ff ff       	call   c01035a4 <inb>
c01037d6:	0f b6 c0             	movzbl %al,%eax
c01037d9:	83 e0 01             	and    $0x1,%eax
c01037dc:	84 c0                	test   %al,%al
c01037de:	0f 85 f0 fe ff ff    	jne    c01036d4 <kbd_irq_handler+0x13>
		} else {
			ASCII = asciinormal[input];
		}

	}
	printf("x");
c01037e4:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c01037eb:	e8 a0 f8 ff ff       	call   c0103090 <putchar>
	if (ASCII) {
c01037f0:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01037f4:	74 60                	je     c0103856 <kbd_irq_handler+0x195>
		*tail = ASCII;
c01037f6:	a1 80 c1 10 c0       	mov    0xc010c180,%eax
c01037fb:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c01037ff:	88 10                	mov    %dl,(%eax)
		tail++;
c0103801:	a1 80 c1 10 c0       	mov    0xc010c180,%eax
c0103806:	83 c0 01             	add    $0x1,%eax
c0103809:	a3 80 c1 10 c0       	mov    %eax,0xc010c180
		if (tail == keybuffer + 512) {
c010380e:	a1 80 c1 10 c0       	mov    0xc010c180,%eax
c0103813:	3d 20 02 11 c0       	cmp    $0xc0110220,%eax
c0103818:	75 0a                	jne    c0103824 <kbd_irq_handler+0x163>
			tail = keybuffer;
c010381a:	c7 05 80 c1 10 c0 20 	movl   $0xc0110020,0xc010c180
c0103821:	00 11 c0 
		}
		if (head == keybuffer + 512) {
c0103824:	a1 7c c1 10 c0       	mov    0xc010c17c,%eax
c0103829:	3d 20 02 11 c0       	cmp    $0xc0110220,%eax
c010382e:	75 0a                	jne    c010383a <kbd_irq_handler+0x179>
			head = keybuffer;
c0103830:	c7 05 7c c1 10 c0 20 	movl   $0xc0110020,0xc010c17c
c0103837:	00 11 c0 
		}
		if (tail == head) {
c010383a:	8b 15 80 c1 10 c0    	mov    0xc010c180,%edx
c0103840:	a1 7c c1 10 c0       	mov    0xc010c17c,%eax
c0103845:	39 c2                	cmp    %eax,%edx
c0103847:	75 0d                	jne    c0103856 <kbd_irq_handler+0x195>
			head++;
c0103849:	a1 7c c1 10 c0       	mov    0xc010c17c,%eax
c010384e:	83 c0 01             	add    $0x1,%eax
c0103851:	a3 7c c1 10 c0       	mov    %eax,0xc010c17c
		}
	}

}
c0103856:	c9                   	leave  
c0103857:	c3                   	ret    

c0103858 <input>:
 * get chars from the Keyboard buffer
 *
 * @param void
 * @return character
 **/
uint8_t input(void) {
c0103858:	55                   	push   %ebp
c0103859:	89 e5                	mov    %esp,%ebp
	if (head == keybuffer+512) {
c010385b:	a1 7c c1 10 c0       	mov    0xc010c17c,%eax
c0103860:	3d 20 02 11 c0       	cmp    $0xc0110220,%eax
c0103865:	75 0a                	jne    c0103871 <input+0x19>
		head = keybuffer;
c0103867:	c7 05 7c c1 10 c0 20 	movl   $0xc0110020,0xc010c17c
c010386e:	00 11 c0 
	}
	while (head == tail) {}
c0103871:	90                   	nop
c0103872:	8b 15 7c c1 10 c0    	mov    0xc010c17c,%edx
c0103878:	a1 80 c1 10 c0       	mov    0xc010c180,%eax
c010387d:	39 c2                	cmp    %eax,%edx
c010387f:	74 f1                	je     c0103872 <input+0x1a>
	return *(head++);
c0103881:	a1 7c c1 10 c0       	mov    0xc010c17c,%eax
c0103886:	0f b6 10             	movzbl (%eax),%edx
c0103889:	83 c0 01             	add    $0x1,%eax
c010388c:	a3 7c c1 10 c0       	mov    %eax,0xc010c17c
c0103891:	89 d0                	mov    %edx,%eax
}
c0103893:	5d                   	pop    %ebp
c0103894:	c3                   	ret    

c0103895 <seek_head>:
 * set head to tail
 *
 * @param void
 * @return void
 **/
void seek_head(void) {
c0103895:	55                   	push   %ebp
c0103896:	89 e5                	mov    %esp,%ebp
	head = tail;
c0103898:	a1 80 c1 10 c0       	mov    0xc010c180,%eax
c010389d:	a3 7c c1 10 c0       	mov    %eax,0xc010c17c
}
c01038a2:	5d                   	pop    %ebp
c01038a3:	c3                   	ret    

c01038a4 <inl>:
	uint16_t result;
	asm volatile("inw %1, %0" : "=a" (result) : "Nd" (port));
	return result;
}

static inline uint32_t inl(uint16_t port) {
c01038a4:	55                   	push   %ebp
c01038a5:	89 e5                	mov    %esp,%ebp
c01038a7:	53                   	push   %ebx
c01038a8:	83 ec 14             	sub    $0x14,%esp
c01038ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01038ae:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	uint32_t result;
	asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
c01038b2:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01038b6:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01038ba:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01038be:	ed                   	in     (%dx),%eax
c01038bf:	89 c3                	mov    %eax,%ebx
c01038c1:	89 5d f8             	mov    %ebx,-0x8(%ebp)
	return result;
c01038c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c01038c7:	83 c4 14             	add    $0x14,%esp
c01038ca:	5b                   	pop    %ebx
c01038cb:	5d                   	pop    %ebp
c01038cc:	c3                   	ret    

c01038cd <outb>:

static inline void outb(uint16_t port, uint8_t value) {
c01038cd:	55                   	push   %ebp
c01038ce:	89 e5                	mov    %esp,%ebp
c01038d0:	83 ec 08             	sub    $0x8,%esp
c01038d3:	8b 55 08             	mov    0x8(%ebp),%edx
c01038d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038d9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c01038dd:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c01038e0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01038e4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c01038e8:	ee                   	out    %al,(%dx)
}
c01038e9:	c9                   	leave  
c01038ea:	c3                   	ret    

c01038eb <outw>:

static inline void outw(uint16_t port, uint16_t value) {
c01038eb:	55                   	push   %ebp
c01038ec:	89 e5                	mov    %esp,%ebp
c01038ee:	83 ec 08             	sub    $0x8,%esp
c01038f1:	8b 55 08             	mov    0x8(%ebp),%edx
c01038f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038f7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c01038fb:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	asm volatile("outw %1, %0" : : "Nd" (port), "a" (value));
c01038ff:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0103903:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0103907:	66 ef                	out    %ax,(%dx)
}
c0103909:	c9                   	leave  
c010390a:	c3                   	ret    

c010390b <outl>:

static inline void outl(uint16_t port, uint32_t value) {
c010390b:	55                   	push   %ebp
c010390c:	89 e5                	mov    %esp,%ebp
c010390e:	83 ec 04             	sub    $0x4,%esp
c0103911:	8b 45 08             	mov    0x8(%ebp),%eax
c0103914:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	asm volatile("outl %1, %0" : : "Nd" (port), "a" (value));
c0103918:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010391c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010391f:	ef                   	out    %eax,(%dx)
}
c0103920:	c9                   	leave  
c0103921:	c3                   	ret    

c0103922 <pci_read>:
#include <printf.h>
#include <heap.h>
#include <idt.h>

uint32_t pci_read(uint8_t bus,uint8_t dev,uint8_t func,uint8_t offset)
{
c0103922:	55                   	push   %ebp
c0103923:	89 e5                	mov    %esp,%ebp
c0103925:	53                   	push   %ebx
c0103926:	83 ec 18             	sub    $0x18,%esp
c0103929:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010392c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010392f:	8b 55 10             	mov    0x10(%ebp),%edx
c0103932:	8b 45 14             	mov    0x14(%ebp),%eax
c0103935:	88 5d f8             	mov    %bl,-0x8(%ebp)
c0103938:	88 4d f4             	mov    %cl,-0xc(%ebp)
c010393b:	88 55 f0             	mov    %dl,-0x10(%ebp)
c010393e:	88 45 ec             	mov    %al,-0x14(%ebp)
    outl(PCI_CONFIG_ADDRESS,0x80000000 | (bus << 16) | (dev << 11) |( func << 8) | (offset & 0xFC));
c0103941:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0103945:	c1 e0 10             	shl    $0x10,%eax
c0103948:	89 c2                	mov    %eax,%edx
c010394a:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c010394e:	c1 e0 0b             	shl    $0xb,%eax
c0103951:	09 c2                	or     %eax,%edx
c0103953:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0103957:	c1 e0 08             	shl    $0x8,%eax
c010395a:	09 c2                	or     %eax,%edx
c010395c:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0103960:	25 fc 00 00 00       	and    $0xfc,%eax
c0103965:	09 d0                	or     %edx,%eax
c0103967:	0d 00 00 00 80       	or     $0x80000000,%eax
c010396c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103970:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c0103977:	e8 8f ff ff ff       	call   c010390b <outl>
    return inl(PCI_CONFIG_DATA) >> (8 * (offset % 4));
c010397c:	c7 04 24 fc 0c 00 00 	movl   $0xcfc,(%esp)
c0103983:	e8 1c ff ff ff       	call   c01038a4 <inl>
c0103988:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
c010398c:	83 e2 03             	and    $0x3,%edx
c010398f:	c1 e2 03             	shl    $0x3,%edx
c0103992:	89 d1                	mov    %edx,%ecx
c0103994:	d3 e8                	shr    %cl,%eax
}
c0103996:	83 c4 18             	add    $0x18,%esp
c0103999:	5b                   	pop    %ebx
c010399a:	5d                   	pop    %ebp
c010399b:	c3                   	ret    

c010399c <pci_readb>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
uint8_t pci_readb(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c010399c:	55                   	push   %ebp
c010399d:	89 e5                	mov    %esp,%ebp
c010399f:	53                   	push   %ebx
c01039a0:	83 ec 20             	sub    $0x20,%esp
c01039a3:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01039a6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01039a9:	8b 55 10             	mov    0x10(%ebp),%edx
c01039ac:	8b 45 14             	mov    0x14(%ebp),%eax
c01039af:	88 5d f8             	mov    %bl,-0x8(%ebp)
c01039b2:	88 4d f4             	mov    %cl,-0xc(%ebp)
c01039b5:	88 55 f0             	mov    %dl,-0x10(%ebp)
c01039b8:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset) & 0xff;
c01039bb:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c01039bf:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c01039c3:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c01039c7:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c01039cb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01039cf:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01039d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01039d7:	89 04 24             	mov    %eax,(%esp)
c01039da:	e8 43 ff ff ff       	call   c0103922 <pci_read>
}
c01039df:	83 c4 20             	add    $0x20,%esp
c01039e2:	5b                   	pop    %ebx
c01039e3:	5d                   	pop    %ebp
c01039e4:	c3                   	ret    

c01039e5 <pci_readw>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
inline uint16_t pci_readw(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c01039e5:	55                   	push   %ebp
c01039e6:	89 e5                	mov    %esp,%ebp
c01039e8:	53                   	push   %ebx
c01039e9:	83 ec 20             	sub    $0x20,%esp
c01039ec:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01039ef:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01039f2:	8b 55 10             	mov    0x10(%ebp),%edx
c01039f5:	8b 45 14             	mov    0x14(%ebp),%eax
c01039f8:	88 5d f8             	mov    %bl,-0x8(%ebp)
c01039fb:	88 4d f4             	mov    %cl,-0xc(%ebp)
c01039fe:	88 55 f0             	mov    %dl,-0x10(%ebp)
c0103a01:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset) & 0xffff;
c0103a04:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c0103a08:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c0103a0c:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c0103a10:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0103a14:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0103a18:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103a1c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103a20:	89 04 24             	mov    %eax,(%esp)
c0103a23:	e8 fa fe ff ff       	call   c0103922 <pci_read>
}
c0103a28:	83 c4 20             	add    $0x20,%esp
c0103a2b:	5b                   	pop    %ebx
c0103a2c:	5d                   	pop    %ebp
c0103a2d:	c3                   	ret    

c0103a2e <pci_readl>:
 * @param function
 * @param Offset
 * @return value from the input adress
 */
inline uint32_t pci_readl(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset)
{
c0103a2e:	55                   	push   %ebp
c0103a2f:	89 e5                	mov    %esp,%ebp
c0103a31:	53                   	push   %ebx
c0103a32:	83 ec 20             	sub    $0x20,%esp
c0103a35:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0103a38:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0103a3b:	8b 55 10             	mov    0x10(%ebp),%edx
c0103a3e:	8b 45 14             	mov    0x14(%ebp),%eax
c0103a41:	88 5d f8             	mov    %bl,-0x8(%ebp)
c0103a44:	88 4d f4             	mov    %cl,-0xc(%ebp)
c0103a47:	88 55 f0             	mov    %dl,-0x10(%ebp)
c0103a4a:	88 45 ec             	mov    %al,-0x14(%ebp)
    return pci_read(bus, dev, func, offset);
c0103a4d:	0f b6 5d ec          	movzbl -0x14(%ebp),%ebx
c0103a51:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c0103a55:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c0103a59:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0103a5d:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0103a61:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103a65:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103a69:	89 04 24             	mov    %eax,(%esp)
c0103a6c:	e8 b1 fe ff ff       	call   c0103922 <pci_read>
}
c0103a71:	83 c4 20             	add    $0x20,%esp
c0103a74:	5b                   	pop    %ebx
c0103a75:	5d                   	pop    %ebp
c0103a76:	c3                   	ret    

c0103a77 <pci_writeb>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writeb(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint8_t value)
{
c0103a77:	55                   	push   %ebp
c0103a78:	89 e5                	mov    %esp,%ebp
c0103a7a:	56                   	push   %esi
c0103a7b:	53                   	push   %ebx
c0103a7c:	83 ec 20             	sub    $0x20,%esp
c0103a7f:	8b 75 08             	mov    0x8(%ebp),%esi
c0103a82:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0103a85:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0103a88:	8b 55 14             	mov    0x14(%ebp),%edx
c0103a8b:	8b 45 18             	mov    0x18(%ebp),%eax
c0103a8e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103a91:	89 f0                	mov    %esi,%eax
c0103a93:	88 45 f4             	mov    %al,-0xc(%ebp)
c0103a96:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0103a99:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0103a9c:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0103a9f:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0103aa3:	88 45 e4             	mov    %al,-0x1c(%ebp)
    outl(PCI_CONFIG_ADDRESS,0x80000000 | (bus << 16) | (dev << 11 ) | (func << 8) | (offset & 0xFC));
c0103aa6:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0103aaa:	c1 e0 10             	shl    $0x10,%eax
c0103aad:	89 c2                	mov    %eax,%edx
c0103aaf:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0103ab3:	c1 e0 0b             	shl    $0xb,%eax
c0103ab6:	09 c2                	or     %eax,%edx
c0103ab8:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0103abc:	c1 e0 08             	shl    $0x8,%eax
c0103abf:	09 c2                	or     %eax,%edx
c0103ac1:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0103ac5:	25 fc 00 00 00       	and    $0xfc,%eax
c0103aca:	09 d0                	or     %edx,%eax
c0103acc:	0d 00 00 00 80       	or     $0x80000000,%eax
c0103ad1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103ad5:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c0103adc:	e8 2a fe ff ff       	call   c010390b <outl>
    outb(PCI_CONFIG_DATA + (offset & 3), value);
c0103ae1:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0103ae5:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0103ae9:	83 e0 03             	and    $0x3,%eax
c0103aec:	66 05 fc 0c          	add    $0xcfc,%ax
c0103af0:	0f b7 c0             	movzwl %ax,%eax
c0103af3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103af7:	89 04 24             	mov    %eax,(%esp)
c0103afa:	e8 ce fd ff ff       	call   c01038cd <outb>
}
c0103aff:	83 c4 20             	add    $0x20,%esp
c0103b02:	5b                   	pop    %ebx
c0103b03:	5e                   	pop    %esi
c0103b04:	5d                   	pop    %ebp
c0103b05:	c3                   	ret    

c0103b06 <pci_writew>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writew(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint16_t value)
{
c0103b06:	55                   	push   %ebp
c0103b07:	89 e5                	mov    %esp,%ebp
c0103b09:	56                   	push   %esi
c0103b0a:	53                   	push   %ebx
c0103b0b:	83 ec 20             	sub    $0x20,%esp
c0103b0e:	8b 75 08             	mov    0x8(%ebp),%esi
c0103b11:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0103b14:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0103b17:	8b 55 14             	mov    0x14(%ebp),%edx
c0103b1a:	8b 45 18             	mov    0x18(%ebp),%eax
c0103b1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103b20:	89 f0                	mov    %esi,%eax
c0103b22:	88 45 f4             	mov    %al,-0xc(%ebp)
c0103b25:	88 5d f0             	mov    %bl,-0x10(%ebp)
c0103b28:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0103b2b:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0103b2e:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0103b32:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    outl(PCI_CONFIG_ADDRESS, 0x80000000 | (bus << 16) | (dev << 11) | (func << 8) | (offset & 0xFC));
c0103b36:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0103b3a:	c1 e0 10             	shl    $0x10,%eax
c0103b3d:	89 c2                	mov    %eax,%edx
c0103b3f:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0103b43:	c1 e0 0b             	shl    $0xb,%eax
c0103b46:	09 c2                	or     %eax,%edx
c0103b48:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0103b4c:	c1 e0 08             	shl    $0x8,%eax
c0103b4f:	09 c2                	or     %eax,%edx
c0103b51:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0103b55:	25 fc 00 00 00       	and    $0xfc,%eax
c0103b5a:	09 d0                	or     %edx,%eax
c0103b5c:	0d 00 00 00 80       	or     $0x80000000,%eax
c0103b61:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103b65:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c0103b6c:	e8 9a fd ff ff       	call   c010390b <outl>
    outw(PCI_CONFIG_DATA + (offset & 2), value);
c0103b71:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c0103b75:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0103b79:	83 e0 02             	and    $0x2,%eax
c0103b7c:	66 05 fc 0c          	add    $0xcfc,%ax
c0103b80:	0f b7 c0             	movzwl %ax,%eax
c0103b83:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103b87:	89 04 24             	mov    %eax,(%esp)
c0103b8a:	e8 5c fd ff ff       	call   c01038eb <outw>
}
c0103b8f:	83 c4 20             	add    $0x20,%esp
c0103b92:	5b                   	pop    %ebx
c0103b93:	5e                   	pop    %esi
c0103b94:	5d                   	pop    %ebp
c0103b95:	c3                   	ret    

c0103b96 <pci_writel>:
 * @param function
 * @param Offset
 * @param Value
 */
inline void pci_writel(uint8_t bus, uint8_t dev, uint8_t func, uint8_t offset, uint32_t value)
{
c0103b96:	55                   	push   %ebp
c0103b97:	89 e5                	mov    %esp,%ebp
c0103b99:	53                   	push   %ebx
c0103b9a:	83 ec 18             	sub    $0x18,%esp
c0103b9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
c0103ba0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0103ba3:	8b 55 10             	mov    0x10(%ebp),%edx
c0103ba6:	8b 45 14             	mov    0x14(%ebp),%eax
c0103ba9:	88 5d f8             	mov    %bl,-0x8(%ebp)
c0103bac:	88 4d f4             	mov    %cl,-0xc(%ebp)
c0103baf:	88 55 f0             	mov    %dl,-0x10(%ebp)
c0103bb2:	88 45 ec             	mov    %al,-0x14(%ebp)
    outl(PCI_CONFIG_ADDRESS, 0x80000000 | (bus << 16) | (dev << 11) | (func << 8) | (offset & 0xFC));
c0103bb5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0103bb9:	c1 e0 10             	shl    $0x10,%eax
c0103bbc:	89 c2                	mov    %eax,%edx
c0103bbe:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
c0103bc2:	c1 e0 0b             	shl    $0xb,%eax
c0103bc5:	09 c2                	or     %eax,%edx
c0103bc7:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0103bcb:	c1 e0 08             	shl    $0x8,%eax
c0103bce:	09 c2                	or     %eax,%edx
c0103bd0:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0103bd4:	25 fc 00 00 00       	and    $0xfc,%eax
c0103bd9:	09 d0                	or     %edx,%eax
c0103bdb:	0d 00 00 00 80       	or     $0x80000000,%eax
c0103be0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103be4:	c7 04 24 f8 0c 00 00 	movl   $0xcf8,(%esp)
c0103beb:	e8 1b fd ff ff       	call   c010390b <outl>
    outl(PCI_CONFIG_DATA, value);
c0103bf0:	8b 45 18             	mov    0x18(%ebp),%eax
c0103bf3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0103bf7:	c7 04 24 fc 0c 00 00 	movl   $0xcfc,(%esp)
c0103bfe:	e8 08 fd ff ff       	call   c010390b <outl>
}
c0103c03:	83 c4 18             	add    $0x18,%esp
c0103c06:	5b                   	pop    %ebx
c0103c07:	5d                   	pop    %ebp
c0103c08:	c3                   	ret    

c0103c09 <pci_dev_exist>:
 *  @param Bus
 *  @param Device/Slot
 *  @return true (device exists) or false (device does not exist)
 */
bool pci_dev_exist(uint8_t bus, uint8_t dev, uint8_t func)
{
c0103c09:	55                   	push   %ebp
c0103c0a:	89 e5                	mov    %esp,%ebp
c0103c0c:	83 ec 2c             	sub    $0x2c,%esp
c0103c0f:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0103c12:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103c15:	8b 45 10             	mov    0x10(%ebp),%eax
c0103c18:	88 4d ec             	mov    %cl,-0x14(%ebp)
c0103c1b:	88 55 e8             	mov    %dl,-0x18(%ebp)
c0103c1e:	88 45 e4             	mov    %al,-0x1c(%ebp)
    uint16_t vendor_ID = pci_readw(bus, dev, func, 0);
c0103c21:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
c0103c25:	0f b6 55 e8          	movzbl -0x18(%ebp),%edx
c0103c29:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0103c2d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0103c34:	00 
c0103c35:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103c39:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103c3d:	89 04 24             	mov    %eax,(%esp)
c0103c40:	e8 a0 fd ff ff       	call   c01039e5 <pci_readw>
c0103c45:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    if(vendor_ID == 0 || vendor_ID == 0xFFFF)
c0103c49:	66 83 7d fe 00       	cmpw   $0x0,-0x2(%ebp)
c0103c4e:	74 07                	je     c0103c57 <pci_dev_exist+0x4e>
c0103c50:	66 83 7d fe ff       	cmpw   $0xffff,-0x2(%ebp)
c0103c55:	75 07                	jne    c0103c5e <pci_dev_exist+0x55>
        return false;
c0103c57:	b8 00 00 00 00       	mov    $0x0,%eax
c0103c5c:	eb 05                	jmp    c0103c63 <pci_dev_exist+0x5a>
    return true;
c0103c5e:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103c63:	c9                   	leave  
c0103c64:	c3                   	ret    

c0103c65 <search_device>:
 * @param device devicde- ID of the device
 * @param num pointer to a counter integer
 * @return NULL if there is no more device of the specified type or the adress auf the PCI device struct
 */
struct pci_dev *search_device(list_t *device_list, uint16_t vendor, uint16_t device, int *num)
{
c0103c65:	55                   	push   %ebp
c0103c66:	89 e5                	mov    %esp,%ebp
c0103c68:	83 ec 38             	sub    $0x38,%esp
c0103c6b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103c6e:	8b 45 10             	mov    0x10(%ebp),%eax
c0103c71:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0103c75:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
    int devnum = *num;
c0103c79:	8b 45 14             	mov    0x14(%ebp),%eax
c0103c7c:	8b 00                	mov    (%eax),%eax
c0103c7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while(device_list->lock){}
c0103c81:	90                   	nop
c0103c82:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c85:	8b 40 08             	mov    0x8(%eax),%eax
c0103c88:	85 c0                	test   %eax,%eax
c0103c8a:	75 f6                	jne    c0103c82 <search_device+0x1d>
    device_list->lock = true;
c0103c8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c8f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        list_set_first(device_list);
c0103c96:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c99:	89 04 24             	mov    %eax,(%esp)
c0103c9c:	e8 2f 45 00 00       	call   c01081d0 <list_set_first>
        while(!list_is_last(device_list))
c0103ca1:	eb 73                	jmp    c0103d16 <search_device+0xb1>
        {
            struct pci_dev *current_dev = list_get_current(device_list);
c0103ca3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ca6:	89 04 24             	mov    %eax,(%esp)
c0103ca9:	e8 cf 44 00 00       	call   c010817d <list_get_current>
c0103cae:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(devnum == 0 && current_dev->device_ID == device && current_dev->vendor_ID == vendor)
c0103cb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103cb5:	75 36                	jne    c0103ced <search_device+0x88>
c0103cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cba:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0103cbe:	66 3b 45 e0          	cmp    -0x20(%ebp),%ax
c0103cc2:	75 29                	jne    c0103ced <search_device+0x88>
c0103cc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cc7:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0103ccb:	66 3b 45 e4          	cmp    -0x1c(%ebp),%ax
c0103ccf:	75 1c                	jne    c0103ced <search_device+0x88>
            {
                *num += 1;
c0103cd1:	8b 45 14             	mov    0x14(%ebp),%eax
c0103cd4:	8b 00                	mov    (%eax),%eax
c0103cd6:	8d 50 01             	lea    0x1(%eax),%edx
c0103cd9:	8b 45 14             	mov    0x14(%ebp),%eax
c0103cdc:	89 10                	mov    %edx,(%eax)
                device_list->lock = false;
c0103cde:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ce1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                return current_dev;
c0103ce8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ceb:	eb 4b                	jmp    c0103d38 <search_device+0xd3>
            }
            else if(current_dev->device_ID == device && current_dev->vendor_ID == vendor)
c0103ced:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cf0:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0103cf4:	66 3b 45 e0          	cmp    -0x20(%ebp),%ax
c0103cf8:	75 11                	jne    c0103d0b <search_device+0xa6>
c0103cfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cfd:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0103d01:	66 3b 45 e4          	cmp    -0x1c(%ebp),%ax
c0103d05:	75 04                	jne    c0103d0b <search_device+0xa6>
            {
                devnum--;
c0103d07:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
            }
            list_next(device_list);
c0103d0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d0e:	89 04 24             	mov    %eax,(%esp)
c0103d11:	e8 75 44 00 00       	call   c010818b <list_next>
{
    int devnum = *num;
    while(device_list->lock){}
    device_list->lock = true;
        list_set_first(device_list);
        while(!list_is_last(device_list))
c0103d16:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d19:	89 04 24             	mov    %eax,(%esp)
c0103d1c:	e8 97 44 00 00       	call   c01081b8 <list_is_last>
c0103d21:	85 c0                	test   %eax,%eax
c0103d23:	0f 84 7a ff ff ff    	je     c0103ca3 <search_device+0x3e>
            {
                devnum--;
            }
            list_next(device_list);
        }
    device_list->lock = false;
c0103d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d2c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    return NULL;
c0103d33:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103d38:	c9                   	leave  
c0103d39:	c3                   	ret    

c0103d3a <install_pci_isr>:
 * installs a isr handler for a specific pci device
 * @param isr interrupt service routine
 * @param dev pci device
 */
void install_pci_isr(void (*isr)(pci_base_t), struct pci_dev *dev)
{
c0103d3a:	55                   	push   %ebp
c0103d3b:	89 e5                	mov    %esp,%ebp
c0103d3d:	83 ec 28             	sub    $0x28,%esp
    while(pci_irq_handles->lock){}
c0103d40:	90                   	nop
c0103d41:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103d46:	8b 40 08             	mov    0x8(%eax),%eax
c0103d49:	85 c0                	test   %eax,%eax
c0103d4b:	75 f4                	jne    c0103d41 <install_pci_isr+0x7>
    pci_irq_handles->lock = true;
c0103d4d:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103d52:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        struct pci_isr *new_pci_isr = malloc(sizeof(struct pci_isr));
c0103d59:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0103d60:	e8 77 ed ff ff       	call   c0102adc <malloc>
c0103d65:	89 45 f4             	mov    %eax,-0xc(%ebp)
        new_pci_isr->isr = isr;
c0103d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d6b:	8b 55 08             	mov    0x8(%ebp),%edx
c0103d6e:	89 10                	mov    %edx,(%eax)
        new_pci_isr->dev = dev;
c0103d70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d73:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103d76:	89 50 04             	mov    %edx,0x4(%eax)
        list_push_front(pci_irq_handles,new_pci_isr);
c0103d79:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103d7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103d81:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103d85:	89 04 24             	mov    %eax,(%esp)
c0103d88:	e8 07 42 00 00       	call   c0107f94 <list_push_front>
    pci_irq_handles->lock = false;
c0103d8d:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103d92:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c0103d99:	c9                   	leave  
c0103d9a:	c3                   	ret    

c0103d9b <deinstall_pci_isr>:
 * deinstalls a isr handler for a specific pci device
 * @param isr interrupt service routine
 * @param dev pci device
 */
int deinstall_pci_isr(void (*isr)(pci_base_t), struct pci_dev *dev)
{
c0103d9b:	55                   	push   %ebp
c0103d9c:	89 e5                	mov    %esp,%ebp
c0103d9e:	83 ec 28             	sub    $0x28,%esp
    while(pci_irq_handles->lock){}
c0103da1:	90                   	nop
c0103da2:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103da7:	8b 40 08             	mov    0x8(%eax),%eax
c0103daa:	85 c0                	test   %eax,%eax
c0103dac:	75 f4                	jne    c0103da2 <deinstall_pci_isr+0x7>
    pci_irq_handles->lock = true;
c0103dae:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103db3:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        int num = 0;
c0103dba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        list_set_first(pci_irq_handles);
c0103dc1:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103dc6:	89 04 24             	mov    %eax,(%esp)
c0103dc9:	e8 02 44 00 00       	call   c01081d0 <list_set_first>
        while(!list_is_last(pci_irq_handles))
c0103dce:	eb 52                	jmp    c0103e22 <deinstall_pci_isr+0x87>
        {
            struct pci_isr *current_isr = list_get_current(pci_irq_handles);
c0103dd0:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103dd5:	89 04 24             	mov    %eax,(%esp)
c0103dd8:	e8 a0 43 00 00       	call   c010817d <list_get_current>
c0103ddd:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(current_isr->isr == isr && current_isr->dev == dev)
c0103de0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103de3:	8b 00                	mov    (%eax),%eax
c0103de5:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103de8:	75 2b                	jne    c0103e15 <deinstall_pci_isr+0x7a>
c0103dea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ded:	8b 40 04             	mov    0x4(%eax),%eax
c0103df0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103df3:	75 20                	jne    c0103e15 <deinstall_pci_isr+0x7a>
            {
                list_remove(pci_irq_handles);
c0103df5:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103dfa:	89 04 24             	mov    %eax,(%esp)
c0103dfd:	e8 f9 42 00 00       	call   c01080fb <list_remove>
                list_set_first(pci_irq_handles);
c0103e02:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103e07:	89 04 24             	mov    %eax,(%esp)
c0103e0a:	e8 c1 43 00 00       	call   c01081d0 <list_set_first>
                num++;
c0103e0f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103e13:	eb 0d                	jmp    c0103e22 <deinstall_pci_isr+0x87>
            }
            else
                list_next(pci_irq_handles);
c0103e15:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103e1a:	89 04 24             	mov    %eax,(%esp)
c0103e1d:	e8 69 43 00 00       	call   c010818b <list_next>
{
    while(pci_irq_handles->lock){}
    pci_irq_handles->lock = true;
        int num = 0;
        list_set_first(pci_irq_handles);
        while(!list_is_last(pci_irq_handles))
c0103e22:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103e27:	89 04 24             	mov    %eax,(%esp)
c0103e2a:	e8 89 43 00 00       	call   c01081b8 <list_is_last>
c0103e2f:	85 c0                	test   %eax,%eax
c0103e31:	74 9d                	je     c0103dd0 <deinstall_pci_isr+0x35>
                num++;
            }
            else
                list_next(pci_irq_handles);
        }
    pci_irq_handles->lock = false;
c0103e33:	a1 20 02 11 c0       	mov    0xc0110220,%eax
c0103e38:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    return num;
c0103e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103e42:	c9                   	leave  
c0103e43:	c3                   	ret    

c0103e44 <pci_irq_handler>:

/**
 * handels pci irqs
 */
void pci_irq_handler(void)
{
c0103e44:	55                   	push   %ebp
c0103e45:	89 e5                	mov    %esp,%ebp
c0103e47:	83 ec 28             	sub    $0x28,%esp
    struct list_node *backup = pci_dev_list->head;
c0103e4a:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c0103e4f:	8b 00                	mov    (%eax),%eax
c0103e51:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_set_first(pci_dev_list);
c0103e54:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c0103e59:	89 04 24             	mov    %eax,(%esp)
c0103e5c:	e8 6f 43 00 00       	call   c01081d0 <list_set_first>
    while(!list_is_last(pci_dev_list))
c0103e61:	eb 0d                	jmp    c0103e70 <pci_irq_handler+0x2c>
    {

        list_next(pci_dev_list);
c0103e63:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c0103e68:	89 04 24             	mov    %eax,(%esp)
c0103e6b:	e8 1b 43 00 00       	call   c010818b <list_next>
 */
void pci_irq_handler(void)
{
    struct list_node *backup = pci_dev_list->head;
    list_set_first(pci_dev_list);
    while(!list_is_last(pci_dev_list))
c0103e70:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c0103e75:	89 04 24             	mov    %eax,(%esp)
c0103e78:	e8 3b 43 00 00       	call   c01081b8 <list_is_last>
c0103e7d:	85 c0                	test   %eax,%eax
c0103e7f:	74 e2                	je     c0103e63 <pci_irq_handler+0x1f>
    {

        list_next(pci_dev_list);
    }
}
c0103e81:	c9                   	leave  
c0103e82:	c3                   	ret    

c0103e83 <INIT_PCI>:

#define PRINT_DEV_LIST


void INIT_PCI()
{
c0103e83:	55                   	push   %ebp
c0103e84:	89 e5                	mov    %esp,%ebp
c0103e86:	56                   	push   %esi
c0103e87:	53                   	push   %ebx
c0103e88:	83 ec 50             	sub    $0x50,%esp
    #ifdef PRINT_DEV_LIST
        printf("PCI-devices:\n");
c0103e8b:	c7 04 24 15 93 10 c0 	movl   $0xc0109315,(%esp)
c0103e92:	e8 58 f3 ff ff       	call   c01031ef <puts>
    #endif
    pci_dev_list = list_create();
c0103e97:	e8 b0 3f 00 00       	call   c0107e4c <list_create>
c0103e9c:	a3 24 02 11 c0       	mov    %eax,0xc0110224
    pci_irq_handles = list_create();
c0103ea1:	e8 a6 3f 00 00       	call   c0107e4c <list_create>
c0103ea6:	a3 20 02 11 c0       	mov    %eax,0xc0110220
    pci_dev_list->lock = true;
c0103eab:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c0103eb0:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
c0103eb7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103ebe:	e9 4c 04 00 00       	jmp    c010430f <INIT_PCI+0x48c>
    {

        for(dev = 0; dev < 32; dev++)
c0103ec3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103eca:	e9 32 04 00 00       	jmp    c0104301 <INIT_PCI+0x47e>
        {

            for(func = 0; func < 8; func ++)
c0103ecf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103ed6:	e9 18 04 00 00       	jmp    c01042f3 <INIT_PCI+0x470>
            {

                if(pci_dev_exist(bus, dev, func))
c0103edb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ede:	0f b6 c8             	movzbl %al,%ecx
c0103ee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ee4:	0f b6 d0             	movzbl %al,%edx
c0103ee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103eea:	0f b6 c0             	movzbl %al,%eax
c0103eed:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103ef1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103ef5:	89 04 24             	mov    %eax,(%esp)
c0103ef8:	e8 0c fd ff ff       	call   c0103c09 <pci_dev_exist>
c0103efd:	85 c0                	test   %eax,%eax
c0103eff:	0f 84 ea 03 00 00    	je     c01042ef <INIT_PCI+0x46c>
                {
                    bool multifunc = (pci_readb(bus, dev, func,PCI_HEADERTYPE) & 0x80) >> 7;
c0103f05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f08:	0f b6 c8             	movzbl %al,%ecx
c0103f0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f0e:	0f b6 d0             	movzbl %al,%edx
c0103f11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f14:	0f b6 c0             	movzbl %al,%eax
c0103f17:	c7 44 24 0c 0e 00 00 	movl   $0xe,0xc(%esp)
c0103f1e:	00 
c0103f1f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103f23:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103f27:	89 04 24             	mov    %eax,(%esp)
c0103f2a:	e8 6d fa ff ff       	call   c010399c <pci_readb>
c0103f2f:	c0 e8 07             	shr    $0x7,%al
c0103f32:	0f b6 c0             	movzbl %al,%eax
c0103f35:	89 45 e0             	mov    %eax,-0x20(%ebp)

                    if(func && ! multifunc)
c0103f38:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103f3c:	74 0a                	je     c0103f48 <INIT_PCI+0xc5>
c0103f3e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0103f42:	0f 84 a6 03 00 00    	je     c01042ee <INIT_PCI+0x46b>
                        continue;

                    struct pci_dev *current_dev = malloc(sizeof(struct pci_dev));
c0103f48:	c7 04 24 5c 00 00 00 	movl   $0x5c,(%esp)
c0103f4f:	e8 88 eb ff ff       	call   c0102adc <malloc>
c0103f54:	89 45 dc             	mov    %eax,-0x24(%ebp)

                    current_dev->bus = bus;
c0103f57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f5a:	89 c2                	mov    %eax,%edx
c0103f5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103f5f:	88 10                	mov    %dl,(%eax)
                    current_dev->dev = dev;
c0103f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f64:	89 c2                	mov    %eax,%edx
c0103f66:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103f69:	88 50 01             	mov    %dl,0x1(%eax)
                    current_dev->func = func;
c0103f6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f6f:	89 c2                	mov    %eax,%edx
c0103f71:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103f74:	88 50 02             	mov    %dl,0x2(%eax)

                    uint32_t classcode = pci_readl(bus, dev, 0, PCI_REVISION);
c0103f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f7a:	0f b6 d0             	movzbl %al,%edx
c0103f7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f80:	0f b6 c0             	movzbl %al,%eax
c0103f83:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0103f8a:	00 
c0103f8b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103f92:	00 
c0103f93:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103f97:	89 04 24             	mov    %eax,(%esp)
c0103f9a:	e8 8f fa ff ff       	call   c0103a2e <pci_readl>
c0103f9f:	89 45 d8             	mov    %eax,-0x28(%ebp)

                    current_dev->reversion_ID = (uint8_t)classcode;
c0103fa2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103fa5:	89 c2                	mov    %eax,%edx
c0103fa7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103faa:	88 50 08             	mov    %dl,0x8(%eax)
                    current_dev->programming_interface = (uint8_t) (classcode >> 8);
c0103fad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103fb0:	c1 e8 08             	shr    $0x8,%eax
c0103fb3:	89 c2                	mov    %eax,%edx
c0103fb5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103fb8:	88 50 0b             	mov    %dl,0xb(%eax)
                    current_dev->sub_class = (uint8_t) (classcode >> 16);
c0103fbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103fbe:	c1 e8 10             	shr    $0x10,%eax
c0103fc1:	89 c2                	mov    %eax,%edx
c0103fc3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103fc6:	88 50 0a             	mov    %dl,0xa(%eax)
                    current_dev->base_class = (uint8_t) (classcode >> 24);
c0103fc9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103fcc:	c1 e8 18             	shr    $0x18,%eax
c0103fcf:	89 c2                	mov    %eax,%edx
c0103fd1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103fd4:	88 50 09             	mov    %dl,0x9(%eax)

                    current_dev->device_ID = pci_readw(bus, dev, func, PCI_DEVICE_ID);
c0103fd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103fda:	0f b6 c8             	movzbl %al,%ecx
c0103fdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fe0:	0f b6 d0             	movzbl %al,%edx
c0103fe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fe6:	0f b6 c0             	movzbl %al,%eax
c0103fe9:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0103ff0:	00 
c0103ff1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0103ff5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0103ff9:	89 04 24             	mov    %eax,(%esp)
c0103ffc:	e8 e4 f9 ff ff       	call   c01039e5 <pci_readw>
c0104001:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104004:	66 89 42 04          	mov    %ax,0x4(%edx)
                    current_dev->vendor_ID = pci_readw(bus, dev, func, PCI_VENDOR_ID);
c0104008:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010400b:	0f b6 c8             	movzbl %al,%ecx
c010400e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104011:	0f b6 d0             	movzbl %al,%edx
c0104014:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104017:	0f b6 c0             	movzbl %al,%eax
c010401a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104021:	00 
c0104022:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0104026:	89 54 24 04          	mov    %edx,0x4(%esp)
c010402a:	89 04 24             	mov    %eax,(%esp)
c010402d:	e8 b3 f9 ff ff       	call   c01039e5 <pci_readw>
c0104032:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104035:	66 89 42 06          	mov    %ax,0x6(%edx)
                    current_dev->header_type = pci_readb(bus, dev ,0, PCI_HEADERTYPE) ^ 0x80;
c0104039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010403c:	0f b6 d0             	movzbl %al,%edx
c010403f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104042:	0f b6 c0             	movzbl %al,%eax
c0104045:	c7 44 24 0c 0e 00 00 	movl   $0xe,0xc(%esp)
c010404c:	00 
c010404d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104054:	00 
c0104055:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104059:	89 04 24             	mov    %eax,(%esp)
c010405c:	e8 3b f9 ff ff       	call   c010399c <pci_readb>
c0104061:	89 c2                	mov    %eax,%edx
c0104063:	83 f2 80             	xor    $0xffffff80,%edx
c0104066:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104069:	88 50 10             	mov    %dl,0x10(%eax)
                    current_dev->multifunc = multifunc;
c010406c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010406f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104072:	89 50 0c             	mov    %edx,0xc(%eax)

                    uint32_t irq_info = pci_readl(bus, dev, func, PCI_INTERRUPT);
c0104075:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104078:	0f b6 c8             	movzbl %al,%ecx
c010407b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010407e:	0f b6 d0             	movzbl %al,%edx
c0104081:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104084:	0f b6 c0             	movzbl %al,%eax
c0104087:	c7 44 24 0c 3c 00 00 	movl   $0x3c,0xc(%esp)
c010408e:	00 
c010408f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0104093:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104097:	89 04 24             	mov    %eax,(%esp)
c010409a:	e8 8f f9 ff ff       	call   c0103a2e <pci_readl>
c010409f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
                    current_dev->irq_num = (uint8_t) irq_info;
c01040a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040a5:	89 c2                	mov    %eax,%edx
c01040a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01040aa:	88 50 11             	mov    %dl,0x11(%eax)
                    current_dev->irq_pin = (uint8_t) (irq_info >> 8);
c01040ad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01040b0:	c1 e8 08             	shr    $0x8,%eax
c01040b3:	89 c2                	mov    %eax,%edx
c01040b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01040b8:	88 50 12             	mov    %dl,0x12(%eax)
                    //Todo: Register Interrupt



                    // Standart Device
                    if(! (current_dev->header_type & 0xFF) )
c01040bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01040be:	0f b6 40 10          	movzbl 0x10(%eax),%eax
c01040c2:	84 c0                	test   %al,%al
c01040c4:	0f 85 bd 01 00 00    	jne    c0104287 <INIT_PCI+0x404>
                    {
                        int base;

                        for(base = 0; base < 6; base ++)
c01040ca:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01040d1:	e9 a7 01 00 00       	jmp    c010427d <INIT_PCI+0x3fa>
                        {
                            uint32_t current_base = pci_readl(bus, dev, func, PCI_BASE + (base * 4));
c01040d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040d9:	83 c0 04             	add    $0x4,%eax
c01040dc:	c1 e0 02             	shl    $0x2,%eax
c01040df:	0f b6 d8             	movzbl %al,%ebx
c01040e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040e5:	0f b6 c8             	movzbl %al,%ecx
c01040e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040eb:	0f b6 d0             	movzbl %al,%edx
c01040ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040f1:	0f b6 c0             	movzbl %al,%eax
c01040f4:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01040f8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01040fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104100:	89 04 24             	mov    %eax,(%esp)
c0104103:	e8 26 f9 ff ff       	call   c0103a2e <pci_readl>
c0104108:	89 45 d0             	mov    %eax,-0x30(%ebp)

                            // get type
                            current_dev->base_adress[base].type = current_base & 1;
c010410b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010410e:	89 c1                	mov    %eax,%ecx
c0104110:	83 e1 01             	and    $0x1,%ecx
c0104113:	8b 5d dc             	mov    -0x24(%ebp),%ebx
c0104116:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104119:	89 d0                	mov    %edx,%eax
c010411b:	01 c0                	add    %eax,%eax
c010411d:	01 d0                	add    %edx,%eax
c010411f:	c1 e0 02             	shl    $0x2,%eax
c0104122:	01 d8                	add    %ebx,%eax
c0104124:	83 c0 18             	add    $0x18,%eax
c0104127:	89 08                	mov    %ecx,(%eax)

                            // save current adress
                            current_dev->base_adress[base].adress = current_base ^ 1;
c0104129:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010412c:	89 c1                	mov    %eax,%ecx
c010412e:	83 f1 01             	xor    $0x1,%ecx
c0104131:	8b 5d dc             	mov    -0x24(%ebp),%ebx
c0104134:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104137:	89 d0                	mov    %edx,%eax
c0104139:	01 c0                	add    %eax,%eax
c010413b:	01 d0                	add    %edx,%eax
c010413d:	c1 e0 02             	shl    $0x2,%eax
c0104140:	01 d8                	add    %ebx,%eax
c0104142:	83 c0 14             	add    $0x14,%eax
c0104145:	89 08                	mov    %ecx,(%eax)

                            // get reserved bits
                            pci_writel(bus, dev, func, PCI_BASE + (base * 4), 0xFFFFFFFF);
c0104147:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010414a:	83 c0 04             	add    $0x4,%eax
c010414d:	c1 e0 02             	shl    $0x2,%eax
c0104150:	0f b6 d8             	movzbl %al,%ebx
c0104153:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104156:	0f b6 c8             	movzbl %al,%ecx
c0104159:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010415c:	0f b6 d0             	movzbl %al,%edx
c010415f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104162:	0f b6 c0             	movzbl %al,%eax
c0104165:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%esp)
c010416c:	ff 
c010416d:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0104171:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0104175:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104179:	89 04 24             	mov    %eax,(%esp)
c010417c:	e8 15 fa ff ff       	call   c0103b96 <pci_writel>
                            uint32_t temp_base = pci_readl(bus, dev, func, PCI_BASE + (base * 4));
c0104181:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104184:	83 c0 04             	add    $0x4,%eax
c0104187:	c1 e0 02             	shl    $0x2,%eax
c010418a:	0f b6 d8             	movzbl %al,%ebx
c010418d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104190:	0f b6 c8             	movzbl %al,%ecx
c0104193:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104196:	0f b6 d0             	movzbl %al,%edx
c0104199:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010419c:	0f b6 c0             	movzbl %al,%eax
c010419f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01041a3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01041a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01041ab:	89 04 24             	mov    %eax,(%esp)
c01041ae:	e8 7b f8 ff ff       	call   c0103a2e <pci_readl>
c01041b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
                            temp_base = (~temp_base) | 1;
c01041b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01041b9:	f7 d0                	not    %eax
c01041bb:	83 c8 01             	or     $0x1,%eax
c01041be:	89 45 cc             	mov    %eax,-0x34(%ebp)
                            current_dev->base_adress[base].resb = 0;
c01041c1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01041c4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01041c7:	89 d0                	mov    %edx,%eax
c01041c9:	01 c0                	add    %eax,%eax
c01041cb:	01 d0                	add    %edx,%eax
c01041cd:	c1 e0 02             	shl    $0x2,%eax
c01041d0:	01 c8                	add    %ecx,%eax
c01041d2:	83 c0 10             	add    $0x10,%eax
c01041d5:	c6 40 0c 00          	movb   $0x0,0xc(%eax)

                            int i;
                            for(i = 0; i < 32; i++)
c01041d9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c01041e0:	eb 55                	jmp    c0104237 <INIT_PCI+0x3b4>
                            {
                                if(temp_base & (1 << i) == 0)
c01041e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041e5:	ba 01 00 00 00       	mov    $0x1,%edx
c01041ea:	89 d3                	mov    %edx,%ebx
c01041ec:	89 c1                	mov    %eax,%ecx
c01041ee:	d3 e3                	shl    %cl,%ebx
c01041f0:	89 d8                	mov    %ebx,%eax
c01041f2:	85 c0                	test   %eax,%eax
c01041f4:	0f 94 c0             	sete   %al
c01041f7:	0f b6 c0             	movzbl %al,%eax
c01041fa:	23 45 cc             	and    -0x34(%ebp),%eax
c01041fd:	85 c0                	test   %eax,%eax
c01041ff:	74 3e                	je     c010423f <INIT_PCI+0x3bc>
                                    current_dev->base_adress[base].resb++;
c0104201:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0104204:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104207:	89 d0                	mov    %edx,%eax
c0104209:	01 c0                	add    %eax,%eax
c010420b:	01 d0                	add    %edx,%eax
c010420d:	c1 e0 02             	shl    $0x2,%eax
c0104210:	01 c8                	add    %ecx,%eax
c0104212:	83 c0 10             	add    $0x10,%eax
c0104215:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
c0104219:	8d 48 01             	lea    0x1(%eax),%ecx
c010421c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
c010421f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104222:	89 d0                	mov    %edx,%eax
c0104224:	01 c0                	add    %eax,%eax
c0104226:	01 d0                	add    %edx,%eax
c0104228:	c1 e0 02             	shl    $0x2,%eax
c010422b:	01 d8                	add    %ebx,%eax
c010422d:	83 c0 10             	add    $0x10,%eax
c0104230:	88 48 0c             	mov    %cl,0xc(%eax)
                            uint32_t temp_base = pci_readl(bus, dev, func, PCI_BASE + (base * 4));
                            temp_base = (~temp_base) | 1;
                            current_dev->base_adress[base].resb = 0;

                            int i;
                            for(i = 0; i < 32; i++)
c0104233:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c0104237:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
c010423b:	7e a5                	jle    c01041e2 <INIT_PCI+0x35f>
c010423d:	eb 01                	jmp    c0104240 <INIT_PCI+0x3bd>
                            {
                                if(temp_base & (1 << i) == 0)
                                    current_dev->base_adress[base].resb++;
                                else
                                    break;
c010423f:	90                   	nop
                            }

                            //reset old state
                             pci_writel(bus, dev, func, PCI_BASE + (base * 4), current_base);
c0104240:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104243:	83 c0 04             	add    $0x4,%eax
c0104246:	c1 e0 02             	shl    $0x2,%eax
c0104249:	0f b6 d8             	movzbl %al,%ebx
c010424c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010424f:	0f b6 c8             	movzbl %al,%ecx
c0104252:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104255:	0f b6 d0             	movzbl %al,%edx
c0104258:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010425b:	0f b6 c0             	movzbl %al,%eax
c010425e:	8b 75 d0             	mov    -0x30(%ebp),%esi
c0104261:	89 74 24 10          	mov    %esi,0x10(%esp)
c0104265:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0104269:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010426d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104271:	89 04 24             	mov    %eax,(%esp)
c0104274:	e8 1d f9 ff ff       	call   c0103b96 <pci_writel>
                    // Standart Device
                    if(! (current_dev->header_type & 0xFF) )
                    {
                        int base;

                        for(base = 0; base < 6; base ++)
c0104279:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c010427d:	83 7d e8 05          	cmpl   $0x5,-0x18(%ebp)
c0104281:	0f 8e 4f fe ff ff    	jle    c01040d6 <INIT_PCI+0x253>
                    {
                        //TODO: Write Cases for Bridges
                    }

                    #ifdef PRINT_DEV_LIST
                        printf("device ID: %04X  vendor ID: %04X  bus: %d  port: %d  function: %d\n",current_dev->device_ID, current_dev->vendor_ID, current_dev->bus, current_dev->dev, current_dev->func);
c0104287:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010428a:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c010428e:	0f b6 f0             	movzbl %al,%esi
c0104291:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104294:	0f b6 40 01          	movzbl 0x1(%eax),%eax
c0104298:	0f b6 d8             	movzbl %al,%ebx
c010429b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010429e:	0f b6 00             	movzbl (%eax),%eax
c01042a1:	0f b6 c8             	movzbl %al,%ecx
c01042a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042a7:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01042ab:	0f b7 d0             	movzwl %ax,%edx
c01042ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042b1:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01042b5:	0f b7 c0             	movzwl %ax,%eax
c01042b8:	89 74 24 14          	mov    %esi,0x14(%esp)
c01042bc:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c01042c0:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01042c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01042c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01042cc:	c7 04 24 24 93 10 c0 	movl   $0xc0109324,(%esp)
c01042d3:	e8 f4 e2 ff ff       	call   c01025cc <printf>
                    #endif

                    list_push_front(pci_dev_list, current_dev);
c01042d8:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c01042dd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01042e0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01042e4:	89 04 24             	mov    %eax,(%esp)
c01042e7:	e8 a8 3c 00 00       	call   c0107f94 <list_push_front>
c01042ec:	eb 01                	jmp    c01042ef <INIT_PCI+0x46c>
                if(pci_dev_exist(bus, dev, func))
                {
                    bool multifunc = (pci_readb(bus, dev, func,PCI_HEADERTYPE) & 0x80) >> 7;

                    if(func && ! multifunc)
                        continue;
c01042ee:	90                   	nop
    {

        for(dev = 0; dev < 32; dev++)
        {

            for(func = 0; func < 8; func ++)
c01042ef:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01042f3:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
c01042f7:	0f 8e de fb ff ff    	jle    c0103edb <INIT_PCI+0x58>
    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
    {

        for(dev = 0; dev < 32; dev++)
c01042fd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104301:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0104305:	0f 8e c4 fb ff ff    	jle    c0103ecf <INIT_PCI+0x4c>
    pci_irq_handles = list_create();
    pci_dev_list->lock = true;

    int dev,bus,func;

    for(bus = 0; bus < 8; bus++)
c010430b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010430f:	83 7d f0 07          	cmpl   $0x7,-0x10(%ebp)
c0104313:	0f 8e aa fb ff ff    	jle    c0103ec3 <INIT_PCI+0x40>
                    list_push_front(pci_dev_list, current_dev);
                }
            }
        }
    }
    pci_dev_list->lock = false;
c0104319:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c010431e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c0104325:	83 c4 50             	add    $0x50,%esp
c0104328:	5b                   	pop    %ebx
c0104329:	5e                   	pop    %esi
c010432a:	5d                   	pop    %ebp
c010432b:	c3                   	ret    

c010432c <outb>:
	uint32_t result;
	asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
	return result;
}

static inline void outb(uint16_t port, uint8_t value) {
c010432c:	55                   	push   %ebp
c010432d:	89 e5                	mov    %esp,%ebp
c010432f:	83 ec 08             	sub    $0x8,%esp
c0104332:	8b 55 08             	mov    0x8(%ebp),%edx
c0104335:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104338:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010433c:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c010433f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0104343:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0104347:	ee                   	out    %al,(%dx)
}
c0104348:	c9                   	leave  
c0104349:	c3                   	ret    

c010434a <set_pit_freq>:
 * set PIT Fequency
 *
 * @param freqency
 * @return void
 */
void set_pit_freq(int freq) {
c010434a:	55                   	push   %ebp
c010434b:	89 e5                	mov    %esp,%ebp
c010434d:	83 ec 18             	sub    $0x18,%esp
	int counter = 1193182 / freq;
c0104350:	b8 de 34 12 00       	mov    $0x1234de,%eax
c0104355:	89 c2                	mov    %eax,%edx
c0104357:	c1 fa 1f             	sar    $0x1f,%edx
c010435a:	f7 7d 08             	idivl  0x8(%ebp)
c010435d:	89 45 fc             	mov    %eax,-0x4(%ebp)
   	outb(0x40,counter & 0xFF);
c0104360:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104363:	0f b6 c0             	movzbl %al,%eax
c0104366:	89 44 24 04          	mov    %eax,0x4(%esp)
c010436a:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0104371:	e8 b6 ff ff ff       	call   c010432c <outb>
   	outb(0x40,counter >> 8);
c0104376:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104379:	c1 f8 08             	sar    $0x8,%eax
c010437c:	0f b6 c0             	movzbl %al,%eax
c010437f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104383:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010438a:	e8 9d ff ff ff       	call   c010432c <outb>
}
c010438f:	c9                   	leave  
c0104390:	c3                   	ret    

c0104391 <INIT_PIT>:
 * Initalize the Programmable Intervall Timer
 *
 * @param frequency
 * @return void
 */
void INIT_PIT(int freq) {
c0104391:	55                   	push   %ebp
c0104392:	89 e5                	mov    %esp,%ebp
c0104394:	83 ec 08             	sub    $0x8,%esp
	outb(0x43, 0x34);
c0104397:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c010439e:	00 
c010439f:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
c01043a6:	e8 81 ff ff ff       	call   c010432c <outb>
	set_pit_freq(freq);
c01043ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01043ae:	89 04 24             	mov    %eax,(%esp)
c01043b1:	e8 94 ff ff ff       	call   c010434a <set_pit_freq>
}
c01043b6:	c9                   	leave  
c01043b7:	c3                   	ret    

c01043b8 <INIT_RTC>:
 * Initalize the Real Time Clock
 *
 * @param void
 * @return void
 */
void INIT_RTC(void) {
c01043b8:	55                   	push   %ebp
c01043b9:	89 e5                	mov    %esp,%ebp
c01043bb:	83 ec 18             	sub    $0x18,%esp
	install_irq(0x8, &rtc_irq_handler);
c01043be:	c7 44 24 04 21 44 10 	movl   $0xc0104421,0x4(%esp)
c01043c5:	c0 
c01043c6:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01043cd:	e8 14 16 00 00       	call   c01059e6 <install_irq>

	cmos = get_cmos_data();
c01043d2:	e8 03 ec ff ff       	call   c0102fda <get_cmos_data>
c01043d7:	a3 08 00 11 c0       	mov    %eax,0xc0110008
	cmos_write_byte(0x0A, (cmos->registers.register_a & 0xF0) | 0x0F);
c01043dc:	a1 08 00 11 c0       	mov    0xc0110008,%eax
c01043e1:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01043e5:	83 c8 0f             	or     $0xf,%eax
c01043e8:	0f b6 c0             	movzbl %al,%eax
c01043eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01043ef:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01043f6:	e8 37 ec ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x0B, cmos->registers.register_b | 0x40);
c01043fb:	a1 08 00 11 c0       	mov    0xc0110008,%eax
c0104400:	0f b6 40 05          	movzbl 0x5(%eax),%eax
c0104404:	83 c8 40             	or     $0x40,%eax
c0104407:	0f b6 c0             	movzbl %al,%eax
c010440a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010440e:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c0104415:	e8 18 ec ff ff       	call   c0103032 <cmos_write_byte>

	update_time();
c010441a:	e8 29 00 00 00       	call   c0104448 <update_time>
}
c010441f:	c9                   	leave  
c0104420:	c3                   	ret    

c0104421 <rtc_irq_handler>:
 * IRQ-handler for the RTC
 *
 * @param void
 * @return void
 */
void rtc_irq_handler(void) {
c0104421:	55                   	push   %ebp
c0104422:	89 e5                	mov    %esp,%ebp
c0104424:	53                   	push   %ebx
c0104425:	83 ec 14             	sub    $0x14,%esp
	cmos->registers.register_c = cmos_read_byte(0x0C);
c0104428:	8b 1d 08 00 11 c0    	mov    0xc0110008,%ebx
c010442e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104435:	e8 aa eb ff ff       	call   c0102fe4 <cmos_read_byte>
c010443a:	88 43 06             	mov    %al,0x6(%ebx)
	update_time();
c010443d:	e8 06 00 00 00       	call   c0104448 <update_time>
}
c0104442:	83 c4 14             	add    $0x14,%esp
c0104445:	5b                   	pop    %ebx
c0104446:	5d                   	pop    %ebp
c0104447:	c3                   	ret    

c0104448 <update_time>:
 * @param void
 *
 * @return success
 */
int update_time(void)
{
c0104448:	55                   	push   %ebp
c0104449:	89 e5                	mov    %esp,%ebp
c010444b:	53                   	push   %ebx
c010444c:	83 ec 14             	sub    $0x14,%esp
	current_time.second =       BCD_DECODE(cmos_read_byte(0x00));
c010444f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0104456:	e8 89 eb ff ff       	call   c0102fe4 <cmos_read_byte>
c010445b:	89 c3                	mov    %eax,%ebx
c010445d:	83 e3 0f             	and    $0xf,%ebx
c0104460:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0104467:	e8 78 eb ff ff       	call   c0102fe4 <cmos_read_byte>
c010446c:	89 c2                	mov    %eax,%edx
c010446e:	c0 ea 04             	shr    $0x4,%dl
c0104471:	89 d0                	mov    %edx,%eax
c0104473:	c1 e0 02             	shl    $0x2,%eax
c0104476:	01 d0                	add    %edx,%eax
c0104478:	01 c0                	add    %eax,%eax
c010447a:	01 d8                	add    %ebx,%eax
c010447c:	a2 28 02 11 c0       	mov    %al,0xc0110228
	current_time.alarm_sec =    BCD_DECODE(cmos_read_byte(0x01));
c0104481:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104488:	e8 57 eb ff ff       	call   c0102fe4 <cmos_read_byte>
c010448d:	89 c3                	mov    %eax,%ebx
c010448f:	83 e3 0f             	and    $0xf,%ebx
c0104492:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104499:	e8 46 eb ff ff       	call   c0102fe4 <cmos_read_byte>
c010449e:	89 c2                	mov    %eax,%edx
c01044a0:	c0 ea 04             	shr    $0x4,%dl
c01044a3:	89 d0                	mov    %edx,%eax
c01044a5:	c1 e0 02             	shl    $0x2,%eax
c01044a8:	01 d0                	add    %edx,%eax
c01044aa:	01 c0                	add    %eax,%eax
c01044ac:	01 d8                	add    %ebx,%eax
c01044ae:	a2 29 02 11 c0       	mov    %al,0xc0110229
	current_time.minute =       BCD_DECODE(cmos_read_byte(0x02));
c01044b3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01044ba:	e8 25 eb ff ff       	call   c0102fe4 <cmos_read_byte>
c01044bf:	89 c3                	mov    %eax,%ebx
c01044c1:	83 e3 0f             	and    $0xf,%ebx
c01044c4:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01044cb:	e8 14 eb ff ff       	call   c0102fe4 <cmos_read_byte>
c01044d0:	89 c2                	mov    %eax,%edx
c01044d2:	c0 ea 04             	shr    $0x4,%dl
c01044d5:	89 d0                	mov    %edx,%eax
c01044d7:	c1 e0 02             	shl    $0x2,%eax
c01044da:	01 d0                	add    %edx,%eax
c01044dc:	01 c0                	add    %eax,%eax
c01044de:	01 d8                	add    %ebx,%eax
c01044e0:	a2 2a 02 11 c0       	mov    %al,0xc011022a
	current_time.alarm_min =    BCD_DECODE(cmos_read_byte(0x03));
c01044e5:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01044ec:	e8 f3 ea ff ff       	call   c0102fe4 <cmos_read_byte>
c01044f1:	89 c3                	mov    %eax,%ebx
c01044f3:	83 e3 0f             	and    $0xf,%ebx
c01044f6:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01044fd:	e8 e2 ea ff ff       	call   c0102fe4 <cmos_read_byte>
c0104502:	89 c2                	mov    %eax,%edx
c0104504:	c0 ea 04             	shr    $0x4,%dl
c0104507:	89 d0                	mov    %edx,%eax
c0104509:	c1 e0 02             	shl    $0x2,%eax
c010450c:	01 d0                	add    %edx,%eax
c010450e:	01 c0                	add    %eax,%eax
c0104510:	01 d8                	add    %ebx,%eax
c0104512:	a2 2b 02 11 c0       	mov    %al,0xc011022b
	current_time.hour =         BCD_DECODE(cmos_read_byte(0x04));
c0104517:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010451e:	e8 c1 ea ff ff       	call   c0102fe4 <cmos_read_byte>
c0104523:	89 c3                	mov    %eax,%ebx
c0104525:	83 e3 0f             	and    $0xf,%ebx
c0104528:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010452f:	e8 b0 ea ff ff       	call   c0102fe4 <cmos_read_byte>
c0104534:	89 c2                	mov    %eax,%edx
c0104536:	c0 ea 04             	shr    $0x4,%dl
c0104539:	89 d0                	mov    %edx,%eax
c010453b:	c1 e0 02             	shl    $0x2,%eax
c010453e:	01 d0                	add    %edx,%eax
c0104540:	01 c0                	add    %eax,%eax
c0104542:	01 d8                	add    %ebx,%eax
c0104544:	a2 2c 02 11 c0       	mov    %al,0xc011022c
	current_time.alarm_hour =   BCD_DECODE(cmos_read_byte(0x05));
c0104549:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104550:	e8 8f ea ff ff       	call   c0102fe4 <cmos_read_byte>
c0104555:	89 c3                	mov    %eax,%ebx
c0104557:	83 e3 0f             	and    $0xf,%ebx
c010455a:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104561:	e8 7e ea ff ff       	call   c0102fe4 <cmos_read_byte>
c0104566:	89 c2                	mov    %eax,%edx
c0104568:	c0 ea 04             	shr    $0x4,%dl
c010456b:	89 d0                	mov    %edx,%eax
c010456d:	c1 e0 02             	shl    $0x2,%eax
c0104570:	01 d0                	add    %edx,%eax
c0104572:	01 c0                	add    %eax,%eax
c0104574:	01 d8                	add    %ebx,%eax
c0104576:	a2 2d 02 11 c0       	mov    %al,0xc011022d
	current_time.week_day =     BCD_DECODE(cmos_read_byte(0x06)) - 1;
c010457b:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c0104582:	e8 5d ea ff ff       	call   c0102fe4 <cmos_read_byte>
c0104587:	89 c3                	mov    %eax,%ebx
c0104589:	83 e3 0f             	and    $0xf,%ebx
c010458c:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c0104593:	e8 4c ea ff ff       	call   c0102fe4 <cmos_read_byte>
c0104598:	89 c2                	mov    %eax,%edx
c010459a:	c0 ea 04             	shr    $0x4,%dl
c010459d:	89 d0                	mov    %edx,%eax
c010459f:	c1 e0 02             	shl    $0x2,%eax
c01045a2:	01 d0                	add    %edx,%eax
c01045a4:	01 c0                	add    %eax,%eax
c01045a6:	01 d8                	add    %ebx,%eax
c01045a8:	83 e8 01             	sub    $0x1,%eax
c01045ab:	a2 2e 02 11 c0       	mov    %al,0xc011022e
	current_time.day_in_month = BCD_DECODE(cmos_read_byte(0x07));
c01045b0:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c01045b7:	e8 28 ea ff ff       	call   c0102fe4 <cmos_read_byte>
c01045bc:	89 c3                	mov    %eax,%ebx
c01045be:	83 e3 0f             	and    $0xf,%ebx
c01045c1:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c01045c8:	e8 17 ea ff ff       	call   c0102fe4 <cmos_read_byte>
c01045cd:	89 c2                	mov    %eax,%edx
c01045cf:	c0 ea 04             	shr    $0x4,%dl
c01045d2:	89 d0                	mov    %edx,%eax
c01045d4:	c1 e0 02             	shl    $0x2,%eax
c01045d7:	01 d0                	add    %edx,%eax
c01045d9:	01 c0                	add    %eax,%eax
c01045db:	01 d8                	add    %ebx,%eax
c01045dd:	a2 2f 02 11 c0       	mov    %al,0xc011022f
	current_time.month =        BCD_DECODE(cmos_read_byte(0x08));
c01045e2:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01045e9:	e8 f6 e9 ff ff       	call   c0102fe4 <cmos_read_byte>
c01045ee:	89 c3                	mov    %eax,%ebx
c01045f0:	83 e3 0f             	and    $0xf,%ebx
c01045f3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01045fa:	e8 e5 e9 ff ff       	call   c0102fe4 <cmos_read_byte>
c01045ff:	89 c2                	mov    %eax,%edx
c0104601:	c0 ea 04             	shr    $0x4,%dl
c0104604:	89 d0                	mov    %edx,%eax
c0104606:	c1 e0 02             	shl    $0x2,%eax
c0104609:	01 d0                	add    %edx,%eax
c010460b:	01 c0                	add    %eax,%eax
c010460d:	01 d8                	add    %ebx,%eax
c010460f:	a2 30 02 11 c0       	mov    %al,0xc0110230
	current_time.year =         BCD_DECODE(cmos_read_byte(0x09));
c0104614:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010461b:	e8 c4 e9 ff ff       	call   c0102fe4 <cmos_read_byte>
c0104620:	89 c3                	mov    %eax,%ebx
c0104622:	83 e3 0f             	and    $0xf,%ebx
c0104625:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010462c:	e8 b3 e9 ff ff       	call   c0102fe4 <cmos_read_byte>
c0104631:	89 c2                	mov    %eax,%edx
c0104633:	c0 ea 04             	shr    $0x4,%dl
c0104636:	89 d0                	mov    %edx,%eax
c0104638:	c1 e0 02             	shl    $0x2,%eax
c010463b:	01 d0                	add    %edx,%eax
c010463d:	01 c0                	add    %eax,%eax
c010463f:	01 d8                	add    %ebx,%eax
c0104641:	a2 31 02 11 c0       	mov    %al,0xc0110231
	current_time.century =      BCD_DECODE(cmos_read_byte(0x32));
c0104646:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010464d:	e8 92 e9 ff ff       	call   c0102fe4 <cmos_read_byte>
c0104652:	89 c3                	mov    %eax,%ebx
c0104654:	83 e3 0f             	and    $0xf,%ebx
c0104657:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c010465e:	e8 81 e9 ff ff       	call   c0102fe4 <cmos_read_byte>
c0104663:	89 c2                	mov    %eax,%edx
c0104665:	c0 ea 04             	shr    $0x4,%dl
c0104668:	89 d0                	mov    %edx,%eax
c010466a:	c1 e0 02             	shl    $0x2,%eax
c010466d:	01 d0                	add    %edx,%eax
c010466f:	01 c0                	add    %eax,%eax
c0104671:	01 d8                	add    %ebx,%eax
c0104673:	a2 32 02 11 c0       	mov    %al,0xc0110232

	return 0;
c0104678:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010467d:	83 c4 14             	add    $0x14,%esp
c0104680:	5b                   	pop    %ebx
c0104681:	5d                   	pop    %ebp
c0104682:	c3                   	ret    

c0104683 <change_time>:
 * @param time New time
 *
 * @return success
 */
/* TODO: BCD_ENCODE */
int change_time(time_t time) {
c0104683:	55                   	push   %ebp
c0104684:	89 e5                	mov    %esp,%ebp
c0104686:	83 ec 18             	sub    $0x18,%esp
	cmos_write_byte(0x00, time.second);
c0104689:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
c010468d:	0f b6 c0             	movzbl %al,%eax
c0104690:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104694:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010469b:	e8 92 e9 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x01, time.alarm_sec);
c01046a0:	0f b6 45 09          	movzbl 0x9(%ebp),%eax
c01046a4:	0f b6 c0             	movzbl %al,%eax
c01046a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01046ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01046b2:	e8 7b e9 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x02, time.minute);
c01046b7:	0f b6 45 0a          	movzbl 0xa(%ebp),%eax
c01046bb:	0f b6 c0             	movzbl %al,%eax
c01046be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01046c2:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01046c9:	e8 64 e9 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x03, time.alarm_min);
c01046ce:	0f b6 45 0b          	movzbl 0xb(%ebp),%eax
c01046d2:	0f b6 c0             	movzbl %al,%eax
c01046d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01046d9:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01046e0:	e8 4d e9 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x04, time.hour);
c01046e5:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
c01046e9:	0f b6 c0             	movzbl %al,%eax
c01046ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01046f0:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01046f7:	e8 36 e9 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x05, time.alarm_hour);
c01046fc:	0f b6 45 0d          	movzbl 0xd(%ebp),%eax
c0104700:	0f b6 c0             	movzbl %al,%eax
c0104703:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104707:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010470e:	e8 1f e9 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x06, time.week_day);
c0104713:	0f b6 45 0e          	movzbl 0xe(%ebp),%eax
c0104717:	0f b6 c0             	movzbl %al,%eax
c010471a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010471e:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c0104725:	e8 08 e9 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x07, time.day_in_month);
c010472a:	0f b6 45 0f          	movzbl 0xf(%ebp),%eax
c010472e:	0f b6 c0             	movzbl %al,%eax
c0104731:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104735:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c010473c:	e8 f1 e8 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x08, time.month);
c0104741:	0f b6 45 10          	movzbl 0x10(%ebp),%eax
c0104745:	0f b6 c0             	movzbl %al,%eax
c0104748:	89 44 24 04          	mov    %eax,0x4(%esp)
c010474c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0104753:	e8 da e8 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x09, time.year);
c0104758:	0f b6 45 11          	movzbl 0x11(%ebp),%eax
c010475c:	0f b6 c0             	movzbl %al,%eax
c010475f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104763:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c010476a:	e8 c3 e8 ff ff       	call   c0103032 <cmos_write_byte>
	cmos_write_byte(0x32, time.century);
c010476f:	0f b6 45 12          	movzbl 0x12(%ebp),%eax
c0104773:	0f b6 c0             	movzbl %al,%eax
c0104776:	89 44 24 04          	mov    %eax,0x4(%esp)
c010477a:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
c0104781:	e8 ac e8 ff ff       	call   c0103032 <cmos_write_byte>

	return 0;
c0104786:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010478b:	c9                   	leave  
c010478c:	c3                   	ret    

c010478d <get_time>:
 *
 * @param void
 *
 * @return pointer to the current_time
 */
time_t *get_time(void) {
c010478d:	55                   	push   %ebp
c010478e:	89 e5                	mov    %esp,%ebp
	return &current_time;
c0104790:	b8 28 02 11 c0       	mov    $0xc0110228,%eax
}
c0104795:	5d                   	pop    %ebp
c0104796:	c3                   	ret    

c0104797 <print_time>:

/**
 * Print datetime
 */
void print_time(time_t * time)
{
c0104797:	55                   	push   %ebp
c0104798:	89 e5                	mov    %esp,%ebp
c010479a:	53                   	push   %ebx
c010479b:	83 ec 34             	sub    $0x34,%esp
	char *day_string;
	switch (time->week_day) {
c010479e:	8b 45 08             	mov    0x8(%ebp),%eax
c01047a1:	0f b6 40 06          	movzbl 0x6(%eax),%eax
c01047a5:	0f b6 c0             	movzbl %al,%eax
c01047a8:	83 f8 06             	cmp    $0x6,%eax
c01047ab:	77 47                	ja     c01047f4 <print_time+0x5d>
c01047ad:	8b 04 85 e4 93 10 c0 	mov    -0x3fef6c1c(,%eax,4),%eax
c01047b4:	ff e0                	jmp    *%eax
		case 0: day_string = "Sonntag";		break;
c01047b6:	c7 45 f4 68 93 10 c0 	movl   $0xc0109368,-0xc(%ebp)
c01047bd:	eb 35                	jmp    c01047f4 <print_time+0x5d>
		case 1: day_string = "Montag";		break;
c01047bf:	c7 45 f4 70 93 10 c0 	movl   $0xc0109370,-0xc(%ebp)
c01047c6:	eb 2c                	jmp    c01047f4 <print_time+0x5d>
		case 2: day_string = "Dienstag";	break;
c01047c8:	c7 45 f4 77 93 10 c0 	movl   $0xc0109377,-0xc(%ebp)
c01047cf:	eb 23                	jmp    c01047f4 <print_time+0x5d>
		case 3: day_string = "Mittwoch";	break;
c01047d1:	c7 45 f4 80 93 10 c0 	movl   $0xc0109380,-0xc(%ebp)
c01047d8:	eb 1a                	jmp    c01047f4 <print_time+0x5d>
		case 4: day_string = "Donnerstag";	break;
c01047da:	c7 45 f4 89 93 10 c0 	movl   $0xc0109389,-0xc(%ebp)
c01047e1:	eb 11                	jmp    c01047f4 <print_time+0x5d>
		case 5: day_string = "Freitag";		break;
c01047e3:	c7 45 f4 94 93 10 c0 	movl   $0xc0109394,-0xc(%ebp)
c01047ea:	eb 08                	jmp    c01047f4 <print_time+0x5d>
		case 6: day_string = "Samstag";		break;
c01047ec:	c7 45 f4 9c 93 10 c0 	movl   $0xc010939c,-0xc(%ebp)
c01047f3:	90                   	nop
	}

	printf("System Date: %02d/%02d/%02d (%s)\n", time->day_in_month, time->month, time->year, day_string);
c01047f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01047f7:	0f b6 40 09          	movzbl 0x9(%eax),%eax
c01047fb:	0f b6 c8             	movzbl %al,%ecx
c01047fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0104801:	0f b6 40 08          	movzbl 0x8(%eax),%eax
c0104805:	0f b6 d0             	movzbl %al,%edx
c0104808:	8b 45 08             	mov    0x8(%ebp),%eax
c010480b:	0f b6 40 07          	movzbl 0x7(%eax),%eax
c010480f:	0f b6 c0             	movzbl %al,%eax
c0104812:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0104815:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0104819:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010481d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104821:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104825:	c7 04 24 a4 93 10 c0 	movl   $0xc01093a4,(%esp)
c010482c:	e8 9b dd ff ff       	call   c01025cc <printf>
	printf("System Time: %02d:%02d:%02d\n", time->hour, time->minute, time->second);
c0104831:	8b 45 08             	mov    0x8(%ebp),%eax
c0104834:	0f b6 00             	movzbl (%eax),%eax
c0104837:	0f b6 c8             	movzbl %al,%ecx
c010483a:	8b 45 08             	mov    0x8(%ebp),%eax
c010483d:	0f b6 40 02          	movzbl 0x2(%eax),%eax
c0104841:	0f b6 d0             	movzbl %al,%edx
c0104844:	8b 45 08             	mov    0x8(%ebp),%eax
c0104847:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010484b:	0f b6 c0             	movzbl %al,%eax
c010484e:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0104852:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104856:	89 44 24 04          	mov    %eax,0x4(%esp)
c010485a:	c7 04 24 c6 93 10 c0 	movl   $0xc01093c6,(%esp)
c0104861:	e8 66 dd ff ff       	call   c01025cc <printf>
}
c0104866:	83 c4 34             	add    $0x34,%esp
c0104869:	5b                   	pop    %ebx
c010486a:	5d                   	pop    %ebp
c010486b:	c3                   	ret    

c010486c <INIT_RTL8139>:

list_t *rtl8139_devs;


void INIT_RTL8139(void)
{
c010486c:	55                   	push   %ebp
c010486d:	89 e5                	mov    %esp,%ebp
c010486f:	83 ec 28             	sub    $0x28,%esp
    rtl8139_devs = list_create();
c0104872:	e8 d5 35 00 00       	call   c0107e4c <list_create>
c0104877:	a3 34 02 11 c0       	mov    %eax,0xc0110234
    int dev_counter = 0;
c010487c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    struct pci_dev *current_dev = search_device(pci_dev_list, RTL8139_VENDOR_ID, RTL8139_DEVICE_ID, &dev_counter);
c0104883:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c0104888:	8d 55 f0             	lea    -0x10(%ebp),%edx
c010488b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010488f:	c7 44 24 08 39 81 00 	movl   $0x8139,0x8(%esp)
c0104896:	00 
c0104897:	c7 44 24 04 ec 10 00 	movl   $0x10ec,0x4(%esp)
c010489e:	00 
c010489f:	89 04 24             	mov    %eax,(%esp)
c01048a2:	e8 be f3 ff ff       	call   c0103c65 <search_device>
c01048a7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while(current_dev)
c01048aa:	eb 63                	jmp    c010490f <INIT_RTL8139+0xa3>
    {
        list_push_front(rtl8139_devs, current_dev);
c01048ac:	a1 34 02 11 c0       	mov    0xc0110234,%eax
c01048b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01048b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01048b8:	89 04 24             	mov    %eax,(%esp)
c01048bb:	e8 d4 36 00 00       	call   c0107f94 <list_push_front>
        printf("IRQ: %d Int-Lane: %d\n",current_dev->irq_num, current_dev->irq_pin);
c01048c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048c3:	0f b6 40 12          	movzbl 0x12(%eax),%eax
c01048c7:	0f b6 d0             	movzbl %al,%edx
c01048ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048cd:	0f b6 40 11          	movzbl 0x11(%eax),%eax
c01048d1:	0f b6 c0             	movzbl %al,%eax
c01048d4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01048d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01048dc:	c7 04 24 00 94 10 c0 	movl   $0xc0109400,(%esp)
c01048e3:	e8 e4 dc ff ff       	call   c01025cc <printf>

        current_dev = search_device(pci_dev_list, RTL8139_VENDOR_ID, RTL8139_DEVICE_ID, &dev_counter);
c01048e8:	a1 24 02 11 c0       	mov    0xc0110224,%eax
c01048ed:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01048f0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01048f4:	c7 44 24 08 39 81 00 	movl   $0x8139,0x8(%esp)
c01048fb:	00 
c01048fc:	c7 44 24 04 ec 10 00 	movl   $0x10ec,0x4(%esp)
c0104903:	00 
c0104904:	89 04 24             	mov    %eax,(%esp)
c0104907:	e8 59 f3 ff ff       	call   c0103c65 <search_device>
c010490c:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
    rtl8139_devs = list_create();
    int dev_counter = 0;
    struct pci_dev *current_dev = search_device(pci_dev_list, RTL8139_VENDOR_ID, RTL8139_DEVICE_ID, &dev_counter);

    while(current_dev)
c010490f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104913:	75 97                	jne    c01048ac <INIT_RTL8139+0x40>
        printf("IRQ: %d Int-Lane: %d\n",current_dev->irq_num, current_dev->irq_pin);

        current_dev = search_device(pci_dev_list, RTL8139_VENDOR_ID, RTL8139_DEVICE_ID, &dev_counter);
    }

    printf("RTL8139 Devices: %d\n",dev_counter);
c0104915:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104918:	89 44 24 04          	mov    %eax,0x4(%esp)
c010491c:	c7 04 24 16 94 10 c0 	movl   $0xc0109416,(%esp)
c0104923:	e8 a4 dc ff ff       	call   c01025cc <printf>

}
c0104928:	c9                   	leave  
c0104929:	c3                   	ret    
	...

c010492c <load_elf>:
#include <process.h>
#include <thread.h>

extern pd_t *pd_current;

struct process *load_elf(void *image) {
c010492c:	55                   	push   %ebp
c010492d:	89 e5                	mov    %esp,%ebp
c010492f:	57                   	push   %edi
c0104930:	56                   	push   %esi
c0104931:	53                   	push   %ebx
c0104932:	83 ec 5c             	sub    $0x5c,%esp
	struct elf_header *header = image;
c0104935:	8b 45 08             	mov    0x8(%ebp),%eax
c0104938:	89 45 d8             	mov    %eax,-0x28(%ebp)
	struct elf_program_header *ph;

	if(header->ident[EI_MAG0] == ELF_MAG0 &&
c010493b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010493e:	0f b6 00             	movzbl (%eax),%eax
c0104941:	3c 7f                	cmp    $0x7f,%al
c0104943:	75 21                	jne    c0104966 <load_elf+0x3a>
	   header->ident[EI_MAG1] == ELF_MAG1 &&
c0104945:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104948:	0f b6 40 01          	movzbl 0x1(%eax),%eax

struct process *load_elf(void *image) {
	struct elf_header *header = image;
	struct elf_program_header *ph;

	if(header->ident[EI_MAG0] == ELF_MAG0 &&
c010494c:	3c 45                	cmp    $0x45,%al
c010494e:	75 16                	jne    c0104966 <load_elf+0x3a>
	   header->ident[EI_MAG1] == ELF_MAG1 &&
	   header->ident[EI_MAG2] == ELF_MAG2 &&
c0104950:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104953:	0f b6 40 02          	movzbl 0x2(%eax),%eax
struct process *load_elf(void *image) {
	struct elf_header *header = image;
	struct elf_program_header *ph;

	if(header->ident[EI_MAG0] == ELF_MAG0 &&
	   header->ident[EI_MAG1] == ELF_MAG1 &&
c0104957:	3c 4c                	cmp    $0x4c,%al
c0104959:	75 0b                	jne    c0104966 <load_elf+0x3a>
	   header->ident[EI_MAG2] == ELF_MAG2 &&
	   header->ident[EI_MAG3] == ELF_MAG3)
c010495b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010495e:	0f b6 40 03          	movzbl 0x3(%eax),%eax
	struct elf_header *header = image;
	struct elf_program_header *ph;

	if(header->ident[EI_MAG0] == ELF_MAG0 &&
	   header->ident[EI_MAG1] == ELF_MAG1 &&
	   header->ident[EI_MAG2] == ELF_MAG2 &&
c0104962:	3c 46                	cmp    $0x46,%al
c0104964:	74 16                	je     c010497c <load_elf+0x50>
	   header->ident[EI_MAG3] == ELF_MAG3)
	{
	} else {
		printf("Invalid ELF-Magic!\n");
c0104966:	c7 04 24 2b 94 10 c0 	movl   $0xc010942b,(%esp)
c010496d:	e8 7d e8 ff ff       	call   c01031ef <puts>
		return NULL;
c0104972:	b8 00 00 00 00       	mov    $0x0,%eax
c0104977:	e9 44 02 00 00       	jmp    c0104bc0 <load_elf+0x294>
	}

	int i,j;
	ph = (struct elf_program_header*) (image + header->ph_offset);
c010497c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010497f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0104982:	03 45 08             	add    0x8(%ebp),%eax
c0104985:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	struct process_state *proc = process_create("", "", PROCESS_ACTIVE, NULL);
c0104988:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010498f:	00 
c0104990:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0104997:	00 
c0104998:	c7 44 24 04 3e 94 10 	movl   $0xc010943e,0x4(%esp)
c010499f:	c0 
c01049a0:	c7 04 24 3e 94 10 c0 	movl   $0xc010943e,(%esp)
c01049a7:	e8 f7 06 00 00       	call   c01050a3 <process_create>
c01049ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	struct thread_state *new_thread = thread_create(proc, 3, header->entry, NULL, 0, NULL, NULL);
c01049af:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01049b2:	8b 40 18             	mov    0x18(%eax),%eax
c01049b5:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c01049bc:	00 
c01049bd:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c01049c4:	00 
c01049c5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01049cc:	00 
c01049cd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01049d4:	00 
c01049d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01049d9:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01049e0:	00 
c01049e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01049e4:	89 04 24             	mov    %eax,(%esp)
c01049e7:	e8 b0 1b 00 00       	call   c010659c <thread_create>
c01049ec:	89 45 d0             	mov    %eax,-0x30(%ebp)

	for(i = 0; i < header->ph_entry_count; i++, ph++) {
c01049ef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01049f6:	e9 af 01 00 00       	jmp    c0104baa <load_elf+0x27e>
		if(ph->type == EPT_LOAD) {
c01049fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049fe:	8b 00                	mov    (%eax),%eax
c0104a00:	83 f8 01             	cmp    $0x1,%eax
c0104a03:	0f 85 99 01 00 00    	jne    c0104ba2 <load_elf+0x276>
			int pages = NUM_PAGES(ph->mem_size);
c0104a09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a0c:	8b 40 14             	mov    0x14(%eax),%eax
c0104a0f:	05 ff 0f 00 00       	add    $0xfff,%eax
c0104a14:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104a19:	c1 e8 0c             	shr    $0xc,%eax
c0104a1c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uintptr_t dest_start = (uintptr_t) vaddr_find(pd_current, pages,
c0104a1f:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0104a24:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0104a2b:	00 
c0104a2c:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
c0104a33:	ff 
c0104a34:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
c0104a3b:	c0 
c0104a3c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104a3f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104a43:	89 04 24             	mov    %eax,(%esp)
c0104a46:	e8 3f ca ff ff       	call   c010148a <vaddr_find>
c0104a4b:	89 45 c8             	mov    %eax,-0x38(%ebp)
						MEMORY_LAYOUT_KERNEL_START, MEMORY_LAYOUT_KERNEL_END, PTE_WRITABLE);

			for(j = 0; j < pages; j++) {
c0104a4e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104a55:	e9 f6 00 00 00       	jmp    c0104b50 <load_elf+0x224>
				paddr_t paddr = (uintptr_t) pmm_alloc_page();
c0104a5a:	e8 c4 29 00 00       	call   c0107423 <pmm_alloc_page>
c0104a5f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
				vaddr_t vaddr = (uintptr_t) ph->virt_addr + j*PAGE_SIZE;
c0104a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a65:	8b 50 08             	mov    0x8(%eax),%edx
c0104a68:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104a6b:	c1 e0 0c             	shl    $0xc,%eax
c0104a6e:	01 d0                	add    %edx,%eax
c0104a70:	89 45 c0             	mov    %eax,-0x40(%ebp)
				uintptr_t src = (uintptr_t) image + ph->offset + j*PAGE_SIZE;
c0104a73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a76:	8b 50 04             	mov    0x4(%eax),%edx
c0104a79:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a7c:	01 c2                	add    %eax,%edx
c0104a7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104a81:	c1 e0 0c             	shl    $0xc,%eax
c0104a84:	01 d0                	add    %edx,%eax
c0104a86:	89 45 bc             	mov    %eax,-0x44(%ebp)
				uintptr_t dest = (uintptr_t) dest_start + j*PAGE_SIZE;
c0104a89:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104a8c:	c1 e0 0c             	shl    $0xc,%eax
c0104a8f:	03 45 c8             	add    -0x38(%ebp),%eax
c0104a92:	89 45 b8             	mov    %eax,-0x48(%ebp)

				pd_map(new_thread->pagedir, paddr, vaddr, PTE_WRITABLE | PTE_USER);
c0104a95:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104a98:	8b 40 08             	mov    0x8(%eax),%eax
c0104a9b:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0104aa2:	00 
c0104aa3:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104aa6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104aaa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104aad:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104ab1:	89 04 24             	mov    %eax,(%esp)
c0104ab4:	e8 a6 c5 ff ff       	call   c010105f <pd_map>
				pd_map(pd_current, paddr, dest, PTE_WRITABLE);
c0104ab9:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0104abe:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0104ac5:	00 
c0104ac6:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0104ac9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104acd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104ad0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104ad4:	89 04 24             	mov    %eax,(%esp)
c0104ad7:	e8 83 c5 ff ff       	call   c010105f <pd_map>

        			memcpy((void*) dest, (void*) src, PAGE_SIZE);
c0104adc:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0104adf:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104ae2:	bb 00 10 00 00       	mov    $0x1000,%ebx
c0104ae7:	89 c1                	mov    %eax,%ecx
c0104ae9:	83 e1 01             	and    $0x1,%ecx
c0104aec:	85 c9                	test   %ecx,%ecx
c0104aee:	74 0e                	je     c0104afe <load_elf+0x1d2>
c0104af0:	0f b6 0a             	movzbl (%edx),%ecx
c0104af3:	88 08                	mov    %cl,(%eax)
c0104af5:	83 c0 01             	add    $0x1,%eax
c0104af8:	83 c2 01             	add    $0x1,%edx
c0104afb:	83 eb 01             	sub    $0x1,%ebx
c0104afe:	89 c1                	mov    %eax,%ecx
c0104b00:	83 e1 02             	and    $0x2,%ecx
c0104b03:	85 c9                	test   %ecx,%ecx
c0104b05:	74 0f                	je     c0104b16 <load_elf+0x1ea>
c0104b07:	0f b7 0a             	movzwl (%edx),%ecx
c0104b0a:	66 89 08             	mov    %cx,(%eax)
c0104b0d:	83 c0 02             	add    $0x2,%eax
c0104b10:	83 c2 02             	add    $0x2,%edx
c0104b13:	83 eb 02             	sub    $0x2,%ebx
c0104b16:	89 d9                	mov    %ebx,%ecx
c0104b18:	c1 e9 02             	shr    $0x2,%ecx
c0104b1b:	89 c7                	mov    %eax,%edi
c0104b1d:	89 d6                	mov    %edx,%esi
c0104b1f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0104b21:	89 f2                	mov    %esi,%edx
c0104b23:	89 f8                	mov    %edi,%eax
c0104b25:	b9 00 00 00 00       	mov    $0x0,%ecx
c0104b2a:	89 de                	mov    %ebx,%esi
c0104b2c:	83 e6 02             	and    $0x2,%esi
c0104b2f:	85 f6                	test   %esi,%esi
c0104b31:	74 0b                	je     c0104b3e <load_elf+0x212>
c0104b33:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0104b37:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0104b3b:	83 c1 02             	add    $0x2,%ecx
c0104b3e:	83 e3 01             	and    $0x1,%ebx
c0104b41:	85 db                	test   %ebx,%ebx
c0104b43:	74 07                	je     c0104b4c <load_elf+0x220>
c0104b45:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0104b49:	88 14 08             	mov    %dl,(%eax,%ecx,1)
		if(ph->type == EPT_LOAD) {
			int pages = NUM_PAGES(ph->mem_size);
			uintptr_t dest_start = (uintptr_t) vaddr_find(pd_current, pages,
						MEMORY_LAYOUT_KERNEL_START, MEMORY_LAYOUT_KERNEL_END, PTE_WRITABLE);

			for(j = 0; j < pages; j++) {
c0104b4c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0104b50:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104b53:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0104b56:	0f 8c fe fe ff ff    	jl     c0104a5a <load_elf+0x12e>
				pd_map(new_thread->pagedir, paddr, vaddr, PTE_WRITABLE | PTE_USER);
				pd_map(pd_current, paddr, dest, PTE_WRITABLE);

        			memcpy((void*) dest, (void*) src, PAGE_SIZE);
      			}
      			memset((void*)dest_start + ph->file_size, 0, ph->mem_size - ph->file_size);
c0104b5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104b5f:	8b 50 14             	mov    0x14(%eax),%edx
c0104b62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104b65:	8b 40 10             	mov    0x10(%eax),%eax
c0104b68:	29 c2                	sub    %eax,%edx
c0104b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104b6d:	8b 40 10             	mov    0x10(%eax),%eax
c0104b70:	03 45 c8             	add    -0x38(%ebp),%eax
c0104b73:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104b77:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104b7e:	00 
c0104b7f:	89 04 24             	mov    %eax,(%esp)
c0104b82:	e8 e2 24 00 00       	call   c0107069 <memset>

      			pd_unmap_range(pd_current, dest_start, pages);
c0104b87:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104b8a:	a1 04 e0 10 c0       	mov    0xc010e004,%eax
c0104b8f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104b93:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104b96:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104b9a:	89 04 24             	mov    %eax,(%esp)
c0104b9d:	e8 cb c6 ff ff       	call   c010126d <pd_unmap_range>
	ph = (struct elf_program_header*) (image + header->ph_offset);

	struct process_state *proc = process_create("", "", PROCESS_ACTIVE, NULL);
	struct thread_state *new_thread = thread_create(proc, 3, header->entry, NULL, 0, NULL, NULL);

	for(i = 0; i < header->ph_entry_count; i++, ph++) {
c0104ba2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c0104ba6:	83 45 e4 20          	addl   $0x20,-0x1c(%ebp)
c0104baa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104bad:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0104bb1:	0f b7 c0             	movzwl %ax,%eax
c0104bb4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104bb7:	0f 8f 3e fe ff ff    	jg     c01049fb <load_elf+0xcf>

      			pd_unmap_range(pd_current, dest_start, pages);
    		}
  	}

	return proc;
c0104bbd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c0104bc0:	83 c4 5c             	add    $0x5c,%esp
c0104bc3:	5b                   	pop    %ebx
c0104bc4:	5e                   	pop    %esi
c0104bc5:	5f                   	pop    %edi
c0104bc6:	5d                   	pop    %ebp
c0104bc7:	c3                   	ret    

c0104bc8 <INIT_SCHEDULER>:

/**
 * Initiate the scheduler module
 */
void INIT_SCHEDULER(void)
{
c0104bc8:	55                   	push   %ebp
c0104bc9:	89 e5                	mov    %esp,%ebp
c0104bcb:	83 ec 28             	sub    $0x28,%esp
	set_GDT_entry(5, (uint32_t) &tss, sizeof(tss), 0x89, 0x8);
c0104bce:	b8 c0 c3 10 c0       	mov    $0xc010c3c0,%eax
c0104bd3:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%esp)
c0104bda:	00 
c0104bdb:	c7 44 24 0c 89 00 00 	movl   $0x89,0xc(%esp)
c0104be2:	00 
c0104be3:	c7 44 24 08 68 00 00 	movl   $0x68,0x8(%esp)
c0104bea:	00 
c0104beb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104bef:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104bf6:	e8 dd 02 00 00       	call   c0104ed8 <set_GDT_entry>
	load_gdt(5);
c0104bfb:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104c02:	e8 52 03 00 00       	call   c0104f59 <load_gdt>
	asm volatile("ltr %%ax" : : "a" (5 << 3));
c0104c07:	b8 28 00 00 00       	mov    $0x28,%eax
c0104c0c:	0f 00 d8             	ltr    %ax
	kernelstack = malloc(KERNEL_STACK_SIZE) + KERNEL_STACK_SIZE;
c0104c0f:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0104c16:	e8 c1 de ff ff       	call   c0102adc <malloc>
c0104c1b:	05 00 10 00 00       	add    $0x1000,%eax
c0104c20:	a3 38 02 11 c0       	mov    %eax,0xc0110238
	tss.esp0 = (uint32_t)kernelstack;
c0104c25:	a1 38 02 11 c0       	mov    0xc0110238,%eax
c0104c2a:	a3 c4 c3 10 c0       	mov    %eax,0xc010c3c4

    running_threads = list_create();
c0104c2f:	e8 18 32 00 00       	call   c0107e4c <list_create>
c0104c34:	a3 44 02 11 c0       	mov    %eax,0xc0110244
    process_list = list_create();
c0104c39:	e8 0e 32 00 00       	call   c0107e4c <list_create>
c0104c3e:	a3 80 e0 10 c0       	mov    %eax,0xc010e080
    zombie_list = list_create();
c0104c43:	e8 04 32 00 00       	call   c0107e4c <list_create>
c0104c48:	a3 84 e0 10 c0       	mov    %eax,0xc010e084
    kernel_state = process_create("Kernel INIT", "initiate system", PROCESS_ACTIVE, NULL);
c0104c4d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104c54:	00 
c0104c55:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0104c5c:	00 
c0104c5d:	c7 44 24 04 3f 94 10 	movl   $0xc010943f,0x4(%esp)
c0104c64:	c0 
c0104c65:	c7 04 24 4f 94 10 c0 	movl   $0xc010944f,(%esp)
c0104c6c:	e8 32 04 00 00       	call   c01050a3 <process_create>
c0104c71:	a3 3c 02 11 c0       	mov    %eax,0xc011023c
    current_thread = thread_create(kernel_state, KERNELMODE, 0, NULL, 0, 0,0);
c0104c76:	a1 3c 02 11 c0       	mov    0xc011023c,%eax
c0104c7b:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c0104c82:	00 
c0104c83:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c0104c8a:	00 
c0104c8b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0104c92:	00 
c0104c93:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104c9a:	00 
c0104c9b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104ca2:	00 
c0104ca3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104caa:	00 
c0104cab:	89 04 24             	mov    %eax,(%esp)
c0104cae:	e8 e9 18 00 00       	call   c010659c <thread_create>
c0104cb3:	a3 40 02 11 c0       	mov    %eax,0xc0110240
}
c0104cb8:	c9                   	leave  
c0104cb9:	c3                   	ret    

c0104cba <task_schedule>:
/**
 * performs context switches
 * @param process pointer to the process state
 */
struct cpu_state *task_schedule(struct cpu_state *cpu)
{
c0104cba:	55                   	push   %ebp
c0104cbb:	89 e5                	mov    %esp,%ebp
c0104cbd:	57                   	push   %edi
c0104cbe:	56                   	push   %esi
c0104cbf:	53                   	push   %ebx
c0104cc0:	83 ec 1c             	sub    $0x1c,%esp
    *current_thread->state = *cpu;
c0104cc3:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104cc8:	8b 10                	mov    (%eax),%edx
c0104cca:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ccd:	89 c3                	mov    %eax,%ebx
c0104ccf:	b8 12 00 00 00       	mov    $0x12,%eax
c0104cd4:	89 d7                	mov    %edx,%edi
c0104cd6:	89 de                	mov    %ebx,%esi
c0104cd8:	89 c1                	mov    %eax,%ecx
c0104cda:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    if(current_thread->flags & THREAD_ZOMBIE)
c0104cdc:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104ce1:	0f b7 40 10          	movzwl 0x10(%eax),%eax
c0104ce5:	0f b7 c0             	movzwl %ax,%eax
c0104ce8:	83 e0 08             	and    $0x8,%eax
c0104ceb:	85 c0                	test   %eax,%eax
c0104ced:	0f 84 de 00 00 00    	je     c0104dd1 <task_schedule+0x117>
    {
        thread_kill_sub(current_thread);
c0104cf3:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104cf8:	89 04 24             	mov    %eax,(%esp)
c0104cfb:	e8 99 1b 00 00       	call   c0106899 <thread_kill_sub>
        if(list_is_empty(running_threads))
c0104d00:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0104d05:	89 04 24             	mov    %eax,(%esp)
c0104d08:	e8 ee 34 00 00       	call   c01081fb <list_is_empty>
c0104d0d:	85 c0                	test   %eax,%eax
c0104d0f:	74 14                	je     c0104d25 <task_schedule+0x6b>
        {
            asm volatile("sti");
c0104d11:	fb                   	sti    
            while(list_is_empty(running_threads)){}
c0104d12:	90                   	nop
c0104d13:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0104d18:	89 04 24             	mov    %eax,(%esp)
c0104d1b:	e8 db 34 00 00       	call   c01081fb <list_is_empty>
c0104d20:	85 c0                	test   %eax,%eax
c0104d22:	75 ef                	jne    c0104d13 <task_schedule+0x59>
            asm volatile("cli");
c0104d24:	fa                   	cli    
        }

        list_set_first(running_threads);
c0104d25:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0104d2a:	89 04 24             	mov    %eax,(%esp)
c0104d2d:	e8 9e 34 00 00       	call   c01081d0 <list_set_first>
        current_thread = list_get_current(running_threads);
c0104d32:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0104d37:	89 04 24             	mov    %eax,(%esp)
c0104d3a:	e8 3e 34 00 00       	call   c010817d <list_get_current>
c0104d3f:	a3 40 02 11 c0       	mov    %eax,0xc0110240
        pd_switch(current_thread->pagedir);
c0104d44:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104d49:	8b 40 08             	mov    0x8(%eax),%eax
c0104d4c:	89 04 24             	mov    %eax,(%esp)
c0104d4f:	e8 85 c8 ff ff       	call   c01015d9 <pd_switch>
        memcpy(cpu, current_thread->state, sizeof(struct cpu_state));
c0104d54:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104d59:	8b 10                	mov    (%eax),%edx
c0104d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d5e:	bb 48 00 00 00       	mov    $0x48,%ebx
c0104d63:	89 c1                	mov    %eax,%ecx
c0104d65:	83 e1 01             	and    $0x1,%ecx
c0104d68:	85 c9                	test   %ecx,%ecx
c0104d6a:	74 0e                	je     c0104d7a <task_schedule+0xc0>
c0104d6c:	0f b6 0a             	movzbl (%edx),%ecx
c0104d6f:	88 08                	mov    %cl,(%eax)
c0104d71:	83 c0 01             	add    $0x1,%eax
c0104d74:	83 c2 01             	add    $0x1,%edx
c0104d77:	83 eb 01             	sub    $0x1,%ebx
c0104d7a:	89 c1                	mov    %eax,%ecx
c0104d7c:	83 e1 02             	and    $0x2,%ecx
c0104d7f:	85 c9                	test   %ecx,%ecx
c0104d81:	74 0f                	je     c0104d92 <task_schedule+0xd8>
c0104d83:	0f b7 0a             	movzwl (%edx),%ecx
c0104d86:	66 89 08             	mov    %cx,(%eax)
c0104d89:	83 c0 02             	add    $0x2,%eax
c0104d8c:	83 c2 02             	add    $0x2,%edx
c0104d8f:	83 eb 02             	sub    $0x2,%ebx
c0104d92:	89 d9                	mov    %ebx,%ecx
c0104d94:	c1 e9 02             	shr    $0x2,%ecx
c0104d97:	89 c7                	mov    %eax,%edi
c0104d99:	89 d6                	mov    %edx,%esi
c0104d9b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0104d9d:	89 f2                	mov    %esi,%edx
c0104d9f:	89 f8                	mov    %edi,%eax
c0104da1:	b9 00 00 00 00       	mov    $0x0,%ecx
c0104da6:	89 de                	mov    %ebx,%esi
c0104da8:	83 e6 02             	and    $0x2,%esi
c0104dab:	85 f6                	test   %esi,%esi
c0104dad:	74 0b                	je     c0104dba <task_schedule+0x100>
c0104daf:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0104db3:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0104db7:	83 c1 02             	add    $0x2,%ecx
c0104dba:	83 e3 01             	and    $0x1,%ebx
c0104dbd:	85 db                	test   %ebx,%ebx
c0104dbf:	0f 84 f9 00 00 00    	je     c0104ebe <task_schedule+0x204>
c0104dc5:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0104dc9:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c0104dcc:	e9 ed 00 00 00       	jmp    c0104ebe <task_schedule+0x204>
    }
    else if(current_thread->ticks == 0)
c0104dd1:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104dd6:	8b 40 0c             	mov    0xc(%eax),%eax
c0104dd9:	85 c0                	test   %eax,%eax
c0104ddb:	0f 85 cf 00 00 00    	jne    c0104eb0 <task_schedule+0x1f6>
    {
        current_thread->ticks = 10;
c0104de1:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104de6:	c7 40 0c 0a 00 00 00 	movl   $0xa,0xc(%eax)
        list_next(running_threads);
c0104ded:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0104df2:	89 04 24             	mov    %eax,(%esp)
c0104df5:	e8 91 33 00 00       	call   c010818b <list_next>
        if(list_is_last(running_threads))
c0104dfa:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0104dff:	89 04 24             	mov    %eax,(%esp)
c0104e02:	e8 b1 33 00 00       	call   c01081b8 <list_is_last>
c0104e07:	85 c0                	test   %eax,%eax
c0104e09:	74 0d                	je     c0104e18 <task_schedule+0x15e>
            list_set_first(running_threads);
c0104e0b:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0104e10:	89 04 24             	mov    %eax,(%esp)
c0104e13:	e8 b8 33 00 00       	call   c01081d0 <list_set_first>
        current_thread = list_get_current(running_threads);
c0104e18:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0104e1d:	89 04 24             	mov    %eax,(%esp)
c0104e20:	e8 58 33 00 00       	call   c010817d <list_get_current>
c0104e25:	a3 40 02 11 c0       	mov    %eax,0xc0110240
        pd_switch(current_thread->pagedir);
c0104e2a:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104e2f:	8b 40 08             	mov    0x8(%eax),%eax
c0104e32:	89 04 24             	mov    %eax,(%esp)
c0104e35:	e8 9f c7 ff ff       	call   c01015d9 <pd_switch>
        memcpy(cpu, current_thread->state, sizeof(struct cpu_state));
c0104e3a:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104e3f:	8b 10                	mov    (%eax),%edx
c0104e41:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e44:	bb 48 00 00 00       	mov    $0x48,%ebx
c0104e49:	89 c1                	mov    %eax,%ecx
c0104e4b:	83 e1 01             	and    $0x1,%ecx
c0104e4e:	85 c9                	test   %ecx,%ecx
c0104e50:	74 0e                	je     c0104e60 <task_schedule+0x1a6>
c0104e52:	0f b6 0a             	movzbl (%edx),%ecx
c0104e55:	88 08                	mov    %cl,(%eax)
c0104e57:	83 c0 01             	add    $0x1,%eax
c0104e5a:	83 c2 01             	add    $0x1,%edx
c0104e5d:	83 eb 01             	sub    $0x1,%ebx
c0104e60:	89 c1                	mov    %eax,%ecx
c0104e62:	83 e1 02             	and    $0x2,%ecx
c0104e65:	85 c9                	test   %ecx,%ecx
c0104e67:	74 0f                	je     c0104e78 <task_schedule+0x1be>
c0104e69:	0f b7 0a             	movzwl (%edx),%ecx
c0104e6c:	66 89 08             	mov    %cx,(%eax)
c0104e6f:	83 c0 02             	add    $0x2,%eax
c0104e72:	83 c2 02             	add    $0x2,%edx
c0104e75:	83 eb 02             	sub    $0x2,%ebx
c0104e78:	89 d9                	mov    %ebx,%ecx
c0104e7a:	c1 e9 02             	shr    $0x2,%ecx
c0104e7d:	89 c7                	mov    %eax,%edi
c0104e7f:	89 d6                	mov    %edx,%esi
c0104e81:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0104e83:	89 f2                	mov    %esi,%edx
c0104e85:	89 f8                	mov    %edi,%eax
c0104e87:	b9 00 00 00 00       	mov    $0x0,%ecx
c0104e8c:	89 de                	mov    %ebx,%esi
c0104e8e:	83 e6 02             	and    $0x2,%esi
c0104e91:	85 f6                	test   %esi,%esi
c0104e93:	74 0b                	je     c0104ea0 <task_schedule+0x1e6>
c0104e95:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0104e99:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0104e9d:	83 c1 02             	add    $0x2,%ecx
c0104ea0:	83 e3 01             	and    $0x1,%ebx
c0104ea3:	85 db                	test   %ebx,%ebx
c0104ea5:	74 17                	je     c0104ebe <task_schedule+0x204>
c0104ea7:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0104eab:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c0104eae:	eb 0e                	jmp    c0104ebe <task_schedule+0x204>
    }
    else
    {
        current_thread->ticks--;
c0104eb0:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0104eb5:	8b 50 0c             	mov    0xc(%eax),%edx
c0104eb8:	83 ea 01             	sub    $0x1,%edx
c0104ebb:	89 50 0c             	mov    %edx,0xc(%eax)
    }
	EOI(0);
c0104ebe:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0104ec5:	e8 4c 0a 00 00       	call   c0105916 <EOI>
	return cpu;
c0104eca:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0104ecd:	83 c4 1c             	add    $0x1c,%esp
c0104ed0:	5b                   	pop    %ebx
c0104ed1:	5e                   	pop    %esi
c0104ed2:	5f                   	pop    %edi
c0104ed3:	5d                   	pop    %ebp
c0104ed4:	c3                   	ret    
c0104ed5:	00 00                	add    %al,(%eax)
	...

c0104ed8 <set_GDT_entry>:
	@param size 	Segment size (Limit)
	@param access 	Access Settings
	@param flags	Flags
 */
void set_GDT_entry(int entry, uint32_t base, uint32_t size, uint8_t access, int8_t flags)
{
c0104ed8:	55                   	push   %ebp
c0104ed9:	89 e5                	mov    %esp,%ebp
c0104edb:	83 ec 08             	sub    $0x8,%esp
c0104ede:	8b 55 14             	mov    0x14(%ebp),%edx
c0104ee1:	8b 45 18             	mov    0x18(%ebp),%eax
c0104ee4:	88 55 fc             	mov    %dl,-0x4(%ebp)
c0104ee7:	88 45 f8             	mov    %al,-0x8(%ebp)
	GDT[entry].limit_low = (uint16_t)size;
c0104eea:	8b 45 10             	mov    0x10(%ebp),%eax
c0104eed:	89 c2                	mov    %eax,%edx
c0104eef:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef2:	66 89 14 c5 40 e0 10 	mov    %dx,-0x3fef1fc0(,%eax,8)
c0104ef9:	c0 
	GDT[entry].Base_low = (uint16_t)base;
c0104efa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104efd:	89 c2                	mov    %eax,%edx
c0104eff:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f02:	66 89 14 c5 42 e0 10 	mov    %dx,-0x3fef1fbe(,%eax,8)
c0104f09:	c0 
	GDT[entry].Base_middle = (uint8_t)(base >> 16);
c0104f0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f0d:	c1 e8 10             	shr    $0x10,%eax
c0104f10:	89 c2                	mov    %eax,%edx
c0104f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f15:	88 14 c5 44 e0 10 c0 	mov    %dl,-0x3fef1fbc(,%eax,8)
	GDT[entry].Access = access;
c0104f1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f1f:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0104f23:	88 14 c5 45 e0 10 c0 	mov    %dl,-0x3fef1fbb(,%eax,8)
	GDT[entry].limit_Flags= (uint8_t)((flags << 4) | (size >> 16));
c0104f2a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0104f2e:	89 c2                	mov    %eax,%edx
c0104f30:	c1 e2 04             	shl    $0x4,%edx
c0104f33:	8b 45 10             	mov    0x10(%ebp),%eax
c0104f36:	c1 e8 10             	shr    $0x10,%eax
c0104f39:	09 c2                	or     %eax,%edx
c0104f3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f3e:	88 14 c5 46 e0 10 c0 	mov    %dl,-0x3fef1fba(,%eax,8)
	GDT[entry].base_high = (uint8_t)(base >> 24);
c0104f45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f48:	c1 e8 18             	shr    $0x18,%eax
c0104f4b:	89 c2                	mov    %eax,%edx
c0104f4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f50:	88 14 c5 47 e0 10 c0 	mov    %dl,-0x3fef1fb9(,%eax,8)
}
c0104f57:	c9                   	leave  
c0104f58:	c3                   	ret    

c0104f59 <load_gdt>:
/**
	@brief Load GDT into register
	@param last_entry last entry
 */
void load_gdt(uint16_t last_entry)
{
c0104f59:	55                   	push   %ebp
c0104f5a:	89 e5                	mov    %esp,%ebp
c0104f5c:	83 ec 04             	sub    $0x4,%esp
c0104f5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f62:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdtp.limit = ((last_entry + 1) * 8) - 1;
c0104f66:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0104f6a:	83 c0 01             	add    $0x1,%eax
c0104f6d:	c1 e0 03             	shl    $0x3,%eax
c0104f70:	83 e8 01             	sub    $0x1,%eax
c0104f73:	66 a3 78 e0 10 c0    	mov    %ax,0xc010e078
	gdtp.base = GDT;
c0104f79:	c7 05 7a e0 10 c0 40 	movl   $0xc010e040,0xc010e07a
c0104f80:	e0 10 c0 
	asm volatile("lgdt %0"::"m" (gdtp));
c0104f83:	0f 01 15 78 e0 10 c0 	lgdtl  0xc010e078
}
c0104f8a:	c9                   	leave  
c0104f8b:	c3                   	ret    

c0104f8c <INIT_GDT>:

void INIT_GDT(void)
{
c0104f8c:	55                   	push   %ebp
c0104f8d:	89 e5                	mov    %esp,%ebp
c0104f8f:	83 ec 14             	sub    $0x14,%esp
	set_GDT_entry(0,0,0,0,0);
c0104f92:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0104f99:	00 
c0104f9a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0104fa1:	00 
c0104fa2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104fa9:	00 
c0104faa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104fb1:	00 
c0104fb2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0104fb9:	e8 1a ff ff ff       	call   c0104ed8 <set_GDT_entry>
	set_GDT_entry(1,0,0xFFFFF,0x9A,0xC);
c0104fbe:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c0104fc5:	00 
c0104fc6:	c7 44 24 0c 9a 00 00 	movl   $0x9a,0xc(%esp)
c0104fcd:	00 
c0104fce:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c0104fd5:	00 
c0104fd6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104fdd:	00 
c0104fde:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104fe5:	e8 ee fe ff ff       	call   c0104ed8 <set_GDT_entry>
	set_GDT_entry(2,0,0xFFFFF,0x92,0xC);
c0104fea:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c0104ff1:	00 
c0104ff2:	c7 44 24 0c 92 00 00 	movl   $0x92,0xc(%esp)
c0104ff9:	00 
c0104ffa:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c0105001:	00 
c0105002:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105009:	00 
c010500a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0105011:	e8 c2 fe ff ff       	call   c0104ed8 <set_GDT_entry>
	set_GDT_entry(3,0,0xfffff,0xFA,0xC);
c0105016:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c010501d:	00 
c010501e:	c7 44 24 0c fa 00 00 	movl   $0xfa,0xc(%esp)
c0105025:	00 
c0105026:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c010502d:	00 
c010502e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105035:	00 
c0105036:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010503d:	e8 96 fe ff ff       	call   c0104ed8 <set_GDT_entry>
	set_GDT_entry(4,0,0xfffff,0xF2,0xC);
c0105042:	c7 44 24 10 0c 00 00 	movl   $0xc,0x10(%esp)
c0105049:	00 
c010504a:	c7 44 24 0c f2 00 00 	movl   $0xf2,0xc(%esp)
c0105051:	00 
c0105052:	c7 44 24 08 ff ff 0f 	movl   $0xfffff,0x8(%esp)
c0105059:	00 
c010505a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105061:	00 
c0105062:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0105069:	e8 6a fe ff ff       	call   c0104ed8 <set_GDT_entry>
	load_gdt(4);
c010506e:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0105075:	e8 df fe ff ff       	call   c0104f59 <load_gdt>
	asm volatile(
c010507a:	66 b8 10 00          	mov    $0x10,%ax
c010507e:	8e d8                	mov    %eax,%ds
c0105080:	8e c0                	mov    %eax,%es
c0105082:	8e e0                	mov    %eax,%fs
c0105084:	8e e8                	mov    %eax,%gs
c0105086:	8e d0                	mov    %eax,%ss
c0105088:	ea 8f 50 10 c0 08 00 	ljmp   $0x8,$0xc010508f

c010508f <.1>:
		"mov %ax, %gs;"
		"mov %ax, %ss;"
		"ljmp $0x8, $.1;"
		".1:;"
	);
}
c010508f:	c9                   	leave  
c0105090:	c3                   	ret    
c0105091:	00 00                	add    %al,(%eax)
	...

c0105094 <min>:
 * @param a     inputvalue
 * @param b     inputvalue
 * @return the smallest inputvalue
 */
inline int min(int a, int b)
{
c0105094:	55                   	push   %ebp
c0105095:	89 e5                	mov    %esp,%ebp
    return (a < b) ? a : b;
c0105097:	8b 45 08             	mov    0x8(%ebp),%eax
c010509a:	39 45 0c             	cmp    %eax,0xc(%ebp)
c010509d:	0f 4e 45 0c          	cmovle 0xc(%ebp),%eax
}
c01050a1:	5d                   	pop    %ebp
c01050a2:	c3                   	ret    

c01050a3 <process_create>:
 * @param flags     process flags (activ, freezed, zombies)
 * @param parent    pointer to the parent process struct (NULL: Kernel Init = parent)
 * @return
 */
struct process_state *process_create(const char *name, const char *desc, uint16_t flags,struct process_state *parent)
{
c01050a3:	55                   	push   %ebp
c01050a4:	89 e5                	mov    %esp,%ebp
c01050a6:	57                   	push   %edi
c01050a7:	83 ec 34             	sub    $0x34,%esp
c01050aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01050ad:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)

    struct process_state *state = malloc(sizeof(struct process_state));
c01050b1:	c7 04 24 34 00 00 00 	movl   $0x34,(%esp)
c01050b8:	e8 1f da ff ff       	call   c0102adc <malloc>
c01050bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int string_len = min(strlen(name), 255);
c01050c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01050c3:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
c01050ca:	89 c2                	mov    %eax,%edx
c01050cc:	b8 00 00 00 00       	mov    $0x0,%eax
c01050d1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01050d4:	89 d7                	mov    %edx,%edi
c01050d6:	f2 ae                	repnz scas %es:(%edi),%al
c01050d8:	89 c8                	mov    %ecx,%eax
c01050da:	f7 d0                	not    %eax
c01050dc:	83 e8 01             	sub    $0x1,%eax
c01050df:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c01050e6:	00 
c01050e7:	89 04 24             	mov    %eax,(%esp)
c01050ea:	e8 a5 ff ff ff       	call   c0105094 <min>
c01050ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    state->name = (char *) malloc(string_len + 1);
c01050f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050f5:	83 c0 01             	add    $0x1,%eax
c01050f8:	89 04 24             	mov    %eax,(%esp)
c01050fb:	e8 dc d9 ff ff       	call   c0102adc <malloc>
c0105100:	89 c2                	mov    %eax,%edx
c0105102:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105105:	89 50 04             	mov    %edx,0x4(%eax)
    strncpy(state->name, name, string_len);
c0105108:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010510b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010510e:	8b 40 04             	mov    0x4(%eax),%eax
c0105111:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105115:	8b 55 08             	mov    0x8(%ebp),%edx
c0105118:	89 54 24 04          	mov    %edx,0x4(%esp)
c010511c:	89 04 24             	mov    %eax,(%esp)
c010511f:	e8 f4 19 00 00       	call   c0106b18 <strncpy>
    state->name[string_len + 1] = 0;
c0105124:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105127:	8b 40 04             	mov    0x4(%eax),%eax
c010512a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010512d:	83 c2 01             	add    $0x1,%edx
c0105130:	01 d0                	add    %edx,%eax
c0105132:	c6 00 00             	movb   $0x0,(%eax)
    string_len = min(strlen(desc), 255);
c0105135:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105138:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
c010513f:	89 c2                	mov    %eax,%edx
c0105141:	b8 00 00 00 00       	mov    $0x0,%eax
c0105146:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105149:	89 d7                	mov    %edx,%edi
c010514b:	f2 ae                	repnz scas %es:(%edi),%al
c010514d:	89 c8                	mov    %ecx,%eax
c010514f:	f7 d0                	not    %eax
c0105151:	83 e8 01             	sub    $0x1,%eax
c0105154:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c010515b:	00 
c010515c:	89 04 24             	mov    %eax,(%esp)
c010515f:	e8 30 ff ff ff       	call   c0105094 <min>
c0105164:	89 45 f0             	mov    %eax,-0x10(%ebp)
    state->desc = (char *) malloc(string_len + 1);
c0105167:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010516a:	83 c0 01             	add    $0x1,%eax
c010516d:	89 04 24             	mov    %eax,(%esp)
c0105170:	e8 67 d9 ff ff       	call   c0102adc <malloc>
c0105175:	89 c2                	mov    %eax,%edx
c0105177:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010517a:	89 50 08             	mov    %edx,0x8(%eax)
    strncpy(state->desc, desc, string_len);
c010517d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105180:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105183:	8b 40 08             	mov    0x8(%eax),%eax
c0105186:	89 54 24 08          	mov    %edx,0x8(%esp)
c010518a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010518d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105191:	89 04 24             	mov    %eax,(%esp)
c0105194:	e8 7f 19 00 00       	call   c0106b18 <strncpy>
    state->desc[string_len + 1] = 0;
c0105199:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010519c:	8b 40 08             	mov    0x8(%eax),%eax
c010519f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01051a2:	83 c2 01             	add    $0x1,%edx
c01051a5:	01 d0                	add    %edx,%eax
c01051a7:	c6 00 00             	movb   $0x0,(%eax)
    state->flags = flags;
c01051aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051ad:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01051b1:	66 89 50 30          	mov    %dx,0x30(%eax)
    state->files = list_create();
c01051b5:	e8 92 2c 00 00       	call   c0107e4c <list_create>
c01051ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01051bd:	89 42 14             	mov    %eax,0x14(%edx)
    state->cwd = root;
c01051c0:	8b 15 08 e0 10 c0    	mov    0xc010e008,%edx
c01051c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051c9:	89 50 10             	mov    %edx,0x10(%eax)
    state->children = list_create();
c01051cc:	e8 7b 2c 00 00       	call   c0107e4c <list_create>
c01051d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01051d4:	89 42 2c             	mov    %eax,0x2c(%edx)
    state->zombie_tids = list_create();
c01051d7:	e8 70 2c 00 00       	call   c0107e4c <list_create>
c01051dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01051df:	89 42 28             	mov    %eax,0x28(%edx)
    state->threads = list_create();
c01051e2:	e8 65 2c 00 00       	call   c0107e4c <list_create>
c01051e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01051ea:	89 42 1c             	mov    %eax,0x1c(%edx)
    state->ports = list_create();
c01051ed:	e8 5a 2c 00 00       	call   c0107e4c <list_create>
c01051f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01051f5:	89 42 18             	mov    %eax,0x18(%edx)
    state->tid_counter = 0;
c01051f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051fb:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)

    if (parent == NULL)
c0105202:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0105206:	75 0e                	jne    c0105216 <process_create+0x173>
        state->parent = kernel_state;
c0105208:	8b 15 3c 02 11 c0    	mov    0xc011023c,%edx
c010520e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105211:	89 50 0c             	mov    %edx,0xc(%eax)
c0105214:	eb 09                	jmp    c010521f <process_create+0x17c>
    else
        state->parent = parent;
c0105216:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105219:	8b 55 14             	mov    0x14(%ebp),%edx
c010521c:	89 50 0c             	mov    %edx,0xc(%eax)

    if (list_is_empty(zombie_list))
c010521f:	a1 84 e0 10 c0       	mov    0xc010e084,%eax
c0105224:	89 04 24             	mov    %eax,(%esp)
c0105227:	e8 cf 2f 00 00       	call   c01081fb <list_is_empty>
c010522c:	85 c0                	test   %eax,%eax
c010522e:	74 14                	je     c0105244 <process_create+0x1a1>
    {
        state->pid = pid_counter++;
c0105230:	a1 28 c4 10 c0       	mov    0xc010c428,%eax
c0105235:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105238:	89 02                	mov    %eax,(%edx)
c010523a:	83 c0 01             	add    $0x1,%eax
c010523d:	a3 28 c4 10 c0       	mov    %eax,0xc010c428
c0105242:	eb 14                	jmp    c0105258 <process_create+0x1b5>
    }
    else
    {
        state->pid = (pid_t) list_pop_front(zombie_list);
c0105244:	a1 84 e0 10 c0       	mov    0xc010e084,%eax
c0105249:	89 04 24             	mov    %eax,(%esp)
c010524c:	e8 b0 2d 00 00       	call   c0108001 <list_pop_front>
c0105251:	89 c2                	mov    %eax,%edx
c0105253:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105256:	89 10                	mov    %edx,(%eax)
    }


    asm volatile("cli");
c0105258:	fa                   	cli    

        if(state->pid != 1)
c0105259:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010525c:	8b 00                	mov    (%eax),%eax
c010525e:	83 f8 01             	cmp    $0x1,%eax
c0105261:	74 39                	je     c010529c <process_create+0x1f9>
        {
            struct child *new_child = malloc(sizeof(struct child));
c0105263:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010526a:	e8 6d d8 ff ff       	call   c0102adc <malloc>
c010526f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            new_child->process = state;
c0105272:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105275:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105278:	89 50 04             	mov    %edx,0x4(%eax)
            new_child->return_value = 0;
c010527b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010527e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
            list_push_front(state->parent->children, new_child);
c0105284:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105287:	8b 40 0c             	mov    0xc(%eax),%eax
c010528a:	8b 40 2c             	mov    0x2c(%eax),%eax
c010528d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105290:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105294:	89 04 24             	mov    %eax,(%esp)
c0105297:	e8 f8 2c 00 00       	call   c0107f94 <list_push_front>
        }

        list_push_front(process_list, state);
c010529c:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c01052a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01052a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01052a8:	89 04 24             	mov    %eax,(%esp)
c01052ab:	e8 e4 2c 00 00       	call   c0107f94 <list_push_front>

    asm volatile("sti");
c01052b0:	fb                   	sti    

    return state;
c01052b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01052b4:	83 c4 34             	add    $0x34,%esp
c01052b7:	5f                   	pop    %edi
c01052b8:	5d                   	pop    %ebp
c01052b9:	c3                   	ret    

c01052ba <process_kill>:
/**
 * kills a process
 * @param process pointer to the process state
 */
void process_kill(struct process_state *process)
{
c01052ba:	55                   	push   %ebp
c01052bb:	89 e5                	mov    %esp,%ebp
c01052bd:	83 ec 28             	sub    $0x28,%esp
    asm volatile("cli");
c01052c0:	fa                   	cli    
    list_set_first(process->threads);
c01052c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01052c4:	8b 40 1c             	mov    0x1c(%eax),%eax
c01052c7:	89 04 24             	mov    %eax,(%esp)
c01052ca:	e8 01 2f 00 00       	call   c01081d0 <list_set_first>

    while(!list_is_empty(process->threads))
c01052cf:	eb 51                	jmp    c0105322 <process_kill+0x68>
    {
        struct thread_state *thread = list_pop_front(process->threads);
c01052d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01052d4:	8b 40 1c             	mov    0x1c(%eax),%eax
c01052d7:	89 04 24             	mov    %eax,(%esp)
c01052da:	e8 22 2d 00 00       	call   c0108001 <list_pop_front>
c01052df:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(thread == current_thread)
c01052e2:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01052e7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01052ea:	75 2b                	jne    c0105317 <process_kill+0x5d>
        {
            current_thread->flags |= THREAD_ZOMBIE;
c01052ec:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01052f1:	8b 15 40 02 11 c0    	mov    0xc0110240,%edx
c01052f7:	0f b7 52 10          	movzwl 0x10(%edx),%edx
c01052fb:	83 ca 08             	or     $0x8,%edx
c01052fe:	66 89 50 10          	mov    %dx,0x10(%eax)
            process->flags |= PROCESS_ZOMBIE;
c0105302:	8b 45 08             	mov    0x8(%ebp),%eax
c0105305:	0f b7 40 30          	movzwl 0x30(%eax),%eax
c0105309:	89 c2                	mov    %eax,%edx
c010530b:	83 ca 04             	or     $0x4,%edx
c010530e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105311:	66 89 50 30          	mov    %dx,0x30(%eax)
c0105315:	eb 0b                	jmp    c0105322 <process_kill+0x68>
        }
        else
            thread_kill_sub(thread);
c0105317:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010531a:	89 04 24             	mov    %eax,(%esp)
c010531d:	e8 77 15 00 00       	call   c0106899 <thread_kill_sub>
void process_kill(struct process_state *process)
{
    asm volatile("cli");
    list_set_first(process->threads);

    while(!list_is_empty(process->threads))
c0105322:	8b 45 08             	mov    0x8(%ebp),%eax
c0105325:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105328:	89 04 24             	mov    %eax,(%esp)
c010532b:	e8 cb 2e 00 00       	call   c01081fb <list_is_empty>
c0105330:	85 c0                	test   %eax,%eax
c0105332:	74 9d                	je     c01052d1 <process_kill+0x17>
        }
        else
            thread_kill_sub(thread);
    }

    list_set_first(process->children);
c0105334:	8b 45 08             	mov    0x8(%ebp),%eax
c0105337:	8b 40 2c             	mov    0x2c(%eax),%eax
c010533a:	89 04 24             	mov    %eax,(%esp)
c010533d:	e8 8e 2e 00 00       	call   c01081d0 <list_set_first>
    while(!list_is_empty(process->children))
c0105342:	eb 2a                	jmp    c010536e <process_kill+0xb4>
    {
        struct child *current_child = list_pop_front(process->children);
c0105344:	8b 45 08             	mov    0x8(%ebp),%eax
c0105347:	8b 40 2c             	mov    0x2c(%eax),%eax
c010534a:	89 04 24             	mov    %eax,(%esp)
c010534d:	e8 af 2c 00 00       	call   c0108001 <list_pop_front>
c0105352:	89 45 f0             	mov    %eax,-0x10(%ebp)
        process_kill(current_child->process);
c0105355:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105358:	8b 40 04             	mov    0x4(%eax),%eax
c010535b:	89 04 24             	mov    %eax,(%esp)
c010535e:	e8 57 ff ff ff       	call   c01052ba <process_kill>
        free(current_child);
c0105363:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105366:	89 04 24             	mov    %eax,(%esp)
c0105369:	e8 89 d7 ff ff       	call   c0102af7 <free>
        else
            thread_kill_sub(thread);
    }

    list_set_first(process->children);
    while(!list_is_empty(process->children))
c010536e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105371:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105374:	89 04 24             	mov    %eax,(%esp)
c0105377:	e8 7f 2e 00 00       	call   c01081fb <list_is_empty>
c010537c:	85 c0                	test   %eax,%eax
c010537e:	74 c4                	je     c0105344 <process_kill+0x8a>
        struct child *current_child = list_pop_front(process->children);
        process_kill(current_child->process);
        free(current_child);
    }

    list_destroy(&process->ports);
c0105380:	8b 45 08             	mov    0x8(%ebp),%eax
c0105383:	83 c0 18             	add    $0x18,%eax
c0105386:	89 04 24             	mov    %eax,(%esp)
c0105389:	e8 1d 2b 00 00       	call   c0107eab <list_destroy>
    list_destroy(&process->zombie_tids);
c010538e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105391:	83 c0 28             	add    $0x28,%eax
c0105394:	89 04 24             	mov    %eax,(%esp)
c0105397:	e8 0f 2b 00 00       	call   c0107eab <list_destroy>

    list_set_first(process_list);
c010539c:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c01053a1:	89 04 24             	mov    %eax,(%esp)
c01053a4:	e8 27 2e 00 00       	call   c01081d0 <list_set_first>

    while(!list_is_last(process_list))
c01053a9:	eb 2e                	jmp    c01053d9 <process_kill+0x11f>
    {
        if(((struct process_state *)list_get_current(process_list)) == process)
c01053ab:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c01053b0:	89 04 24             	mov    %eax,(%esp)
c01053b3:	e8 c5 2d 00 00       	call   c010817d <list_get_current>
c01053b8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01053bb:	75 0f                	jne    c01053cc <process_kill+0x112>
        {
            list_remove(process_list);
c01053bd:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c01053c2:	89 04 24             	mov    %eax,(%esp)
c01053c5:	e8 31 2d 00 00       	call   c01080fb <list_remove>
            break;
c01053ca:	eb 1e                	jmp    c01053ea <process_kill+0x130>
        }
        list_next(process_list);
c01053cc:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c01053d1:	89 04 24             	mov    %eax,(%esp)
c01053d4:	e8 b2 2d 00 00       	call   c010818b <list_next>
    list_destroy(&process->ports);
    list_destroy(&process->zombie_tids);

    list_set_first(process_list);

    while(!list_is_last(process_list))
c01053d9:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c01053de:	89 04 24             	mov    %eax,(%esp)
c01053e1:	e8 d2 2d 00 00       	call   c01081b8 <list_is_last>
c01053e6:	85 c0                	test   %eax,%eax
c01053e8:	74 c1                	je     c01053ab <process_kill+0xf1>
            break;
        }
        list_next(process_list);
    }

    free(process->name);
c01053ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01053ed:	8b 40 04             	mov    0x4(%eax),%eax
c01053f0:	89 04 24             	mov    %eax,(%esp)
c01053f3:	e8 ff d6 ff ff       	call   c0102af7 <free>
    free(process->desc);
c01053f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01053fb:	8b 40 08             	mov    0x8(%eax),%eax
c01053fe:	89 04 24             	mov    %eax,(%esp)
c0105401:	e8 f1 d6 ff ff       	call   c0102af7 <free>

    if(! (process->flags & PROCESS_ZOMBIE) )
c0105406:	8b 45 08             	mov    0x8(%ebp),%eax
c0105409:	0f b7 40 30          	movzwl 0x30(%eax),%eax
c010540d:	0f b7 c0             	movzwl %ax,%eax
c0105410:	83 e0 04             	and    $0x4,%eax
c0105413:	85 c0                	test   %eax,%eax
c0105415:	75 2a                	jne    c0105441 <process_kill+0x187>
    {
        free(process);
c0105417:	8b 45 08             	mov    0x8(%ebp),%eax
c010541a:	89 04 24             	mov    %eax,(%esp)
c010541d:	e8 d5 d6 ff ff       	call   c0102af7 <free>
        list_set_first(running_threads);
c0105422:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0105427:	89 04 24             	mov    %eax,(%esp)
c010542a:	e8 a1 2d 00 00       	call   c01081d0 <list_set_first>
        current_thread = list_get_current(running_threads);
c010542f:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c0105434:	89 04 24             	mov    %eax,(%esp)
c0105437:	e8 41 2d 00 00       	call   c010817d <list_get_current>
c010543c:	a3 40 02 11 c0       	mov    %eax,0xc0110240
    }
    asm volatile("sti");
c0105441:	fb                   	sti    
}
c0105442:	c9                   	leave  
c0105443:	c3                   	ret    

c0105444 <process_find>:
 * finds a process by ID
 * @param pid Process ID
 * @return process state pointer or NULL if the process does not exist
 */
struct process_state *process_find(pid_t pid)
{
c0105444:	55                   	push   %ebp
c0105445:	89 e5                	mov    %esp,%ebp
c0105447:	83 ec 18             	sub    $0x18,%esp
    list_set_first(process_list);
c010544a:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c010544f:	89 04 24             	mov    %eax,(%esp)
c0105452:	e8 79 2d 00 00       	call   c01081d0 <list_set_first>
    while(!list_is_last(process_list))
c0105457:	eb 30                	jmp    c0105489 <process_find+0x45>
    {
        if(((struct process_state *)list_get_current(process_list))->pid == pid)
c0105459:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c010545e:	89 04 24             	mov    %eax,(%esp)
c0105461:	e8 17 2d 00 00       	call   c010817d <list_get_current>
c0105466:	8b 00                	mov    (%eax),%eax
c0105468:	3b 45 08             	cmp    0x8(%ebp),%eax
c010546b:	75 0f                	jne    c010547c <process_find+0x38>
        {
            return (struct process_state *)list_get_current(process_list);
c010546d:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c0105472:	89 04 24             	mov    %eax,(%esp)
c0105475:	e8 03 2d 00 00       	call   c010817d <list_get_current>
c010547a:	eb 23                	jmp    c010549f <process_find+0x5b>
        }
        list_next(process_list);
c010547c:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c0105481:	89 04 24             	mov    %eax,(%esp)
c0105484:	e8 02 2d 00 00       	call   c010818b <list_next>
 * @return process state pointer or NULL if the process does not exist
 */
struct process_state *process_find(pid_t pid)
{
    list_set_first(process_list);
    while(!list_is_last(process_list))
c0105489:	a1 80 e0 10 c0       	mov    0xc010e080,%eax
c010548e:	89 04 24             	mov    %eax,(%esp)
c0105491:	e8 22 2d 00 00       	call   c01081b8 <list_is_last>
c0105496:	85 c0                	test   %eax,%eax
c0105498:	74 bf                	je     c0105459 <process_find+0x15>
        {
            return (struct process_state *)list_get_current(process_list);
        }
        list_next(process_list);
    }
    return 0;
c010549a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010549f:	c9                   	leave  
c01054a0:	c3                   	ret    

c01054a1 <exit>:
/**
 * terminates the current process (linux function for the API)
 * @param cpu registers of the corrent process
 */
void exit(struct cpu_state **cpu)
{
c01054a1:	55                   	push   %ebp
c01054a2:	89 e5                	mov    %esp,%ebp
c01054a4:	83 ec 28             	sub    $0x28,%esp
    list_set_first(current_thread->process->parent->children);
c01054a7:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01054ac:	8b 40 04             	mov    0x4(%eax),%eax
c01054af:	8b 40 0c             	mov    0xc(%eax),%eax
c01054b2:	8b 40 2c             	mov    0x2c(%eax),%eax
c01054b5:	89 04 24             	mov    %eax,(%esp)
c01054b8:	e8 13 2d 00 00       	call   c01081d0 <list_set_first>
    while(list_is_last(current_thread->process->parent->children))
c01054bd:	eb 52                	jmp    c0105511 <exit+0x70>
    {
        struct child *current_child = list_get_current(current_thread->process->parent->children);
c01054bf:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01054c4:	8b 40 04             	mov    0x4(%eax),%eax
c01054c7:	8b 40 0c             	mov    0xc(%eax),%eax
c01054ca:	8b 40 2c             	mov    0x2c(%eax),%eax
c01054cd:	89 04 24             	mov    %eax,(%esp)
c01054d0:	e8 a8 2c 00 00       	call   c010817d <list_get_current>
c01054d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if(current_child->process == current_thread->process)
c01054d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054db:	8b 50 04             	mov    0x4(%eax),%edx
c01054de:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01054e3:	8b 40 04             	mov    0x4(%eax),%eax
c01054e6:	39 c2                	cmp    %eax,%edx
c01054e8:	75 11                	jne    c01054fb <exit+0x5a>
        {
            current_child->return_value = (*cpu)->ebx;
c01054ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01054ed:	8b 00                	mov    (%eax),%eax
c01054ef:	8b 40 1c             	mov    0x1c(%eax),%eax
c01054f2:	89 c2                	mov    %eax,%edx
c01054f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054f7:	89 10                	mov    %edx,(%eax)
            break;
c01054f9:	eb 30                	jmp    c010552b <exit+0x8a>
        }
        list_next(current_thread->process->parent->children);
c01054fb:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0105500:	8b 40 04             	mov    0x4(%eax),%eax
c0105503:	8b 40 0c             	mov    0xc(%eax),%eax
c0105506:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105509:	89 04 24             	mov    %eax,(%esp)
c010550c:	e8 7a 2c 00 00       	call   c010818b <list_next>
 * @param cpu registers of the corrent process
 */
void exit(struct cpu_state **cpu)
{
    list_set_first(current_thread->process->parent->children);
    while(list_is_last(current_thread->process->parent->children))
c0105511:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0105516:	8b 40 04             	mov    0x4(%eax),%eax
c0105519:	8b 40 0c             	mov    0xc(%eax),%eax
c010551c:	8b 40 2c             	mov    0x2c(%eax),%eax
c010551f:	89 04 24             	mov    %eax,(%esp)
c0105522:	e8 91 2c 00 00       	call   c01081b8 <list_is_last>
c0105527:	85 c0                	test   %eax,%eax
c0105529:	75 94                	jne    c01054bf <exit+0x1e>
            break;
        }
        list_next(current_thread->process->parent->children);
    }

    process_kill(current_thread->process);
c010552b:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0105530:	8b 40 04             	mov    0x4(%eax),%eax
c0105533:	89 04 24             	mov    %eax,(%esp)
c0105536:	e8 7f fd ff ff       	call   c01052ba <process_kill>
    *cpu = task_schedule(*cpu);
c010553b:	8b 45 08             	mov    0x8(%ebp),%eax
c010553e:	8b 00                	mov    (%eax),%eax
c0105540:	89 04 24             	mov    %eax,(%esp)
c0105543:	e8 72 f7 ff ff       	call   c0104cba <task_schedule>
c0105548:	8b 55 08             	mov    0x8(%ebp),%edx
c010554b:	89 02                	mov    %eax,(%edx)
}
c010554d:	c9                   	leave  
c010554e:	c3                   	ret    

c010554f <fork>:
/**
 * creates a new child process (linux function for the API)
 * @param cpu registers of the corrent process
 */
void fork(struct cpu_state **cpu)
{
c010554f:	55                   	push   %ebp
c0105550:	89 e5                	mov    %esp,%ebp
c0105552:	57                   	push   %edi
c0105553:	56                   	push   %esi
c0105554:	53                   	push   %ebx
c0105555:	83 ec 4c             	sub    $0x4c,%esp
    struct process_state *new_process = process_create(current_thread->process->name ,current_thread->process->desc ,current_thread->process->flags ,current_thread->process);
c0105558:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c010555d:	8b 58 04             	mov    0x4(%eax),%ebx
c0105560:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0105565:	8b 40 04             	mov    0x4(%eax),%eax
c0105568:	0f b7 40 30          	movzwl 0x30(%eax),%eax
c010556c:	0f b7 c8             	movzwl %ax,%ecx
c010556f:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0105574:	8b 40 04             	mov    0x4(%eax),%eax
c0105577:	8b 50 08             	mov    0x8(%eax),%edx
c010557a:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c010557f:	8b 40 04             	mov    0x4(%eax),%eax
c0105582:	8b 40 04             	mov    0x4(%eax),%eax
c0105585:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0105589:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010558d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105591:	89 04 24             	mov    %eax,(%esp)
c0105594:	e8 0a fb ff ff       	call   c01050a3 <process_create>
c0105599:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct thread_state *new_thread = thread_create(new_process, !(current_thread->flags & THREAD_KERNELMODE), NULL, *cpu, 0, NULL, NULL);
c010559c:	8b 45 08             	mov    0x8(%ebp),%eax
c010559f:	8b 10                	mov    (%eax),%edx
c01055a1:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01055a6:	0f b7 40 10          	movzwl 0x10(%eax),%eax
c01055aa:	0f b7 c0             	movzwl %ax,%eax
c01055ad:	83 e0 04             	and    $0x4,%eax
c01055b0:	85 c0                	test   %eax,%eax
c01055b2:	0f 94 c0             	sete   %al
c01055b5:	0f b6 c0             	movzbl %al,%eax
c01055b8:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
c01055bf:	00 
c01055c0:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c01055c7:	00 
c01055c8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01055cf:	00 
c01055d0:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01055d4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01055db:	00 
c01055dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01055e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01055e3:	89 04 24             	mov    %eax,(%esp)
c01055e6:	e8 b1 0f 00 00       	call   c010659c <thread_create>
c01055eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
    int i;
    for(i = 0; i < (MEMORY_LAYOUT_KERNEL_START >> 22); i++)
c01055ee:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c01055f5:	e9 d2 00 00 00       	jmp    c01056cc <fork+0x17d>
    {
        if(current_thread->pagedir->entries[i]) {
c01055fa:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01055ff:	8b 40 08             	mov    0x8(%eax),%eax
c0105602:	8b 00                	mov    (%eax),%eax
c0105604:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105607:	c1 e2 02             	shl    $0x2,%edx
c010560a:	01 d0                	add    %edx,%eax
c010560c:	8b 00                	mov    (%eax),%eax
c010560e:	85 c0                	test   %eax,%eax
c0105610:	0f 84 b2 00 00 00    	je     c01056c8 <fork+0x179>
          pt_t *new_pt = pt_create(new_thread->pagedir, i, PTE_PRESENT | PTE_USER);
c0105616:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105619:	8b 40 08             	mov    0x8(%eax),%eax
c010561c:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
c0105623:	00 
c0105624:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105627:	89 54 24 04          	mov    %edx,0x4(%esp)
c010562b:	89 04 24             	mov    %eax,(%esp)
c010562e:	e8 3b b9 ff ff       	call   c0100f6e <pt_create>
c0105633:	89 45 d8             	mov    %eax,-0x28(%ebp)
          pt_t *pt = pt_get(current_thread->pagedir, i, PTE_PRESENT | PTE_USER);
c0105636:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c010563b:	8b 40 08             	mov    0x8(%eax),%eax
c010563e:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%esp)
c0105645:	00 
c0105646:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105649:	89 54 24 04          	mov    %edx,0x4(%esp)
c010564d:	89 04 24             	mov    %eax,(%esp)
c0105650:	e8 96 b8 ff ff       	call   c0100eeb <pt_get>
c0105655:	89 45 d4             	mov    %eax,-0x2c(%ebp)
          memcpy((void*)new_pt, (void*)pt, 4096);
c0105658:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010565b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010565e:	bb 00 10 00 00       	mov    $0x1000,%ebx
c0105663:	89 c1                	mov    %eax,%ecx
c0105665:	83 e1 01             	and    $0x1,%ecx
c0105668:	85 c9                	test   %ecx,%ecx
c010566a:	74 0e                	je     c010567a <fork+0x12b>
c010566c:	0f b6 0a             	movzbl (%edx),%ecx
c010566f:	88 08                	mov    %cl,(%eax)
c0105671:	83 c0 01             	add    $0x1,%eax
c0105674:	83 c2 01             	add    $0x1,%edx
c0105677:	83 eb 01             	sub    $0x1,%ebx
c010567a:	89 c1                	mov    %eax,%ecx
c010567c:	83 e1 02             	and    $0x2,%ecx
c010567f:	85 c9                	test   %ecx,%ecx
c0105681:	74 0f                	je     c0105692 <fork+0x143>
c0105683:	0f b7 0a             	movzwl (%edx),%ecx
c0105686:	66 89 08             	mov    %cx,(%eax)
c0105689:	83 c0 02             	add    $0x2,%eax
c010568c:	83 c2 02             	add    $0x2,%edx
c010568f:	83 eb 02             	sub    $0x2,%ebx
c0105692:	89 d9                	mov    %ebx,%ecx
c0105694:	c1 e9 02             	shr    $0x2,%ecx
c0105697:	89 c7                	mov    %eax,%edi
c0105699:	89 d6                	mov    %edx,%esi
c010569b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010569d:	89 f2                	mov    %esi,%edx
c010569f:	89 f8                	mov    %edi,%eax
c01056a1:	b9 00 00 00 00       	mov    $0x0,%ecx
c01056a6:	89 de                	mov    %ebx,%esi
c01056a8:	83 e6 02             	and    $0x2,%esi
c01056ab:	85 f6                	test   %esi,%esi
c01056ad:	74 0b                	je     c01056ba <fork+0x16b>
c01056af:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c01056b3:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c01056b7:	83 c1 02             	add    $0x2,%ecx
c01056ba:	83 e3 01             	and    $0x1,%ebx
c01056bd:	85 db                	test   %ebx,%ebx
c01056bf:	74 07                	je     c01056c8 <fork+0x179>
c01056c1:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c01056c5:	88 14 08             	mov    %dl,(%eax,%ecx,1)
void fork(struct cpu_state **cpu)
{
    struct process_state *new_process = process_create(current_thread->process->name ,current_thread->process->desc ,current_thread->process->flags ,current_thread->process);
    struct thread_state *new_thread = thread_create(new_process, !(current_thread->flags & THREAD_KERNELMODE), NULL, *cpu, 0, NULL, NULL);
    int i;
    for(i = 0; i < (MEMORY_LAYOUT_KERNEL_START >> 22); i++)
c01056c8:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c01056cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056cf:	3d ff 02 00 00       	cmp    $0x2ff,%eax
c01056d4:	0f 86 20 ff ff ff    	jbe    c01055fa <fork+0xab>
          pt_t *new_pt = pt_create(new_thread->pagedir, i, PTE_PRESENT | PTE_USER);
          pt_t *pt = pt_get(current_thread->pagedir, i, PTE_PRESENT | PTE_USER);
          memcpy((void*)new_pt, (void*)pt, 4096);
        }
    }
    printf("forked!\n");
c01056da:	c7 04 24 5b 94 10 c0 	movl   $0xc010945b,(%esp)
c01056e1:	e8 09 db ff ff       	call   c01031ef <puts>
}
c01056e6:	83 c4 4c             	add    $0x4c,%esp
c01056e9:	5b                   	pop    %ebx
c01056ea:	5e                   	pop    %esi
c01056eb:	5f                   	pop    %edi
c01056ec:	5d                   	pop    %ebp
c01056ed:	c3                   	ret    
	...

c01056f0 <isalnum>:
 * check if c is an alphanumeric character (A-Z, a-z and 0-9)
 * @param character c as int
 * @return true  -> c is an alphanumeric character
 * @return false -> c isn't an alphanumeric character
 **/
int isalnum(int c) {
c01056f0:	55                   	push   %ebp
c01056f1:	89 e5                	mov    %esp,%ebp
	if ( (c > 0x40 && c < 0x5B) || (c > 0x60 && c < 0x7B) || (c > 0x2F && c < 0x3A) ) {
c01056f3:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c01056f7:	7e 06                	jle    c01056ff <isalnum+0xf>
c01056f9:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c01056fd:	7e 18                	jle    c0105717 <isalnum+0x27>
c01056ff:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c0105703:	7e 06                	jle    c010570b <isalnum+0x1b>
c0105705:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c0105709:	7e 0c                	jle    c0105717 <isalnum+0x27>
c010570b:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010570f:	7e 0d                	jle    c010571e <isalnum+0x2e>
c0105711:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0105715:	7f 07                	jg     c010571e <isalnum+0x2e>
		return true;
c0105717:	b8 01 00 00 00       	mov    $0x1,%eax
c010571c:	eb 05                	jmp    c0105723 <isalnum+0x33>
	}
	return false;
c010571e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105723:	5d                   	pop    %ebp
c0105724:	c3                   	ret    

c0105725 <isalpha>:
 * check if c is an alphabetical character (A-Z, a-z)
 * @param character c as int
 * @return true  -> c is an alphabetical character
 * @return false -> c isn't an alphabetical character
 **/
int isalpha(int c) {
c0105725:	55                   	push   %ebp
c0105726:	89 e5                	mov    %esp,%ebp
	if ( (c > 0x40 && c < 0x5B) || (c > 0x60 && c < 0x7B) ) {
c0105728:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c010572c:	7e 06                	jle    c0105734 <isalpha+0xf>
c010572e:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0105732:	7e 0c                	jle    c0105740 <isalpha+0x1b>
c0105734:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c0105738:	7e 0d                	jle    c0105747 <isalpha+0x22>
c010573a:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c010573e:	7f 07                	jg     c0105747 <isalpha+0x22>
		return true;
c0105740:	b8 01 00 00 00       	mov    $0x1,%eax
c0105745:	eb 05                	jmp    c010574c <isalpha+0x27>
	}
	return false;
c0105747:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010574c:	5d                   	pop    %ebp
c010574d:	c3                   	ret    

c010574e <iscntrl>:
 *check if c is an control key value
 * @param character c as int
 * @return true  -> c is a control Key value
 * @return false -> c isn't a control key value
 **/
int iscntrl(int c) {
c010574e:	55                   	push   %ebp
c010574f:	89 e5                	mov    %esp,%ebp
	if ( (c >= 0x0 && c > 0x20) || c == 0x7F) {
c0105751:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105755:	78 06                	js     c010575d <iscntrl+0xf>
c0105757:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c010575b:	7f 06                	jg     c0105763 <iscntrl+0x15>
c010575d:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
c0105761:	75 07                	jne    c010576a <iscntrl+0x1c>
		return true;
c0105763:	b8 01 00 00 00       	mov    $0x1,%eax
c0105768:	eb 05                	jmp    c010576f <iscntrl+0x21>
	}
	return false;
c010576a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010576f:	5d                   	pop    %ebp
c0105770:	c3                   	ret    

c0105771 <isdigit>:
 * checks if c is an digit (0-9)
 * @param character c as int
 * @return true  -> c is a digit
 * @return false -> c isn't an digit
 **/
int isdigit(int c) {
c0105771:	55                   	push   %ebp
c0105772:	89 e5                	mov    %esp,%ebp
	if (c > 0x2F && c < 0x3A) {
c0105774:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0105778:	7e 0d                	jle    c0105787 <isdigit+0x16>
c010577a:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c010577e:	7f 07                	jg     c0105787 <isdigit+0x16>
		return true;
c0105780:	b8 01 00 00 00       	mov    $0x1,%eax
c0105785:	eb 05                	jmp    c010578c <isdigit+0x1b>
	}
	return false;
c0105787:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010578c:	5d                   	pop    %ebp
c010578d:	c3                   	ret    

c010578e <isgraph>:
 * check if c is a graphical character
 * @param character c as int
 * @return true  -> c is a graphical character
 * @return false -> c isn't a graphical character
 **/
int isgraph(int c) {
c010578e:	55                   	push   %ebp
c010578f:	89 e5                	mov    %esp,%ebp
	if (c > 0x20 && c < 0x7F) {
c0105791:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c0105795:	7e 0d                	jle    c01057a4 <isgraph+0x16>
c0105797:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c010579b:	7f 07                	jg     c01057a4 <isgraph+0x16>
		return true;
c010579d:	b8 01 00 00 00       	mov    $0x1,%eax
c01057a2:	eb 05                	jmp    c01057a9 <isgraph+0x1b>
	}
	return false;
c01057a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01057a9:	5d                   	pop    %ebp
c01057aa:	c3                   	ret    

c01057ab <islower>:
 * check if c is an lower alphabeticial character
 * @param character c as int
 * @return true  -> c is a lower character
 * @return false -> c isn't a lower character
 **/
int islower(int c) {
c01057ab:	55                   	push   %ebp
c01057ac:	89 e5                	mov    %esp,%ebp
	if (c > 0x60 && c < 0x7B) {
c01057ae:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c01057b2:	7e 0d                	jle    c01057c1 <islower+0x16>
c01057b4:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c01057b8:	7f 07                	jg     c01057c1 <islower+0x16>
		return true;
c01057ba:	b8 01 00 00 00       	mov    $0x1,%eax
c01057bf:	eb 05                	jmp    c01057c6 <islower+0x1b>
	}
	return false;
c01057c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01057c6:	5d                   	pop    %ebp
c01057c7:	c3                   	ret    

c01057c8 <isprint>:
 * check if c is an normal printable character
 * @param character c as int
 * @return true  -> c is an printable character
 * @return false -> c isn't an printable character
 **/
int isprint(int c) {
c01057c8:	55                   	push   %ebp
c01057c9:	89 e5                	mov    %esp,%ebp
	if (c > 0x1F && c < 0x7F) {
c01057cb:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01057cf:	7e 0d                	jle    c01057de <isprint+0x16>
c01057d1:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c01057d5:	7f 07                	jg     c01057de <isprint+0x16>
		return true;
c01057d7:	b8 01 00 00 00       	mov    $0x1,%eax
c01057dc:	eb 05                	jmp    c01057e3 <isprint+0x1b>
	}
	return false;
c01057de:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01057e3:	5d                   	pop    %ebp
c01057e4:	c3                   	ret    

c01057e5 <ispunct>:
 * check if c is a visible character which is not an alphanumerical
 * @param character c as int
 * @return true  -> c is a visible character which is not an alphanumerical
 * @return false -> c isn't a visible character which is not an alphanumerical
 **/
int ispunct(int c) {
c01057e5:	55                   	push   %ebp
c01057e6:	89 e5                	mov    %esp,%ebp
	if ( (c > 0x20 && c < 0x30) || (c > 0x39 && c < 0x41) || (c > 0x5A && c < 0x61) || (c > 0x7A && c < 0x7F) ) {
c01057e8:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c01057ec:	7e 06                	jle    c01057f4 <ispunct+0xf>
c01057ee:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01057f2:	7e 24                	jle    c0105818 <ispunct+0x33>
c01057f4:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c01057f8:	7e 06                	jle    c0105800 <ispunct+0x1b>
c01057fa:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c01057fe:	7e 18                	jle    c0105818 <ispunct+0x33>
c0105800:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0105804:	7e 06                	jle    c010580c <ispunct+0x27>
c0105806:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c010580a:	7e 0c                	jle    c0105818 <ispunct+0x33>
c010580c:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
c0105810:	7e 0d                	jle    c010581f <ispunct+0x3a>
c0105812:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
c0105816:	7f 07                	jg     c010581f <ispunct+0x3a>
		return true;
c0105818:	b8 01 00 00 00       	mov    $0x1,%eax
c010581d:	eb 05                	jmp    c0105824 <ispunct+0x3f>
	}
	return false;
c010581f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105824:	5d                   	pop    %ebp
c0105825:	c3                   	ret    

c0105826 <isspace>:
 * check if c is a space character
 * @param character c as int
 * @return true  -> c is a space character
 * @return false -> c isn't a space character
 **/
int isspace(int c) {
c0105826:	55                   	push   %ebp
c0105827:	89 e5                	mov    %esp,%ebp
	if (c == ' ' || c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v') {
c0105829:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
c010582d:	74 1e                	je     c010584d <isspace+0x27>
c010582f:	83 7d 08 0c          	cmpl   $0xc,0x8(%ebp)
c0105833:	74 18                	je     c010584d <isspace+0x27>
c0105835:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
c0105839:	74 12                	je     c010584d <isspace+0x27>
c010583b:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
c010583f:	74 0c                	je     c010584d <isspace+0x27>
c0105841:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
c0105845:	74 06                	je     c010584d <isspace+0x27>
c0105847:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
c010584b:	75 07                	jne    c0105854 <isspace+0x2e>
		return true;
c010584d:	b8 01 00 00 00       	mov    $0x1,%eax
c0105852:	eb 05                	jmp    c0105859 <isspace+0x33>
	}
	return false;
c0105854:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105859:	5d                   	pop    %ebp
c010585a:	c3                   	ret    

c010585b <isupper>:
 * check if c is an upper alphanbetical character
 * @param character c as int
 * @return true  -> c is an upper alphabetical character
 * @return false -> c isn't an upper alphabetical character
 **/
int isupper(int c) {
c010585b:	55                   	push   %ebp
c010585c:	89 e5                	mov    %esp,%ebp
	if (c > 0x40 && c < 0x5B) {
c010585e:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c0105862:	7e 0d                	jle    c0105871 <isupper+0x16>
c0105864:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
c0105868:	7f 07                	jg     c0105871 <isupper+0x16>
		return true;
c010586a:	b8 01 00 00 00       	mov    $0x1,%eax
c010586f:	eb 05                	jmp    c0105876 <isupper+0x1b>
	}
	return false;
c0105871:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105876:	5d                   	pop    %ebp
c0105877:	c3                   	ret    

c0105878 <isxdigit>:
 * check if c is a hexadecimal digit
 * @param character c as int
 * @return true  -> c is a hexadecimal digit
 * @return false -> c isn't a hexadecimal digit
 **/
int isxdigit(int c) {
c0105878:	55                   	push   %ebp
c0105879:	89 e5                	mov    %esp,%ebp
	if ( (c > 0x2F && c < 0x3A) || (c > 0x40 && c < 0x47) || (c > 0x60 && c < 0x67) ) {
c010587b:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010587f:	7e 06                	jle    c0105887 <isxdigit+0xf>
c0105881:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
c0105885:	7e 18                	jle    c010589f <isxdigit+0x27>
c0105887:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
c010588b:	7e 06                	jle    c0105893 <isxdigit+0x1b>
c010588d:	83 7d 08 46          	cmpl   $0x46,0x8(%ebp)
c0105891:	7e 0c                	jle    c010589f <isxdigit+0x27>
c0105893:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
c0105897:	7e 0d                	jle    c01058a6 <isxdigit+0x2e>
c0105899:	83 7d 08 66          	cmpl   $0x66,0x8(%ebp)
c010589d:	7f 07                	jg     c01058a6 <isxdigit+0x2e>
		return true;
c010589f:	b8 01 00 00 00       	mov    $0x1,%eax
c01058a4:	eb 05                	jmp    c01058ab <isxdigit+0x33>
	}
	return false;
c01058a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01058ab:	5d                   	pop    %ebp
c01058ac:	c3                   	ret    

c01058ad <tolower>:
/**
 * convert upper to lower character
 * @param upper character c as int
 * @return c as lower character as int
 **/
int tolower(int c) {
c01058ad:	55                   	push   %ebp
c01058ae:	89 e5                	mov    %esp,%ebp
	c += 0x20;
c01058b0:	83 45 08 20          	addl   $0x20,0x8(%ebp)
	return c;
c01058b4:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01058b7:	5d                   	pop    %ebp
c01058b8:	c3                   	ret    

c01058b9 <toupper>:
/**
 * convert lower to upper character
 * @param lower charcter c as int
 * @return c as upper character as int
 **/
int toupper(int c) {
c01058b9:	55                   	push   %ebp
c01058ba:	89 e5                	mov    %esp,%ebp
	c -= 0x20;
c01058bc:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
	return c;
c01058c0:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01058c3:	5d                   	pop    %ebp
c01058c4:	c3                   	ret    
c01058c5:	00 00                	add    %al,(%eax)
	...

c01058c8 <outb>:
	uint32_t result;
	asm volatile("inl %1, %0" : "=a" (result) : "Nd" (port));
	return result;
}

static inline void outb(uint16_t port, uint8_t value) {
c01058c8:	55                   	push   %ebp
c01058c9:	89 e5                	mov    %esp,%ebp
c01058cb:	83 ec 08             	sub    $0x8,%esp
c01058ce:	8b 55 08             	mov    0x8(%ebp),%edx
c01058d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058d4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c01058d8:	88 45 f8             	mov    %al,-0x8(%ebp)
	asm volatile("outb %1, %0" : : "Nd" (port), "a" (value));
c01058db:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01058df:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c01058e3:	ee                   	out    %al,(%dx)
}
c01058e4:	c9                   	leave  
c01058e5:	c3                   	ret    

c01058e6 <lidt>:
 * Load IDT
 * @param nuber of the last defined Descriptor
 * @return void
 **/
void lidt(uint16_t irq)
{
c01058e6:	55                   	push   %ebp
c01058e7:	89 e5                	mov    %esp,%ebp
c01058e9:	83 ec 04             	sub    $0x4,%esp
c01058ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01058ef:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idtp.limit = (8 * irq)-1;
c01058f3:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01058f7:	c1 e0 03             	shl    $0x3,%eax
c01058fa:	83 e8 01             	sub    $0x1,%eax
c01058fd:	66 a3 a0 e8 10 c0    	mov    %ax,0xc010e8a0
	idtp.base = IDT;
c0105903:	c7 05 a2 e8 10 c0 a0 	movl   $0xc010e0a0,0xc010e8a2
c010590a:	e0 10 c0 
	asm volatile("lidt %0" : : "m" (idtp));
c010590d:	0f 01 1d a0 e8 10 c0 	lidtl  0xc010e8a0
}
c0105914:	c9                   	leave  
c0105915:	c3                   	ret    

c0105916 <EOI>:
 * Send End of Interrupt Signal to the PIC
 * @param number of the runnig interrupt
 * @return void
 **/
void EOI(int irq)
{
c0105916:	55                   	push   %ebp
c0105917:	89 e5                	mov    %esp,%ebp
c0105919:	83 ec 08             	sub    $0x8,%esp
	outb(0x20, 0x20);
c010591c:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c0105923:	00 
c0105924:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010592b:	e8 98 ff ff ff       	call   c01058c8 <outb>
	if (irq >= 8) {
c0105930:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
c0105934:	7e 14                	jle    c010594a <EOI+0x34>
		outb(0xA0, 0x20);
c0105936:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c010593d:	00 
c010593e:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c0105945:	e8 7e ff ff ff       	call   c01058c8 <outb>
	}
}
c010594a:	c9                   	leave  
c010594b:	c3                   	ret    

c010594c <pic_mask_irqs>:
 * block hardware IRQs
 * @param number of the IRQ which should be blocked
 * @return void
 **/
void pic_mask_irqs(uint16_t mask)
{
c010594c:	55                   	push   %ebp
c010594d:	89 e5                	mov    %esp,%ebp
c010594f:	83 ec 0c             	sub    $0xc,%esp
c0105952:	8b 45 08             	mov    0x8(%ebp),%eax
c0105955:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   outb(0x21, (uint8_t) mask);
c0105959:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010595d:	0f b6 c0             	movzbl %al,%eax
c0105960:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105964:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c010596b:	e8 58 ff ff ff       	call   c01058c8 <outb>
   outb(0xA1, (uint8_t) mask >> 8);
c0105970:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0105974:	0f b6 c0             	movzbl %al,%eax
c0105977:	c1 f8 08             	sar    $0x8,%eax
c010597a:	0f b6 c0             	movzbl %al,%eax
c010597d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105981:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c0105988:	e8 3b ff ff ff       	call   c01058c8 <outb>
}
c010598d:	c9                   	leave  
c010598e:	c3                   	ret    

c010598f <Set_IDT_Entry>:
 * @param 2 Baseadress of the ISR function
 * @param 3 Flags
 * @return void
 **/
void Set_IDT_Entry(uint32_t intnr, uint16_t selector,uint32_t Base, uint16_t flags)
{
c010598f:	55                   	push   %ebp
c0105990:	89 e5                	mov    %esp,%ebp
c0105992:	83 ec 08             	sub    $0x8,%esp
c0105995:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105998:	8b 45 14             	mov    0x14(%ebp),%eax
c010599b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c010599f:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	IDT[intnr].Base_low = (uint16_t)Base;
c01059a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01059a6:	89 c2                	mov    %eax,%edx
c01059a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01059ab:	66 89 14 c5 a0 e0 10 	mov    %dx,-0x3fef1f60(,%eax,8)
c01059b2:	c0 
	IDT[intnr].selector = selector;
c01059b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01059b6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01059ba:	66 89 14 c5 a2 e0 10 	mov    %dx,-0x3fef1f5e(,%eax,8)
c01059c1:	c0 
	IDT[intnr].flags = flags;
c01059c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01059c5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01059c9:	66 89 14 c5 a4 e0 10 	mov    %dx,-0x3fef1f5c(,%eax,8)
c01059d0:	c0 
	IDT[intnr].Base_hi = (uint16_t)(Base>>16);
c01059d1:	8b 45 10             	mov    0x10(%ebp),%eax
c01059d4:	c1 e8 10             	shr    $0x10,%eax
c01059d7:	89 c2                	mov    %eax,%edx
c01059d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01059dc:	66 89 14 c5 a6 e0 10 	mov    %dx,-0x3fef1f5a(,%eax,8)
c01059e3:	c0 
}
c01059e4:	c9                   	leave  
c01059e5:	c3                   	ret    

c01059e6 <install_irq>:
 * @param 1 pointer to the handler function
 * @return true  -> Handler is already seted-up
 * @return false -> Handler sucessfully installed
 **/
int install_irq(int intr,void *handler)
{
c01059e6:	55                   	push   %ebp
c01059e7:	89 e5                	mov    %esp,%ebp
	if (((uint32_t)irq[intr]) != NULL) {
c01059e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01059ec:	8b 04 85 c0 e8 10 c0 	mov    -0x3fef1740(,%eax,4),%eax
c01059f3:	85 c0                	test   %eax,%eax
c01059f5:	74 07                	je     c01059fe <install_irq+0x18>
	    return true;
c01059f7:	b8 01 00 00 00       	mov    $0x1,%eax
c01059fc:	eb 12                	jmp    c0105a10 <install_irq+0x2a>
	}

	irq[intr] = handler;
c01059fe:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105a01:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a04:	89 14 85 c0 e8 10 c0 	mov    %edx,-0x3fef1740(,%eax,4)
	return false;
c0105a0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a10:	5d                   	pop    %ebp
c0105a11:	c3                   	ret    

c0105a12 <install_exc>:
 * @param 1 pointer to the handler function
 * @return true  -> Handler is already seted-up
 * @return false -> Handler sucessfully installed
 **/
int install_exc(int excnum, void *handler)
{
c0105a12:	55                   	push   %ebp
c0105a13:	89 e5                	mov    %esp,%ebp
	if ((uint32_t)exc[excnum] != NULL) {
c0105a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a18:	8b 04 85 00 e9 10 c0 	mov    -0x3fef1700(,%eax,4),%eax
c0105a1f:	85 c0                	test   %eax,%eax
c0105a21:	74 07                	je     c0105a2a <install_exc+0x18>
	    return true;
c0105a23:	b8 01 00 00 00       	mov    $0x1,%eax
c0105a28:	eb 12                	jmp    c0105a3c <install_exc+0x2a>
	}

	exc[excnum] = handler;
c0105a2a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105a2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a30:	89 14 85 00 e9 10 c0 	mov    %edx,-0x3fef1700(,%eax,4)
	return false;
c0105a37:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a3c:	5d                   	pop    %ebp
c0105a3d:	c3                   	ret    

c0105a3e <deinstall_irq>:
 * deinstall IRQ handlder
 * @param interrupt number
 * @return void
**/
void deinstall_irq(int intr)
{
c0105a3e:	55                   	push   %ebp
c0105a3f:	89 e5                	mov    %esp,%ebp
	irq[intr] = NULL;
c0105a41:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a44:	c7 04 85 c0 e8 10 c0 	movl   $0x0,-0x3fef1740(,%eax,4)
c0105a4b:	00 00 00 00 
}
c0105a4f:	5d                   	pop    %ebp
c0105a50:	c3                   	ret    

c0105a51 <deinstall_exc>:
 * deinstall exception handlder
 * @param exception number
 * @return void
**/
void deinstall_exc(int excnum)
{
c0105a51:	55                   	push   %ebp
c0105a52:	89 e5                	mov    %esp,%ebp
	exc[excnum] = NULL;
c0105a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a57:	c7 04 85 00 e9 10 c0 	movl   $0x0,-0x3fef1700(,%eax,4)
c0105a5e:	00 00 00 00 
}
c0105a62:	5d                   	pop    %ebp
c0105a63:	c3                   	ret    

c0105a64 <irq_handler>:
 * General IRQ Handler
 * @param pointer to cpu_state struct of the interrupted Process
 * @return pointer to cpu_state struct of the interrupted Process
 **/
struct cpu_state* irq_handler(struct cpu_state* cpu)
{
c0105a64:	55                   	push   %ebp
c0105a65:	89 e5                	mov    %esp,%ebp
c0105a67:	83 ec 28             	sub    $0x28,%esp
	//Exceptions
	if (cpu->intr < 32)
c0105a6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a6d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105a70:	83 f8 1f             	cmp    $0x1f,%eax
c0105a73:	77 3e                	ja     c0105ab3 <irq_handler+0x4f>
	{
		if ( ((uint32_t) exc[cpu->intr]) != NULL)
c0105a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a78:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105a7b:	8b 04 85 00 e9 10 c0 	mov    -0x3fef1700(,%eax,4),%eax
c0105a82:	85 c0                	test   %eax,%eax
c0105a84:	74 1d                	je     c0105aa3 <irq_handler+0x3f>
		{
			exc[cpu->intr](&cpu);
c0105a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a89:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105a8c:	8b 04 85 00 e9 10 c0 	mov    -0x3fef1700(,%eax,4),%eax
c0105a93:	8d 55 08             	lea    0x8(%ebp),%edx
c0105a96:	89 14 24             	mov    %edx,(%esp)
c0105a99:	ff d0                	call   *%eax
			return cpu;
c0105a9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a9e:	e9 c8 00 00 00       	jmp    c0105b6b <irq_handler+0x107>
		}
		else
		{
			exc_panic(cpu);
c0105aa3:	8b 45 08             	mov    0x8(%ebp),%eax
c0105aa6:	89 04 24             	mov    %eax,(%esp)
c0105aa9:	e8 e6 ab ff ff       	call   c0100694 <exc_panic>
c0105aae:	e9 b5 00 00 00       	jmp    c0105b68 <irq_handler+0x104>
		}
	}
	//Taskscheduler
	else if(cpu->intr == 32)
c0105ab3:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ab6:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105ab9:	83 f8 20             	cmp    $0x20,%eax
c0105abc:	75 13                	jne    c0105ad1 <irq_handler+0x6d>
	{
        cpu = task_schedule(cpu);
c0105abe:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ac1:	89 04 24             	mov    %eax,(%esp)
c0105ac4:	e8 f1 f1 ff ff       	call   c0104cba <task_schedule>
c0105ac9:	89 45 08             	mov    %eax,0x8(%ebp)
c0105acc:	e9 97 00 00 00       	jmp    c0105b68 <irq_handler+0x104>
	}
	//IRQs
	else if (cpu->intr < 46)
c0105ad1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ad4:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105ad7:	83 f8 2d             	cmp    $0x2d,%eax
c0105ada:	77 3c                	ja     c0105b18 <irq_handler+0xb4>
	{
	    int irqnum = cpu->intr - 32;
c0105adc:	8b 45 08             	mov    0x8(%ebp),%eax
c0105adf:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105ae2:	83 e8 20             	sub    $0x20,%eax
c0105ae5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ( ((uint32_t) irq[irqnum]) != NULL)
c0105ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aeb:	8b 04 85 c0 e8 10 c0 	mov    -0x3fef1740(,%eax,4),%eax
c0105af2:	85 c0                	test   %eax,%eax
c0105af4:	74 12                	je     c0105b08 <irq_handler+0xa4>
		{
			irq[irqnum](&cpu);
c0105af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105af9:	8b 04 85 c0 e8 10 c0 	mov    -0x3fef1740(,%eax,4),%eax
c0105b00:	8d 55 08             	lea    0x8(%ebp),%edx
c0105b03:	89 14 24             	mov    %edx,(%esp)
c0105b06:	ff d0                	call   *%eax
		}
		EOI(irqnum);
c0105b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b0b:	89 04 24             	mov    %eax,(%esp)
c0105b0e:	e8 03 fe ff ff       	call   c0105916 <EOI>
		return cpu;
c0105b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b16:	eb 53                	jmp    c0105b6b <irq_handler+0x107>
	}
	//universe syscall
	else if(cpu->intr == 0x70)
c0105b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b1b:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105b1e:	83 f8 70             	cmp    $0x70,%eax
c0105b21:	75 0d                	jne    c0105b30 <irq_handler+0xcc>
	{
        universe_syscall_handler(&cpu);
c0105b23:	8d 45 08             	lea    0x8(%ebp),%eax
c0105b26:	89 04 24             	mov    %eax,(%esp)
c0105b29:	e8 de 22 00 00       	call   c0107e0c <universe_syscall_handler>
c0105b2e:	eb 38                	jmp    c0105b68 <irq_handler+0x104>
	}
	//linux syscall
	else if(cpu->intr == 0x80)
c0105b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b33:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105b36:	3d 80 00 00 00       	cmp    $0x80,%eax
c0105b3b:	75 0d                	jne    c0105b4a <irq_handler+0xe6>
	{
        linux_syscall_handler(&cpu);
c0105b3d:	8d 55 08             	lea    0x8(%ebp),%edx
c0105b40:	89 14 24             	mov    %edx,(%esp)
c0105b43:	e8 85 22 00 00       	call   c0107dcd <linux_syscall_handler>
c0105b48:	eb 1e                	jmp    c0105b68 <irq_handler+0x104>
	}
	//pci IRQ
	else if(cpu->intr == 50)
c0105b4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b4d:	8b 40 2c             	mov    0x2c(%eax),%eax
c0105b50:	83 f8 32             	cmp    $0x32,%eax
c0105b53:	75 07                	jne    c0105b5c <irq_handler+0xf8>
	{
        pci_irq_handler();
c0105b55:	e8 ea e2 ff ff       	call   c0103e44 <pci_irq_handler>
c0105b5a:	eb 0c                	jmp    c0105b68 <irq_handler+0x104>
	}
	//unspecified ISRs
	else
	{
        panic("A unspecified ISR was called.");
c0105b5c:	c7 04 24 63 94 10 c0 	movl   $0xc0109463,(%esp)
c0105b63:	e8 a2 ab ff ff       	call   c010070a <panic>
	}
	return cpu;
c0105b68:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0105b6b:	c9                   	leave  
c0105b6c:	c3                   	ret    

c0105b6d <remap_pic>:
 * remap IRQs to irqnum 31
 * @param void
 * @return void
 **/
void remap_pic(void)
{
c0105b6d:	55                   	push   %ebp
c0105b6e:	89 e5                	mov    %esp,%ebp
c0105b70:	83 ec 08             	sub    $0x8,%esp
	outb(0x20, 0x11);
c0105b73:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0105b7a:	00 
c0105b7b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0105b82:	e8 41 fd ff ff       	call   c01058c8 <outb>
	outb(0xA0, 0x11);
c0105b87:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0105b8e:	00 
c0105b8f:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c0105b96:	e8 2d fd ff ff       	call   c01058c8 <outb>
	outb(0x21, 32);
c0105b9b:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c0105ba2:	00 
c0105ba3:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c0105baa:	e8 19 fd ff ff       	call   c01058c8 <outb>
	outb(0xA1, 32+8);
c0105baf:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
c0105bb6:	00 
c0105bb7:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c0105bbe:	e8 05 fd ff ff       	call   c01058c8 <outb>
	outb(0x21, 0x04);
c0105bc3:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
c0105bca:	00 
c0105bcb:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c0105bd2:	e8 f1 fc ff ff       	call   c01058c8 <outb>
	outb(0xA1, 2);
c0105bd7:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0105bde:	00 
c0105bdf:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c0105be6:	e8 dd fc ff ff       	call   c01058c8 <outb>
	outb(0x21, 0x01);
c0105beb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105bf2:	00 
c0105bf3:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c0105bfa:	e8 c9 fc ff ff       	call   c01058c8 <outb>
	outb(0xA1, 0x01);
c0105bff:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c06:	00 
c0105c07:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c0105c0e:	e8 b5 fc ff ff       	call   c01058c8 <outb>
	outb(0x21, 0x00);
c0105c13:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105c1a:	00 
c0105c1b:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c0105c22:	e8 a1 fc ff ff       	call   c01058c8 <outb>
	outb(0xA1, 0x00);
c0105c27:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105c2e:	00 
c0105c2f:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
c0105c36:	e8 8d fc ff ff       	call   c01058c8 <outb>
}
c0105c3b:	c9                   	leave  
c0105c3c:	c3                   	ret    

c0105c3d <INIT_IDT>:
 * Initialize IDT wit exceptions and basical ISRs
 * @param 0 void
 * @param 1 void
 **/
void INIT_IDT(void)
{
c0105c3d:	55                   	push   %ebp
c0105c3e:	89 e5                	mov    %esp,%ebp
c0105c40:	83 ec 20             	sub    $0x20,%esp
	remap_pic();
c0105c43:	e8 25 ff ff ff       	call   c0105b6d <remap_pic>
	//Exceptions
	int i;
	for(i = 0; i < 256; i++)
c0105c48:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0105c4f:	eb 28                	jmp    c0105c79 <INIT_IDT+0x3c>
	{
        Set_IDT_Entry(i,0x8,(uint32_t)isr_default,0xEE00);
c0105c51:	ba 6f 83 10 c0       	mov    $0xc010836f,%edx
c0105c56:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105c59:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105c60:	00 
c0105c61:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105c65:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105c6c:	00 
c0105c6d:	89 04 24             	mov    %eax,(%esp)
c0105c70:	e8 1a fd ff ff       	call   c010598f <Set_IDT_Entry>
void INIT_IDT(void)
{
	remap_pic();
	//Exceptions
	int i;
	for(i = 0; i < 256; i++)
c0105c75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0105c79:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c0105c80:	7e cf                	jle    c0105c51 <INIT_IDT+0x14>
	{
        Set_IDT_Entry(i,0x8,(uint32_t)isr_default,0xEE00);
	}

	Set_IDT_Entry(0,0x8,(uint32_t)isr_0,0xEE00); Set_IDT_Entry(1,0x8,(uint32_t)isr_1,0xEE00); Set_IDT_Entry(2,0x8,(uint32_t)isr_2,0xEE00);
c0105c82:	b8 60 82 10 c0       	mov    $0xc0108260,%eax
c0105c87:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105c8e:	00 
c0105c8f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105c93:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105c9a:	00 
c0105c9b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0105ca2:	e8 e8 fc ff ff       	call   c010598f <Set_IDT_Entry>
c0105ca7:	b8 69 82 10 c0       	mov    $0xc0108269,%eax
c0105cac:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105cb3:	00 
c0105cb4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105cb8:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105cbf:	00 
c0105cc0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105cc7:	e8 c3 fc ff ff       	call   c010598f <Set_IDT_Entry>
c0105ccc:	b8 72 82 10 c0       	mov    $0xc0108272,%eax
c0105cd1:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105cd8:	00 
c0105cd9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105cdd:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105ce4:	00 
c0105ce5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0105cec:	e8 9e fc ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(3,0x8,(uint32_t)isr_3,0xEE00); Set_IDT_Entry(4,0x8,(uint32_t)isr_4,0xEE00); Set_IDT_Entry(5,0x8,(uint32_t)isr_5,0xEE00);
c0105cf1:	b8 7b 82 10 c0       	mov    $0xc010827b,%eax
c0105cf6:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105cfd:	00 
c0105cfe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d02:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105d09:	00 
c0105d0a:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0105d11:	e8 79 fc ff ff       	call   c010598f <Set_IDT_Entry>
c0105d16:	b8 84 82 10 c0       	mov    $0xc0108284,%eax
c0105d1b:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105d22:	00 
c0105d23:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d27:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105d2e:	00 
c0105d2f:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0105d36:	e8 54 fc ff ff       	call   c010598f <Set_IDT_Entry>
c0105d3b:	b8 8d 82 10 c0       	mov    $0xc010828d,%eax
c0105d40:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105d47:	00 
c0105d48:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d4c:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105d53:	00 
c0105d54:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0105d5b:	e8 2f fc ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(6,0x8,(uint32_t)isr_6,0xEE00); Set_IDT_Entry(7,0x8,(uint32_t)isr_7,0xEE00); Set_IDT_Entry(8,0x8,(uint32_t)isr_8,0xEE00);
c0105d60:	b8 96 82 10 c0       	mov    $0xc0108296,%eax
c0105d65:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105d6c:	00 
c0105d6d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d71:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105d78:	00 
c0105d79:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
c0105d80:	e8 0a fc ff ff       	call   c010598f <Set_IDT_Entry>
c0105d85:	b8 9f 82 10 c0       	mov    $0xc010829f,%eax
c0105d8a:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105d91:	00 
c0105d92:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d96:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105d9d:	00 
c0105d9e:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
c0105da5:	e8 e5 fb ff ff       	call   c010598f <Set_IDT_Entry>
c0105daa:	b8 a8 82 10 c0       	mov    $0xc01082a8,%eax
c0105daf:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105db6:	00 
c0105db7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105dbb:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105dc2:	00 
c0105dc3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0105dca:	e8 c0 fb ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(9,0x8,(uint32_t)isr_9,0xEE00); Set_IDT_Entry(10,0x8,(uint32_t)isr_10,0xEE00); Set_IDT_Entry(11,0x8,(uint32_t)isr_11,0xEE00);
c0105dcf:	b8 af 82 10 c0       	mov    $0xc01082af,%eax
c0105dd4:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105ddb:	00 
c0105ddc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105de0:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105de7:	00 
c0105de8:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
c0105def:	e8 9b fb ff ff       	call   c010598f <Set_IDT_Entry>
c0105df4:	b8 b8 82 10 c0       	mov    $0xc01082b8,%eax
c0105df9:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105e00:	00 
c0105e01:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e05:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105e0c:	00 
c0105e0d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0105e14:	e8 76 fb ff ff       	call   c010598f <Set_IDT_Entry>
c0105e19:	b8 bf 82 10 c0       	mov    $0xc01082bf,%eax
c0105e1e:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105e25:	00 
c0105e26:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e2a:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105e31:	00 
c0105e32:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
c0105e39:	e8 51 fb ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(12,0x8,(uint32_t)isr_12,0xEE00); Set_IDT_Entry(13,0x8,(uint32_t)isr_13,0xEE00); Set_IDT_Entry(14,0x8,(uint32_t)isr_14,0xEE00);
c0105e3e:	b8 c6 82 10 c0       	mov    $0xc01082c6,%eax
c0105e43:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105e4a:	00 
c0105e4b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e4f:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105e56:	00 
c0105e57:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0105e5e:	e8 2c fb ff ff       	call   c010598f <Set_IDT_Entry>
c0105e63:	b8 cd 82 10 c0       	mov    $0xc01082cd,%eax
c0105e68:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105e6f:	00 
c0105e70:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e74:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105e7b:	00 
c0105e7c:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
c0105e83:	e8 07 fb ff ff       	call   c010598f <Set_IDT_Entry>
c0105e88:	b8 d4 82 10 c0       	mov    $0xc01082d4,%eax
c0105e8d:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105e94:	00 
c0105e95:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e99:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105ea0:	00 
c0105ea1:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0105ea8:	e8 e2 fa ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(15,0x8,(uint32_t)isr_15,0xEE00); Set_IDT_Entry(16,0x8,(uint32_t)isr_16,0xEE00); Set_IDT_Entry(17,0x8,(uint32_t)isr_17,0xEE00);
c0105ead:	b8 db 82 10 c0       	mov    $0xc01082db,%eax
c0105eb2:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105eb9:	00 
c0105eba:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ebe:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105ec5:	00 
c0105ec6:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0105ecd:	e8 bd fa ff ff       	call   c010598f <Set_IDT_Entry>
c0105ed2:	b8 e4 82 10 c0       	mov    $0xc01082e4,%eax
c0105ed7:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105ede:	00 
c0105edf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ee3:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105eea:	00 
c0105eeb:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
c0105ef2:	e8 98 fa ff ff       	call   c010598f <Set_IDT_Entry>
c0105ef7:	b8 ed 82 10 c0       	mov    $0xc01082ed,%eax
c0105efc:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105f03:	00 
c0105f04:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f08:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105f0f:	00 
c0105f10:	c7 04 24 11 00 00 00 	movl   $0x11,(%esp)
c0105f17:	e8 73 fa ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(18,0x8,(uint32_t)isr_18,0xEE00); Set_IDT_Entry(19,0x8,(uint32_t)isr_19,0xEE00); Set_IDT_Entry(20,0x8,(uint32_t)isr_20,0xEE00);
c0105f1c:	b8 f4 82 10 c0       	mov    $0xc01082f4,%eax
c0105f21:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105f28:	00 
c0105f29:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f2d:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105f34:	00 
c0105f35:	c7 04 24 12 00 00 00 	movl   $0x12,(%esp)
c0105f3c:	e8 4e fa ff ff       	call   c010598f <Set_IDT_Entry>
c0105f41:	b8 fd 82 10 c0       	mov    $0xc01082fd,%eax
c0105f46:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105f4d:	00 
c0105f4e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f52:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105f59:	00 
c0105f5a:	c7 04 24 13 00 00 00 	movl   $0x13,(%esp)
c0105f61:	e8 29 fa ff ff       	call   c010598f <Set_IDT_Entry>
c0105f66:	b8 06 83 10 c0       	mov    $0xc0108306,%eax
c0105f6b:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105f72:	00 
c0105f73:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f77:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105f7e:	00 
c0105f7f:	c7 04 24 14 00 00 00 	movl   $0x14,(%esp)
c0105f86:	e8 04 fa ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(21,0x8,(uint32_t)isr_21,0xEE00); Set_IDT_Entry(22,0x8,(uint32_t)isr_22,0xEE00); Set_IDT_Entry(23,0x8,(uint32_t)isr_23,0xEE00);
c0105f8b:	b8 0f 83 10 c0       	mov    $0xc010830f,%eax
c0105f90:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105f97:	00 
c0105f98:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f9c:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105fa3:	00 
c0105fa4:	c7 04 24 15 00 00 00 	movl   $0x15,(%esp)
c0105fab:	e8 df f9 ff ff       	call   c010598f <Set_IDT_Entry>
c0105fb0:	b8 18 83 10 c0       	mov    $0xc0108318,%eax
c0105fb5:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105fbc:	00 
c0105fbd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fc1:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105fc8:	00 
c0105fc9:	c7 04 24 16 00 00 00 	movl   $0x16,(%esp)
c0105fd0:	e8 ba f9 ff ff       	call   c010598f <Set_IDT_Entry>
c0105fd5:	b8 21 83 10 c0       	mov    $0xc0108321,%eax
c0105fda:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0105fe1:	00 
c0105fe2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fe6:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0105fed:	00 
c0105fee:	c7 04 24 17 00 00 00 	movl   $0x17,(%esp)
c0105ff5:	e8 95 f9 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(24,0x8,(uint32_t)isr_24,0xEE00); Set_IDT_Entry(25,0x8,(uint32_t)isr_25,0xEE00); Set_IDT_Entry(26,0x8,(uint32_t)isr_26,0xEE00);
c0105ffa:	b8 2a 83 10 c0       	mov    $0xc010832a,%eax
c0105fff:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106006:	00 
c0106007:	89 44 24 08          	mov    %eax,0x8(%esp)
c010600b:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106012:	00 
c0106013:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010601a:	e8 70 f9 ff ff       	call   c010598f <Set_IDT_Entry>
c010601f:	b8 33 83 10 c0       	mov    $0xc0108333,%eax
c0106024:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010602b:	00 
c010602c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106030:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106037:	00 
c0106038:	c7 04 24 19 00 00 00 	movl   $0x19,(%esp)
c010603f:	e8 4b f9 ff ff       	call   c010598f <Set_IDT_Entry>
c0106044:	b8 3c 83 10 c0       	mov    $0xc010833c,%eax
c0106049:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106050:	00 
c0106051:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106055:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010605c:	00 
c010605d:	c7 04 24 1a 00 00 00 	movl   $0x1a,(%esp)
c0106064:	e8 26 f9 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(27,0x8,(uint32_t)isr_27,0xEE00); Set_IDT_Entry(28,0x8,(uint32_t)isr_28,0xEE00); Set_IDT_Entry(29,0x8,(uint32_t)isr_29,0xEE00);
c0106069:	b8 45 83 10 c0       	mov    $0xc0108345,%eax
c010606e:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106075:	00 
c0106076:	89 44 24 08          	mov    %eax,0x8(%esp)
c010607a:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106081:	00 
c0106082:	c7 04 24 1b 00 00 00 	movl   $0x1b,(%esp)
c0106089:	e8 01 f9 ff ff       	call   c010598f <Set_IDT_Entry>
c010608e:	b8 4e 83 10 c0       	mov    $0xc010834e,%eax
c0106093:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010609a:	00 
c010609b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010609f:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01060a6:	00 
c01060a7:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
c01060ae:	e8 dc f8 ff ff       	call   c010598f <Set_IDT_Entry>
c01060b3:	b8 57 83 10 c0       	mov    $0xc0108357,%eax
c01060b8:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c01060bf:	00 
c01060c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01060c4:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01060cb:	00 
c01060cc:	c7 04 24 1d 00 00 00 	movl   $0x1d,(%esp)
c01060d3:	e8 b7 f8 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(30,0x8,(uint32_t)isr_30,0xEE00); Set_IDT_Entry(31,0x8,(uint32_t)isr_31,0xEE00);
c01060d8:	b8 60 83 10 c0       	mov    $0xc0108360,%eax
c01060dd:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c01060e4:	00 
c01060e5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01060e9:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01060f0:	00 
c01060f1:	c7 04 24 1e 00 00 00 	movl   $0x1e,(%esp)
c01060f8:	e8 92 f8 ff ff       	call   c010598f <Set_IDT_Entry>
c01060fd:	b8 69 83 10 c0       	mov    $0xc0108369,%eax
c0106102:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106109:	00 
c010610a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010610e:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106115:	00 
c0106116:	c7 04 24 1f 00 00 00 	movl   $0x1f,(%esp)
c010611d:	e8 6d f8 ff ff       	call   c010598f <Set_IDT_Entry>
	//IRQs
	Set_IDT_Entry(32,0x8,(uint32_t)isr_32,0xEE00); Set_IDT_Entry(33,0x8,(uint32_t)isr_33,0xEE00);
c0106122:	b8 75 83 10 c0       	mov    $0xc0108375,%eax
c0106127:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010612e:	00 
c010612f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106133:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010613a:	00 
c010613b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0106142:	e8 48 f8 ff ff       	call   c010598f <Set_IDT_Entry>
c0106147:	b8 7b 83 10 c0       	mov    $0xc010837b,%eax
c010614c:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106153:	00 
c0106154:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106158:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010615f:	00 
c0106160:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
c0106167:	e8 23 f8 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(34,0x8,(uint32_t)isr_34,0xEE00); Set_IDT_Entry(35,0x8,(uint32_t)isr_35,0xEE00);
c010616c:	b8 81 83 10 c0       	mov    $0xc0108381,%eax
c0106171:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106178:	00 
c0106179:	89 44 24 08          	mov    %eax,0x8(%esp)
c010617d:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106184:	00 
c0106185:	c7 04 24 22 00 00 00 	movl   $0x22,(%esp)
c010618c:	e8 fe f7 ff ff       	call   c010598f <Set_IDT_Entry>
c0106191:	b8 87 83 10 c0       	mov    $0xc0108387,%eax
c0106196:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010619d:	00 
c010619e:	89 44 24 08          	mov    %eax,0x8(%esp)
c01061a2:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01061a9:	00 
c01061aa:	c7 04 24 23 00 00 00 	movl   $0x23,(%esp)
c01061b1:	e8 d9 f7 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(36,0x8,(uint32_t)isr_36,0xEE00); Set_IDT_Entry(37,0x8,(uint32_t)isr_37,0xEE00);
c01061b6:	b8 8d 83 10 c0       	mov    $0xc010838d,%eax
c01061bb:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c01061c2:	00 
c01061c3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01061c7:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01061ce:	00 
c01061cf:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
c01061d6:	e8 b4 f7 ff ff       	call   c010598f <Set_IDT_Entry>
c01061db:	b8 93 83 10 c0       	mov    $0xc0108393,%eax
c01061e0:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c01061e7:	00 
c01061e8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01061ec:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01061f3:	00 
c01061f4:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c01061fb:	e8 8f f7 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(38,0x8,(uint32_t)isr_38,0xEE00); Set_IDT_Entry(39,0x8,(uint32_t)isr_39,0xEE00);
c0106200:	b8 99 83 10 c0       	mov    $0xc0108399,%eax
c0106205:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010620c:	00 
c010620d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106211:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106218:	00 
c0106219:	c7 04 24 26 00 00 00 	movl   $0x26,(%esp)
c0106220:	e8 6a f7 ff ff       	call   c010598f <Set_IDT_Entry>
c0106225:	b8 9f 83 10 c0       	mov    $0xc010839f,%eax
c010622a:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106231:	00 
c0106232:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106236:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010623d:	00 
c010623e:	c7 04 24 27 00 00 00 	movl   $0x27,(%esp)
c0106245:	e8 45 f7 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(40,0x8,(uint32_t)isr_40,0xEE00); Set_IDT_Entry(41,0x8,(uint32_t)isr_41,0xEE00);
c010624a:	b8 a5 83 10 c0       	mov    $0xc01083a5,%eax
c010624f:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106256:	00 
c0106257:	89 44 24 08          	mov    %eax,0x8(%esp)
c010625b:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106262:	00 
c0106263:	c7 04 24 28 00 00 00 	movl   $0x28,(%esp)
c010626a:	e8 20 f7 ff ff       	call   c010598f <Set_IDT_Entry>
c010626f:	b8 ab 83 10 c0       	mov    $0xc01083ab,%eax
c0106274:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010627b:	00 
c010627c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106280:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106287:	00 
c0106288:	c7 04 24 29 00 00 00 	movl   $0x29,(%esp)
c010628f:	e8 fb f6 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(42,0x8,(uint32_t)isr_42,0xEE00); Set_IDT_Entry(43,0x8,(uint32_t)isr_43,0xEE00);
c0106294:	b8 b1 83 10 c0       	mov    $0xc01083b1,%eax
c0106299:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c01062a0:	00 
c01062a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01062a5:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01062ac:	00 
c01062ad:	c7 04 24 2a 00 00 00 	movl   $0x2a,(%esp)
c01062b4:	e8 d6 f6 ff ff       	call   c010598f <Set_IDT_Entry>
c01062b9:	b8 b7 83 10 c0       	mov    $0xc01083b7,%eax
c01062be:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c01062c5:	00 
c01062c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01062ca:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01062d1:	00 
c01062d2:	c7 04 24 2b 00 00 00 	movl   $0x2b,(%esp)
c01062d9:	e8 b1 f6 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(44,0x8,(uint32_t)isr_44,0xEE00); Set_IDT_Entry(45,0x8,(uint32_t)isr_45,0xEE00);
c01062de:	b8 bd 83 10 c0       	mov    $0xc01083bd,%eax
c01062e3:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c01062ea:	00 
c01062eb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01062ef:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01062f6:	00 
c01062f7:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c01062fe:	e8 8c f6 ff ff       	call   c010598f <Set_IDT_Entry>
c0106303:	b8 c3 83 10 c0       	mov    $0xc01083c3,%eax
c0106308:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010630f:	00 
c0106310:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106314:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010631b:	00 
c010631c:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c0106323:	e8 67 f6 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(46,0x8,(uint32_t)isr_46,0xEE00); Set_IDT_Entry(47,0x8,(uint32_t)isr_47,0xEE00);
c0106328:	b8 c9 83 10 c0       	mov    $0xc01083c9,%eax
c010632d:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106334:	00 
c0106335:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106339:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106340:	00 
c0106341:	c7 04 24 2e 00 00 00 	movl   $0x2e,(%esp)
c0106348:	e8 42 f6 ff ff       	call   c010598f <Set_IDT_Entry>
c010634d:	b8 cf 83 10 c0       	mov    $0xc01083cf,%eax
c0106352:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c0106359:	00 
c010635a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010635e:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c0106365:	00 
c0106366:	c7 04 24 2f 00 00 00 	movl   $0x2f,(%esp)
c010636d:	e8 1d f6 ff ff       	call   c010598f <Set_IDT_Entry>

	Set_IDT_Entry(0x70,0x8,(uint32_t)isr_112,0xEE00); //Universe syscall interface
c0106372:	b8 d5 83 10 c0       	mov    $0xc01083d5,%eax
c0106377:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c010637e:	00 
c010637f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106383:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c010638a:	00 
c010638b:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
c0106392:	e8 f8 f5 ff ff       	call   c010598f <Set_IDT_Entry>
	Set_IDT_Entry(0x80,0x8,(uint32_t)isr_128,0xEE00); //Linux syscall interface
c0106397:	b8 db 83 10 c0       	mov    $0xc01083db,%eax
c010639c:	c7 44 24 0c 00 ee 00 	movl   $0xee00,0xc(%esp)
c01063a3:	00 
c01063a4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01063a8:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
c01063af:	00 
c01063b0:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c01063b7:	e8 d3 f5 ff ff       	call   c010598f <Set_IDT_Entry>
	lidt(129);
c01063bc:	c7 04 24 81 00 00 00 	movl   $0x81,(%esp)
c01063c3:	e8 1e f5 ff ff       	call   c01058e6 <lidt>
}
c01063c8:	c9                   	leave  
c01063c9:	c3                   	ret    
	...

c01063cc <install_cmd>:
static char *param;
static int comnumber=2;
static char *coms[256] = {"var", "help", "reboot"};
static char compointer[256];

int install_cmd(char *name, char pointer){
c01063cc:	55                   	push   %ebp
c01063cd:	89 e5                	mov    %esp,%ebp
c01063cf:	83 ec 38             	sub    $0x38,%esp
c01063d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01063d5:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int temp = 0;
c01063d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int failture;
    while(!strcmp(*name, *coms[temp])){ // compares new command to old commands
c01063df:	eb 0e                	jmp    c01063ef <install_cmd+0x23>
        temp++;
c01063e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        if(temp > comnumber){
c01063e5:	a1 40 c4 10 c0       	mov    0xc010c440,%eax
c01063ea:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01063ed:	7f 2d                	jg     c010641c <install_cmd+0x50>
static char compointer[256];

int install_cmd(char *name, char pointer){
    int temp = 0;
    int failture;
    while(!strcmp(*name, *coms[temp])){ // compares new command to old commands
c01063ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063f2:	8b 04 85 60 c4 10 c0 	mov    -0x3fef3ba0(,%eax,4),%eax
c01063f9:	0f b6 00             	movzbl (%eax),%eax
c01063fc:	0f be c0             	movsbl %al,%eax
c01063ff:	89 c2                	mov    %eax,%edx
c0106401:	8b 45 08             	mov    0x8(%ebp),%eax
c0106404:	0f b6 00             	movzbl (%eax),%eax
c0106407:	0f be c0             	movsbl %al,%eax
c010640a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010640e:	89 04 24             	mov    %eax,(%esp)
c0106411:	e8 d1 07 00 00       	call   c0106be7 <strcmp>
c0106416:	85 c0                	test   %eax,%eax
c0106418:	74 c7                	je     c01063e1 <install_cmd+0x15>
c010641a:	eb 01                	jmp    c010641d <install_cmd+0x51>
        temp++;
        if(temp > comnumber){
            break;
c010641c:	90                   	nop
        }
    }
    if(temp < comnumber){   // if this command is existing the loop didn't ran more often than there are commands
c010641d:	a1 40 c4 10 c0       	mov    0xc010c440,%eax
c0106422:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0106425:	7d 15                	jge    c010643c <install_cmd+0x70>
        printf("This command exists already.\n");
c0106427:	c7 04 24 91 94 10 c0 	movl   $0xc0109491,(%esp)
c010642e:	e8 bc cd ff ff       	call   c01031ef <puts>
        failture = 1;
c0106433:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010643a:	eb 37                	jmp    c0106473 <install_cmd+0xa7>
    }else{   // new command is added to array
        comnumber++;
c010643c:	a1 40 c4 10 c0       	mov    0xc010c440,%eax
c0106441:	83 c0 01             	add    $0x1,%eax
c0106444:	a3 40 c4 10 c0       	mov    %eax,0xc010c440
        *coms[comnumber] = *name;
c0106449:	a1 40 c4 10 c0       	mov    0xc010c440,%eax
c010644e:	8b 04 85 60 c4 10 c0 	mov    -0x3fef3ba0(,%eax,4),%eax
c0106455:	8b 55 08             	mov    0x8(%ebp),%edx
c0106458:	0f b6 12             	movzbl (%edx),%edx
c010645b:	88 10                	mov    %dl,(%eax)
        compointer[comnumber] = pointer;
c010645d:	a1 40 c4 10 c0       	mov    0xc010c440,%eax
c0106462:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0106466:	88 90 a0 e9 10 c0    	mov    %dl,-0x3fef1660(%eax)
        failture = 0;
c010646c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    }
    return failture;   // you can check if the command exists or not
c0106473:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0106476:	c9                   	leave  
c0106477:	c3                   	ret    

c0106478 <comlength>:

unsigned int comlength(char *comandparam){
c0106478:	55                   	push   %ebp
c0106479:	89 e5                	mov    %esp,%ebp
c010647b:	83 ec 10             	sub    $0x10,%esp
    unsigned int counter = 0;
c010647e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while(comandparam[counter] =! ' '){
c0106485:	90                   	nop
c0106486:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106489:	8b 55 08             	mov    0x8(%ebp),%edx
c010648c:	01 d0                	add    %edx,%eax
c010648e:	c6 00 00             	movb   $0x0,(%eax)
        counter++;
    }
    return counter;
c0106491:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106494:	c9                   	leave  
c0106495:	c3                   	ret    

c0106496 <analyse>:

int analyse(char *in){
c0106496:	55                   	push   %ebp
c0106497:	89 e5                	mov    %esp,%ebp
c0106499:	83 ec 28             	sub    $0x28,%esp
    unsigned int length = comlength(in);   // Cut the string before the parameters
c010649c:	8b 45 08             	mov    0x8(%ebp),%eax
c010649f:	89 04 24             	mov    %eax,(%esp)
c01064a2:	e8 d1 ff ff ff       	call   c0106478 <comlength>
c01064a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    length++;
c01064aa:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
    *param = *(in + length);   // command can read out his parameters
c01064ae:	a1 80 e9 10 c0       	mov    0xc010e980,%eax
c01064b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01064b6:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01064b9:	01 ca                	add    %ecx,%edx
c01064bb:	0f b6 12             	movzbl (%edx),%edx
c01064be:	88 10                	mov    %dl,(%eax)
    int ret;
    int counter = 0;
c01064c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int fail = 0;
c01064c7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    while(!strcmp(*in, coms[counter])){   // look up which command the user entered
c01064ce:	eb 17                	jmp    c01064e7 <analyse+0x51>
        counter++;
c01064d0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
        if(comnumber < counter){
c01064d4:	a1 40 c4 10 c0       	mov    0xc010c440,%eax
c01064d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01064dc:	7d 09                	jge    c01064e7 <analyse+0x51>
            fail = 1;
c01064de:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
            break;
c01064e5:	eb 23                	jmp    c010650a <analyse+0x74>
    length++;
    *param = *(in + length);   // command can read out his parameters
    int ret;
    int counter = 0;
    int fail = 0;
    while(!strcmp(*in, coms[counter])){   // look up which command the user entered
c01064e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064ea:	8b 14 85 60 c4 10 c0 	mov    -0x3fef3ba0(,%eax,4),%edx
c01064f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01064f4:	0f b6 00             	movzbl (%eax),%eax
c01064f7:	0f be c0             	movsbl %al,%eax
c01064fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064fe:	89 04 24             	mov    %eax,(%esp)
c0106501:	e8 e1 06 00 00       	call   c0106be7 <strcmp>
c0106506:	85 c0                	test   %eax,%eax
c0106508:	74 c6                	je     c01064d0 <analyse+0x3a>
        if(comnumber < counter){
            fail = 1;
            break;
        }
    }
    if(!fail){   // the comand exists
c010650a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010650e:	75 09                	jne    c0106519 <analyse+0x83>
        ret = 0;
c0106510:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106517:	eb 13                	jmp    c010652c <analyse+0x96>
        //goto compointer[counter];
    }else{   // the command exists not
        printf("Unknown command or file.\n");
c0106519:	c7 04 24 ae 94 10 c0 	movl   $0xc01094ae,(%esp)
c0106520:	e8 ca cc ff ff       	call   c01031ef <puts>
        ret = 1;
c0106525:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    return ret;   // you can check if the command exists or not
c010652c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010652f:	c9                   	leave  
c0106530:	c3                   	ret    
c0106531:	00 00                	add    %al,(%eax)
	...

c0106534 <thread_sync_pagedir>:
#include <scheduler.h>

extern list_t *running_threads;
extern struct thread_state* current_thread;

void thread_sync_pagedir(struct thread_state *thread) {
c0106534:	55                   	push   %ebp
c0106535:	89 e5                	mov    %esp,%ebp
c0106537:	83 ec 10             	sub    $0x10,%esp
    struct thread_state *main_thread = thread->process->main_thread;
c010653a:	8b 45 08             	mov    0x8(%ebp),%eax
c010653d:	8b 40 04             	mov    0x4(%eax),%eax
c0106540:	8b 40 24             	mov    0x24(%eax),%eax
c0106543:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if(thread != main_thread && main_thread != NULL && thread != NULL) {
c0106546:	8b 45 08             	mov    0x8(%ebp),%eax
c0106549:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010654c:	74 4c                	je     c010659a <thread_sync_pagedir+0x66>
c010654e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106552:	74 46                	je     c010659a <thread_sync_pagedir+0x66>
c0106554:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106558:	74 40                	je     c010659a <thread_sync_pagedir+0x66>
        int end = PDE_INDEX(0xB0000000);
c010655a:	c7 45 f4 c0 02 00 00 	movl   $0x2c0,-0xc(%ebp)
        int i;
        for(i = 0; i < end; i++) {
c0106561:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0106568:	eb 28                	jmp    c0106592 <thread_sync_pagedir+0x5e>
            thread->pagedir->entries[i] = main_thread->pagedir->entries[i];
c010656a:	8b 45 08             	mov    0x8(%ebp),%eax
c010656d:	8b 40 08             	mov    0x8(%eax),%eax
c0106570:	8b 00                	mov    (%eax),%eax
c0106572:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106575:	c1 e2 02             	shl    $0x2,%edx
c0106578:	01 c2                	add    %eax,%edx
c010657a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010657d:	8b 40 08             	mov    0x8(%eax),%eax
c0106580:	8b 00                	mov    (%eax),%eax
c0106582:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0106585:	c1 e1 02             	shl    $0x2,%ecx
c0106588:	01 c8                	add    %ecx,%eax
c010658a:	8b 00                	mov    (%eax),%eax
c010658c:	89 02                	mov    %eax,(%edx)
void thread_sync_pagedir(struct thread_state *thread) {
    struct thread_state *main_thread = thread->process->main_thread;
    if(thread != main_thread && main_thread != NULL && thread != NULL) {
        int end = PDE_INDEX(0xB0000000);
        int i;
        for(i = 0; i < end; i++) {
c010658e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106592:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106595:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106598:	7c d0                	jl     c010656a <thread_sync_pagedir+0x36>
            thread->pagedir->entries[i] = main_thread->pagedir->entries[i];
        }
    }
}
c010659a:	c9                   	leave  
c010659b:	c3                   	ret    

c010659c <thread_create>:

struct thread_state *thread_create(struct process_state *process, privilege_t prev, uint32_t eip, struct cpu_state *state, int argc, void **argv, void *return_address)
{
c010659c:	55                   	push   %ebp
c010659d:	89 e5                	mov    %esp,%ebp
c010659f:	57                   	push   %edi
c01065a0:	56                   	push   %esi
c01065a1:	53                   	push   %ebx
c01065a2:	83 ec 3c             	sub    $0x3c,%esp
    struct thread_state *new_thread = malloc(sizeof(struct thread_state));
c01065a5:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
c01065ac:	e8 2b c5 ff ff       	call   c0102adc <malloc>
c01065b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	new_thread->flags = THREAD_ACTIV;
c01065b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065b7:	66 c7 40 10 01 00    	movw   $0x1,0x10(%eax)
    new_thread->process = process;
c01065bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065c0:	8b 55 08             	mov    0x8(%ebp),%edx
c01065c3:	89 50 04             	mov    %edx,0x4(%eax)
    new_thread->pagedir = pd_create();
c01065c6:	e8 1a a7 ff ff       	call   c0100ce5 <pd_create>
c01065cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065ce:	89 42 08             	mov    %eax,0x8(%edx)
    thread_sync_pagedir(new_thread);
c01065d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065d4:	89 04 24             	mov    %eax,(%esp)
c01065d7:	e8 58 ff ff ff       	call   c0106534 <thread_sync_pagedir>
    new_thread->ticks = 10;
c01065dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065df:	c7 40 0c 0a 00 00 00 	movl   $0xa,0xc(%eax)
    new_thread->return_value = 0;
c01065e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065e9:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    void *kernel_stack = malloc(0x1000);
c01065f0:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01065f7:	e8 e0 c4 ff ff       	call   c0102adc <malloc>
c01065fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct cpu_state *new_state = kernel_stack + 0x1000 - sizeof(struct cpu_state);
c01065ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106602:	05 b8 0f 00 00       	add    $0xfb8,%eax
c0106607:	89 45 dc             	mov    %eax,-0x24(%ebp)
    new_thread->state = new_state;
c010660a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010660d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106610:	89 10                	mov    %edx,(%eax)

    if(process->main_thread == NULL) {
c0106612:	8b 45 08             	mov    0x8(%ebp),%eax
c0106615:	8b 40 24             	mov    0x24(%eax),%eax
c0106618:	85 c0                	test   %eax,%eax
c010661a:	75 09                	jne    c0106625 <thread_create+0x89>
        process->main_thread = new_thread;
c010661c:	8b 45 08             	mov    0x8(%ebp),%eax
c010661f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106622:	89 50 24             	mov    %edx,0x24(%eax)
    }

    if(state != NULL)
c0106625:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0106629:	74 72                	je     c010669d <thread_create+0x101>
    {
        memcpy(new_state, state, sizeof(struct cpu_state));
c010662b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010662e:	8b 55 14             	mov    0x14(%ebp),%edx
c0106631:	bb 48 00 00 00       	mov    $0x48,%ebx
c0106636:	89 c1                	mov    %eax,%ecx
c0106638:	83 e1 01             	and    $0x1,%ecx
c010663b:	85 c9                	test   %ecx,%ecx
c010663d:	74 0e                	je     c010664d <thread_create+0xb1>
c010663f:	0f b6 0a             	movzbl (%edx),%ecx
c0106642:	88 08                	mov    %cl,(%eax)
c0106644:	83 c0 01             	add    $0x1,%eax
c0106647:	83 c2 01             	add    $0x1,%edx
c010664a:	83 eb 01             	sub    $0x1,%ebx
c010664d:	89 c1                	mov    %eax,%ecx
c010664f:	83 e1 02             	and    $0x2,%ecx
c0106652:	85 c9                	test   %ecx,%ecx
c0106654:	74 0f                	je     c0106665 <thread_create+0xc9>
c0106656:	0f b7 0a             	movzwl (%edx),%ecx
c0106659:	66 89 08             	mov    %cx,(%eax)
c010665c:	83 c0 02             	add    $0x2,%eax
c010665f:	83 c2 02             	add    $0x2,%edx
c0106662:	83 eb 02             	sub    $0x2,%ebx
c0106665:	89 d9                	mov    %ebx,%ecx
c0106667:	c1 e9 02             	shr    $0x2,%ecx
c010666a:	89 c7                	mov    %eax,%edi
c010666c:	89 d6                	mov    %edx,%esi
c010666e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0106670:	89 f2                	mov    %esi,%edx
c0106672:	89 f8                	mov    %edi,%eax
c0106674:	b9 00 00 00 00       	mov    $0x0,%ecx
c0106679:	89 de                	mov    %ebx,%esi
c010667b:	83 e6 02             	and    $0x2,%esi
c010667e:	85 f6                	test   %esi,%esi
c0106680:	74 0b                	je     c010668d <thread_create+0xf1>
c0106682:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0106686:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010668a:	83 c1 02             	add    $0x2,%ecx
c010668d:	83 e3 01             	and    $0x1,%ebx
c0106690:	85 db                	test   %ebx,%ebx
c0106692:	74 76                	je     c010670a <thread_create+0x16e>
c0106694:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0106698:	88 14 08             	mov    %dl,(%eax,%ecx,1)
c010669b:	eb 6d                	jmp    c010670a <thread_create+0x16e>
    }
    else
    {
        memset(new_state, 0, sizeof(struct cpu_state));
c010669d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01066a0:	89 c2                	mov    %eax,%edx
c01066a2:	bb 48 00 00 00       	mov    $0x48,%ebx
c01066a7:	b8 00 00 00 00       	mov    $0x0,%eax
c01066ac:	89 d1                	mov    %edx,%ecx
c01066ae:	83 e1 01             	and    $0x1,%ecx
c01066b1:	85 c9                	test   %ecx,%ecx
c01066b3:	74 08                	je     c01066bd <thread_create+0x121>
c01066b5:	88 02                	mov    %al,(%edx)
c01066b7:	83 c2 01             	add    $0x1,%edx
c01066ba:	83 eb 01             	sub    $0x1,%ebx
c01066bd:	89 d1                	mov    %edx,%ecx
c01066bf:	83 e1 02             	and    $0x2,%ecx
c01066c2:	85 c9                	test   %ecx,%ecx
c01066c4:	74 09                	je     c01066cf <thread_create+0x133>
c01066c6:	66 89 02             	mov    %ax,(%edx)
c01066c9:	83 c2 02             	add    $0x2,%edx
c01066cc:	83 eb 02             	sub    $0x2,%ebx
c01066cf:	89 d9                	mov    %ebx,%ecx
c01066d1:	c1 e9 02             	shr    $0x2,%ecx
c01066d4:	89 d7                	mov    %edx,%edi
c01066d6:	f3 ab                	rep stos %eax,%es:(%edi)
c01066d8:	89 fa                	mov    %edi,%edx
c01066da:	89 d9                	mov    %ebx,%ecx
c01066dc:	83 e1 02             	and    $0x2,%ecx
c01066df:	85 c9                	test   %ecx,%ecx
c01066e1:	74 06                	je     c01066e9 <thread_create+0x14d>
c01066e3:	66 89 02             	mov    %ax,(%edx)
c01066e6:	83 c2 02             	add    $0x2,%edx
c01066e9:	89 d9                	mov    %ebx,%ecx
c01066eb:	83 e1 01             	and    $0x1,%ecx
c01066ee:	85 c9                	test   %ecx,%ecx
c01066f0:	74 05                	je     c01066f7 <thread_create+0x15b>
c01066f2:	88 02                	mov    %al,(%edx)
c01066f4:	83 c2 01             	add    $0x1,%edx
        new_state->eip = eip;
c01066f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01066fa:	8b 55 10             	mov    0x10(%ebp),%edx
c01066fd:	89 50 34             	mov    %edx,0x34(%eax)
        new_state->eflags = 0x202;
c0106700:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106703:	c7 40 3c 02 02 00 00 	movl   $0x202,0x3c(%eax)
    }

    if(prev == KERNELMODE)
c010670a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010670e:	75 49                	jne    c0106759 <thread_create+0x1bd>
    {
        new_thread->flags |= THREAD_KERNELMODE;
c0106710:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106713:	0f b7 40 10          	movzwl 0x10(%eax),%eax
c0106717:	89 c2                	mov    %eax,%edx
c0106719:	83 ca 04             	or     $0x4,%edx
c010671c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010671f:	66 89 50 10          	mov    %dx,0x10(%eax)

		new_state->cs = 0x08;
c0106723:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106726:	c7 40 38 08 00 00 00 	movl   $0x8,0x38(%eax)
		new_state->ds = 0x10;
c010672d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106730:	c7 40 0c 10 00 00 00 	movl   $0x10,0xc(%eax)
		new_state->es = 0x10;
c0106737:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010673a:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
		new_state->fs = 0x10;
c0106741:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106744:	c7 40 04 10 00 00 00 	movl   $0x10,0x4(%eax)
		new_state->gs = 0x10;
c010674b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010674e:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
c0106754:	e9 99 00 00 00       	jmp    c01067f2 <thread_create+0x256>
    }
    else
    {
        if(!state)
c0106759:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010675d:	75 7f                	jne    c01067de <thread_create+0x242>
        {
            paddr_t pframe = pmm_alloc_page();
c010675f:	e8 bf 0c 00 00       	call   c0107423 <pmm_alloc_page>
c0106764:	89 45 d8             	mov    %eax,-0x28(%ebp)
            pd_map(new_thread->pagedir, pframe, MEMORY_LAYOUT_STACK_TOP-0x1000, PTE_PRESENT | PTE_WRITABLE | PTE_USER);
c0106767:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010676a:	8b 40 08             	mov    0x8(%eax),%eax
c010676d:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
c0106774:	00 
c0106775:	c7 44 24 08 00 f0 ff 	movl   $0xbffff000,0x8(%esp)
c010677c:	bf 
c010677d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106780:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106784:	89 04 24             	mov    %eax,(%esp)
c0106787:	e8 d3 a8 ff ff       	call   c010105f <pd_map>
            new_state->esp = (uint32_t) MEMORY_LAYOUT_STACK_TOP - 12;
c010678c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010678f:	c7 40 40 f4 ff ff bf 	movl   $0xbffffff4,0x40(%eax)

            uint32_t *stack = pd_automap_kernel(pd_get_current(), pframe, PTE_PRESENT | PTE_WRITABLE | PTE_USER) + 0x1000;
c0106796:	e8 29 af ff ff       	call   c01016c4 <pd_get_current>
c010679b:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c01067a2:	00 
c01067a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01067a6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01067aa:	89 04 24             	mov    %eax,(%esp)
c01067ad:	e8 f0 aa ff ff       	call   c01012a2 <pd_automap_kernel>
c01067b2:	05 00 10 00 00       	add    $0x1000,%eax
c01067b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            *--stack = argv;
c01067ba:	83 6d d4 04          	subl   $0x4,-0x2c(%ebp)
c01067be:	8b 55 1c             	mov    0x1c(%ebp),%edx
c01067c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01067c4:	89 10                	mov    %edx,(%eax)
            *--stack = argc;
c01067c6:	83 6d d4 04          	subl   $0x4,-0x2c(%ebp)
c01067ca:	8b 55 18             	mov    0x18(%ebp),%edx
c01067cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01067d0:	89 10                	mov    %edx,(%eax)
            *--stack = return_address;
c01067d2:	83 6d d4 04          	subl   $0x4,-0x2c(%ebp)
c01067d6:	8b 55 20             	mov    0x20(%ebp),%edx
c01067d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01067dc:	89 10                	mov    %edx,(%eax)
	}

		new_state->cs = 0x1b;
c01067de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01067e1:	c7 40 38 1b 00 00 00 	movl   $0x1b,0x38(%eax)
		new_state->ss = 0x23;
c01067e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01067eb:	c7 40 44 23 00 00 00 	movl   $0x23,0x44(%eax)
    }

    if(list_is_empty(process->zombie_tids))
c01067f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01067f5:	8b 40 28             	mov    0x28(%eax),%eax
c01067f8:	89 04 24             	mov    %eax,(%esp)
c01067fb:	e8 fb 19 00 00       	call   c01081fb <list_is_empty>
c0106800:	85 c0                	test   %eax,%eax
c0106802:	74 17                	je     c010681b <thread_create+0x27f>
        new_thread->tid = process->tid_counter++;
c0106804:	8b 45 08             	mov    0x8(%ebp),%eax
c0106807:	8b 40 20             	mov    0x20(%eax),%eax
c010680a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010680d:	89 42 18             	mov    %eax,0x18(%edx)
c0106810:	8d 50 01             	lea    0x1(%eax),%edx
c0106813:	8b 45 08             	mov    0x8(%ebp),%eax
c0106816:	89 50 20             	mov    %edx,0x20(%eax)
c0106819:	eb 16                	jmp    c0106831 <thread_create+0x295>
    else
        new_thread->tid = list_pop_back(process->zombie_tids);
c010681b:	8b 45 08             	mov    0x8(%ebp),%eax
c010681e:	8b 40 28             	mov    0x28(%eax),%eax
c0106821:	89 04 24             	mov    %eax,(%esp)
c0106824:	e8 ba 17 00 00       	call   c0107fe3 <list_pop_back>
c0106829:	89 c2                	mov    %eax,%edx
c010682b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010682e:	89 50 18             	mov    %edx,0x18(%eax)


    list_push_front(process->threads,new_thread);
c0106831:	8b 45 08             	mov    0x8(%ebp),%eax
c0106834:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106837:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010683a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010683e:	89 04 24             	mov    %eax,(%esp)
c0106841:	e8 4e 17 00 00       	call   c0107f94 <list_push_front>
    list_push_front(running_threads, new_thread);
c0106846:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c010684b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010684e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106852:	89 04 24             	mov    %eax,(%esp)
c0106855:	e8 3a 17 00 00       	call   c0107f94 <list_push_front>
    return new_thread;
c010685a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c010685d:	83 c4 3c             	add    $0x3c,%esp
c0106860:	5b                   	pop    %ebx
c0106861:	5e                   	pop    %esi
c0106862:	5f                   	pop    %edi
c0106863:	5d                   	pop    %ebp
c0106864:	c3                   	ret    

c0106865 <thread_kill>:

void thread_kill(struct thread_state *thread)
{
c0106865:	55                   	push   %ebp
c0106866:	89 e5                	mov    %esp,%ebp
c0106868:	83 ec 18             	sub    $0x18,%esp
    asm volatile("cli");
c010686b:	fa                   	cli    
    if(current_thread == thread)
c010686c:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0106871:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106874:	75 15                	jne    c010688b <thread_kill+0x26>
        thread->flags |= THREAD_ZOMBIE;
c0106876:	8b 45 08             	mov    0x8(%ebp),%eax
c0106879:	0f b7 40 10          	movzwl 0x10(%eax),%eax
c010687d:	89 c2                	mov    %eax,%edx
c010687f:	83 ca 08             	or     $0x8,%edx
c0106882:	8b 45 08             	mov    0x8(%ebp),%eax
c0106885:	66 89 50 10          	mov    %dx,0x10(%eax)
c0106889:	eb 0b                	jmp    c0106896 <thread_kill+0x31>
    else
    {
        thread_kill_sub(thread);
c010688b:	8b 45 08             	mov    0x8(%ebp),%eax
c010688e:	89 04 24             	mov    %eax,(%esp)
c0106891:	e8 03 00 00 00       	call   c0106899 <thread_kill_sub>
    }
    asm volatile("sti");
c0106896:	fb                   	sti    
}
c0106897:	c9                   	leave  
c0106898:	c3                   	ret    

c0106899 <thread_kill_sub>:

void thread_kill_sub(struct thread_state *thread)
{
c0106899:	55                   	push   %ebp
c010689a:	89 e5                	mov    %esp,%ebp
c010689c:	83 ec 28             	sub    $0x28,%esp
    if(thread->flags & THREAD_ACTIV || thread->flags & THREAD_ZOMBIE)
c010689f:	8b 45 08             	mov    0x8(%ebp),%eax
c01068a2:	0f b7 40 10          	movzwl 0x10(%eax),%eax
c01068a6:	0f b7 c0             	movzwl %ax,%eax
c01068a9:	83 e0 01             	and    $0x1,%eax
c01068ac:	84 c0                	test   %al,%al
c01068ae:	75 11                	jne    c01068c1 <thread_kill_sub+0x28>
c01068b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01068b3:	0f b7 40 10          	movzwl 0x10(%eax),%eax
c01068b7:	0f b7 c0             	movzwl %ax,%eax
c01068ba:	83 e0 08             	and    $0x8,%eax
c01068bd:	85 c0                	test   %eax,%eax
c01068bf:	74 47                	je     c0106908 <thread_kill_sub+0x6f>
    {
        list_set_first(running_threads);
c01068c1:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c01068c6:	89 04 24             	mov    %eax,(%esp)
c01068c9:	e8 02 19 00 00       	call   c01081d0 <list_set_first>
        while(!list_is_last(running_threads))
c01068ce:	eb 27                	jmp    c01068f7 <thread_kill_sub+0x5e>
        {
            struct thread_state *t = list_get_current(running_threads);
c01068d0:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c01068d5:	89 04 24             	mov    %eax,(%esp)
c01068d8:	e8 a0 18 00 00       	call   c010817d <list_get_current>
c01068dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if(t == thread)
c01068e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068e3:	3b 45 08             	cmp    0x8(%ebp),%eax
c01068e6:	75 0f                	jne    c01068f7 <thread_kill_sub+0x5e>
            {
                list_remove(running_threads);
c01068e8:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c01068ed:	89 04 24             	mov    %eax,(%esp)
c01068f0:	e8 06 18 00 00       	call   c01080fb <list_remove>
                break;
c01068f5:	eb 11                	jmp    c0106908 <thread_kill_sub+0x6f>
void thread_kill_sub(struct thread_state *thread)
{
    if(thread->flags & THREAD_ACTIV || thread->flags & THREAD_ZOMBIE)
    {
        list_set_first(running_threads);
        while(!list_is_last(running_threads))
c01068f7:	a1 44 02 11 c0       	mov    0xc0110244,%eax
c01068fc:	89 04 24             	mov    %eax,(%esp)
c01068ff:	e8 b4 18 00 00       	call   c01081b8 <list_is_last>
c0106904:	85 c0                	test   %eax,%eax
c0106906:	74 c8                	je     c01068d0 <thread_kill_sub+0x37>
                list_remove(running_threads);
                break;
            }
        }
    }
    free(thread->state);
c0106908:	8b 45 08             	mov    0x8(%ebp),%eax
c010690b:	8b 00                	mov    (%eax),%eax
c010690d:	89 04 24             	mov    %eax,(%esp)
c0106910:	e8 e2 c1 ff ff       	call   c0102af7 <free>
    if(! (thread->process->flags & PROCESS_ZOMBIE))
c0106915:	8b 45 08             	mov    0x8(%ebp),%eax
c0106918:	8b 40 04             	mov    0x4(%eax),%eax
c010691b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
c010691f:	0f b7 c0             	movzwl %ax,%eax
c0106922:	83 e0 04             	and    $0x4,%eax
c0106925:	85 c0                	test   %eax,%eax
c0106927:	0f 85 9a 00 00 00    	jne    c01069c7 <thread_kill_sub+0x12e>
    {
        list_push_front(thread->process->zombie_tids,thread->tid);
c010692d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106930:	8b 40 18             	mov    0x18(%eax),%eax
c0106933:	89 c2                	mov    %eax,%edx
c0106935:	8b 45 08             	mov    0x8(%ebp),%eax
c0106938:	8b 40 04             	mov    0x4(%eax),%eax
c010693b:	8b 40 28             	mov    0x28(%eax),%eax
c010693e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106942:	89 04 24             	mov    %eax,(%esp)
c0106945:	e8 4a 16 00 00       	call   c0107f94 <list_push_front>
        list_set_first(thread->process->threads);
c010694a:	8b 45 08             	mov    0x8(%ebp),%eax
c010694d:	8b 40 04             	mov    0x4(%eax),%eax
c0106950:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106953:	89 04 24             	mov    %eax,(%esp)
c0106956:	e8 75 18 00 00       	call   c01081d0 <list_set_first>
        while(!list_is_last(thread->process->threads))
c010695b:	eb 52                	jmp    c01069af <thread_kill_sub+0x116>
        {
            struct thread_state *t = list_get_current(thread->process->threads);
c010695d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106960:	8b 40 04             	mov    0x4(%eax),%eax
c0106963:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106966:	89 04 24             	mov    %eax,(%esp)
c0106969:	e8 0f 18 00 00       	call   c010817d <list_get_current>
c010696e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if(t == thread)
c0106971:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106974:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106977:	75 36                	jne    c01069af <thread_kill_sub+0x116>
            {
                list_remove(thread->process->threads);
c0106979:	8b 45 08             	mov    0x8(%ebp),%eax
c010697c:	8b 40 04             	mov    0x4(%eax),%eax
c010697f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106982:	89 04 24             	mov    %eax,(%esp)
c0106985:	e8 71 17 00 00       	call   c01080fb <list_remove>
                if(list_is_empty(thread->process->threads))
c010698a:	8b 45 08             	mov    0x8(%ebp),%eax
c010698d:	8b 40 04             	mov    0x4(%eax),%eax
c0106990:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106993:	89 04 24             	mov    %eax,(%esp)
c0106996:	e8 60 18 00 00       	call   c01081fb <list_is_empty>
c010699b:	85 c0                	test   %eax,%eax
c010699d:	74 27                	je     c01069c6 <thread_kill_sub+0x12d>
                    process_kill(thread->process);
c010699f:	8b 45 08             	mov    0x8(%ebp),%eax
c01069a2:	8b 40 04             	mov    0x4(%eax),%eax
c01069a5:	89 04 24             	mov    %eax,(%esp)
c01069a8:	e8 0d e9 ff ff       	call   c01052ba <process_kill>
                break;
c01069ad:	eb 17                	jmp    c01069c6 <thread_kill_sub+0x12d>
    free(thread->state);
    if(! (thread->process->flags & PROCESS_ZOMBIE))
    {
        list_push_front(thread->process->zombie_tids,thread->tid);
        list_set_first(thread->process->threads);
        while(!list_is_last(thread->process->threads))
c01069af:	8b 45 08             	mov    0x8(%ebp),%eax
c01069b2:	8b 40 04             	mov    0x4(%eax),%eax
c01069b5:	8b 40 1c             	mov    0x1c(%eax),%eax
c01069b8:	89 04 24             	mov    %eax,(%esp)
c01069bb:	e8 f8 17 00 00       	call   c01081b8 <list_is_last>
c01069c0:	85 c0                	test   %eax,%eax
c01069c2:	74 99                	je     c010695d <thread_kill_sub+0xc4>
c01069c4:	eb 01                	jmp    c01069c7 <thread_kill_sub+0x12e>
            if(t == thread)
            {
                list_remove(thread->process->threads);
                if(list_is_empty(thread->process->threads))
                    process_kill(thread->process);
                break;
c01069c6:	90                   	nop
            }
        }
    }
    free(thread);
c01069c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01069ca:	89 04 24             	mov    %eax,(%esp)
c01069cd:	e8 25 c1 ff ff       	call   c0102af7 <free>
}
c01069d2:	c9                   	leave  
c01069d3:	c3                   	ret    

c01069d4 <thread_exit>:

void thread_exit(struct cpu_state **cpu)
{
c01069d4:	55                   	push   %ebp
c01069d5:	89 e5                	mov    %esp,%ebp
c01069d7:	83 ec 18             	sub    $0x18,%esp
    current_thread->flags |= THREAD_ZOMBIE;
c01069da:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c01069df:	8b 15 40 02 11 c0    	mov    0xc0110240,%edx
c01069e5:	0f b7 52 10          	movzwl 0x10(%edx),%edx
c01069e9:	83 ca 08             	or     $0x8,%edx
c01069ec:	66 89 50 10          	mov    %dx,0x10(%eax)
    *cpu = task_schedule(*cpu);
c01069f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01069f3:	8b 00                	mov    (%eax),%eax
c01069f5:	89 04 24             	mov    %eax,(%esp)
c01069f8:	e8 bd e2 ff ff       	call   c0104cba <task_schedule>
c01069fd:	8b 55 08             	mov    0x8(%ebp),%edx
c0106a00:	89 02                	mov    %eax,(%edx)
}
c0106a02:	c9                   	leave  
c0106a03:	c3                   	ret    

c0106a04 <launch_thread>:

void launch_thread(struct cpu_state **cpu)
{
c0106a04:	55                   	push   %ebp
c0106a05:	89 e5                	mov    %esp,%ebp
c0106a07:	56                   	push   %esi
c0106a08:	53                   	push   %ebx
c0106a09:	83 ec 20             	sub    $0x20,%esp
    thread_create(current_thread->process, USERMODE, (*cpu)->ebx, NULL, (*cpu)->ecx, (*cpu)->edx, (*cpu)->esi);
c0106a0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a0f:	8b 00                	mov    (%eax),%eax
c0106a11:	8b 40 14             	mov    0x14(%eax),%eax
c0106a14:	89 c6                	mov    %eax,%esi
c0106a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a19:	8b 00                	mov    (%eax),%eax
c0106a1b:	8b 40 20             	mov    0x20(%eax),%eax
c0106a1e:	89 c3                	mov    %eax,%ebx
c0106a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a23:	8b 00                	mov    (%eax),%eax
c0106a25:	8b 40 24             	mov    0x24(%eax),%eax
c0106a28:	89 c1                	mov    %eax,%ecx
c0106a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a2d:	8b 00                	mov    (%eax),%eax
c0106a2f:	8b 50 1c             	mov    0x1c(%eax),%edx
c0106a32:	a1 40 02 11 c0       	mov    0xc0110240,%eax
c0106a37:	8b 40 04             	mov    0x4(%eax),%eax
c0106a3a:	89 74 24 18          	mov    %esi,0x18(%esp)
c0106a3e:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c0106a42:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106a46:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106a4d:	00 
c0106a4e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106a52:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0106a59:	00 
c0106a5a:	89 04 24             	mov    %eax,(%esp)
c0106a5d:	e8 3a fb ff ff       	call   c010659c <thread_create>
}
c0106a62:	83 c4 20             	add    $0x20,%esp
c0106a65:	5b                   	pop    %ebx
c0106a66:	5e                   	pop    %esi
c0106a67:	5d                   	pop    %ebp
c0106a68:	c3                   	ret    
c0106a69:	00 00                	add    %al,(%eax)
	...

c0106a6c <strnlen>:
 * @param string pointer
 * @param size_t maxlen
 * @return string lengh<= maxlen
 */
size_t strnlen(const char *s, size_t maxlen)
{
c0106a6c:	55                   	push   %ebp
c0106a6d:	89 e5                	mov    %esp,%ebp
c0106a6f:	83 ec 10             	sub    $0x10,%esp
	const char *str = s;
c0106a72:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a75:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while (*str && maxlen) {
c0106a78:	eb 08                	jmp    c0106a82 <strnlen+0x16>
		++str;
c0106a7a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
		maxlen--;
c0106a7e:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
 * @return string lengh<= maxlen
 */
size_t strnlen(const char *s, size_t maxlen)
{
	const char *str = s;
	while (*str && maxlen) {
c0106a82:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106a85:	0f b6 00             	movzbl (%eax),%eax
c0106a88:	84 c0                	test   %al,%al
c0106a8a:	74 06                	je     c0106a92 <strnlen+0x26>
c0106a8c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106a90:	75 e8                	jne    c0106a7a <strnlen+0xe>
		++str;
		maxlen--;
	}

	return str - s;
c0106a92:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a98:	89 d1                	mov    %edx,%ecx
c0106a9a:	29 c1                	sub    %eax,%ecx
c0106a9c:	89 c8                	mov    %ecx,%eax
}
c0106a9e:	c9                   	leave  
c0106a9f:	c3                   	ret    

c0106aa0 <strlen>:
 * get string lengh
 * @param string pointer
 * @return string lengh
 */
size_t strlen(const char *string)
{
c0106aa0:	55                   	push   %ebp
c0106aa1:	89 e5                	mov    %esp,%ebp
c0106aa3:	83 ec 10             	sub    $0x10,%esp
	size_t i = 0;
c0106aa6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	while (string[i]) {
c0106aad:	eb 04                	jmp    c0106ab3 <strlen+0x13>
		i++;
c0106aaf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * @return string lengh
 */
size_t strlen(const char *string)
{
	size_t i = 0;
	while (string[i]) {
c0106ab3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ab6:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ab9:	01 d0                	add    %edx,%eax
c0106abb:	0f b6 00             	movzbl (%eax),%eax
c0106abe:	84 c0                	test   %al,%al
c0106ac0:	75 ed                	jne    c0106aaf <strlen+0xf>
		i++;
	}
	
	return i;
c0106ac2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106ac5:	c9                   	leave  
c0106ac6:	c3                   	ret    

c0106ac7 <strcpy>:
 * @param destination pointer
 * @param source string
 * @return destination string pointer
 */
char *strcpy(char *dest, const char *src)
{
c0106ac7:	55                   	push   %ebp
c0106ac8:	89 e5                	mov    %esp,%ebp
c0106aca:	83 ec 10             	sub    $0x10,%esp
	uint32_t i = 0;
c0106acd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	while (src[i]) {
c0106ad4:	eb 19                	jmp    c0106aef <strcpy+0x28>
		dest[i] = src[i];
c0106ad6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ad9:	8b 55 08             	mov    0x8(%ebp),%edx
c0106adc:	01 c2                	add    %eax,%edx
c0106ade:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ae1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0106ae4:	01 c8                	add    %ecx,%eax
c0106ae6:	0f b6 00             	movzbl (%eax),%eax
c0106ae9:	88 02                	mov    %al,(%edx)
		i++;
c0106aeb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * @return destination string pointer
 */
char *strcpy(char *dest, const char *src)
{
	uint32_t i = 0;
	while (src[i]) {
c0106aef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106af2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106af5:	01 d0                	add    %edx,%eax
c0106af7:	0f b6 00             	movzbl (%eax),%eax
c0106afa:	84 c0                	test   %al,%al
c0106afc:	75 d8                	jne    c0106ad6 <strcpy+0xf>
		dest[i] = src[i];
		i++;
	}
	dest[i] = src[i];
c0106afe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b01:	8b 55 08             	mov    0x8(%ebp),%edx
c0106b04:	01 c2                	add    %eax,%edx
c0106b06:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b09:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0106b0c:	01 c8                	add    %ecx,%eax
c0106b0e:	0f b6 00             	movzbl (%eax),%eax
c0106b11:	88 02                	mov    %al,(%edx)
	return dest;
c0106b13:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106b16:	c9                   	leave  
c0106b17:	c3                   	ret    

c0106b18 <strncpy>:
 * @param source string
 * @param maximal number of chars
 * @return destination string
 */
char *strncpy(char *dest, const char *src,size_t n)
{
c0106b18:	55                   	push   %ebp
c0106b19:	89 e5                	mov    %esp,%ebp
c0106b1b:	83 ec 10             	sub    $0x10,%esp
	uint32_t i;
	bool eos = false;
c0106b1e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i = 0; i < n; i++) {
c0106b25:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0106b2c:	eb 45                	jmp    c0106b73 <strncpy+0x5b>
		if (eos == false) {
c0106b2e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106b32:	75 30                	jne    c0106b64 <strncpy+0x4c>
			if (src[i] == NULL) {
c0106b34:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b37:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106b3a:	01 d0                	add    %edx,%eax
c0106b3c:	0f b6 00             	movzbl (%eax),%eax
c0106b3f:	0f be c0             	movsbl %al,%eax
c0106b42:	85 c0                	test   %eax,%eax
c0106b44:	75 07                	jne    c0106b4d <strncpy+0x35>
				eos = true;
c0106b46:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
			}
			dest[i] = src[i];
c0106b4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b50:	8b 55 08             	mov    0x8(%ebp),%edx
c0106b53:	01 c2                	add    %eax,%edx
c0106b55:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b58:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0106b5b:	01 c8                	add    %ecx,%eax
c0106b5d:	0f b6 00             	movzbl (%eax),%eax
c0106b60:	88 02                	mov    %al,(%edx)
c0106b62:	eb 0b                	jmp    c0106b6f <strncpy+0x57>
		} else {
			dest[i] = NULL;
c0106b64:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b67:	8b 55 08             	mov    0x8(%ebp),%edx
c0106b6a:	01 d0                	add    %edx,%eax
c0106b6c:	c6 00 00             	movb   $0x0,(%eax)
 */
char *strncpy(char *dest, const char *src,size_t n)
{
	uint32_t i;
	bool eos = false;
	for (i = 0; i < n; i++) {
c0106b6f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106b73:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b76:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106b79:	72 b3                	jb     c0106b2e <strncpy+0x16>
			dest[i] = src[i];
		} else {
			dest[i] = NULL;
		}
	}
	return dest;
c0106b7b:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106b7e:	c9                   	leave  
c0106b7f:	c3                   	ret    

c0106b80 <strcat>:
 * @param destination string
 * @param source string
 * @return destination string
 */
char *strcat(char *dest, const char *src)
{
c0106b80:	55                   	push   %ebp
c0106b81:	89 e5                	mov    %esp,%ebp
c0106b83:	83 ec 18             	sub    $0x18,%esp
	size_t n = strlen(dest);
c0106b86:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b89:	89 04 24             	mov    %eax,(%esp)
c0106b8c:	e8 0f ff ff ff       	call   c0106aa0 <strlen>
c0106b91:	89 45 fc             	mov    %eax,-0x4(%ebp)
	strcpy((char*)(dest+n),src);
c0106b94:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b97:	8b 55 08             	mov    0x8(%ebp),%edx
c0106b9a:	01 c2                	add    %eax,%edx
c0106b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106b9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106ba3:	89 14 24             	mov    %edx,(%esp)
c0106ba6:	e8 1c ff ff ff       	call   c0106ac7 <strcpy>
	return dest;
c0106bab:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106bae:	c9                   	leave  
c0106baf:	c3                   	ret    

c0106bb0 <strncat>:
 * @param source string
 * @param maximal number of chars
 * @return destination string
 */
char *strncat(char *dest, const char *src, size_t n)
{
c0106bb0:	55                   	push   %ebp
c0106bb1:	89 e5                	mov    %esp,%ebp
c0106bb3:	83 ec 1c             	sub    $0x1c,%esp
	size_t i = strlen(dest);
c0106bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bb9:	89 04 24             	mov    %eax,(%esp)
c0106bbc:	e8 df fe ff ff       	call   c0106aa0 <strlen>
c0106bc1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	strncpy((char*)(dest+i),src,n);
c0106bc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bc7:	8b 55 08             	mov    0x8(%ebp),%edx
c0106bca:	01 c2                	add    %eax,%edx
c0106bcc:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bcf:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106bd3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106bd6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106bda:	89 14 24             	mov    %edx,(%esp)
c0106bdd:	e8 36 ff ff ff       	call   c0106b18 <strncpy>
	return dest;
c0106be2:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106be5:	c9                   	leave  
c0106be6:	c3                   	ret    

c0106be7 <strcmp>:
 * @return 0=strings are similar;
 * @return 1=the value of the first different char of string0 is bigger
 * @return -1=the value of the first different char of string1 is bigger
 */
int strcmp(const char *str1, const char *str2)
{
c0106be7:	55                   	push   %ebp
c0106be8:	89 e5                	mov    %esp,%ebp
c0106bea:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
c0106bed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	while(str1[i] != '\0' && str2[i] != '\0') {
c0106bf4:	eb 21                	jmp    c0106c17 <strcmp+0x30>
		if(str1[i] != str2[i]){
c0106bf6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bf9:	03 45 08             	add    0x8(%ebp),%eax
c0106bfc:	0f b6 10             	movzbl (%eax),%edx
c0106bff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c02:	03 45 0c             	add    0xc(%ebp),%eax
c0106c05:	0f b6 00             	movzbl (%eax),%eax
c0106c08:	38 c2                	cmp    %al,%dl
c0106c0a:	74 07                	je     c0106c13 <strcmp+0x2c>
			return 0;
c0106c0c:	b8 00 00 00 00       	mov    $0x0,%eax
c0106c11:	eb 5e                	jmp    c0106c71 <strcmp+0x8a>
			break;
		}
		i++;
c0106c13:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * @return -1=the value of the first different char of string1 is bigger
 */
int strcmp(const char *str1, const char *str2)
{
	int i = 0;
	while(str1[i] != '\0' && str2[i] != '\0') {
c0106c17:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c1a:	03 45 08             	add    0x8(%ebp),%eax
c0106c1d:	0f b6 00             	movzbl (%eax),%eax
c0106c20:	84 c0                	test   %al,%al
c0106c22:	74 0d                	je     c0106c31 <strcmp+0x4a>
c0106c24:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c27:	03 45 0c             	add    0xc(%ebp),%eax
c0106c2a:	0f b6 00             	movzbl (%eax),%eax
c0106c2d:	84 c0                	test   %al,%al
c0106c2f:	75 c5                	jne    c0106bf6 <strcmp+0xf>
			return 0;
			break;
		}
		i++;
	}
	if( (str1[i] == '\0' && str2[i] != '\0') || (str1[i] != '\0' && str2[i] == '\0') )
c0106c31:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c34:	03 45 08             	add    0x8(%ebp),%eax
c0106c37:	0f b6 00             	movzbl (%eax),%eax
c0106c3a:	84 c0                	test   %al,%al
c0106c3c:	75 0d                	jne    c0106c4b <strcmp+0x64>
c0106c3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c41:	03 45 0c             	add    0xc(%ebp),%eax
c0106c44:	0f b6 00             	movzbl (%eax),%eax
c0106c47:	84 c0                	test   %al,%al
c0106c49:	75 1a                	jne    c0106c65 <strcmp+0x7e>
c0106c4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c4e:	03 45 08             	add    0x8(%ebp),%eax
c0106c51:	0f b6 00             	movzbl (%eax),%eax
c0106c54:	84 c0                	test   %al,%al
c0106c56:	74 14                	je     c0106c6c <strcmp+0x85>
c0106c58:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c5b:	03 45 0c             	add    0xc(%ebp),%eax
c0106c5e:	0f b6 00             	movzbl (%eax),%eax
c0106c61:	84 c0                	test   %al,%al
c0106c63:	75 07                	jne    c0106c6c <strcmp+0x85>
		return 0;
c0106c65:	b8 00 00 00 00       	mov    $0x0,%eax
c0106c6a:	eb 05                	jmp    c0106c71 <strcmp+0x8a>
	else
		return 1;
c0106c6c:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0106c71:	c9                   	leave  
c0106c72:	c3                   	ret    

c0106c73 <strncmp>:
 * @return 0=strings are similar;
 * @return 1=the value of the first different char of string0 is bigger
 * @return -1=the value of the first different char of string1 is bigger
 */
int strncmp(const char *st0, const char *st1, size_t n)
{
c0106c73:	55                   	push   %ebp
c0106c74:	89 e5                	mov    %esp,%ebp
c0106c76:	83 ec 10             	sub    $0x10,%esp
	uint32_t i;
	int ret;
	ret = NULL;
c0106c79:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i = 0; st0[i] == st1[i] && st0[i] != 0 && i < n; i++);
c0106c80:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0106c87:	eb 04                	jmp    c0106c8d <strncmp+0x1a>
c0106c89:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106c8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c90:	8b 55 08             	mov    0x8(%ebp),%edx
c0106c93:	01 d0                	add    %edx,%eax
c0106c95:	0f b6 10             	movzbl (%eax),%edx
c0106c98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c9b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0106c9e:	01 c8                	add    %ecx,%eax
c0106ca0:	0f b6 00             	movzbl (%eax),%eax
c0106ca3:	38 c2                	cmp    %al,%dl
c0106ca5:	75 17                	jne    c0106cbe <strncmp+0x4b>
c0106ca7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106caa:	8b 55 08             	mov    0x8(%ebp),%edx
c0106cad:	01 d0                	add    %edx,%eax
c0106caf:	0f b6 00             	movzbl (%eax),%eax
c0106cb2:	84 c0                	test   %al,%al
c0106cb4:	74 08                	je     c0106cbe <strncmp+0x4b>
c0106cb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106cb9:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106cbc:	72 cb                	jb     c0106c89 <strncmp+0x16>
	ret = st0[i] - st1[i];
c0106cbe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106cc1:	8b 55 08             	mov    0x8(%ebp),%edx
c0106cc4:	01 d0                	add    %edx,%eax
c0106cc6:	0f b6 00             	movzbl (%eax),%eax
c0106cc9:	0f be d0             	movsbl %al,%edx
c0106ccc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ccf:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0106cd2:	01 c8                	add    %ecx,%eax
c0106cd4:	0f b6 00             	movzbl (%eax),%eax
c0106cd7:	0f be c0             	movsbl %al,%eax
c0106cda:	89 d1                	mov    %edx,%ecx
c0106cdc:	29 c1                	sub    %eax,%ecx
c0106cde:	89 c8                	mov    %ecx,%eax
c0106ce0:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (ret < 0) {
c0106ce3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106ce7:	79 09                	jns    c0106cf2 <strncmp+0x7f>
	    ret =- 1;
c0106ce9:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
c0106cf0:	eb 0d                	jmp    c0106cff <strncmp+0x8c>
	}
	else if (ret > 0) {
c0106cf2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106cf6:	7e 07                	jle    c0106cff <strncmp+0x8c>
	    ret = 1;
c0106cf8:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	}
	return ret;
c0106cff:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0106d02:	c9                   	leave  
c0106d03:	c3                   	ret    

c0106d04 <strchr>:
 * @param searched character
 * @return pointer to the first similar char
 * @return 0=no char in str is similar to c
 */
char *strchr(const char *str, int c)
{
c0106d04:	55                   	push   %ebp
c0106d05:	89 e5                	mov    %esp,%ebp
c0106d07:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
c0106d0a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	while (str[i] != (char)c && str[i] != 0)
c0106d11:	eb 04                	jmp    c0106d17 <strchr+0x13>
	{
	    i++;
c0106d13:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * @return 0=no char in str is similar to c
 */
char *strchr(const char *str, int c)
{
	int i = 0;
	while (str[i] != (char)c && str[i] != 0)
c0106d17:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d1a:	03 45 08             	add    0x8(%ebp),%eax
c0106d1d:	0f b6 10             	movzbl (%eax),%edx
c0106d20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106d23:	38 c2                	cmp    %al,%dl
c0106d25:	74 0d                	je     c0106d34 <strchr+0x30>
c0106d27:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d2a:	03 45 08             	add    0x8(%ebp),%eax
c0106d2d:	0f b6 00             	movzbl (%eax),%eax
c0106d30:	84 c0                	test   %al,%al
c0106d32:	75 df                	jne    c0106d13 <strchr+0xf>
	{
	    i++;
	}
	if (str[i]) {
c0106d34:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d37:	03 45 08             	add    0x8(%ebp),%eax
c0106d3a:	0f b6 00             	movzbl (%eax),%eax
c0106d3d:	84 c0                	test   %al,%al
c0106d3f:	74 08                	je     c0106d49 <strchr+0x45>
	    return (char*)(str+i);
c0106d41:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d44:	03 45 08             	add    0x8(%ebp),%eax
c0106d47:	eb 05                	jmp    c0106d4e <strchr+0x4a>
	}
	return NULL;
c0106d49:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106d4e:	c9                   	leave  
c0106d4f:	c3                   	ret    

c0106d50 <strrchr>:
 * @param searched character
 * @return pointer to the last similar char
 * @return 0=no char in str is similar to c
 */
char *strrchr(const char *str, int c)
{
c0106d50:	55                   	push   %ebp
c0106d51:	89 e5                	mov    %esp,%ebp
c0106d53:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
c0106d56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	char* ret = NULL;
c0106d5d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while ( str[i] != 0) {
c0106d64:	eb 1d                	jmp    c0106d83 <strrchr+0x33>
		if (str[i] == (char)c) {
c0106d66:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d69:	03 45 08             	add    0x8(%ebp),%eax
c0106d6c:	0f b6 10             	movzbl (%eax),%edx
c0106d6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106d72:	38 c2                	cmp    %al,%dl
c0106d74:	75 09                	jne    c0106d7f <strrchr+0x2f>
		    ret = (char*)(str+i);
c0106d76:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d79:	03 45 08             	add    0x8(%ebp),%eax
c0106d7c:	89 45 f8             	mov    %eax,-0x8(%ebp)
		}
		i++;
c0106d7f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 */
char *strrchr(const char *str, int c)
{
	int i = 0;
	char* ret = NULL;
	while ( str[i] != 0) {
c0106d83:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d86:	03 45 08             	add    0x8(%ebp),%eax
c0106d89:	0f b6 00             	movzbl (%eax),%eax
c0106d8c:	84 c0                	test   %al,%al
c0106d8e:	75 d6                	jne    c0106d66 <strrchr+0x16>
		if (str[i] == (char)c) {
		    ret = (char*)(str+i);
		}
		i++;
	}
	return ret;
c0106d90:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0106d93:	c9                   	leave  
c0106d94:	c3                   	ret    

c0106d95 <strtok>:
char* strpbrk(const char* st0, const char* st1) {}
char* strstr(const char* st0, const char* st1) {}
char* strerror(size_t n) {}
*/

char *strtok(const char *string, char *delimiters) {
c0106d95:	55                   	push   %ebp
c0106d96:	89 e5                	mov    %esp,%ebp
c0106d98:	83 ec 28             	sub    $0x28,%esp
	static char *s = NULL;
	static int num_del = 0;
	if(string != NULL) {
c0106d9b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106d9f:	74 1a                	je     c0106dbb <strtok+0x26>
		s = string;
c0106da1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106da4:	a3 a0 ea 10 c0       	mov    %eax,0xc010eaa0
		num_del = strlen(delimiters);
c0106da9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106dac:	89 04 24             	mov    %eax,(%esp)
c0106daf:	e8 ec fc ff ff       	call   c0106aa0 <strlen>
c0106db4:	a3 a4 ea 10 c0       	mov    %eax,0xc010eaa4
c0106db9:	eb 1b                	jmp    c0106dd6 <strtok+0x41>
	} else {
		if(s == NULL) {
c0106dbb:	a1 a0 ea 10 c0       	mov    0xc010eaa0,%eax
c0106dc0:	85 c0                	test   %eax,%eax
c0106dc2:	75 0a                	jne    c0106dce <strtok+0x39>
      			return NULL;
c0106dc4:	b8 00 00 00 00       	mov    $0x0,%eax
c0106dc9:	e9 d6 00 00 00       	jmp    c0106ea4 <strtok+0x10f>
    		}
		string = s;
c0106dce:	a1 a0 ea 10 c0       	mov    0xc010eaa0,%eax
c0106dd3:	89 45 08             	mov    %eax,0x8(%ebp)
	}
	int i, j = 0;
c0106dd6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	while(*s != '\0') {
c0106ddd:	e9 82 00 00 00       	jmp    c0106e64 <strtok+0xcf>
		for(i = 0; i < num_del; i++) {
c0106de2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106de9:	eb 5e                	jmp    c0106e49 <strtok+0xb4>
			if(*s == delimiters[i]) {
c0106deb:	a1 a0 ea 10 c0       	mov    0xc010eaa0,%eax
c0106df0:	0f b6 10             	movzbl (%eax),%edx
c0106df3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106df6:	03 45 0c             	add    0xc(%ebp),%eax
c0106df9:	0f b6 00             	movzbl (%eax),%eax
c0106dfc:	38 c2                	cmp    %al,%dl
c0106dfe:	75 45                	jne    c0106e45 <strtok+0xb0>
				s++;
c0106e00:	a1 a0 ea 10 c0       	mov    0xc010eaa0,%eax
c0106e05:	83 c0 01             	add    $0x1,%eax
c0106e08:	a3 a0 ea 10 c0       	mov    %eax,0xc010eaa0
				char *ret = (char*) malloc(j+1);
c0106e0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e10:	83 c0 01             	add    $0x1,%eax
c0106e13:	89 04 24             	mov    %eax,(%esp)
c0106e16:	e8 c1 bc ff ff       	call   c0102adc <malloc>
c0106e1b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				memcpy(ret, string, j);
c0106e1e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0106e21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106e24:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e27:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106e2b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e2f:	89 04 24             	mov    %eax,(%esp)
c0106e32:	e8 6f 00 00 00       	call   c0106ea6 <memcpy>
				ret[j] = '\0';
c0106e37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e3a:	03 45 ec             	add    -0x14(%ebp),%eax
c0106e3d:	c6 00 00             	movb   $0x0,(%eax)
				return ret;
c0106e40:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106e43:	eb 5f                	jmp    c0106ea4 <strtok+0x10f>
    		}
		string = s;
	}
	int i, j = 0;
	while(*s != '\0') {
		for(i = 0; i < num_del; i++) {
c0106e45:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106e49:	a1 a4 ea 10 c0       	mov    0xc010eaa4,%eax
c0106e4e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0106e51:	7c 98                	jl     c0106deb <strtok+0x56>
				memcpy(ret, string, j);
				ret[j] = '\0';
				return ret;
			}
		}
		s++;
c0106e53:	a1 a0 ea 10 c0       	mov    0xc010eaa0,%eax
c0106e58:	83 c0 01             	add    $0x1,%eax
c0106e5b:	a3 a0 ea 10 c0       	mov    %eax,0xc010eaa0
		j++;
c0106e60:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
      			return NULL;
    		}
		string = s;
	}
	int i, j = 0;
	while(*s != '\0') {
c0106e64:	a1 a0 ea 10 c0       	mov    0xc010eaa0,%eax
c0106e69:	0f b6 00             	movzbl (%eax),%eax
c0106e6c:	84 c0                	test   %al,%al
c0106e6e:	0f 85 6e ff ff ff    	jne    c0106de2 <strtok+0x4d>
		}
		s++;
		j++;
	}
		  
	char *ret = (char*) malloc(j+1);
c0106e74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e77:	83 c0 01             	add    $0x1,%eax
c0106e7a:	89 04 24             	mov    %eax,(%esp)
c0106e7d:	e8 5a bc ff ff       	call   c0102adc <malloc>
c0106e82:	89 45 e8             	mov    %eax,-0x18(%ebp)
	strcpy(ret, string);
c0106e85:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106e8f:	89 04 24             	mov    %eax,(%esp)
c0106e92:	e8 30 fc ff ff       	call   c0106ac7 <strcpy>
	  
	s = NULL;
c0106e97:	c7 05 a0 ea 10 c0 00 	movl   $0x0,0xc010eaa0
c0106e9e:	00 00 00 
	return ret;
c0106ea1:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0106ea4:	c9                   	leave  
c0106ea5:	c3                   	ret    

c0106ea6 <memcpy>:
 * @param source
 * @param size of source area
 * @return pointer to destination area
 */
void *memcpy(void *destination, const void *source, size_t size)
{
c0106ea6:	55                   	push   %ebp
c0106ea7:	89 e5                	mov    %esp,%ebp
c0106ea9:	83 ec 10             	sub    $0x10,%esp
	uint8_t *dest = destination;
c0106eac:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
	const uint8_t *sour = source;
c0106eb2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106eb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t i = 0;
c0106eb8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	while (i < size) {
c0106ebf:	eb 19                	jmp    c0106eda <memcpy+0x34>
		dest[i] = sour[i];
c0106ec1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ec4:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0106ec7:	01 c2                	add    %eax,%edx
c0106ec9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106ecc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0106ecf:	01 c8                	add    %ecx,%eax
c0106ed1:	0f b6 00             	movzbl (%eax),%eax
c0106ed4:	88 02                	mov    %al,(%edx)
		i++;
c0106ed6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
void *memcpy(void *destination, const void *source, size_t size)
{
	uint8_t *dest = destination;
	const uint8_t *sour = source;
	uint32_t i = 0;
	while (i < size) {
c0106eda:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106edd:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106ee0:	72 df                	jb     c0106ec1 <memcpy+0x1b>
		dest[i] = sour[i];
		i++;
	}
	return destination;
c0106ee2:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106ee5:	c9                   	leave  
c0106ee6:	c3                   	ret    

c0106ee7 <memmove>:
 * @param source
 * @param size of source area
 * @return pointer to destination area
 */
void *memmove(void *destination,void *source, size_t n)
{
c0106ee7:	55                   	push   %ebp
c0106ee8:	89 e5                	mov    %esp,%ebp
c0106eea:	83 ec 1c             	sub    $0x1c,%esp
	char *dest = destination;
c0106eed:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	char *src = source;
c0106ef3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ef6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	char *c, overlap = 0;
c0106ef9:	c6 45 fb 00          	movb   $0x0,-0x5(%ebp)
	for (c = src; c < src + n; c++) {
c0106efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f00:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0106f03:	eb 10                	jmp    c0106f15 <memmove+0x2e>
		if (c == dest) {
c0106f05:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f08:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106f0b:	75 04                	jne    c0106f11 <memmove+0x2a>
			overlap = 1;
c0106f0d:	c6 45 fb 01          	movb   $0x1,-0x5(%ebp)
void *memmove(void *destination,void *source, size_t n)
{
	char *dest = destination;
	char *src = source;
	char *c, overlap = 0;
	for (c = src; c < src + n; c++) {
c0106f11:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106f15:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f18:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106f1b:	01 d0                	add    %edx,%eax
c0106f1d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0106f20:	77 e3                	ja     c0106f05 <memmove+0x1e>
		if (c == dest) {
			overlap = 1;
		}
	}
	if (overlap) {
c0106f22:	80 7d fb 00          	cmpb   $0x0,-0x5(%ebp)
c0106f26:	74 33                	je     c0106f5b <memmove+0x74>
		for (c = src + n - 1; c >= src; c--) {
c0106f28:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f2b:	83 e8 01             	sub    $0x1,%eax
c0106f2e:	03 45 f0             	add    -0x10(%ebp),%eax
c0106f31:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0106f34:	eb 1b                	jmp    c0106f51 <memmove+0x6a>
			*(c + (dest - src)) = *c;
c0106f36:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106f39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f3c:	89 d1                	mov    %edx,%ecx
c0106f3e:	29 c1                	sub    %eax,%ecx
c0106f40:	89 c8                	mov    %ecx,%eax
c0106f42:	03 45 fc             	add    -0x4(%ebp),%eax
c0106f45:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106f48:	0f b6 12             	movzbl (%edx),%edx
c0106f4b:	88 10                	mov    %dl,(%eax)
		if (c == dest) {
			overlap = 1;
		}
	}
	if (overlap) {
		for (c = src + n - 1; c >= src; c--) {
c0106f4d:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c0106f51:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f54:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106f57:	73 dd                	jae    c0106f36 <memmove+0x4f>
c0106f59:	eb 19                	jmp    c0106f74 <memmove+0x8d>
			*(c + (dest - src)) = *c;
		}
	} else {
		memcpy(dest, src, n);
c0106f5b:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f5e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f65:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f6c:	89 04 24             	mov    %eax,(%esp)
c0106f6f:	e8 32 ff ff ff       	call   c0106ea6 <memcpy>
	}
	return destination;
c0106f74:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0106f77:	c9                   	leave  
c0106f78:	c3                   	ret    

c0106f79 <memcmp>:
 * @return 0=areas are similar
 * @return 1=the value of the first different byte of area0 is bigger
 * @return -1=the value of the first different byte of area1 is bigger
 */
int memcmp(const void *mem0, const void *mem1, size_t n)
{
c0106f79:	55                   	push   %ebp
c0106f7a:	89 e5                	mov    %esp,%ebp
c0106f7c:	83 ec 10             	sub    $0x10,%esp
	const char *st0 = mem0;
c0106f7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f82:	89 45 f4             	mov    %eax,-0xc(%ebp)
	const char *st1 = mem1;
c0106f85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32_t i;
	int ret;
	ret = NULL;
c0106f8b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i = 0; st0[i] == st1[i] && st0[i] !=0 && i<n; i++);
c0106f92:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0106f99:	eb 04                	jmp    c0106f9f <memcmp+0x26>
c0106f9b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0106f9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fa2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106fa5:	01 d0                	add    %edx,%eax
c0106fa7:	0f b6 10             	movzbl (%eax),%edx
c0106faa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fad:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0106fb0:	01 c8                	add    %ecx,%eax
c0106fb2:	0f b6 00             	movzbl (%eax),%eax
c0106fb5:	38 c2                	cmp    %al,%dl
c0106fb7:	75 17                	jne    c0106fd0 <memcmp+0x57>
c0106fb9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fbc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106fbf:	01 d0                	add    %edx,%eax
c0106fc1:	0f b6 00             	movzbl (%eax),%eax
c0106fc4:	84 c0                	test   %al,%al
c0106fc6:	74 08                	je     c0106fd0 <memcmp+0x57>
c0106fc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fcb:	3b 45 10             	cmp    0x10(%ebp),%eax
c0106fce:	72 cb                	jb     c0106f9b <memcmp+0x22>
	ret = st0[i] - st1[i];
c0106fd0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106fd6:	01 d0                	add    %edx,%eax
c0106fd8:	0f b6 00             	movzbl (%eax),%eax
c0106fdb:	0f be d0             	movsbl %al,%edx
c0106fde:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fe1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0106fe4:	01 c8                	add    %ecx,%eax
c0106fe6:	0f b6 00             	movzbl (%eax),%eax
c0106fe9:	0f be c0             	movsbl %al,%eax
c0106fec:	89 d1                	mov    %edx,%ecx
c0106fee:	29 c1                	sub    %eax,%ecx
c0106ff0:	89 c8                	mov    %ecx,%eax
c0106ff2:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (ret < 0) {
c0106ff5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106ff9:	79 09                	jns    c0107004 <memcmp+0x8b>
	    ret =- 1;
c0106ffb:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
c0107002:	eb 0d                	jmp    c0107011 <memcmp+0x98>
	}
	else if (ret > 0) {
c0107004:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0107008:	7e 07                	jle    c0107011 <memcmp+0x98>
	    ret = 1;
c010700a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	}
	return ret;
c0107011:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0107014:	c9                   	leave  
c0107015:	c3                   	ret    

c0107016 <memchr>:
 * @param size of mem
 * @return pointer to the fist similar value
 * @return 0=no value in mem is similar to c
 */
void *memchr(const void *mem, int c, size_t n)
{
c0107016:	55                   	push   %ebp
c0107017:	89 e5                	mov    %esp,%ebp
c0107019:	83 ec 10             	sub    $0x10,%esp
	uint32_t i = 0;
c010701c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	const unsigned char *str = mem;
c0107023:	8b 45 08             	mov    0x8(%ebp),%eax
c0107026:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (str[i] != (unsigned char)c && i < n) {
c0107029:	eb 04                	jmp    c010702f <memchr+0x19>
	    i++;
c010702b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 */
void *memchr(const void *mem, int c, size_t n)
{
	uint32_t i = 0;
	const unsigned char *str = mem;
	while (str[i] != (unsigned char)c && i < n) {
c010702f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107032:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0107035:	01 d0                	add    %edx,%eax
c0107037:	0f b6 10             	movzbl (%eax),%edx
c010703a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010703d:	38 c2                	cmp    %al,%dl
c010703f:	74 08                	je     c0107049 <memchr+0x33>
c0107041:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107044:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107047:	72 e2                	jb     c010702b <memchr+0x15>
	    i++;
	}
	if (str[i]) {
c0107049:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010704c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010704f:	01 d0                	add    %edx,%eax
c0107051:	0f b6 00             	movzbl (%eax),%eax
c0107054:	84 c0                	test   %al,%al
c0107056:	74 0a                	je     c0107062 <memchr+0x4c>
	    return (void*)(str+i);
c0107058:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010705b:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010705e:	01 d0                	add    %edx,%eax
c0107060:	eb 05                	jmp    c0107067 <memchr+0x51>
	}
	return NULL;
c0107062:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107067:	c9                   	leave  
c0107068:	c3                   	ret    

c0107069 <memset>:
 * @param size of mem
 * @return pointer to the last similar value
 * @return 0=no value in mem is similar to c
 */
void *memset(void *mem, int c, size_t n)
{
c0107069:	55                   	push   %ebp
c010706a:	89 e5                	mov    %esp,%ebp
c010706c:	83 ec 10             	sub    $0x10,%esp
	unsigned char *str = mem;
c010706f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107072:	89 45 f8             	mov    %eax,-0x8(%ebp)
	uint32_t i;
	for (i = 0; i < n; i++) {
c0107075:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010707c:	eb 11                	jmp    c010708f <memset+0x26>
	    str[i]=(unsigned char)c;
c010707e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107081:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0107084:	01 c2                	add    %eax,%edx
c0107086:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107089:	88 02                	mov    %al,(%edx)
 */
void *memset(void *mem, int c, size_t n)
{
	unsigned char *str = mem;
	uint32_t i;
	for (i = 0; i < n; i++) {
c010708b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010708f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107092:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107095:	72 e7                	jb     c010707e <memset+0x15>
	    str[i]=(unsigned char)c;
	}
	return mem;
c0107097:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010709a:	c9                   	leave  
c010709b:	c3                   	ret    

c010709c <pmm_count_free_pages>:
/**
 * Returns the number of free pages
 *
 * @return number of free pages
 */
int pmm_count_free_pages(void) {
c010709c:	55                   	push   %ebp
c010709d:	89 e5                	mov    %esp,%ebp
c010709f:	56                   	push   %esi
c01070a0:	53                   	push   %ebx
c01070a1:	83 ec 10             	sub    $0x10,%esp
	int free_pages = 0;
c01070a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i, z;

	for (i = 0; i < PMM_MMAP_SIZE; i++) {
c01070ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01070b2:	eb 3b                	jmp    c01070ef <pmm_count_free_pages+0x53>
		for (z = 0; z < 32; z++) {
c01070b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01070bb:	eb 28                	jmp    c01070e5 <pmm_count_free_pages+0x49>
			if (pmm_mmap[i] & (1 << z)) {
c01070bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070c0:	8b 14 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%edx
c01070c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070ca:	bb 01 00 00 00       	mov    $0x1,%ebx
c01070cf:	89 de                	mov    %ebx,%esi
c01070d1:	89 c1                	mov    %eax,%ecx
c01070d3:	d3 e6                	shl    %cl,%esi
c01070d5:	89 f0                	mov    %esi,%eax
c01070d7:	21 d0                	and    %edx,%eax
c01070d9:	85 c0                	test   %eax,%eax
c01070db:	74 04                	je     c01070e1 <pmm_count_free_pages+0x45>
				free_pages++;
c01070dd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
int pmm_count_free_pages(void) {
	int free_pages = 0;
	int i, z;

	for (i = 0; i < PMM_MMAP_SIZE; i++) {
		for (z = 0; z < 32; z++) {
c01070e1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01070e5:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
c01070e9:	7e d2                	jle    c01070bd <pmm_count_free_pages+0x21>
 */
int pmm_count_free_pages(void) {
	int free_pages = 0;
	int i, z;

	for (i = 0; i < PMM_MMAP_SIZE; i++) {
c01070eb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01070ef:	81 7d f0 ff 7f 00 00 	cmpl   $0x7fff,-0x10(%ebp)
c01070f6:	7e bc                	jle    c01070b4 <pmm_count_free_pages+0x18>
			if (pmm_mmap[i] & (1 << z)) {
				free_pages++;
			}
		}
	}
	return free_pages;
c01070f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01070fb:	83 c4 10             	add    $0x10,%esp
c01070fe:	5b                   	pop    %ebx
c01070ff:	5e                   	pop    %esi
c0107100:	5d                   	pop    %ebp
c0107101:	c3                   	ret    

c0107102 <pmm_mark_page_as_free>:
 * Mark page als free
 *
 * @param page-pointer on the begin of the page which should be marked as free.
 */
void pmm_mark_page_as_free(paddr_t page)
{ //TODO: should that be possible from the entire kernel?
c0107102:	55                   	push   %ebp
c0107103:	89 e5                	mov    %esp,%ebp
c0107105:	57                   	push   %edi
c0107106:	56                   	push   %esi
c0107107:	53                   	push   %ebx
	pmm_mmap[page / PAGE_SIZE / 32] |= 1 << ((page / PAGE_SIZE) & 31);
c0107108:	8b 45 08             	mov    0x8(%ebp),%eax
c010710b:	c1 e8 11             	shr    $0x11,%eax
c010710e:	8b 1c 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%ebx
c0107115:	8b 55 08             	mov    0x8(%ebp),%edx
c0107118:	c1 ea 0c             	shr    $0xc,%edx
c010711b:	83 e2 1f             	and    $0x1f,%edx
c010711e:	be 01 00 00 00       	mov    $0x1,%esi
c0107123:	89 f7                	mov    %esi,%edi
c0107125:	89 d1                	mov    %edx,%ecx
c0107127:	d3 e7                	shl    %cl,%edi
c0107129:	89 fa                	mov    %edi,%edx
c010712b:	09 da                	or     %ebx,%edx
c010712d:	89 14 85 60 02 11 c0 	mov    %edx,-0x3feefda0(,%eax,4)
}
c0107134:	5b                   	pop    %ebx
c0107135:	5e                   	pop    %esi
c0107136:	5f                   	pop    %edi
c0107137:	5d                   	pop    %ebp
c0107138:	c3                   	ret    

c0107139 <pmm_mark_page_range_as_free>:
 * Mark num pages as free
 *
 * @param page-pointer on the begin of the first page.
 * @param num of the pages which should be marked as free.
 */
void pmm_mark_page_range_as_free(paddr_t page, unsigned int num) {
c0107139:	55                   	push   %ebp
c010713a:	89 e5                	mov    %esp,%ebp
c010713c:	83 ec 28             	sub    $0x28,%esp
	int i;

	if (!num)
c010713f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107143:	75 0c                	jne    c0107151 <pmm_mark_page_range_as_free+0x18>
		panic("PMM: pmm_mark_page_range_as_free(): num is zero");
c0107145:	c7 04 24 c8 94 10 c0 	movl   $0xc01094c8,(%esp)
c010714c:	e8 b9 95 ff ff       	call   c010070a <panic>

	if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
c0107151:	8b 45 08             	mov    0x8(%ebp),%eax
c0107154:	c1 e8 0c             	shr    $0xc,%eax
c0107157:	03 45 0c             	add    0xc(%ebp),%eax
c010715a:	3d 00 00 10 00       	cmp    $0x100000,%eax
c010715f:	76 0c                	jbe    c010716d <pmm_mark_page_range_as_free+0x34>
			panic("PMM: pmm_mark_page_range_as_free(): marking the given\n"
c0107161:	c7 04 24 f8 94 10 c0 	movl   $0xc01094f8,(%esp)
c0107168:	e8 9d 95 ff ff       	call   c010070a <panic>
		"pages as free would cause a buffer overrun");


	for (i = 0; i < num; i++) {
c010716d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107174:	eb 15                	jmp    c010718b <pmm_mark_page_range_as_free+0x52>
		pmm_mark_page_as_free(page + i * PAGE_SIZE);
c0107176:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107179:	c1 e0 0c             	shl    $0xc,%eax
c010717c:	03 45 08             	add    0x8(%ebp),%eax
c010717f:	89 04 24             	mov    %eax,(%esp)
c0107182:	e8 7b ff ff ff       	call   c0107102 <pmm_mark_page_as_free>
	if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
			panic("PMM: pmm_mark_page_range_as_free(): marking the given\n"
		"pages as free would cause a buffer overrun");


	for (i = 0; i < num; i++) {
c0107187:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010718b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010718e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107191:	72 e3                	jb     c0107176 <pmm_mark_page_range_as_free+0x3d>
		pmm_mark_page_as_free(page + i * PAGE_SIZE);
	}
}
c0107193:	c9                   	leave  
c0107194:	c3                   	ret    

c0107195 <pmm_mark_page_as_used>:
/**
 * mark page as used
 *
 * @param page-pointer on the begin of the first page.
 */
void pmm_mark_page_as_used(paddr_t page) {
c0107195:	55                   	push   %ebp
c0107196:	89 e5                	mov    %esp,%ebp
c0107198:	57                   	push   %edi
c0107199:	56                   	push   %esi
c010719a:	53                   	push   %ebx
	pmm_mmap[page / PAGE_SIZE / 32] &= ~(1 << ((page / PAGE_SIZE) & 31));
c010719b:	8b 45 08             	mov    0x8(%ebp),%eax
c010719e:	c1 e8 11             	shr    $0x11,%eax
c01071a1:	8b 1c 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%ebx
c01071a8:	8b 55 08             	mov    0x8(%ebp),%edx
c01071ab:	c1 ea 0c             	shr    $0xc,%edx
c01071ae:	83 e2 1f             	and    $0x1f,%edx
c01071b1:	be 01 00 00 00       	mov    $0x1,%esi
c01071b6:	89 f7                	mov    %esi,%edi
c01071b8:	89 d1                	mov    %edx,%ecx
c01071ba:	d3 e7                	shl    %cl,%edi
c01071bc:	89 fa                	mov    %edi,%edx
c01071be:	f7 d2                	not    %edx
c01071c0:	21 da                	and    %ebx,%edx
c01071c2:	89 14 85 60 02 11 c0 	mov    %edx,-0x3feefda0(,%eax,4)
}
c01071c9:	5b                   	pop    %ebx
c01071ca:	5e                   	pop    %esi
c01071cb:	5f                   	pop    %edi
c01071cc:	5d                   	pop    %ebp
c01071cd:	c3                   	ret    

c01071ce <pmm_mark_page_range_as_used>:
 * Mark num pages as used
 *
 * @param page-pointer on the begin of the first page.
 * @param num of the pages which should be marked as free.
 */
void pmm_mark_page_range_as_used(paddr_t page, unsigned int num) {
c01071ce:	55                   	push   %ebp
c01071cf:	89 e5                	mov    %esp,%ebp
c01071d1:	83 ec 28             	sub    $0x28,%esp
	int i;

	if (!num)
c01071d4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01071d8:	75 0c                	jne    c01071e6 <pmm_mark_page_range_as_used+0x18>
		panic("PMM: pmm_mark_page_range_as_used(): num is zero");
c01071da:	c7 04 24 5c 95 10 c0 	movl   $0xc010955c,(%esp)
c01071e1:	e8 24 95 ff ff       	call   c010070a <panic>

/*
 * PMM is broken, see comment in PMM_INIT
 */
	if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
c01071e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01071e9:	c1 e8 0c             	shr    $0xc,%eax
c01071ec:	03 45 0c             	add    0xc(%ebp),%eax
c01071ef:	3d 00 00 10 00       	cmp    $0x100000,%eax
c01071f4:	76 0c                	jbe    c0107202 <pmm_mark_page_range_as_used+0x34>
		panic("PMM: pmm_mark_page_range_as_used(): marking the given\n"
c01071f6:	c7 04 24 8c 95 10 c0 	movl   $0xc010958c,(%esp)
c01071fd:	e8 08 95 ff ff       	call   c010070a <panic>
		    "pages as used would cause a buffer overrun");

	for (i = 0; i < num; i++) {
c0107202:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107209:	eb 15                	jmp    c0107220 <pmm_mark_page_range_as_used+0x52>
		pmm_mark_page_as_used(page + i * PAGE_SIZE);
c010720b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010720e:	c1 e0 0c             	shl    $0xc,%eax
c0107211:	03 45 08             	add    0x8(%ebp),%eax
c0107214:	89 04 24             	mov    %eax,(%esp)
c0107217:	e8 79 ff ff ff       	call   c0107195 <pmm_mark_page_as_used>
 */
	if (page / PAGE_SIZE + num > PMM_MMAP_SIZE * 32)
		panic("PMM: pmm_mark_page_range_as_used(): marking the given\n"
		    "pages as used would cause a buffer overrun");

	for (i = 0; i < num; i++) {
c010721c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107220:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107223:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107226:	72 e3                	jb     c010720b <pmm_mark_page_range_as_used+0x3d>
		pmm_mark_page_as_used(page + i * PAGE_SIZE);
	}
}
c0107228:	c9                   	leave  
c0107229:	c3                   	ret    

c010722a <pmm_find_free_page>:
 *
 * @param lower_limit minimus size of the page.
 *
 * @return If the search is succesful this method returns a pointer on the begin on this page.
 */
paddr_t pmm_find_free_page(unsigned long lower_limit) {
c010722a:	55                   	push   %ebp
c010722b:	89 e5                	mov    %esp,%ebp
c010722d:	56                   	push   %esi
c010722e:	53                   	push   %ebx
c010722f:	83 ec 20             	sub    $0x20,%esp
	uint32_t i, z;
	paddr_t page = 0;
c0107232:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	i = lower_limit / PAGE_SIZE / 32;
c0107239:	8b 45 08             	mov    0x8(%ebp),%eax
c010723c:	c1 e8 11             	shr    $0x11,%eax
c010723f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pmm_mmap[i] & (0xffffffff << (( lower_limit / PAGE_SIZE) % 32))) {
c0107242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107245:	8b 04 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%eax
c010724c:	8b 55 08             	mov    0x8(%ebp),%edx
c010724f:	c1 ea 0c             	shr    $0xc,%edx
c0107252:	83 e2 1f             	and    $0x1f,%edx
c0107255:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
c010725a:	89 de                	mov    %ebx,%esi
c010725c:	89 d1                	mov    %edx,%ecx
c010725e:	d3 e6                	shl    %cl,%esi
c0107260:	89 f2                	mov    %esi,%edx
c0107262:	21 d0                	and    %edx,%eax
c0107264:	85 c0                	test   %eax,%eax
c0107266:	74 41                	je     c01072a9 <pmm_find_free_page+0x7f>
		z = bit_scan_forward(pmm_mmap[i] & (0xffffffff << ((lower_limit / PAGE_SIZE) % 32)));
c0107268:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010726b:	8b 04 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%eax
c0107272:	8b 55 08             	mov    0x8(%ebp),%edx
c0107275:	c1 ea 0c             	shr    $0xc,%edx
c0107278:	83 e2 1f             	and    $0x1f,%edx
c010727b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
c0107280:	89 de                	mov    %ebx,%esi
c0107282:	89 d1                	mov    %edx,%ecx
c0107284:	d3 e6                	shl    %cl,%esi
c0107286:	89 f2                	mov    %esi,%edx
c0107288:	21 d0                	and    %edx,%eax
c010728a:	89 04 24             	mov    %eax,(%esp)
c010728d:	e8 41 92 ff ff       	call   c01004d3 <bit_scan_forward>
c0107292:	89 45 ec             	mov    %eax,-0x14(%ebp)
		page = (i * 32 + z) * PAGE_SIZE;
c0107295:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107298:	c1 e0 05             	shl    $0x5,%eax
c010729b:	03 45 ec             	add    -0x14(%ebp),%eax
c010729e:	c1 e0 0c             	shl    $0xc,%eax
c01072a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		return page;
c01072a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072a7:	eb 4f                	jmp    c01072f8 <pmm_find_free_page+0xce>
	}

	for (i++; i < PMM_MMAP_SIZE; i++) {
c01072a9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072ad:	eb 3b                	jmp    c01072ea <pmm_find_free_page+0xc0>
		if (pmm_mmap[i]) {
c01072af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072b2:	8b 04 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%eax
c01072b9:	85 c0                	test   %eax,%eax
c01072bb:	74 29                	je     c01072e6 <pmm_find_free_page+0xbc>
			z = bit_scan_forward(pmm_mmap[i]);
c01072bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072c0:	8b 04 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%eax
c01072c7:	89 04 24             	mov    %eax,(%esp)
c01072ca:	e8 04 92 ff ff       	call   c01004d3 <bit_scan_forward>
c01072cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
			page = (i * 32 + z) * PAGE_SIZE;
c01072d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01072d5:	c1 e0 05             	shl    $0x5,%eax
c01072d8:	03 45 ec             	add    -0x14(%ebp),%eax
c01072db:	c1 e0 0c             	shl    $0xc,%eax
c01072de:	89 45 f0             	mov    %eax,-0x10(%ebp)
			return page;
c01072e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072e4:	eb 12                	jmp    c01072f8 <pmm_find_free_page+0xce>
		z = bit_scan_forward(pmm_mmap[i] & (0xffffffff << ((lower_limit / PAGE_SIZE) % 32)));
		page = (i * 32 + z) * PAGE_SIZE;
		return page;
	}

	for (i++; i < PMM_MMAP_SIZE; i++) {
c01072e6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072ea:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c01072f1:	76 bc                	jbe    c01072af <pmm_find_free_page+0x85>
			return page;
		}
	}

	/* checked in the alloc functions */
	return -1;
c01072f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c01072f8:	83 c4 20             	add    $0x20,%esp
c01072fb:	5b                   	pop    %ebx
c01072fc:	5e                   	pop    %esi
c01072fd:	5d                   	pop    %ebp
c01072fe:	c3                   	ret    

c01072ff <pmm_find_free_page_range>:
 * @param num Number of pages.
 *
 * @return Pointer on begin of the first page.
 * @return If succesful this method will return a pointer on the begin of the first free page.
 */
paddr_t pmm_find_free_page_range(unsigned long lower_limit, unsigned int num) {
c01072ff:	55                   	push   %ebp
c0107300:	89 e5                	mov    %esp,%ebp
c0107302:	56                   	push   %esi
c0107303:	53                   	push   %ebx
c0107304:	83 ec 20             	sub    $0x20,%esp
	uint32_t i, z;
	uint32_t found = 0;
c0107307:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	paddr_t page = 0;
c010730e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

	if (!num)
c0107315:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107319:	75 0c                	jne    c0107327 <pmm_find_free_page_range+0x28>
		panic("PMM: searching 0 pages (find_free_page_range())");
c010731b:	c7 04 24 f0 95 10 c0 	movl   $0xc01095f0,(%esp)
c0107322:	e8 e3 93 ff ff       	call   c010070a <panic>

	for (i = lower_limit / PAGE_SIZE / 32; i < PMM_MMAP_SIZE; i++) {
c0107327:	8b 45 08             	mov    0x8(%ebp),%eax
c010732a:	c1 e8 11             	shr    $0x11,%eax
c010732d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107330:	e9 d5 00 00 00       	jmp    c010740a <pmm_find_free_page_range+0x10b>
		printf("%i\n", i);
c0107335:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107338:	89 44 24 04          	mov    %eax,0x4(%esp)
c010733c:	c7 04 24 20 96 10 c0 	movl   $0xc0109620,(%esp)
c0107343:	e8 84 b2 ff ff       	call   c01025cc <printf>
		if (pmm_mmap[i] == 0) {
c0107348:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010734b:	8b 04 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%eax
c0107352:	85 c0                	test   %eax,%eax
c0107354:	75 0c                	jne    c0107362 <pmm_find_free_page_range+0x63>
			found = 0;
c0107356:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			continue;
c010735d:	e9 a4 00 00 00       	jmp    c0107406 <pmm_find_free_page_range+0x107>
		}

		if (pmm_mmap[i] == 0xffffffff) {
c0107362:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107365:	8b 04 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%eax
c010736c:	83 f8 ff             	cmp    $0xffffffff,%eax
c010736f:	75 1c                	jne    c010738d <pmm_find_free_page_range+0x8e>
			if (found = 0) {
c0107371:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107378:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010737c:	74 09                	je     c0107387 <pmm_find_free_page_range+0x88>
				page = (i * 32) * PAGE_SIZE; //
c010737e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107381:	c1 e0 11             	shl    $0x11,%eax
c0107384:	89 45 e8             	mov    %eax,-0x18(%ebp)
			}
			found += 32;
c0107387:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010738b:	eb 6c                	jmp    c01073f9 <pmm_find_free_page_range+0xfa>

		} else {
			printf("bar\n");
c010738d:	c7 04 24 24 96 10 c0 	movl   $0xc0109624,(%esp)
c0107394:	e8 56 be ff ff       	call   c01031ef <puts>
			for (z = 0; z < 32; z++) {
c0107399:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01073a0:	eb 51                	jmp    c01073f3 <pmm_find_free_page_range+0xf4>
				if (pmm_mmap[i] & (1 << z)) {
c01073a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073a5:	8b 14 85 60 02 11 c0 	mov    -0x3feefda0(,%eax,4),%edx
c01073ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073af:	bb 01 00 00 00       	mov    $0x1,%ebx
c01073b4:	89 de                	mov    %ebx,%esi
c01073b6:	89 c1                	mov    %eax,%ecx
c01073b8:	d3 e6                	shl    %cl,%esi
c01073ba:	89 f0                	mov    %esi,%eax
c01073bc:	21 d0                	and    %edx,%eax
c01073be:	85 c0                	test   %eax,%eax
c01073c0:	74 26                	je     c01073e8 <pmm_find_free_page_range+0xe9>
					if (found == 0) {
c01073c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01073c6:	75 0f                	jne    c01073d7 <pmm_find_free_page_range+0xd8>
						page = (i * 32 + z) * PAGE_SIZE;
c01073c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073cb:	c1 e0 05             	shl    $0x5,%eax
c01073ce:	03 45 f0             	add    -0x10(%ebp),%eax
c01073d1:	c1 e0 0c             	shl    $0xc,%eax
c01073d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
					}
					found++;
c01073d7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
					if (found >= num) {
c01073db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073de:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01073e1:	72 0c                	jb     c01073ef <pmm_find_free_page_range+0xf0>
						return page;
c01073e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073e6:	eb 34                	jmp    c010741c <pmm_find_free_page_range+0x11d>
					}
				} else {
					found = 0;
c01073e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			}
			found += 32;

		} else {
			printf("bar\n");
			for (z = 0; z < 32; z++) {
c01073ef:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01073f3:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c01073f7:	76 a9                	jbe    c01073a2 <pmm_find_free_page_range+0xa3>
					found = 0;
				}
			}
		}

		if (found >= num) {
c01073f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073fc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01073ff:	72 05                	jb     c0107406 <pmm_find_free_page_range+0x107>
			return page;
c0107401:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107404:	eb 16                	jmp    c010741c <pmm_find_free_page_range+0x11d>
	paddr_t page = 0;

	if (!num)
		panic("PMM: searching 0 pages (find_free_page_range())");

	for (i = lower_limit / PAGE_SIZE / 32; i < PMM_MMAP_SIZE; i++) {
c0107406:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010740a:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c0107411:	0f 86 1e ff ff ff    	jbe    c0107335 <pmm_find_free_page_range+0x36>
		if (found >= num) {
			return page;
		}
	}

	return -1; /* checked in the alloc functions */
c0107417:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010741c:	83 c4 20             	add    $0x20,%esp
c010741f:	5b                   	pop    %ebx
c0107420:	5e                   	pop    %esi
c0107421:	5d                   	pop    %ebp
c0107422:	c3                   	ret    

c0107423 <pmm_alloc_page>:
/**
 * Reserve a page and mark this page as used.
 *
 * @return Pointer on the begin of the page.
 */
paddr_t pmm_alloc_page(void) {
c0107423:	55                   	push   %ebp
c0107424:	89 e5                	mov    %esp,%ebp
c0107426:	83 ec 28             	sub    $0x28,%esp
	paddr_t page = pmm_find_free_page(PMM_DMA_LIMIT);
c0107429:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
c0107430:	e8 f5 fd ff ff       	call   c010722a <pmm_find_free_page>
c0107435:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (page & (PAGE_SIZE - 1)) {
c0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010743b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107440:	85 c0                	test   %eax,%eax
c0107442:	74 0c                	je     c0107450 <pmm_alloc_page+0x2d>
		panic("PMM: pmm_alloc_page(): no pages left");
c0107444:	c7 04 24 28 96 10 c0 	movl   $0xc0109628,(%esp)
c010744b:	e8 ba 92 ff ff       	call   c010070a <panic>
	}
	pmm_mark_page_as_used(page);
c0107450:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107453:	89 04 24             	mov    %eax,(%esp)
c0107456:	e8 3a fd ff ff       	call   c0107195 <pmm_mark_page_as_used>

	return page;
c010745b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010745e:	c9                   	leave  
c010745f:	c3                   	ret    

c0107460 <pmm_alloc_page_limit>:

/**
 * Reserve a page not under a entered address
 */
paddr_t pmm_alloc_page_limit(paddr_t lower_limit) {
c0107460:	55                   	push   %ebp
c0107461:	89 e5                	mov    %esp,%ebp
c0107463:	83 ec 28             	sub    $0x28,%esp
	paddr_t page = pmm_find_free_page(lower_limit);
c0107466:	8b 45 08             	mov    0x8(%ebp),%eax
c0107469:	89 04 24             	mov    %eax,(%esp)
c010746c:	e8 b9 fd ff ff       	call   c010722a <pmm_find_free_page>
c0107471:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (page & (PAGE_SIZE - 1)) {
c0107474:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107477:	25 ff 0f 00 00       	and    $0xfff,%eax
c010747c:	85 c0                	test   %eax,%eax
c010747e:	74 0c                	je     c010748c <pmm_alloc_page_limit+0x2c>
		panic("PMM: pmm_alloc_page_limit(): no pages left");
c0107480:	c7 04 24 50 96 10 c0 	movl   $0xc0109650,(%esp)
c0107487:	e8 7e 92 ff ff       	call   c010070a <panic>
	}

	pmm_mark_page_as_used(page);
c010748c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010748f:	89 04 24             	mov    %eax,(%esp)
c0107492:	e8 fe fc ff ff       	call   c0107195 <pmm_mark_page_as_used>
	return page;
c0107497:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010749a:	c9                   	leave  
c010749b:	c3                   	ret    

c010749c <pmm_alloc_dma_page_range>:
/**
 * Reserve num DMA-Pages.
 *
 * @return Pointer on the begin of the first page.
 */
paddr_t pmm_alloc_dma_page_range(unsigned int num) {
c010749c:	55                   	push   %ebp
c010749d:	89 e5                	mov    %esp,%ebp
c010749f:	83 ec 28             	sub    $0x28,%esp
	if (!num)
c01074a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01074a6:	75 0c                	jne    c01074b4 <pmm_alloc_dma_page_range+0x18>
		panic("PMM: pmm_alloc_dma_page_range(): num zero");
c01074a8:	c7 04 24 7c 96 10 c0 	movl   $0xc010967c,(%esp)
c01074af:	e8 56 92 ff ff       	call   c010070a <panic>
	paddr_t page = pmm_find_free_page_range(0, num);
c01074b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01074b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01074bb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01074c2:	e8 38 fe ff ff       	call   c01072ff <pmm_find_free_page_range>
c01074c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (page & (PAGE_SIZE - 1) || page >= PMM_DMA_LIMIT) {
c01074ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074cd:	25 ff 0f 00 00       	and    $0xfff,%eax
c01074d2:	85 c0                	test   %eax,%eax
c01074d4:	75 09                	jne    c01074df <pmm_alloc_dma_page_range+0x43>
c01074d6:	81 7d f4 ff ff ff 00 	cmpl   $0xffffff,-0xc(%ebp)
c01074dd:	76 0c                	jbe    c01074eb <pmm_alloc_dma_page_range+0x4f>
		panic("PMM: pmm_alloc_dma_page_range(): no DMA memory left");
c01074df:	c7 04 24 a8 96 10 c0 	movl   $0xc01096a8,(%esp)
c01074e6:	e8 1f 92 ff ff       	call   c010070a <panic>
	}
	pmm_mark_page_range_as_used(page, num);
c01074eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01074ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01074f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074f5:	89 04 24             	mov    %eax,(%esp)
c01074f8:	e8 d1 fc ff ff       	call   c01071ce <pmm_mark_page_range_as_used>
	return page;
c01074fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107500:	c9                   	leave  
c0107501:	c3                   	ret    

c0107502 <pmm_alloc_page_range>:
/**
 * Reserve num pages.
 *
 * @return Pointer on the begin of the first page.
 */
paddr_t pmm_alloc_page_range(unsigned int num) {
c0107502:	55                   	push   %ebp
c0107503:	89 e5                	mov    %esp,%ebp
c0107505:	83 ec 28             	sub    $0x28,%esp
	if (!num)
c0107508:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010750c:	75 0c                	jne    c010751a <pmm_alloc_page_range+0x18>
		panic("PMM: pmm_alloc_page_range(): num zero");
c010750e:	c7 04 24 dc 96 10 c0 	movl   $0xc01096dc,(%esp)
c0107515:	e8 f0 91 ff ff       	call   c010070a <panic>
	paddr_t page = pmm_find_free_page_range(PMM_DMA_LIMIT, num);
c010751a:	8b 45 08             	mov    0x8(%ebp),%eax
c010751d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107521:	c7 04 24 00 00 00 01 	movl   $0x1000000,(%esp)
c0107528:	e8 d2 fd ff ff       	call   c01072ff <pmm_find_free_page_range>
c010752d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (page & (PAGE_SIZE - 1)) {
c0107530:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107533:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107538:	85 c0                	test   %eax,%eax
c010753a:	74 0c                	je     c0107548 <pmm_alloc_page_range+0x46>
		panic("PMM: pmm_alloc_page_range(): no memory left");
c010753c:	c7 04 24 04 97 10 c0 	movl   $0xc0109704,(%esp)
c0107543:	e8 c2 91 ff ff       	call   c010070a <panic>
	}
	pmm_mark_page_range_as_used(page, num);
c0107548:	8b 45 08             	mov    0x8(%ebp),%eax
c010754b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010754f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107552:	89 04 24             	mov    %eax,(%esp)
c0107555:	e8 74 fc ff ff       	call   c01071ce <pmm_mark_page_range_as_used>
	return page;
c010755a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010755d:	c9                   	leave  
c010755e:	c3                   	ret    

c010755f <INIT_PMM>:

void INIT_PMM(struct multiboot_struct *mb_info) {
c010755f:	55                   	push   %ebp
c0107560:	89 e5                	mov    %esp,%ebp
c0107562:	83 ec 48             	sub    $0x48,%esp
	int i;
	for (i = 0; i < PMM_MMAP_SIZE; i++) {
c0107565:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010756c:	eb 12                	jmp    c0107580 <INIT_PMM+0x21>
		pmm_mmap[i] = 0;
c010756e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107571:	c7 04 85 60 02 11 c0 	movl   $0x0,-0x3feefda0(,%eax,4)
c0107578:	00 00 00 00 
	return page;
}

void INIT_PMM(struct multiboot_struct *mb_info) {
	int i;
	for (i = 0; i < PMM_MMAP_SIZE; i++) {
c010757c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107580:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
c0107587:	7e e5                	jle    c010756e <INIT_PMM+0xf>
		pmm_mmap[i] = 0;
	}
	
	mb_info->mmap_addr += MEMORY_LAYOUT_KERNEL_START;
c0107589:	8b 45 08             	mov    0x8(%ebp),%eax
c010758c:	8b 40 30             	mov    0x30(%eax),%eax
c010758f:	8d 90 00 00 00 c0    	lea    -0x40000000(%eax),%edx
c0107595:	8b 45 08             	mov    0x8(%ebp),%eax
c0107598:	89 50 30             	mov    %edx,0x30(%eax)
	mb_info->mods_addr += MEMORY_LAYOUT_KERNEL_START;
c010759b:	8b 45 08             	mov    0x8(%ebp),%eax
c010759e:	8b 40 18             	mov    0x18(%eax),%eax
c01075a1:	8d 90 00 00 00 c0    	lea    -0x40000000(%eax),%edx
c01075a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01075aa:	89 50 18             	mov    %edx,0x18(%eax)

	struct mmap_entry *mmap = mb_info->mmap_addr;
c01075ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01075b0:	8b 40 30             	mov    0x30(%eax),%eax
c01075b3:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int len = 0;
c01075b6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(i = 0; len < mb_info->mmap_length; i++) {
c01075bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01075c4:	e9 80 00 00 00       	jmp    c0107649 <INIT_PMM+0xea>
		len += mmap[i].size +4;
c01075c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01075cc:	89 d0                	mov    %edx,%eax
c01075ce:	01 c0                	add    %eax,%eax
c01075d0:	01 d0                	add    %edx,%eax
c01075d2:	c1 e0 03             	shl    $0x3,%eax
c01075d5:	03 45 ec             	add    -0x14(%ebp),%eax
c01075d8:	8b 10                	mov    (%eax),%edx
c01075da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01075dd:	01 d0                	add    %edx,%eax
c01075df:	83 c0 04             	add    $0x4,%eax
c01075e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(mmap[i].Type == 1) {
c01075e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01075e8:	89 d0                	mov    %edx,%eax
c01075ea:	01 c0                	add    %eax,%eax
c01075ec:	01 d0                	add    %edx,%eax
c01075ee:	c1 e0 03             	shl    $0x3,%eax
c01075f1:	03 45 ec             	add    -0x14(%ebp),%eax
c01075f4:	8b 40 14             	mov    0x14(%eax),%eax
c01075f7:	83 f8 01             	cmp    $0x1,%eax
c01075fa:	75 49                	jne    c0107645 <INIT_PMM+0xe6>
			uintptr_t addr = mmap[i].BaseAddr;
c01075fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01075ff:	89 d0                	mov    %edx,%eax
c0107601:	01 c0                	add    %eax,%eax
c0107603:	01 d0                	add    %edx,%eax
c0107605:	c1 e0 03             	shl    $0x3,%eax
c0107608:	03 45 ec             	add    -0x14(%ebp),%eax
c010760b:	8b 50 08             	mov    0x8(%eax),%edx
c010760e:	8b 40 04             	mov    0x4(%eax),%eax
c0107611:	89 45 e8             	mov    %eax,-0x18(%ebp)
			int pages = mmap[i].Length / PAGE_SIZE;
c0107614:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107617:	89 d0                	mov    %edx,%eax
c0107619:	01 c0                	add    %eax,%eax
c010761b:	01 d0                	add    %edx,%eax
c010761d:	c1 e0 03             	shl    $0x3,%eax
c0107620:	03 45 ec             	add    -0x14(%ebp),%eax
c0107623:	8b 50 10             	mov    0x10(%eax),%edx
c0107626:	8b 40 0c             	mov    0xc(%eax),%eax
c0107629:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010762d:	c1 ea 0c             	shr    $0xc,%edx
c0107630:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			pmm_mark_page_range_as_free(addr, pages);
c0107633:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107636:	89 44 24 04          	mov    %eax,0x4(%esp)
c010763a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010763d:	89 04 24             	mov    %eax,(%esp)
c0107640:	e8 f4 fa ff ff       	call   c0107139 <pmm_mark_page_range_as_free>
	mb_info->mods_addr += MEMORY_LAYOUT_KERNEL_START;

	struct mmap_entry *mmap = mb_info->mmap_addr;

	int len = 0;
	for(i = 0; len < mb_info->mmap_length; i++) {
c0107645:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107649:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010764c:	8b 45 08             	mov    0x8(%ebp),%eax
c010764f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0107652:	39 c2                	cmp    %eax,%edx
c0107654:	0f 82 6f ff ff ff    	jb     c01075c9 <INIT_PMM+0x6a>
			pmm_mark_page_range_as_free(addr, pages);
		}
	}

	//protect Memory structures
	pmm_mark_page_as_used(0); //IVT+BDA
c010765a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0107661:	e8 2f fb ff ff       	call   c0107195 <pmm_mark_page_as_used>

	uint16_t* EBDA_p = (void *)0x040E;
c0107666:	c7 45 e0 0e 04 00 00 	movl   $0x40e,-0x20(%ebp)
	pmm_mark_page_as_used((paddr_t)EBDA_p[0] << 4); //EBDA
c010766d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107670:	0f b7 00             	movzwl (%eax),%eax
c0107673:	0f b7 c0             	movzwl %ax,%eax
c0107676:	c1 e0 04             	shl    $0x4,%eax
c0107679:	89 04 24             	mov    %eax,(%esp)
c010767c:	e8 14 fb ff ff       	call   c0107195 <pmm_mark_page_as_used>

	uint16_t* BDA_size=0x0413;
c0107681:	c7 45 dc 13 04 00 00 	movl   $0x413,-0x24(%ebp)
	pmm_mark_page_as_used((BDA_size[0] / 4) * 1024); //FPS (maybe)
c0107688:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010768b:	0f b7 00             	movzwl (%eax),%eax
c010768e:	66 c1 e8 02          	shr    $0x2,%ax
c0107692:	0f b7 c0             	movzwl %ax,%eax
c0107695:	c1 e0 0a             	shl    $0xa,%eax
c0107698:	89 04 24             	mov    %eax,(%esp)
c010769b:	e8 f5 fa ff ff       	call   c0107195 <pmm_mark_page_as_used>
	pmm_mark_page_range_as_used(0xA0000, 96); //0xA0000 - 0xFFFFF ROM-AREA
c01076a0:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c01076a7:	00 
c01076a8:	c7 04 24 00 00 0a 00 	movl   $0xa0000,(%esp)
c01076af:	e8 1a fb ff ff       	call   c01071ce <pmm_mark_page_range_as_used>

	//multiboot structures
	struct mods_add *mods = (void*)mb_info->mods_addr;
c01076b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01076b7:	8b 40 18             	mov    0x18(%eax),%eax
c01076ba:	89 45 d8             	mov    %eax,-0x28(%ebp)
	pmm_mark_page_as_used((paddr_t)mb_info - MEMORY_LAYOUT_KERNEL_START);
c01076bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01076c0:	05 00 00 00 40       	add    $0x40000000,%eax
c01076c5:	89 04 24             	mov    %eax,(%esp)
c01076c8:	e8 c8 fa ff ff       	call   c0107195 <pmm_mark_page_as_used>
	pmm_mark_page_as_used((paddr_t)mods    - MEMORY_LAYOUT_KERNEL_START);
c01076cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01076d0:	05 00 00 00 40       	add    $0x40000000,%eax
c01076d5:	89 04 24             	mov    %eax,(%esp)
c01076d8:	e8 b8 fa ff ff       	call   c0107195 <pmm_mark_page_as_used>

	//multiboot modules
	for (i = 0; i < mb_info->mods_count; i++) {
c01076dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01076e4:	eb 65                	jmp    c010774b <INIT_PMM+0x1ec>
		uint32_t size = mods[i].mod_end - mods[i].mod_start;
c01076e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076e9:	c1 e0 04             	shl    $0x4,%eax
c01076ec:	03 45 d8             	add    -0x28(%ebp),%eax
c01076ef:	8b 50 04             	mov    0x4(%eax),%edx
c01076f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076f5:	c1 e0 04             	shl    $0x4,%eax
c01076f8:	03 45 d8             	add    -0x28(%ebp),%eax
c01076fb:	8b 00                	mov    (%eax),%eax
c01076fd:	89 d1                	mov    %edx,%ecx
c01076ff:	29 c1                	sub    %eax,%ecx
c0107701:	89 c8                	mov    %ecx,%eax
c0107703:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		int pages = NUM_PAGES(size);
c0107706:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107709:	05 ff 0f 00 00       	add    $0xfff,%eax
c010770e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107713:	c1 e8 0c             	shr    $0xc,%eax
c0107716:	89 45 d0             	mov    %eax,-0x30(%ebp)
		pmm_mark_page_range_as_used((paddr_t) mods[i].mod_start, pages);
c0107719:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010771c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010771f:	c1 e0 04             	shl    $0x4,%eax
c0107722:	03 45 d8             	add    -0x28(%ebp),%eax
c0107725:	8b 00                	mov    (%eax),%eax
c0107727:	89 54 24 04          	mov    %edx,0x4(%esp)
c010772b:	89 04 24             	mov    %eax,(%esp)
c010772e:	e8 9b fa ff ff       	call   c01071ce <pmm_mark_page_range_as_used>
		pmm_mark_page_as_used((paddr_t) mods[i].string);
c0107733:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107736:	c1 e0 04             	shl    $0x4,%eax
c0107739:	03 45 d8             	add    -0x28(%ebp),%eax
c010773c:	8b 40 08             	mov    0x8(%eax),%eax
c010773f:	89 04 24             	mov    %eax,(%esp)
c0107742:	e8 4e fa ff ff       	call   c0107195 <pmm_mark_page_as_used>
	struct mods_add *mods = (void*)mb_info->mods_addr;
	pmm_mark_page_as_used((paddr_t)mb_info - MEMORY_LAYOUT_KERNEL_START);
	pmm_mark_page_as_used((paddr_t)mods    - MEMORY_LAYOUT_KERNEL_START);

	//multiboot modules
	for (i = 0; i < mb_info->mods_count; i++) {
c0107747:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010774b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010774e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107751:	8b 40 14             	mov    0x14(%eax),%eax
c0107754:	39 c2                	cmp    %eax,%edx
c0107756:	72 8e                	jb     c01076e6 <INIT_PMM+0x187>
		int pages = NUM_PAGES(size);
		pmm_mark_page_range_as_used((paddr_t) mods[i].mod_start, pages);
		pmm_mark_page_as_used((paddr_t) mods[i].string);
	}

	if (! (mb_info->flags & 0x1)){
c0107758:	8b 45 08             	mov    0x8(%ebp),%eax
c010775b:	8b 00                	mov    (%eax),%eax
c010775d:	83 e0 01             	and    $0x1,%eax
c0107760:	85 c0                	test   %eax,%eax
c0107762:	75 0c                	jne    c0107770 <INIT_PMM+0x211>
		panic("PMM_INIT: no ram info in multiboot structure");
c0107764:	c7 04 24 30 97 10 c0 	movl   $0xc0109730,(%esp)
c010776b:	e8 9a 8f ff ff       	call   c010070a <panic>
	}
}
c0107770:	c9                   	leave  
c0107771:	c3                   	ret    
	...

c0107774 <cpuid>:
 * Inline function of CPUID
 * @param uint32_t cpuid function number
 * @param pointer to output register structure
 * @return sucess (0=sucess, 1=CPUID is not supported)
 */
static void cpuid(uint32_t function,struct cpuid_regs* output) {
c0107774:	55                   	push   %ebp
c0107775:	89 e5                	mov    %esp,%ebp
c0107777:	56                   	push   %esi
c0107778:	53                   	push   %ebx
c0107779:	83 ec 04             	sub    $0x4,%esp
	asm volatile("cpuid":"=a" (output->eax), "=b"(output->ebx),"=c"(output->ecx),"=d"(output->edx):"a"(function));
c010777c:	8b 45 08             	mov    0x8(%ebp),%eax
c010777f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107782:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107785:	0f a2                	cpuid  
c0107787:	89 c6                	mov    %eax,%esi
c0107789:	8b 45 0c             	mov    0xc(%ebp),%eax
c010778c:	89 30                	mov    %esi,(%eax)
c010778e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107791:	89 58 04             	mov    %ebx,0x4(%eax)
c0107794:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107797:	89 48 08             	mov    %ecx,0x8(%eax)
c010779a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010779d:	89 50 0c             	mov    %edx,0xc(%eax)
}
c01077a0:	83 c4 04             	add    $0x4,%esp
c01077a3:	5b                   	pop    %ebx
c01077a4:	5e                   	pop    %esi
c01077a5:	5d                   	pop    %ebp
c01077a6:	c3                   	ret    

c01077a7 <identify_cpu>:
/*
 * Identify curret CPU
 * @param pointer to 128byte free bytes for cpu_prpoerties struct
 * @return sucess (0=sucess, 1=CPUID is not supported)
 */
int identify_cpu(struct cpu_properties *cpu) {
c01077a7:	55                   	push   %ebp
c01077a8:	89 e5                	mov    %esp,%ebp
c01077aa:	57                   	push   %edi
c01077ab:	56                   	push   %esi
c01077ac:	53                   	push   %ebx
c01077ad:	83 ec 4c             	sub    $0x4c,%esp
	int ref,eflags;
	asm volatile(
c01077b0:	9c                   	pushf  
c01077b1:	59                   	pop    %ecx
c01077b2:	89 c8                	mov    %ecx,%eax
c01077b4:	35 00 00 20 00       	xor    $0x200000,%eax
c01077b9:	50                   	push   %eax
c01077ba:	9d                   	popf   
c01077bb:	9c                   	pushf  
c01077bc:	58                   	pop    %eax
c01077bd:	89 cb                	mov    %ecx,%ebx
c01077bf:	89 c6                	mov    %eax,%esi
c01077c1:	89 75 e0             	mov    %esi,-0x20(%ebp)
c01077c4:	89 5d dc             	mov    %ebx,-0x24(%ebp)
		"popfl;"
		"pushfl;"
		"pop %%eax;"
		:"=a"(eflags), "=c"(ref):
	);
	if (eflags == ref)
c01077c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01077ca:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01077cd:	75 13                	jne    c01077e2 <identify_cpu+0x3b>
	//cpuid is not supported
	{
	    cpu->cpuid_support = false;
c01077cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01077d2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    return 1;
c01077d8:	b8 01 00 00 00       	mov    $0x1,%eax
c01077dd:	e9 30 04 00 00       	jmp    c0107c12 <identify_cpu+0x46b>
	}

    //cpuid is supported
    cpu->cpuid_support = true;
c01077e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01077e5:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    //create struct for processor registers
	struct cpuid_regs reg;
	uint32_t i;

	//call cpuid 0
	cpuid(0, &reg);
c01077eb:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01077ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01077f2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01077f9:	e8 76 ff ff ff       	call   c0107774 <cpuid>

	// copy vendor string
	strncpy(cpu->vendor_id    , (char*) &reg.ebx, 4);
c01077fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0107801:	83 c0 10             	add    $0x10,%eax
c0107804:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010780b:	00 
c010780c:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010780f:	83 c2 04             	add    $0x4,%edx
c0107812:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107816:	89 04 24             	mov    %eax,(%esp)
c0107819:	e8 fa f2 ff ff       	call   c0106b18 <strncpy>
	strncpy(cpu->vendor_id + 4, (char*) &reg.edx, 4);
c010781e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107821:	83 c0 14             	add    $0x14,%eax
c0107824:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010782b:	00 
c010782c:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010782f:	83 c2 0c             	add    $0xc,%edx
c0107832:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107836:	89 04 24             	mov    %eax,(%esp)
c0107839:	e8 da f2 ff ff       	call   c0106b18 <strncpy>
	strncpy(cpu->vendor_id + 8, (char*) &reg.ecx, 4);
c010783e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107841:	83 c0 18             	add    $0x18,%eax
c0107844:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010784b:	00 
c010784c:	8d 55 cc             	lea    -0x34(%ebp),%edx
c010784f:	83 c2 08             	add    $0x8,%edx
c0107852:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107856:	89 04 24             	mov    %eax,(%esp)
c0107859:	e8 ba f2 ff ff       	call   c0106b18 <strncpy>

	// identify manufactory
	for (i = 0; strncmp(cpu->vendor_id, vendorID[i], 12) && i < 15; i++) {}
c010785e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0107865:	eb 04                	jmp    c010786b <identify_cpu+0xc4>
c0107867:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010786b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010786e:	8b 04 85 60 c8 10 c0 	mov    -0x3fef37a0(,%eax,4),%eax
c0107875:	8b 55 08             	mov    0x8(%ebp),%edx
c0107878:	83 c2 10             	add    $0x10,%edx
c010787b:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
c0107882:	00 
c0107883:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107887:	89 14 24             	mov    %edx,(%esp)
c010788a:	e8 e4 f3 ff ff       	call   c0106c73 <strncmp>
c010788f:	85 c0                	test   %eax,%eax
c0107891:	74 06                	je     c0107899 <identify_cpu+0xf2>
c0107893:	83 7d e4 0e          	cmpl   $0xe,-0x1c(%ebp)
c0107897:	76 ce                	jbe    c0107867 <identify_cpu+0xc0>
	cpu->manufactory = i;
c0107899:	8b 45 08             	mov    0x8(%ebp),%eax
c010789c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010789f:	89 50 04             	mov    %edx,0x4(%eax)

	// save number of basic identify functions
	cpu->max_std_func = reg.eax;
c01078a2:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01078a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01078a8:	89 50 08             	mov    %edx,0x8(%eax)

	// get and save maximum numbers of extendet identify functions
	cpuid(0x80000000, &reg);
c01078ab:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01078ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01078b2:	c7 04 24 00 00 00 80 	movl   $0x80000000,(%esp)
c01078b9:	e8 b6 fe ff ff       	call   c0107774 <cpuid>
	cpu->max_spec_func = reg.eax;
c01078be:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01078c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01078c4:	89 50 0c             	mov    %edx,0xc(%eax)


	cpuid(1, &reg);
c01078c7:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01078ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01078ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01078d5:	e8 9a fe ff ff       	call   c0107774 <cpuid>
	// get CPU model and Family
	cpu->family     = ((reg.eax & 0x0FF00000) >> 16) | ((reg.eax & 0x00000F00) >> 8);
c01078da:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01078dd:	25 00 00 f0 0f       	and    $0xff00000,%eax
c01078e2:	c1 e8 10             	shr    $0x10,%eax
c01078e5:	89 c2                	mov    %eax,%edx
c01078e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01078ea:	25 00 0f 00 00       	and    $0xf00,%eax
c01078ef:	c1 e8 08             	shr    $0x8,%eax
c01078f2:	09 c2                	or     %eax,%edx
c01078f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01078f7:	88 50 1d             	mov    %dl,0x1d(%eax)
	cpu->model      = ((reg.eax & 0x000F0000) >> 12) | ((reg.eax & 0x000000F0) >> 4);
c01078fa:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01078fd:	25 00 00 0f 00       	and    $0xf0000,%eax
c0107902:	c1 e8 0c             	shr    $0xc,%eax
c0107905:	89 c2                	mov    %eax,%edx
c0107907:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010790a:	25 f0 00 00 00       	and    $0xf0,%eax
c010790f:	c1 e8 04             	shr    $0x4,%eax
c0107912:	09 c2                	or     %eax,%edx
c0107914:	8b 45 08             	mov    0x8(%ebp),%eax
c0107917:	88 50 1e             	mov    %dl,0x1e(%eax)
	cpu->stepping   =  reg.eax & 0x0000000F;
c010791a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010791d:	89 c2                	mov    %eax,%edx
c010791f:	83 e2 0f             	and    $0xf,%edx
c0107922:	8b 45 08             	mov    0x8(%ebp),%eax
c0107925:	88 50 1f             	mov    %dl,0x1f(%eax)
	cpu->type       = (reg.eax & 0x00003000) >> 12;
c0107928:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010792b:	25 00 30 00 00       	and    $0x3000,%eax
c0107930:	c1 e8 0c             	shr    $0xc,%eax
c0107933:	89 c2                	mov    %eax,%edx
c0107935:	8b 45 08             	mov    0x8(%ebp),%eax
c0107938:	88 50 20             	mov    %dl,0x20(%eax)

	cpu->brandID     = (uint8_t) reg.ebx;
c010793b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010793e:	89 c2                	mov    %eax,%edx
c0107940:	8b 45 08             	mov    0x8(%ebp),%eax
c0107943:	88 50 21             	mov    %dl,0x21(%eax)
	cpu->clflush     = (uint8_t) (reg.ebx >> 8);
c0107946:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107949:	c1 e8 08             	shr    $0x8,%eax
c010794c:	89 c2                	mov    %eax,%edx
c010794e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107951:	88 50 22             	mov    %dl,0x22(%eax)
	cpu->logic_cores = (uint8_t) (reg.ebx >> 16);
c0107954:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107957:	c1 e8 10             	shr    $0x10,%eax
c010795a:	89 c2                	mov    %eax,%edx
c010795c:	8b 45 08             	mov    0x8(%ebp),%eax
c010795f:	88 50 23             	mov    %dl,0x23(%eax)
	cpu->APIC_ID     = (uint8_t) (reg.ebx >> 24);
c0107962:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107965:	c1 e8 18             	shr    $0x18,%eax
c0107968:	89 c2                	mov    %eax,%edx
c010796a:	8b 45 08             	mov    0x8(%ebp),%eax
c010796d:	88 50 2e             	mov    %dl,0x2e(%eax)



    cpu->flagblock0 = reg.ecx;
c0107970:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107973:	8b 45 08             	mov    0x8(%ebp),%eax
c0107976:	89 50 68             	mov    %edx,0x68(%eax)
	cpu->flagblock1 = reg.edx;
c0107979:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010797c:	8b 45 08             	mov    0x8(%ebp),%eax
c010797f:	89 50 6c             	mov    %edx,0x6c(%eax)

	if(cpu->max_spec_func > 0x80000000)
c0107982:	8b 45 08             	mov    0x8(%ebp),%eax
c0107985:	8b 40 0c             	mov    0xc(%eax),%eax
c0107988:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c010798d:	76 39                	jbe    c01079c8 <identify_cpu+0x221>
	{
        cpuid(0x80000001, &reg);
c010798f:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107992:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107996:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c010799d:	e8 d2 fd ff ff       	call   c0107774 <cpuid>
        if((( reg.edx & (1 << 29) ) >> 29) && cpu->flagblock1 & PAE )
c01079a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01079a5:	25 00 00 00 20       	and    $0x20000000,%eax
c01079aa:	c1 e8 1d             	shr    $0x1d,%eax
c01079ad:	85 c0                	test   %eax,%eax
c01079af:	74 17                	je     c01079c8 <identify_cpu+0x221>
c01079b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01079b4:	8b 40 6c             	mov    0x6c(%eax),%eax
c01079b7:	83 e0 40             	and    $0x40,%eax
c01079ba:	85 c0                	test   %eax,%eax
c01079bc:	74 0a                	je     c01079c8 <identify_cpu+0x221>
        {
            cpu->LM = true;
c01079be:	8b 45 08             	mov    0x8(%ebp),%eax
c01079c1:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
        }
	}

    if (cpu->flagblock1 & (1 << 30))
c01079c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01079cb:	8b 40 6c             	mov    0x6c(%eax),%eax
c01079ce:	25 00 00 00 40       	and    $0x40000000,%eax
c01079d3:	85 c0                	test   %eax,%eax
c01079d5:	74 22                	je     c01079f9 <identify_cpu+0x252>
    {
        if(cpu->LM)
c01079d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01079da:	8b 40 24             	mov    0x24(%eax),%eax
c01079dd:	85 c0                	test   %eax,%eax
c01079df:	74 0c                	je     c01079ed <identify_cpu+0x246>
            cpu->architecture = IA64;
c01079e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01079e4:	c7 40 30 00 00 00 40 	movl   $0x40000000,0x30(%eax)
c01079eb:	eb 2c                	jmp    c0107a19 <identify_cpu+0x272>
        else
            cpu->architecture = IA32;
c01079ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01079f0:	c7 40 30 02 00 00 00 	movl   $0x2,0x30(%eax)
c01079f7:	eb 20                	jmp    c0107a19 <identify_cpu+0x272>
	}
	else
	{
        if(cpu->LM)
c01079f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01079fc:	8b 40 24             	mov    0x24(%eax),%eax
c01079ff:	85 c0                	test   %eax,%eax
c0107a01:	74 0c                	je     c0107a0f <identify_cpu+0x268>
            cpu->architecture = AMD64;
c0107a03:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a06:	c7 40 30 01 00 00 00 	movl   $0x1,0x30(%eax)
c0107a0d:	eb 0a                	jmp    c0107a19 <identify_cpu+0x272>
        else
            cpu->architecture = I386;
c0107a0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a12:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)




	//Detect Dynamic Syscall
	if (cpu->flagblock1 & SEP && cpu->manufactory == 2) {
c0107a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a1c:	8b 40 6c             	mov    0x6c(%eax),%eax
c0107a1f:	25 00 08 00 00       	and    $0x800,%eax
c0107a24:	85 c0                	test   %eax,%eax
c0107a26:	74 17                	je     c0107a3f <identify_cpu+0x298>
c0107a28:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a2b:	8b 40 04             	mov    0x4(%eax),%eax
c0107a2e:	83 f8 02             	cmp    $0x2,%eax
c0107a31:	75 0c                	jne    c0107a3f <identify_cpu+0x298>
		cpu->dsysc = sysenter;
c0107a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a36:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
c0107a3d:	eb 50                	jmp    c0107a8f <identify_cpu+0x2e8>
	}
	else if (cpu->flagblock1 & SEP && cpu->manufactory < 2 && cpu->max_spec_func > 0x80000000)
c0107a3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a42:	8b 40 6c             	mov    0x6c(%eax),%eax
c0107a45:	25 00 08 00 00       	and    $0x800,%eax
c0107a4a:	85 c0                	test   %eax,%eax
c0107a4c:	74 41                	je     c0107a8f <identify_cpu+0x2e8>
c0107a4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a51:	8b 40 04             	mov    0x4(%eax),%eax
c0107a54:	83 f8 01             	cmp    $0x1,%eax
c0107a57:	77 36                	ja     c0107a8f <identify_cpu+0x2e8>
c0107a59:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a5c:	8b 40 0c             	mov    0xc(%eax),%eax
c0107a5f:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c0107a64:	76 29                	jbe    c0107a8f <identify_cpu+0x2e8>
	{
		cpuid(0x80000001,&reg);
c0107a66:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107a69:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107a6d:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c0107a74:	e8 fb fc ff ff       	call   c0107774 <cpuid>
		if (reg.edx & 0x1000)
c0107a79:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107a7c:	25 00 10 00 00       	and    $0x1000,%eax
c0107a81:	85 c0                	test   %eax,%eax
c0107a83:	74 0a                	je     c0107a8f <identify_cpu+0x2e8>
		{
			cpu->dsysc = syscall;
c0107a85:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a88:	c7 40 28 02 00 00 00 	movl   $0x2,0x28(%eax)
		}
	}

	//get extended BrandID
	if (cpu->max_spec_func > 0x80000000) {
c0107a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a92:	8b 40 0c             	mov    0xc(%eax),%eax
c0107a95:	3d 00 00 00 80       	cmp    $0x80000000,%eax
c0107a9a:	76 21                	jbe    c0107abd <identify_cpu+0x316>
		cpuid(0x80000001, &reg);
c0107a9c:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107a9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107aa3:	c7 04 24 01 00 00 80 	movl   $0x80000001,(%esp)
c0107aaa:	e8 c5 fc ff ff       	call   c0107774 <cpuid>
		cpu->ext_brandID = (uint16_t)reg.ebx;
c0107aaf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107ab2:	89 c2                	mov    %eax,%edx
c0107ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ab7:	66 89 50 2c          	mov    %dx,0x2c(%eax)
c0107abb:	eb 09                	jmp    c0107ac6 <identify_cpu+0x31f>
	} else {
		cpu->ext_brandID = 0x3e;
c0107abd:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ac0:	66 c7 40 2c 3e 00    	movw   $0x3e,0x2c(%eax)
	}


	//Get CPU name/series
	if (cpu->max_spec_func > 0x80000004) { // via Brand String
c0107ac6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ac9:	8b 40 0c             	mov    0xc(%eax),%eax
c0107acc:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c0107ad1:	76 59                	jbe    c0107b2c <identify_cpu+0x385>
		for (i=0x80000002;i<=0x80000004;i++)
c0107ad3:	c7 45 e4 02 00 00 80 	movl   $0x80000002,-0x1c(%ebp)
c0107ada:	eb 42                	jmp    c0107b1e <identify_cpu+0x377>
		{
			cpuid(i,&reg);
c0107adc:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107adf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107ae3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ae6:	89 04 24             	mov    %eax,(%esp)
c0107ae9:	e8 86 fc ff ff       	call   c0107774 <cpuid>
			memcpy((cpu->cpu_type+(i-0x80000002)*16),((void*)&reg),16);
c0107aee:	8b 45 08             	mov    0x8(%ebp),%eax
c0107af1:	8d 50 34             	lea    0x34(%eax),%edx
c0107af4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107af7:	05 fe ff ff 0f       	add    $0xffffffe,%eax
c0107afc:	c1 e0 04             	shl    $0x4,%eax
c0107aff:	01 c2                	add    %eax,%edx
c0107b01:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0107b04:	8b 08                	mov    (%eax),%ecx
c0107b06:	89 0a                	mov    %ecx,(%edx)
c0107b08:	8b 48 04             	mov    0x4(%eax),%ecx
c0107b0b:	89 4a 04             	mov    %ecx,0x4(%edx)
c0107b0e:	8b 48 08             	mov    0x8(%eax),%ecx
c0107b11:	89 4a 08             	mov    %ecx,0x8(%edx)
c0107b14:	8b 40 0c             	mov    0xc(%eax),%eax
c0107b17:	89 42 0c             	mov    %eax,0xc(%edx)
	}


	//Get CPU name/series
	if (cpu->max_spec_func > 0x80000004) { // via Brand String
		for (i=0x80000002;i<=0x80000004;i++)
c0107b1a:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c0107b1e:	81 7d e4 04 00 00 80 	cmpl   $0x80000004,-0x1c(%ebp)
c0107b25:	76 b5                	jbe    c0107adc <identify_cpu+0x335>
c0107b27:	e9 e1 00 00 00       	jmp    c0107c0d <identify_cpu+0x466>
			memcpy((cpu->cpu_type+(i-0x80000002)*16),((void*)&reg),16);
		}

	}

	else if(cpu->family == 6 && cpu->model == 3 && cpu->stepping == 3)
c0107b2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b2f:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0107b33:	3c 06                	cmp    $0x6,%al
c0107b35:	75 6d                	jne    c0107ba4 <identify_cpu+0x3fd>
c0107b37:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b3a:	0f b6 40 1e          	movzbl 0x1e(%eax),%eax
c0107b3e:	3c 03                	cmp    $0x3,%al
c0107b40:	75 62                	jne    c0107ba4 <identify_cpu+0x3fd>
c0107b42:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b45:	0f b6 40 1f          	movzbl 0x1f(%eax),%eax
c0107b49:	3c 03                	cmp    $0x3,%al
c0107b4b:	75 57                	jne    c0107ba4 <identify_cpu+0x3fd>
	{
        strcat(cpu->cpu_type,"Quemu ");
c0107b4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b50:	8d 58 34             	lea    0x34(%eax),%ebx
c0107b53:	89 d8                	mov    %ebx,%eax
c0107b55:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
c0107b5c:	89 c2                	mov    %eax,%edx
c0107b5e:	b8 00 00 00 00       	mov    $0x0,%eax
c0107b63:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107b66:	89 d7                	mov    %edx,%edi
c0107b68:	f2 ae                	repnz scas %es:(%edi),%al
c0107b6a:	89 c8                	mov    %ecx,%eax
c0107b6c:	f7 d0                	not    %eax
c0107b6e:	83 e8 01             	sub    $0x1,%eax
c0107b71:	01 d8                	add    %ebx,%eax
c0107b73:	c7 00 51 75 65 6d    	movl   $0x6d657551,(%eax)
c0107b79:	66 c7 40 04 75 20    	movw   $0x2075,0x4(%eax)
c0107b7f:	c6 40 06 00          	movb   $0x0,0x6(%eax)
        strcat(cpu->cpu_type,architecture[cpu->architecture]);
c0107b83:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b86:	8b 40 30             	mov    0x30(%eax),%eax
c0107b89:	8b 04 85 e8 c8 10 c0 	mov    -0x3fef3718(,%eax,4),%eax
c0107b90:	8b 55 08             	mov    0x8(%ebp),%edx
c0107b93:	83 c2 34             	add    $0x34,%edx
c0107b96:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107b9a:	89 14 24             	mov    %edx,(%esp)
c0107b9d:	e8 de ef ff ff       	call   c0106b80 <strcat>
c0107ba2:	eb 69                	jmp    c0107c0d <identify_cpu+0x466>
	}

	else
	{ //standart name
		strcpy(cpu->cpu_type,cpu_manufactorys[cpu->manufactory]);
c0107ba4:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ba7:	8b 40 04             	mov    0x4(%eax),%eax
c0107baa:	8b 04 85 a0 c8 10 c0 	mov    -0x3fef3760(,%eax,4),%eax
c0107bb1:	8b 55 08             	mov    0x8(%ebp),%edx
c0107bb4:	83 c2 34             	add    $0x34,%edx
c0107bb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107bbb:	89 14 24             	mov    %edx,(%esp)
c0107bbe:	e8 04 ef ff ff       	call   c0106ac7 <strcpy>
		strcat(cpu->cpu_type," ");
c0107bc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107bc6:	8d 58 34             	lea    0x34(%eax),%ebx
c0107bc9:	89 d8                	mov    %ebx,%eax
c0107bcb:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
c0107bd2:	89 c2                	mov    %eax,%edx
c0107bd4:	b8 00 00 00 00       	mov    $0x0,%eax
c0107bd9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107bdc:	89 d7                	mov    %edx,%edi
c0107bde:	f2 ae                	repnz scas %es:(%edi),%al
c0107be0:	89 c8                	mov    %ecx,%eax
c0107be2:	f7 d0                	not    %eax
c0107be4:	83 e8 01             	sub    $0x1,%eax
c0107be7:	01 d8                	add    %ebx,%eax
c0107be9:	66 c7 00 20 00       	movw   $0x20,(%eax)
		strcat(cpu->cpu_type,architecture[cpu->architecture]);
c0107bee:	8b 45 08             	mov    0x8(%ebp),%eax
c0107bf1:	8b 40 30             	mov    0x30(%eax),%eax
c0107bf4:	8b 04 85 e8 c8 10 c0 	mov    -0x3fef3718(,%eax,4),%eax
c0107bfb:	8b 55 08             	mov    0x8(%ebp),%edx
c0107bfe:	83 c2 34             	add    $0x34,%edx
c0107c01:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107c05:	89 14 24             	mov    %edx,(%esp)
c0107c08:	e8 73 ef ff ff       	call   c0106b80 <strcat>
	}

	return 0;
c0107c0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c12:	83 c4 4c             	add    $0x4c,%esp
c0107c15:	5b                   	pop    %ebx
c0107c16:	5e                   	pop    %esi
c0107c17:	5f                   	pop    %edi
c0107c18:	5d                   	pop    %ebp
c0107c19:	c3                   	ret    

c0107c1a <CPU_info>:

/*
 * prints CPU Information (not much)
 * @return void
 */
 void CPU_info(struct cpu_properties *cpu) {
c0107c1a:	55                   	push   %ebp
c0107c1b:	89 e5                	mov    %esp,%ebp
c0107c1d:	83 ec 18             	sub    $0x18,%esp
	if (cpu->cpuid_support==true)
c0107c20:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c23:	8b 00                	mov    (%eax),%eax
c0107c25:	83 f8 01             	cmp    $0x1,%eax
c0107c28:	0f 85 34 01 00 00    	jne    c0107d62 <CPU_info+0x148>
	{
		printf("CPU Manufactory: %s\n",cpu_manufactorys[cpu->manufactory]);
c0107c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c31:	8b 40 04             	mov    0x4(%eax),%eax
c0107c34:	8b 04 85 a0 c8 10 c0 	mov    -0x3fef3760(,%eax,4),%eax
c0107c3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107c3f:	c7 04 24 a5 98 10 c0 	movl   $0xc01098a5,(%esp)
c0107c46:	e8 81 a9 ff ff       	call   c01025cc <printf>
		printf("Architecture: %s\n",architecture[cpu->architecture]);
c0107c4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c4e:	8b 40 30             	mov    0x30(%eax),%eax
c0107c51:	8b 04 85 e8 c8 10 c0 	mov    -0x3fef3718(,%eax,4),%eax
c0107c58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107c5c:	c7 04 24 ba 98 10 c0 	movl   $0xc01098ba,(%esp)
c0107c63:	e8 64 a9 ff ff       	call   c01025cc <printf>
		printf("CPU Model: %s\n",cpu->cpu_type);
c0107c68:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c6b:	83 c0 34             	add    $0x34,%eax
c0107c6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107c72:	c7 04 24 cc 98 10 c0 	movl   $0xc01098cc,(%esp)
c0107c79:	e8 4e a9 ff ff       	call   c01025cc <printf>
        printf("Family: %d  Model: %d  Stepping: %d\n",cpu->family,cpu->model,cpu->stepping);
c0107c7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c81:	0f b6 40 1f          	movzbl 0x1f(%eax),%eax
c0107c85:	0f b6 c8             	movzbl %al,%ecx
c0107c88:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c8b:	0f b6 40 1e          	movzbl 0x1e(%eax),%eax
c0107c8f:	0f b6 d0             	movzbl %al,%edx
c0107c92:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c95:	0f b6 40 1d          	movzbl 0x1d(%eax),%eax
c0107c99:	0f b6 c0             	movzbl %al,%eax
c0107c9c:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0107ca0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107ca4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107ca8:	c7 04 24 dc 98 10 c0 	movl   $0xc01098dc,(%esp)
c0107caf:	e8 18 a9 ff ff       	call   c01025cc <printf>
        printf("Logical CPUs: %d\n",cpu->logic_cores);
c0107cb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0107cb7:	0f b6 40 23          	movzbl 0x23(%eax),%eax
c0107cbb:	0f b6 c0             	movzbl %al,%eax
c0107cbe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107cc2:	c7 04 24 01 99 10 c0 	movl   $0xc0109901,(%esp)
c0107cc9:	e8 fe a8 ff ff       	call   c01025cc <printf>
		printf("FB0: %#08x  FB1: %#08x\n",cpu->flagblock0, cpu->flagblock1);
c0107cce:	8b 45 08             	mov    0x8(%ebp),%eax
c0107cd1:	8b 50 6c             	mov    0x6c(%eax),%edx
c0107cd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0107cd7:	8b 40 68             	mov    0x68(%eax),%eax
c0107cda:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107cde:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107ce2:	c7 04 24 13 99 10 c0 	movl   $0xc0109913,(%esp)
c0107ce9:	e8 de a8 ff ff       	call   c01025cc <printf>
		printf("Dynamic Syscall: %s\n",scall[cpu->dsysc]);
c0107cee:	8b 45 08             	mov    0x8(%ebp),%eax
c0107cf1:	8b 40 28             	mov    0x28(%eax),%eax
c0107cf4:	8b 04 85 dc c8 10 c0 	mov    -0x3fef3724(,%eax,4),%eax
c0107cfb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107cff:	c7 04 24 2b 99 10 c0 	movl   $0xc010992b,(%esp)
c0107d06:	e8 c1 a8 ff ff       	call   c01025cc <printf>

        if(cpu->flagblock1 & CLFLSH)
c0107d0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d0e:	8b 40 6c             	mov    0x6c(%eax),%eax
c0107d11:	25 00 00 08 00       	and    $0x80000,%eax
c0107d16:	85 c0                	test   %eax,%eax
c0107d18:	74 1d                	je     c0107d37 <CPU_info+0x11d>
		{
            printf("clflush size: %dB\n",cpu->clflush*8);
c0107d1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d1d:	0f b6 40 22          	movzbl 0x22(%eax),%eax
c0107d21:	0f b6 c0             	movzbl %al,%eax
c0107d24:	c1 e0 03             	shl    $0x3,%eax
c0107d27:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107d2b:	c7 04 24 40 99 10 c0 	movl   $0xc0109940,(%esp)
c0107d32:	e8 95 a8 ff ff       	call   c01025cc <printf>
		}
		if(cpu->flagblock1 & ACPI)
c0107d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d3a:	8b 40 6c             	mov    0x6c(%eax),%eax
c0107d3d:	25 00 00 40 00       	and    $0x400000,%eax
c0107d42:	85 c0                	test   %eax,%eax
c0107d44:	74 28                	je     c0107d6e <CPU_info+0x154>
		{
            printf("APIC ID: %d\n", cpu->APIC_ID);
c0107d46:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d49:	0f b6 40 2e          	movzbl 0x2e(%eax),%eax
c0107d4d:	0f b6 c0             	movzbl %al,%eax
c0107d50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107d54:	c7 04 24 53 99 10 c0 	movl   $0xc0109953,(%esp)
c0107d5b:	e8 6c a8 ff ff       	call   c01025cc <printf>
c0107d60:	eb 0c                	jmp    c0107d6e <CPU_info+0x154>
	}

	else

	{
		printf("current cpu does not support CPUID\n");
c0107d62:	c7 04 24 60 99 10 c0 	movl   $0xc0109960,(%esp)
c0107d69:	e8 81 b4 ff ff       	call   c01031ef <puts>
	}
 }
c0107d6e:	c9                   	leave  
c0107d6f:	c3                   	ret    

c0107d70 <INIT_CPUID>:

/*
 * Creates structures containing CPU Informations
 * @return void
 */
void INIT_CPUID(void) {
c0107d70:	55                   	push   %ebp
c0107d71:	89 e5                	mov    %esp,%ebp
c0107d73:	83 ec 18             	sub    $0x18,%esp
		identify_cpu((struct cpu_properties *)&current_CPU);
c0107d76:	c7 04 24 60 02 13 c0 	movl   $0xc0130260,(%esp)
c0107d7d:	e8 25 fa ff ff       	call   c01077a7 <identify_cpu>
		CPU_info((struct cpu_properties *)&current_CPU);
c0107d82:	c7 04 24 60 02 13 c0 	movl   $0xc0130260,(%esp)
c0107d89:	e8 8c fe ff ff       	call   c0107c1a <CPU_info>
}
c0107d8e:	c9                   	leave  
c0107d8f:	c3                   	ret    

c0107d90 <print>:
extern struct thread_state *current_thread;
extern struct process_state *kernel_state;


void print(struct cpu_state **cpu)
{
c0107d90:	55                   	push   %ebp
c0107d91:	89 e5                	mov    %esp,%ebp
c0107d93:	83 ec 18             	sub    $0x18,%esp
    printf("%s",(*cpu)->ebx);
c0107d96:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d99:	8b 00                	mov    (%eax),%eax
c0107d9b:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107d9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107da2:	c7 04 24 83 99 10 c0 	movl   $0xc0109983,(%esp)
c0107da9:	e8 1e a8 ff ff       	call   c01025cc <printf>
    (*cpu)->eax = 0;
c0107dae:	8b 45 08             	mov    0x8(%ebp),%eax
c0107db1:	8b 00                	mov    (%eax),%eax
c0107db3:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
}
c0107dba:	c9                   	leave  
c0107dbb:	c3                   	ret    

c0107dbc <identify_os>:

void identify_os(struct cpu_state **cpu)
{
c0107dbc:	55                   	push   %ebp
c0107dbd:	89 e5                	mov    %esp,%ebp
    (*cpu)->eax = 'u' | ('n' << 8) | ('i' << 16) | (OS_VERSION << 24);
c0107dbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dc2:	8b 00                	mov    (%eax),%eax
c0107dc4:	c7 40 28 75 6e 69 01 	movl   $0x1696e75,0x28(%eax)
};
c0107dcb:	5d                   	pop    %ebp
c0107dcc:	c3                   	ret    

c0107dcd <linux_syscall_handler>:
{
    NULL, exit,fork,read,write,open,close
};

void linux_syscall_handler(struct cpu_state **cpu)
{
c0107dcd:	55                   	push   %ebp
c0107dce:	89 e5                	mov    %esp,%ebp
c0107dd0:	83 ec 18             	sub    $0x18,%esp
    if( (*cpu)->eax < DEFINED_LINUX_FUNCTIONS)
c0107dd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dd6:	8b 00                	mov    (%eax),%eax
c0107dd8:	8b 40 28             	mov    0x28(%eax),%eax
c0107ddb:	83 f8 06             	cmp    $0x6,%eax
c0107dde:	77 2a                	ja     c0107e0a <linux_syscall_handler+0x3d>
    {
	if(linux_functions[(*cpu)->eax] != NULL)
c0107de0:	8b 45 08             	mov    0x8(%ebp),%eax
c0107de3:	8b 00                	mov    (%eax),%eax
c0107de5:	8b 40 28             	mov    0x28(%eax),%eax
c0107de8:	8b 04 85 f8 c8 10 c0 	mov    -0x3fef3708(,%eax,4),%eax
c0107def:	85 c0                	test   %eax,%eax
c0107df1:	74 17                	je     c0107e0a <linux_syscall_handler+0x3d>
            linux_functions[(*cpu)->eax](cpu);
c0107df3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107df6:	8b 00                	mov    (%eax),%eax
c0107df8:	8b 40 28             	mov    0x28(%eax),%eax
c0107dfb:	8b 14 85 f8 c8 10 c0 	mov    -0x3fef3708(,%eax,4),%edx
c0107e02:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e05:	89 04 24             	mov    %eax,(%esp)
c0107e08:	ff d2                	call   *%edx
    }
}
c0107e0a:	c9                   	leave  
c0107e0b:	c3                   	ret    

c0107e0c <universe_syscall_handler>:
    print,thread_exit,launch_thread,identify_os
};


void universe_syscall_handler(struct cpu_state **cpu)
{
c0107e0c:	55                   	push   %ebp
c0107e0d:	89 e5                	mov    %esp,%ebp
c0107e0f:	83 ec 18             	sub    $0x18,%esp
    if( (*cpu)->eax < DEFINED_UNIVERSE_FUNCTIONS)
c0107e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e15:	8b 00                	mov    (%eax),%eax
c0107e17:	8b 40 28             	mov    0x28(%eax),%eax
c0107e1a:	83 f8 03             	cmp    $0x3,%eax
c0107e1d:	77 2a                	ja     c0107e49 <universe_syscall_handler+0x3d>
    {
        if(universe_functions[(*cpu)->eax] != NULL)
c0107e1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e22:	8b 00                	mov    (%eax),%eax
c0107e24:	8b 40 28             	mov    0x28(%eax),%eax
c0107e27:	8b 04 85 14 c9 10 c0 	mov    -0x3fef36ec(,%eax,4),%eax
c0107e2e:	85 c0                	test   %eax,%eax
c0107e30:	74 17                	je     c0107e49 <universe_syscall_handler+0x3d>
            universe_functions[(*cpu)->eax](cpu);
c0107e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e35:	8b 00                	mov    (%eax),%eax
c0107e37:	8b 40 28             	mov    0x28(%eax),%eax
c0107e3a:	8b 14 85 14 c9 10 c0 	mov    -0x3fef36ec(,%eax,4),%edx
c0107e41:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e44:	89 04 24             	mov    %eax,(%esp)
c0107e47:	ff d2                	call   *%edx
    }
}
c0107e49:	c9                   	leave  
c0107e4a:	c3                   	ret    
	...

c0107e4c <list_create>:
#include <heap.h>
#include <stdint.h>
#include <list.h>

list_t *list_create(void)
{
c0107e4c:	55                   	push   %ebp
c0107e4d:	89 e5                	mov    %esp,%ebp
c0107e4f:	83 ec 28             	sub    $0x28,%esp
	list_t *list = (list_t *) malloc(sizeof(list_t));
c0107e52:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0107e59:	e8 7e ac ff ff       	call   c0102adc <malloc>
c0107e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct list_node *dummy = (struct list_node *) malloc(sizeof(struct list_node));
c0107e61:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0107e68:	e8 6f ac ff ff       	call   c0102adc <malloc>
c0107e6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list->head = dummy;
c0107e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e73:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107e76:	89 10                	mov    %edx,(%eax)
    list->current = dummy;
c0107e78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107e7e:	89 50 04             	mov    %edx,0x4(%eax)
    list->lock = false;
c0107e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e84:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    dummy->next = dummy;
c0107e8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107e91:	89 10                	mov    %edx,(%eax)
    dummy->prev = dummy;
c0107e93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e96:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107e99:	89 50 04             	mov    %edx,0x4(%eax)
    dummy->element = (void *) 0;
c0107e9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e9f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	return list;
c0107ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107ea9:	c9                   	leave  
c0107eaa:	c3                   	ret    

c0107eab <list_destroy>:

/* TODO: Check for bugs */
void list_destroy(list_t **list)
{
c0107eab:	55                   	push   %ebp
c0107eac:	89 e5                	mov    %esp,%ebp
c0107eae:	83 ec 28             	sub    $0x28,%esp
	struct list_node *node = list[0]->head->next;
c0107eb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107eb4:	8b 00                	mov    (%eax),%eax
c0107eb6:	8b 00                	mov    (%eax),%eax
c0107eb8:	8b 00                	mov    (%eax),%eax
c0107eba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct list_node *head = list[0]->head;
c0107ebd:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ec0:	8b 00                	mov    (%eax),%eax
c0107ec2:	8b 00                	mov    (%eax),%eax
c0107ec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (node != head)
c0107ec7:	eb 13                	jmp    c0107edc <list_destroy+0x31>
	{

        node = node->next;
c0107ec9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ecc:	8b 00                	mov    (%eax),%eax
c0107ece:	89 45 f4             	mov    %eax,-0xc(%ebp)
		free(node);
c0107ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ed4:	89 04 24             	mov    %eax,(%esp)
c0107ed7:	e8 1b ac ff ff       	call   c0102af7 <free>
/* TODO: Check for bugs */
void list_destroy(list_t **list)
{
	struct list_node *node = list[0]->head->next;
	struct list_node *head = list[0]->head;
    while (node != head)
c0107edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107edf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107ee2:	75 e5                	jne    c0107ec9 <list_destroy+0x1e>

        node = node->next;
		free(node);
    }

	free(*list);
c0107ee4:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ee7:	8b 00                	mov    (%eax),%eax
c0107ee9:	89 04 24             	mov    %eax,(%esp)
c0107eec:	e8 06 ac ff ff       	call   c0102af7 <free>
	*list = NULL;
c0107ef1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ef4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return;
}
c0107efa:	c9                   	leave  
c0107efb:	c3                   	ret    

c0107efc <list_splice>:

void list_splice(struct list_node *start, struct list_node *end, struct list_node *target)
{
c0107efc:	55                   	push   %ebp
c0107efd:	89 e5                	mov    %esp,%ebp
    start->prev->next = end->next;
c0107eff:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f02:	8b 40 04             	mov    0x4(%eax),%eax
c0107f05:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f08:	8b 12                	mov    (%edx),%edx
c0107f0a:	89 10                	mov    %edx,(%eax)
    end->next->prev = start->prev;
c0107f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f0f:	8b 00                	mov    (%eax),%eax
c0107f11:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f14:	8b 52 04             	mov    0x4(%edx),%edx
c0107f17:	89 50 04             	mov    %edx,0x4(%eax)
    start->prev = target;
c0107f1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f1d:	8b 55 10             	mov    0x10(%ebp),%edx
c0107f20:	89 50 04             	mov    %edx,0x4(%eax)
    end->next = target->next;
c0107f23:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f26:	8b 10                	mov    (%eax),%edx
c0107f28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f2b:	89 10                	mov    %edx,(%eax)
    target->next->prev = end;
c0107f2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f30:	8b 00                	mov    (%eax),%eax
c0107f32:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f35:	89 50 04             	mov    %edx,0x4(%eax)
    target->next = start;
c0107f38:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f3b:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f3e:	89 10                	mov    %edx,(%eax)
	return;
}
c0107f40:	5d                   	pop    %ebp
c0107f41:	c3                   	ret    

c0107f42 <list_push_back>:

list_t *list_push_back(list_t *list, void *element)
{
c0107f42:	55                   	push   %ebp
c0107f43:	89 e5                	mov    %esp,%ebp
c0107f45:	83 ec 28             	sub    $0x28,%esp
	struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c0107f48:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0107f4f:	e8 88 ab ff ff       	call   c0102adc <malloc>
c0107f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c0107f57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f5a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f5d:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c0107f60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f63:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107f66:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c0107f68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107f6e:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, list->head->prev);
c0107f71:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f74:	8b 00                	mov    (%eax),%eax
c0107f76:	8b 40 04             	mov    0x4(%eax),%eax
c0107f79:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f87:	89 04 24             	mov    %eax,(%esp)
c0107f8a:	e8 6d ff ff ff       	call   c0107efc <list_splice>
	return list;
c0107f8f:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0107f92:	c9                   	leave  
c0107f93:	c3                   	ret    

c0107f94 <list_push_front>:

list_t *list_push_front(list_t *list, void *element)
{
c0107f94:	55                   	push   %ebp
c0107f95:	89 e5                	mov    %esp,%ebp
c0107f97:	83 ec 28             	sub    $0x28,%esp
	struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c0107f9a:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0107fa1:	e8 36 ab ff ff       	call   c0102adc <malloc>
c0107fa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c0107fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fac:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107faf:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c0107fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107fb8:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c0107fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107fc0:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, list->head);
c0107fc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fc6:	8b 00                	mov    (%eax),%eax
c0107fc8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fcf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fd6:	89 04 24             	mov    %eax,(%esp)
c0107fd9:	e8 1e ff ff ff       	call   c0107efc <list_splice>
	return list;
c0107fde:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0107fe1:	c9                   	leave  
c0107fe2:	c3                   	ret    

c0107fe3 <list_pop_back>:

void *list_pop_back(list_t *list)
{
c0107fe3:	55                   	push   %ebp
c0107fe4:	89 e5                	mov    %esp,%ebp
c0107fe6:	83 ec 28             	sub    $0x28,%esp
	struct list_node *last = list->head->prev;
c0107fe9:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fec:	8b 00                	mov    (%eax),%eax
c0107fee:	8b 40 04             	mov    0x4(%eax),%eax
c0107ff1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return list_remove_node(last);
c0107ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ff7:	89 04 24             	mov    %eax,(%esp)
c0107ffa:	e8 c2 00 00 00       	call   c01080c1 <list_remove_node>
}
c0107fff:	c9                   	leave  
c0108000:	c3                   	ret    

c0108001 <list_pop_front>:

void *list_pop_front(list_t *list)
{
c0108001:	55                   	push   %ebp
c0108002:	89 e5                	mov    %esp,%ebp
c0108004:	83 ec 28             	sub    $0x28,%esp
	struct list_node *first = list->head->next;
c0108007:	8b 45 08             	mov    0x8(%ebp),%eax
c010800a:	8b 00                	mov    (%eax),%eax
c010800c:	8b 00                	mov    (%eax),%eax
c010800e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return list_remove_node(first);
c0108011:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108014:	89 04 24             	mov    %eax,(%esp)
c0108017:	e8 a5 00 00 00       	call   c01080c1 <list_remove_node>
}
c010801c:	c9                   	leave  
c010801d:	c3                   	ret    

c010801e <list_insert_after>:

list_t *list_insert_after(list_t *list, void *element)
{
c010801e:	55                   	push   %ebp
c010801f:	89 e5                	mov    %esp,%ebp
c0108021:	83 ec 28             	sub    $0x28,%esp
	struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c0108024:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010802b:	e8 ac aa ff ff       	call   c0102adc <malloc>
c0108030:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c0108033:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108036:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108039:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c010803c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010803f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108042:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c0108044:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108047:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010804a:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, list->current);
c010804d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108050:	8b 40 04             	mov    0x4(%eax),%eax
c0108053:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108057:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010805a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010805e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108061:	89 04 24             	mov    %eax,(%esp)
c0108064:	e8 93 fe ff ff       	call   c0107efc <list_splice>
	return list;
c0108069:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010806c:	c9                   	leave  
c010806d:	c3                   	ret    

c010806e <list_insert_before>:

list_t *list_insert_before(list_t *list, void *element)
{
c010806e:	55                   	push   %ebp
c010806f:	89 e5                	mov    %esp,%ebp
c0108071:	83 ec 28             	sub    $0x28,%esp
	struct list_node *node = (struct list_node *) malloc(sizeof(struct list_node));
c0108074:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010807b:	e8 5c aa ff ff       	call   c0102adc <malloc>
c0108080:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->element = element;
c0108083:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108086:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108089:	89 50 08             	mov    %edx,0x8(%eax)
    node->next = node;
c010808c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010808f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108092:	89 10                	mov    %edx,(%eax)
    node->prev = node;
c0108094:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108097:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010809a:	89 50 04             	mov    %edx,0x4(%eax)
    list_splice(node, node, list->current->prev);
c010809d:	8b 45 08             	mov    0x8(%ebp),%eax
c01080a0:	8b 40 04             	mov    0x4(%eax),%eax
c01080a3:	8b 40 04             	mov    0x4(%eax),%eax
c01080a6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01080aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01080b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080b4:	89 04 24             	mov    %eax,(%esp)
c01080b7:	e8 40 fe ff ff       	call   c0107efc <list_splice>
	return list;
c01080bc:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01080bf:	c9                   	leave  
c01080c0:	c3                   	ret    

c01080c1 <list_remove_node>:

void *list_remove_node(struct list_node *node)
{
c01080c1:	55                   	push   %ebp
c01080c2:	89 e5                	mov    %esp,%ebp
c01080c4:	83 ec 28             	sub    $0x28,%esp
	void *element = node->element;
c01080c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ca:	8b 40 08             	mov    0x8(%eax),%eax
c01080cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    node->prev->next = node->next;
c01080d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01080d3:	8b 40 04             	mov    0x4(%eax),%eax
c01080d6:	8b 55 08             	mov    0x8(%ebp),%edx
c01080d9:	8b 12                	mov    (%edx),%edx
c01080db:	89 10                	mov    %edx,(%eax)
    node->next->prev = node->prev;
c01080dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01080e0:	8b 00                	mov    (%eax),%eax
c01080e2:	8b 55 08             	mov    0x8(%ebp),%edx
c01080e5:	8b 52 04             	mov    0x4(%edx),%edx
c01080e8:	89 50 04             	mov    %edx,0x4(%eax)
	free(node);
c01080eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ee:	89 04 24             	mov    %eax,(%esp)
c01080f1:	e8 01 aa ff ff       	call   c0102af7 <free>
	return element;
c01080f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01080f9:	c9                   	leave  
c01080fa:	c3                   	ret    

c01080fb <list_remove>:

void *list_remove(list_t *list)
{
c01080fb:	55                   	push   %ebp
c01080fc:	89 e5                	mov    %esp,%ebp
c01080fe:	83 ec 28             	sub    $0x28,%esp
	void *element = list_get_current(list);
c0108101:	8b 45 08             	mov    0x8(%ebp),%eax
c0108104:	89 04 24             	mov    %eax,(%esp)
c0108107:	e8 71 00 00 00       	call   c010817d <list_get_current>
c010810c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct list_node *node = list->current;
c010810f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108112:	8b 40 04             	mov    0x4(%eax),%eax
c0108115:	89 45 f0             	mov    %eax,-0x10(%ebp)
    node->prev->next = node->next;
c0108118:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010811b:	8b 40 04             	mov    0x4(%eax),%eax
c010811e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108121:	8b 12                	mov    (%edx),%edx
c0108123:	89 10                	mov    %edx,(%eax)
    node->next->prev = node->prev;
c0108125:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108128:	8b 00                	mov    (%eax),%eax
c010812a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010812d:	8b 52 04             	mov    0x4(%edx),%edx
c0108130:	89 50 04             	mov    %edx,0x4(%eax)
	free(node);
c0108133:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108136:	89 04 24             	mov    %eax,(%esp)
c0108139:	e8 b9 a9 ff ff       	call   c0102af7 <free>
	return element;
c010813e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108141:	c9                   	leave  
c0108142:	c3                   	ret    

c0108143 <list_length>:

int list_length(list_t *list)
{
c0108143:	55                   	push   %ebp
c0108144:	89 e5                	mov    %esp,%ebp
c0108146:	83 ec 10             	sub    $0x10,%esp
	struct list_node *node = list->head->next;
c0108149:	8b 45 08             	mov    0x8(%ebp),%eax
c010814c:	8b 00                	mov    (%eax),%eax
c010814e:	8b 00                	mov    (%eax),%eax
c0108150:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct list_node *head = list->head;
c0108153:	8b 45 08             	mov    0x8(%ebp),%eax
c0108156:	8b 00                	mov    (%eax),%eax
c0108158:	89 45 f4             	mov    %eax,-0xc(%ebp)
	size_t size = 0;
c010815b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (node != head)
c0108162:	eb 0c                	jmp    c0108170 <list_length+0x2d>
	{
        node = node->next;
c0108164:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108167:	8b 00                	mov    (%eax),%eax
c0108169:	89 45 fc             	mov    %eax,-0x4(%ebp)
        size++;
c010816c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
int list_length(list_t *list)
{
	struct list_node *node = list->head->next;
	struct list_node *head = list->head;
	size_t size = 0;
    while (node != head)
c0108170:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108173:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108176:	75 ec                	jne    c0108164 <list_length+0x21>
	{
        node = node->next;
        size++;
    }
	return size;
c0108178:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010817b:	c9                   	leave  
c010817c:	c3                   	ret    

c010817d <list_get_current>:

void *list_get_current(list_t *list)
{
c010817d:	55                   	push   %ebp
c010817e:	89 e5                	mov    %esp,%ebp
	return list->current->element;
c0108180:	8b 45 08             	mov    0x8(%ebp),%eax
c0108183:	8b 40 04             	mov    0x4(%eax),%eax
c0108186:	8b 40 08             	mov    0x8(%eax),%eax
}
c0108189:	5d                   	pop    %ebp
c010818a:	c3                   	ret    

c010818b <list_next>:

list_t *list_next(list_t *list)
{
c010818b:	55                   	push   %ebp
c010818c:	89 e5                	mov    %esp,%ebp
	list->current = list->current->next;
c010818e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108191:	8b 40 04             	mov    0x4(%eax),%eax
c0108194:	8b 10                	mov    (%eax),%edx
c0108196:	8b 45 08             	mov    0x8(%ebp),%eax
c0108199:	89 50 04             	mov    %edx,0x4(%eax)
	return list;
c010819c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010819f:	5d                   	pop    %ebp
c01081a0:	c3                   	ret    

c01081a1 <list_previous>:

list_t *list_previous(list_t *list)
{
c01081a1:	55                   	push   %ebp
c01081a2:	89 e5                	mov    %esp,%ebp
	list->current = list->current->prev;
c01081a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01081a7:	8b 40 04             	mov    0x4(%eax),%eax
c01081aa:	8b 50 04             	mov    0x4(%eax),%edx
c01081ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01081b0:	89 50 04             	mov    %edx,0x4(%eax)
	return list;
c01081b3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01081b6:	5d                   	pop    %ebp
c01081b7:	c3                   	ret    

c01081b8 <list_is_last>:

bool list_is_last(list_t *list)
{
c01081b8:	55                   	push   %ebp
c01081b9:	89 e5                	mov    %esp,%ebp
	return (list->current == list->head);
c01081bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01081be:	8b 50 04             	mov    0x4(%eax),%edx
c01081c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01081c4:	8b 00                	mov    (%eax),%eax
c01081c6:	39 c2                	cmp    %eax,%edx
c01081c8:	0f 94 c0             	sete   %al
c01081cb:	0f b6 c0             	movzbl %al,%eax
}
c01081ce:	5d                   	pop    %ebp
c01081cf:	c3                   	ret    

c01081d0 <list_set_first>:

list_t *list_set_first(list_t *list)
{
c01081d0:	55                   	push   %ebp
c01081d1:	89 e5                	mov    %esp,%ebp
	list->current = list->head->next;
c01081d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01081d6:	8b 00                	mov    (%eax),%eax
c01081d8:	8b 10                	mov    (%eax),%edx
c01081da:	8b 45 08             	mov    0x8(%ebp),%eax
c01081dd:	89 50 04             	mov    %edx,0x4(%eax)
	return list;
c01081e0:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01081e3:	5d                   	pop    %ebp
c01081e4:	c3                   	ret    

c01081e5 <list_set_last>:

list_t *list_set_last(list_t *list)
{
c01081e5:	55                   	push   %ebp
c01081e6:	89 e5                	mov    %esp,%ebp
	list->current = list->head->prev;
c01081e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01081eb:	8b 00                	mov    (%eax),%eax
c01081ed:	8b 50 04             	mov    0x4(%eax),%edx
c01081f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01081f3:	89 50 04             	mov    %edx,0x4(%eax)
	return list;
c01081f6:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01081f9:	5d                   	pop    %ebp
c01081fa:	c3                   	ret    

c01081fb <list_is_empty>:

bool list_is_empty(list_t *list)
{
c01081fb:	55                   	push   %ebp
c01081fc:	89 e5                	mov    %esp,%ebp
	return (list->head == list->head->next);
c01081fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0108201:	8b 10                	mov    (%eax),%edx
c0108203:	8b 45 08             	mov    0x8(%ebp),%eax
c0108206:	8b 00                	mov    (%eax),%eax
c0108208:	8b 00                	mov    (%eax),%eax
c010820a:	39 c2                	cmp    %eax,%edx
c010820c:	0f 94 c0             	sete   %al
c010820f:	0f b6 c0             	movzbl %al,%eax
}
c0108212:	5d                   	pop    %ebp
c0108213:	c3                   	ret    
	...

c0108220 <start>:
c0108220:	b9 00 d0 10 00       	mov    $0x10d000,%ecx
c0108225:	0f 22 d9             	mov    %ecx,%cr3
c0108228:	0f 20 e1             	mov    %cr4,%ecx
c010822b:	83 c9 10             	or     $0x10,%ecx
c010822e:	0f 22 e1             	mov    %ecx,%cr4
c0108231:	0f 20 c1             	mov    %cr0,%ecx
c0108234:	81 c9 00 00 00 80    	or     $0x80000000,%ecx
c010823a:	0f 22 c1             	mov    %ecx,%cr0
c010823d:	8d 0d 45 82 10 c0    	lea    0xc0108245,%ecx
c0108243:	ff e1                	jmp    *%ecx

c0108245 <higherhalf>:
c0108245:	bc 00 00 11 c0       	mov    $0xc0110000,%esp
c010824a:	81 c3 00 00 00 c0    	add    $0xc0000000,%ebx
c0108250:	6a 00                	push   $0x0
c0108252:	6a 00                	push   $0x0
c0108254:	50                   	push   %eax
c0108255:	53                   	push   %ebx
c0108256:	e8 ec 7d ff ff       	call   c0100047 <init>
c010825b:	eb fe                	jmp    c010825b <higherhalf+0x16>
c010825d:	00 00                	add    %al,(%eax)
	...

c0108260 <isr_0>:
c0108260:	6a 00                	push   $0x0
c0108262:	6a 00                	push   $0x0
c0108264:	e9 81 01 00 00       	jmp    c01083ea <isr_save>

c0108269 <isr_1>:
c0108269:	6a 00                	push   $0x0
c010826b:	6a 01                	push   $0x1
c010826d:	e9 78 01 00 00       	jmp    c01083ea <isr_save>

c0108272 <isr_2>:
c0108272:	6a 00                	push   $0x0
c0108274:	6a 02                	push   $0x2
c0108276:	e9 6f 01 00 00       	jmp    c01083ea <isr_save>

c010827b <isr_3>:
c010827b:	6a 00                	push   $0x0
c010827d:	6a 03                	push   $0x3
c010827f:	e9 66 01 00 00       	jmp    c01083ea <isr_save>

c0108284 <isr_4>:
c0108284:	6a 00                	push   $0x0
c0108286:	6a 04                	push   $0x4
c0108288:	e9 5d 01 00 00       	jmp    c01083ea <isr_save>

c010828d <isr_5>:
c010828d:	6a 00                	push   $0x0
c010828f:	6a 05                	push   $0x5
c0108291:	e9 54 01 00 00       	jmp    c01083ea <isr_save>

c0108296 <isr_6>:
c0108296:	6a 00                	push   $0x0
c0108298:	6a 06                	push   $0x6
c010829a:	e9 4b 01 00 00       	jmp    c01083ea <isr_save>

c010829f <isr_7>:
c010829f:	6a 00                	push   $0x0
c01082a1:	6a 07                	push   $0x7
c01082a3:	e9 42 01 00 00       	jmp    c01083ea <isr_save>

c01082a8 <isr_8>:
c01082a8:	6a 08                	push   $0x8
c01082aa:	e9 3b 01 00 00       	jmp    c01083ea <isr_save>

c01082af <isr_9>:
c01082af:	6a 00                	push   $0x0
c01082b1:	6a 09                	push   $0x9
c01082b3:	e9 32 01 00 00       	jmp    c01083ea <isr_save>

c01082b8 <isr_10>:
c01082b8:	6a 0a                	push   $0xa
c01082ba:	e9 2b 01 00 00       	jmp    c01083ea <isr_save>

c01082bf <isr_11>:
c01082bf:	6a 0b                	push   $0xb
c01082c1:	e9 24 01 00 00       	jmp    c01083ea <isr_save>

c01082c6 <isr_12>:
c01082c6:	6a 0c                	push   $0xc
c01082c8:	e9 1d 01 00 00       	jmp    c01083ea <isr_save>

c01082cd <isr_13>:
c01082cd:	6a 0d                	push   $0xd
c01082cf:	e9 16 01 00 00       	jmp    c01083ea <isr_save>

c01082d4 <isr_14>:
c01082d4:	6a 0e                	push   $0xe
c01082d6:	e9 0f 01 00 00       	jmp    c01083ea <isr_save>

c01082db <isr_15>:
c01082db:	6a 00                	push   $0x0
c01082dd:	6a 0f                	push   $0xf
c01082df:	e9 06 01 00 00       	jmp    c01083ea <isr_save>

c01082e4 <isr_16>:
c01082e4:	6a 00                	push   $0x0
c01082e6:	6a 10                	push   $0x10
c01082e8:	e9 fd 00 00 00       	jmp    c01083ea <isr_save>

c01082ed <isr_17>:
c01082ed:	6a 11                	push   $0x11
c01082ef:	e9 f6 00 00 00       	jmp    c01083ea <isr_save>

c01082f4 <isr_18>:
c01082f4:	6a 00                	push   $0x0
c01082f6:	6a 12                	push   $0x12
c01082f8:	e9 ed 00 00 00       	jmp    c01083ea <isr_save>

c01082fd <isr_19>:
c01082fd:	6a 00                	push   $0x0
c01082ff:	6a 13                	push   $0x13
c0108301:	e9 e4 00 00 00       	jmp    c01083ea <isr_save>

c0108306 <isr_20>:
c0108306:	6a 00                	push   $0x0
c0108308:	6a 14                	push   $0x14
c010830a:	e9 db 00 00 00       	jmp    c01083ea <isr_save>

c010830f <isr_21>:
c010830f:	6a 00                	push   $0x0
c0108311:	6a 15                	push   $0x15
c0108313:	e9 d2 00 00 00       	jmp    c01083ea <isr_save>

c0108318 <isr_22>:
c0108318:	6a 00                	push   $0x0
c010831a:	6a 16                	push   $0x16
c010831c:	e9 c9 00 00 00       	jmp    c01083ea <isr_save>

c0108321 <isr_23>:
c0108321:	6a 00                	push   $0x0
c0108323:	6a 17                	push   $0x17
c0108325:	e9 c0 00 00 00       	jmp    c01083ea <isr_save>

c010832a <isr_24>:
c010832a:	6a 00                	push   $0x0
c010832c:	6a 18                	push   $0x18
c010832e:	e9 b7 00 00 00       	jmp    c01083ea <isr_save>

c0108333 <isr_25>:
c0108333:	6a 00                	push   $0x0
c0108335:	6a 19                	push   $0x19
c0108337:	e9 ae 00 00 00       	jmp    c01083ea <isr_save>

c010833c <isr_26>:
c010833c:	6a 00                	push   $0x0
c010833e:	6a 1a                	push   $0x1a
c0108340:	e9 a5 00 00 00       	jmp    c01083ea <isr_save>

c0108345 <isr_27>:
c0108345:	6a 00                	push   $0x0
c0108347:	6a 1b                	push   $0x1b
c0108349:	e9 9c 00 00 00       	jmp    c01083ea <isr_save>

c010834e <isr_28>:
c010834e:	6a 00                	push   $0x0
c0108350:	6a 1c                	push   $0x1c
c0108352:	e9 93 00 00 00       	jmp    c01083ea <isr_save>

c0108357 <isr_29>:
c0108357:	6a 00                	push   $0x0
c0108359:	6a 1d                	push   $0x1d
c010835b:	e9 8a 00 00 00       	jmp    c01083ea <isr_save>

c0108360 <isr_30>:
c0108360:	6a 00                	push   $0x0
c0108362:	6a 1e                	push   $0x1e
c0108364:	e9 81 00 00 00       	jmp    c01083ea <isr_save>

c0108369 <isr_31>:
c0108369:	6a 00                	push   $0x0
c010836b:	6a 1f                	push   $0x1f
c010836d:	eb 7b                	jmp    c01083ea <isr_save>

c010836f <isr_default>:
c010836f:	6a ff                	push   $0xffffffff
c0108371:	6a ff                	push   $0xffffffff
c0108373:	eb 75                	jmp    c01083ea <isr_save>

c0108375 <isr_32>:
c0108375:	6a 00                	push   $0x0
c0108377:	6a 20                	push   $0x20
c0108379:	eb 6f                	jmp    c01083ea <isr_save>

c010837b <isr_33>:
c010837b:	6a 00                	push   $0x0
c010837d:	6a 21                	push   $0x21
c010837f:	eb 69                	jmp    c01083ea <isr_save>

c0108381 <isr_34>:
c0108381:	6a 00                	push   $0x0
c0108383:	6a 22                	push   $0x22
c0108385:	eb 63                	jmp    c01083ea <isr_save>

c0108387 <isr_35>:
c0108387:	6a 00                	push   $0x0
c0108389:	6a 23                	push   $0x23
c010838b:	eb 5d                	jmp    c01083ea <isr_save>

c010838d <isr_36>:
c010838d:	6a 00                	push   $0x0
c010838f:	6a 24                	push   $0x24
c0108391:	eb 57                	jmp    c01083ea <isr_save>

c0108393 <isr_37>:
c0108393:	6a 00                	push   $0x0
c0108395:	6a 25                	push   $0x25
c0108397:	eb 51                	jmp    c01083ea <isr_save>

c0108399 <isr_38>:
c0108399:	6a 00                	push   $0x0
c010839b:	6a 26                	push   $0x26
c010839d:	eb 4b                	jmp    c01083ea <isr_save>

c010839f <isr_39>:
c010839f:	6a 00                	push   $0x0
c01083a1:	6a 27                	push   $0x27
c01083a3:	eb 45                	jmp    c01083ea <isr_save>

c01083a5 <isr_40>:
c01083a5:	6a 00                	push   $0x0
c01083a7:	6a 28                	push   $0x28
c01083a9:	eb 3f                	jmp    c01083ea <isr_save>

c01083ab <isr_41>:
c01083ab:	6a 00                	push   $0x0
c01083ad:	6a 29                	push   $0x29
c01083af:	eb 39                	jmp    c01083ea <isr_save>

c01083b1 <isr_42>:
c01083b1:	6a 00                	push   $0x0
c01083b3:	6a 2a                	push   $0x2a
c01083b5:	eb 33                	jmp    c01083ea <isr_save>

c01083b7 <isr_43>:
c01083b7:	6a 00                	push   $0x0
c01083b9:	6a 2b                	push   $0x2b
c01083bb:	eb 2d                	jmp    c01083ea <isr_save>

c01083bd <isr_44>:
c01083bd:	6a 00                	push   $0x0
c01083bf:	6a 2c                	push   $0x2c
c01083c1:	eb 27                	jmp    c01083ea <isr_save>

c01083c3 <isr_45>:
c01083c3:	6a 00                	push   $0x0
c01083c5:	6a 2d                	push   $0x2d
c01083c7:	eb 21                	jmp    c01083ea <isr_save>

c01083c9 <isr_46>:
c01083c9:	6a 00                	push   $0x0
c01083cb:	6a 2e                	push   $0x2e
c01083cd:	eb 1b                	jmp    c01083ea <isr_save>

c01083cf <isr_47>:
c01083cf:	6a 00                	push   $0x0
c01083d1:	6a 2f                	push   $0x2f
c01083d3:	eb 15                	jmp    c01083ea <isr_save>

c01083d5 <isr_112>:
c01083d5:	6a 00                	push   $0x0
c01083d7:	6a 70                	push   $0x70
c01083d9:	eb 0f                	jmp    c01083ea <isr_save>

c01083db <isr_128>:
c01083db:	6a 00                	push   $0x0
c01083dd:	68 80 00 00 00       	push   $0x80
c01083e2:	eb 06                	jmp    c01083ea <isr_save>

c01083e4 <isr_pci>:
c01083e4:	6a 00                	push   $0x0
c01083e6:	6a 32                	push   $0x32
c01083e8:	eb 00                	jmp    c01083ea <isr_save>

c01083ea <isr_save>:
c01083ea:	50                   	push   %eax
c01083eb:	51                   	push   %ecx
c01083ec:	52                   	push   %edx
c01083ed:	53                   	push   %ebx
c01083ee:	55                   	push   %ebp
c01083ef:	56                   	push   %esi
c01083f0:	57                   	push   %edi
c01083f1:	1e                   	push   %ds
c01083f2:	06                   	push   %es
c01083f3:	0f a0                	push   %fs
c01083f5:	0f a8                	push   %gs
c01083f7:	66 ba 10 00          	mov    $0x10,%dx
c01083fb:	8e da                	mov    %edx,%ds
c01083fd:	8e c2                	mov    %edx,%es
c01083ff:	8e e2                	mov    %edx,%fs
c0108401:	8e ea                	mov    %edx,%gs
c0108403:	54                   	push   %esp
c0108404:	e8 5b d6 ff ff       	call   c0105a64 <irq_handler>
c0108409:	89 c4                	mov    %eax,%esp
c010840b:	0f a9                	pop    %gs
c010840d:	0f a1                	pop    %fs
c010840f:	07                   	pop    %es
c0108410:	1f                   	pop    %ds
c0108411:	5f                   	pop    %edi
c0108412:	5e                   	pop    %esi
c0108413:	5d                   	pop    %ebp
c0108414:	5b                   	pop    %ebx
c0108415:	5a                   	pop    %edx
c0108416:	59                   	pop    %ecx
c0108417:	58                   	pop    %eax
c0108418:	83 c4 08             	add    $0x8,%esp
c010841b:	cf                   	iret   
